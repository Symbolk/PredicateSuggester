id	line	column	filename	methodname	varname	vartype	else	return	right
556	62	8	AVLTree.java	insert	element	T	0	DEF	$ != null
557	63	12	AVLTree.java	insert	THIS	AVLTree	1	DEF	$.top == null
558	82	8	AVLTree.java	delete	element	T	0	RET	$ != null
17268	83	12	AVLTree.java	delete	node	Node	0	NIL-FOR	$ != null
559	86	16	AVLTree.java	delete	THIS	AVLTree	1	RET	node.$.element == element
559	86	16	AVLTree.java	delete	node	Node	1	RET	$.element == element
559	86	16	AVLTree.java	delete	element	T	1	RET	node.element == $
560	89	23	AVLTree.java	delete	THIS	AVLTree	0	RET	node.$.element.compareTo(element) > 0
560	89	23	AVLTree.java	delete	node	Node	0	RET	$.element.compareTo(element) > 0
560	89	23	AVLTree.java	delete	element	T	0	RET	node.element.compareTo($) > 0
17269	153	8	AVLTree.java	getNotSmaller	node	Node	0	NIL-FOR	$ != null
561	154	12	AVLTree.java	getNotSmaller	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) < 0
561	154	12	AVLTree.java	getNotSmaller	node	Node	1	RET	$.element.compareTo(reference) < 0
561	154	12	AVLTree.java	getNotSmaller	reference	T	1	RET	node.element.compareTo($) < 0
562	155	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.right == null
562	155	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.right == null
563	161	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.left == null
563	161	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.left == null
17270	184	8	AVLTree.java	getNotLarger	node	Node	0	NIL-FOR	$ != null
564	185	12	AVLTree.java	getNotLarger	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) > 0
564	185	12	AVLTree.java	getNotLarger	node	Node	1	RET	$.element.compareTo(reference) > 0
564	185	12	AVLTree.java	getNotLarger	reference	T	1	RET	node.element.compareTo($) > 0
565	186	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.left == null
565	186	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.left == null
566	192	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.right == null
566	192	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.right == null
1518	77	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ <= 0
1519	81	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ <= 0
1520	99	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NullArgumentException	$ == null
1521	102	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1521	102	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$.length == 0
1522	105	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d[0].length == 0
1522	105	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$[0].length == 0
1523	121	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1523	121	8	AbstractFieldMatrix.java	extractField	d	T[]	0	NoDataException	$.length == 0
17768	184	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
17768	184	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
17769	185	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
17769	185	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
17770	202	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
17770	202	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
17771	203	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
17771	203	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
17772	217	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
17772	217	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
17773	218	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
17773	218	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
17774	231	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
17774	231	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
17775	232	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
17775	232	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
17776	250	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
17776	250	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
17777	251	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
17777	251	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
17778	253	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
17778	253	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1524	272	8	AbstractFieldMatrix.java	power	p	int	0	NotPositiveException	$ < 0
1525	276	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NonSquareMatrixException	$.isSquare()
1526	280	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 0
1527	284	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 1
17779	301	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
17779	301	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
17779	301	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1528	302	12	AbstractFieldMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1528	302	12	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
17780	313	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
17780	313	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
17780	313	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
17781	332	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
17781	332	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
17781	332	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
17782	334	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
17782	334	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
17782	334	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
17783	350	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
17783	350	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
17784	351	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
17784	351	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1529	395	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1529	395	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1529	395	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1529	395	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1529	395	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1529	395	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1530	436	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1530	436	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1530	436	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1530	436	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1530	436	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
1530	436	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
17785	445	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
17785	445	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
17785	445	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
17786	447	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
17786	447	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
17786	447	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1531	459	8	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	NullArgumentException	$ == null
1532	463	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1533	468	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
17787	472	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
17787	472	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1534	473	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1534	473	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1534	473	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1534	473	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[r].length != nCols
17788	483	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
17788	483	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
17789	484	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
17789	484	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
17790	495	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
17790	495	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1535	508	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1535	508	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1535	508	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
17791	514	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
17791	514	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
17792	527	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
17792	527	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1536	540	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1536	540	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1536	540	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
17793	546	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
17793	546	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1537	563	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1537	563	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nCols
17794	567	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
17794	567	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1538	585	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1538	585	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nRows
17795	589	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
17795	589	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
17796	600	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
17796	600	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1539	613	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1539	613	8	AbstractFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1539	613	8	AbstractFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
17797	616	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
17797	616	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
17798	627	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
17798	627	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1540	640	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1540	640	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1540	640	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
17799	643	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
17799	643	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1541	691	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1541	691	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
17800	695	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
17800	695	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1542	706	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1542	706	8	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1542	706	8	AbstractFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
17801	711	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
17801	711	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
17802	713	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
17802	713	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1543	730	12	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1543	730	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nCols
17803	735	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
17803	735	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
17804	737	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
17804	737	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1544	752	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1544	752	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1544	752	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
17805	757	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
17805	757	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
17806	759	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
17806	759	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1545	776	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1545	776	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nRows
17807	781	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
17807	781	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
17808	783	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
17808	783	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
17809	798	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
17809	798	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
17810	799	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
17810	799	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
17811	813	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
17811	813	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
17812	814	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
17812	814	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
17813	829	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
17813	829	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
17814	830	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
17814	830	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
17815	847	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
17815	847	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
17816	848	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
17816	848	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
17817	860	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
17817	860	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
17818	861	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
17818	861	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
17819	875	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
17819	875	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
17820	876	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
17820	876	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
17821	891	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
17821	891	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
17822	892	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
17822	892	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
17823	909	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
17823	909	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
17824	910	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
17824	910	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
17825	956	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
17825	956	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1546	957	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
17826	961	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
17826	961	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1547	962	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
1548	984	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
1548	984	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
1549	987	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix<?> == false
1550	993	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getColumnDimension() != nCols
1550	993	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getRowDimension() != nRows
1550	993	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1550	993	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
17827	996	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
17827	996	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
17828	997	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
17828	997	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1551	998	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
1551	998	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
1551	998	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
1551	998	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
17829	1018	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
17829	1018	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
17830	1019	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
17830	1019	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1552	1033	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1552	1033	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= getRowDimension()
1552	1033	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1553	1047	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1553	1047	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= getColumnDimension()
1553	1047	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1554	1070	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1554	1070	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1555	1077	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1555	1077	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1556	1095	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1556	1095	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1557	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedRows.$.length == 0
1557	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedColumns.$.length == 0
1557	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1557	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1558	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1558	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1558	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1558	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1559	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1559	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1559	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1559	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1560	1153	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DimensionMismatchException	$.getColumnDimension() != m.getRowDimension()
1560	1153	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DimensionMismatchException	getColumnDimension() != $.getRowDimension()
1008	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	NullArgumentException	$ == null
1009	132	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	NullArgumentException	$ == null
1010	162	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
1010	162	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
17305	164	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
17305	164	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
17305	164	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
1011	169	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
1011	169	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
1087	82	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	NumberIsTooLargeException	x1 < $
1087	82	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	NumberIsTooLargeException	$ < x0
1088	101	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1088	101	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1089	106	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
1090	109	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	1	RET	$ == Integer.MIN_VALUE
1091	110	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	THIS	AbstractIntegerDistribution	0	RET	$.checkedCumulativeProbability(lower) >= p
1091	110	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	RET	checkedCumulativeProbability($) >= p
1091	110	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	checkedCumulativeProbability(lower) >= $
1092	119	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
1093	129	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	0	DEF	$
1094	132	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ > lower
1094	132	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	DEF	tmp > $
1095	137	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ < upper
1095	137	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	upper	int	0	DEF	tmp < $
17315	158	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	NIL-WHILE	$ + 1 < upper
17315	158	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	NIL-WHILE	lower + 1 < $
1096	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ < lower
1096	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ > upper
1096	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	DEF	xm < $
1096	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	DEF	xm > $
1097	170	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	pm	double	1	DEF	$ >= p
1097	170	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	p	double	1	DEF	pm >= $
1098	203	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
17316	208	8	AbstractIntegerDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
17316	208	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1099	229	8	AbstractIntegerDistribution.java	checkedCumulativeProbability	result	double	0	MathInternalError	Double.isNaN($)
3481	215	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y0.$.length != equations.getDimension()
3481	215	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y0.length != $.getDimension()
3481	215	8	AbstractIntegrator.java	integrate	y0	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
3482	218	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y.$.length != equations.getDimension()
3482	218	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y.length != $.getDimension()
3482	218	8	AbstractIntegrator.java	integrate	y	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
3483	304	12	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.statesInitialized
3484	323	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.state.evaluateStep(interpolator)
3484	323	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	state.evaluateStep($)
19243	329	12	AbstractIntegrator.java	acceptStep	occuringEvents	SortedSet<EventState>	0	NIL-WHILE	$.isEmpty()
3485	356	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	RET	$.isLastStep
3486	366	16	AbstractIntegrator.java	acceptStep	needReset	boolean	0	RET	$
3487	381	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	DEF	$.evaluateStep(interpolator)
3487	381	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	currentEvent.evaluateStep($)
3488	419	8	AbstractIntegrator.java	sanityChecks	threshold	double	0	NumberIsTooSmallException	dt <= $
3488	419	8	AbstractIntegrator.java	sanityChecks	dt	double	0	NumberIsTooSmallException	$ <= threshold
18985	172	8	AbstractLeastSquaresOptimizer.java	computeSigma	i	int	0	NIL-FOR	$ < nC
18985	172	8	AbstractLeastSquaresOptimizer.java	computeSigma	nC	int	0	NIL-FOR	i < $
3106	217	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	objectiveValue.$.length != target.$.length
3106	217	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	DimensionMismatchException	objectiveValue.length != $.length
3106	217	8	AbstractLeastSquaresOptimizer.java	computeResiduals	objectiveValue	double[]	0	DimensionMismatchException	$.length != target.length
18986	223	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < target.$.length
18986	223	8	AbstractLeastSquaresOptimizer.java	computeResiduals	i	int	0	NIL-FOR	$ < target.length
18986	223	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	NIL-FOR	i < $.length
3107	249	12	AbstractLeastSquaresOptimizer.java	parseOptimizationData	THIS	AbstractLeastSquaresOptimizer	0	DEF	$.data instanceof Weight
3108	265	8	AbstractLeastSquaresOptimizer.java	squareRoot	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
18987	268	12	AbstractLeastSquaresOptimizer.java	squareRoot	i	int	0	NIL-FOR	$ < dim
18987	268	12	AbstractLeastSquaresOptimizer.java	squareRoot	dim	int	0	NIL-FOR	i < $
18273	172	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	i	int	0	NIL-FOR	$ < nC
18273	172	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nC	int	0	NIL-FOR	i < $
1947	177	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	dsValue.$.length != nR
1947	177	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	dsValue	DerivativeStructure[]	0	DimensionMismatchException	$.length != nR
1947	177	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nR	int	0	DimensionMismatchException	dsValue.length != $
18274	181	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	i	int	0	NIL-FOR	$ < nR
18274	181	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nR	int	0	NIL-FOR	i < $
18275	183	12	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	j	int	0	NIL-FOR	$ < nC
18275	183	12	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nC	int	0	NIL-FOR	j < $
1948	372	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NumberIsTooSmallException	$.rows <= $.cols
18276	379	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
18276	379	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
18276	379	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
18277	405	8	AbstractLeastSquaresOptimizer.java	computeSigma	i	int	0	NIL-FOR	$ < nC
18277	405	8	AbstractLeastSquaresOptimizer.java	computeSigma	nC	int	0	NIL-FOR	i < $
1949	542	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	objectiveValue.$.length != target.$.length
1949	542	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	DimensionMismatchException	objectiveValue.length != $.length
1949	542	8	AbstractLeastSquaresOptimizer.java	computeResiduals	objectiveValue	double[]	0	DimensionMismatchException	$.length != target.length
18278	548	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < target.$.length
18278	548	8	AbstractLeastSquaresOptimizer.java	computeResiduals	i	int	0	NIL-FOR	$ < target.length
18278	548	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	NIL-FOR	i < $.length
1950	562	8	AbstractLeastSquaresOptimizer.java	squareRoot	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
18279	565	12	AbstractLeastSquaresOptimizer.java	squareRoot	i	int	0	NIL-FOR	$ < dim
18279	565	12	AbstractLeastSquaresOptimizer.java	squareRoot	dim	int	0	NIL-FOR	i < $
1874	131	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxCountExceededException	++$.iterations > $.maxIterations
2594	116	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	NullArgumentException	$ == null
2595	119	8	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	data.$.length != nobs * (nvars + 1)
2595	119	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DimensionMismatchException	$.length != nobs * (nvars + 1)
2595	119	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DimensionMismatchException	data.length != $ * (nvars + 1)
2595	119	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DimensionMismatchException	data.length != nobs * ($ + 1)
2596	122	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NumberIsTooSmallException	$ <= nvars
2596	122	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NumberIsTooSmallException	nobs <= $
18675	129	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
18675	129	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
2597	131	12	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	$.noIntercept
18676	134	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < cols
18676	134	12	AbstractMultipleLinearRegression.java	newSampleData	cols	int	0	NIL-FOR	j < $
2598	150	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NullArgumentException	$ == null
2599	153	8	AbstractMultipleLinearRegression.java	newYSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	y.$.length == 0
2599	153	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NoDataException	$.length == 0
2600	185	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NullArgumentException	$ == null
2601	188	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2601	188	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NoDataException	$.length == 0
2602	191	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	$.noIntercept
18677	196	12	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NIL-FOR	i < x.$.length
18677	196	12	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	NIL-FOR	$ < x.length
18677	196	12	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NIL-FOR	i < $.length
2603	197	16	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x[i].length != nVars
2603	197	16	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	DimensionMismatchException	x[$].length != nVars
2603	197	16	AbstractMultipleLinearRegression.java	newXSampleData	nVars	int	0	DimensionMismatchException	x[i].length != $
2603	197	16	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DimensionMismatchException	$[i].length != nVars
2604	226	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NullArgumentException	$ == null
2604	226	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	NullArgumentException	$ == null
2605	229	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != y.$.length
2605	229	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DimensionMismatchException	$.length != y.length
2605	229	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DimensionMismatchException	x.length != $.length
2606	232	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2606	232	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NoDataException	$.length == 0
2607	235	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	MathIllegalArgumentException	x[0].length + 1 > x.$.length
2607	235	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	MathIllegalArgumentException	$[0].length + 1 > $.length
2608	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != covariance.$.length
2608	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DimensionMismatchException	$.length != covariance.length
2608	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DimensionMismatchException	x.length != $.length
2609	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length > 0
2609	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length != covariance[0].length
2609	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length > 0
2609	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length != $[0].length
18678	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
18678	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
1240	61	8	AbstractMultivariateRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
17362	66	8	AbstractMultivariateRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
17362	66	8	AbstractMultivariateRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
3535	59	12	AbstractParameterizable.java	isSupported	THIS	AbstractParameterizable	0	RET	$.supportedName.equals(name)
3535	59	12	AbstractParameterizable.java	isSupported	name	String	0	RET	supportedName.equals($)
3536	73	8	AbstractParameterizable.java	complainIfNotSupported	THIS	AbstractParameterizable	0	UnknownParameterException	$.isSupported(name)
3536	73	8	AbstractParameterizable.java	complainIfNotSupported	name	String	0	UnknownParameterException	isSupported($)
19015	108	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
19015	108	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
19015	108	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
19016	110	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
3134	111	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
3135	115	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
3135	115	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
3135	115	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
3136	157	8	AbstractRandomGenerator.java	nextInt	n	int	0	NotStrictlyPositiveException	$ <= 0
3137	253	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
19017	261	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
3138	266	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
1269	112	8	AbstractRealDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1269	112	8	AbstractRealDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
1270	157	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1270	157	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1271	162	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
1272	167	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
1273	177	8	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	DEF	$ == Double.NEGATIVE_INFINITY
1274	178	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
17376	182	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(lowerBound) >= p
17376	182	16	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	cumulativeProbability($) >= p
17376	182	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(lowerBound) >= $
1275	188	8	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	DEF	$ == Double.POSITIVE_INFINITY
1276	189	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
17377	193	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(upperBound) < p
17377	193	16	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	cumulativeProbability($) < p
17377	193	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(upperBound) < $
1277	211	8	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.isSupportConnected()
1278	214	12	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	x - dx >= $.getSupportLowerBound()
1278	214	12	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	x - $ >= getSupportLowerBound()
1278	214	12	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	$ - dx >= getSupportLowerBound()
1279	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.cumulativeProbability(x - dx) == px
1279	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	0	RET	cumulativeProbability(x - dx) == $
1279	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	cumulativeProbability(x - $) == px
1279	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	cumulativeProbability($ - dx) == px
17378	218	20	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	NIL-WHILE	upperBound - lowerBound > $
17378	218	20	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	upperBound - $ > dx
17378	218	20	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	$ - lowerBound > dx
1280	220	24	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	1	DEF	$.cumulativeProbability(midPoint) < px
1280	220	24	AbstractRealDistribution.java	inverseCumulativeProbability	midPoint	double	1	DEF	cumulativeProbability($) < px
1280	220	24	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	1	DEF	cumulativeProbability(midPoint) < $
1281	269	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
17379	274	8	AbstractRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
17379	274	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1400	68	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ < 1
1401	71	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ < 1
17592	84	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
17592	84	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
17593	85	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
17593	85	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
17594	101	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
17594	101	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
17595	102	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
17595	102	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
17596	115	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
17596	115	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
17597	116	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
17597	116	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
17598	129	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
17598	129	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
17599	130	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
17599	130	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
17600	147	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
17600	147	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
17601	148	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
17601	148	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
17602	150	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
17602	150	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1402	169	8	AbstractRealMatrix.java	power	p	int	0	NotPositiveException	$ < 0
1403	173	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NonSquareMatrixException	$.isSquare()
1404	177	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 0
1405	181	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 1
17603	198	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
17603	198	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
17603	198	8	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1406	199	12	AbstractRealMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1406	199	12	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
1407	204	16	AbstractRealMatrix.java	power	maxI	int	0	DEF	$ == -1
17604	213	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ <= maxI
17604	213	8	AbstractRealMatrix.java	power	maxI	int	0	NIL-FOR	i <= $
17605	230	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
17605	230	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
17605	230	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
17606	232	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
17606	232	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
17606	232	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
17607	312	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
17607	312	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
17608	313	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
17608	313	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1408	351	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1408	351	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1408	351	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1408	351	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1408	351	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1408	351	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
17609	356	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < rowsCount
17609	356	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	NIL-FOR	i < $
1409	357	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[i].length < columnsCount
1409	357	12	AbstractRealMatrix.java	copySubMatrix	i	int	0	MatrixDimensionMismatchException	destination[$].length < columnsCount
1409	357	12	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[i].length < $
1409	357	12	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[i].length < columnsCount
1410	396	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < nCols
1410	396	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1410	396	8	AbstractRealMatrix.java	copySubMatrix	nCols	int	0	MatrixDimensionMismatchException	destination[0].length < $
1410	396	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1410	396	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < nCols
1410	396	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
17610	402	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
17610	402	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
17610	402	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
1411	404	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destinationI.$.length < nCols
1411	404	12	AbstractRealMatrix.java	copySubMatrix	destinationI	double[]	0	MatrixDimensionMismatchException	$.length < nCols
1411	404	12	AbstractRealMatrix.java	copySubMatrix	nCols	int	0	MatrixDimensionMismatchException	destinationI.length < $
17611	408	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
17611	408	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
17611	408	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1412	420	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1413	425	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
17612	429	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
17612	429	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1414	430	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1414	430	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1414	430	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1414	430	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[r].length != nCols
17613	440	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
17613	440	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
17614	441	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
17614	441	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
17615	452	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
17615	452	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1415	464	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1415	464	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1415	464	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
17616	470	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
17616	470	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
17617	481	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
17617	481	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1416	493	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1416	493	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1416	493	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
17618	499	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
17618	499	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1417	515	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1417	515	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nCols
17619	519	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
17619	519	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1418	535	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1418	535	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nRows
17620	539	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
17620	539	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
17621	549	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
17621	549	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1419	561	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1419	561	8	AbstractRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1419	561	8	AbstractRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
17622	564	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
17622	564	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
17623	574	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
17623	574	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1420	586	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1420	586	8	AbstractRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1420	586	8	AbstractRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
17624	589	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
17624	589	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1421	651	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1421	651	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
17625	655	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
17625	655	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1422	666	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1422	666	8	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1422	666	8	AbstractRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
17626	671	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
17626	671	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
17627	673	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
17627	673	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1423	691	12	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1423	691	12	AbstractRealMatrix.java	operate	v	RealVector	0	DimensionMismatchException	$.getDimension() != nCols
17628	696	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
17628	696	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
17629	698	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
17629	698	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1424	713	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1424	713	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1424	713	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
17630	718	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
17630	718	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
17631	720	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
17631	720	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1425	737	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1425	737	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DimensionMismatchException	$.getDimension() != nRows
17632	742	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
17632	742	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
17633	744	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
17633	744	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
17634	759	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
17634	759	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
17635	760	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
17635	760	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
17636	774	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
17636	774	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
17637	775	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
17637	775	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
17638	790	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
17638	790	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
17639	791	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
17639	791	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
17640	808	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
17640	808	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
17641	809	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
17641	809	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
17642	821	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
17642	821	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
17643	822	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
17643	822	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
17644	836	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
17644	836	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
17645	837	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
17645	837	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
17646	852	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
17646	852	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
17647	853	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
17647	853	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
17648	870	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
17648	870	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
17649	871	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
17649	871	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
1426	930	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
1426	930	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
1427	933	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
1428	939	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
1428	939	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
1428	939	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1428	939	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
17650	942	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
17650	942	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
17651	943	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
17651	943	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1429	944	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
1429	944	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
1429	944	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
1429	944	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
17652	964	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
17652	964	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
17653	965	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
17653	965	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
594	92	8	AbstractRegion.java	AbstractRegion	boundary	Collection<SubHyperplane<S>>	1	DEF	$.size() == 0
595	143	8	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	1	DEF	hyperplanes.$.length == 0
595	143	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$ == null
595	143	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$.length == 0
596	154	16	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	0	DEF	node.insertCut($.hyperplane)
596	154	16	AbstractRegion.java	AbstractRegion	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
17277	181	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
17277	181	8	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	NIL-WHILE	$ == null
597	183	12	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	DEF	node.insertCut($.copySelf())
597	183	12	AbstractRegion.java	insertCuts	node	BSPTree<S>	0	DEF	$.insertCut(inserted.copySelf())
598	188	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	RET	$.hasNext()
17278	195	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
599	237	8	AbstractRegion.java	isEmpty	node	BSPTree<S>	0	RET	$.getCut() == null
600	266	8	AbstractRegion.java	checkPoint	cell	BSPTree<S>	0	RET	$.getCut() == null
601	280	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getCut() != null
601	280	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getAttribute() == null
601	280	8	AbstractRegion.java	getTree	includeBoundaryAttributes	boolean	0	DEF	$
602	412	8	AbstractRegion.java	getSize	THIS	AbstractRegion	0	DEF	$.barycenter == null
603	427	8	AbstractRegion.java	getBarycenter	THIS	AbstractRegion	0	DEF	$.barycenter == null
604	471	8	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	RET	$.getCut() == null
605	472	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getAttribute()
606	484	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
606	484	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
606	484	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
607	485	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
607	485	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
608	489	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
608	489	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
609	493	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
609	493	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
610	499	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
610	499	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
610	499	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
611	500	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
611	500	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
612	504	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
612	504	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
613	508	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
613	508	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
614	520	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
614	520	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
615	526	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())
615	526	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().getHyperplane().sameOrientationAs($.getHyperplane())
616	527	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
616	527	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
617	530	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
617	530	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
618	534	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
618	534	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
619	537	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
619	537	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
620	602	8	AbstractRegion.java	recurseIntersection	node	BSPTree<S>	0	RET	$.getCut() == null
621	616	12	AbstractRegion.java	recurseIntersection	plus	SubHyperplane<S>	1	RET	$ == null
622	618	19	AbstractRegion.java	recurseIntersection	minus	SubHyperplane<S>	1	RET	$ == null
623	652	8	AbstractRegion.java	recurseTransform	node	BSPTree<S>	0	RET	$.getCut() == null
624	659	8	AbstractRegion.java	recurseTransform	attribute	BoundaryAttribute<S>	0	DEF	$ != null
2802	98	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
2803	101	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
2803	101	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
18720	109	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
18720	109	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
18721	111	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
18721	111	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
2804	112	16	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
2804	112	16	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
2805	133	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
2805	133	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
18722	145	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
18722	145	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
18722	145	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
2806	149	12	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
2806	149	12	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
18723	152	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
18723	152	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
18724	155	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
18724	155	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
2807	156	20	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
2807	156	20	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
2807	156	20	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
2808	161	16	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
2809	168	12	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
18725	170	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
18725	170	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
2810	217	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
2810	217	8	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
18726	226	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
18726	226	8	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
18727	229	12	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
18727	229	12	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
18728	247	8	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
18728	247	8	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
2811	250	12	AbstractSimplex.java	evaluate	vertex	PointValuePair	0	DEF	Double.isNaN($.getValue())
18729	268	8	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
18729	268	8	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
2812	269	12	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
2812	269	12	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
2812	269	12	AbstractSimplex.java	replaceWorstPoint	pointValuePair	PointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
2812	269	12	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<PointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
2813	296	8	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
2813	296	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
2813	296	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
2814	311	8	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
2814	311	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
2814	311	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
2815	325	8	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
2815	325	8	AbstractSimplex.java	setPoints	points	PointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
18730	341	8	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
18730	341	8	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
1962	100	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
1963	103	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
1963	103	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
18295	111	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
18295	111	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
18296	113	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
18296	113	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
1964	114	16	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
1964	114	16	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
1965	135	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
1965	135	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
18297	147	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
18297	147	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
18297	147	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
1966	151	12	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
1966	151	12	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
18298	154	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
18298	154	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
18299	157	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
18299	157	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1967	158	20	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
1967	158	20	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
1967	158	20	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
1968	163	16	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
1969	170	12	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
18300	172	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
18300	172	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1970	219	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
1970	219	8	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
18301	228	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
18301	228	8	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
18302	231	12	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
18302	231	12	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
18303	249	8	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
18303	249	8	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
1971	252	12	AbstractSimplex.java	evaluate	vertex	PointValuePair	0	DEF	Double.isNaN($.getValue())
18304	270	8	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
18304	270	8	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
1972	271	12	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
1972	271	12	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
1972	271	12	AbstractSimplex.java	replaceWorstPoint	pointValuePair	PointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
1972	271	12	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<PointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
1973	298	8	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1973	298	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
1973	298	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1974	313	8	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1974	313	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
1974	313	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1975	327	8	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
1975	327	8	AbstractSimplex.java	setPoints	points	PointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
18305	343	8	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
18305	343	8	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
3345	181	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState == null
3345	181	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState == null
19109	194	6	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.interpolatedSecondaryState.$.length
19109	194	6	AbstractStepInterpolator.java	AbstractStepInterpolator	i	int	0	NIL-FOR	$ < interpolatedSecondaryState.length
3346	213	6	AbstractStepInterpolator.java	allocateInterpolatedArrays	dimension	int	1	DEF	$ < 0
3347	225	10	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	1	DEF	$.secondaryMappers == null
19110	231	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
19110	231	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	i	int	0	NIL-FOR	$ < secondaryMappers.length
3348	407	6	AbstractStepInterpolator.java	evaluateCompleteInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
3349	489	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
3350	520	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
3351	537	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
19111	538	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
19111	538	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
19112	582	4	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
19112	582	4	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < secondaryMappers.length
3352	587	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
19113	591	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
19113	591	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
2243	61	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2244	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
2244	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2244	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
2244	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
2245	131	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	NullArgumentException	$ == null
2246	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
2246	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
2246	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
2246	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
18512	152	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
18512	152	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
2247	167	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
2247	167	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
2248	170	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
650	125	8	AbstractSubHyperplane.java	recurseTransform	node	BSPTree<T>	0	RET	$.getCut() == null
651	132	8	AbstractSubHyperplane.java	recurseTransform	attribute	BoundaryAttribute<T>	0	DEF	$ != null
2366	85	8	AbstractUnivariateStatistic.java	setData	values	double[]	0	NullArgumentException	$ == null
2367	89	8	AbstractUnivariateStatistic.java	setData	begin	int	0	NotPositiveException	$ < 0
2368	93	8	AbstractUnivariateStatistic.java	setData	length	int	0	NotPositiveException	$ < 0
2369	97	8	AbstractUnivariateStatistic.java	setData	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
2369	97	8	AbstractUnivariateStatistic.java	setData	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
2369	97	8	AbstractUnivariateStatistic.java	setData	begin	int	0	NumberIsTooLargeException	$ + length > values.length
2369	97	8	AbstractUnivariateStatistic.java	setData	length	int	0	NumberIsTooLargeException	begin + $ > values.length
2370	186	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
2371	190	8	AbstractUnivariateStatistic.java	test	begin	int	0	NotPositiveException	$ < 0
2372	194	8	AbstractUnivariateStatistic.java	test	length	int	0	NotPositiveException	$ < 0
2373	198	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
2373	198	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
2373	198	8	AbstractUnivariateStatistic.java	test	begin	int	0	NumberIsTooLargeException	$ + length > values.length
2373	198	8	AbstractUnivariateStatistic.java	test	length	int	0	NumberIsTooLargeException	begin + $ > values.length
2374	203	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
2374	203	8	AbstractUnivariateStatistic.java	test	allowEmpty	boolean	0	RET	$
2375	284	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
2375	284	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	NullArgumentException	$ == null
2376	288	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DimensionMismatchException	weights.$.length != values.$.length
2376	288	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DimensionMismatchException	weights.length != $.length
2376	288	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DimensionMismatchException	$.length != values.length
18543	293	8	AbstractUnivariateStatistic.java	test	i	int	0	NIL-FOR	$ < begin + length
18543	293	8	AbstractUnivariateStatistic.java	test	begin	int	0	NIL-FOR	i < $ + length
18543	293	8	AbstractUnivariateStatistic.java	test	length	int	0	NIL-FOR	i < begin + $
2377	294	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isNaN(weights[$])
2377	294	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isNaN($[i])
2378	297	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isInfinite(weights[$])
2378	297	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
2379	300	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	weights[$] < 0
2379	300	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	$[i] < 0
2380	303	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] > 0.0
2380	303	12	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
2380	303	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] > 0.0
2381	308	8	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	MathIllegalArgumentException	$
19006	111	8	AbstractWell.java	AbstractWell	j	int	0	NIL-FOR	$ < r
19006	111	8	AbstractWell.java	AbstractWell	r	int	0	NIL-FOR	j < $
3119	154	8	AbstractWell.java	setSeed	seed	int[]	0	RET	$ == null
3120	161	8	AbstractWell.java	setSeed	THIS	AbstractWell	0	DEF	seed.$.length < $.v.$.length
3120	161	8	AbstractWell.java	setSeed	seed	int[]	0	DEF	$.length < v.length
19007	162	12	AbstractWell.java	setSeed	THIS	AbstractWell	0	NIL-FOR	i < $.v.$.length
19007	162	12	AbstractWell.java	setSeed	i	int	0	NIL-FOR	$ < v.length
19169	226	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-DOWHILE	$.isLastStep
19170	229	12	AdamsBashforthIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
19171	235	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.mainSetDimension
19171	235	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < mainSetDimension
3429	245	16	AdamsBashforthIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
19172	265	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
19172	265	12	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
19172	265	12	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
3430	279	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.isLastStep
3431	284	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.resetOccurred
3432	300	16	AdamsBashforthIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
19165	243	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-DOWHILE	$.isLastStep
19166	246	12	AdamsMoultonIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
19167	259	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
19167	259	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
19167	259	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
3425	268	16	AdamsMoultonIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
19168	282	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
19168	282	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
19168	282	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
3426	297	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.isLastStep
3427	302	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.resetOccurred
3428	319	16	AdamsMoultonIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
19230	167	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
19231	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
19231	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
3479	193	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
19232	227	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
19232	227	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
19232	227	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
19233	232	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
19233	232	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
19233	232	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
19234	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < y.$.length
19234	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < y.length
19234	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	y	double[][]	0	NIL-FOR	i < $.length
19235	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < aI.$.length
19235	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < aI.length
19235	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	aI	double[]	0	NIL-FOR	j < $.length
19236	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < yI.$.length
19236	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < yI.length
19236	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	yI	double[]	0	NIL-FOR	j < $.length
19237	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
19237	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
19237	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
19238	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
19238	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
19238	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
3464	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
3464	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
3464	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
3464	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
3465	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance.$.length != $.mainSetDimension
3465	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance != null
3466	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance != null
3466	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance.$.length != $.mainSetDimension
3467	253	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
19218	263	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
19218	263	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
19218	263	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
3468	272	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
19219	277	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
19219	277	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
19219	277	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
19220	284	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
19220	284	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
19220	284	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
3469	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
3469	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
3470	301	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
3470	301	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
3471	304	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
3472	325	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	NumberIsTooSmallException	FastMath.abs(h) < $.minStep
3472	325	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	NumberIsTooSmallException	FastMath.abs($) < minStep
3473	326	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
3474	334	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
3474	334	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
3475	336	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
3475	336	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
2384	307	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
2385	311	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
18544	321	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
2386	323	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
2386	323	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
2386	323	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
2387	326	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
2387	326	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
2387	326	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
2388	338	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
2389	340	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
3311	43	8	ArgUtils.java	flatten	array	Object[]	0	DEF	$ != null
3312	45	16	ArgUtils.java	flatten	THIS	ArgUtils	1	DEF	$.o instanceof Object[]
11	67	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
11	67	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
12	116	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	$ == k
12	116	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
12	116	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	n == $
13	119	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
13	119	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
13	119	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
14	123	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
14	123	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
15	133	8	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
17178	136	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
17178	136	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
16	140	15	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
17179	144	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
17179	144	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
17180	160	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
17180	160	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
17	197	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
17	197	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
17	197	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
18	200	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
18	200	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
18	200	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
19	203	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
19	203	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
20	206	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
17181	211	8	ArithmeticUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
17181	211	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
21	242	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
21	242	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
21	242	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
22	245	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
22	245	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
22	245	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
23	253	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
24	261	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
25	265	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
25	265	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
17182	275	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
17182	275	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
17183	280	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
17183	280	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
26	312	8	ArithmeticUtils.java	factorial	n	int	0	NotPositiveException	$ < 0
27	316	8	ArithmeticUtils.java	factorial	n	int	0	MathArithmeticException	$ > 20
28	336	8	ArithmeticUtils.java	factorialDouble	n	int	0	NotPositiveException	$ < 0
29	340	8	ArithmeticUtils.java	factorialDouble	n	int	0	RET	$ < 21
30	354	8	ArithmeticUtils.java	factorialLog	n	int	0	NotPositiveException	$ < 0
31	358	8	ArithmeticUtils.java	factorialLog	n	int	0	RET	$ < 21
17184	362	8	ArithmeticUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
17184	362	8	ArithmeticUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
32	401	8	ArithmeticUtils.java	gcd	a	int	0	MathArithmeticException:RET	$ == 0
32	401	8	ArithmeticUtils.java	gcd	b	int	0	MathArithmeticException:RET	$ == 0
33	403	12	ArithmeticUtils.java	gcd	a	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
33	403	12	ArithmeticUtils.java	gcd	b	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
34	414	8	ArithmeticUtils.java	gcd	a	int	0	DEF	$ < 0
35	415	12	ArithmeticUtils.java	gcd	a	int	1	DEF	Integer.MIN_VALUE == $
36	422	8	ArithmeticUtils.java	gcd	b	int	0	DEF	$ < 0
37	423	12	ArithmeticUtils.java	gcd	b	int	1	DEF	Integer.MIN_VALUE == $
38	430	8	ArithmeticUtils.java	gcd	useLong	boolean	0	MathArithmeticException:RET	$
39	431	12	ArithmeticUtils.java	gcd	al	long	0	MathArithmeticException	$ == bl
39	431	12	ArithmeticUtils.java	gcd	bl	long	0	MathArithmeticException	al == $
40	438	12	ArithmeticUtils.java	gcd	al	long	0	MathArithmeticException:RET	$ == 0
41	439	16	ArithmeticUtils.java	gcd	bl	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
42	477	8	ArithmeticUtils.java	gcdPositive	a	int	1	RET	$ == 0
43	480	13	ArithmeticUtils.java	gcdPositive	b	int	0	RET	$ == 0
17185	497	8	ArithmeticUtils.java	gcdPositive	a	int	0	NIL-WHILE	$ != b
17185	497	8	ArithmeticUtils.java	gcdPositive	b	int	0	NIL-WHILE	a != $
44	542	8	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException:RET	$ == 0
44	542	8	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException:RET	$ == 0
45	543	12	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException	$ == Long.MIN_VALUE
45	543	12	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException	$ == Long.MIN_VALUE
46	554	8	ArithmeticUtils.java	gcd	u	long	0	DEF	$ > 0
47	557	8	ArithmeticUtils.java	gcd	v	long	0	DEF	$ > 0
17186	562	8	ArithmeticUtils.java	gcd	u	long	0	NIL-WHILE	($ & 1) == 0
17186	562	8	ArithmeticUtils.java	gcd	v	long	0	NIL-WHILE	($ & 1) == 0
17186	562	8	ArithmeticUtils.java	gcd	k	int	0	NIL-WHILE	$ < 63
48	568	8	ArithmeticUtils.java	gcd	k	int	0	MathArithmeticException	$ == 63
17187	577	8	ArithmeticUtils.java	gcd	t	long	0	NIL-DOWHILE	$ != 0
17188	580	12	ArithmeticUtils.java	gcd	t	long	0	NIL-WHILE	($ & 1) == 0
49	584	12	ArithmeticUtils.java	gcd	t	long	1	DEF	$ > 0
50	620	8	ArithmeticUtils.java	lcm	a	int	0	RET	$ == 0
50	620	8	ArithmeticUtils.java	lcm	b	int	0	RET	$ == 0
51	624	8	ArithmeticUtils.java	lcm	lcm	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
52	654	8	ArithmeticUtils.java	lcm	a	long	0	RET	$ == 0
52	654	8	ArithmeticUtils.java	lcm	b	long	0	RET	$ == 0
53	658	8	ArithmeticUtils.java	lcm	lcm	long	0	MathArithmeticException	$ == Long.MIN_VALUE
54	677	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
54	677	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
55	695	8	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ > b
55	695	8	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a > $
56	699	12	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ < 0
57	700	16	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ < 0
58	702	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
58	702	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
59	707	23	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ > 0
60	709	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
60	709	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
61	719	19	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ > 0
62	724	16	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
62	724	16	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
63	749	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
63	749	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
64	767	8	ArithmeticUtils.java	subAndCheck	b	long	1	MathArithmeticException	$ == Long.MIN_VALUE
65	768	12	ArithmeticUtils.java	subAndCheck	a	long	1	DEF	$ < 0
66	789	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
17189	795	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
67	796	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
68	815	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
17190	821	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
69	822	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
70	841	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
17191	847	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
71	848	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
72	867	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
17192	873	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
73	874	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
74	893	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
75	909	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
17193	915	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
76	916	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
77	936	8	ArithmeticUtils.java	pow	e	BigInteger	0	NotPositiveException	$.compareTo(BigInteger.ZERO) < 0
17194	942	8	ArithmeticUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
78	943	12	ArithmeticUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
79	974	8	ArithmeticUtils.java	stirlingS2	k	int	0	NotPositiveException	$ < 0
80	977	8	ArithmeticUtils.java	stirlingS2	n	int	0	NumberIsTooLargeException	k > $
80	977	8	ArithmeticUtils.java	stirlingS2	k	int	0	NumberIsTooLargeException	$ > n
81	983	8	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	0	DEF	$ == null
17195	992	12	ArithmeticUtils.java	stirlingS2	THIS	ArithmeticUtils	0	NIL-FOR	i < stirlingS2.$.length
17195	992	12	ArithmeticUtils.java	stirlingS2	i	int	0	NIL-FOR	$ < stirlingS2.length
17195	992	12	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	0	NIL-FOR	i < $.length
17196	997	16	ArithmeticUtils.java	stirlingS2	j	int	0	NIL-FOR	$ < i
17196	997	16	ArithmeticUtils.java	stirlingS2	i	int	0	NIL-FOR	j < $
82	1007	8	ArithmeticUtils.java	stirlingS2	THIS	ArithmeticUtils	1	RET	n < stirlingS2.$.length
82	1007	8	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	1	RET	n < $.length
82	1007	8	ArithmeticUtils.java	stirlingS2	n	int	1	RET	$ < stirlingS2.length
83	1012	12	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 0
84	1014	19	ArithmeticUtils.java	stirlingS2	n	int	1	RET	k == $
84	1014	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == n
84	1014	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 1
85	1016	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 2
86	1018	19	ArithmeticUtils.java	stirlingS2	n	int	1	RET	k == $ - 1
86	1018	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == n - 1
17197	1024	16	ArithmeticUtils.java	stirlingS2	j	int	0	NIL-FOR	$ <= k
17197	1024	16	ArithmeticUtils.java	stirlingS2	k	int	0	NIL-FOR	j <= $
87	1027	20	ArithmeticUtils.java	stirlingS2	sum	long	0	MathArithmeticException	$ < 0
88	1052	8	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ > b
88	1052	8	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a > $
89	1058	12	ArithmeticUtils.java	addAndCheck	a	long	1	MathArithmeticException	$ < 0
90	1059	16	ArithmeticUtils.java	addAndCheck	b	long	1	MathArithmeticException	$ < 0
91	1061	20	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
91	1061	20	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
92	1075	16	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
92	1075	16	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
93	1094	8	ArithmeticUtils.java	checkBinomial	n	int	0	NumberIsTooLargeException	$ < k
93	1094	8	ArithmeticUtils.java	checkBinomial	k	int	0	NumberIsTooLargeException	n < $
94	1098	8	ArithmeticUtils.java	checkBinomial	n	int	0	NotPositiveException	$ < 0
1501	157	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
1502	162	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NoDataException	$ == 0
1503	166	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
17731	169	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
17731	169	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
1504	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	d[r].length != nCols
1504	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1504	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1504	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DimensionMismatchException	$[r].length != nCols
17732	202	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
17732	202	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
17733	237	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
17733	237	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
17734	241	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
17734	241	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
17735	265	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
17735	265	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
17736	269	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
17736	269	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
17737	295	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
17737	295	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
17738	298	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
17738	298	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
17739	300	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
17739	300	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1505	333	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DimensionMismatchException	$.data == null
1506	334	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1507	337	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1508	341	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1509	346	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
17740	350	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
17740	350	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1510	351	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1510	351	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1510	351	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1510	351	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[i].length != nCols
1511	419	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1511	419	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1511	419	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
17741	423	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
17741	423	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
17742	426	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
17742	426	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1512	439	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1512	439	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1512	439	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
17743	444	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
17743	444	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
17744	446	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
17744	446	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
17745	461	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
17745	461	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
17746	463	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
17746	463	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
17747	476	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
17747	476	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
17748	478	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
17748	478	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
17749	494	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
17749	494	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
17750	496	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
17750	496	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
17751	512	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
17751	512	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
17752	514	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
17752	514	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
17753	527	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
17753	527	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
17754	528	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
17754	528	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
17755	542	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
17755	542	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
17756	543	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
17756	543	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
17757	559	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
17757	559	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
17758	560	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
17758	560	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
17759	577	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
17759	577	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
17760	578	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
17760	578	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
17761	594	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
17761	594	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1680	102	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
1681	105	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullArgumentException	$ == null
1682	109	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NoDataException	$ == 0
1683	113	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	NoDataException	$ == 0
18034	116	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
18034	116	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
1684	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	d[r].length != nCols
1684	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1684	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1684	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DimensionMismatchException	$[r].length != nCols
18035	135	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
18035	135	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
18036	170	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
18036	170	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
18037	174	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
18037	174	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
18038	197	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
18038	197	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
18039	201	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
18039	201	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
18040	231	8	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
18040	231	8	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
18041	234	12	Array2DRowRealMatrix.java	multiply	mRow	int	0	NIL-FOR	$ < nSum
18041	234	12	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	mRow < $
18042	238	12	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
18042	238	12	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
18043	241	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
18043	241	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1685	272	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DimensionMismatchException	$.data == null
1686	273	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1687	276	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1688	281	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1689	286	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
18044	290	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
18044	290	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1690	291	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1690	291	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1690	291	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1690	291	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[i].length != nCols
1691	354	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1691	354	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1691	354	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
18045	358	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
18045	358	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
18046	361	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
18046	361	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1692	375	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1692	375	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1692	375	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
18047	380	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
18047	380	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
18048	382	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
18048	382	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
18049	398	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
18049	398	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
18050	400	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
18050	400	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
18051	413	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
18051	413	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
18052	415	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
18052	415	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
18053	431	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
18053	431	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
18054	433	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
18054	433	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
18055	449	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
18055	449	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
18056	451	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
18056	451	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
18057	464	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
18057	464	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
18058	465	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
18058	465	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
18059	479	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
18059	479	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
18060	480	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
18060	480	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
18061	496	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
18061	496	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
18062	497	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
18062	497	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
18063	514	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
18063	514	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
18064	515	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
18064	515	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
18065	531	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
18065	531	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1783	149	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	d.$.length == 0
1783	149	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	ZeroException	$.length == 0
1784	191	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1784	191	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1784	191	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1784	191	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1785	213	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1785	213	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1785	213	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1785	213	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
18159	232	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18159	232	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
1786	392	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1786	392	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1786	392	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
1787	416	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1787	416	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1787	416	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
18160	443	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18160	443	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
18161	461	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18161	461	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
18162	475	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18162	475	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
18163	493	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18163	493	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
18164	502	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18164	502	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
18165	510	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18165	510	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
18166	519	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18166	519	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
18167	527	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18167	527	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
18168	536	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18168	536	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
18169	544	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18169	544	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
18170	555	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18170	555	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
18171	565	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18171	565	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
18172	575	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18172	575	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
18173	588	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18173	588	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
18174	606	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18174	606	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
18175	624	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18175	624	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
18176	638	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18176	638	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
18177	661	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18177	661	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
18178	693	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18178	693	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
18179	711	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18179	711	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
18180	743	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
18180	743	12	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
18181	744	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
18181	744	16	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
18182	761	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
18182	761	8	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
18183	762	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
18183	762	12	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1788	808	8	ArrayFieldVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
18184	836	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
18184	836	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
18184	836	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
1789	892	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DimensionMismatchException	$.data.$.length != n
1789	892	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1790	906	8	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
1790	906	8	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
1791	909	8	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
1792	916	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
1792	916	12	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
18185	920	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
18185	920	12	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1793	921	16	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
1793	921	16	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
1793	921	16	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
1794	953	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	OutOfRangeException	index >= $.getDimension()
1794	953	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1794	953	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1356	105	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1357	123	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1358	126	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1358	126	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NumberIsTooLargeException	$.length < pos + size
1358	126	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1358	126	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
17529	140	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
17529	140	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
17529	140	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
1359	157	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NullArgumentException	$ == null
1360	160	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1360	160	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NumberIsTooLargeException	$.length < pos + size
1360	160	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1360	160	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
17530	164	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
17530	164	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
17530	164	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
1361	176	8	ArrayRealVector.java	ArrayRealVector	v	RealVector	0	NullArgumentException	$ == null
17531	180	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17531	180	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
17532	227	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l2
17532	227	8	ArrayRealVector.java	ArrayRealVector	l2	int	0	NIL-FOR	i < $
17533	241	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l1
17533	241	8	ArrayRealVector.java	ArrayRealVector	l1	int	0	NIL-FOR	i < $
1362	296	8	ArrayRealVector.java	add	v	RealVector	1	RET	$ instanceof ArrayRealVector
17534	302	12	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < dim
17534	302	12	ArrayRealVector.java	add	dim	int	0	NIL-FOR	i < $
17535	310	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1363	322	8	ArrayRealVector.java	subtract	v	RealVector	1	RET	$ instanceof ArrayRealVector
17536	328	12	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < dim
17536	328	12	ArrayRealVector.java	subtract	dim	int	0	NIL-FOR	i < $
17537	336	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
17538	353	8	ArrayRealVector.java	mapToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17538	353	8	ArrayRealVector.java	mapToSelf	i	int	0	NIL-FOR	$ < data.length
17539	362	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17539	362	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
17540	371	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17540	371	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
17541	380	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17541	380	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
17542	389	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17542	389	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
1364	399	8	ArrayRealVector.java	ebeMultiply	v	RealVector	1	RET	$ instanceof ArrayRealVector
17543	405	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < dim
17543	405	12	ArrayRealVector.java	ebeMultiply	dim	int	0	NIL-FOR	i < $
17544	412	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17544	412	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
1365	423	8	ArrayRealVector.java	ebeDivide	v	RealVector	1	RET	$ instanceof ArrayRealVector
17545	429	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < dim
17545	429	12	ArrayRealVector.java	ebeDivide	dim	int	0	NIL-FOR	i < $
17546	436	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17546	436	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
1366	456	8	ArrayRealVector.java	dotProduct	v	RealVector	0	RET	$ instanceof ArrayRealVector
17547	460	12	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17547	460	12	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
1367	501	8	ArrayRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
17548	505	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17548	505	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
17549	513	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17549	513	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
1368	525	8	ArrayRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof ArrayRealVector
17550	529	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17550	529	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
17551	537	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17551	537	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
1369	549	8	ArrayRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
17552	553	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17552	553	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
17553	561	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17553	561	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
1370	572	8	ArrayRealVector.java	outerProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
17554	577	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
17554	577	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
17555	578	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
17555	578	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
17556	587	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
17556	587	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
17557	588	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
17557	588	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1371	646	8	ArrayRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
1372	685	8	ArrayRealVector.java	setSubVector	v	RealVector	1	DEF	$ instanceof ArrayRealVector
17558	689	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
17558	689	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
17558	689	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
1373	758	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DimensionMismatchException	$.data.$.length != n
1373	758	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1374	772	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
1375	788	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
1376	793	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
1377	804	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
1377	804	8	ArrayRealVector.java	equals	other	Object	0	RET	this == $
1378	808	8	ArrayRealVector.java	equals	other	Object	0	RET	$ instanceof RealVector
1379	813	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
1379	813	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
1380	817	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
17559	821	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17559	821	8	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1381	822	12	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
1381	822	12	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
1381	822	12	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
1382	834	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
1383	851	8	ArrayRealVector.java	combineToSelf	y	RealVector	1	DEF	$ instanceof ArrayRealVector
17560	854	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
17560	854	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
17561	859	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
17561	859	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
17562	870	8	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17562	870	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
17563	883	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
17563	883	8	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
17564	915	8	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
17564	915	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
17565	928	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
17565	928	8	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
18781	296	8	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
18781	296	8	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
2858	300	12	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= -$.initialTrustRegionRadius
2858	300	12	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= -initialTrustRegionRadius
2859	301	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= ZERO
2859	301	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= ZERO
2860	312	19	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(j) <= $.initialTrustRegionRadius
2860	312	19	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	upperDifference.getEntry($) <= initialTrustRegionRadius
2861	313	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.upperDifference.getEntry(j) <= ZERO
2861	313	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	upperDifference.getEntry($) <= ZERO
18782	407	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18782	407	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2862	444	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex != kbase
2862	444	12	BOBYQAOptimizer.java	bobyqb	kbase	int	0	DEF	trustRegionCenterInterpolationPointIndex != $
18783	446	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18783	446	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18784	447	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
18784	447	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2863	448	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2863	448	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
2864	455	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() > npt
2864	455	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	getEvaluations() > $
18785	456	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18785	456	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18786	458	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18786	458	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18787	462	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18787	462	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2865	495	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
2865	495	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
2866	500	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
2866	500	16	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
2867	514	16	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
2867	514	16	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
2867	514	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
2867	514	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
18788	519	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18788	519	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2868	521	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.lowerDifference.getEntry(j)
2868	521	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2869	524	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.upperDifference.getEntry(j)
2869	524	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2870	527	20	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2870	527	20	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
18789	529	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18789	529	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2871	535	24	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2871	535	24	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
2872	554	12	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
2872	554	12	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
18790	559	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18790	559	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18791	562	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18791	562	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18792	568	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18792	568	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18793	572	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
18793	572	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
18794	583	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
18794	583	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
18795	586	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18795	586	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18796	591	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18796	591	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18797	593	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18797	593	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18798	597	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18798	597	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18799	603	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18799	603	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18800	606	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
18800	606	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
18801	618	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18801	618	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18802	620	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18802	620	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18803	624	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
18803	624	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
18804	633	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18804	633	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2873	642	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
18805	674	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18805	674	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18806	685	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18806	685	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18807	689	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18807	689	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18808	699	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
18808	699	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
18809	701	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18809	701	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18810	705	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18810	705	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18811	712	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18811	712	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18812	717	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18812	717	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18813	722	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18813	722	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2874	741	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
2875	745	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
2875	745	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
2875	745	16	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
18814	746	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18814	746	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18815	764	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18815	764	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2876	765	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2876	765	20	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
18816	769	20	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
18816	769	20	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
18817	778	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18817	778	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2877	787	20	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2877	787	20	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2877	787	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
18818	808	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18818	808	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2878	816	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.lowerDifference.getEntry(i)
2878	816	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2879	819	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.upperDifference.getEntry(i)
2879	819	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2880	826	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
2881	828	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
18819	839	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18819	839	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18820	841	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
18820	841	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2882	843	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
2882	843	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
18821	850	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18821	850	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2883	860	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
2883	860	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
2884	866	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
2885	867	16	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
2886	872	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
2887	875	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
2888	882	16	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2888	882	16	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2889	888	16	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2889	888	16	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
18822	895	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18822	895	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18823	897	24	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
18823	897	24	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
18824	906	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18824	906	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2890	915	24	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2890	915	24	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2890	915	24	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
2891	926	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
2891	926	20	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
18825	941	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18825	941	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18826	943	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
18826	943	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
18827	948	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
18827	948	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
18828	950	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18828	950	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18829	959	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18829	959	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18830	963	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18830	963	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18831	965	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
18831	965	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
18832	969	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18832	969	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18833	973	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18833	973	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18834	977	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18834	977	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2892	983	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2892	983	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
18835	987	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18835	987	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18836	992	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
18836	992	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2893	993	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2893	993	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
18837	1000	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18837	1000	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18838	1002	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18838	1002	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18839	1006	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18839	1006	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2894	1016	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
18840	1017	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18840	1017	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18841	1021	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
18841	1021	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
18842	1023	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18842	1023	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18843	1026	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18843	1026	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18844	1030	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18844	1030	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18845	1032	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18845	1032	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18846	1040	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18846	1040	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18847	1042	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18847	1042	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2895	1046	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2895	1046	20	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2896	1054	27	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2896	1054	27	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
2897	1075	16	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
2897	1075	16	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
2898	1078	16	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
18848	1079	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
18848	1079	20	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
2899	1080	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
2899	1080	24	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
2900	1083	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
2900	1083	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
2901	1086	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
2901	1086	24	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
2902	1098	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
2903	1101	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
2903	1101	12	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
2903	1101	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
18849	1118	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18849	1118	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18850	1120	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18850	1120	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2904	1125	16	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
2904	1125	16	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
2905	1137	12	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
2906	1139	16	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2907	1142	20	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2907	1142	20	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2908	1154	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2909	1157	12	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
2910	1160	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta, dnorm) > $
2910	1160	12	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($, dnorm) > rho
2910	1160	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta, $) > rho
2911	1169	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
2911	1169	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
2912	1172	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
2913	1174	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
2914	1188	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2915	1194	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
2915	1194	12	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= $
18851	1195	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18851	1195	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2916	1203	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2916	1203	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2917	1206	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2917	1206	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
18852	1269	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
18852	1269	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
18853	1272	8	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
18853	1272	8	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
18854	1274	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
18854	1274	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
18855	1283	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18855	1283	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
18856	1286	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
18856	1286	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
18857	1288	12	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
18857	1288	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
18858	1292	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18858	1292	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
18859	1308	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
18859	1308	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
2918	1309	12	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2918	1309	12	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
18860	1314	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18860	1314	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
18861	1327	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18861	1327	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2919	1329	16	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
2920	1330	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2920	1330	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2920	1330	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2920	1330	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2921	1334	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2921	1334	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2921	1334	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2921	1334	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2922	1340	23	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
2923	1341	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2923	1341	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2923	1341	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2923	1341	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2924	1345	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2924	1345	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2924	1345	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2924	1345	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2925	1360	12	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
2925	1360	12	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
2926	1364	16	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
2926	1364	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
2927	1372	16	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
2927	1372	16	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
2928	1374	20	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
2928	1374	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
2929	1386	16	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
2929	1386	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
2930	1391	16	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
2931	1392	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
2932	1405	12	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
2932	1405	12	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
18862	1415	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18862	1415	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2933	1420	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
2934	1423	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
18863	1438	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18863	1438	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2935	1441	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.max($.trustRegionCenterOffset.getEntry(i) - $.upperDifference.getEntry(i), glagValue) < ZERO
2935	1441	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.min($.trustRegionCenterOffset.getEntry(i) - $.lowerDifference.getEntry(i), glagValue) > ZERO
2935	1441	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
2935	1441	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
2935	1441	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
2935	1441	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
2936	1448	12	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
2937	1454	12	BOBYQAOptimizer.java	altmov	tmp1	double	0	DEF	$ > ZERO
18864	1457	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18864	1457	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2938	1458	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
2938	1458	20	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
2938	1458	20	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
2939	1460	24	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 <= $.lowerDifference.getEntry(i)
2939	1460	24	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= lowerDifference.getEntry(i)
2939	1460	24	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= lowerDifference.getEntry($)
2940	1465	31	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 >= $.upperDifference.getEntry(i)
2940	1465	31	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= upperDifference.getEntry(i)
2940	1465	31	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= upperDifference.getEntry($)
18865	1483	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18865	1483	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2941	1485	16	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
2941	1485	16	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
2941	1485	16	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
2942	1490	23	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
2942	1490	23	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2943	1492	23	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
18866	1506	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
18866	1506	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
18867	1508	16	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
18867	1508	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
2944	1513	12	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
2945	1516	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
2945	1516	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
2945	1516	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
2945	1516	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
18868	1519	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18868	1519	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2946	1537	12	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
18869	1538	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18869	1538	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2947	1548	8	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
2947	1548	8	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
18870	1549	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18870	1549	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
18871	1595	8	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
18871	1595	8	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
18872	1597	12	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
18872	1597	12	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
18873	1600	12	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
18873	1600	12	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
18874	1604	8	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
18874	1604	8	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
18875	1607	8	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
18875	1607	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
18876	1609	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
18876	1609	12	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
18877	1621	8	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
18877	1621	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
2948	1628	12	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= 2 * n
2948	1628	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= 2 * $
2949	1629	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ >= 1
2949	1629	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= n
2949	1629	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= $
2950	1632	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfmm) == ZERO
2950	1632	20	BOBYQAOptimizer.java	prelim	nfmm	int	0	DEF	upperDifference.getEntry($) == ZERO
2951	1637	23	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	$ > n
2951	1637	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	nfm > $
2952	1640	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.lowerDifference.getEntry(nfxm) == ZERO
2952	1640	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	lowerDifference.getEntry($) == ZERO
2953	1644	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfxm) == ZERO
2953	1644	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	upperDifference.getEntry($) == ZERO
2954	1654	16	BOBYQAOptimizer.java	prelim	n	int	0	DEF	ipt > $
2954	1654	16	BOBYQAOptimizer.java	prelim	ipt	int	0	DEF	$ > n
18878	1669	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
18878	1669	12	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
2955	1673	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.lowerDifference.getEntry(j)
2955	1673	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == lowerDifference.getEntry($)
2955	1673	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == lowerDifference.getEntry(j)
2956	1676	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.upperDifference.getEntry(j)
2956	1676	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == upperDifference.getEntry($)
2956	1676	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == upperDifference.getEntry(j)
2957	1686	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
2958	1689	19	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex)
2958	1689	19	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
2959	1699	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= 2 * n + 1
2959	1699	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= 2 * $ + 1
2960	1700	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ >= 2
2960	1700	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= n + 1
2960	1700	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= $ + 1
2961	1703	20	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	npt < $ + n
2961	1703	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	npt < numEval + $
2961	1703	20	BOBYQAOptimizer.java	prelim	npt	int	0	DEF	$ < numEval + n
2962	1710	23	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
2962	1710	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
2963	1716	20	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
2963	1716	20	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
2964	1717	24	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry(nfm - n)
2964	1717	24	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fAtInterpolationPoints.getEntry($ - n)
2964	1717	24	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(nfm - n)
2964	1717	24	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fAtInterpolationPoints.getEntry(nfm - $)
2965	1720	28	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
2965	1720	28	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
18879	1847	8	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18879	1847	8	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2966	1849	12	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) <= $.lowerDifference.getEntry(i)
2966	1849	12	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	trustRegionCenterOffset.getEntry($) <= lowerDifference.getEntry($)
2967	1850	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) >= ZERO
2967	1850	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) >= ZERO
2968	1853	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) >= $.upperDifference.getEntry(i)
2968	1853	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	trustRegionCenterOffset.getEntry($) >= upperDifference.getEntry($)
2969	1854	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) <= ZERO
2969	1854	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) <= ZERO
2970	1858	12	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
2970	1858	12	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
18880	1884	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18880	1884	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2971	1885	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
2971	1885	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
2972	1887	23	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
2973	1896	12	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
2974	1899	12	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
2975	1903	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
2975	1903	12	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
2975	1903	12	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
18881	1919	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18881	1919	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2976	1920	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2976	1920	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2977	1928	12	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
2978	1932	12	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
2979	1938	12	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
18882	1947	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18882	1947	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2980	1948	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
2980	1948	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
2981	1950	20	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
2981	1950	20	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
2982	1955	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
2982	1955	20	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
2983	1965	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
2984	1968	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
2984	1968	16	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2985	1970	20	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
18883	1976	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18883	1976	16	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2986	1978	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2986	1978	20	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2987	1993	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
2988	1996	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
2988	1996	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
2989	2002	16	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
2990	2011	12	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
2990	2011	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
2991	2012	16	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
2991	2012	16	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
2992	2015	16	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
2992	2015	16	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
2993	2033	12	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
2993	2033	12	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
18884	2039	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18884	2039	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2994	2040	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2994	2040	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2995	2062	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
2995	2062	12	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
18885	2066	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18885	2066	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2996	2067	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2996	2067	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
18886	2082	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18886	2082	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2997	2083	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2997	2083	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2998	2086	20	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
2999	2090	27	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
3000	2103	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
3001	2105	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
3001	2105	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
3001	2105	24	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
3002	2114	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
3003	2116	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
3003	2116	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
3003	2116	24	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
18887	2134	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18887	2134	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3004	2135	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3004	2135	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
18888	2150	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
18888	2150	12	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
3005	2155	16	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
3005	2155	16	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
3006	2159	23	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
3006	2159	23	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
3007	2168	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
3008	2171	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
3008	2171	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
3009	2179	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
18889	2189	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18889	2189	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3010	2191	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3010	2191	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
3011	2201	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
3011	2201	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
3011	2201	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
3012	2210	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
3012	2210	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
18890	2217	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18890	2217	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3013	2223	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
3013	2223	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
3014	2226	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
3014	2226	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
18891	2243	12	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
18891	2243	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
18892	2245	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
18892	2245	16	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
3015	2246	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
3015	2246	20	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
18893	2254	12	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
18893	2254	12	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
3016	2255	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.modelSecondDerivativesParameters.getEntry(k) != ZERO
3016	2255	16	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	modelSecondDerivativesParameters.getEntry($) != ZERO
18894	2256	20	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18894	2256	20	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3017	2261	12	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
3018	2264	12	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
3018	2264	12	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
18895	2267	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18895	2267	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
18896	2308	8	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
18896	2308	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
18897	2309	12	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
18897	2309	12	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
18898	2318	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
18898	2318	8	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
3019	2320	12	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
3019	2320	12	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
18899	2328	16	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
18899	2328	16	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
18900	2340	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
18900	2340	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
18901	2352	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
18901	2352	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
18902	2359	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
18902	2359	8	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
18903	2364	12	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
18903	2364	12	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
3020	2367	16	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
3020	2367	16	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
3021	2388	8	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
3022	2393	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
3022	2393	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
3022	2393	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
3022	2393	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
18904	2406	8	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
18904	2406	8	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
3023	2410	8	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
3023	2410	8	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
18357	302	8	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
18357	302	8	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
2028	306	12	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= -$.initialTrustRegionRadius
2028	306	12	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= -initialTrustRegionRadius
2029	307	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= ZERO
2029	307	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= ZERO
2030	318	19	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(j) <= $.initialTrustRegionRadius
2030	318	19	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	upperDifference.getEntry($) <= initialTrustRegionRadius
2031	319	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.upperDifference.getEntry(j) <= ZERO
2031	319	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	upperDifference.getEntry($) <= ZERO
18358	413	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18358	413	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2032	450	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex != kbase
2032	450	12	BOBYQAOptimizer.java	bobyqb	kbase	int	0	DEF	trustRegionCenterInterpolationPointIndex != $
18359	452	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18359	452	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18360	453	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
18360	453	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2033	454	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2033	454	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
2034	461	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() > npt
2034	461	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	getEvaluations() > $
18361	462	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18361	462	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18362	464	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18362	464	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18363	468	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18363	468	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2035	501	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
2035	501	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
2036	506	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
2036	506	16	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
2037	520	16	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
2037	520	16	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
2037	520	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
2037	520	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
18364	525	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18364	525	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2038	527	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.lowerDifference.getEntry(j)
2038	527	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2039	530	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.upperDifference.getEntry(j)
2039	530	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2040	533	20	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2040	533	20	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
18365	535	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18365	535	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2041	541	24	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2041	541	24	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
2042	560	12	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
2042	560	12	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
18366	565	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18366	565	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18367	568	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18367	568	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18368	574	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18368	574	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18369	578	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
18369	578	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
18370	589	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
18370	589	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
18371	592	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18371	592	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18372	597	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18372	597	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18373	599	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18373	599	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18374	603	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18374	603	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18375	609	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18375	609	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18376	612	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
18376	612	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
18377	624	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18377	624	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18378	626	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18378	626	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18379	630	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
18379	630	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
18380	639	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18380	639	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2043	648	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
18381	680	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18381	680	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18382	691	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18382	691	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18383	695	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18383	695	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18384	705	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
18384	705	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
18385	707	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18385	707	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18386	711	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18386	711	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18387	718	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18387	718	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18388	723	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18388	723	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18389	728	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18389	728	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2044	747	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
2045	751	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
2045	751	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
2045	751	16	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
18390	752	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18390	752	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18391	770	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18391	770	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2046	771	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2046	771	20	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
18392	775	20	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
18392	775	20	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
18393	784	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18393	784	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2047	793	20	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2047	793	20	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2047	793	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
18394	814	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18394	814	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2048	822	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.lowerDifference.getEntry(i)
2048	822	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2049	825	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.upperDifference.getEntry(i)
2049	825	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2050	832	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
2051	834	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
18395	845	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18395	845	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18396	847	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
18396	847	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2052	849	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
2052	849	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
18397	856	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18397	856	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2053	866	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
2053	866	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
2054	872	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
2055	873	16	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
2056	878	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
2057	881	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
2058	888	16	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2058	888	16	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2059	894	16	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2059	894	16	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
18398	901	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18398	901	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18399	903	24	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
18399	903	24	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
18400	912	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18400	912	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2060	921	24	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2060	921	24	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2060	921	24	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
2061	932	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
2061	932	20	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
18401	947	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18401	947	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18402	949	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
18402	949	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
18403	954	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
18403	954	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
18404	956	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18404	956	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18405	965	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18405	965	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18406	969	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18406	969	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18407	971	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
18407	971	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
18408	975	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18408	975	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18409	979	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18409	979	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18410	983	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18410	983	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2062	989	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2062	989	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
18411	993	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18411	993	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18412	998	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
18412	998	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2063	999	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2063	999	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
18413	1006	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18413	1006	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18414	1008	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18414	1008	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18415	1012	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18415	1012	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2064	1022	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
18416	1023	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18416	1023	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18417	1027	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
18417	1027	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
18418	1029	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18418	1029	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18419	1032	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18419	1032	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18420	1036	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18420	1036	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18421	1038	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18421	1038	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
18422	1046	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18422	1046	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
18423	1048	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18423	1048	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2065	1052	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2065	1052	20	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2066	1060	27	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2066	1060	27	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
2067	1081	16	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
2067	1081	16	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
2068	1084	16	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
18424	1085	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
18424	1085	20	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
2069	1086	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
2069	1086	24	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
2070	1089	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
2070	1089	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
2071	1092	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
2071	1092	24	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
2072	1104	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
2073	1107	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
2073	1107	12	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
2073	1107	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
18425	1124	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
18425	1124	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
18426	1126	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
18426	1126	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2074	1131	16	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
2074	1131	16	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
2075	1143	12	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
2076	1145	16	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2077	1148	20	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2077	1148	20	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2078	1160	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2079	1163	12	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
2080	1166	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta, dnorm) > $
2080	1166	12	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($, dnorm) > rho
2080	1166	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta, $) > rho
2081	1175	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
2081	1175	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
2082	1178	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
2083	1180	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
2084	1194	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2085	1200	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
2085	1200	12	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= $
18427	1201	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
18427	1201	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2086	1209	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2086	1209	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2087	1212	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2087	1212	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
18428	1275	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
18428	1275	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
18429	1278	8	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
18429	1278	8	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
18430	1280	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
18430	1280	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
18431	1289	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18431	1289	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
18432	1292	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
18432	1292	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
18433	1294	12	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
18433	1294	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
18434	1298	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18434	1298	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
18435	1314	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
18435	1314	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
2088	1315	12	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2088	1315	12	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
18436	1320	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18436	1320	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
18437	1333	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18437	1333	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2089	1335	16	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
2090	1336	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2090	1336	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2090	1336	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2090	1336	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2091	1340	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2091	1340	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2091	1340	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2091	1340	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2092	1346	23	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
2093	1347	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2093	1347	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2093	1347	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2093	1347	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2094	1351	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2094	1351	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2094	1351	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2094	1351	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2095	1366	12	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
2095	1366	12	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
2096	1370	16	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
2096	1370	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
2097	1378	16	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
2097	1378	16	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
2098	1380	20	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
2098	1380	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
2099	1392	16	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
2099	1392	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
2100	1397	16	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
2101	1398	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
2102	1411	12	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
2102	1411	12	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
18438	1421	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18438	1421	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2103	1426	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
2104	1429	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
18439	1444	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18439	1444	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2105	1447	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.max($.trustRegionCenterOffset.getEntry(i) - $.upperDifference.getEntry(i), glagValue) < ZERO
2105	1447	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.min($.trustRegionCenterOffset.getEntry(i) - $.lowerDifference.getEntry(i), glagValue) > ZERO
2105	1447	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
2105	1447	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
2105	1447	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
2105	1447	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
2106	1454	12	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
2107	1460	12	BOBYQAOptimizer.java	altmov	tmp1	double	0	DEF	$ > ZERO
18440	1463	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18440	1463	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2108	1464	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
2108	1464	20	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
2108	1464	20	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
2109	1466	24	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 <= $.lowerDifference.getEntry(i)
2109	1466	24	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= lowerDifference.getEntry(i)
2109	1466	24	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= lowerDifference.getEntry($)
2110	1471	31	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 >= $.upperDifference.getEntry(i)
2110	1471	31	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= upperDifference.getEntry(i)
2110	1471	31	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= upperDifference.getEntry($)
18441	1489	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18441	1489	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2111	1491	16	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
2111	1491	16	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
2111	1491	16	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
2112	1496	23	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
2112	1496	23	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2113	1498	23	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
18442	1512	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
18442	1512	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
18443	1514	16	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
18443	1514	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
2114	1519	12	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
2115	1522	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
2115	1522	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
2115	1522	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
2115	1522	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
18444	1525	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18444	1525	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2116	1543	12	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
18445	1544	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18445	1544	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2117	1554	8	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
2117	1554	8	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
18446	1555	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
18446	1555	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
18447	1601	8	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
18447	1601	8	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
18448	1603	12	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
18448	1603	12	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
18449	1606	12	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
18449	1606	12	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
18450	1610	8	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
18450	1610	8	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
18451	1613	8	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
18451	1613	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
18452	1615	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
18452	1615	12	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
18453	1627	8	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
18453	1627	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
2118	1634	12	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= 2 * n
2118	1634	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= 2 * $
2119	1635	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= n
2119	1635	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ >= 1
2119	1635	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= $
2120	1638	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfmm) == ZERO
2120	1638	20	BOBYQAOptimizer.java	prelim	nfmm	int	0	DEF	upperDifference.getEntry($) == ZERO
2121	1643	23	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	$ > n
2121	1643	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	nfm > $
2122	1646	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.lowerDifference.getEntry(nfxm) == ZERO
2122	1646	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	lowerDifference.getEntry($) == ZERO
2123	1650	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfxm) == ZERO
2123	1650	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	upperDifference.getEntry($) == ZERO
2124	1660	16	BOBYQAOptimizer.java	prelim	n	int	0	DEF	ipt > $
2124	1660	16	BOBYQAOptimizer.java	prelim	ipt	int	0	DEF	$ > n
18454	1675	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
18454	1675	12	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
2125	1679	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.lowerDifference.getEntry(j)
2125	1679	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == lowerDifference.getEntry($)
2125	1679	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == lowerDifference.getEntry(j)
2126	1682	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.upperDifference.getEntry(j)
2126	1682	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == upperDifference.getEntry($)
2126	1682	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == upperDifference.getEntry(j)
2127	1692	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
2128	1695	19	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex)
2128	1695	19	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
2129	1705	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= 2 * n + 1
2129	1705	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= 2 * $ + 1
2130	1706	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= n + 1
2130	1706	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ >= 2
2130	1706	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= $ + 1
2131	1709	20	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	npt < $ + n
2131	1709	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	npt < numEval + $
2131	1709	20	BOBYQAOptimizer.java	prelim	npt	int	0	DEF	$ < numEval + n
2132	1716	23	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
2132	1716	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
2133	1722	20	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
2133	1722	20	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
2134	1723	24	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry(nfm - n)
2134	1723	24	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fAtInterpolationPoints.getEntry($ - n)
2134	1723	24	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(nfm - n)
2134	1723	24	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fAtInterpolationPoints.getEntry(nfm - $)
2135	1726	28	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
2135	1726	28	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
18455	1853	8	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18455	1853	8	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2136	1855	12	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) <= $.lowerDifference.getEntry(i)
2136	1855	12	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	trustRegionCenterOffset.getEntry($) <= lowerDifference.getEntry($)
2137	1856	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) >= ZERO
2137	1856	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) >= ZERO
2138	1859	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) >= $.upperDifference.getEntry(i)
2138	1859	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	trustRegionCenterOffset.getEntry($) >= upperDifference.getEntry($)
2139	1860	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) <= ZERO
2139	1860	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) <= ZERO
2140	1864	12	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
2140	1864	12	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
18456	1890	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18456	1890	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2141	1891	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
2141	1891	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
2142	1893	23	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
2143	1902	12	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
2144	1905	12	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
2145	1909	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
2145	1909	12	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
2145	1909	12	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
18457	1925	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18457	1925	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2146	1926	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2146	1926	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2147	1934	12	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
2148	1938	12	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
2149	1944	12	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
18458	1953	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18458	1953	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2150	1954	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
2150	1954	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
2151	1956	20	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
2151	1956	20	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
2152	1961	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
2152	1961	20	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
2153	1971	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
2154	1974	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
2154	1974	16	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2155	1976	20	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
18459	1982	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18459	1982	16	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2156	1984	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2156	1984	20	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2157	1999	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
2158	2002	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
2158	2002	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
2159	2008	16	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
2160	2017	12	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
2160	2017	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
2161	2018	16	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
2161	2018	16	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
2162	2021	16	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
2162	2021	16	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
2163	2039	12	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
2163	2039	12	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
18460	2045	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18460	2045	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2164	2046	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2164	2046	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2165	2068	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
2165	2068	12	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
18461	2072	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18461	2072	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2166	2073	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2166	2073	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
18462	2088	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18462	2088	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2167	2089	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2167	2089	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2168	2092	20	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
2169	2096	27	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
2170	2109	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2171	2111	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
2171	2111	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
2171	2111	24	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
2172	2120	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2173	2122	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
2173	2122	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
2173	2122	24	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
18463	2140	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18463	2140	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2174	2141	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2174	2141	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
18464	2156	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
18464	2156	12	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
2175	2161	16	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
2175	2161	16	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
2176	2165	23	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
2176	2165	23	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
2177	2174	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
2178	2177	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
2178	2177	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
2179	2185	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
18465	2195	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18465	2195	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2180	2197	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2180	2197	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2181	2207	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
2181	2207	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
2181	2207	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
2182	2216	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
2182	2216	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
18466	2223	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18466	2223	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2183	2229	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
2183	2229	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
2184	2232	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
2184	2232	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
18467	2249	12	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
18467	2249	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
18468	2251	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
18468	2251	16	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
2185	2252	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
2185	2252	20	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
18469	2260	12	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
18469	2260	12	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
2186	2261	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.modelSecondDerivativesParameters.getEntry(k) != ZERO
2186	2261	16	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	modelSecondDerivativesParameters.getEntry($) != ZERO
18470	2262	20	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18470	2262	20	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2187	2267	12	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
2188	2270	12	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
2188	2270	12	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
18471	2273	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
18471	2273	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
18472	2314	8	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
18472	2314	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
18473	2315	12	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
18473	2315	12	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
18474	2324	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
18474	2324	8	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
2189	2326	12	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
2189	2326	12	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
18475	2334	16	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
18475	2334	16	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
18476	2346	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
18476	2346	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
18477	2358	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
18477	2358	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
18478	2365	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
18478	2365	8	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
18479	2370	12	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
18479	2370	12	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
2190	2373	16	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
2190	2373	16	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
2191	2394	8	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
2192	2399	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
2192	2399	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
2192	2399	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
2192	2399	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
18480	2412	8	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
18480	2412	8	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
2193	2416	8	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
2193	2416	8	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
627	150	8	BSPTree.java	insertCut	THIS	BSPTree	0	DEF	$.cut != null
628	156	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$.isEmpty()
628	156	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$ == null
629	181	8	BSPTree.java	copySelf	THIS	BSPTree	0	RET	$.cut == null
630	242	8	BSPTree.java	visit	THIS	BSPTree	1	DEF	$.cut == null
17279	293	8	BSPTree.java	fitToCell	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
17279	293	8	BSPTree.java	fitToCell	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
631	294	12	BSPTree.java	fitToCell	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
631	294	12	BSPTree.java	fitToCell	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
632	312	8	BSPTree.java	getCell	THIS	BSPTree	0	RET	$.cut == null
633	319	8	BSPTree.java	getCell	offset	double	1	RET	FastMath.abs($) < 1.0e-10
634	321	15	BSPTree.java	getCell	offset	double	1	RET	$ <= 0
635	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.attribute == null
635	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute == null
635	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute != null
635	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute.equals($.minus.$.attribute)
635	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.cut != null
635	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.cut == null
635	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.cut == null
636	385	8	BSPTree.java	merge	THIS	BSPTree	1	RET	$.cut == null
637	388	15	BSPTree.java	merge	THIS	BSPTree	1	RET	tree.$.cut == null
637	388	15	BSPTree.java	merge	tree	BSPTree<S>	1	RET	$.cut == null
638	394	12	BSPTree.java	merge	parentTree	BSPTree<S>	0	DEF	$ != null
639	396	16	BSPTree.java	merge	isPlusChild	boolean	1	DEF	$
640	407	12	BSPTree.java	merge	THIS	BSPTree	0	DEF	merged.$.cut != null
640	407	12	BSPTree.java	merge	merged	BSPTree<S>	0	DEF	$.cut != null
641	489	8	BSPTree.java	split	THIS	BSPTree	0	RET	$.cut == null
642	500	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
642	500	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
643	516	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
643	516	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
644	568	8	BSPTree.java	insertInTree	parentTree	BSPTree<S>	0	DEF	$ != null
645	569	12	BSPTree.java	insertInTree	isPlusChild	boolean	1	DEF	$
646	577	8	BSPTree.java	insertInTree	THIS	BSPTree	0	DEF	$.cut != null
17280	580	12	BSPTree.java	insertInTree	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
17280	580	12	BSPTree.java	insertInTree	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
647	587	16	BSPTree.java	insertInTree	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
647	587	16	BSPTree.java	insertInTree	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
648	614	8	BSPTree.java	chopOffMinus	THIS	BSPTree	0	DEF	$.cut != null
649	628	8	BSPTree.java	chopOffPlus	THIS	BSPTree	0	DEF	$.cut != null
2209	223	12	BaseAbstractMultivariateOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.data instanceof InitialGuess
2210	227	12	BaseAbstractMultivariateOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.data instanceof SimpleBounds
2211	276	8	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooLargeException	$.start != null
2212	278	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooSmallException	$.lowerBound != null
2213	279	16	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DimensionMismatchException	$.lowerBound.$.length != dim
2213	279	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	lowerBound.length != $
18494	282	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
18494	282	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2214	285	20	BaseAbstractMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooSmallException	$ < lo
2214	285	20	BaseAbstractMultivariateOptimizer.java	checkParameters	lo	double	0	NumberIsTooSmallException	v < $
2215	290	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooLargeException	$.upperBound != null
2216	291	16	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DimensionMismatchException	$.upperBound.$.length != dim
2216	291	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	upperBound.length != $
18495	294	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
18495	294	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2217	297	20	BaseAbstractMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooLargeException	$ > hi
2217	297	20	BaseAbstractMultivariateOptimizer.java	checkParameters	hi	double	0	NumberIsTooLargeException	v > $
2218	305	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.lowerBound == null
18496	307	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
18496	307	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2219	311	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.upperBound == null
18497	313	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
18497	313	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
1976	183	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	f	FUNC	0	NullArgumentException	$ == null
1977	186	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	t	double[]	0	NullArgumentException	$ == null
1978	189	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	w	double[]	0	NullArgumentException	$ == null
1979	192	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	startPoint	double[]	0	NullArgumentException	$ == null
1980	195	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	t.$.length != w.$.length
1980	195	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	t	double[]	0	DimensionMismatchException	$.length != w.length
1980	195	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	w	double[]	0	DimensionMismatchException	t.length != $.length
18306	323	8	BaseAbstractMultivariateVectorOptimizer.java	setUp	i	int	0	NIL-FOR	$ < dim
18306	323	8	BaseAbstractMultivariateVectorOptimizer.java	setUp	dim	int	0	NIL-FOR	i < $
1981	343	12	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof Target
1982	347	12	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof Weight
1983	351	12	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof InitialGuess
1984	365	8	BaseAbstractMultivariateVectorOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	$.target.$.length != $.weightMatrix.getColumnDimension()
4245	120	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NotStrictlyPositiveException	$ <= 0
4246	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NumberIsTooSmallException	maximalIterationCount <= $
4246	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	maximalIterationCount	int	0	NumberIsTooSmallException	$ <= minimalIterationCount
1812	119	8	BaseAbstractUnivariateOptimizer.java	optimize	f	UnivariateFunction	0	NullArgumentException	$ == null
1813	122	8	BaseAbstractUnivariateOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
2779	84	8	BaseMultiStartMultivariateOptimizer.java	BaseMultiStartMultivariateOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
18712	146	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	NIL-FOR	i < $.optimData.$.length
18712	146	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < optimData.length
2780	147	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	DEF	$.optimData[i] instanceof MaxEval
2780	147	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof MaxEval
2781	151	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	DEF	$.optimData[i] instanceof InitialGuess
2781	151	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof InitialGuess
2782	157	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	MathIllegalStateException	$.maxEvalIndex == -1
2783	160	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	MathIllegalStateException	$.initialGuessIndex == -1
18713	174	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	NIL-FOR	i < $.starts
18713	174	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < starts
2784	181	16	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	1	DEF	$ == 0
18714	185	20	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	NIL-WHILE	$ == null
2785	186	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	TooManyEvaluationsException	attempts++ >= $.getMaxEvaluations()
2785	186	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	attempts	int	0	TooManyEvaluationsException	$++ >= getMaxEvaluations()
18715	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	NIL-FOR	k < s.$.length
18715	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < s.length
18715	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	NIL-FOR	k < $.length
18715	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	NIL-FOR	$ != null
2786	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	k	int	0	DEF	s[$] > max[$]
2786	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	k	int	0	DEF	s[$] < min[$]
2786	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	DEF	$[k] > max[k]
2786	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	DEF	$[k] < min[k]
2786	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	min	double[]	0	DEF	s[k] < $[k]
2786	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	min	double[]	0	DEF	$ != null
2786	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	max	double[]	0	DEF	s[k] > $[k]
2786	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	max	double[]	0	DEF	$ != null
2787	211	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	DEF	optima.$.length == 0
2787	211	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	optima	PAIR[]	0	DEF	$.length == 0
1801	75	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	optimizer	BaseMultivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1801	75	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1802	79	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1803	115	8	BaseMultivariateMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
18192	148	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
18192	148	8	BaseMultivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1804	164	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
2788	87	12	BaseMultivariateOptimizer.java	parseOptimizationData	THIS	BaseMultivariateOptimizer	0	DEF	$.data instanceof InitialGuess
2789	91	12	BaseMultivariateOptimizer.java	parseOptimizationData	THIS	BaseMultivariateOptimizer	0	DEF	$.data instanceof SimpleBounds
2790	128	8	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	NumberIsTooLargeException	$.start != null
2791	130	12	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	NumberIsTooSmallException	$.lowerBound != null
2792	131	16	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	DimensionMismatchException	$.lowerBound.$.length != dim
2792	131	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	lowerBound.length != $
18716	134	16	BaseMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
18716	134	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2793	137	20	BaseMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooSmallException	$ < lo
2793	137	20	BaseMultivariateOptimizer.java	checkParameters	lo	double	0	NumberIsTooSmallException	v < $
2794	142	12	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	NumberIsTooLargeException	$.upperBound != null
2795	143	16	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	DimensionMismatchException	$.upperBound.$.length != dim
2795	143	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	upperBound.length != $
18717	146	16	BaseMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
18717	146	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2796	149	20	BaseMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooLargeException	$ > hi
2796	149	20	BaseMultivariateOptimizer.java	checkParameters	hi	double	0	NumberIsTooLargeException	v > $
1808	75	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	optimizer	BaseMultivariateVectorOptimizer<FUNC>	0	NullArgumentException	$ == null
1808	75	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1809	79	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1810	116	8	BaseMultivariateVectorMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateVectorMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
18193	149	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	NIL-FOR	i < $.starts
18193	149	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1811	168	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	DEF	$.optima[0] == null
2669	191	12	BaseOptimizer.java	parseOptimizationData	THIS	BaseOptimizer	0	DEF	$.data instanceof MaxEval
2670	195	12	BaseOptimizer.java	parseOptimizationData	THIS	BaseOptimizer	0	DEF	$.data instanceof MaxIter
4234	58	8	BaseRuleFactory.java	getRule	numberOfPoints	int	0	NotStrictlyPositiveException	$ <= 0
4235	66	8	BaseRuleFactory.java	getRule	cached	Pair<double[],double[]>	0	DEF	$ == null
4236	96	8	BaseRuleFactory.java	getRuleInternal	rule	Pair<T[],T[]>	0	RET	$ == null
4237	112	8	BaseRuleFactory.java	addRule	THIS	BaseRuleFactory	0	DimensionMismatchException	rule.getFirst().length != rule.getSecond().length
4237	112	8	BaseRuleFactory.java	addRule	rule	Pair<T[],T[]>	0	DimensionMismatchException	$.getFirst().length != $.getSecond().length
19576	147	8	BaseRuleFactory.java	convertToDouble	i	int	0	NIL-FOR	$ < len
19576	147	8	BaseRuleFactory.java	convertToDouble	len	int	0	NIL-FOR	i < $
4000	146	8	BaseSecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
4001	149	8	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
4002	174	12	BaseSecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
4003	179	12	BaseSecantSolver.java	doSolve	fx	double	1	DEF	f1 * $ < 0
4003	179	12	BaseSecantSolver.java	doSolve	f1	double	1	DEF	$ * fx < 0
4004	196	20	BaseSecantSolver.java	doSolve	x	double	0	ConvergenceException	$ == x1
4004	196	20	BaseSecantSolver.java	doSolve	x1	double	0	ConvergenceException	x == $
4005	212	12	BaseSecantSolver.java	doSolve	f1	double	0	MathInternalError:RET	FastMath.abs($) <= ftol
4005	212	12	BaseSecantSolver.java	doSolve	ftol	double	0	MathInternalError:RET	FastMath.abs(f1) <= $
4006	217	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
4007	222	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
4008	227	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ <= 0
4009	232	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ >= 0
4010	243	12	BaseSecantSolver.java	doSolve	x0	double	0	MathInternalError:RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
4010	243	12	BaseSecantSolver.java	doSolve	x1	double	0	MathInternalError:RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
4010	243	12	BaseSecantSolver.java	doSolve	atol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
4010	243	12	BaseSecantSolver.java	doSolve	rtol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
3261	187	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
3261	187	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
3261	187	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
3261	187	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
3261	187	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
3261	187	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
3261	187	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
3262	195	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
3262	195	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
3262	195	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
3263	272	8	Beta.java	logGammaSum	a	double	0	OutOfRangeException	$ < 1.0
3263	272	8	Beta.java	logGammaSum	a	double	0	OutOfRangeException	$ > 2.0
3264	275	8	Beta.java	logGammaSum	b	double	0	OutOfRangeException	$ > 2.0
3264	275	8	Beta.java	logGammaSum	b	double	0	OutOfRangeException	$ < 1.0
3265	280	8	Beta.java	logGammaSum	x	double	1	RET	$ <= 0.5
3266	282	15	Beta.java	logGammaSum	x	double	1	RET	$ <= 1.5
3267	305	8	Beta.java	logGammaMinusLogGammaSum	a	double	0	NumberIsTooSmallException	$ < 0.0
3268	308	8	Beta.java	logGammaMinusLogGammaSum	b	double	0	NumberIsTooSmallException	$ < 10.0
3269	317	8	Beta.java	logGammaMinusLogGammaSum	a	double	1	DEF	$ <= b
3269	317	8	Beta.java	logGammaMinusLogGammaSum	b	double	1	DEF	a <= $
3270	345	8	Beta.java	deltaMinusDeltaSum	a	double	0	OutOfRangeException	$ > b
3270	345	8	Beta.java	deltaMinusDeltaSum	a	double	0	OutOfRangeException	$ < 0
3270	345	8	Beta.java	deltaMinusDeltaSum	b	double	0	OutOfRangeException	a > $
3271	348	8	Beta.java	deltaMinusDeltaSum	b	double	0	NumberIsTooSmallException	$ < 10
19063	361	8	Beta.java	deltaMinusDeltaSum	THIS	Beta	0	NIL-FOR	i < s.$.length
19063	361	8	Beta.java	deltaMinusDeltaSum	i	int	0	NIL-FOR	$ < s.length
19063	361	8	Beta.java	deltaMinusDeltaSum	s	double[]	0	NIL-FOR	i < $.length
19064	370	8	Beta.java	deltaMinusDeltaSum	i	int	0	NIL-FOR	$ >= 0
3272	391	8	Beta.java	sumDeltaMinusDeltaSum	p	double	0	NumberIsTooSmallException	$ < 10.0
3273	394	8	Beta.java	sumDeltaMinusDeltaSum	q	double	0	NumberIsTooSmallException	$ < 10.0
19065	403	8	Beta.java	sumDeltaMinusDeltaSum	i	int	0	NIL-FOR	$ >= 0
3274	420	8	Beta.java	logBeta	p	double	0	RET	Double.isNaN($)
3274	420	8	Beta.java	logBeta	p	double	0	RET	$ <= 0.0
3274	420	8	Beta.java	logBeta	q	double	0	RET	$ <= 0.0
3274	420	8	Beta.java	logBeta	q	double	0	RET	Double.isNaN($)
3275	426	8	Beta.java	logBeta	a	double	1	RET	$ >= 10.0
3276	432	12	Beta.java	logBeta	u	double	1	RET	$ <= v
3276	432	12	Beta.java	logBeta	v	double	1	RET	u <= $
3277	437	15	Beta.java	logBeta	a	double	1	RET	$ > 2.0
3278	438	12	Beta.java	logBeta	b	double	1	RET	$ > 1000.0
19066	442	16	Beta.java	logBeta	i	int	0	NIL-FOR	$ < n
19066	442	16	Beta.java	logBeta	n	int	0	NIL-FOR	i < $
19067	452	16	Beta.java	logBeta	ared	double	0	NIL-WHILE	$ > 2.0
3279	457	16	Beta.java	logBeta	b	double	1	RET	$ < 10.0
19068	460	20	Beta.java	logBeta	bred	double	0	NIL-WHILE	$ > 2.0
3280	475	15	Beta.java	logBeta	a	double	1	RET	$ >= 1.0
3281	476	12	Beta.java	logBeta	b	double	1	RET	$ > 2.0
3282	477	16	Beta.java	logBeta	b	double	1	RET	$ < 10.0
19069	480	20	Beta.java	logBeta	bred	double	0	NIL-WHILE	$ > 2.0
3283	498	12	Beta.java	logBeta	b	double	1	RET	$ >= 10.0
1141	120	8	BetaDistribution.java	recomputeZ	THIS	BetaDistribution	0	DEF	Double.isNaN($.z)
1142	128	8	BetaDistribution.java	density	x	double	1	RET	$ < 0
1142	128	8	BetaDistribution.java	density	x	double	1	RET	$ > 1
1143	130	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 0
1144	131	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.alpha < 1
1145	135	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 1
1146	136	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.beta < 1
1147	149	8	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ <= 0
1148	151	15	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ >= 1
1561	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
1561	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
1562	90	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
17831	100	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
17831	100	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
17832	105	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
17832	105	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
1563	108	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
1563	108	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
1563	108	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
17833	109	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
17833	109	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
17834	111	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
17834	111	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
17835	116	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
17835	116	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
1564	122	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
1565	139	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
17836	144	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
17836	144	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
1566	146	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
1566	146	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
1567	147	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
1568	151	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1568	151	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
1569	171	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
17837	181	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
17837	181	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
17838	186	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
17838	186	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
1570	189	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
1570	189	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
17839	190	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
17839	190	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
17840	192	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
17840	192	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
17841	197	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
17841	197	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
1571	203	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
17842	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
17842	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
17843	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
17843	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1572	272	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
17844	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
17844	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
17845	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
17845	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
17846	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
17846	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1573	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
1573	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
17847	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
17847	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
1574	297	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
17848	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
17848	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
17849	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
17849	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
17850	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
17850	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
17851	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
17851	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
17852	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
17852	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1575	336	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
17853	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
17853	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
17854	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
17854	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
17855	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
17855	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1576	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
1576	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
17856	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
17856	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
1577	361	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
17857	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
17857	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
17858	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
17858	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
17859	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
17859	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
3921	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3921	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3921	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3921	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3921	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$.length == 0
3921	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$[0].length == 0
3922	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3922	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3922	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	xLen != $.length
3923	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3923	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3923	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	xLen != $.length
3924	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3924	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3924	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	xLen != $.length
3925	116	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3925	116	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3925	116	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	xLen != $.length
19370	130	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
19370	130	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3926	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3926	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3926	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3926	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	$[i].length != yLen
3927	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3927	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3927	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3927	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	$[i].length != yLen
3928	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3928	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3928	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3928	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
3929	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3929	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3929	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3929	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
19371	144	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
19371	144	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3930	164	8	BicubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
3931	168	8	BicubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
3932	254	8	BicubicSplineInterpolatingFunction.java	partialDerivative	THIS	BicubicSplineInterpolatingFunction	0	DEF	$.partialDerivatives == null
3933	259	8	BicubicSplineInterpolatingFunction.java	partialDerivative	i	int	0	OutOfRangeException	$ == -1
3934	263	8	BicubicSplineInterpolatingFunction.java	partialDerivative	j	int	0	OutOfRangeException	$ == -1
19372	281	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < lastI
19372	281	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastI	int	0	NIL-FOR	i < $
19373	282	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < lastJ
19373	282	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastJ	int	0	NIL-FOR	j < $
3935	301	8	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
3935	301	8	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
19374	306	8	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
19374	306	8	BicubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
3936	307	12	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
3936	307	12	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
3936	307	12	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
19375	347	8	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < 16
19376	350	12	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < 16
19377	395	8	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	i	int	0	NIL-FOR	$ < N
19378	396	12	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	j	int	0	NIL-FOR	$ < N
3937	406	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3937	406	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3938	409	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
3938	409	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
19379	434	8	BicubicSplineInterpolatingFunction.java	apply	i	int	0	NIL-FOR	$ < N
19380	435	12	BicubicSplineInterpolatingFunction.java	apply	j	int	0	NIL-FOR	$ < N
3939	447	8	BicubicSplineInterpolatingFunction.java	partialDerivativeX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeX == null
3940	457	8	BicubicSplineInterpolatingFunction.java	partialDerivativeY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeY == null
3941	467	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXX == null
3942	477	8	BicubicSplineInterpolatingFunction.java	partialDerivativeYY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeYY == null
3943	487	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXY == null
19381	504	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < N
19382	505	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < N
3918	43	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3918	43	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3918	43	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3918	43	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3918	43	8	BicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3918	43	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3919	46	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3919	46	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3919	46	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
19358	61	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19358	61	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3920	62	12	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3920	62	12	BicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3920	62	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3920	62	12	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
19359	66	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
19359	66	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
19360	76	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
19360	76	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
19361	83	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19361	83	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
19362	89	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
19362	89	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
19363	91	12	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19363	91	12	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
19364	98	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19364	98	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
19365	100	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
19365	100	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
19366	107	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19366	107	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
19367	110	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
19367	110	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
955	123	8	BigFraction.java	BigFraction	den	BigInteger	0	ZeroException	BigInteger.ZERO.equals($)
956	126	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
957	133	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
958	139	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
959	173	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isNaN($)
960	176	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isInfinite($)
961	185	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
962	189	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
17302	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
17302	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
963	198	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
964	275	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
964	275	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
965	281	8	BigFraction.java	BigFraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
965	281	8	BigFraction.java	BigFraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
965	281	8	BigFraction.java	BigFraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
17303	297	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
966	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
966	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
966	303	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
966	303	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
967	308	12	BigFraction.java	BigFraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
967	308	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
967	308	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
967	308	12	BigFraction.java	BigFraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
967	308	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
967	308	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
967	308	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
968	322	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
968	322	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
969	326	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
969	326	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
970	433	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
971	508	8	BigFraction.java	add	fraction	BigFraction	0	NullArgumentException	$ == null
972	511	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
973	518	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
973	518	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
974	612	8	BigFraction.java	divide	bg	BigInteger	0	NullArgumentException	$ == null
975	615	8	BigFraction.java	divide	bg	BigInteger	0	MathArithmeticException	BigInteger.ZERO.equals($)
976	661	8	BigFraction.java	divide	fraction	BigFraction	0	NullArgumentException	$ == null
977	664	8	BigFraction.java	divide	THIS	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals(fraction.$.numerator)
977	664	8	BigFraction.java	divide	fraction	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals($.numerator)
978	683	8	BigFraction.java	doubleValue	result	double	0	DEF	Double.isNaN($)
979	713	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
979	713	8	BigFraction.java	equals	other	Object	1	DEF	this == $
980	715	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
981	736	8	BigFraction.java	floatValue	result	float	0	DEF	Double.isNaN($)
982	865	8	BigFraction.java	multiply	bg	BigInteger	0	NullArgumentException	$ == null
983	910	8	BigFraction.java	multiply	fraction	BigFraction	0	NullArgumentException	$ == null
984	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	fraction.$.numerator.equals(BigInteger.ZERO)
984	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
984	913	8	BigFraction.java	multiply	fraction	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
985	957	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
986	974	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
987	993	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
988	1052	8	BigFraction.java	subtract	bg	BigInteger	0	NullArgumentException	$ == null
989	1095	8	BigFraction.java	subtract	fraction	BigFraction	0	NullArgumentException	$ == null
990	1098	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
991	1104	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
991	1104	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
992	1127	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
993	1129	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
994	169	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
995	171	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
996	173	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
997	194	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
998	216	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
999	249	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
17304	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
17304	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
17304	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
17304	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
218	306	8	BigReal.java	equals	THIS	BigReal	0	RET	$ == other
218	306	8	BigReal.java	equals	other	Object	0	RET	this == $
219	310	8	BigReal.java	equals	other	Object	0	RET	$ instanceof BigReal
3234	56	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
3234	56	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
19051	71	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
19051	71	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
3235	80	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
3236	85	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
3236	85	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
19052	89	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
19052	89	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
3237	90	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
3237	90	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
3237	90	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
3248	41	8	BinaryMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof BinaryChromosome
1212	70	8	BinomialDistribution.java	BinomialDistribution	trials	int	0	NotPositiveException	$ < 0
1213	74	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ < 0
1213	74	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ > 1
1214	103	8	BinomialDistribution.java	probability	THIS	BinomialDistribution	1	DEF	x > $.numberOfTrials
1214	103	8	BinomialDistribution.java	probability	x	int	1	DEF	$ > numberOfTrials
1214	103	8	BinomialDistribution.java	probability	x	int	1	DEF	$ < 0
1215	116	8	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
1216	118	15	BinomialDistribution.java	cumulativeProbability	THIS	BinomialDistribution	1	DEF	x >= $.numberOfTrials
1216	118	15	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= numberOfTrials
4075	78	12	BisectionSolver.java	doSolve	fm	double	1	DEF	$ * fmin > 0
4075	78	12	BisectionSolver.java	doSolve	fmin	double	1	DEF	fm * $ > 0
4076	86	12	BisectionSolver.java	doSolve	min	double	0	RET	FastMath.abs(max - $) <= absoluteAccuracy
4076	86	12	BisectionSolver.java	doSolve	max	double	0	RET	FastMath.abs($ - min) <= absoluteAccuracy
4076	86	12	BisectionSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(max - min) <= $
19023	73	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
19023	73	8	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
19024	82	8	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
19024	82	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
19024	82	8	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
3156	104	8	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
3157	143	8	BitsStreamGenerator.java	nextInt	n	int	0	RET	$ > 0
3158	144	12	BitsStreamGenerator.java	nextInt	n	int	0	RET	($ & -$) == $
19025	149	12	BitsStreamGenerator.java	nextInt	bits	int	0	NIL-DOWHILE	$ - val + (n - 1) < 0
19025	149	12	BitsStreamGenerator.java	nextInt	val	int	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
19025	149	12	BitsStreamGenerator.java	nextInt	n	int	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
3159	177	8	BitsStreamGenerator.java	nextLong	n	long	0	RET	$ > 0
19026	180	12	BitsStreamGenerator.java	nextLong	bits	long	0	NIL-DOWHILE	$ - val + (n - 1) < 0
19026	180	12	BitsStreamGenerator.java	nextLong	val	long	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
19026	180	12	BitsStreamGenerator.java	nextLong	n	long	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
1303	161	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
17395	170	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
17395	170	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
17396	172	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
17396	172	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1304	173	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1304	173	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1304	173	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1304	173	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1304	173	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1305	177	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
17397	217	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
17397	217	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
17397	217	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
1306	219	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1306	219	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
17398	228	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
17398	228	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
17399	232	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
17399	232	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
17400	243	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
17400	243	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
17401	277	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
17401	277	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
17402	281	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
17402	281	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
17403	310	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
17403	310	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
17404	332	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
17404	332	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
17404	332	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
17405	333	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
17405	333	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
17405	333	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
17406	343	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
17406	343	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
17407	344	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
17407	344	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
17408	377	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
17408	377	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
17408	377	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
17409	381	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
17409	381	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
17409	381	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
17410	404	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
17410	404	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
17410	404	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
17411	405	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
17411	405	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
17411	405	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
17412	415	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
17412	415	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
17413	416	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
17413	416	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
17414	447	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
17414	447	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
17414	447	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
17415	451	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
17415	451	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
17415	451	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
17416	465	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
17416	465	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
17416	465	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
17417	468	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
17417	468	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
17417	468	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
17418	483	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
17418	483	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
17418	483	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
17419	486	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
17419	486	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
17419	486	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
17420	510	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
17420	510	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
17420	510	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
17421	515	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
17421	515	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
17421	515	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
17422	524	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
17422	524	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
17423	529	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
17423	529	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
17424	532	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
17424	532	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
17425	535	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
17425	535	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
17426	573	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
17426	573	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
17426	573	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
17427	578	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
17427	578	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
17427	578	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
17428	588	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
17428	588	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
17429	593	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
17429	593	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
17430	596	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
17430	596	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
17431	600	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
17431	600	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
17432	609	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
17432	609	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
17433	634	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
17433	634	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
17434	639	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
17434	639	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
17435	643	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
17435	643	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
17436	677	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
17436	677	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
17436	677	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
17437	680	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
17437	680	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
17437	680	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
1307	691	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1308	693	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1309	725	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
17438	775	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
17438	775	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1310	791	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1311	798	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1311	798	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
17439	810	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
17439	810	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
17440	816	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
17440	816	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
17441	825	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
17441	825	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
17442	848	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
17442	848	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1312	852	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1312	852	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1313	892	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1313	892	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1313	892	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
17443	905	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
17443	905	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1314	909	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1314	909	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
17444	935	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
17444	935	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
17445	938	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
17445	938	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1315	939	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
1315	939	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1315	939	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
1316	976	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1316	976	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1316	976	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
17446	990	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
17446	990	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
17447	993	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
17447	993	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1317	994	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
1317	994	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1317	994	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
17448	1014	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
17448	1014	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
17449	1047	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
17449	1047	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
17450	1050	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
17450	1050	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
17451	1079	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
17451	1079	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1318	1095	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1318	1095	8	BlockFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1318	1095	8	BlockFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
17452	1103	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
17452	1103	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
17453	1122	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
17453	1122	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
17454	1125	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
17454	1125	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1319	1139	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1319	1139	8	BlockFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1319	1139	8	BlockFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
17455	1148	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
17455	1148	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
17456	1151	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
17456	1151	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
17457	1228	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
17457	1228	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
17458	1229	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
17458	1229	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
17459	1239	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
17459	1239	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
17460	1242	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
17460	1242	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1320	1273	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.columns
1320	1273	8	BlockFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != columns
17461	1280	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
17461	1280	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
17462	1283	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
17462	1283	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
17463	1288	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
17463	1288	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
17464	1291	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
17464	1291	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
17465	1300	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
17465	1300	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1321	1315	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.rows
1321	1315	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != rows
17466	1322	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
17466	1322	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
17467	1329	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
17467	1329	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
17468	1333	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
17468	1333	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
17469	1337	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
17469	1337	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
17470	1346	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
17470	1346	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
17471	1362	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
17471	1362	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
17472	1365	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
17472	1365	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
17473	1366	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
17473	1366	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
17474	1372	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
17474	1372	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
17475	1386	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
17475	1386	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
17476	1389	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
17476	1389	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
17477	1390	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
17477	1390	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
17478	1396	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
17478	1396	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
17479	1414	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
17479	1414	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
17480	1418	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
17480	1418	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
17481	1419	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
17481	1419	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
17482	1426	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
17482	1426	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
17483	1444	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
17483	1444	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
17484	1448	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
17484	1448	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
17485	1449	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
17485	1449	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
17486	1456	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
17486	1456	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
17487	1471	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
17487	1471	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
17488	1474	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
17488	1474	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
17489	1479	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
17489	1479	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
17490	1480	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
17490	1480	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
17491	1496	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
17491	1496	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
17492	1499	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
17492	1499	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
17493	1504	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
17493	1504	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
17494	1505	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
17494	1505	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
17495	1524	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
17495	1524	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
17496	1528	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
17496	1528	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
17497	1534	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
17497	1534	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
17498	1536	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
17498	1536	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
17499	1554	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
17499	1554	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
17500	1558	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
17500	1558	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
17501	1564	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
17501	1564	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
17502	1566	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
17502	1566	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
1656	157	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
17912	166	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17912	166	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
17913	168	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
17913	168	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1657	169	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1657	169	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1657	169	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1657	169	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1657	169	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1658	173	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
17914	209	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
17914	209	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
17914	209	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
1659	211	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1659	211	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
17915	219	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
17915	219	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
17916	223	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
17916	223	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
17917	234	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
17917	234	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
17918	263	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
17918	263	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
17919	267	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
17919	267	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
17920	294	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
17920	294	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
17921	315	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
17921	315	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
17921	315	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17922	316	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
17922	316	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
17922	316	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
17923	326	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
17923	326	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
17924	327	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
17924	327	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
17925	357	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
17925	357	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
17925	357	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
17926	361	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
17926	361	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
17926	361	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
17927	383	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
17927	383	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
17927	383	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17928	384	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
17928	384	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
17928	384	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
17929	394	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
17929	394	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
17930	395	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
17930	395	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
17931	425	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
17931	425	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
17931	425	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
17932	429	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
17932	429	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
17932	429	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
17933	444	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
17933	444	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
17933	444	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
17934	447	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
17934	447	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
17934	447	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
17935	461	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
17935	461	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
17935	461	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
17936	464	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
17936	464	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
17936	464	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
17937	486	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
17937	486	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
17937	486	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17938	490	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
17938	490	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
17938	490	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
17939	498	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
17939	498	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
17940	503	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
17940	503	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
17941	506	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
17941	506	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
17942	509	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
17942	509	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
17943	543	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
17943	543	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
17943	543	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17944	548	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
17944	548	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
17944	548	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
17945	558	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
17945	558	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
17946	563	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
17946	563	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
17947	566	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
17947	566	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
17948	570	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
17948	570	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
17949	578	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
17949	578	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
17950	601	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17950	601	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
17951	606	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
17951	606	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
17952	610	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
17952	610	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
17953	628	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
17953	628	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
17954	631	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17954	631	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
17955	634	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
17955	634	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
17956	636	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
17956	636	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
17957	642	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
17957	642	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
17958	653	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
17958	653	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
17959	682	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
17959	682	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
17959	682	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17960	685	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
17960	685	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
17960	685	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
1660	696	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1661	698	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1662	730	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
17961	780	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
17961	780	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1663	796	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1664	803	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1664	803	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
17962	815	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
17962	815	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
17963	821	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
17963	821	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
17964	830	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
17964	830	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
17965	853	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
17965	853	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1665	857	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1665	857	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1666	897	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1666	897	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1666	897	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
17966	910	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
17966	910	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1667	914	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1667	914	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
17967	940	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17967	940	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
17968	943	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
17968	943	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1668	944	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
1668	944	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1668	944	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
1669	981	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1669	981	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1669	981	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
17969	995	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17969	995	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
17970	998	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
17970	998	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1670	999	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
1670	999	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1670	999	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
17971	1019	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
17971	1019	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
17972	1052	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17972	1052	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
17973	1055	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
17973	1055	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
17974	1084	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
17974	1084	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1671	1100	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1671	1100	8	BlockRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1671	1100	8	BlockRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
17975	1108	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
17975	1108	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
17976	1127	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17976	1127	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
17977	1130	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
17977	1130	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1672	1144	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1672	1144	8	BlockRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1672	1144	8	BlockRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
17978	1153	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17978	1153	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
17979	1156	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
17979	1156	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
17980	1221	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
17980	1221	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
17981	1222	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
17981	1222	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
17982	1231	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
17982	1231	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
17983	1234	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
17983	1234	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1673	1264	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.columns
1673	1264	8	BlockRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != columns
17984	1270	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17984	1270	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
17985	1273	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
17985	1273	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
17986	1278	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
17986	1278	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
17987	1281	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
17987	1281	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
17988	1289	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
17988	1289	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1674	1304	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.rows
1674	1304	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != rows
17989	1310	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
17989	1310	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
17990	1317	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17990	1317	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
17991	1321	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
17991	1321	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
17992	1325	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
17992	1325	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
17993	1333	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
17993	1333	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
17994	1349	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17994	1349	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
17995	1352	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
17995	1352	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
17996	1353	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
17996	1353	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
17997	1359	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
17997	1359	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
17998	1373	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
17998	1373	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
17999	1376	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
17999	1376	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
18000	1377	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
18000	1377	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
18001	1383	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
18001	1383	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
18002	1401	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
18002	1401	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
18003	1405	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
18003	1405	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
18004	1406	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
18004	1406	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
18005	1413	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
18005	1413	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
18006	1431	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
18006	1431	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
18007	1435	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
18007	1435	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
18008	1436	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
18008	1436	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
18009	1443	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
18009	1443	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
18010	1458	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
18010	1458	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
18011	1461	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
18011	1461	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
18012	1466	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
18012	1466	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
18013	1467	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
18013	1467	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
18014	1483	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
18014	1483	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
18015	1486	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
18015	1486	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
18016	1491	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
18016	1491	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
18017	1492	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
18017	1492	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
18018	1512	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
18018	1512	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
18019	1516	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
18019	1516	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
18020	1522	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
18020	1522	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
18021	1524	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
18021	1524	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
18022	1543	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
18022	1543	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
18023	1547	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
18023	1547	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
18024	1553	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
18024	1553	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
18025	1555	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
18025	1555	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
625	47	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusOutside() != null
626	50	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusInside() != null
2677	91	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
2678	94	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
2679	118	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
2679	118	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
2679	118	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
18685	134	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
18685	134	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
18685	134	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
2680	145	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
2680	145	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
2680	145	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
2681	147	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
2681	147	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
2681	147	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
2682	155	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
2682	155	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
2682	155	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
2683	164	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
2683	164	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
2683	164	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
2684	167	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
2684	167	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
2684	167	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
2685	169	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
2685	169	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
2685	169	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
2686	199	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
1814	93	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
1815	96	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
1816	120	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
1816	120	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
1816	120	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
18194	136	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
18194	136	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
18194	136	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
1817	147	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
1817	147	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
1817	147	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
1818	149	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
1818	149	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
1818	149	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
1819	157	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
1819	157	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
1819	157	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
1820	166	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
1820	166	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
1820	166	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
1821	169	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
1821	169	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
1821	169	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
1822	171	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
1822	171	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
1822	171	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
1823	201	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
4030	85	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
4031	105	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
4032	127	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
4033	159	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[1], 0.0, 1)
4034	166	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[0], 0.0, 1)
4035	173	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[0] * $[1] < 0
4036	183	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[2], 0.0, 1)
4037	188	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[1] * $[2] < 0
4038	217	12	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	MathInternalError:RET	FastMath.max(absYA, absYB) < $.getFunctionValueAccuracy()
4038	217	12	BracketingNthOrderBrentSolver.java	doSolve	xTol	double	0	MathInternalError:RET	(xB - xA) <= $
4038	217	12	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	MathInternalError:RET	(xB - $) <= xTol
4038	217	12	BracketingNthOrderBrentSolver.java	doSolve	absYA	double	0	MathInternalError:RET	FastMath.max($, absYB) < getFunctionValueAccuracy()
4038	217	12	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	MathInternalError:RET	($ - xA) <= xTol
4038	217	12	BracketingNthOrderBrentSolver.java	doSolve	absYB	double	0	MathInternalError:RET	FastMath.max(absYA, $) < getFunctionValueAccuracy()
4039	237	12	BracketingNthOrderBrentSolver.java	doSolve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
4040	243	19	BracketingNthOrderBrentSolver.java	doSolve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
19441	258	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	NIL-DOWHILE	Double.isNaN($)
19441	258	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	0	NIL-DOWHILE	end - $ > 1
19441	258	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	0	NIL-DOWHILE	$ - start > 1
4041	264	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ < xB
4041	264	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ > xA
4041	264	16	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	DEF	nextX > $
4041	264	16	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	DEF	nextX < $
4042	270	20	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
4042	270	20	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
4042	270	20	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	1	DEF	$ - start >= end - $
4043	285	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	Double.isNaN($)
4044	294	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	0	RET	Precision.equals($, 0.0, 1)
4045	300	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	end - $ != nbPoints
4045	300	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	$ - start != nbPoints
4045	300	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	$ > 2
4045	300	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	end - start != $
4046	309	20	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	nbPoints == x.$.length
4046	309	20	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	nbPoints == $.length
4046	309	20	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	0	DEF	$ == x.length
4047	315	16	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
4047	315	16	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
4047	315	16	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
4048	333	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	1	DEF	$ * yA <= 0
4048	333	12	BracketingNthOrderBrentSolver.java	doSolve	yA	double	1	DEF	nextY * $ <= 0
19442	375	8	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	$ < end - 1
19442	375	8	BracketingNthOrderBrentSolver.java	guessX	end	int	0	NIL-FOR	i < $ - 1
19443	377	12	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ > i
19443	377	12	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	j > $
19444	384	8	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ >= start
19444	384	8	BracketingNthOrderBrentSolver.java	guessX	start	int	0	NIL-FOR	j >= $
3787	78	8	BracketingNthOrderBrentSolverDFP.java	BracketingNthOrderBrentSolverDFP	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3788	202	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[1].isZero()
3789	210	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[0].isZero()
3790	217	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[0].multiply($[1]).negativeOrNull()
3791	228	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[2].isZero()
3792	233	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[1].multiply($[2]).negativeOrNull()
3793	266	12	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	MathInternalError:RET	maxY.lessThan($.functionValueAccuracy)
3793	266	12	BracketingNthOrderBrentSolverDFP.java	solve	maxY	Dfp	0	MathInternalError:RET	$.lessThan(functionValueAccuracy)
3793	266	12	BracketingNthOrderBrentSolverDFP.java	solve	xTol	Dfp	0	MathInternalError:RET	xB.subtract(xA).subtract($).negativeOrNull()
3793	266	12	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	MathInternalError:RET	xB.subtract($).subtract(xTol).negativeOrNull()
3793	266	12	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	MathInternalError:RET	$.subtract(xA).subtract(xTol).negativeOrNull()
3794	287	12	BracketingNthOrderBrentSolverDFP.java	solve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
3795	290	19	BracketingNthOrderBrentSolverDFP.java	solve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
19311	302	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	NIL-DOWHILE	$.isNaN()
19311	302	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	0	NIL-DOWHILE	end - $ > 1
19311	302	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	0	NIL-DOWHILE	$ - start > 1
3796	308	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.greaterThan(xA)
3796	308	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.lessThan(xB)
3796	308	16	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	DEF	nextX.greaterThan($)
3796	308	16	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	DEF	nextX.lessThan($)
3797	314	20	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
3797	314	20	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
3797	314	20	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	1	DEF	$ - start >= end - $
3798	329	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.isNaN()
3799	339	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	0	RET	$.isZero()
3800	345	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	end - $ != nbPoints
3800	345	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	$ - start != nbPoints
3800	345	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	$ > 2
3800	345	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	end - start != $
3801	354	20	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	nbPoints == x.$.length
3801	354	20	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	nbPoints == $.length
3801	354	20	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	0	DEF	$ == x.length
3802	360	16	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
3802	360	16	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
3802	360	16	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
3803	378	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	1	DEF	$.multiply(yA).negativeOrNull()
3803	378	12	BracketingNthOrderBrentSolverDFP.java	solve	yA	Dfp	1	DEF	nextY.multiply($).negativeOrNull()
19312	420	8	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	$ < end - 1
19312	420	8	BracketingNthOrderBrentSolverDFP.java	guessX	end	int	0	NIL-FOR	i < $ - 1
19313	422	12	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ > i
19313	422	12	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	j > $
19314	429	8	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ >= start
19314	429	8	BracketingNthOrderBrentSolverDFP.java	guessX	start	int	0	NIL-FOR	j >= $
2692	83	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
2693	86	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
2694	127	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
2694	127	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
2695	141	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
2696	161	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
2697	167	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
2697	167	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
2698	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
2699	182	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
2699	182	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
2699	182	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
2699	182	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
2699	182	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
2699	182	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
2699	182	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
2699	182	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
2699	182	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
2699	182	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
2699	182	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
2700	190	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
2700	190	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
2700	190	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
2700	190	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
2700	190	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
2700	190	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
2701	191	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
2701	191	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
2702	199	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
2702	199	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
2703	208	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
2703	208	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
2704	217	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
2704	217	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
2705	218	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
2706	228	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
2707	241	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$ != null
2708	242	20	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$.converged(iter, previous, current)
2708	242	20	BrentOptimizer.java	doOptimize	previous	UnivariatePointValuePair	0	RET	checker.converged(iter, $, current)
2708	242	20	BrentOptimizer.java	doOptimize	current	UnivariatePointValuePair	0	RET	checker.converged(iter, previous, $)
2708	242	20	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
2709	248	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
2709	248	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
2710	249	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
2710	249	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
2711	261	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
2711	261	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
2712	266	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
2712	266	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	Precision.equals(w, $)
2712	266	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	Precision.equals($, x)
2712	266	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
2713	272	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
2713	272	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	Precision.equals(v, $)
2713	272	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, w)
2713	272	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, x)
2713	272	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	Precision.equals(v, $)
2713	272	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
2714	304	8	BrentOptimizer.java	best	a	UnivariatePointValuePair	0	RET	$ == null
2715	307	8	BrentOptimizer.java	best	b	UnivariatePointValuePair	0	RET	$ == null
2716	311	8	BrentOptimizer.java	best	isMinim	boolean	1	RET	$
1827	85	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1828	88	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
1829	129	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
1829	129	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
1830	143	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1831	163	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
1832	169	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
1832	169	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
1833	175	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
1834	184	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
1834	184	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
1834	184	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
1834	184	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
1834	184	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
1834	184	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
1834	184	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
1834	184	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
1834	184	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
1834	184	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
1834	184	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
1835	192	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
1835	192	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
1835	192	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
1835	192	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
1835	192	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
1835	192	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
1836	193	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
1836	193	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
1837	201	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1837	201	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1838	210	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1838	210	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1839	219	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
1839	219	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
1840	220	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
1841	230	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1842	243	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$ != null
1843	244	20	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$.converged(iter, previous, current)
1843	244	20	BrentOptimizer.java	doOptimize	previous	UnivariatePointValuePair	0	RET	checker.converged(iter, $, current)
1843	244	20	BrentOptimizer.java	doOptimize	current	UnivariatePointValuePair	0	RET	checker.converged(iter, previous, $)
1843	244	20	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1844	250	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
1844	250	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
1845	251	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1845	251	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1846	263	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1846	263	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1847	268	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
1847	268	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	Precision.equals(w, $)
1847	268	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	Precision.equals($, x)
1847	268	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
1848	274	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
1848	274	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	Precision.equals(v, $)
1848	274	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, x)
1848	274	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, w)
1848	274	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	Precision.equals(v, $)
1848	274	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
1849	306	8	BrentOptimizer.java	best	a	UnivariatePointValuePair	0	RET	$ == null
1850	309	8	BrentOptimizer.java	best	b	UnivariatePointValuePair	0	RET	$ == null
1851	313	8	BrentOptimizer.java	best	isMinim	boolean	1	RET	$
4084	97	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
4084	97	8	BrentSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4085	103	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
4085	103	8	BrentSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4086	108	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
4086	108	8	BrentSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
4087	114	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
4087	114	8	BrentSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4088	119	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
4088	119	8	BrentSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
4089	157	12	BrentSolver.java	brent	fb	double	0	DEF	FastMath.abs(fc) < FastMath.abs($)
4089	157	12	BrentSolver.java	brent	fc	double	0	DEF	FastMath.abs($) < FastMath.abs(fb)
4090	169	12	BrentSolver.java	brent	tol	double	0	RET	FastMath.abs(m) <= $
4090	169	12	BrentSolver.java	brent	m	double	0	RET	FastMath.abs($) <= tol
4090	169	12	BrentSolver.java	brent	fb	double	0	RET	Precision.equals($, 0)
4091	173	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(e) < $
4091	173	12	BrentSolver.java	brent	fa	double	1	DEF	FastMath.abs($) <= FastMath.abs(fb)
4091	173	12	BrentSolver.java	brent	fb	double	1	DEF	FastMath.abs(fa) <= FastMath.abs($)
4091	173	12	BrentSolver.java	brent	e	double	1	DEF	FastMath.abs($) < tol
4092	185	16	BrentSolver.java	brent	a	double	1	DEF	$ == c
4092	185	16	BrentSolver.java	brent	c	double	1	DEF	a == $
4093	196	16	BrentSolver.java	brent	p	double	1	DEF	$ > 0
4094	203	16	BrentSolver.java	brent	s	double	1	DEF	p >= FastMath.abs(0.5 * $ * q)
4094	203	16	BrentSolver.java	brent	p	double	1	DEF	$ >= 1.5 * m * q - FastMath.abs(tol * q)
4094	203	16	BrentSolver.java	brent	p	double	1	DEF	$ >= FastMath.abs(0.5 * s * q)
4094	203	16	BrentSolver.java	brent	q	double	1	DEF	p >= 1.5 * m * $ - FastMath.abs(tol * $)
4094	203	16	BrentSolver.java	brent	q	double	1	DEF	p >= FastMath.abs(0.5 * s * $)
4094	203	16	BrentSolver.java	brent	tol	double	1	DEF	p >= 1.5 * m * q - FastMath.abs($ * q)
4094	203	16	BrentSolver.java	brent	m	double	1	DEF	p >= 1.5 * $ * q - FastMath.abs(tol * q)
4095	217	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(d) > $
4095	217	12	BrentSolver.java	brent	d	double	1	DEF	FastMath.abs($) > tol
4096	219	19	BrentSolver.java	brent	m	double	1	DEF	$ > 0
4097	225	12	BrentSolver.java	brent	fb	double	0	DEF	$ <= 0
4097	225	12	BrentSolver.java	brent	fb	double	0	DEF	$ > 0
4097	225	12	BrentSolver.java	brent	fc	double	0	DEF	$ <= 0
4097	225	12	BrentSolver.java	brent	fc	double	0	DEF	$ > 0
18733	387	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
18734	395	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
18734	395	12	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
18735	397	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount + 1
18735	397	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount + 1
2818	398	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
2819	405	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
2819	405	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
2819	405	20	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
2819	405	20	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
2820	428	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
2821	437	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
2821	437	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
2822	442	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
2822	442	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
2823	444	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, optimum, lastResult)
2823	444	20	CMAESOptimizer.java	doOptimize	optimum	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
2823	444	20	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, optimum, $)
2824	451	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopFitness != 0
2825	452	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopFitness : -$.stopFitness)
2825	452	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopFitness : -stopFitness)
18736	458	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
18736	458	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
2826	459	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > $.stopTolX
2826	459	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * Math.max(Math.abs(pcCol[$]), sqrtDiagC[$]) > stopTolX
2826	459	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * Math.max(Math.abs(pcCol[i]), $[i]) > stopTolX
2826	459	16	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma * Math.max(Math.abs($[i]), sqrtDiagC[i]) > stopTolX
2827	462	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension - 1
2827	462	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension - 1
18737	466	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
18737	466	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
2828	467	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * sqrtDiagC[i] > $.stopTolUpX
2828	467	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * sqrtDiagC[$] > stopTolUpX
2828	467	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * $[i] > stopTolUpX
2829	473	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2829	473	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < $.stopTolFun
2829	473	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
2829	473	12	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
2829	473	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
2829	473	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
2830	478	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
2830	478	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst - historyBest < $.stopTolHistFun
2830	478	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst - $ < stopTolHistFun
2830	478	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$ - historyBest < stopTolHistFun
2831	483	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) / $.min($.diagD) > 1e7
2832	487	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
2833	491	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, current, lastResult)
2833	491	16	CMAESOptimizer.java	doOptimize	current	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
2833	491	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, current, $)
2833	491	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
2834	498	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1+$.lambda/4.)]]
2834	498	12	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1+lambda/4.)]]
2834	498	12	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1+lambda/4.)]]
2834	498	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1+lambda/4.)]]
2835	501	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2835	501	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
2835	501	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
2835	501	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
2836	508	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
2837	536	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof Sigma
2838	540	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof PopulationSize
2839	557	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
2840	558	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	DimensionMismatchException	$.inputSigma.$.length != init.$.length
2840	558	12	CMAESOptimizer.java	checkParameters	init	double[]	0	DimensionMismatchException	inputSigma.length != $.length
18738	561	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
18738	561	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
18738	561	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
2841	562	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > uB[i] - lB[i]
2841	562	16	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > uB[$] - lB[$]
2841	562	16	CMAESOptimizer.java	checkParameters	lB	double[]	0	OutOfRangeException	inputSigma[i] > uB[i] - $[i]
2841	562	16	CMAESOptimizer.java	checkParameters	uB	double[]	0	OutOfRangeException	inputSigma[i] > $[i] - lB[i]
2842	575	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NotStrictlyPositiveException	$.lambda <= 0
18739	580	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
18739	580	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
18739	580	8	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
18740	598	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
18740	598	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
18741	635	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
18741	635	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
2843	657	8	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
2844	680	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
2844	680	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
2845	705	8	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
2846	713	12	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
2847	736	16	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
2847	736	16	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
2848	768	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1
2848	768	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
2848	768	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
2848	768	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
2849	777	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
18742	778	16	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
18742	778	16	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
2850	779	20	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i, 0) < 0
2850	779	20	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($, 0) < 0
2851	787	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
18743	805	8	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
18744	819	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
18744	819	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
18744	819	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
18745	824	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
18745	824	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
18745	824	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
18746	984	8	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
18746	984	8	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18747	985	12	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18747	985	12	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
18748	998	8	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
18748	998	8	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18749	999	12	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18749	999	12	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
18750	1012	8	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
18750	1012	8	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18751	1013	12	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18751	1013	12	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
18752	1028	8	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
18752	1028	8	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18753	1029	12	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18753	1029	12	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
18754	1043	8	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
18754	1043	8	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18755	1044	12	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18755	1044	12	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
18756	1058	8	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
18756	1058	8	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18757	1059	12	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
18757	1059	12	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
18757	1059	12	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
18758	1073	8	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
18758	1073	8	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18759	1074	12	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18759	1074	12	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
18760	1087	8	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18760	1087	8	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
18761	1089	12	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
18761	1089	12	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
2852	1103	8	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
18762	1105	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
18762	1105	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
18763	1111	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
18763	1111	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
18764	1128	8	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
18764	1128	8	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
18765	1140	8	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
18765	1140	8	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
18766	1154	8	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
18766	1154	8	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
2853	1155	12	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
2853	1155	12	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
18767	1181	8	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
18767	1181	8	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
18767	1181	8	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
18768	1182	12	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
18768	1182	12	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
18768	1182	12	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
18769	1199	8	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
18769	1199	8	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
18770	1212	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
18770	1212	8	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18771	1213	12	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18771	1213	12	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2854	1215	16	CMAESOptimizer.java	max	e	double	0	DEF	max < $
2854	1215	16	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
18772	1229	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
18772	1229	8	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18773	1230	12	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18773	1230	12	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2855	1232	16	CMAESOptimizer.java	min	e	double	0	DEF	min > $
2855	1232	16	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
18774	1246	8	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
18774	1246	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
18774	1246	8	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
2856	1247	12	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
2856	1247	12	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
2856	1247	12	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
18775	1260	8	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
18775	1260	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
18775	1260	8	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
2857	1261	12	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
2857	1261	12	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
2857	1261	12	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
18776	1274	8	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
18776	1274	8	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
18776	1274	8	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
18777	1286	8	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
18777	1286	8	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
18777	1286	8	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
18778	1298	8	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
18778	1298	8	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
18779	1311	8	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
18779	1311	8	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
18780	1312	12	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
18780	1312	12	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
18309	515	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
18310	521	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
18310	521	12	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
18311	523	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount + 1
18311	523	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount + 1
1987	524	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1988	531	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
1988	531	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
1988	531	20	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
1988	531	20	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
1989	554	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1990	563	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
1990	563	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
1991	568	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1991	568	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
1992	570	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, optimum, lastResult)
1992	570	20	CMAESOptimizer.java	doOptimize	optimum	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1992	570	20	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, optimum, $)
1993	577	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopFitness != 0
1994	578	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopFitness : -$.stopFitness)
1994	578	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopFitness : -stopFitness)
18312	584	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
18312	584	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1995	585	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > $.stopTolX
1995	585	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * Math.max(Math.abs(pcCol[$]), sqrtDiagC[$]) > stopTolX
1995	585	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * Math.max(Math.abs(pcCol[i]), $[i]) > stopTolX
1995	585	16	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma * Math.max(Math.abs($[i]), sqrtDiagC[i]) > stopTolX
1996	588	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension - 1
1996	588	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension - 1
18313	592	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
18313	592	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1997	593	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * sqrtDiagC[i] > $.stopTolUpX
1997	593	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * sqrtDiagC[$] > stopTolUpX
1997	593	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * $[i] > stopTolUpX
1998	599	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < $.stopTolFun
1998	599	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1998	599	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
1998	599	12	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
1998	599	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
1998	599	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
1999	604	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst-historyBest < $.stopTolHistFun
1999	604	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
1999	604	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst-$ < stopTolHistFun
1999	604	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$-historyBest < stopTolHistFun
2000	609	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD)/$.min($.diagD) > 1e7
2001	613	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
2002	617	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, current, lastResult)
2002	617	16	CMAESOptimizer.java	doOptimize	current	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
2002	617	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
2002	617	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, current, $)
2003	624	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1+$.lambda/4.)]]
2003	624	12	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1+lambda/4.)]]
2003	624	12	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1+lambda/4.)]]
2003	624	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1+lambda/4.)]]
2004	627	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2004	627	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
2004	627	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
2004	627	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
2005	634	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
2006	658	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof Sigma
2007	662	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof PopulationSize
2008	677	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
2009	678	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	DimensionMismatchException	$.inputSigma.$.length != init.$.length
2009	678	12	CMAESOptimizer.java	checkParameters	init	double[]	0	DimensionMismatchException	inputSigma.length != $.length
18314	681	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
18314	681	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
18314	681	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
2010	682	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NotPositiveException	$.inputSigma[i] < 0
2010	682	16	CMAESOptimizer.java	checkParameters	i	int	0	NotPositiveException	inputSigma[$] < 0
2011	686	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > uB[i] - lB[i]
2011	686	16	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > uB[$] - lB[$]
2011	686	16	CMAESOptimizer.java	checkParameters	lB	double[]	0	OutOfRangeException	inputSigma[i] > uB[i] - $[i]
2011	686	16	CMAESOptimizer.java	checkParameters	uB	double[]	0	OutOfRangeException	inputSigma[i] > $[i] - lB[i]
2012	699	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	DEF	$.lambda <= 0
18315	706	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
18315	706	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
18315	706	8	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
18316	726	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
18316	726	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
18317	763	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
18317	763	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
2013	785	8	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
2014	808	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
2014	808	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
2015	833	8	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
2016	841	12	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
2017	864	16	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
2017	864	16	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
2018	896	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1
2018	896	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
2018	896	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
2018	896	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
2019	905	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
18318	906	16	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
18318	906	16	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
2020	907	20	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i, 0) < 0
2020	907	20	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($, 0) < 0
2021	915	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
18319	933	8	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
18320	947	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
18320	947	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
18320	947	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
18321	952	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
18321	952	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
18321	952	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
18322	1112	8	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
18322	1112	8	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18323	1113	12	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18323	1113	12	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
18324	1126	8	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
18324	1126	8	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18325	1127	12	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18325	1127	12	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
18326	1140	8	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
18326	1140	8	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18327	1141	12	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18327	1141	12	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
18328	1156	8	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
18328	1156	8	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18329	1157	12	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18329	1157	12	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
18330	1171	8	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
18330	1171	8	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18331	1172	12	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18331	1172	12	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
18332	1186	8	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
18332	1186	8	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18333	1187	12	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
18333	1187	12	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
18333	1187	12	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
18334	1201	8	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
18334	1201	8	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18335	1202	12	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18335	1202	12	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
18336	1215	8	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18336	1215	8	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
18337	1217	12	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
18337	1217	12	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
2022	1231	8	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
18338	1233	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
18338	1233	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
18339	1239	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
18339	1239	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
18340	1256	8	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
18340	1256	8	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
18341	1268	8	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
18341	1268	8	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
18342	1282	8	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
18342	1282	8	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
2023	1283	12	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
2023	1283	12	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
18343	1309	8	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
18343	1309	8	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
18343	1309	8	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
18344	1310	12	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
18344	1310	12	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
18344	1310	12	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
18345	1327	8	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
18345	1327	8	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
18346	1340	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
18346	1340	8	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18347	1341	12	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18347	1341	12	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2024	1343	16	CMAESOptimizer.java	max	e	double	0	DEF	max < $
2024	1343	16	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
18348	1357	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
18348	1357	8	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
18349	1358	12	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
18349	1358	12	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2025	1360	16	CMAESOptimizer.java	min	e	double	0	DEF	min > $
2025	1360	16	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
18350	1374	8	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
18350	1374	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
18350	1374	8	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
2026	1375	12	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
2026	1375	12	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
2026	1375	12	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
18351	1388	8	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
18351	1388	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
18351	1388	8	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
2027	1389	12	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
2027	1389	12	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
2027	1389	12	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
18352	1402	8	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
18352	1402	8	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
18352	1402	8	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
18353	1414	8	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
18353	1414	8	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
18353	1414	8	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
18354	1426	8	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
18354	1426	8	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
18355	1439	8	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
18355	1439	8	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
18356	1440	12	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
18356	1440	12	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
1199	100	8	CauchyDistribution.java	CauchyDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1200	146	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0
1200	146	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1
1201	148	15	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1202	150	16	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
2411	85	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length < 2
2411	85	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length < 2
2412	88	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length != observed.$.length
2412	88	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length != observed.length
2412	88	8	ChiSquareTest.java	chiSquare	observed	long[]	0	DimensionMismatchException	expected.length != $.length
18551	96	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
18551	96	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
18551	96	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2413	102	8	ChiSquareTest.java	chiSquare	sumExpected	double	0	DEF	FastMath.abs($ - sumObserved) > 10E-6
2413	102	8	ChiSquareTest.java	chiSquare	sumObserved	double	0	DEF	FastMath.abs(sumExpected - $) > 10E-6
18552	107	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
18552	107	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
18552	107	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2414	108	12	ChiSquareTest.java	chiSquare	rescale	boolean	1	DEF	$
2415	208	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
2415	208	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
18553	256	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
18553	256	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
18554	257	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
18554	257	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
18555	267	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
18555	267	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
18556	268	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
18556	268	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
2416	363	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
2416	363	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
2417	414	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length < 2
2417	414	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
2418	417	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
2418	417	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
2418	417	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
18557	430	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
18557	430	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
18557	430	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2419	435	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
2419	435	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
2420	440	8	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
18558	448	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
18558	448	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
18558	448	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2421	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
2421	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
2421	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
2421	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
2422	454	16	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
2423	566	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
2423	566	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
2424	588	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in.$.length < 2
2424	588	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$.length < 2
2425	592	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in[0].length < 2
2425	592	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$[0].length < 2
1513	107	8	CholeskyDecomposition.java	CholeskyDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
17762	118	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
17762	118	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
17763	122	12	CholeskyDecomposition.java	CholeskyDecomposition	j	int	0	NIL-FOR	$ < order
17763	122	12	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	j < $
1514	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lIJ	double	0	NonSymmetricMatrixException	FastMath.abs($ - lJI) > maxDelta
1514	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lJI	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - $) > maxDelta
1514	128	16	CholeskyDecomposition.java	CholeskyDecomposition	maxDelta	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - lJI) > $
17764	136	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
17764	136	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
1515	141	12	CholeskyDecomposition.java	CholeskyDecomposition	ltI	double[]	0	NonPositiveDefiniteMatrixException	$[i] <= absolutePositivityThreshold
1515	141	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	ltI[$] <= absolutePositivityThreshold
1515	141	12	CholeskyDecomposition.java	CholeskyDecomposition	absolutePositivityThreshold	double	0	NonPositiveDefiniteMatrixException	ltI[i] <= $
17765	148	12	CholeskyDecomposition.java	CholeskyDecomposition	q	int	0	NIL-FOR	$ > i
17765	148	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	q > $
17766	151	16	CholeskyDecomposition.java	CholeskyDecomposition	p	int	0	NIL-FOR	$ < order
17766	151	16	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	p < $
1516	164	8	CholeskyDecomposition.java	getL	THIS	CholeskyDecomposition	0	DEF	$.cachedL == null
1517	177	8	CholeskyDecomposition.java	getLT	THIS	CholeskyDecomposition	0	DEF	$.cachedLT == null
17767	191	8	CholeskyDecomposition.java	getDeterminant	THIS	CholeskyDecomposition	0	NIL-FOR	i < $.lTData.$.length
17767	191	8	CholeskyDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
3214	43	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == NO_FITNESS
3215	85	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
3216	100	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
3463	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	1	DEF	$.previousState != null
3463	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
19216	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19216	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
19217	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19217	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
894	116	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN
895	119	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
896	122	8	Complex.java	abs	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
897	123	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
898	129	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
899	158	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
899	158	8	Complex.java	add	THIS	Complex	0	RET	addend.$.isNaN
899	158	8	Complex.java	add	addend	Complex	0	RET	$.isNaN
900	175	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
900	175	8	Complex.java	add	addend	double	0	RET	Double.isNaN($)
901	197	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN
902	249	8	Complex.java	divide	THIS	Complex	0	RET	divisor.$.isNaN
902	249	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
902	249	8	Complex.java	divide	divisor	Complex	0	RET	$.isNaN
903	255	8	Complex.java	divide	c	double	0	RET	$ == 0.0
903	255	8	Complex.java	divide	d	double	0	RET	$ == 0.0
904	259	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
904	259	8	Complex.java	divide	divisor	Complex	0	RET	$.isInfinite()
905	263	8	Complex.java	divide	c	double	1	RET	FastMath.abs($) < FastMath.abs(d)
905	263	8	Complex.java	divide	d	double	1	RET	FastMath.abs(c) < FastMath.abs($)
906	285	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
906	285	8	Complex.java	divide	divisor	double	0	RET	Double.isNaN($)
907	288	8	Complex.java	divide	divisor	double	0	RET	$ == 0d
908	291	8	Complex.java	divide	divisor	double	0	RET	Double.isInfinite($)
909	300	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isNaN
910	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.real == 0.0
910	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.imaginary == 0.0
911	308	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isInfinite
912	312	8	Complex.java	reciprocal	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
913	340	8	Complex.java	equals	THIS	Complex	0	RET	$ == other
913	340	8	Complex.java	equals	other	Object	0	RET	this == $
914	343	8	Complex.java	equals	other	Object	0	RET	$ instanceof Complex
915	345	12	Complex.java	equals	THIS	Complex	1	RET	c.$.isNaN
915	345	12	Complex.java	equals	c	Complex	1	RET	$.isNaN
916	363	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN
917	439	8	Complex.java	multiply	THIS	Complex	0	RET	factor.$.isNaN
917	439	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
917	439	8	Complex.java	multiply	factor	Complex	0	RET	$.isNaN
918	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
918	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
918	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.imaginary)
918	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.real)
918	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.imaginary)
918	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.real)
919	462	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
920	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
920	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
921	481	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
921	481	8	Complex.java	multiply	factor	double	0	RET	Double.isNaN($)
922	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
922	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
922	484	8	Complex.java	multiply	factor	double	0	RET	Double.isInfinite($)
923	501	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN
924	529	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
924	529	8	Complex.java	subtract	THIS	Complex	0	RET	subtrahend.$.isNaN
924	529	8	Complex.java	subtract	subtrahend	Complex	0	RET	$.isNaN
925	546	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
925	546	8	Complex.java	subtract	subtrahend	double	0	RET	Double.isNaN($)
926	569	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN
927	593	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN
928	617	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN
929	658	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN
930	698	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN
931	739	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN
932	784	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN
933	862	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN
934	902	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN
935	945	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN
936	949	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
936	949	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
937	954	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
938	1016	8	Complex.java	tan	THIS	Complex	0	RET	Double.isInfinite($.real)
938	1016	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN
939	1019	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary > 20.0
940	1022	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary < -20.0
941	1067	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN
941	1067	8	Complex.java	tanh	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
942	1070	8	Complex.java	tanh	THIS	Complex	0	RET	$.real > 20.0
943	1073	8	Complex.java	tanh	THIS	Complex	0	RET	$.real < -20.0
944	1131	8	Complex.java	nthRoot	n	int	0	NotPositiveException	$ <= 0
945	1138	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN
946	1142	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
17301	1154	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
17301	1154	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
947	1188	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
947	1188	8	Complex.java	valueOf	imaginaryPart	double	0	RET	Double.isNaN($)
948	1202	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
878	67	8	ComplexFormat.java	ComplexFormat	format	NumberFormat	0	NullArgumentException	$ == null
879	85	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
880	88	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
881	146	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NullArgumentException	$ == null
882	149	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NoDataException	$.length() == 0
883	152	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
884	155	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
885	214	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
886	219	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
886	219	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
887	245	8	ComplexFormat.java	formatImaginary	toAppendTo	StringBuffer	0	DEF	$.toString().equals("1")
888	272	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
889	274	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
890	354	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
891	377	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
892	413	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
893	421	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	CompositeFormat.parseFixedstring(source, $.getImaginaryCharacter(), pos)
893	421	8	ComplexFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, getImaginaryCharacter(), pos)
893	421	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), $)
870	63	8	ComplexUtils.java	polar2Complex	r	double	0	MathIllegalArgumentException	$ < 0
17299	81	8	ComplexUtils.java	convertToComplex	THIS	ComplexUtils	0	NIL-FOR	i < real.$.length
17299	81	8	ComplexUtils.java	convertToComplex	i	int	0	NIL-FOR	$ < real.length
17299	81	8	ComplexUtils.java	convertToComplex	real	double[]	0	NIL-FOR	i < $.length
506	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
506	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
17259	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
17259	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
17259	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
507	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
507	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
508	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
508	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
509	122	12	CompositeFormat.java	parseNumber	sb	StringBuilder	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
509	122	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
509	122	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
509	122	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
510	148	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
510	148	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
17260	153	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
17260	153	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
17260	153	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
511	155	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
512	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
512	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
512	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
512	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
512	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
512	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
512	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
512	177	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
513	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
513	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
1762	176	8	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	1	DEF	$ == null
1763	185	8	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1763	185	8	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
1764	195	12	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	0	DEF	$ != null
1765	199	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1765	199	12	ConjugateGradient.java	solveInPlace	rhoNext	double	0	DEF	$ <= 0.
1766	207	12	ConjugateGradient.java	solveInPlace	manager	IterationManager	1	DEF	$.getIterations() == 2
1767	214	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1767	214	12	ConjugateGradient.java	solveInPlace	pq	double	0	DEF	$ <= 0.
1768	230	12	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1768	230	12	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
95	129	8	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(hPrev, 0.0, $)
95	129	8	ContinuedFraction.java	evaluate	hPrev	double	0	DEF	Precision.equals($, 0.0, small)
17198	138	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
17198	138	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
96	143	12	ContinuedFraction.java	evaluate	dN	double	0	DEF	Precision.equals($, 0.0, small)
96	143	12	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(dN, 0.0, $)
97	147	12	ContinuedFraction.java	evaluate	cN	double	0	DEF	Precision.equals($, 0.0, small)
97	147	12	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(cN, 0.0, $)
98	155	12	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isInfinite($)
99	159	12	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isNaN($)
100	164	12	ContinuedFraction.java	evaluate	deltaN	double	0	DEF	FastMath.abs($ - 1.0) < epsilon
100	164	12	ContinuedFraction.java	evaluate	epsilon	double	0	DEF	FastMath.abs(deltaN - 1.0) < $
101	174	8	ContinuedFraction.java	evaluate	n	int	0	MaxCountExceededException	$ >= maxIterations
101	174	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxCountExceededException	n >= $
3516	133	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
3516	133	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
3517	137	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
3518	142	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DimensionMismatchException	$.getInterpolatedState().length != model.getInterpolatedState().length
3518	142	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DimensionMismatchException	getInterpolatedState().length != $.getInterpolatedState().length
3519	147	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	MathIllegalArgumentException	$.forward ^ model.$.forward
3519	147	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	MathIllegalArgumentException	forward ^ $.forward
3520	156	6	ContinuousOutputModel.java	append	step	double	0	MathIllegalArgumentException	FastMath.abs(gap) > 1.0e-3 * FastMath.abs($)
3520	156	6	ContinuousOutputModel.java	append	gap	double	0	MathIllegalArgumentException	FastMath.abs($) > 1.0e-3 * FastMath.abs(step)
3521	192	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
3522	199	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
3523	257	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
3523	257	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
3523	257	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
3524	262	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
3524	262	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
3524	262	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
19250	269	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
19250	269	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
3525	274	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
3526	277	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
3527	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs(tMax - $) < 1e-6
3527	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs($ - tMin) < 1e-6
3527	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	FastMath.abs(tMed - $) < 1e-6
3527	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	FastMath.abs($ - tMed) < 1e-6
3528	314	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
3528	314	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
3529	316	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
3529	316	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
19251	324	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
19251	324	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
19251	324	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
19251	324	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
3530	349	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
3531	350	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
3531	350	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
3532	352	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
3532	352	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
3533	358	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
3533	358	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
3534	360	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
3534	360	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
3115	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
3115	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
3115	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
18995	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
18995	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
18996	168	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.normalized.$.length
18996	168	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < normalized.length
18997	174	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
18997	174	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
18997	174	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
18998	176	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.root.getColumnDimension()
18998	176	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < root.getColumnDimension()
18597	173	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
18597	173	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
18598	174	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
18598	174	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
2481	245	8	Covariance.java	covariance	THIS	Covariance	1	MathIllegalArgumentException	length != yArray.$.length
2481	245	8	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ != yArray.length
2481	245	8	Covariance.java	covariance	yArray	double[]	1	MathIllegalArgumentException	length != $.length
2482	248	15	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ < 2
18599	254	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
18599	254	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
2483	290	8	Covariance.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2483	290	8	Covariance.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 1
1856	187	8	CurveFitter.java	fit	THIS	CurveFitter	1	DEF	$.optimizer == null
3204	106	8	CycleCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3204	106	8	CycleCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3205	124	8	CycleCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3205	124	8	CycleCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
19044	144	8	CycleCrossover.java	mate	length	int	0	NIL-WHILE	visitedIndices.size() < $
19044	144	8	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.size() < length
19045	150	12	CycleCrossover.java	mate	indices	List<Integer>	0	NIL-WHILE	idx != $.get(0)
19045	150	12	CycleCrossover.java	mate	idx	int	0	NIL-WHILE	$ != indices.get(0)
3206	160	12	CycleCrossover.java	mate	cycle	int	0	DEF	$++ % 2 != 0
19046	171	12	CycleCrossover.java	mate	length	int	0	NIL-WHILE	visitedIndices.size() < $
19046	171	12	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.contains(idx)
19046	171	12	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.size() < length
19046	171	12	CycleCrossover.java	mate	idx	int	0	NIL-WHILE	visitedIndices.contains($)
3207	173	16	CycleCrossover.java	mate	length	int	0	DEF	idx >= $
3207	173	16	CycleCrossover.java	mate	idx	int	0	DEF	$ >= length
2439	86	8	DBSCANClusterer.java	DBSCANClusterer	eps	double	0	NotPositiveException	$ < 0.0d
2440	89	8	DBSCANClusterer.java	DBSCANClusterer	minPts	int	0	NotPositiveException	$ < 0
2441	134	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	0	DEF	visited.get($.point) != null
2441	134	12	DBSCANClusterer.java	cluster	visited	Map<Clusterable<T>,PointStatus>	0	DEF	$.get(point) != null
2442	138	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	1	DEF	neighbors.size() >= $.minPts
2442	138	12	DBSCANClusterer.java	cluster	neighbors	List<T>	1	DEF	$.size() >= minPts
18570	170	8	DBSCANClusterer.java	expandCluster	seeds	List<T>	0	NIL-WHILE	index < $.size()
18570	170	8	DBSCANClusterer.java	expandCluster	index	int	0	NIL-WHILE	$ < seeds.size()
2443	174	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ == null
2444	176	16	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	currentNeighbors.size() >= $.minPts
2444	176	16	DBSCANClusterer.java	expandCluster	currentNeighbors	List<T>	0	DEF	$.size() >= minPts
2445	181	12	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	pStatus != $.PointStatus.PART_OF_CLUSTER
2445	181	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ != PointStatus.PART_OF_CLUSTER
2446	201	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	$.neighbor.distanceFrom(point) <= $.eps
2446	201	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	point != $.neighbor
2446	201	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	neighbor.distanceFrom($) <= eps
2446	201	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	$ != neighbor
2447	218	12	DBSCANClusterer.java	merge	THIS	DBSCANClusterer	0	DEF	oneSet.contains($.item)
2447	218	12	DBSCANClusterer.java	merge	oneSet	Set<T>	0	DEF	$.contains(item)
4100	196	8	DSCompiler.java	getCompiler	THIS	DSCompiler	0	RET	cache.$.length > parameters
4100	196	8	DSCompiler.java	getCompiler	THIS	DSCompiler	0	RET	cache[parameters].length > order
4100	196	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$.length > parameters
4100	196	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$[parameters].length > order
4100	196	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$ != null
4100	196	8	DSCompiler.java	getCompiler	parameters	int	0	RET	cache.length > $
4100	196	8	DSCompiler.java	getCompiler	parameters	int	0	RET	cache[$].length > order
4100	196	8	DSCompiler.java	getCompiler	order	int	0	RET	cache[parameters].length > $
4101	197	12	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$[parameters][order] != null
4101	197	12	DSCompiler.java	getCompiler	parameters	int	0	RET	cache[$][order] != null
4101	197	12	DSCompiler.java	getCompiler	order	int	0	RET	cache[parameters][$] != null
4102	208	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	DEF	$ != null
19451	210	12	DSCompiler.java	getCompiler	THIS	DSCompiler	0	NIL-FOR	i < cache.$.length
19451	210	12	DSCompiler.java	getCompiler	i	int	0	NIL-FOR	$ < cache.length
19451	210	12	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	NIL-FOR	i < $.length
19452	216	8	DSCompiler.java	getCompiler	diag	int	0	NIL-FOR	$ <= parameters + order
19452	216	8	DSCompiler.java	getCompiler	parameters	int	0	NIL-FOR	diag <= $ + order
19452	216	8	DSCompiler.java	getCompiler	order	int	0	NIL-FOR	diag <= parameters + $
19453	217	12	DSCompiler.java	getCompiler	o	int	0	NIL-FOR	$ <= FastMath.min(order, diag)
19453	217	12	DSCompiler.java	getCompiler	diag	int	0	NIL-FOR	o <= FastMath.min(order, $)
19453	217	12	DSCompiler.java	getCompiler	order	int	0	NIL-FOR	o <= FastMath.min($, diag)
4103	219	16	DSCompiler.java	getCompiler	p	int	0	DEF	newCache[$][o] == null
4103	219	16	DSCompiler.java	getCompiler	o	int	0	DEF	newCache[p][$] == null
4103	219	16	DSCompiler.java	getCompiler	newCache	DSCompiler[][]	0	DEF	$[p][o] == null
4104	244	8	DSCompiler.java	compileSizes	parameters	int	1	DEF	$ == 0
19454	249	12	DSCompiler.java	compileSizes	i	int	0	NIL-FOR	$ < order
19454	249	12	DSCompiler.java	compileSizes	order	int	0	NIL-FOR	i < $
4105	269	8	DSCompiler.java	compileDerivativesIndirection	parameters	int	0	RET	$ == 0
4105	269	8	DSCompiler.java	compileDerivativesIndirection	order	int	0	RET	$ == 0
19455	278	8	DSCompiler.java	compileDerivativesIndirection	i	int	0	NIL-FOR	$ < vSize
19455	278	8	DSCompiler.java	compileDerivativesIndirection	vSize	int	0	NIL-FOR	i < $
19456	286	8	DSCompiler.java	compileDerivativesIndirection	i	int	0	NIL-FOR	$ < dSize
19456	286	8	DSCompiler.java	compileDerivativesIndirection	dSize	int	0	NIL-FOR	i < $
4106	317	8	DSCompiler.java	compileLowerIndirection	parameters	int	0	RET	$ == 0
4106	317	8	DSCompiler.java	compileLowerIndirection	order	int	0	RET	$ <= 1
19457	326	8	DSCompiler.java	compileLowerIndirection	i	int	0	NIL-FOR	$ < dSize
19457	326	8	DSCompiler.java	compileLowerIndirection	dSize	int	0	NIL-FOR	i < $
4107	352	8	DSCompiler.java	compileMultiplicationIndirection	parameters	int	0	RET	$ == 0
4107	352	8	DSCompiler.java	compileMultiplicationIndirection	order	int	0	RET	$ == 0
19458	363	8	DSCompiler.java	compileMultiplicationIndirection	i	int	0	NIL-FOR	$ < dSize
19458	363	8	DSCompiler.java	compileMultiplicationIndirection	dSize	int	0	NIL-FOR	i < $
19459	366	12	DSCompiler.java	compileMultiplicationIndirection	THIS	DSCompiler	0	NIL-FOR	j < dRow.$.length
19459	366	12	DSCompiler.java	compileMultiplicationIndirection	j	int	0	NIL-FOR	$ < dRow.length
19459	366	12	DSCompiler.java	compileMultiplicationIndirection	dRow	int[][]	0	NIL-FOR	j < $.length
19460	373	12	DSCompiler.java	compileMultiplicationIndirection	j	int	0	NIL-FOR	$ < row.size()
19460	373	12	DSCompiler.java	compileMultiplicationIndirection	row	List<int[]>	0	NIL-FOR	j < $.size()
4108	375	16	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[0] > 0
19461	376	20	DSCompiler.java	compileMultiplicationIndirection	k	int	0	NIL-FOR	$ < row.size()
19461	376	20	DSCompiler.java	compileMultiplicationIndirection	row	List<int[]>	0	NIL-FOR	k < $.size()
4109	378	24	DSCompiler.java	compileMultiplicationIndirection	termK	int[]	0	DEF	termJ[2] == $[2]
4109	378	24	DSCompiler.java	compileMultiplicationIndirection	termK	int[]	0	DEF	termJ[1] == $[1]
4109	378	24	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[2] == termK[2]
4109	378	24	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[1] == termK[1]
4110	419	8	DSCompiler.java	compileCompositionIndirection	parameters	int	0	RET	$ == 0
4110	419	8	DSCompiler.java	compileCompositionIndirection	order	int	0	RET	$ == 0
19462	434	8	DSCompiler.java	compileCompositionIndirection	i	int	0	NIL-FOR	$ < dSize
19462	434	8	DSCompiler.java	compileCompositionIndirection	dSize	int	0	NIL-FOR	i < $
19463	447	16	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	j < $.term.$.length
19463	447	16	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < term.length
19464	458	16	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	l < $.term.$.length
19464	458	16	DSCompiler.java	compileCompositionIndirection	l	int	0	NIL-FOR	$ < term.length
19465	462	20	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	j < $.term.$.length
19465	462	20	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < term.length
4111	468	24	DSCompiler.java	compileCompositionIndirection	j	int	0	DEF	$ == l
4111	468	24	DSCompiler.java	compileCompositionIndirection	l	int	0	DEF	j == $
19466	483	12	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < row.size()
19466	483	12	DSCompiler.java	compileCompositionIndirection	row	List<int[]>	0	NIL-FOR	j < $.size()
4112	485	16	DSCompiler.java	compileCompositionIndirection	termJ	int[]	0	DEF	$[0] > 0
19467	486	20	DSCompiler.java	compileCompositionIndirection	k	int	0	NIL-FOR	$ < row.size()
19467	486	20	DSCompiler.java	compileCompositionIndirection	row	List<int[]>	0	NIL-FOR	k < $.size()
19468	489	24	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	l < termJ.$.length
19468	489	24	DSCompiler.java	compileCompositionIndirection	l	int	0	NIL-FOR	$ < termJ.length
19468	489	24	DSCompiler.java	compileCompositionIndirection	equals	boolean	0	NIL-FOR	$
19468	489	24	DSCompiler.java	compileCompositionIndirection	termJ	int[]	0	NIL-FOR	l < $.length
4113	492	24	DSCompiler.java	compileCompositionIndirection	equals	boolean	0	DEF	$
4114	547	8	DSCompiler.java	getPartialDerivativeIndex	THIS	DSCompiler	0	DimensionMismatchException	orders.$.length != $.getFreeParameters()
4114	547	8	DSCompiler.java	getPartialDerivativeIndex	orders	int	0	DimensionMismatchException	$.length != getFreeParameters()
19469	574	8	DSCompiler.java	getPartialDerivativeIndex	i	int	0	NIL-FOR	$ >= 0
4115	581	12	DSCompiler.java	getPartialDerivativeIndex	ordersSum	int	0	NumberIsTooLargeException	$ > order
4115	581	12	DSCompiler.java	getPartialDerivativeIndex	order	int	0	NumberIsTooLargeException	ordersSum > $
19470	585	12	DSCompiler.java	getPartialDerivativeIndex	derivativeOrder	int	0	NIL-WHILE	$-- > 0
19471	671	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
19471	671	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
19472	696	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
19472	696	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
19473	727	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
19473	727	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
19474	748	8	DSCompiler.java	add	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
19474	748	8	DSCompiler.java	add	i	int	0	NIL-FOR	$ < getSize()
19475	764	8	DSCompiler.java	subtract	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
19475	764	8	DSCompiler.java	subtract	i	int	0	NIL-FOR	$ < getSize()
19476	782	8	DSCompiler.java	multiply	THIS	DSCompiler	0	NIL-FOR	i < $.multIndirection.$.length
19476	782	8	DSCompiler.java	multiply	i	int	0	NIL-FOR	$ < multIndirection.length
19477	785	12	DSCompiler.java	multiply	THIS	DSCompiler	0	NIL-FOR	j < mappingI.$.length
19477	785	12	DSCompiler.java	multiply	j	int	0	NIL-FOR	$ < mappingI.length
19477	785	12	DSCompiler.java	multiply	mappingI	int[][]	0	NIL-FOR	j < $.length
19478	833	8	DSCompiler.java	remainder	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
19478	833	8	DSCompiler.java	remainder	i	int	0	NIL-FOR	$ < getSize()
19479	855	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ > 0
19480	861	8	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
19480	861	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
4116	883	8	DSCompiler.java	pow	n	int	0	RET	$ == 0
4117	894	8	DSCompiler.java	pow	n	int	1	DEF	$ > 0
19481	898	12	DSCompiler.java	pow	i	int	0	NIL-FOR	$ > 0
19482	907	12	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
19482	907	12	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
19483	914	8	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
19483	914	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
4118	960	8	DSCompiler.java	rootN	n	int	1	DEF	$ == 2
4119	963	15	DSCompiler.java	rootN	n	int	1	DEF	$ == 3
19484	972	8	DSCompiler.java	rootN	THIS	DSCompiler	0	NIL-FOR	i <= $.order
19484	972	8	DSCompiler.java	rootN	i	int	0	NIL-FOR	$ <= order
4120	1037	8	DSCompiler.java	log	THIS	DSCompiler	0	DEF	$.order > 0
19485	1040	12	DSCompiler.java	log	THIS	DSCompiler	0	NIL-FOR	i <= $.order
19485	1040	12	DSCompiler.java	log	i	int	0	NIL-FOR	$ <= order
4121	1064	8	DSCompiler.java	log1p	THIS	DSCompiler	0	DEF	$.order > 0
19486	1067	12	DSCompiler.java	log1p	THIS	DSCompiler	0	NIL-FOR	i <= $.order
19486	1067	12	DSCompiler.java	log1p	i	int	0	NIL-FOR	$ <= order
4122	1091	8	DSCompiler.java	log10	THIS	DSCompiler	0	DEF	$.order > 0
19487	1094	12	DSCompiler.java	log10	THIS	DSCompiler	0	NIL-FOR	i <= $.order
19487	1094	12	DSCompiler.java	log10	i	int	0	NIL-FOR	$ <= order
4123	1119	8	DSCompiler.java	cos	THIS	DSCompiler	0	DEF	$.order > 0
19488	1121	12	DSCompiler.java	cos	THIS	DSCompiler	0	NIL-FOR	i <= $.order
19488	1121	12	DSCompiler.java	cos	i	int	0	NIL-FOR	$ <= order
4124	1145	8	DSCompiler.java	sin	THIS	DSCompiler	0	DEF	$.order > 0
19489	1147	12	DSCompiler.java	sin	THIS	DSCompiler	0	NIL-FOR	i <= $.order
19489	1147	12	DSCompiler.java	sin	i	int	0	NIL-FOR	$ <= order
4125	1173	8	DSCompiler.java	tan	THIS	DSCompiler	0	DEF	$.order > 0
19490	1185	12	DSCompiler.java	tan	THIS	DSCompiler	0	NIL-FOR	n <= $.order
19490	1185	12	DSCompiler.java	tan	n	int	0	NIL-FOR	$ <= order
19491	1190	16	DSCompiler.java	tan	k	int	0	NIL-FOR	$ >= 0
4126	1192	20	DSCompiler.java	tan	k	int	1	DEF	$ > 2
4127	1194	27	DSCompiler.java	tan	k	int	0	DEF	$ == 2
4128	1198	16	DSCompiler.java	tan	n	int	0	DEF	($ & 0x1) == 0
4129	1227	8	DSCompiler.java	acos	THIS	DSCompiler	0	DEF	$.order > 0
19492	1241	12	DSCompiler.java	acos	THIS	DSCompiler	0	NIL-FOR	n <= $.order
19492	1241	12	DSCompiler.java	acos	n	int	0	NIL-FOR	$ <= order
19493	1246	16	DSCompiler.java	acos	k	int	0	NIL-FOR	$ >= 0
4130	1248	20	DSCompiler.java	acos	k	int	1	DEF	$ > 2
4131	1250	27	DSCompiler.java	acos	k	int	0	DEF	$ == 2
4132	1254	16	DSCompiler.java	acos	n	int	0	DEF	($ & 0x1) == 0
4133	1284	8	DSCompiler.java	asin	THIS	DSCompiler	0	DEF	$.order > 0
19494	1298	12	DSCompiler.java	asin	THIS	DSCompiler	0	NIL-FOR	n <= $.order
19494	1298	12	DSCompiler.java	asin	n	int	0	NIL-FOR	$ <= order
19495	1303	16	DSCompiler.java	asin	k	int	0	NIL-FOR	$ >= 0
4134	1305	20	DSCompiler.java	asin	k	int	1	DEF	$ > 2
4135	1307	27	DSCompiler.java	asin	k	int	0	DEF	$ == 2
4136	1311	16	DSCompiler.java	asin	n	int	0	DEF	($ & 0x1) == 0
4137	1341	8	DSCompiler.java	atan	THIS	DSCompiler	0	DEF	$.order > 0
19496	1355	12	DSCompiler.java	atan	THIS	DSCompiler	0	NIL-FOR	n <= $.order
19496	1355	12	DSCompiler.java	atan	n	int	0	NIL-FOR	$ <= order
19497	1360	16	DSCompiler.java	atan	k	int	0	NIL-FOR	$ >= 0
4138	1362	20	DSCompiler.java	atan	k	int	1	DEF	$ > 2
4139	1364	27	DSCompiler.java	atan	k	int	0	DEF	$ == 2
4140	1368	16	DSCompiler.java	atan	n	int	0	DEF	($ & 0x1) == 0
4141	1405	8	DSCompiler.java	atan2	x	double[]	1	DEF	$[xOffset] >= 0
4141	1405	8	DSCompiler.java	atan2	xOffset	int	1	DEF	x[$] >= 0
19498	1411	12	DSCompiler.java	atan2	THIS	DSCompiler	0	NIL-FOR	i < tmp2.$.length
19498	1411	12	DSCompiler.java	atan2	i	int	0	NIL-FOR	$ < tmp2.length
19498	1411	12	DSCompiler.java	atan2	tmp2	double[]	0	NIL-FOR	i < $.length
19499	1423	12	DSCompiler.java	atan2	THIS	DSCompiler	0	NIL-FOR	i < tmp2.$.length
19499	1423	12	DSCompiler.java	atan2	i	int	0	NIL-FOR	$ < tmp2.length
19499	1423	12	DSCompiler.java	atan2	tmp2	double[]	0	NIL-FOR	i < $.length
4142	1448	8	DSCompiler.java	cosh	THIS	DSCompiler	0	DEF	$.order > 0
19500	1450	12	DSCompiler.java	cosh	THIS	DSCompiler	0	NIL-FOR	i <= $.order
19500	1450	12	DSCompiler.java	cosh	i	int	0	NIL-FOR	$ <= order
4143	1474	8	DSCompiler.java	sinh	THIS	DSCompiler	0	DEF	$.order > 0
19501	1476	12	DSCompiler.java	sinh	THIS	DSCompiler	0	NIL-FOR	i <= $.order
19501	1476	12	DSCompiler.java	sinh	i	int	0	NIL-FOR	$ <= order
4144	1502	8	DSCompiler.java	tanh	THIS	DSCompiler	0	DEF	$.order > 0
19502	1514	12	DSCompiler.java	tanh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
19502	1514	12	DSCompiler.java	tanh	n	int	0	NIL-FOR	$ <= order
19503	1519	16	DSCompiler.java	tanh	k	int	0	NIL-FOR	$ >= 0
4145	1521	20	DSCompiler.java	tanh	k	int	1	DEF	$ > 2
4146	1523	27	DSCompiler.java	tanh	k	int	0	DEF	$ == 2
4147	1527	16	DSCompiler.java	tanh	n	int	0	DEF	($ & 0x1) == 0
4148	1556	8	DSCompiler.java	acosh	THIS	DSCompiler	0	DEF	$.order > 0
19504	1570	12	DSCompiler.java	acosh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
19504	1570	12	DSCompiler.java	acosh	n	int	0	NIL-FOR	$ <= order
19505	1575	16	DSCompiler.java	acosh	k	int	0	NIL-FOR	$ >= 0
4149	1577	20	DSCompiler.java	acosh	k	int	1	DEF	$ > 2
4150	1579	27	DSCompiler.java	acosh	k	int	0	DEF	$ == 2
4151	1583	16	DSCompiler.java	acosh	n	int	0	DEF	($ & 0x1) == 0
4152	1613	8	DSCompiler.java	asinh	THIS	DSCompiler	0	DEF	$.order > 0
19506	1627	12	DSCompiler.java	asinh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
19506	1627	12	DSCompiler.java	asinh	n	int	0	NIL-FOR	$ <= order
19507	1632	16	DSCompiler.java	asinh	k	int	0	NIL-FOR	$ >= 0
4153	1634	20	DSCompiler.java	asinh	k	int	1	DEF	$ > 2
4154	1636	27	DSCompiler.java	asinh	k	int	0	DEF	$ == 2
4155	1640	16	DSCompiler.java	asinh	n	int	0	DEF	($ & 0x1) == 0
4156	1670	8	DSCompiler.java	atanh	THIS	DSCompiler	0	DEF	$.order > 0
19508	1684	12	DSCompiler.java	atanh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
19508	1684	12	DSCompiler.java	atanh	n	int	0	NIL-FOR	$ <= order
19509	1689	16	DSCompiler.java	atanh	k	int	0	NIL-FOR	$ >= 0
4157	1691	20	DSCompiler.java	atanh	k	int	1	DEF	$ > 2
4158	1693	27	DSCompiler.java	atanh	k	int	0	DEF	$ == 2
4159	1697	16	DSCompiler.java	atanh	n	int	0	DEF	($ & 0x1) == 0
19510	1724	8	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	i < $.compIndirection.$.length
19510	1724	8	DSCompiler.java	compose	i	int	0	NIL-FOR	$ < compIndirection.length
19511	1727	12	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	j < mappingI.$.length
19511	1727	12	DSCompiler.java	compose	j	int	0	NIL-FOR	$ < mappingI.length
19511	1727	12	DSCompiler.java	compose	mappingI	int[][]	0	NIL-FOR	j < $.length
19512	1730	16	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	k < mappingIJ.$.length
19512	1730	16	DSCompiler.java	compose	k	int	0	NIL-FOR	$ < mappingIJ.length
19512	1730	16	DSCompiler.java	compose	mappingIJ	int[]	0	NIL-FOR	k < $.length
19513	1749	8	DSCompiler.java	taylor	i	int	0	NIL-FOR	$ >= 0
19514	1752	12	DSCompiler.java	taylor	THIS	DSCompiler	0	NIL-FOR	k < orders.$.length
19514	1752	12	DSCompiler.java	taylor	k	int	0	NIL-FOR	$ < orders.length
19514	1752	12	DSCompiler.java	taylor	orders	int[]	0	NIL-FOR	k < $.length
4160	1753	16	DSCompiler.java	taylor	k	int	0	MathInternalError	orders[$] > 0
4160	1753	16	DSCompiler.java	taylor	orders	int[]	0	MathInternalError	$[k] > 0
4161	1774	8	DSCompiler.java	checkCompatibility	THIS	DSCompiler	0	DimensionMismatchException	$.parameters != compiler.$.parameters
4161	1774	8	DSCompiler.java	checkCompatibility	compiler	DSCompiler	0	DimensionMismatchException	parameters != $.parameters
4162	1777	8	DSCompiler.java	checkCompatibility	THIS	DSCompiler	0	DimensionMismatchException	$.order != compiler.$.order
4162	1777	8	DSCompiler.java	checkCompatibility	compiler	DSCompiler	0	DimensionMismatchException	order != $.order
552	247	8	Decimal64.java	equals	obj	Object	0	RET	$ instanceof Decimal64
553	403	8	Decimal64.java	rootN	THIS	Decimal64	1	RET	$.value < 0
554	520	8	Decimal64.java	linearCombination	THIS	Decimal64	0	DimensionMismatchException	a.$.length != b.$.length
554	520	8	Decimal64.java	linearCombination	a	Decimal64[]	0	DimensionMismatchException	$.length != b.length
554	520	8	Decimal64.java	linearCombination	b	Decimal64[]	0	DimensionMismatchException	a.length != $.length
17266	525	8	Decimal64.java	linearCombination	THIS	Decimal64	0	NIL-FOR	i < a.$.length
17266	525	8	Decimal64.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
17266	525	8	Decimal64.java	linearCombination	a	Decimal64[]	0	NIL-FOR	i < $.length
555	535	8	Decimal64.java	linearCombination	THIS	Decimal64	0	DimensionMismatchException	a.$.length != b.$.length
555	535	8	Decimal64.java	linearCombination	a	double[]	0	DimensionMismatchException	$.length != b.length
555	535	8	Decimal64.java	linearCombination	b	Decimal64[]	0	DimensionMismatchException	a.length != $.length
17267	539	8	Decimal64.java	linearCombination	THIS	Decimal64	0	NIL-FOR	i < a.$.length
17267	539	8	Decimal64.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
17267	539	8	Decimal64.java	linearCombination	a	double[]	0	NIL-FOR	i < $.length
1782	114	8	DefaultIterativeLinearSolverEvent.java	getResidual	THIS	DefaultIterativeLinearSolverEvent	0	RET	$.r != null
526	50	8	DefaultTransformer.java	transform	o	Object	0	NullArgumentException	$ == null
527	54	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
528	69	8	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
528	69	8	DefaultTransformer.java	equals	other	Object	0	RET	this == $
4167	121	8	DerivativeStructure.java	DerivativeStructure	parameters	int	0	NumberIsTooLargeException	index >= $
4167	121	8	DerivativeStructure.java	DerivativeStructure	index	int	0	NumberIsTooLargeException	$ >= parameters
4168	125	8	DerivativeStructure.java	DerivativeStructure	order	int	0	DEF	$ > 0
4169	207	8	DerivativeStructure.java	DerivativeStructure	THIS	DerivativeStructure	0	DimensionMismatchException	derivatives.$.length != $.data.$.length
4169	207	8	DerivativeStructure.java	DerivativeStructure	derivatives	double	0	DimensionMismatchException	$.length != data.length
19518	315	8	DerivativeStructure.java	multiply	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
19518	315	8	DerivativeStructure.java	multiply	i	int	0	NIL-FOR	$ < ds.data.length
19518	315	8	DerivativeStructure.java	multiply	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
19519	336	8	DerivativeStructure.java	divide	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
19519	336	8	DerivativeStructure.java	divide	i	int	0	NIL-FOR	$ < ds.data.length
19519	336	8	DerivativeStructure.java	divide	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
19520	376	8	DerivativeStructure.java	negate	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
19520	376	8	DerivativeStructure.java	negate	i	int	0	NIL-FOR	$ < ds.data.length
19520	376	8	DerivativeStructure.java	negate	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
4170	384	8	DerivativeStructure.java	abs	THIS	DerivativeStructure	1	RET	Double.doubleToLongBits($.data[0]) < 0
4171	429	8	DerivativeStructure.java	copySign	m	long	0	RET	$ >= 0
4171	429	8	DerivativeStructure.java	copySign	m	long	0	RET	$ < 0
4171	429	8	DerivativeStructure.java	copySign	s	long	0	RET	$ < 0
4171	429	8	DerivativeStructure.java	copySign	s	long	0	RET	$ >= 0
4172	439	8	DerivativeStructure.java	copySign	m	long	0	RET	$ >= 0
4172	439	8	DerivativeStructure.java	copySign	m	long	0	RET	$ < 0
4172	439	8	DerivativeStructure.java	copySign	s	long	0	RET	$ < 0
4172	439	8	DerivativeStructure.java	copySign	s	long	0	RET	$ >= 0
19521	460	8	DerivativeStructure.java	scalb	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
19521	460	8	DerivativeStructure.java	scalb	i	int	0	NIL-FOR	$ < ds.data.length
19521	460	8	DerivativeStructure.java	scalb	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
4173	475	8	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isInfinite($.data[0])
4173	475	8	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isInfinite(y.$.data[0])
4173	475	8	DerivativeStructure.java	hypot	y	DerivativeStructure	1	RET	Double.isInfinite($.data[0])
4174	479	15	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isNaN($.data[0])
4174	479	15	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isNaN(y.$.data[0])
4174	479	15	DerivativeStructure.java	hypot	y	DerivativeStructure	1	RET	Double.isNaN($.data[0])
4175	487	12	DerivativeStructure.java	hypot	expX	int	1	RET	$ > expY + 27
4175	487	12	DerivativeStructure.java	hypot	expY	int	1	RET	expX > $ + 27
4176	490	19	DerivativeStructure.java	hypot	expX	int	1	RET	expY > $ + 27
4176	490	19	DerivativeStructure.java	hypot	expY	int	1	RET	$ > expX + 27
4177	545	8	DerivativeStructure.java	compose	THIS	DerivativeStructure	0	DimensionMismatchException	f.$.length != $.getOrder() + 1
4177	545	8	DerivativeStructure.java	compose	f	double	0	DimensionMismatchException	$.length != getOrder() + 1
19522	772	8	DerivativeStructure.java	toDegrees	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
19522	772	8	DerivativeStructure.java	toDegrees	i	int	0	NIL-FOR	$ < ds.data.length
19522	772	8	DerivativeStructure.java	toDegrees	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
19523	783	8	DerivativeStructure.java	toRadians	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
19523	783	8	DerivativeStructure.java	toRadians	i	int	0	NIL-FOR	$ < ds.data.length
19523	783	8	DerivativeStructure.java	toRadians	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
19524	807	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < a.$.length
19524	807	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
19524	807	8	DerivativeStructure.java	linearCombination	a	DerivativeStructure[]	0	NIL-FOR	i < $.length
19525	811	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < b.$.length
19525	811	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < b.length
19525	811	8	DerivativeStructure.java	linearCombination	b	DerivativeStructure[]	0	NIL-FOR	i < $.length
19526	818	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < a.$.length
19526	818	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
19526	818	8	DerivativeStructure.java	linearCombination	a	DerivativeStructure[]	0	NIL-FOR	i < $.length
19527	838	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < b.$.length
19527	838	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < b.length
19527	838	8	DerivativeStructure.java	linearCombination	b	DerivativeStructure[]	0	NIL-FOR	i < $.length
19528	845	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < a.$.length
19528	845	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
19528	845	8	DerivativeStructure.java	linearCombination	a	double[]	0	NIL-FOR	i < $.length
4178	1013	8	DerivativeStructure.java	equals	THIS	DerivativeStructure	0	RET	$ == other
4178	1013	8	DerivativeStructure.java	equals	other	Object	0	RET	this == $
4179	1017	8	DerivativeStructure.java	equals	other	Object	0	RET	$ instanceof DerivativeStructure
2311	140	8	DescriptiveStatistics.java	DescriptiveStatistics	initialDoubleArray	double[]	0	DEF	$ != null
2312	165	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
2313	166	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
2314	168	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
2315	252	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
2316	253	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
2317	356	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ < 1
2317	356	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ != INFINITE_WINDOW
2318	366	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
2318	366	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
2318	366	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
2319	427	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
3564	219	8	Dfp.java	Dfp	x	long	0	DEF	$ == Long.MIN_VALUE
3565	227	8	Dfp.java	Dfp	x	long	1	DEF	$ < 0
19257	235	8	Dfp.java	Dfp	x	long	0	NIL-WHILE	$ != 0
3566	242	8	Dfp.java	Dfp	isLongMin	boolean	0	DEF	$
19258	245	12	Dfp.java	Dfp	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
19258	245	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < mant.length - 1
3567	246	16	Dfp.java	Dfp	THIS	Dfp	0	DEF	$.mant[i] != 0
3567	246	16	Dfp.java	Dfp	i	int	0	DEF	mant[$] != 0
3568	271	8	Dfp.java	Dfp	exponent	int	0	RET	$ == -1023
3569	273	12	Dfp.java	Dfp	x	double	0	RET	$ == 0
3570	275	16	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
19259	284	12	Dfp.java	Dfp	mantissa	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
3571	291	8	Dfp.java	Dfp	exponent	int	0	RET	$ == 1024
3572	293	12	Dfp.java	Dfp	x	double	1	DEF	$ != $
3573	296	19	Dfp.java	Dfp	x	double	1	DEF	$ < 0
3574	310	8	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
3575	351	8	Dfp.java	Dfp	s	String	0	RET	$.equals(POS_INFINITY_STRING)
3576	357	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NEG_INFINITY_STRING)
3577	363	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NAN_STRING)
3578	371	8	Dfp.java	Dfp	p	int	0	DEF	$ == -1
3579	377	8	Dfp.java	Dfp	p	int	1	DEF	$ != -1
19260	383	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$<fpexp.length()
19260	383	12	Dfp.java	Dfp	fpexp	String	0	NIL-FOR	i<$.length()
3580	385	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) == '-'
3580	385	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) == '-'
3581	390	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) <= '9'
3581	390	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) >= '0'
3581	390	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) <= '9'
3581	390	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) >= '0'
3582	395	12	Dfp.java	Dfp	negative	boolean	0	DEF	$
3583	404	8	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.indexOf("-") != -1
3584	414	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) <= '9'
3584	414	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) >= '1'
3584	414	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) <= '9'
3584	414	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) >= '1'
3585	418	12	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
3585	418	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '0'
3585	418	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '0'
3586	422	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
3586	422	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
3587	428	12	Dfp.java	Dfp	p	int	0	DEF	$ == fpdecimal.length()
3587	428	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == $.length()
3588	441	12	Dfp.java	Dfp	p	int	0	DEF	$ == (fpdecimal.length())
3588	441	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == ($.length())
3589	446	12	Dfp.java	Dfp	THIS	Dfp	0	DEF	q == $.mant.$.length*rsize+offset+1
3589	446	12	Dfp.java	Dfp	rsize	int	0	DEF	q == mant.length*$+offset+1
3589	446	12	Dfp.java	Dfp	offset	int	0	DEF	q == mant.length*rsize+$+1
3589	446	12	Dfp.java	Dfp	q	int	0	DEF	$ == mant.length*rsize+offset+1
3590	450	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
3590	450	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
3591	457	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) > '9'
3591	457	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) < '0'
3591	457	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) > '9'
3591	457	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) < '0'
3592	470	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
3592	470	8	Dfp.java	Dfp	offset	int	0	DEF	q != $
3592	470	8	Dfp.java	Dfp	q	int	0	DEF	$ != offset
3593	473	16	Dfp.java	Dfp	offset	int	0	DEF	q == $
3593	473	16	Dfp.java	Dfp	q	int	0	DEF	$ == offset
3594	476	16	Dfp.java	Dfp	striped	char[]	1	DEF	$[q] == '0'
3594	476	16	Dfp.java	Dfp	q	int	1	DEF	striped[$] == '0'
3595	485	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
3595	485	8	Dfp.java	Dfp	significantDigits	int	0	DEF	$ == 0
3596	490	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
19261	498	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	$ > q
19261	498	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	p > $
3597	499	12	Dfp.java	Dfp	striped	char[]	0	DEF	$[p] != '0'
3597	499	12	Dfp.java	Dfp	p	int	0	DEF	striped[$] != '0'
19262	511	8	Dfp.java	Dfp	THIS	Dfp	0	NIL-WHILE	(p - q) < ($.mant.$.length * rsize)
19262	511	8	Dfp.java	Dfp	rsize	int	0	NIL-WHILE	(p - q) < (mant.length * $)
19262	511	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	($ - q) < (mant.length * rsize)
19262	511	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	(p - $) < (mant.length * rsize)
19263	512	12	Dfp.java	Dfp	rsize	int	0	NIL-FOR	i < $
19263	512	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < rsize
19264	519	8	Dfp.java	Dfp	i	int	0	NIL-FOR	$ >= 0
3598	530	8	Dfp.java	Dfp	THIS	Dfp	0	DEF	q < striped.$.length
3598	530	8	Dfp.java	Dfp	striped	char[]	0	DEF	q < $.length
3598	530	8	Dfp.java	Dfp	q	int	0	DEF	$ < striped.length
3599	599	8	Dfp.java	newInstance	THIS	Dfp	0	RET	$.field.getRadixDigits() != d.$.field.getRadixDigits()
3599	599	8	Dfp.java	newInstance	d	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
19265	671	8	Dfp.java	shiftLeft	i	int	0	NIL-FOR	$ > 0
19266	683	8	Dfp.java	shiftRight	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
19266	683	8	Dfp.java	shiftRight	i	int	0	NIL-FOR	$ < mant.length - 1
3600	705	8	Dfp.java	align	adiff	int	0	DEF	$ < 0
3601	709	8	Dfp.java	align	diff	int	0	RET	$ == 0
3602	713	8	Dfp.java	align	THIS	Dfp	0	RET	adiff > ($.mant.$.length + 1)
3602	713	8	Dfp.java	align	adiff	int	0	RET	$ > (mant.length + 1)
19267	724	8	Dfp.java	align	i	int	0	NIL-FOR	$ < adiff
19267	724	8	Dfp.java	align	adiff	int	0	NIL-FOR	i < $
3603	725	12	Dfp.java	align	diff	int	1	DEF	$ < 0
3604	730	16	Dfp.java	align	lostdigit	int	0	DEF	$ != 0
3605	742	8	Dfp.java	align	inexact	boolean	0	DEF	$
3606	758	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3606	758	8	Dfp.java	lessThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3607	767	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.isNaN()
3607	767	8	Dfp.java	lessThan	x	Dfp	0	RET	$.isNaN()
3608	783	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3608	783	8	Dfp.java	greaterThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3609	792	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.isNaN()
3609	792	8	Dfp.java	greaterThan	x	Dfp	0	RET	$.isNaN()
3610	806	8	Dfp.java	negativeOrNull	THIS	Dfp	0	RET	$.isNaN()
3611	821	8	Dfp.java	strictlyNegative	THIS	Dfp	0	RET	$.isNaN()
3612	836	8	Dfp.java	positiveOrNull	THIS	Dfp	0	RET	$.isNaN()
3613	851	8	Dfp.java	strictlyPositive	THIS	Dfp	0	RET	$.isNaN()
3614	889	8	Dfp.java	isZero	THIS	Dfp	0	RET	$.isNaN()
3615	906	8	Dfp.java	equals	other	Object	0	RET	$ instanceof Dfp
3616	908	12	Dfp.java	equals	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3616	908	12	Dfp.java	equals	THIS	Dfp	0	RET	$.isNaN()
3616	908	12	Dfp.java	equals	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3616	908	12	Dfp.java	equals	x	Dfp	0	RET	$.isNaN()
3617	933	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.isNaN()
3617	933	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3617	933	8	Dfp.java	unequal	x	Dfp	0	RET	$.isNaN()
3617	933	8	Dfp.java	unequal	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3618	948	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length - 1] == 0
3618	948	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
3618	948	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[a.$.mant.$.length - 1] == 0
3618	948	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
3618	948	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
3618	948	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
3618	948	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
3618	948	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
3619	953	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.sign != b.$.sign
3619	953	8	Dfp.java	compare	a	Dfp	0	RET	$.sign != b.sign
3619	953	8	Dfp.java	compare	b	Dfp	0	RET	a.sign != $.sign
3620	954	12	Dfp.java	compare	THIS	Dfp	1	RET	a.$.sign == -1
3620	954	12	Dfp.java	compare	a	Dfp	1	RET	$.sign == -1
3621	962	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
3621	962	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
3621	962	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
3621	962	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
3622	966	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
3622	966	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
3622	966	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
3622	966	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
3623	970	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
3623	970	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
3623	970	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
3623	970	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
3624	975	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[b.$.mant.$.length-1] != 0
3624	975	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length-1] != 0
3624	975	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[b.mant.length-1] != 0
3624	975	8	Dfp.java	compare	b	Dfp	0	RET	a.mant[$.mant.length-1] != 0
3624	975	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length-1] != 0
3625	976	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp < b.$.exp
3625	976	12	Dfp.java	compare	a	Dfp	0	RET	$.exp < b.exp
3625	976	12	Dfp.java	compare	b	Dfp	0	RET	a.exp < $.exp
3626	980	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp > b.$.exp
3626	980	12	Dfp.java	compare	a	Dfp	0	RET	$.exp > b.exp
3626	980	12	Dfp.java	compare	b	Dfp	0	RET	a.exp > $.exp
19268	986	8	Dfp.java	compare	i	int	0	NIL-FOR	$ >= 0
3627	987	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] > b.$.mant[i]
3627	987	12	Dfp.java	compare	i	int	0	RET	a.mant[$] > b.mant[$]
3627	987	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] > b.mant[i]
3627	987	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] > $.mant[i]
3628	991	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] < b.$.mant[i]
3628	991	12	Dfp.java	compare	i	int	0	RET	a.mant[$] < b.mant[$]
3628	991	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] < b.mant[i]
3628	991	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] < $.mant[i]
3629	1034	8	Dfp.java	remainder	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3629	1034	8	Dfp.java	remainder	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3630	1049	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.isNaN()
3631	1053	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.nans == INFINITE
3632	1057	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3633	1064	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp < 0
3634	1075	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp >= $.mant.$.length
19269	1083	8	Dfp.java	trunc	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length-result.$.exp
19269	1083	8	Dfp.java	trunc	i	int	0	NIL-FOR	$ < mant.length-result.exp
19269	1083	8	Dfp.java	trunc	result	Dfp	0	NIL-FOR	i < mant.length-$.exp
3635	1088	8	Dfp.java	trunc	changed	boolean	0	RET	$
3636	1091	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == -1
3636	1091	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == -1
3637	1098	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == 1
3637	1098	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == 1
3638	1109	20	Dfp.java	trunc	half	Dfp	0	DEF	a.greaterThan($)
3638	1109	20	Dfp.java	trunc	a	Dfp	0	DEF	$.greaterThan(half)
3639	1116	20	Dfp.java	trunc	THIS	Dfp	0	DEF	(result.$.mant[$.mant.$.length-result.$.exp]&1) != 0
3639	1116	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.exp > 0
3639	1116	20	Dfp.java	trunc	half	Dfp	0	DEF	a.equals($)
3639	1116	20	Dfp.java	trunc	a	Dfp	0	DEF	$.equals(half)
3639	1116	20	Dfp.java	trunc	result	Dfp	0	DEF	($.mant[mant.length-$.exp]&1) != 0
3639	1116	20	Dfp.java	trunc	result	Dfp	0	DEF	$.exp > 0
3640	1142	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.greaterThan($.newInstance(2147483647))
3640	1142	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.greaterThan(newInstance(2147483647))
3641	1146	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.lessThan($.newInstance(-2147483648))
3641	1146	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.lessThan(newInstance(-2147483648))
19270	1150	8	Dfp.java	intValue	THIS	Dfp	0	NIL-FOR	i >= $.mant.$.length - rounded.$.exp
19270	1150	8	Dfp.java	intValue	i	int	0	NIL-FOR	$ >= mant.length - rounded.exp
19270	1150	8	Dfp.java	intValue	rounded	Dfp	0	NIL-FOR	i >= mant.length - $.exp
3642	1154	8	Dfp.java	intValue	THIS	Dfp	0	DEF	rounded.$.sign == -1
3642	1154	8	Dfp.java	intValue	rounded	Dfp	0	DEF	$.sign == -1
3643	1184	8	Dfp.java	intLog10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 1000
3644	1187	8	Dfp.java	intLog10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 100
3645	1190	8	Dfp.java	intLog10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 10
3646	1203	8	Dfp.java	power10	e	int	1	DEF	$ >= 0
19271	1234	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
19271	1234	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
19272	1240	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
19272	1240	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
3647	1256	8	Dfp.java	add	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3647	1256	8	Dfp.java	add	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3648	1264	8	Dfp.java	add	THIS	Dfp	0	RET	$.nans != FINITE
3648	1264	8	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans != FINITE
3648	1264	8	Dfp.java	add	x	Dfp	0	RET	$.nans != FINITE
3649	1265	12	Dfp.java	add	THIS	Dfp	0	RET	$.isNaN()
3650	1269	12	Dfp.java	add	x	Dfp	0	RET	$.isNaN()
3651	1273	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == FINITE
3651	1273	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
3651	1273	12	Dfp.java	add	x	Dfp	0	RET	$.nans == FINITE
3652	1277	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
3652	1277	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == FINITE
3652	1277	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
3653	1281	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
3653	1281	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign == x.$.sign
3653	1281	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
3653	1281	12	Dfp.java	add	x	Dfp	0	RET	sign == $.sign
3653	1281	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
3654	1285	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
3654	1285	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
3654	1285	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign != x.$.sign
3654	1285	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
3654	1285	12	Dfp.java	add	x	Dfp	0	RET	sign != $.sign
3655	1310	8	Dfp.java	add	THIS	Dfp	0	DEF	$.compare(a, b) > 0
3655	1310	8	Dfp.java	add	a	Dfp	0	DEF	compare($, b) > 0
3655	1310	8	Dfp.java	add	b	Dfp	0	DEF	compare(a, $) > 0
3656	1317	8	Dfp.java	add	THIS	Dfp	0	DEF	b.$.mant[$.mant.$.length-1] == 0
3656	1317	8	Dfp.java	add	b	Dfp	0	DEF	$.mant[mant.length-1] == 0
3657	1321	8	Dfp.java	add	THIS	Dfp	0	DEF	a.$.mant[$.mant.$.length-1] == 0
3657	1321	8	Dfp.java	add	a	Dfp	0	DEF	$.mant[mant.length-1] == 0
3658	1328	8	Dfp.java	add	THIS	Dfp	1	DEF	a.$.exp < b.$.exp
3658	1328	8	Dfp.java	add	a	Dfp	1	DEF	$.exp < b.exp
3658	1328	8	Dfp.java	add	b	Dfp	1	DEF	a.exp < $.exp
3659	1335	8	Dfp.java	add	asign	byte	0	DEF	$ != bsign
3659	1335	8	Dfp.java	add	bsign	byte	0	DEF	asign != $
3660	1336	12	Dfp.java	add	asign	byte	1	DEF	$ == rsign
3660	1336	12	Dfp.java	add	rsign	byte	1	DEF	asign == $
19273	1345	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
19273	1345	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
3661	1356	8	Dfp.java	add	asign	byte	0	DEF	$ == bsign
3661	1356	8	Dfp.java	add	bsign	byte	0	DEF	asign == $
3661	1356	8	Dfp.java	add	rh	int	0	DEF	$ != 0
3662	1361	12	Dfp.java	add	excp	int	0	DEF	$ != 0
19274	1367	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
19274	1367	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
3663	1368	12	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] != 0
3663	1368	12	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] != 0
3664	1372	12	Dfp.java	add	i	int	0	DEF	$ == 0
3665	1380	8	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3665	1380	8	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3666	1383	12	Dfp.java	add	asign	byte	0	DEF	$ != bsign
3666	1383	12	Dfp.java	add	bsign	byte	0	DEF	asign != $
3667	1391	8	Dfp.java	add	excp	int	0	DEF	$ != 0
3668	1456	8	Dfp.java	round	inc	boolean	0	DEF	$
19275	1459	12	Dfp.java	round	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
19275	1459	12	Dfp.java	round	i	int	0	NIL-FOR	$ < mant.length
3669	1465	12	Dfp.java	round	rh	int	0	DEF	$ != 0
3670	1472	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp < MIN_EXP
3671	1478	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp > MAX_EXP
3672	1484	8	Dfp.java	round	n	int	0	RET	$ != 0
3673	1501	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3673	1501	8	Dfp.java	multiply	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3674	1511	8	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans != FINITE
3674	1511	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
3674	1511	8	Dfp.java	multiply	x	Dfp	0	RET	$.nans != FINITE
3675	1512	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
3676	1516	12	Dfp.java	multiply	x	Dfp	0	RET	$.isNaN()
3677	1520	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] != 0
3677	1520	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
3677	1520	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
3677	1520	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] != 0
3677	1520	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
3678	1526	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] != 0
3678	1526	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
3678	1526	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
3678	1526	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
3679	1532	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
3679	1532	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
3679	1532	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
3680	1538	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
3680	1538	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
3680	1538	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
3680	1538	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3680	1538	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
3680	1538	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] == 0
3680	1538	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
3680	1538	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
3680	1538	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] == 0
19276	1550	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
19276	1550	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
19277	1552	12	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	j<$.mant.$.length
19277	1552	12	Dfp.java	multiply	j	int	0	NIL-FOR	$<mant.length
19278	1564	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ >= 0
3681	1565	12	Dfp.java	multiply	i	int	0	DEF	product[$] != 0
3681	1565	12	Dfp.java	multiply	product	int[]	0	DEF	$[i] != 0
19279	1572	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
19279	1572	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
3682	1580	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3682	1580	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3683	1586	8	Dfp.java	multiply	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
3683	1586	8	Dfp.java	multiply	md	int	1	DEF	$ > (mant.length-1)
3684	1592	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
3685	1605	8	Dfp.java	multiply	x	int	1	RET	$ >= 0
3685	1605	8	Dfp.java	multiply	x	int	1	RET	$ < RADIX
3686	1621	8	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans != FINITE
3687	1622	12	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.isNaN()
3688	1626	12	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans == INFINITE
3688	1626	12	Dfp.java	multiplyFast	x	int	0	RET	$ != 0
3689	1631	12	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans == INFINITE
3689	1631	12	Dfp.java	multiplyFast	x	int	0	RET	$ == 0
3690	1641	8	Dfp.java	multiplyFast	x	int	0	RET	$ < 0
3690	1641	8	Dfp.java	multiplyFast	x	int	0	RET	$ >= RADIX
19280	1650	8	Dfp.java	multiplyFast	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
19280	1650	8	Dfp.java	multiplyFast	i	int	0	NIL-FOR	$ < mant.length
3691	1657	8	Dfp.java	multiplyFast	rh	int	0	DEF	$ != 0
3692	1663	8	Dfp.java	multiplyFast	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3692	1663	8	Dfp.java	multiplyFast	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3693	1668	8	Dfp.java	multiplyFast	excp	int	0	DEF	$ != 0
3694	1692	8	Dfp.java	divide	THIS	Dfp	0	RET	$.field.getRadixDigits() != divisor.$.field.getRadixDigits()
3694	1692	8	Dfp.java	divide	divisor	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3695	1702	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
3695	1702	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans != FINITE
3695	1702	8	Dfp.java	divide	divisor	Dfp	0	RET	$.nans != FINITE
3696	1703	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
3697	1707	12	Dfp.java	divide	divisor	Dfp	0	RET	$.isNaN()
3698	1711	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3698	1711	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == FINITE
3698	1711	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == FINITE
3699	1717	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
3699	1717	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == FINITE
3699	1717	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
3700	1723	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3700	1723	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
3700	1723	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
3701	1733	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.mant[$.mant.$.length-1] == 0
3701	1733	8	Dfp.java	divide	divisor	Dfp	0	RET	$.mant[mant.length-1] == 0
19281	1756	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
19281	1756	8	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
19282	1764	8	Dfp.java	divide	qd	int	0	NIL-FOR	$ >= 0
19283	1773	12	Dfp.java	divide	trialgood	boolean	0	NIL-WHILE	$
19284	1779	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
19284	1779	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
19285	1788	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
19285	1788	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
3702	1795	16	Dfp.java	divide	rh	int	0	DEF	$ == 0
3703	1805	16	Dfp.java	divide	minadj	int	0	DEF	$ >= 2
19286	1813	16	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3704	1814	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] > remainder[i]
3704	1814	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] > remainder[$]
3704	1814	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] > $[i]
3704	1814	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] > remainder[i]
3705	1817	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] < remainder[i]
3705	1817	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] < remainder[$]
3705	1817	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] < $[i]
3705	1817	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] < remainder[i]
3706	1822	16	Dfp.java	divide	THIS	Dfp	0	DEF	remainder[$.mant.$.length] != 0
3706	1822	16	Dfp.java	divide	remainder	int[]	0	DEF	$[mant.length] != 0
3707	1826	16	Dfp.java	divide	trialgood	boolean	0	DEF	$ == false
3708	1833	12	Dfp.java	divide	nsqd	int	0	DEF	$ != 0
3708	1833	12	Dfp.java	divide	trial	int	0	DEF	$ != 0
3709	1837	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd == $.mant.$.length
3709	1837	12	Dfp.java	divide	THIS	Dfp	0	DEF	$.field.getRoundingMode() == DfpField.$.RoundingMode.ROUND_DOWN
3709	1837	12	Dfp.java	divide	nsqd	int	0	DEF	$ == mant.length
3710	1842	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd > $.mant.$.length
3710	1842	12	Dfp.java	divide	nsqd	int	0	DEF	$ > mant.length
19287	1849	12	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
19287	1849	12	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
19288	1856	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3711	1857	12	Dfp.java	divide	i	int	0	DEF	quotient[$] != 0
3711	1857	12	Dfp.java	divide	quotient	int[]	0	DEF	$[i] != 0
19289	1864	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i<$.mant.$.length
19289	1864	8	Dfp.java	divide	i	int	0	NIL-FOR	$<mant.length
3712	1872	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3712	1872	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3713	1876	8	Dfp.java	divide	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
3713	1876	8	Dfp.java	divide	md	int	1	DEF	$ > (mant.length-1)
3714	1882	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
3715	1897	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
3716	1898	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
3717	1902	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3718	1908	8	Dfp.java	divide	divisor	int	0	RET	$ == 0
3719	1918	8	Dfp.java	divide	divisor	int	0	RET	$ < 0
3719	1918	8	Dfp.java	divide	divisor	int	0	RET	$ >= RADIX
19290	1929	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3720	1936	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3720	1936	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3721	1946	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
3722	1965	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == FINITE
3722	1965	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3723	1970	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans != FINITE
3724	1971	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == 1
3724	1971	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == INFINITE
3725	1976	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == QNAN
3726	1980	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == SNAN
3727	1990	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == -1
3728	2004	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp < -1
3728	2004	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp > 1
3728	2004	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp < -1
3728	2004	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp > 1
19291	2030	8	Dfp.java	sqrt	x	Dfp	0	NIL-WHILE	$.unequal(px)
19291	2030	8	Dfp.java	sqrt	px	Dfp	0	NIL-WHILE	x.unequal($)
3729	2039	12	Dfp.java	sqrt	x	Dfp	0	DEF	$.equals(ppx)
3729	2039	12	Dfp.java	sqrt	ppx	Dfp	0	DEF	x.equals($)
3730	2046	12	Dfp.java	sqrt	THIS	Dfp	0	DEF	dx.$.mant[$.mant.$.length-1] == 0
3730	2046	12	Dfp.java	sqrt	dx	Dfp	0	DEF	$.mant[mant.length-1] == 0
3731	2060	8	Dfp.java	toString	THIS	Dfp	0	RET	$.nans != FINITE
3732	2062	12	Dfp.java	toString	THIS	Dfp	1	RET	$.nans == INFINITE
3733	2069	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp < -1
3733	2069	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp > $.mant.$.length
19292	2091	8	Dfp.java	dfp2sci	i	int	0	NIL-FOR	$ >= 0
19293	2099	8	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-FOR	p < rawdigits.$.length
19293	2099	8	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-FOR	p < $.length
19293	2099	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ < rawdigits.length
3734	2100	12	Dfp.java	dfp2sci	rawdigits	char[]	0	DEF	$[p] != '0'
3734	2100	12	Dfp.java	dfp2sci	p	int	0	DEF	rawdigits[$] != '0'
3735	2108	8	Dfp.java	dfp2sci	THIS	Dfp	0	DEF	$.sign == -1
3736	2112	8	Dfp.java	dfp2sci	THIS	Dfp	1	DEF	p != rawdigits.$.length
3736	2112	8	Dfp.java	dfp2sci	rawdigits	char[]	1	DEF	p != $.length
3736	2112	8	Dfp.java	dfp2sci	p	int	1	DEF	$ != rawdigits.length
19294	2117	12	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-WHILE	p<rawdigits.$.length
19294	2117	12	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-WHILE	p<$.length
19294	2117	12	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$<rawdigits.length
3737	2135	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
19295	2140	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ > ae
19295	2140	8	Dfp.java	dfp2sci	ae	int	0	NIL-FOR	p > $
3738	2144	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
19296	2148	8	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$ > 0
3739	2170	8	Dfp.java	dfp2string	e	int	0	DEF	$ <= 0
19297	2176	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ < 0
19298	2184	8	Dfp.java	dfp2string	i	int	0	NIL-FOR	$ >= 0
3740	2189	12	Dfp.java	dfp2string	e	int	0	DEF	--$ == 0
19299	2195	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ > 0
3741	2203	8	Dfp.java	dfp2string	pointInserted	boolean	0	DEF	$
19300	2210	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[q] == '0'
19300	2210	8	Dfp.java	dfp2string	q	int	0	NIL-WHILE	buffer[$] == '0'
3742	2213	8	Dfp.java	dfp2string	buffer	char[]	0	DEF	$[q] == '.'
3742	2213	8	Dfp.java	dfp2string	q	int	0	DEF	buffer[$] == '.'
19301	2218	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[p-1] == '0'
19301	2218	8	Dfp.java	dfp2string	p	int	0	NIL-WHILE	buffer[$-1] == '0'
3743	2223	8	Dfp.java	dfp2string	THIS	Dfp	0	DEF	$.sign < 0
3744	2249	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] != 0
3744	2249	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
3745	2256	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] == 0
3745	2256	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
3746	2262	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
3746	2262	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == QNAN
3747	2267	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
3747	2267	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == SNAN
3748	2274	16	Dfp.java	dotrap	THIS	Dfp	1	DEF	(result.$.exp+$.mant.$.length) < MIN_EXP
3748	2274	16	Dfp.java	dotrap	result	Dfp	1	DEF	($.exp+mant.length) < MIN_EXP
3749	2339	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3749	2339	8	Dfp.java	nextAfter	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3750	2348	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan(x)
3750	2348	8	Dfp.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
3751	2352	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.compare(this, x) == 0
3751	2352	8	Dfp.java	nextAfter	x	Dfp	0	RET	compare(this, $) == 0
3752	2356	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan($.getZero())
3753	2362	8	Dfp.java	nextAfter	up	boolean	1	DEF	$
3754	2367	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
3755	2377	12	Dfp.java	nextAfter	THIS	Dfp	1	DEF	$.equals(inc)
3755	2377	12	Dfp.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
3756	2383	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
3757	2390	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.classify() != INFINITE
3757	2390	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
3758	2395	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	result.equals($.getZero())
3758	2395	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero()) == false
3758	2395	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
3759	2410	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isInfinite()
3760	2411	12	Dfp.java	toDouble	THIS	Dfp	1	RET	$.lessThan($.getZero())
3761	2418	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isNaN()
3762	2425	8	Dfp.java	toDouble	cmp0	int	1	RET	$ == 0
3763	2427	15	Dfp.java	toDouble	cmp0	int	0	DEF	$ < 0
3764	2435	8	Dfp.java	toDouble	exponent	int	0	DEF	$ < 0
19302	2440	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.lessThan($)
19302	2440	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.equals($)
19302	2440	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.lessThan(y)
19302	2440	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.equals(y)
3765	2449	8	Dfp.java	toDouble	exponent	int	0	DEF	$ > -1023
3766	2453	8	Dfp.java	toDouble	exponent	int	0	RET	$ < -1074
3767	2457	8	Dfp.java	toDouble	exponent	int	0	RET	$ > 1023
3768	2467	8	Dfp.java	toDouble	mantissa	long	0	DEF	$ == 4503599627370496L
3769	2474	8	Dfp.java	toDouble	exponent	int	0	DEF	$ <= -1023
19303	2478	8	Dfp.java	toDouble	exponent	int	0	NIL-WHILE	$ < -1023
3770	2486	8	Dfp.java	toDouble	negate	boolean	0	DEF	$
3771	2561	8	Dfp.java	signum	THIS	Dfp	1	RET	$.isNaN()
3771	2561	8	Dfp.java	signum	THIS	Dfp	1	RET	$.isZero()
3772	2572	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign < 0
3772	2572	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign >= 0
3772	2572	8	Dfp.java	copySign	THIS	Dfp	0	RET	s.$.sign >= 0
3772	2572	8	Dfp.java	copySign	THIS	Dfp	0	RET	s.$.sign < 0
3772	2572	8	Dfp.java	copySign	s	Dfp	0	RET	$.sign >= 0
3772	2572	8	Dfp.java	copySign	s	Dfp	0	RET	$.sign < 0
3773	2583	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign >= 0
3773	2583	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign < 0
3773	2583	8	Dfp.java	copySign	sb	long	0	RET	$ >= 0
3773	2583	8	Dfp.java	copySign	sb	long	0	RET	$ < 0
3774	2738	8	Dfp.java	atan2	THIS	Dfp	1	RET	x.$.sign >= 0
3774	2738	8	Dfp.java	atan2	x	Dfp	1	RET	$.sign >= 0
3775	2803	8	Dfp.java	linearCombination	THIS	Dfp	0	DimensionMismatchException	a.$.length != b.$.length
3775	2803	8	Dfp.java	linearCombination	a	Dfp[]	0	DimensionMismatchException	$.length != b.length
3775	2803	8	Dfp.java	linearCombination	b	Dfp[]	0	DimensionMismatchException	a.length != $.length
19304	2807	8	Dfp.java	linearCombination	THIS	Dfp	0	NIL-FOR	i < a.$.length
19304	2807	8	Dfp.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
19304	2807	8	Dfp.java	linearCombination	a	Dfp[]	0	NIL-FOR	i < $.length
3776	2818	8	Dfp.java	linearCombination	THIS	Dfp	0	DimensionMismatchException	a.$.length != b.$.length
3776	2818	8	Dfp.java	linearCombination	a	double[]	0	DimensionMismatchException	$.length != b.length
3776	2818	8	Dfp.java	linearCombination	b	Dfp[]	0	DimensionMismatchException	a.length != $.length
19305	2822	8	Dfp.java	linearCombination	THIS	Dfp	0	NIL-FOR	i < a.$.length
19305	2822	8	Dfp.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
19305	2822	8	Dfp.java	linearCombination	a	double[]	0	NIL-FOR	i < $.length
3543	131	8	DfpDec.java	newInstance	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != d.getField().getRadixDigits()
3543	131	8	DfpDec.java	newInstance	d	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
3544	168	8	DfpDec.java	round	msb	int	0	RET	$ == 0
19253	175	8	DfpDec.java	round	msb	int	0	NIL-WHILE	lsbthreshold > $
19253	175	8	DfpDec.java	round	lsbthreshold	int	0	NIL-WHILE	$ > msb
19254	186	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsbshift % 4
19254	186	8	DfpDec.java	round	lsbshift	int	0	NIL-FOR	i < $ % 4
3545	192	8	DfpDec.java	round	THIS	DfpDec	0	RET	digits == 4 * $.mant.$.length - 3
3545	192	8	DfpDec.java	round	lsbthreshold	int	0	RET	$ <= 1
3545	192	8	DfpDec.java	round	digits	int	0	RET	$ == 4 * mant.length - 3
3546	198	8	DfpDec.java	round	lsbthreshold	int	1	DEF	$ == 1
19255	208	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsd
19255	208	8	DfpDec.java	round	lsd	int	0	NIL-FOR	i < $
3547	255	8	DfpDec.java	round	inc	boolean	0	DEF	$
19256	258	12	DfpDec.java	round	THIS	DfpDec	0	NIL-FOR	i < $.mant.$.length
19256	258	12	DfpDec.java	round	i	int	0	NIL-FOR	$ < mant.length
3548	264	12	DfpDec.java	round	rh	int	0	DEF	$ != 0
3549	271	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp < MIN_EXP
3550	277	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp > MAX_EXP
3551	283	8	DfpDec.java	round	discarded	int	0	RET	$ != 0
3551	283	8	DfpDec.java	round	n	int	0	RET	$ != 0
3552	298	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != x.getField().getRadixDigits()
3552	298	8	DfpDec.java	nextAfter	x	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
3553	310	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan(x)
3553	310	8	DfpDec.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
3554	314	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.equals(x)
3554	314	8	DfpDec.java	nextAfter	x	Dfp	0	RET	equals($)
3555	318	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan($.getZero())
3556	322	8	DfpDec.java	nextAfter	up	boolean	1	DEF	$
3557	326	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
3558	330	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
3558	330	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
3559	339	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	$.equals(inc)
3559	339	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
3560	345	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
3561	349	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
3561	349	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
3562	356	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.classify() != INFINITE
3562	356	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
3563	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	result.equals($.getZero())
3563	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero()) == false
3563	361	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
3777	200	8	DfpField.java	DfpField	computeConstants	boolean	1	DEF	$
19306	537	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
19306	537	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
19306	537	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
3778	540	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '1'
3778	540	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3778	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '1'
3778	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
3779	544	8	DfpField.java	split	i	int	0	DEF	buf[$] == '.'
3779	544	8	DfpField.java	split	buf	char[]	0	DEF	$[i] == '.'
3780	549	8	DfpField.java	split	THIS	DfpField	0	DEF	sig == ($.radixDigits / 2) * 4
3780	549	8	DfpField.java	split	sig	int	0	DEF	$ == (radixDigits / 2) * 4
3781	554	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3781	554	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
3781	554	8	DfpField.java	split	leading	boolean	0	DEF	$
3781	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
3781	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
19307	561	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
19307	561	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
19307	561	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
3782	563	8	DfpField.java	split	i	int	0	DEF	$ < sp
3782	563	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3782	563	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
3782	563	8	DfpField.java	split	sp	int	0	DEF	i < $
3782	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
3782	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
3783	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String.length() < highPrecisionDecimalDigits - 3
3783	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String == null
3783	578	8	DfpField.java	computeStringConstants	highPrecisionDecimalDigits	int	0	DEF	sqr2String.length() < $ - 3
19308	623	8	DfpField.java	computePi	i	int	0	NIL-FOR	$ < 20
3784	637	12	DfpField.java	computePi	ykM1	Dfp	0	DEF	yk.equals($)
3784	637	12	DfpField.java	computePi	yk	Dfp	0	DEF	$.equals(ykM1)
19309	659	8	DfpField.java	computeExp	i	int	0	NIL-FOR	$ < 10000
3785	664	12	DfpField.java	computeExp	y	Dfp	0	DEF	$.equals(py)
3785	664	12	DfpField.java	computeExp	py	Dfp	0	DEF	y.equals($)
19310	742	8	DfpField.java	computeLn	i	int	0	NIL-FOR	$ < 10000
3786	748	12	DfpField.java	computeLn	y	Dfp	0	DEF	$.equals(py)
3786	748	12	DfpField.java	computeLn	py	Dfp	0	DEF	y.equals($)
19315	54	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
19315	54	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
19315	54	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
3804	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3804	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '1'
3804	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3804	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '1'
3805	61	12	DfpMath.java	split	i	int	0	DEF	buf[$] == '.'
3805	61	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] == '.'
3806	66	12	DfpMath.java	split	sig	int	0	DEF	$ == (field.getRadixDigits() / 2) * 4
3806	66	12	DfpMath.java	split	field	DfpField	0	DEF	sig == ($.getRadixDigits() / 2) * 4
3807	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3807	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
3807	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3807	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
3807	71	12	DfpMath.java	split	leading	boolean	0	DEF	$
19316	78	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
19316	78	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
19316	78	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
3808	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
3808	80	12	DfpMath.java	split	i	int	0	DEF	$ < sp
3808	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3808	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
3808	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3808	80	12	DfpMath.java	split	sp	int	0	DEF	i < $
3809	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].classify() == Dfp.INFINITE
3809	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].equals($[1])
3810	162	8	DfpMath.java	splitPow	a	int	0	RET	$ == 0
3811	167	8	DfpMath.java	splitPow	a	int	0	DEF	$ < 0
19317	174	8	DfpMath.java	splitPow	a	int	0	NIL-DOWHILE	$ >= 1
3812	183	16	DfpMath.java	splitPow	trial	int	0	DEF	$ > a
3812	183	16	DfpMath.java	splitPow	a	int	0	DEF	trial > $
3813	198	8	DfpMath.java	splitPow	invert	boolean	0	DEF	$
3814	217	8	DfpMath.java	pow	a	int	0	RET	$ == 0
3815	222	8	DfpMath.java	pow	a	int	0	DEF	$ < 0
19318	228	8	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$ >= 1
19319	234	12	DfpMath.java	pow	trial	int	0	NIL-DOWHILE	a>$
19319	234	12	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$>trial
3816	249	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3817	270	8	DfpMath.java	exp	ia	int	0	RET	$ > 2147483646
3818	275	8	DfpMath.java	exp	ia	int	0	RET	$ < -2147483646
19320	297	8	DfpMath.java	expInternal	i	int	0	NIL-FOR	$ < 90
3819	301	12	DfpMath.java	expInternal	y	Dfp	0	DEF	$.equals(py)
3819	301	12	DfpMath.java	expInternal	py	Dfp	0	DEF	y.equals($)
3820	324	8	DfpMath.java	log	a	Dfp	0	RET	$.lessThan($.getZero())
3820	324	8	DfpMath.java	log	a	Dfp	0	RET	$.equals($.getZero())
3820	324	8	DfpMath.java	log	a	Dfp	0	RET	$.isNaN()
3821	330	8	DfpMath.java	log	a	Dfp	0	RET	$.classify() == Dfp.INFINITE
19321	340	8	DfpMath.java	log	ix	int	0	NIL-WHILE	$ > 2
19322	353	8	DfpMath.java	log	spx	Dfp[]	0	NIL-WHILE	$[0].add($[1]).greaterThan(spy[0])
19322	353	8	DfpMath.java	log	spy	Dfp[]	0	NIL-WHILE	spx[0].add(spx[1]).greaterThan($[0])
19323	447	8	DfpMath.java	logInternal	i	int	0	NIL-FOR	$ < 10000
3822	453	12	DfpMath.java	logInternal	y	Dfp	0	DEF	$.equals(py)
3822	453	12	DfpMath.java	logInternal	py	Dfp	0	DEF	y.equals($)
3823	508	8	DfpMath.java	pow	x	Dfp	0	RET	$.getField().getRadixDigits() != y.getField().getRadixDigits()
3823	508	8	DfpMath.java	pow	y	Dfp	0	RET	x.getField().getRadixDigits() != $.getField().getRadixDigits()
3824	522	8	DfpMath.java	pow	zero	Dfp	0	RET	y.equals($)
3824	522	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(zero)
3825	526	8	DfpMath.java	pow	one	Dfp	0	RET	y.equals($)
3825	526	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(one)
3826	527	12	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
3827	535	8	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
3827	535	8	DfpMath.java	pow	y	Dfp	0	RET	$.isNaN()
3828	542	8	DfpMath.java	pow	zero	Dfp	0	RET	x.equals($)
3828	542	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(zero)
3829	543	12	DfpMath.java	pow	zero	Dfp	1	RET	Dfp.copysign(one, x).greaterThan($)
3829	543	12	DfpMath.java	pow	one	Dfp	1	RET	Dfp.copysign($, x).greaterThan(zero)
3829	543	12	DfpMath.java	pow	x	Dfp	1	RET	Dfp.copysign(one, $).greaterThan(zero)
3830	545	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3830	545	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3831	552	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3831	552	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3831	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3831	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3831	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3832	554	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3832	554	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3833	561	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3833	561	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3834	570	8	DfpMath.java	pow	zero	Dfp	0	DEF	x.lessThan($)
3834	570	8	DfpMath.java	pow	x	Dfp	0	DEF	$.lessThan(zero)
3835	576	8	DfpMath.java	pow	one	Dfp	0	RET	x.greaterThan($)
3835	576	8	DfpMath.java	pow	x	Dfp	0	RET	$.greaterThan(one)
3835	576	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3836	577	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3836	577	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3837	584	8	DfpMath.java	pow	one	Dfp	0	RET	x.lessThan($)
3837	584	8	DfpMath.java	pow	x	Dfp	0	RET	$.lessThan(one)
3837	584	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3838	585	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3838	585	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3839	592	8	DfpMath.java	pow	one	Dfp	0	RET	x.equals($)
3839	592	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(one)
3839	592	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3840	597	8	DfpMath.java	pow	x	Dfp	0	RET	$.classify() == Dfp.INFINITE
3841	599	12	DfpMath.java	pow	invert	boolean	1	RET	$
3842	601	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3842	601	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3842	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3842	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3842	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3843	603	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3843	603	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3844	610	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3844	610	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3845	618	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3845	618	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3846	626	8	DfpMath.java	pow	invert	boolean	0	RET	$
3846	626	8	DfpMath.java	pow	y	Dfp	0	RET	$.rint().equals($)
3847	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.greaterThan($.newInstance(-100000000))
3847	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.lessThan($.newInstance(100000000))
3847	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.greaterThan(x.newInstance(-100000000))
3847	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.lessThan(x.newInstance(100000000))
3848	640	12	DfpMath.java	pow	v	Dfp	1	DEF	$.unequal(zero)
3848	640	12	DfpMath.java	pow	zero	Dfp	1	DEF	v.unequal($)
3849	656	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3850	658	12	DfpMath.java	pow	zero	Dfp	0	DEF	y.remainder(two).equals($)
3850	658	12	DfpMath.java	pow	two	Dfp	0	DEF	y.remainder($).equals(zero)
3850	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.remainder(two).equals(zero)
3850	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.rint().equals($)
19324	681	8	DfpMath.java	sinInternal	i	int	0	NIL-FOR	$ < 90
3851	687	12	DfpMath.java	sinInternal	y	Dfp	0	DEF	$.equals(py)
3851	687	12	DfpMath.java	sinInternal	py	Dfp	0	DEF	y.equals($)
19325	714	8	DfpMath.java	cosInternal	i	int	0	NIL-FOR	$ < 90
3852	721	12	DfpMath.java	cosInternal	y	Dfp	0	DEF	$.equals(py)
3852	721	12	DfpMath.java	cosInternal	py	Dfp	0	DEF	y.equals($)
3853	745	8	DfpMath.java	sin	zero	Dfp	0	DEF	x.lessThan($)
3853	745	8	DfpMath.java	sin	x	Dfp	0	DEF	$.lessThan(zero)
3854	754	8	DfpMath.java	sin	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3854	754	8	DfpMath.java	sin	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3855	759	8	DfpMath.java	sin	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3855	759	8	DfpMath.java	sin	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3856	774	8	DfpMath.java	sin	neg	boolean	0	DEF	$
3857	796	8	DfpMath.java	cos	zero	Dfp	0	DEF	x.lessThan($)
3857	796	8	DfpMath.java	cos	x	Dfp	0	DEF	$.lessThan(zero)
3858	804	8	DfpMath.java	cos	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3858	804	8	DfpMath.java	cos	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3859	810	8	DfpMath.java	cos	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3859	810	8	DfpMath.java	cos	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3860	824	8	DfpMath.java	cos	neg	boolean	0	DEF	$
19326	850	8	DfpMath.java	atanInternal	i	int	0	NIL-FOR	$ < 90
3861	855	12	DfpMath.java	atanInternal	y	Dfp	0	DEF	$.equals(py)
3861	855	12	DfpMath.java	atanInternal	py	Dfp	0	DEF	y.equals($)
3862	890	8	DfpMath.java	atan	zero	Dfp	0	DEF	x.lessThan($)
3862	890	8	DfpMath.java	atan	x	Dfp	0	DEF	$.lessThan(zero)
3863	895	8	DfpMath.java	atan	one	Dfp	0	DEF	x.greaterThan($)
3863	895	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(one)
3864	900	8	DfpMath.java	atan	ty	Dfp	0	DEF	x.greaterThan($)
3864	900	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(ty)
3865	923	8	DfpMath.java	atan	sub	boolean	0	DEF	$
3866	927	8	DfpMath.java	atan	recp	boolean	0	DEF	$
3867	931	8	DfpMath.java	atan	neg	boolean	0	DEF	$
3868	955	8	DfpMath.java	acos	a	Dfp	0	DEF	$.lessThan($.getZero())
3869	963	8	DfpMath.java	acos	negative	boolean	0	DEF	$
1384	97	8	DiagonalMatrix.java	createMatrix	rowDimension	int	0	DimensionMismatchException	$ != columnDimension
1384	97	8	DiagonalMatrix.java	createMatrix	columnDimension	int	0	DimensionMismatchException	rowDimension != $
17566	125	8	DiagonalMatrix.java	add	i	int	0	NIL-FOR	$ < dim
17566	125	8	DiagonalMatrix.java	add	dim	int	0	NIL-FOR	i < $
17567	146	8	DiagonalMatrix.java	subtract	i	int	0	NIL-FOR	$ < dim
17567	146	8	DiagonalMatrix.java	subtract	dim	int	0	NIL-FOR	i < $
17568	167	8	DiagonalMatrix.java	multiply	i	int	0	NIL-FOR	$ < dim
17568	167	8	DiagonalMatrix.java	multiply	dim	int	0	NIL-FOR	i < $
1385	184	8	DiagonalMatrix.java	multiply	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
17569	191	12	DiagonalMatrix.java	multiply	r	int	0	NIL-FOR	$ < nRows
17569	191	12	DiagonalMatrix.java	multiply	nRows	int	0	NIL-FOR	r < $
17570	192	16	DiagonalMatrix.java	multiply	c	int	0	NIL-FOR	$ < nCols
17570	192	16	DiagonalMatrix.java	multiply	nCols	int	0	NIL-FOR	c < $
17571	206	8	DiagonalMatrix.java	getData	i	int	0	NIL-FOR	$ < dim
17571	206	8	DiagonalMatrix.java	getData	dim	int	0	NIL-FOR	i < $
1386	236	8	DiagonalMatrix.java	setEntry	row	int	1	DEF	$ == column
1386	236	8	DiagonalMatrix.java	setEntry	column	int	1	DEF	row == $
1387	252	8	DiagonalMatrix.java	addToEntry	row	int	1	DEF	$ == column
1387	252	8	DiagonalMatrix.java	addToEntry	column	int	1	DEF	row == $
1388	267	8	DiagonalMatrix.java	multiplyEntry	row	int	0	DEF	$ == column
1388	267	8	DiagonalMatrix.java	multiplyEntry	column	int	0	DEF	row == $
1389	304	8	DiagonalMatrix.java	ensureZero	value	double	0	NumberIsTooLargeException	Precision.equals(0.0, $, 1)
19368	110	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
19368	110	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
19369	111	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
19369	111	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
19369	111	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
19164	144	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < $.mainSetDimension
19164	144	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
3370	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
3370	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
3371	172	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
3372	174	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
19130	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19130	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3373	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	1	DEF	$.previousState != null
3373	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
19131	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19131	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
19132	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19132	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
19163	258	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < $.mainSetDimension
19163	258	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
3424	279	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
3444	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
3444	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
19184	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
19184	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
19185	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
19185	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
19186	294	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
19186	294	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
19187	299	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
19187	299	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
3445	320	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
3446	322	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
19188	324	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
19189	333	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19189	333	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
19190	351	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < D.$.length
19190	351	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < D.length
3447	373	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	1	DEF	$.previousState != null
3447	373	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
19191	374	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19191	374	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
19192	388	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19192	388	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3448	409	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
19193	419	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
19193	419	6	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
19194	428	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
19194	428	6	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
19195	438	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
19195	438	6	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
19196	465	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
19196	465	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
19197	488	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
19197	488	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
1430	121	8	EigenDecomposition.java	EigenDecomposition	THIS	EigenDecomposition	1	DEF	$.isSymmetric
17654	164	8	EigenDecomposition.java	EigenDecomposition	i	int	0	NIL-FOR	$ < size
17654	164	8	EigenDecomposition.java	EigenDecomposition	size	int	0	NIL-FOR	i < $
1431	199	8	EigenDecomposition.java	getV	THIS	EigenDecomposition	0	DEF	$.cachedV == null
17655	202	12	EigenDecomposition.java	getV	k	int	0	NIL-FOR	$ < m
17655	202	12	EigenDecomposition.java	getV	m	int	0	NIL-FOR	k < $
1432	223	8	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	$.cachedD == null
17656	227	12	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
17656	227	12	EigenDecomposition.java	getD	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1433	228	16	EigenDecomposition.java	getD	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) > 0
1433	228	16	EigenDecomposition.java	getD	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) > 0
1434	230	23	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0
1434	230	23	EigenDecomposition.java	getD	i	int	0	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0
1435	250	8	EigenDecomposition.java	getVT	THIS	EigenDecomposition	0	DEF	$.cachedVt == null
17657	253	12	EigenDecomposition.java	getVT	k	int	0	NIL-FOR	$ < m
17657	253	12	EigenDecomposition.java	getVT	m	int	0	NIL-FOR	k < $
17658	272	8	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
17658	272	8	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1436	273	12	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	RET	Precision.equals($.imagEigenvalues[i], 0.0, EPSILON)
1436	273	12	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	RET	Precision.equals(imagEigenvalues[$], 0.0, EPSILON)
1437	375	8	EigenDecomposition.java	getSquareRoot	THIS	EigenDecomposition	0	MathUnsupportedOperationException	$.isSymmetric
17659	380	8	EigenDecomposition.java	getSquareRoot	THIS	EigenDecomposition	0	NIL-FOR	i < $.realEigenvalues.$.length
17659	380	8	EigenDecomposition.java	getSquareRoot	i	int	0	NIL-FOR	$ < realEigenvalues.length
1438	382	12	EigenDecomposition.java	getSquareRoot	eigen	double	0	MathUnsupportedOperationException	$ <= 0
1439	406	8	EigenDecomposition.java	getSolver	THIS	EigenDecomposition	0	MathUnsupportedOperationException	$.hasComplexEigenvalues()
17660	578	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n - 1
17660	578	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $ - 1
17661	587	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
17661	587	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1440	588	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1440	588	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1440	588	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1441	591	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) > maxAbsoluteValue
1441	591	12	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) > maxAbsoluteValue
1441	591	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) > $
1442	596	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0
17662	597	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
17662	597	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1443	598	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue
1443	598	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) <= Precision.EPSILON * maxAbsoluteValue
1443	598	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * $
1444	601	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) <= Precision.EPSILON * maxAbsoluteValue
1444	601	16	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) <= Precision.EPSILON * maxAbsoluteValue
1444	601	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) <= Precision.EPSILON * $
17663	607	8	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
17663	607	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
17664	610	12	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-DOWHILE	$ != j
17664	610	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-DOWHILE	m != $
17665	611	16	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-FOR	$ < n - 1
17665	611	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	m < $ - 1
1445	614	20	EigenDecomposition.java	findEigenVectors	delta	double	0	DEF	FastMath.abs(e[m]) + $ == $
1445	614	20	EigenDecomposition.java	findEigenVectors	m	int	0	DEF	FastMath.abs(e[$]) + delta == delta
1445	614	20	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[m]) + delta == delta
1446	618	16	EigenDecomposition.java	findEigenVectors	m	int	0	MaxCountExceededException	$ != j
1446	618	16	EigenDecomposition.java	findEigenVectors	j	int	0	MaxCountExceededException	m != $
1447	619	20	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	MaxCountExceededException	its == $.maxIter
1447	619	20	EigenDecomposition.java	findEigenVectors	its	int	0	MaxCountExceededException	$ == maxIter
1448	626	20	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	$ < 0.0
17666	635	20	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ >= j
17666	635	20	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	i >= $
1449	638	24	EigenDecomposition.java	findEigenVectors	p	double	1	DEF	FastMath.abs($) >= FastMath.abs(q)
1449	638	24	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	FastMath.abs(p) >= FastMath.abs($)
1450	651	24	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	e[$ + 1] == 0.0
1450	651	24	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	$[i + 1] == 0.0
17667	661	24	EigenDecomposition.java	findEigenVectors	ia	int	0	NIL-FOR	$ < n
17667	661	24	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	ia < $
1451	667	20	EigenDecomposition.java	findEigenVectors	t	double	0	DEF	$ == 0.0
1451	667	20	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	$ >= j
1451	667	20	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	i >= $
17668	678	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
17668	678	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
17669	681	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
17669	681	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
1452	682	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.realEigenvalues[j] > p
1452	682	16	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	realEigenvalues[$] > p
1452	682	16	EigenDecomposition.java	findEigenVectors	p	double	0	DEF	realEigenvalues[j] > $
1453	687	12	EigenDecomposition.java	findEigenVectors	k	int	0	DEF	$ != i
1453	687	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	k != $
17670	690	16	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
17670	690	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
17671	700	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
17671	700	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1454	701	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1454	701	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1454	701	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1455	706	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0.0
17672	707	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
17672	707	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1456	708	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue
1456	708	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) < Precision.EPSILON * maxAbsoluteValue
1456	708	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * $
17673	715	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
17673	715	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
17674	716	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
17674	716	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
17675	736	8	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	0	NIL-FOR	i < $.realEigenvalues.$.length
17675	736	8	EigenDecomposition.java	transformToSchur	i	int	0	NIL-FOR	$ < realEigenvalues.length
1457	737	12	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	1	DEF	i == ($.realEigenvalues.$.length - 1)
1457	737	12	EigenDecomposition.java	transformToSchur	i	int	1	DEF	$ == (realEigenvalues.length - 1)
1457	737	12	EigenDecomposition.java	transformToSchur	i	int	1	DEF	Precision.equals(matT[$ + 1][$], 0.0, EPSILON)
1457	737	12	EigenDecomposition.java	transformToSchur	matT	double[][]	1	DEF	Precision.equals($[i + 1][i], 0.0, EPSILON)
17676	783	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
17676	783	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
17677	784	11	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
17677	784	11	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
1458	790	8	EigenDecomposition.java	findEigenVectorsFromSchur	norm	double	0	MathArithmeticException	Precision.equals($, 0.0, EPSILON)
17678	800	8	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	$ >= 0
1459	804	12	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	Precision.equals($, 0.0)
17679	808	16	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
17680	811	20	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
17680	811	20	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1460	814	20	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0.0
1460	814	20	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
1461	819	24	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.equals($.imagEigenvalues[i], 0.0)
1461	819	24	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$], 0.0)
1462	820	28	EigenDecomposition.java	findEigenVectorsFromSchur	w	double	1	DEF	$ != 0.0
1463	833	28	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > FastMath.abs(z)
1463	833	28	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > FastMath.abs($)
1464	842	24	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
17681	843	28	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
17681	843	28	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1465	849	19	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	0	DEF	$ < 0.0
1466	854	16	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	1	DEF	FastMath.abs(matrixT[$][$ - 1]) > FastMath.abs(matrixT[$ - 1][$])
1466	854	16	EigenDecomposition.java	findEigenVectorsFromSchur	matrixT	double[][]	1	DEF	FastMath.abs($[idx][idx - 1]) > FastMath.abs($[idx - 1][idx])
17682	867	16	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
17683	870	20	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
17683	870	20	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1467	876	20	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0.0
1467	876	20	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
1468	882	24	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.equals($.imagEigenvalues[i], 0.0)
1468	882	24	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$], 0.0)
1469	893	28	EigenDecomposition.java	findEigenVectorsFromSchur	vr	double	0	DEF	Precision.equals($, 0.0)
1469	893	28	EigenDecomposition.java	findEigenVectorsFromSchur	vi	double	0	DEF	Precision.equals($, 0.0)
1470	903	28	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > (FastMath.abs(z) + FastMath.abs(q))
1470	903	28	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs($))
1470	903	28	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > (FastMath.abs($) + FastMath.abs(q))
1471	919	24	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
17684	920	28	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
17684	920	28	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
17685	931	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
17685	931	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
1472	932	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	DEF	$ < 0 | $ > n - 1
1472	932	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	DEF	i < 0 | i > $ - 1
17686	933	16	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
17686	933	16	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
17687	940	8	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ >= 0
17688	941	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ <= n - 1
17688	941	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i <= $ - 1
17689	943	16	EigenDecomposition.java	findEigenVectorsFromSchur	k	int	0	NIL-FOR	$ <= FastMath.min(j, n - 1)
17689	943	16	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	k <= FastMath.min($, n - 1)
17689	943	16	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	k <= FastMath.min(j, $ - 1)
17690	952	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
17690	952	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
17691	953	12	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
17691	953	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
19040	93	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$ < oldChromosomes.size()
19040	93	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i < $.size()
3199	106	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ < 0
3199	106	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ > 1
19175	223	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
19176	229	6	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
3434	231	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
3434	231	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3435	236	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3436	238	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance == null
19177	239	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
19177	239	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
19177	239	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
19178	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
19178	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
19178	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
3437	253	8	EmbeddedRungeKuttaIntegrator.java	integrate	forward	boolean	1	DEF	$
3438	254	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize >= t
3438	254	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize >= $
3439	258	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize <= t
3439	258	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize <= $
19179	264	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
19179	264	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
19180	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
19180	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
19180	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
19181	268	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
19181	268	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
19182	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
19182	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
19182	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
19183	281	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
19183	281	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
3440	289	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
3441	306	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.isLastStep
3442	311	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
3443	326	10	EmbeddedRungeKuttaIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
3121	262	12	EmpiricalDistribution.java	load	THIS	EmpiricalDistribution	0	ZeroException	$.sampleStats.getN() == 0
3122	434	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	DEF	$.binStats.isEmpty()
19008	437	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
19008	437	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
19009	449	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount-1
19009	449	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
3123	477	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	MathIllegalStateException	$.loaded
19010	485	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
19010	485	8	EmpiricalDistribution.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
3124	486	11	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	RET	x <= $.upperBounds[i]
3124	486	11	EmpiricalDistribution.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
3124	486	11	EmpiricalDistribution.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
3125	488	15	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
3126	489	19	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
19011	547	8	EmpiricalDistribution.java	getUpperBounds	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount - 1
19011	547	8	EmpiricalDistribution.java	getUpperBounds	i	int	0	NIL-FOR	$ < binCount - 1
3127	616	8	EmpiricalDistribution.java	density	THIS	EmpiricalDistribution	0	RET	x < $.min
3127	616	8	EmpiricalDistribution.java	density	THIS	EmpiricalDistribution	0	RET	x > $.max
3127	616	8	EmpiricalDistribution.java	density	x	double	0	RET	$ < min
3127	616	8	EmpiricalDistribution.java	density	x	double	0	RET	$ > max
3128	638	8	EmpiricalDistribution.java	cumulativeProbability	THIS	EmpiricalDistribution	1	RET	x < $.min
3128	638	8	EmpiricalDistribution.java	cumulativeProbability	x	double	1	RET	$ < min
3129	640	15	EmpiricalDistribution.java	cumulativeProbability	THIS	EmpiricalDistribution	0	RET	x >= $.max
3129	640	15	EmpiricalDistribution.java	cumulativeProbability	x	double	0	RET	$ >= max
3130	676	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
3130	676	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
3131	680	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
3132	684	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
19012	689	8	EmpiricalDistribution.java	inverseCumulativeProbability	THIS	EmpiricalDistribution	0	NIL-WHILE	$.cumBinP(i) < p
19012	689	8	EmpiricalDistribution.java	inverseCumulativeProbability	i	int	0	NIL-WHILE	cumBinP($) < p
19012	689	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumBinP(i) < $
3133	701	8	EmpiricalDistribution.java	inverseCumulativeProbability	pCrit	double	0	RET	$ <= 0
17327	110	8	EnumeratedDistribution.java	EnumeratedDistribution	i	int	0	NIL-FOR	$ < pmf.size()
17327	110	8	EnumeratedDistribution.java	EnumeratedDistribution	pmf	List<Pair<T,Double>>	0	NIL-FOR	i < $.size()
1104	114	12	EnumeratedDistribution.java	EnumeratedDistribution	p	double	0	NotPositiveException	$ < 0
1105	117	12	EnumeratedDistribution.java	EnumeratedDistribution	p	double	0	NotFiniteNumberException	Double.isInfinite($)
1106	120	12	EnumeratedDistribution.java	EnumeratedDistribution	p	double	0	NotANumberException	Double.isNaN($)
17328	153	8	EnumeratedDistribution.java	probability	THIS	EnumeratedDistribution	0	NIL-FOR	i < $.probabilities.$.length
17328	153	8	EnumeratedDistribution.java	probability	i	int	0	NIL-FOR	$ < probabilities.length
1107	154	12	EnumeratedDistribution.java	probability	THIS	EnumeratedDistribution	0	DEF	x.equals($.singletons.get(i))
1107	154	12	EnumeratedDistribution.java	probability	THIS	EnumeratedDistribution	0	DEF	$.singletons.get(i) == null
1107	154	12	EnumeratedDistribution.java	probability	i	int	0	DEF	x.equals(singletons.get($))
1107	154	12	EnumeratedDistribution.java	probability	i	int	0	DEF	singletons.get($) == null
1107	154	12	EnumeratedDistribution.java	probability	x	T	0	DEF	$ != null
1107	154	12	EnumeratedDistribution.java	probability	x	T	0	DEF	$.equals(singletons.get(i))
1107	154	12	EnumeratedDistribution.java	probability	x	T	0	DEF	$ == null
17329	176	8	EnumeratedDistribution.java	getPmf	THIS	EnumeratedDistribution	0	NIL-FOR	i < $.probabilities.$.length
17329	176	8	EnumeratedDistribution.java	getPmf	i	int	0	NIL-FOR	$ < probabilities.length
17330	192	8	EnumeratedDistribution.java	sample	THIS	EnumeratedDistribution	0	NIL-FOR	i < $.probabilities.$.length
17330	192	8	EnumeratedDistribution.java	sample	i	int	0	NIL-FOR	$ < probabilities.length
1108	194	12	EnumeratedDistribution.java	sample	randomValue	double	0	RET	$ < sum
1108	194	12	EnumeratedDistribution.java	sample	sum	double	0	RET	randomValue < $
1109	214	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
17331	221	8	EnumeratedDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
17331	221	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1110	243	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
1111	247	8	EnumeratedDistribution.java	sample	array	T[]	0	NullArgumentException	$ == null
1112	252	8	EnumeratedDistribution.java	sample	THIS	EnumeratedDistribution	1	DEF	array.$.length < sampleSize
1112	252	8	EnumeratedDistribution.java	sample	sampleSize	int	1	DEF	array.length < $
1112	252	8	EnumeratedDistribution.java	sample	array	T[]	1	DEF	$.length < sampleSize
17332	260	8	EnumeratedDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
17332	260	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1117	90	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	THIS	EnumeratedIntegerDistribution	0	DimensionMismatchException	singletons.$.length != probabilities.$.length
1117	90	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	singletons	int[]	0	DimensionMismatchException	$.length != probabilities.length
1117	90	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	probabilities	double[]	0	DimensionMismatchException	singletons.length != $.length
17333	96	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	THIS	EnumeratedIntegerDistribution	0	NIL-FOR	i < singletons.$.length
17333	96	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	i	int	0	NIL-FOR	$ < singletons.length
17333	96	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	singletons	int[]	0	NIL-FOR	i < $.length
1118	117	12	EnumeratedIntegerDistribution.java	cumulativeProbability	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getKey() <= x
1118	117	12	EnumeratedIntegerDistribution.java	cumulativeProbability	x	int	0	DEF	sample.getKey() <= $
1119	167	12	EnumeratedIntegerDistribution.java	getSupportLowerBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getKey() < min
1119	167	12	EnumeratedIntegerDistribution.java	getSupportLowerBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getValue() > 0
1119	167	12	EnumeratedIntegerDistribution.java	getSupportLowerBound	min	int	0	DEF	sample.getKey() < $
1120	185	12	EnumeratedIntegerDistribution.java	getSupportUpperBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getValue() > 0
1120	185	12	EnumeratedIntegerDistribution.java	getSupportUpperBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getKey() > max
1120	185	12	EnumeratedIntegerDistribution.java	getSupportUpperBound	max	int	0	DEF	sample.getKey() > $
1231	90	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	THIS	EnumeratedRealDistribution	0	DimensionMismatchException	singletons.$.length != probabilities.$.length
1231	90	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	singletons	double[]	0	DimensionMismatchException	$.length != probabilities.length
1231	90	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	probabilities	double[]	0	DimensionMismatchException	singletons.length != $.length
17355	96	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	THIS	EnumeratedRealDistribution	0	NIL-FOR	i < singletons.$.length
17355	96	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	i	int	0	NIL-FOR	$ < singletons.length
17355	96	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	singletons	double[]	0	NIL-FOR	i < $.length
1232	131	12	EnumeratedRealDistribution.java	cumulativeProbability	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getKey() <= x
1232	131	12	EnumeratedRealDistribution.java	cumulativeProbability	x	double	0	DEF	sample.getKey() <= $
1233	181	12	EnumeratedRealDistribution.java	getSupportLowerBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getKey() < min
1233	181	12	EnumeratedRealDistribution.java	getSupportLowerBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getValue() > 0
1233	181	12	EnumeratedRealDistribution.java	getSupportLowerBound	min	double	0	DEF	sample.getKey() < $
1234	199	12	EnumeratedRealDistribution.java	getSupportUpperBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getKey() > max
1234	199	12	EnumeratedRealDistribution.java	getSupportUpperBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getValue() > 0
1234	199	12	EnumeratedRealDistribution.java	getSupportUpperBound	max	double	0	DEF	sample.getKey() > $
3490	77	8	EquationsMapper.java	extractEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
3490	77	8	EquationsMapper.java	extractEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
3491	92	8	EquationsMapper.java	insertEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
3491	92	8	EquationsMapper.java	insertEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
3255	67	8	Erf.java	erf	x	double	0	RET	FastMath.abs($) > 40
3256	98	8	Erf.java	erfc	x	double	0	RET	FastMath.abs($) > 40
3257	116	8	Erf.java	erf	x1	double	0	RET	$ > x2
3257	116	8	Erf.java	erf	x2	double	0	RET	x1 > $
3258	152	8	Erf.java	erfInv	w	double	1	DEF	$ < 6.25
3259	177	15	Erf.java	erfInv	w	double	1	DEF	$ < 16.0
3260	198	15	Erf.java	erfInv	w	double	1	DEF	Double.isInfinite($)
18568	53	12	EuclideanDoublePoint.java	centroidOf	THIS	EuclideanDoublePoint	0	NIL-FOR	i < centroid.$.length
18568	53	12	EuclideanDoublePoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
18568	53	12	EuclideanDoublePoint.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
18569	57	8	EuclideanDoublePoint.java	centroidOf	THIS	EuclideanDoublePoint	0	NIL-FOR	i < centroid.$.length
18569	57	8	EuclideanDoublePoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
18569	57	8	EuclideanDoublePoint.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
2438	71	8	EuclideanDoublePoint.java	equals	other	Object	0	RET	$ instanceof EuclideanDoublePoint
18580	65	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
18580	65	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
18580	65	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
18581	69	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
18581	69	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
18581	69	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
2472	78	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
3476	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	1	DEF	$.previousState != null
3476	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
19221	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19221	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
19222	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19222	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3492	110	8	EventFilter.java	g	THIS	EventFilter	1	RET	$.forward
3493	112	12	EventFilter.java	g	THIS	EventFilter	1	RET	$.extremeT < t
3493	112	12	EventFilter.java	g	t	double	1	RET	extremeT < $
3494	118	16	EventFilter.java	g	previous	Transformer	0	DEF	next != $
3494	118	16	EventFilter.java	g	next	Transformer	0	DEF	$ != previous
19244	140	16	EventFilter.java	g	i	int	0	NIL-FOR	$ > 0
3495	141	20	EventFilter.java	g	THIS	EventFilter	0	RET	$.updates[i] <= t
3495	141	20	EventFilter.java	g	i	int	0	RET	updates[$] <= t
3495	141	20	EventFilter.java	g	t	double	0	RET	updates[i] <= $
3496	151	12	EventFilter.java	g	THIS	EventFilter	1	RET	t < $.extremeT
3496	151	12	EventFilter.java	g	t	double	1	RET	$ < extremeT
3497	157	16	EventFilter.java	g	previous	Transformer	0	DEF	next != $
3497	157	16	EventFilter.java	g	next	Transformer	0	DEF	$ != previous
19245	179	16	EventFilter.java	g	THIS	EventFilter	0	NIL-FOR	i < $.updates.$.length - 1
19245	179	16	EventFilter.java	g	i	int	0	NIL-FOR	$ < updates.length - 1
3498	180	20	EventFilter.java	g	THIS	EventFilter	0	RET	t <= $.updates[i]
3498	180	20	EventFilter.java	g	i	int	0	RET	t <= updates[$]
3498	180	20	EventFilter.java	g	t	double	0	RET	$ <= updates[i]
3499	160	8	EventState.java	reinitializeBegin	THIS	EventState	0	DEF	$.g0 == 0
3500	199	12	EventState.java	evaluateStep	THIS	EventState	0	RET	FastMath.abs(dt) < $.convergence
3500	199	12	EventState.java	evaluateStep	dt	double	0	RET	FastMath.abs($) < convergence
19246	219	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
19246	219	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
3501	227	16	EventState.java	evaluateStep	THIS	EventState	1	RET	$.g0Positive ^ (gb >= 0)
3501	227	16	EventState.java	evaluateStep	gb	double	1	RET	g0Positive ^ ($ >= 0)
3502	235	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	$.solver instanceof BracketedUnivariateSolver<?>
3503	256	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - $.previousEventTime) <= $.convergence
3503	256	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Double.isNaN($.previousEventTime)
3503	256	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - ta) <= $.convergence
3503	256	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - previousEventTime) <= convergence
3503	256	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - ta) <= convergence
3503	256	20	EventState.java	evaluateStep	ta	double	1	DEF	FastMath.abs(root - $) <= convergence
3504	264	27	EventState.java	evaluateStep	THIS	EventState	1	RET	FastMath.abs($.previousEventTime - root) > $.convergence
3504	264	27	EventState.java	evaluateStep	THIS	EventState	1	RET	Double.isNaN($.previousEventTime)
3504	264	27	EventState.java	evaluateStep	root	double	1	RET	FastMath.abs(previousEventTime - $) > convergence
3505	315	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	FastMath.abs($.pendingEventTime - t) <= $.convergence
3505	315	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
3505	315	8	EventState.java	stepAccepted	t	double	1	DEF	FastMath.abs(pendingEventTime - $) <= convergence
3506	343	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
3506	343	8	EventState.java	reset	THIS	EventState	0	RET	FastMath.abs($.pendingEventTime - t) <= $.convergence
3506	343	8	EventState.java	reset	t	double	0	RET	FastMath.abs(pendingEventTime - $) <= convergence
3507	347	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.$.Action.RESET_STATE
19075	174	8	ExceptionContext.java	buildMessage	i	int	0	NIL-FOR	$ < len
19075	174	8	ExceptionContext.java	buildMessage	len	int	0	NIL-FOR	i < $
3313	180	12	ExceptionContext.java	buildMessage	count	int	0	DEF	++$ < len
3313	180	12	ExceptionContext.java	buildMessage	len	int	0	DEF	++count < $
19076	228	8	ExceptionContext.java	serializeMessages	i	int	0	NIL-FOR	$ < len
19076	228	8	ExceptionContext.java	serializeMessages	len	int	0	NIL-FOR	i < $
19077	236	12	ExceptionContext.java	serializeMessages	j	int	0	NIL-FOR	$ < aLen
19077	236	12	ExceptionContext.java	serializeMessages	aLen	int	0	NIL-FOR	j < $
3314	237	16	ExceptionContext.java	serializeMessages	j	int	1	DEF	args[$] instanceof Serializable
3314	237	16	ExceptionContext.java	serializeMessages	args	Object[]	1	DEF	$[j] instanceof Serializable
19078	263	8	ExceptionContext.java	deSerializeMessages	i	int	0	NIL-FOR	$ < len
19078	263	8	ExceptionContext.java	deSerializeMessages	len	int	0	NIL-FOR	i < $
19079	270	12	ExceptionContext.java	deSerializeMessages	j	int	0	NIL-FOR	$ < aLen
19079	270	12	ExceptionContext.java	deSerializeMessages	aLen	int	0	NIL-FOR	j < $
3315	293	12	ExceptionContext.java	serializeContext	value	Object	1	DEF	$ instanceof Serializable
19080	316	8	ExceptionContext.java	deSerializeContext	i	int	0	NIL-FOR	$ < len
19080	316	8	ExceptionContext.java	deSerializeContext	len	int	0	NIL-FOR	i < $
3538	97	8	ExpandableStatefulODE.java	getTotalDimension	THIS	ExpandableStatefulODE	1	RET	$.components.isEmpty()
3539	139	8	ExpandableStatefulODE.java	addSecondaryEquations	THIS	ExpandableStatefulODE	1	DEF	$.components.isEmpty()
19252	168	8	ExpandableStatefulODE.java	getSecondaryMappers	THIS	ExpandableStatefulODE	0	NIL-FOR	i < mappers.$.length
19252	168	8	ExpandableStatefulODE.java	getSecondaryMappers	i	int	0	NIL-FOR	$ < mappers.length
19252	168	8	ExpandableStatefulODE.java	getSecondaryMappers	mappers	EquationsMapper[]	0	NIL-FOR	i < $.length
3540	196	8	ExpandableStatefulODE.java	setPrimaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	primaryState.$.length != $.primaryState.length
3540	196	8	ExpandableStatefulODE.java	setPrimaryState	primaryState	double[]	0	DimensionMismatchException	$.length != this.primaryState.length
3541	233	8	ExpandableStatefulODE.java	setSecondaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	secondaryState.$.length != localArray.$.length
3541	233	8	ExpandableStatefulODE.java	setSecondaryState	localArray	double[]	0	DimensionMismatchException	secondaryState.length != $.length
3541	233	8	ExpandableStatefulODE.java	setSecondaryState	secondaryState	double[]	0	DimensionMismatchException	$.length != localArray.length
3542	269	8	ExpandableStatefulODE.java	setCompleteState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	completeState.$.length != $.getTotalDimension()
3542	269	8	ExpandableStatefulODE.java	setCompleteState	completeState	double[]	0	DimensionMismatchException	$.length != getTotalDimension()
1149	130	8	ExponentialDistribution.java	ExponentialDistribution	mean	double	0	NotStrictlyPositiveException	$ <= 0
1150	148	8	ExponentialDistribution.java	density	x	double	0	RET	$ < 0
1151	166	8	ExponentialDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
1152	184	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
1152	184	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
1153	186	15	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
17335	213	8	ExponentialDistribution.java	sample	u	double	0	NIL-WHILE	$ < 0.5
1154	222	8	ExponentialDistribution.java	sample	u	double	0	RET	$ <= EXPONENTIAL_SA_QI[0]
17336	232	8	ExponentialDistribution.java	sample	u	double	0	NIL-DOWHILE	$ > EXPONENTIAL_SA_QI[i]
17336	232	8	ExponentialDistribution.java	sample	i	int	0	NIL-DOWHILE	u > EXPONENTIAL_SA_QI[$]
1155	236	12	ExponentialDistribution.java	sample	u2	double	0	DEF	$ < umin
1155	236	12	ExponentialDistribution.java	sample	umin	double	0	DEF	u2 < $
1206	110	8	FDistribution.java	FDistribution	numeratorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1207	114	8	FDistribution.java	FDistribution	denominatorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1208	154	8	FDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1209	203	8	FDistribution.java	getNumericalMean	denominatorDF	double	0	RET	$ > 2
1210	224	8	FDistribution.java	getNumericalVariance	THIS	FDistribution	0	DEF	$.numericalVarianceIsCalculated
1211	239	8	FDistribution.java	calculateNumericalVariance	denominatorDF	double	0	RET	$ > 4
3316	93	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	type == $.TransformType.FORWARD
3316	93	8	FastCosineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
3317	94	12	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
3318	102	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	1	DEF	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
3319	142	8	FastCosineTransformer.java	fct	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
3320	147	8	FastCosineTransformer.java	fct	n	int	0	RET	$ == 1
19081	159	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
19081	159	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
19082	174	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
19082	174	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
19095	135	8	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	NIL-FOR	$ < n
19095	135	8	FastFourierTransformer.java	bitReversalShuffle2	n	int	0	NIL-FOR	i < $
3332	136	12	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	DEF	$ < j
3332	136	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	DEF	i < $
19096	148	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ <= j
19096	148	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ > 0
19096	148	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	NIL-WHILE	k <= $
3333	173	16	FastFourierTransformer.java	normalizeTransformedData	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
3333	173	16	FastFourierTransformer.java	normalizeTransformedData	type	TransformType	0	DEF	$ == TransformType.INVERSE
19097	175	20	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
19097	175	20	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
19098	183	16	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
19098	183	16	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
3334	218	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataRI.$.length != 2
3334	218	8	FastFourierTransformer.java	transformInPlace	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
3335	223	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataR.$.length != dataI.$.length
3335	223	8	FastFourierTransformer.java	transformInPlace	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
3335	223	8	FastFourierTransformer.java	transformInPlace	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
3336	228	8	FastFourierTransformer.java	transformInPlace	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
3337	234	8	FastFourierTransformer.java	transformInPlace	n	int	1	RET	$ == 1
3338	236	15	FastFourierTransformer.java	transformInPlace	n	int	0	RET	$ == 2
3339	256	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	1	DEF	type == $.TransformType.INVERSE
3339	256	8	FastFourierTransformer.java	transformInPlace	type	TransformType	1	DEF	$ == TransformType.INVERSE
19099	257	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
19099	257	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
19100	286	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
19100	286	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
19101	318	8	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-WHILE	lastN0 < $
19101	318	8	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-WHILE	$ < n
3340	323	12	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
3340	323	12	FastFourierTransformer.java	transformInPlace	type	TransformType	0	DEF	$ == TransformType.INVERSE
19102	328	12	FastFourierTransformer.java	transformInPlace	destEvenStartIndex	int	0	NIL-FOR	$ < n
19102	328	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	destEvenStartIndex < $
19103	334	16	FastFourierTransformer.java	transformInPlace	r	int	0	NIL-FOR	$ < lastN0
19103	334	16	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-FOR	r < $
19104	442	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
19104	442	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
19104	442	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
3341	464	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
3341	464	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
3341	464	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
19105	466	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
19105	466	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
19105	466	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
19106	474	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
19106	474	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
19106	474	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
3342	481	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
3342	481	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
3342	481	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
19107	487	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
19107	487	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
19107	487	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
19107	487	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
3324	52	8	FastHadamardTransformer.java	transform	THIS	FastHadamardTransformer	0	RET	type == $.TransformType.FORWARD
3324	52	8	FastHadamardTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
3325	234	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
19087	248	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
19087	248	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
19088	256	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
19088	256	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
19089	261	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
19089	261	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
3326	285	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
19090	299	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
19090	299	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
19091	307	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
19091	307	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
19092	312	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
19092	312	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
261	365	8	FastMath.java	doubleHighPart	d	double	0	RET	$ < Precision.SAFE_MIN
261	365	8	FastMath.java	doubleHighPart	d	double	0	RET	$ > -Precision.SAFE_MIN
262	387	6	FastMath.java	cosh	x	double	0	RET	$ != $
263	396	6	FastMath.java	cosh	x	double	1	RET	$ > 20
264	397	10	FastMath.java	cosh	x	double	1	RET	$ >= LOG_MAX_VALUE
265	404	13	FastMath.java	cosh	x	double	0	RET	$ < -20
266	405	10	FastMath.java	cosh	x	double	1	RET	$ <= -LOG_MAX_VALUE
267	415	6	FastMath.java	cosh	x	double	0	DEF	$ < 0.0
268	457	6	FastMath.java	sinh	x	double	0	RET	$ != $
269	466	6	FastMath.java	sinh	x	double	1	RET	$ > 20
270	467	10	FastMath.java	sinh	x	double	1	RET	$ >= LOG_MAX_VALUE
271	474	13	FastMath.java	sinh	x	double	0	RET	$ < -20
272	475	10	FastMath.java	sinh	x	double	1	RET	$ <= -LOG_MAX_VALUE
273	484	6	FastMath.java	sinh	x	double	0	RET	$ == 0
274	488	6	FastMath.java	sinh	x	double	0	DEF	$ < 0.0
275	495	6	FastMath.java	sinh	x	double	1	DEF	$ > 0.25
276	569	6	FastMath.java	sinh	negate	boolean	0	DEF	$
277	583	6	FastMath.java	tanh	x	double	0	RET	$ != $
278	593	6	FastMath.java	tanh	x	double	0	RET	$ > 20.0
279	597	6	FastMath.java	tanh	x	double	0	RET	$ < -20
280	601	6	FastMath.java	tanh	x	double	0	RET	$ == 0
281	605	6	FastMath.java	tanh	x	double	0	DEF	$ < 0.0
282	611	6	FastMath.java	tanh	x	double	1	DEF	$ >= 0.5
283	693	6	FastMath.java	tanh	negate	boolean	0	DEF	$
284	714	8	FastMath.java	asinh	a	double	0	DEF	$ < 0
285	720	8	FastMath.java	asinh	a	double	1	DEF	$ > 0.167
286	724	12	FastMath.java	asinh	a	double	1	DEF	$ > 0.097
287	726	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.036
288	728	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.0036
289	744	8	FastMath.java	atanh	a	double	0	DEF	$ < 0
290	750	8	FastMath.java	atanh	a	double	1	DEF	$ > 0.15
291	754	12	FastMath.java	atanh	a	double	1	DEF	$ > 0.087
292	756	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.031
293	758	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.003
294	850	8	FastMath.java	exp	x	double	1	RET	$ < 0.0
295	853	12	FastMath.java	exp	intVal	int	0	RET	$ > 746
296	854	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
297	861	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
298	864	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
299	871	12	FastMath.java	exp	intVal	int	0	RET	$ == 709
300	874	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
301	890	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
302	891	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
303	943	8	FastMath.java	exp	extra	double	1	DEF	$ != 0.0
304	949	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
305	972	8	FastMath.java	expm1	x	double	0	RET	$ != $
305	972	8	FastMath.java	expm1	x	double	0	RET	$ == 0.0
306	976	8	FastMath.java	expm1	x	double	0	RET	$ <= -1.0
306	976	8	FastMath.java	expm1	x	double	0	RET	$ >= 1.0
307	981	12	FastMath.java	expm1	x	double	1	RET	$ > 0.0
308	996	8	FastMath.java	expm1	x	double	0	DEF	$ < 0.0
309	1072	8	FastMath.java	expm1	negative	boolean	0	DEF	$
310	1105	8	FastMath.java	expm1	hiPrecOut	double	0	DEF	$ != null
311	1130	8	FastMath.java	log	x	double	0	RET	$==0
312	1136	8	FastMath.java	log	bits	long	0	RET	($ & 0x8000000000000000L) != 0
312	1136	8	FastMath.java	log	x	double	0	RET	$ != $
313	1137	12	FastMath.java	log	x	double	0	RET	$ != 0.0
314	1138	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
315	1147	8	FastMath.java	log	x	double	0	RET	$ == Double.POSITIVE_INFINITY
316	1148	12	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
317	1158	8	FastMath.java	log	bits	long	0	RET	($ & 0x7ff0000000000000L) == 0
318	1160	12	FastMath.java	log	x	double	0	RET	$ == 0
319	1162	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
17253	1171	12	FastMath.java	log	bits	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
320	1178	8	FastMath.java	log	exp	int	0	RET	$ == 0
320	1178	8	FastMath.java	log	exp	int	0	RET	$ == -1
321	1179	12	FastMath.java	log	x	double	0	RET	$ > 0.99
321	1179	12	FastMath.java	log	x	double	0	RET	$ < 1.01
321	1179	12	FastMath.java	log	hiPrec	double[]	0	RET	$ == null
17254	1196	16	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
322	1244	8	FastMath.java	log	hiPrec	double[]	1	DEF	$ != null
17255	1263	12	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
323	1347	8	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
324	1362	8	FastMath.java	log1p	x	double	0	RET	$ == -1
325	1366	8	FastMath.java	log1p	x	double	0	RET	$ == Double.POSITIVE_INFINITY
326	1370	8	FastMath.java	log1p	x	double	1	RET	$ > 1e-6
326	1370	8	FastMath.java	log1p	x	double	1	RET	$ < -1e-6
327	1377	12	FastMath.java	log1p	lores	double	0	RET	Double.isInfinite($)
328	1401	8	FastMath.java	log10	lores	double	0	RET	Double.isInfinite($)
329	1445	8	FastMath.java	pow	y	double	0	RET	$ == 0.0
330	1449	8	FastMath.java	pow	x	double	0	RET	$ != $
331	1454	8	FastMath.java	pow	x	double	0	RET	$ == 0
332	1456	12	FastMath.java	pow	bits	long	0	RET	($ & 0x8000000000000000L) != 0
333	1460	16	FastMath.java	pow	yi	long	0	RET	y == $
333	1460	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
333	1460	16	FastMath.java	pow	y	double	0	RET	$ == yi
333	1460	16	FastMath.java	pow	y	double	0	RET	$ < 0
334	1464	16	FastMath.java	pow	yi	long	0	RET	y == $
334	1464	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
334	1464	16	FastMath.java	pow	y	double	0	RET	$ > 0
334	1464	16	FastMath.java	pow	y	double	0	RET	$ == yi
335	1469	12	FastMath.java	pow	y	double	0	RET	$ < 0
336	1472	12	FastMath.java	pow	y	double	0	RET	$ > 0
337	1479	8	FastMath.java	pow	x	double	0	RET	$ == Double.POSITIVE_INFINITY
338	1480	12	FastMath.java	pow	y	double	0	RET	$ != $
339	1483	12	FastMath.java	pow	y	double	1	RET	$ < 0.0
340	1490	8	FastMath.java	pow	y	double	0	RET	$ == Double.POSITIVE_INFINITY
341	1491	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
342	1495	12	FastMath.java	pow	x	double	1	RET	$ * $ > 1.0
343	1502	8	FastMath.java	pow	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
344	1503	12	FastMath.java	pow	y	double	0	RET	$ != $
345	1507	12	FastMath.java	pow	y	double	0	RET	$ < 0
346	1509	16	FastMath.java	pow	yi	long	0	RET	y == $
346	1509	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
346	1509	16	FastMath.java	pow	y	double	0	RET	$ == yi
347	1516	12	FastMath.java	pow	y	double	0	RET	$ > 0
348	1518	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
348	1518	16	FastMath.java	pow	yi	long	0	RET	y == $
348	1518	16	FastMath.java	pow	y	double	0	RET	$ == yi
349	1526	8	FastMath.java	pow	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
350	1528	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
351	1532	12	FastMath.java	pow	x	double	1	RET	$ * $ < 1.0
352	1540	8	FastMath.java	pow	x	double	0	RET	$ < 0
353	1542	12	FastMath.java	pow	THIS	FastMath	0	RET	y <= -$.TWO_POWER_53
353	1542	12	FastMath.java	pow	THIS	FastMath	0	RET	y >= $.TWO_POWER_53
353	1542	12	FastMath.java	pow	y	double	0	RET	$ <= -TWO_POWER_53
353	1542	12	FastMath.java	pow	y	double	0	RET	$ >= TWO_POWER_53
354	1546	12	FastMath.java	pow	y	double	1	RET	$ == (long) $
355	1557	8	FastMath.java	pow	y	double	1	DEF	$ < 8e298
355	1557	8	FastMath.java	pow	y	double	1	DEF	$ > -8e298
356	1570	8	FastMath.java	pow	lores	double	0	RET	Double.isInfinite($)
357	1613	8	FastMath.java	pow	e	int	1	RET	$ == 0
358	1615	15	FastMath.java	pow	e	int	0	DEF	$ < 0
17256	1636	8	FastMath.java	pow	e	int	0	NIL-WHILE	$ != 0
359	1638	12	FastMath.java	pow	e	int	0	DEF	($ & 0x1) != 0
360	1819	8	FastMath.java	sinQ	xb	double	0	DEF	$ != 0.0
361	1949	8	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
362	1982	8	FastMath.java	tanQ	xb	double	0	DEF	$ != 0.0
363	1986	12	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
364	2028	8	FastMath.java	reducePayneHanek	shift	int	1	DEF	$ != 0
365	2059	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
365	2059	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
365	2059	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
365	2059	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
365	2059	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
366	2073	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
366	2073	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
366	2073	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
366	2073	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
366	2073	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
367	2093	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
367	2093	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
367	2093	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
367	2093	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
367	2093	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
368	2145	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
368	2145	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
368	2145	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
368	2145	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
368	2145	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
369	2159	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
369	2159	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
369	2159	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
369	2159	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
369	2159	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
370	2179	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
370	2179	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
370	2179	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
370	2179	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
370	2179	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
371	2201	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
371	2201	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
371	2201	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
371	2201	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
371	2201	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
372	2233	8	FastMath.java	sin	x	double	0	DEF	$ < 0
373	2239	8	FastMath.java	sin	xa	double	0	RET	$ == 0.0
374	2241	12	FastMath.java	sin	bits	long	0	RET	$ < 0
375	2247	8	FastMath.java	sin	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
375	2247	8	FastMath.java	sin	xa	double	0	RET	$ != $
376	2252	8	FastMath.java	sin	xa	double	1	DEF	$ > 3294198.0
377	2261	15	FastMath.java	sin	xa	double	0	DEF	$ > 1.5707963267948966
378	2268	8	FastMath.java	sin	negative	boolean	0	DEF	$
379	2297	8	FastMath.java	cos	x	double	0	DEF	$ < 0
380	2301	8	FastMath.java	cos	xa	double	0	RET	$ != $
380	2301	8	FastMath.java	cos	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
381	2307	8	FastMath.java	cos	xa	double	1	DEF	$ > 3294198.0
382	2316	15	FastMath.java	cos	xa	double	0	DEF	$ > 1.5707963267948966
383	2352	8	FastMath.java	tan	x	double	0	DEF	$ < 0
384	2358	8	FastMath.java	tan	xa	double	0	RET	$ == 0.0
385	2360	12	FastMath.java	tan	bits	long	0	RET	$ < 0
386	2366	8	FastMath.java	tan	xa	double	0	RET	$ != $
386	2366	8	FastMath.java	tan	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
387	2372	8	FastMath.java	tan	xa	double	1	DEF	$ > 3294198.0
388	2381	15	FastMath.java	tan	xa	double	0	DEF	$ > 1.5707963267948966
389	2388	8	FastMath.java	tan	xa	double	0	DEF	$ > 1.5
390	2404	8	FastMath.java	tan	quadrant	int	1	DEF	($ & 1) == 0
391	2410	8	FastMath.java	tan	negative	boolean	0	DEF	$
392	2436	8	FastMath.java	atan	xa	double	0	RET	$ == 0.0
393	2440	8	FastMath.java	atan	xa	double	0	DEF	$ < 0
394	2447	8	FastMath.java	atan	xa	double	0	RET	$ > 1.633123935319537E16
395	2452	8	FastMath.java	atan	xa	double	1	DEF	$ < 1
396	2474	8	FastMath.java	atan	idx	int	1	DEF	$ == 0
397	2552	8	FastMath.java	atan	leftPlane	boolean	0	DEF	$
398	2566	8	FastMath.java	atan	negate	boolean	0	DEF	$ ^ leftPlane
398	2566	8	FastMath.java	atan	leftPlane	boolean	0	DEF	negate ^ $
399	2580	8	FastMath.java	atan2	y	double	0	RET	$ != $
399	2580	8	FastMath.java	atan2	x	double	0	RET	$ != $
400	2584	8	FastMath.java	atan2	y	double	0	RET	$ == 0
401	2589	12	FastMath.java	atan2	invx	double	0	RET	$ == 0
402	2590	16	FastMath.java	atan2	x	double	1	RET	$ > 0
403	2597	12	FastMath.java	atan2	invx	double	1	RET	$ < 0
403	2597	12	FastMath.java	atan2	x	double	1	RET	$ < 0
404	2598	16	FastMath.java	atan2	invy	double	1	RET	$ < 0
404	2598	16	FastMath.java	atan2	y	double	1	RET	$ < 0
405	2610	8	FastMath.java	atan2	y	double	0	RET	$ == Double.POSITIVE_INFINITY
406	2611	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
407	2615	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
408	2622	8	FastMath.java	atan2	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
409	2623	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
410	2627	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
411	2634	8	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
412	2635	12	FastMath.java	atan2	y	double	0	RET	$ > 0
412	2635	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
413	2639	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
413	2639	12	FastMath.java	atan2	y	double	0	RET	$ < 0
414	2644	8	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
415	2646	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0.0
415	2646	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
416	2650	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
416	2650	12	FastMath.java	atan2	y	double	0	RET	$ < 0
417	2657	8	FastMath.java	atan2	x	double	0	RET	$ == 0
418	2658	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
418	2658	12	FastMath.java	atan2	y	double	0	RET	$ > 0
419	2662	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
419	2662	12	FastMath.java	atan2	y	double	0	RET	$ < 0
420	2669	8	FastMath.java	atan2	r	double	0	RET	Double.isInfinite($)
421	2686	8	FastMath.java	atan2	ra	double	0	DEF	$ == 0
422	2701	6	FastMath.java	asin	x	double	0	RET	$ != $
423	2705	6	FastMath.java	asin	x	double	0	RET	$ < -1.0
423	2705	6	FastMath.java	asin	x	double	0	RET	$ > 1.0
424	2709	6	FastMath.java	asin	x	double	0	RET	$ == 1.0
425	2713	6	FastMath.java	asin	x	double	0	RET	$ == -1.0
426	2717	6	FastMath.java	asin	x	double	0	RET	$ == 0.0
427	2777	6	FastMath.java	acos	x	double	0	RET	$ != $
428	2781	6	FastMath.java	acos	x	double	0	RET	$ < -1.0
428	2781	6	FastMath.java	acos	x	double	0	RET	$ > 1.0
429	2785	6	FastMath.java	acos	x	double	0	RET	$ == -1.0
430	2789	6	FastMath.java	acos	x	double	0	RET	$ == 1.0
431	2793	6	FastMath.java	acos	x	double	0	RET	$ == 0
432	2837	6	FastMath.java	acos	r	double	0	RET	Double.isInfinite($)
433	2864	6	FastMath.java	cbrt	exponent	int	0	RET	$ == -1023
434	2865	10	FastMath.java	cbrt	x	double	0	RET	$ == 0
435	2876	6	FastMath.java	cbrt	exponent	int	0	RET	$ == 1024
436	2931	6	FastMath.java	cbrt	subnormal	boolean	0	DEF	$
437	2945	8	FastMath.java	toRadians	x	double	0	RET	$ == 0.0
437	2945	8	FastMath.java	toRadians	x	double	0	RET	Double.isInfinite($)
438	2957	8	FastMath.java	toRadians	result	double	0	DEF	$ == 0
439	2970	8	FastMath.java	toDegrees	x	double	0	RET	Double.isInfinite($)
439	2970	8	FastMath.java	toDegrees	x	double	0	RET	$ == 0.0
440	3026	8	FastMath.java	ulp	x	double	0	RET	Double.isInfinite($)
441	3038	8	FastMath.java	ulp	x	float	0	RET	Float.isInfinite($)
442	3053	8	FastMath.java	scalb	n	int	0	RET	$ > -1023
442	3053	8	FastMath.java	scalb	n	int	0	RET	$ < 1024
443	3058	8	FastMath.java	scalb	d	double	0	RET	Double.isNaN($)
443	3058	8	FastMath.java	scalb	d	double	0	RET	Double.isInfinite($)
443	3058	8	FastMath.java	scalb	d	double	0	RET	$ == 0
444	3061	8	FastMath.java	scalb	n	int	0	RET	$ < -2098
445	3064	8	FastMath.java	scalb	n	int	0	RET	$ > 2097
446	3077	8	FastMath.java	scalb	n	int	1	RET	$ < 0
447	3079	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
448	3082	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -53
449	3091	16	FastMath.java	scalb	mostSignificantLostBit	long	0	DEF	$ != 0
450	3103	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
17257	3106	16	FastMath.java	scalb	mantissa	long	0	NIL-WHILE	($ >>> 52) != 1
451	3113	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
452	3119	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
453	3137	8	FastMath.java	scalb	n	int	0	RET	$ > -127
453	3137	8	FastMath.java	scalb	n	int	0	RET	$ < 128
454	3142	8	FastMath.java	scalb	f	float	0	RET	Float.isNaN($)
454	3142	8	FastMath.java	scalb	f	float	0	RET	Float.isInfinite($)
454	3142	8	FastMath.java	scalb	f	float	0	RET	$ == 0f
455	3145	8	FastMath.java	scalb	n	int	0	RET	$ < -277
456	3148	8	FastMath.java	scalb	n	int	0	RET	$ > 276
457	3161	8	FastMath.java	scalb	n	int	1	RET	$ < 0
458	3163	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
459	3166	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -24
460	3175	16	FastMath.java	scalb	mostSignificantLostBit	int	0	DEF	$ != 0
461	3187	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
17258	3190	16	FastMath.java	scalb	mantissa	int	0	NIL-WHILE	($ >>> 23) != 1
462	3197	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
463	3203	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
464	3246	8	FastMath.java	nextAfter	d	double	1	RET	Double.isNaN($)
464	3246	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
465	3248	15	FastMath.java	nextAfter	d	double	1	RET	$ == direction
465	3248	15	FastMath.java	nextAfter	direction	double	1	RET	d == $
466	3250	15	FastMath.java	nextAfter	d	double	1	RET	Double.isInfinite($)
467	3252	15	FastMath.java	nextAfter	d	double	0	RET	$ == 0
468	3260	8	FastMath.java	nextAfter	sign	long	1	RET	(direction < d) ^ ($ == 0L)
468	3260	8	FastMath.java	nextAfter	d	double	1	RET	(direction < $) ^ (sign == 0L)
468	3260	8	FastMath.java	nextAfter	direction	double	1	RET	($ < d) ^ (sign == 0L)
469	3302	8	FastMath.java	nextAfter	f	float	1	RET	Double.isNaN($)
469	3302	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
470	3304	15	FastMath.java	nextAfter	f	float	1	RET	$ == direction
470	3304	15	FastMath.java	nextAfter	direction	double	1	RET	f == $
471	3306	15	FastMath.java	nextAfter	f	float	1	RET	Float.isInfinite($)
472	3308	15	FastMath.java	nextAfter	f	float	0	RET	$ == 0f
473	3316	8	FastMath.java	nextAfter	sign	int	1	RET	(direction < f) ^ ($ == 0)
473	3316	8	FastMath.java	nextAfter	f	float	1	RET	(direction < $) ^ (sign == 0)
473	3316	8	FastMath.java	nextAfter	direction	double	1	RET	($ < f) ^ (sign == 0)
474	3331	8	FastMath.java	floor	x	double	0	RET	$ != $
475	3335	8	FastMath.java	floor	THIS	FastMath	0	RET	x >= $.TWO_POWER_52
475	3335	8	FastMath.java	floor	THIS	FastMath	0	RET	x <= -$.TWO_POWER_52
475	3335	8	FastMath.java	floor	x	double	0	RET	$ >= TWO_POWER_52
475	3335	8	FastMath.java	floor	x	double	0	RET	$ <= -TWO_POWER_52
476	3340	8	FastMath.java	floor	y	long	0	DEF	$ != x
476	3340	8	FastMath.java	floor	x	double	0	DEF	$ < 0
476	3340	8	FastMath.java	floor	x	double	0	DEF	y != $
477	3344	8	FastMath.java	floor	y	long	0	RET	$ == 0
478	3358	8	FastMath.java	ceil	x	double	0	RET	$ != $
479	3363	8	FastMath.java	ceil	y	double	0	RET	$ == x
479	3363	8	FastMath.java	ceil	x	double	0	RET	y == $
480	3369	8	FastMath.java	ceil	y	double	0	RET	$ == 0
481	3384	8	FastMath.java	rint	d	double	0	RET	$ > 0.5
482	3385	12	FastMath.java	rint	y	double	0	RET	$ == -1.0
483	3390	8	FastMath.java	rint	d	double	0	RET	$ < 0.5
484	3439	8	FastMath.java	min	a	float	0	RET	$ > b
484	3439	8	FastMath.java	min	b	float	0	RET	a > $
485	3442	8	FastMath.java	min	a	float	0	RET	$ < b
485	3442	8	FastMath.java	min	b	float	0	RET	a < $
486	3446	8	FastMath.java	min	a	float	0	RET	$ != b
486	3446	8	FastMath.java	min	b	float	0	RET	a != $
487	3452	8	FastMath.java	min	bits	int	0	RET	$ == 0x80000000
488	3464	8	FastMath.java	min	a	double	0	RET	$ > b
488	3464	8	FastMath.java	min	b	double	0	RET	a > $
489	3467	8	FastMath.java	min	a	double	0	RET	$ < b
489	3467	8	FastMath.java	min	b	double	0	RET	a < $
490	3471	8	FastMath.java	min	a	double	0	RET	$ != b
490	3471	8	FastMath.java	min	b	double	0	RET	a != $
491	3477	8	FastMath.java	min	bits	long	0	RET	$ == 0x8000000000000000L
492	3507	8	FastMath.java	max	a	float	0	RET	$ > b
492	3507	8	FastMath.java	max	b	float	0	RET	a > $
493	3510	8	FastMath.java	max	a	float	0	RET	$ < b
493	3510	8	FastMath.java	max	b	float	0	RET	a < $
494	3514	8	FastMath.java	max	a	float	0	RET	$ != b
494	3514	8	FastMath.java	max	b	float	0	RET	a != $
495	3520	8	FastMath.java	max	bits	int	0	RET	$ == 0x80000000
496	3532	8	FastMath.java	max	a	double	0	RET	$ > b
496	3532	8	FastMath.java	max	b	double	0	RET	a > $
497	3535	8	FastMath.java	max	a	double	0	RET	$ < b
497	3535	8	FastMath.java	max	b	double	0	RET	a < $
498	3539	8	FastMath.java	max	a	double	0	RET	$ != b
498	3539	8	FastMath.java	max	b	double	0	RET	a != $
499	3545	8	FastMath.java	max	bits	long	0	RET	$ == 0x8000000000000000L
500	3566	8	FastMath.java	hypot	x	double	1	RET	Double.isInfinite($)
500	3566	8	FastMath.java	hypot	y	double	1	RET	Double.isInfinite($)
501	3568	15	FastMath.java	hypot	x	double	1	RET	Double.isNaN($)
501	3568	15	FastMath.java	hypot	y	double	1	RET	Double.isNaN($)
502	3574	12	FastMath.java	hypot	expX	int	1	RET	$ > expY + 27
502	3574	12	FastMath.java	hypot	expY	int	1	RET	expX > $ + 27
503	3577	19	FastMath.java	hypot	expX	int	1	RET	expY > $ + 27
503	3577	19	FastMath.java	hypot	expY	int	1	RET	$ > expX + 27
504	3639	8	FastMath.java	copySign	m	long	0	RET	($^s) >= 0
504	3639	8	FastMath.java	copySign	s	long	0	RET	(m^$) >= 0
505	3660	8	FastMath.java	copySign	m	int	0	RET	($^s) >= 0
505	3660	8	FastMath.java	copySign	s	int	0	RET	(m^$) >= 0
17239	108	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 7
17240	121	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
172	128	12	FastMathCalc.java	buildSinCosTables	i	int	1	DEF	($ & 1) == 0
17241	177	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
17242	215	8	FastMathCalc.java	slowCos	i	int	0	NIL-FOR	$ >= 0
173	219	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 1) != 0
174	226	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 2) != 0
175	235	8	FastMathCalc.java	slowCos	result	double	0	DEF	$ != null
17243	259	8	FastMathCalc.java	slowSin	i	int	0	NIL-FOR	$ >= 0
176	263	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 1) == 0
177	270	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 2) != 0
178	279	8	FastMathCalc.java	slowSin	result	double	0	DEF	$ != null
17244	303	8	FastMathCalc.java	slowexp	i	int	0	NIL-FOR	$ >= 0
179	316	8	FastMathCalc.java	slowexp	result	double	0	DEF	$ != null
180	330	8	FastMathCalc.java	split	d	double	1	DEF	$ < 8e298
180	330	8	FastMathCalc.java	split	d	double	1	DEF	$ > -8e298
181	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ < 8e298
181	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ > -8e298
182	407	8	FastMathCalc.java	splitReciprocal	in	double	0	DEF	$[0] == 0.0
183	415	8	FastMathCalc.java	splitReciprocal	result	double	0	DEF	$[1] != $[1]
17245	422	8	FastMathCalc.java	splitReciprocal	i	int	0	NIL-FOR	$ < 2
17246	510	8	FastMathCalc.java	expint	p	int	0	NIL-WHILE	$ > 0
184	511	12	FastMathCalc.java	expint	p	int	0	DEF	($ & 1) != 0
185	522	8	FastMathCalc.java	expint	result	double	0	DEF	$ != null
17247	578	8	FastMathCalc.java	slowLog	i	int	0	NIL-FOR	$ >= 0
186	639	8	FastMathCalc.java	format	d	double	1	RET	$ != $
187	654	8	FastMathCalc.java	checkLen	expectedLen	int	0	DimensionMismatchException	$ != actual
187	654	8	FastMathCalc.java	checkLen	actual	int	0	DimensionMismatchException	expectedLen != $
3327	97	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	$.normalization == $.DstNormalization.ORTHOGONAL_DST_I
3328	101	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	type == $.TransformType.FORWARD
3328	101	8	FastSineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
3329	141	8	FastSineTransformer.java	fst	THIS	FastSineTransformer	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo(f.$.length)
3329	141	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($.length)
3330	146	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	$[0] != 0.0
3331	152	8	FastSineTransformer.java	fst	n	int	0	RET	$ == 1
19093	161	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
19093	161	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
19094	174	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
19094	174	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
19385	97	8	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	NIL-FOR	i < value.$.length
19385	97	8	FieldHermiteInterpolator.java	addSamplePoint	i	int	0	NIL-FOR	$ < value.length
19385	97	8	FieldHermiteInterpolator.java	addSamplePoint	value	T[]	0	NIL-FOR	i < $.length
3947	100	12	FieldHermiteInterpolator.java	addSamplePoint	i	int	0	DEF	$ > 1
19386	103	16	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	NIL-FOR	j < y.$.length
19386	103	16	FieldHermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < y.length
19386	103	16	FieldHermiteInterpolator.java	addSamplePoint	y	T[]	0	NIL-FOR	j < $.length
19387	112	12	FieldHermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < n
19387	112	12	FieldHermiteInterpolator.java	addSamplePoint	n	int	0	NIL-FOR	j < $
3948	114	16	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	ZeroException	x.equals($.abscissae.get(n - (j + 1)))
3948	114	16	FieldHermiteInterpolator.java	addSamplePoint	j	int	0	ZeroException	x.equals(abscissae.get(n - ($ + 1)))
3948	114	16	FieldHermiteInterpolator.java	addSamplePoint	n	int	0	ZeroException	x.equals(abscissae.get($ - (j + 1)))
3948	114	16	FieldHermiteInterpolator.java	addSamplePoint	x	T	0	ZeroException	$.equals(abscissae.get(n - (j + 1)))
19388	118	16	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	NIL-FOR	k < y.$.length
19388	118	16	FieldHermiteInterpolator.java	addSamplePoint	k	int	0	NIL-FOR	$ < y.length
19388	118	16	FieldHermiteInterpolator.java	addSamplePoint	y	T[]	0	NIL-FOR	k < $.length
3949	144	8	FieldHermiteInterpolator.java	value	THIS	FieldHermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
19389	150	8	FieldHermiteInterpolator.java	value	THIS	FieldHermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
19389	150	8	FieldHermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
19390	152	12	FieldHermiteInterpolator.java	value	THIS	FieldHermiteInterpolator	0	NIL-FOR	k < value.$.length
19390	152	12	FieldHermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
19390	152	12	FieldHermiteInterpolator.java	value	value	T[]	0	NIL-FOR	k < $.length
3950	175	8	FieldHermiteInterpolator.java	derivatives	THIS	FieldHermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
19391	183	8	FieldHermiteInterpolator.java	derivatives	i	int	0	NIL-FOR	$ < order
19391	183	8	FieldHermiteInterpolator.java	derivatives	order	int	0	NIL-FOR	i < $
19392	191	8	FieldHermiteInterpolator.java	derivatives	THIS	FieldHermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
19392	191	8	FieldHermiteInterpolator.java	derivatives	i	int	0	NIL-FOR	$ < topDiagonal.size()
19393	194	12	FieldHermiteInterpolator.java	derivatives	j	int	0	NIL-FOR	$ >= 0
19394	195	16	FieldHermiteInterpolator.java	derivatives	THIS	FieldHermiteInterpolator	0	NIL-FOR	k < derivatives[j].length
19394	195	16	FieldHermiteInterpolator.java	derivatives	k	int	0	NIL-FOR	$ < derivatives[j].length
19394	195	16	FieldHermiteInterpolator.java	derivatives	j	int	0	NIL-FOR	k < derivatives[$].length
19394	195	16	FieldHermiteInterpolator.java	derivatives	derivatives	T[][]	0	NIL-FOR	k < $[j].length
3951	200	16	FieldHermiteInterpolator.java	derivatives	j	int	0	DEF	$ > 0
1619	86	8	FieldLUDecomposition.java	FieldLUDecomposition	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
17883	100	8	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
17883	100	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
17884	107	8	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	$ < m
17884	107	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	col < $
17885	112	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < col
17885	112	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	row < $
17886	115	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < row
17886	115	16	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	i < $
17887	123	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
17887	123	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
17888	126	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < col
17888	126	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	i < $
1620	131	16	FieldLUDecomposition.java	FieldLUDecomposition	THIS	FieldLUDecomposition	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
1620	131	16	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
1620	131	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
1621	138	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	RET	$ >= m
1621	138	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	RET	nonZero >= $
1622	144	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	$ != col
1622	144	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	nonZero != $
17889	146	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < m
17889	146	16	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	i < $
17890	159	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
17890	159	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
1623	173	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.cachedL == null
1623	173	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.singular
17891	176	12	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
17891	176	12	FieldLUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
17892	178	16	FieldLUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
17892	178	16	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1624	193	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.singular
1624	193	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.cachedU == null
17893	196	12	FieldLUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
17893	196	12	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
17894	198	16	FieldLUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
17894	198	16	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1625	216	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.singular
1625	216	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.cachedP == null
17895	219	12	FieldLUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
17895	219	12	FieldLUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1626	240	8	FieldLUDecomposition.java	getDeterminant	THIS	FieldLUDecomposition	1	RET	$.singular
17896	245	12	FieldLUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
17896	245	12	FieldLUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
668	78	8	FieldRotation.java	FieldRotation	needsNormalization	boolean	1	DEF	$
669	120	8	FieldRotation.java	FieldRotation	norm	T	0	MathIllegalArgumentException	$.getReal() == 0
670	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m.$.length != 3
670	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m[1].length != 3
670	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m[0].length != 3
670	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m[2].length != 3
670	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$.length != 3
670	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$[1].length != 3
670	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$[0].length != 3
670	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$[2].length != 3
671	184	8	FieldRotation.java	FieldRotation	det	T	0	NotARotationMatrixException	$.getReal() < 0.0
672	268	8	FieldRotation.java	FieldRotation	normProduct	T	0	MathArithmeticException	$.getReal() == 0
673	274	8	FieldRotation.java	FieldRotation	normProduct	T	1	DEF	dot.getReal() < ((2.0e-15 - 1.0) * $.getReal())
673	274	8	FieldRotation.java	FieldRotation	dot	T	1	DEF	$.getReal() < ((2.0e-15 - 1.0) * normProduct.getReal())
674	346	8	FieldRotation.java	mat2quat	s	T	1	DEF	$.getReal() > -0.19
675	355	12	FieldRotation.java	mat2quat	s	T	1	DEF	$.getReal() > -0.19
676	364	16	FieldRotation.java	mat2quat	s	T	1	DEF	$.getReal() > -0.19
677	432	8	FieldRotation.java	getAxis	squaredSine	T	1	RET	$.getReal() == 0
678	435	15	FieldRotation.java	getAxis	THIS	FieldRotation	0	RET	$.q0.getReal() < 0
679	448	8	FieldRotation.java	getAngle	THIS	FieldRotation	1	RET	$.q0.getReal() < -0.1
679	448	8	FieldRotation.java	getAngle	THIS	FieldRotation	1	RET	$.q0.getReal() > 0.1
680	450	15	FieldRotation.java	getAngle	THIS	FieldRotation	0	RET	$.q0.getReal() < 0
681	494	8	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
682	503	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
682	503	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
683	510	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
684	519	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
684	519	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
685	526	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
686	535	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
686	535	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
687	542	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
688	551	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
688	551	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
689	558	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
690	567	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
690	567	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
691	574	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
692	583	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
692	583	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
693	590	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
694	599	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
694	599	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
695	606	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
696	615	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
696	615	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
697	622	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
698	631	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
698	631	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
699	638	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
700	647	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
700	647	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
701	654	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
702	663	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
702	663	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
703	679	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
703	679	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
17283	1090	8	FieldRotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
704	1131	12	FieldRotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
704	1131	12	FieldRotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
704	1131	12	FieldRotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
777	73	8	FieldVector3D.java	FieldVector3D	THIS	FieldVector3D	0	DimensionMismatchException	v.$.length != 3
777	73	8	FieldVector3D.java	FieldVector3D	v	T[]	0	DimensionMismatchException	$.length != 3
778	376	8	FieldVector3D.java	getNormInf	xAbs	T	1	RET	$.getReal() <= yAbs.getReal()
778	376	8	FieldVector3D.java	getNormInf	yAbs	T	1	RET	xAbs.getReal() <= $.getReal()
779	377	12	FieldVector3D.java	getNormInf	yAbs	T	1	RET	$.getReal() <= zAbs.getReal()
779	377	12	FieldVector3D.java	getNormInf	zAbs	T	1	RET	yAbs.getReal() <= $.getReal()
780	383	12	FieldVector3D.java	getNormInf	xAbs	T	1	RET	$.getReal() <= zAbs.getReal()
780	383	12	FieldVector3D.java	getNormInf	zAbs	T	1	RET	xAbs.getReal() <= $.getReal()
781	525	8	FieldVector3D.java	normalize	s	T	0	MathArithmeticException	$.getReal() == 0
782	549	8	FieldVector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
783	553	8	FieldVector3D.java	orthogonal	THIS	FieldVector3D	1	RET	FastMath.abs($.x.getReal()) <= threshold
783	553	8	FieldVector3D.java	orthogonal	threshold	double	1	RET	FastMath.abs(x.getReal()) <= $
784	556	15	FieldVector3D.java	orthogonal	THIS	FieldVector3D	1	RET	FastMath.abs($.y.getReal()) <= threshold
784	556	15	FieldVector3D.java	orthogonal	threshold	double	1	RET	FastMath.abs(y.getReal()) <= $
785	582	8	FieldVector3D.java	angle	normProduct	T	0	MathArithmeticException	$.getReal() == 0
786	588	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() < -threshold
786	588	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() > threshold
786	588	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() < -$
786	588	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() > $
787	591	12	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() >= 0
788	618	8	FieldVector3D.java	angle	normProduct	T	0	MathArithmeticException	$.getReal() == 0
789	624	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() > threshold
789	624	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() < -threshold
789	624	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() > $
789	624	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() < -$
790	627	12	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() >= 0
791	718	8	FieldVector3D.java	equals	THIS	FieldVector3D	0	RET	$ == other
791	718	8	FieldVector3D.java	equals	other	Object	0	RET	this == $
792	722	8	FieldVector3D.java	equals	other	Object	0	RET	$ instanceof FieldVector3D
793	725	12	FieldVector3D.java	equals	rhs	FieldVector3D<T>	0	RET	$.isNaN()
794	744	8	FieldVector3D.java	hashCode	THIS	FieldVector3D	0	RET	$.isNaN()
795	865	8	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dy.getReal()
795	865	8	FieldVector3D.java	distanceInf	dy	T	1	RET	dx.getReal() <= $.getReal()
796	866	12	FieldVector3D.java	distanceInf	dy	T	1	RET	$.getReal() <= dz.getReal()
796	866	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dy.getReal() <= $.getReal()
797	872	12	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dz.getReal()
797	872	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dx.getReal() <= $.getReal()
798	891	8	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dy.getReal()
798	891	8	FieldVector3D.java	distanceInf	dy	T	1	RET	dx.getReal() <= $.getReal()
799	892	12	FieldVector3D.java	distanceInf	dy	T	1	RET	$.getReal() <= dz.getReal()
799	892	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dy.getReal() <= $.getReal()
800	898	12	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dz.getReal()
800	898	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dx.getReal() <= $.getReal()
4163	145	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	nbPoints	int	0	NumberIsTooSmallException	$ <= 1
4164	150	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	stepSize	double	0	NotPositiveException	$ <= 0
4165	156	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	THIS	FiniteDifferencesDifferentiator	0	NumberIsTooLargeException	2 * $.halfSampleSpan >= tUpper - tLower
4165	156	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	tLower	double	0	NumberIsTooLargeException	2 * halfSampleSpan >= tUpper - $
4165	156	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	tUpper	double	0	NumberIsTooLargeException	2 * halfSampleSpan >= $ - tLower
19515	201	8	FiniteDifferencesDifferentiator.java	evaluate	THIS	FiniteDifferencesDifferentiator	0	NIL-FOR	i < $.nbPoints
19515	201	8	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	$ < nbPoints
19516	205	12	FiniteDifferencesDifferentiator.java	evaluate	j	int	0	NIL-FOR	$ <= i
19516	205	12	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	j <= $
19517	221	8	FiniteDifferencesDifferentiator.java	evaluate	THIS	FiniteDifferencesDifferentiator	0	NIL-FOR	i < $.nbPoints
19517	221	8	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	$ < nbPoints
4166	222	12	FiniteDifferencesDifferentiator.java	evaluate	i	int	1	DEF	$ == 0
2301	103	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
3246	58	8	FixedElapsedTime.java	FixedElapsedTime	maxTime	long	0	NumberIsTooSmallException	$ < 0
3247	72	8	FixedElapsedTime.java	isSatisfied	THIS	FixedElapsedTime	0	DEF	$.endTime < 0
3232	43	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	NumberIsTooSmallException	$ <= 0
3233	57	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
2279	89	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
1028	181	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(a0) > $
1028	181	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	FastMath.abs($) > overflow
1029	187	8	Fraction.java	Fraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
1029	187	8	Fraction.java	Fraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
1029	187	8	Fraction.java	Fraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
17306	203	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
1030	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(q2) > $
1030	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(p2) > $
1030	209	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	FastMath.abs($) > overflow
1030	209	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	FastMath.abs($) > overflow
1031	214	12	Fraction.java	Fraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
1031	214	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
1031	214	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
1031	214	12	Fraction.java	Fraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
1031	214	12	Fraction.java	Fraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
1031	214	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
1031	214	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
1032	226	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
1032	226	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
1033	230	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
1033	230	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
1034	257	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == 0
1035	261	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ < 0
1036	262	12	Fraction.java	Fraction	num	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
1036	262	12	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
1037	272	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
1038	278	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
1039	292	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
1040	333	8	Fraction.java	equals	THIS	Fraction	0	RET	$ == other
1040	333	8	Fraction.java	equals	other	Object	0	RET	this == $
1041	336	8	Fraction.java	equals	other	Object	0	RET	$ instanceof Fraction
1042	406	8	Fraction.java	negate	THIS	Fraction	0	MathArithmeticException	$.numerator==Integer.MIN_VALUE
1043	477	8	Fraction.java	addSub	fraction	Fraction	0	NullArgumentException	$ == null
1044	481	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
1045	484	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
1045	484	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
1046	490	8	Fraction.java	addSub	d1	int	0	RET	$==1
1047	514	8	Fraction.java	addSub	w	BigInteger	0	MathArithmeticException	$.bitLength() > 31
1048	534	8	Fraction.java	multiply	fraction	Fraction	0	NullArgumentException	$ == null
1049	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
1049	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
1049	537	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
1050	569	8	Fraction.java	divide	fraction	Fraction	0	NullArgumentException	$ == null
1051	572	8	Fraction.java	divide	THIS	Fraction	0	MathArithmeticException	fraction.$.numerator == 0
1051	572	8	Fraction.java	divide	fraction	Fraction	0	MathArithmeticException	$.numerator == 0
1052	612	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ == 0
1053	616	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
1054	620	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
1054	620	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
1055	623	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ < 0
1056	624	12	Fraction.java	getReducedFraction	numerator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
1056	624	12	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
1057	651	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
1058	653	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
1012	177	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
1013	179	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
1014	199	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1015	221	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
1016	254	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
18612	90	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2497	132	8	Frequency.java	incrementValue	v	Comparable<?>	0	DEF	$ instanceof Integer
2498	137	12	Frequency.java	incrementValue	count	Long	1	DEF	$ == null
18613	228	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
2499	242	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
2500	248	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
2501	308	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
2502	359	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
2503	362	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
2504	366	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
2505	373	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
2506	380	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
2506	380	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
2506	380	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
2507	384	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
2507	384	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
2507	384	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
18614	389	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2508	391	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
2508	391	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
2508	391	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
2509	451	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
18615	511	8	Frequency.java	merge	iter	Iterator<Entry<Comparable<?>,Long>>	0	NIL-WHILE	$.hasNext()
2510	577	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
2510	577	8	Frequency.java	equals	obj	Object	0	RET	this == $
2511	580	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
2512	584	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
2513	585	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
2513	585	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
2514	588	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
2514	588	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
4098	427	8	FunctionUtils.java	sample	n	int	0	NotStrictlyPositiveException	$ <= 0
4099	432	8	FunctionUtils.java	sample	min	double	0	NumberIsTooLargeException	$ >= max
4099	432	8	FunctionUtils.java	sample	max	double	0	NumberIsTooLargeException	min >= $
19447	438	8	FunctionUtils.java	sample	i	int	0	NIL-FOR	$ < n
19447	438	8	FunctionUtils.java	sample	n	int	0	NIL-FOR	i < $
2519	80	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
2426	81	8	GTest.java	g	THIS	GTest	0	DimensionMismatchException	expected.$.length < 2
2426	81	8	GTest.java	g	expected	double[]	0	DimensionMismatchException	$.length < 2
2427	84	8	GTest.java	g	THIS	GTest	0	DimensionMismatchException	expected.$.length != observed.$.length
2427	84	8	GTest.java	g	expected	double[]	0	DimensionMismatchException	$.length != observed.length
2427	84	8	GTest.java	g	observed	long[]	0	DimensionMismatchException	expected.length != $.length
18559	92	8	GTest.java	g	THIS	GTest	0	NIL-FOR	i < observed.$.length
18559	92	8	GTest.java	g	i	int	0	NIL-FOR	$ < observed.length
18559	92	8	GTest.java	g	observed	long[]	0	NIL-FOR	i < $.length
2428	98	8	GTest.java	g	sumExpected	double	0	DEF	Math.abs($ - sumObserved) > 10E-6
2428	98	8	GTest.java	g	sumObserved	double	0	DEF	Math.abs(sumExpected - $) > 10E-6
18560	103	8	GTest.java	g	THIS	GTest	0	NIL-FOR	i < observed.$.length
18560	103	8	GTest.java	g	i	int	0	NIL-FOR	$ < observed.length
18560	103	8	GTest.java	g	observed	long[]	0	NIL-FOR	i < $.length
2429	242	8	GTest.java	gTest	alpha	double	0	OutOfRangeException	$ <= 0
2429	242	8	GTest.java	gTest	alpha	double	0	OutOfRangeException	$ > 0.5
18561	264	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
18561	264	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
18561	264	8	GTest.java	entropy	k	long[][]	0	NIL-FOR	i < $.length
18562	265	12	GTest.java	entropy	THIS	GTest	0	NIL-FOR	j < k[i].length
18562	265	12	GTest.java	entropy	j	int	0	NIL-FOR	$ < k[i].length
18562	265	12	GTest.java	entropy	i	int	0	NIL-FOR	j < k[$].length
18562	265	12	GTest.java	entropy	k	long[][]	0	NIL-FOR	j < $[i].length
18563	269	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
18563	269	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
18563	269	8	GTest.java	entropy	k	long[][]	0	NIL-FOR	i < $.length
18564	270	12	GTest.java	entropy	THIS	GTest	0	NIL-FOR	j < k[i].length
18564	270	12	GTest.java	entropy	j	int	0	NIL-FOR	$ < k[i].length
18564	270	12	GTest.java	entropy	i	int	0	NIL-FOR	j < k[$].length
18564	270	12	GTest.java	entropy	k	long[][]	0	NIL-FOR	j < $[i].length
2430	271	16	GTest.java	entropy	j	int	0	DEF	k[i][$] != 0
2430	271	16	GTest.java	entropy	i	int	0	DEF	k[$][j] != 0
2430	271	16	GTest.java	entropy	k	long[][]	0	DEF	$[i][j] != 0
18565	294	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
18565	294	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
18565	294	8	GTest.java	entropy	k	long[]	0	NIL-FOR	i < $.length
18566	297	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
18566	297	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
18566	297	8	GTest.java	entropy	k	long[]	0	NIL-FOR	i < $.length
2431	298	12	GTest.java	entropy	i	int	0	DEF	k[$] != 0
2431	298	12	GTest.java	entropy	k	long[]	0	DEF	$[i] != 0
2432	352	8	GTest.java	gDataSetsComparison	THIS	GTest	0	DimensionMismatchException	observed1.$.length < 2
2432	352	8	GTest.java	gDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
2433	355	8	GTest.java	gDataSetsComparison	THIS	GTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
2433	355	8	GTest.java	gDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
2433	355	8	GTest.java	gDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
18567	371	8	GTest.java	gDataSetsComparison	THIS	GTest	0	NIL-FOR	i < observed1.$.length
18567	371	8	GTest.java	gDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
18567	371	8	GTest.java	gDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2434	372	12	GTest.java	gDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
2434	372	12	GTest.java	gDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
2434	372	12	GTest.java	gDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
2434	372	12	GTest.java	gDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
2435	383	8	GTest.java	gDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
2435	383	8	GTest.java	gDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
2436	426	8	GTest.java	rootLogLikelihoodRatio	k11	long	0	DEF	(double) $ / ($ + k12) < (double) k21 / (k21 + k22)
2436	426	8	GTest.java	rootLogLikelihoodRatio	k12	long	0	DEF	(double) k11 / (k11 + $) < (double) k21 / (k21 + k22)
2436	426	8	GTest.java	rootLogLikelihoodRatio	k21	long	0	DEF	(double) k11 / (k11 + k12) < (double) $ / ($ + k22)
2436	426	8	GTest.java	rootLogLikelihoodRatio	k22	long	0	DEF	(double) k11 / (k11 + k12) < (double) k21 / (k21 + $)
2437	531	8	GTest.java	gTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
2437	531	8	GTest.java	gTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
3284	247	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
3284	247	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
3285	249	15	Gamma.java	logGamma	x	double	1	RET	$ < 0.5
3286	251	15	Gamma.java	logGamma	x	double	1	RET	$ <= 2.5
3287	253	15	Gamma.java	logGamma	x	double	1	RET	$ <= 8.0
19070	256	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ <= n
19070	256	12	Gamma.java	logGamma	n	int	0	NIL-FOR	i <= $
3288	316	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
3288	316	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
3288	316	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
3288	316	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
3289	318	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
3290	320	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x >= $ + 1
3290	320	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ >= a + 1
19071	329	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
19071	329	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	FastMath.abs($/sum) > epsilon
19071	329	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	FastMath.abs(an/$) > epsilon
19071	329	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	$ < Double.POSITIVE_INFINITY
19071	329	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	FastMath.abs(an/sum) > $
19071	329	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
3291	339	12	Gamma.java	regularizedGammaP	n	double	1	MaxCountExceededException	$ >= maxIterations
3291	339	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxCountExceededException	n >= $
3292	341	19	Gamma.java	regularizedGammaP	sum	double	1	DEF	Double.isInfinite($)
3293	394	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
3293	394	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
3293	394	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
3293	394	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
3294	396	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
3295	398	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $ + 1.0
3295	398	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a + 1.0
3296	446	8	Gamma.java	digamma	x	double	0	RET	$ > 0
3296	446	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
3297	452	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
3298	476	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
3298	476	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
3299	480	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
19072	514	8	Gamma.java	lanczos	i	int	0	NIL-FOR	$ > 0
3300	534	8	Gamma.java	invGamma1pm1	x	double	0	NumberIsTooSmallException	$ < -0.5
3301	537	8	Gamma.java	invGamma1pm1	x	double	0	NumberIsTooLargeException	$ > 1.5
3302	543	8	Gamma.java	invGamma1pm1	t	double	1	DEF	$ < 0.0
3303	569	12	Gamma.java	invGamma1pm1	x	double	1	DEF	$ > 0.5
3304	604	12	Gamma.java	invGamma1pm1	x	double	1	DEF	$ > 0.5
3305	628	8	Gamma.java	logGamma1p	x	double	0	NumberIsTooSmallException	$ < -0.5
3306	631	8	Gamma.java	logGamma1p	x	double	0	NumberIsTooLargeException	$ > 1.5
3307	650	8	Gamma.java	gamma	x	double	0	RET	$ <= 0.0
3307	650	8	Gamma.java	gamma	x	double	0	RET	$ == FastMath.rint($)
3308	656	8	Gamma.java	gamma	absX	double	1	DEF	$ <= 20.0
3309	657	12	Gamma.java	gamma	x	double	1	DEF	$ >= 1.0
19073	668	16	Gamma.java	gamma	t	double	0	NIL-WHILE	$ > 2.5
19074	683	16	Gamma.java	gamma	t	double	0	NIL-WHILE	$ < -0.5
3310	694	12	Gamma.java	gamma	x	double	1	DEF	$ > 0.0
1248	134	8	GammaDistribution.java	GammaDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1249	137	8	GammaDistribution.java	GammaDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1250	238	8	GammaDistribution.java	density	x	double	0	RET	$ < 0
1251	242	8	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	y <= $.minY
1251	242	8	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	FastMath.log(y) >= $.maxLogY
1251	242	8	GammaDistribution.java	density	y	double	0	RET	$ <= minY
1251	242	8	GammaDistribution.java	density	y	double	0	RET	FastMath.log($) >= maxLogY
1252	276	8	GammaDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1253	374	8	GammaDistribution.java	sample	THIS	GammaDistribution	0	RET	$.shape < 1
1254	383	16	GammaDistribution.java	sample	p	double	1	RET	$ <= 1
1255	389	20	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.exp(-$)
1255	389	20	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.exp(-x)
1256	401	20	GammaDistribution.java	sample	THIS	GammaDistribution	1	DEF	u2 > FastMath.pow(x, $.shape - 1)
1256	401	20	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.pow($, shape - 1)
1256	401	20	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.pow(x, shape - 1)
1257	420	12	GammaDistribution.java	sample	v	double	0	DEF	$ <= 0
1258	428	12	GammaDistribution.java	sample	x2	double	0	RET	u < 1 - 0.0331 * $ * $
1258	428	12	GammaDistribution.java	sample	u	double	0	RET	$ < 1 - 0.0331 * x2 * x2
1259	432	12	GammaDistribution.java	sample	v	double	0	RET	FastMath.log(u) < 0.5 * x2 + d * (1 - $ + FastMath.log($))
1259	432	12	GammaDistribution.java	sample	x2	double	0	RET	FastMath.log(u) < 0.5 * $ + d * (1 - v + FastMath.log(v))
1259	432	12	GammaDistribution.java	sample	u	double	0	RET	FastMath.log($) < 0.5 * x2 + d * (1 - v + FastMath.log(v))
1259	432	12	GammaDistribution.java	sample	d	double	0	RET	FastMath.log(u) < 0.5 * x2 + $ * (1 - v + FastMath.log(v))
4229	53	8	GaussIntegrator.java	GaussIntegrator	THIS	GaussIntegrator	0	DimensionMismatchException	points.$.length != weights.$.length
4229	53	8	GaussIntegrator.java	GaussIntegrator	points	double[]	0	DimensionMismatchException	$.length != weights.length
4229	53	8	GaussIntegrator.java	GaussIntegrator	weights	double[]	0	DimensionMismatchException	points.length != $.length
19570	92	8	GaussIntegrator.java	integrate	THIS	GaussIntegrator	0	NIL-FOR	i < $.points.$.length
19570	92	8	GaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < points.length
19577	138	8	GaussIntegratorFactory.java	transform	THIS	GaussIntegratorFactory	0	NIL-FOR	i < points.$.length
19577	138	8	GaussIntegratorFactory.java	transform	i	int	0	NIL-FOR	$ < points.length
19577	138	8	GaussIntegratorFactory.java	transform	points	double[]	0	NIL-FOR	i < $.length
3109	87	8	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	NullArgumentException	$ == null
18988	97	8	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
18988	97	8	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
18989	106	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
18990	120	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
18990	120	12	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
18991	128	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
18991	128	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
18992	133	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
18992	133	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
18993	136	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < nC
18993	136	20	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	l < $
18994	150	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nC
18994	150	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	i < $
3110	158	12	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	$ != null
3111	160	16	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	RET	$
3112	175	8	GaussNewtonOptimizer.java	checkParameters	THIS	GaussNewtonOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3112	175	8	GaussNewtonOptimizer.java	checkParameters	THIS	GaussNewtonOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
1959	110	8	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	NullArgumentException	$ == null
18288	120	8	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
18288	120	8	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
18289	130	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
18290	144	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
18290	144	12	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
18291	152	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
18291	152	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
18292	157	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
18292	157	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
18293	160	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < nC
18293	160	20	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	l < $
18294	174	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nC
18294	174	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	i < $
1960	182	12	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	$ != null
1961	184	16	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	RET	$
3981	63	8	Gaussian.java	Gaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
3982	229	8	Gaussian.java	value	coeff	double	1	DEF	$ <= Precision.SAFE_MIN
19430	233	12	Gaussian.java	value	THIS	Gaussian	0	NIL-FOR	n < f.$.length
19430	233	12	Gaussian.java	value	n	int	0	NIL-FOR	$ < f.length
19430	233	12	Gaussian.java	value	f	double[]	0	NIL-FOR	n < $.length
19431	238	16	Gaussian.java	value	k	int	0	NIL-FOR	$ >= 0
3983	240	20	Gaussian.java	value	k	int	1	DEF	$ > 2
3984	242	27	Gaussian.java	value	k	int	0	DEF	$ == 2
3985	246	16	Gaussian.java	value	n	int	0	DEF	($ & 0x1) == 1
3227	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ < 0
3227	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ > 1
3228	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ < 0
3228	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ > 1
19049	120	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
19049	120	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
19050	154	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
3229	159	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
3229	159	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
3230	165	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
3230	165	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
3231	175	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
2299	114	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
2300	208	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	MathIllegalStateException	$.getN() > 0
3433	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	1	DEF	$.previousState != null
3433	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
19173	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19173	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
19174	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19174	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
19529	46	8	GradientFunction.java	value	THIS	GradientFunction	0	NIL-FOR	i < point.$.length
19529	46	8	GradientFunction.java	value	i	int	0	NIL-FOR	$ < point.length
19529	46	8	GradientFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
19530	56	8	GradientFunction.java	value	THIS	GradientFunction	0	NIL-FOR	i < point.$.length
19530	56	8	GradientFunction.java	value	i	int	0	NIL-FOR	$ < point.length
19530	56	8	GradientFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
3047	95	12	GradientMultivariateOptimizer.java	parseOptimizationData	THIS	GradientMultivariateOptimizer	0	DEF	$.data instanceof ObjectiveFunctionGradient
3374	228	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ > 0.9999
3374	228	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ < 0.0001
3375	263	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ < 0.0001
3375	263	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ > 0.9999
3376	269	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ > 0.9999
3376	269	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ < 0.0001
3377	275	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ < 0.0001
3377	275	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ > 0.9999
3378	281	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ < 1.0001
3378	281	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ > 999.9
3379	315	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ % 2 != 0
3379	315	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ <= 6
3380	319	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ > 0.9999
3380	319	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ < 0.0001
3381	325	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ < 0.0001
3381	325	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ > 0.9999
3382	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
3382	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
3382	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
19133	377	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
19133	377	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
19134	384	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
19134	384	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
19135	389	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
19135	389	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
19136	391	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
19136	391	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
3383	414	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ >= 7
3383	414	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ <= 0
3384	428	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
19137	429	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
19137	429	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
19137	429	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
19138	434	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
19138	434	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
19138	434	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
19139	470	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
19139	470	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
19139	470	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
19140	477	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
19140	477	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
3385	479	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
3385	479	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
19141	485	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
19141	485	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
19141	485	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
3386	494	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
3386	494	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
3386	494	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
3386	494	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
3386	494	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
19142	496	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
19142	496	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
19142	496	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
19143	501	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
19143	501	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
19143	501	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
3387	505	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * FastMath.max(1.0e-15, $)
3387	505	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * FastMath.max(1.0e-15, initialNorm)
19144	513	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
19144	513	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
19144	513	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
19145	532	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
19145	532	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
19146	533	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
19146	533	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
19146	533	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
19147	541	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
19147	541	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
19147	541	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
19148	567	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
19148	567	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
19149	573	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
19149	573	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
19150	580	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
19150	580	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
19150	580	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
3388	586	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
3388	586	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
19151	624	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-DOWHILE	$.isLastStep
3389	629	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
3390	634	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
3391	638	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3392	650	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
3392	650	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
3392	650	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
3392	650	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
3392	650	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
3392	650	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
19152	659	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
3393	664	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3393	664	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
3393	664	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3393	664	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
3393	664	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
3393	664	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3393	664	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
3393	664	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3393	664	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3393	664	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3394	677	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
19153	686	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < $.mainSetDimension
19153	686	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < mainSetDimension
3395	692	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
3395	692	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
3395	692	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
3395	692	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
3396	713	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3396	713	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
3397	716	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
3398	725	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
3398	725	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
3399	731	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
3399	731	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3399	731	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3400	743	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
3401	751	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
3401	751	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
3402	756	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
3402	756	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3402	756	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3403	767	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
3404	769	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
3404	769	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3404	769	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3405	780	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.isLastStep
3405	780	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
3405	780	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3406	792	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
3407	799	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
19154	802	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
19154	802	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
19155	808	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
19155	808	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
19156	814	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
19156	814	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
19156	814	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
19157	817	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
19157	817	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
19157	817	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
19158	820	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
19158	820	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
19158	820	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
19159	825	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
19159	825	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
19159	825	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
19160	830	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
19160	830	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
19161	831	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
19161	831	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
19162	832	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
19162	832	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
19162	832	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
3408	840	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
3409	847	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
3410	852	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
3411	862	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
3412	875	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
3413	877	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
3414	880	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
3414	880	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
3415	882	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
3415	882	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3416	884	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
3416	884	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
3417	889	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
3417	889	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
3417	889	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
3418	893	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
3418	893	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
3418	893	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
3419	898	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
3420	905	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
3420	905	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
3421	908	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
3421	908	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
3421	908	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
3421	908	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
3422	927	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
3423	933	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
3449	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynomials == null
3449	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials == null
19198	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynomials.$.length
19198	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynomials.length
3450	192	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
3451	199	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials != null
19199	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
19199	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
19199	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
19200	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
19200	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
19200	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
3452	212	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
19201	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
19201	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
19202	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
19202	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
3453	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials == null
3453	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials.$.length <= (mu + 4)
3453	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynomials.length <= ($ + 4)
19203	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
19203	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
3454	264	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
3455	272	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
3456	276	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
3457	280	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
19204	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
19204	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
3458	304	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
19205	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < scale.$.length
19205	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < scale.length
19205	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	scale	double[]	0	NIL-FOR	i < $.length
19206	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
19206	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
3459	339	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
19207	342	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
3460	353	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
19208	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
19208	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
19209	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
19209	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
19210	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
19210	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
19211	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
19211	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
3986	172	8	HarmonicOscillator.java	value	THIS	HarmonicOscillator	0	DEF	f.$.length > 1
3986	172	8	HarmonicOscillator.java	value	f	double[]	0	DEF	$.length > 1
19432	175	12	HarmonicOscillator.java	value	THIS	HarmonicOscillator	0	NIL-FOR	i < f.$.length
19432	175	12	HarmonicOscillator.java	value	i	int	0	NIL-FOR	$ < f.length
19432	175	12	HarmonicOscillator.java	value	f	double[]	0	NIL-FOR	i < $.length
19345	90	8	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	i < value.$.length
19345	90	8	HermiteInterpolator.java	addSamplePoint	i	int	0	NIL-FOR	$ < value.length
19345	90	8	HermiteInterpolator.java	addSamplePoint	value	double[]	0	NIL-FOR	i < $.length
3907	93	12	HermiteInterpolator.java	addSamplePoint	i	int	0	DEF	$ > 1
19346	95	16	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	j < y.$.length
19346	95	16	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < y.length
19346	95	16	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	j < $.length
19347	104	12	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < n
19347	104	12	HermiteInterpolator.java	addSamplePoint	n	int	0	NIL-FOR	j < $
3908	107	16	HermiteInterpolator.java	addSamplePoint	inv	double	0	ZeroException	Double.isInfinite($)
19348	110	16	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	k < y.$.length
19348	110	16	HermiteInterpolator.java	addSamplePoint	k	int	0	NIL-FOR	$ < y.length
19348	110	16	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	k < $.length
19349	139	8	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < polynomials.$.length
19349	139	8	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < polynomials.length
19349	139	8	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	i < $.length
19350	145	8	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
19350	145	8	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < topDiagonal.size()
19351	147	12	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	k < polynomials.$.length
19351	147	12	HermiteInterpolator.java	getPolynomials	k	int	0	NIL-FOR	$ < polynomials.length
19351	147	12	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	k < $.length
19352	176	8	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
19352	176	8	HermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
19353	178	12	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	k < value.$.length
19353	178	12	HermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
19353	178	12	HermiteInterpolator.java	value	value	double[]	0	NIL-FOR	k < $.length
19354	209	8	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
19354	209	8	HermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
19355	211	12	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	k < value.$.length
19355	211	12	HermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
19355	211	12	HermiteInterpolator.java	value	value	DerivativeStructure[]	0	NIL-FOR	k < $.length
3909	227	8	HermiteInterpolator.java	checkInterpolation	THIS	HermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
1390	61	8	HessenbergTransformer.java	HessenbergTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1391	84	8	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.cachedP == null
17572	89	12	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ < n
17572	89	12	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	i < $
17573	90	16	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ < n
17573	90	16	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	j < $
17574	95	12	HessenbergTransformer.java	getP	m	int	0	NIL-FOR	$ >= 1
1392	96	16	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.householderVectors[m][m - 1] != 0.0
1392	96	16	HessenbergTransformer.java	getP	m	int	0	DEF	householderVectors[$][$ - 1] != 0.0
17575	97	20	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
17575	97	20	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
17576	101	20	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ <= high
17576	101	20	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	j <= $
17577	104	24	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
17577	104	24	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
17578	111	24	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
17578	111	24	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
1393	130	8	HessenbergTransformer.java	getPT	THIS	HessenbergTransformer	0	DEF	$.cachedPt == null
1394	144	8	HessenbergTransformer.java	getH	THIS	HessenbergTransformer	0	DEF	$.cachedH == null
17579	147	12	HessenbergTransformer.java	getH	i	int	0	NIL-FOR	$ < m
17579	147	12	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	i < $
1395	148	16	HessenbergTransformer.java	getH	i	int	0	DEF	$ > 0
17580	154	16	HessenbergTransformer.java	getH	j	int	0	NIL-FOR	$ < m
17580	154	16	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	j < $
17581	184	8	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	$ <= high - 1
17581	184	8	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	m <= $ - 1
17582	187	12	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
17582	187	12	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
1396	191	12	HessenbergTransformer.java	transform	scale	double	0	DEF	Precision.equals($, 0)
17583	194	16	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
17583	194	16	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
17584	206	16	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ < n
17584	206	16	HessenbergTransformer.java	transform	n	int	0	NIL-FOR	j < $
17585	208	20	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
17585	208	20	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
17586	212	20	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
17586	212	20	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
17587	217	16	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
17587	217	16	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
17588	219	20	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ >= m
17588	219	20	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	j >= $
17589	223	20	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ <= high
17589	223	20	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	j <= $
19241	117	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < $.mainSetDimension
19241	117	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
19242	119	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < STATIC_E.$.length
19242	119	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < STATIC_E.length
3480	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	1	DEF	$.previousState != null
3480	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
19239	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19239	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
19240	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19240	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1130	86	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NotStrictlyPositiveException	$ <= 0
1131	90	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NotPositiveException	$ < 0
1132	94	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NotPositiveException	$ < 0
1133	99	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	numberOfSuccesses > $
1133	99	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NumberIsTooLargeException	$ > populationSize
1134	103	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	sampleSize > $
1134	103	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NumberIsTooLargeException	$ > populationSize
1135	118	8	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
1135	118	8	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
1136	120	15	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
1136	120	15	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
1137	199	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x < $[0]
1137	199	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x > $[1]
1137	199	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ < domain[0]
1137	199	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ > domain[1]
1138	228	8	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x <= $[0]
1138	228	8	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ <= domain[0]
1139	230	15	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
1139	230	15	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
17334	254	8	HypergeometricDistribution.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
17334	254	8	HypergeometricDistribution.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
1140	279	8	HypergeometricDistribution.java	getNumericalVariance	THIS	HypergeometricDistribution	0	DEF	$.numericalVarianceIsCalculated
3116	121	8	ISAACRandom.java	setSeed	seed	int[]	0	RET	$ == null
3117	128	8	ISAACRandom.java	setSeed	seedLen	int	0	DEF	$ < rslLen
3117	128	8	ISAACRandom.java	setSeed	rslLen	int	0	DEF	seedLen < $
18999	129	12	ISAACRandom.java	setSeed	j	int	0	NIL-FOR	$ < rslLen
18999	129	12	ISAACRandom.java	setSeed	rslLen	int	0	NIL-FOR	j < $
3118	140	8	ISAACRandom.java	next	THIS	ISAACRandom	0	DEF	$.count < 0
19000	152	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacI < H_SIZE
19001	156	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacJ < H_SIZE
19002	193	8	ISAACRandom.java	initState	THIS	ISAACRandom	0	NIL-FOR	j < $.arr.$.length
19002	193	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < arr.length
19003	196	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < 4
19004	200	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
19005	213	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
188	81	8	Incrementor.java	Incrementor	cb	MaxCountExceededCallback	0	NullArgumentException	$ == null
17248	136	8	Incrementor.java	incrementCount	i	int	0	NIL-FOR	$ < value
17248	136	8	Incrementor.java	incrementCount	value	int	0	NIL-FOR	i < $
189	155	8	Incrementor.java	incrementCount	THIS	Incrementor	0	DEF	++$.count > $.maximalCount
803	121	8	Interval.java	checkPoint	THIS	Interval	1	RET	point > $.upper + tolerance
803	121	8	Interval.java	checkPoint	THIS	Interval	1	RET	point < $.lower - tolerance
803	121	8	Interval.java	checkPoint	point	double	1	RET	$ > upper + tolerance
803	121	8	Interval.java	checkPoint	point	double	1	RET	$ < lower - tolerance
803	121	8	Interval.java	checkPoint	tolerance	double	1	RET	point > upper + $
803	121	8	Interval.java	checkPoint	tolerance	double	1	RET	point < lower - $
804	123	15	Interval.java	checkPoint	THIS	Interval	1	RET	point > $.lower + tolerance
804	123	15	Interval.java	checkPoint	THIS	Interval	1	RET	point < $.upper - tolerance
804	123	15	Interval.java	checkPoint	point	double	1	RET	$ > lower + tolerance
804	123	15	Interval.java	checkPoint	point	double	1	RET	$ < upper - tolerance
804	123	15	Interval.java	checkPoint	tolerance	double	1	RET	point > lower + $
804	123	15	Interval.java	checkPoint	tolerance	double	1	RET	point < upper - $
810	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	$ < 0
810	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	Double.isInfinite($)
811	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
811	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
812	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
812	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
813	139	8	IntervalsSet.java	computeGeometricalProperties	THIS	IntervalsSet	1	DEF	$.getTree(false).getCut() == null
814	150	12	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	Double.isInfinite($)
815	152	19	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	$ >= Precision.SAFE_MIN
17288	169	8	IntervalsSet.java	getInf	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
17289	186	8	IntervalsSet.java	getSup	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
816	224	8	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	1	DEF	$.getCut() == null
817	225	12	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	0	DEF	(Boolean) $.getAttribute()
818	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(low, loc) == $.Location.INSIDE
818	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(high, loc) == $.Location.INSIDE
818	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(low, $) == Location.INSIDE
818	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(high, $) == Location.INSIDE
818	241	12	IntervalsSet.java	recurseList	low	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
818	241	12	IntervalsSet.java	recurseList	high	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
4238	68	8	IterativeLegendreGaussIntegrator.java	IterativeLegendreGaussIntegrator	n	int	0	NotStrictlyPositiveException	$ <= 0
4239	129	12	IterativeLegendreGaussIntegrator.java	doIntegrate	THIS	IterativeLegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
4239	129	12	IterativeLegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
4239	129	12	IterativeLegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
19578	165	8	IterativeLegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
19578	165	8	IterativeLegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
1353	81	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != $.getColumnDimension()
1354	85	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	b.getDimension() != $.getRowDimension()
1354	85	8	IterativeLinearSolver.java	checkParameters	b	RealVector	0	DimensionMismatchException	$.getDimension() != a.getRowDimension()
1355	89	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	x0.getDimension() != $.getColumnDimension()
1355	89	8	IterativeLinearSolver.java	checkParameters	x0	RealVector	0	DimensionMismatchException	$.getDimension() != a.getColumnDimension()
1322	63	8	JacobiPreconditioner.java	create	n	int	0	NonSquareOperatorException	a.getRowDimension() != $
1322	63	8	JacobiPreconditioner.java	create	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != n
1323	67	8	JacobiPreconditioner.java	create	a	RealLinearOperator	1	DEF	$ instanceof AbstractRealMatrix
17503	69	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
17503	69	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
17504	74	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
17504	74	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
19448	48	8	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	i < point.$.length
19448	48	8	JacobianFunction.java	value	i	int	0	NIL-FOR	$ < point.length
19448	48	8	JacobianFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
19449	58	8	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	i < dsY.$.length
19449	58	8	JacobianFunction.java	value	i	int	0	NIL-FOR	$ < dsY.length
19449	58	8	JacobianFunction.java	value	dsY	DerivativeStructure[]	0	NIL-FOR	i < $.length
19450	59	12	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	j < point.$.length
19450	59	12	JacobianFunction.java	value	j	int	0	NIL-FOR	$ < point.length
19450	59	12	JacobianFunction.java	value	point	double[]	0	NIL-FOR	j < $.length
3508	133	8	JacobianMatrices.java	JacobianMatrices	parameters	String	1	DEF	$ == null
19247	138	12	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < parameters.$.length
19247	138	12	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < parameters.length
19247	138	12	JacobianMatrices.java	JacobianMatrices	parameters	String	0	NIL-FOR	i < $.length
19248	150	8	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
19248	150	8	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < stateDim
3509	171	8	JacobianMatrices.java	registerVariationalEquations	ode	FirstOrderDifferentialEquations	0	MismatchedEquations	expandable.getPrimary() != $
3509	171	8	JacobianMatrices.java	registerVariationalEquations	expandable	ExpandableStatefulODE	0	MismatchedEquations	$.getPrimary() != ode
3510	217	12	JacobianMatrices.java	setParameterStep	THIS	JacobianMatrices	0	RET	parameter.equals($.param.getParameterName())
3510	217	12	JacobianMatrices.java	setParameterStep	parameter	String	0	RET	$.equals(param.getParameterName())
3511	250	8	JacobianMatrices.java	setInitialMainStateJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
3512	275	12	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	RET	pName.equals($.param.getParameterName())
3512	275	12	JacobianMatrices.java	setInitialParameterJacobian	pName	String	0	RET	$.equals(param.getParameterName())
3513	277	16	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
19249	298	8	JacobianMatrices.java	getCurrentMainSetJacobian	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
19249	298	8	JacobianMatrices.java	getCurrentMainSetJacobian	i	int	0	NIL-FOR	$ < stateDim
3514	316	12	JacobianMatrices.java	getCurrentParameterJacobian	THIS	JacobianMatrices	0	RET	$.param.getParameterName().equals(pName)
3514	316	12	JacobianMatrices.java	getCurrentParameterJacobian	pName	String	0	RET	param.getParameterName().equals($)
3515	333	8	JacobianMatrices.java	checkDimension	arrayDimension	int	0	DimensionMismatchException	$ != expected
3515	333	8	JacobianMatrices.java	checkDimension	expected	int	0	DimensionMismatchException	arrayDimension != $
3113	104	12	JacobianMultivariateVectorOptimizer.java	parseOptimizationData	THIS	JacobianMultivariateVectorOptimizer	0	DEF	$.data instanceof ModelFunctionJacobian
18571	110	8	KMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
18571	110	8	KMeansPlusPlusClusterer.java	cluster	numTrials	int	0	NIL-FOR	i < $
2448	118	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2449	131	12	KMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
2449	131	12	KMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
2450	165	8	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
2450	165	8	KMeansPlusPlusClusterer.java	cluster	k	int	0	NumberIsTooSmallException	points.size() < $
18572	179	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
18572	179	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
2451	184	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
2452	209	12	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
2452	209	12	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
2453	232	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
2453	232	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
2453	232	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
18573	286	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
18573	286	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2454	287	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
2454	287	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
18574	293	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
18574	293	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
18575	299	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
18575	299	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2455	300	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2455	300	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
18576	315	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
18576	315	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2456	316	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2456	316	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2457	318	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
2457	318	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
2458	328	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
18577	329	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
2459	330	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2459	330	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2460	338	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
2461	347	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	DEF	$.size() < k
2461	347	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	DEF	resultSet.size() < $
18578	350	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
18578	350	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
2462	352	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
2462	352	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
2463	355	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
2463	355	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
2463	355	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
2464	386	12	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2465	397	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
2465	397	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
2466	406	8	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
2467	433	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
2467	433	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
2468	441	8	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
18579	468	12	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
18579	468	12	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
2469	470	16	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
2469	470	16	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
2470	480	8	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster<T>	0	ConvergenceException	$ == null
2471	503	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
2471	503	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
0	136	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getControlMatrix() == null
1	156	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialStateEstimate() == null
2	162	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	DimensionMismatchException	$.transitionMatrix.getColumnDimension() != $.stateEstimation.getDimension()
3	169	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialErrorCovariance() == null
4	178	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	NonSquareMatrixException	$.transitionMatrix.isSquare()
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() > 0
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() != 1
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix != null
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() > 0
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() != $.transitionMatrix.getRowDimension()
6	199	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.measurementMatrix.getColumnDimension() != $.transitionMatrix.getRowDimension()
7	207	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	measNoise.getRowDimension() != $.measurementMatrix.getRowDimension()
7	207	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != measurementMatrix.getRowDimension()
7	207	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
8	298	8	KalmanFilter.java	predict	THIS	KalmanFilter	0	DimensionMismatchException	u.getDimension() != $.controlMatrix.getColumnDimension()
8	298	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$ != null
8	298	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$.getDimension() != controlMatrix.getColumnDimension()
9	309	8	KalmanFilter.java	predict	u	RealVector	0	DEF	$ != null
10	354	8	KalmanFilter.java	correct	THIS	KalmanFilter	0	DimensionMismatchException	z.getDimension() != $.measurementMatrix.getRowDimension()
10	354	8	KalmanFilter.java	correct	z	RealVector	0	DimensionMismatchException	$.getDimension() != measurementMatrix.getRowDimension()
1260	86	8	KolmogorovSmirnovDistribution.java	KolmogorovSmirnovDistribution	n	int	0	NotStrictlyPositiveException	$ <= 0
1261	154	8	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	d <= $
1261	154	8	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninvhalf
1262	158	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	d <= $
1262	158	15	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	$ < d
1262	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninv
1262	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	ninvhalf < $
17364	164	12	KolmogorovSmirnovDistribution.java	cdf	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
17364	164	12	KolmogorovSmirnovDistribution.java	cdf	i	int	0	NIL-FOR	$ <= n
1263	170	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	1 - $ <= d
1263	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	1 - ninv <= $
1263	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ < 1
1264	174	15	KolmogorovSmirnovDistribution.java	cdf	d	double	0	RET	1 <= $
17365	203	8	KolmogorovSmirnovDistribution.java	exactK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
17365	203	8	KolmogorovSmirnovDistribution.java	exactK	i	int	0	NIL-FOR	$ <= n
17366	238	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ < m
17366	238	8	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	i < $
17367	239	12	KolmogorovSmirnovDistribution.java	roundedK	j	int	0	NIL-FOR	$ < m
17367	239	12	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	j < $
17368	248	8	KolmogorovSmirnovDistribution.java	roundedK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
17368	248	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ <= n
1265	274	8	KolmogorovSmirnovDistribution.java	createH	hDouble	double	0	NumberIsTooLargeException	$ >= 1
17369	295	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
17369	295	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
17370	296	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < m
17370	296	12	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	j < $
1266	297	16	KolmogorovSmirnovDistribution.java	createH	j	int	1	DEF	i - $ + 1 < 0
1266	297	16	KolmogorovSmirnovDistribution.java	createH	i	int	1	DEF	$ - j + 1 < 0
17371	311	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
17371	311	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
17372	318	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
17372	318	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
1267	328	8	KolmogorovSmirnovDistribution.java	createH	h	BigFraction	0	DEF	$.compareTo(BigFraction.ONE_HALF) == 1
17373	343	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
17373	343	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
17374	344	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < i + 1
17374	344	12	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	j < $ + 1
1268	345	16	KolmogorovSmirnovDistribution.java	createH	j	int	0	DEF	i - $ + 1 > 0
1268	345	16	KolmogorovSmirnovDistribution.java	createH	i	int	0	DEF	$ - j + 1 > 0
17375	346	20	KolmogorovSmirnovDistribution.java	createH	g	int	0	NIL-FOR	$ <= i - j + 1
17375	346	20	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	g <= i - $ + 1
17375	346	20	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	g <= $ - j + 1
2294	101	8	Kurtosis.java	increment	THIS	Kurtosis	0	DEF	$.incMoment
2295	112	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
2296	114	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
2296	114	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
2297	132	8	Kurtosis.java	clear	THIS	Kurtosis	0	DEF	$.incMoment
2298	167	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
2298	167	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2298	167	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
2298	167	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
2298	167	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
18530	178	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18530	178	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18530	178	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1295	87	8	LUDecomposition.java	LUDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
17381	100	8	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
17381	100	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
17382	107	8	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	$ < m
17382	107	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	col < $
17383	110	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < col
17383	110	12	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	row < $
17384	113	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < row
17384	113	16	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	i < $
17385	122	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
17385	122	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
17386	125	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < col
17386	125	16	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	i < $
1296	131	16	LUDecomposition.java	LUDecomposition	sum	double	0	DEF	FastMath.abs($) > largest
1296	131	16	LUDecomposition.java	LUDecomposition	largest	double	0	DEF	FastMath.abs(sum) > $
1297	138	12	LUDecomposition.java	LUDecomposition	THIS	LUDecomposition	0	RET	FastMath.abs($.lu[max][col]) < singularityThreshold
1297	138	12	LUDecomposition.java	LUDecomposition	max	int	0	RET	FastMath.abs(lu[$][col]) < singularityThreshold
1297	138	12	LUDecomposition.java	LUDecomposition	col	int	0	RET	FastMath.abs(lu[max][$]) < singularityThreshold
1297	138	12	LUDecomposition.java	LUDecomposition	singularityThreshold	double	0	RET	FastMath.abs(lu[max][col]) < $
1298	144	12	LUDecomposition.java	LUDecomposition	max	int	0	DEF	$ != col
1298	144	12	LUDecomposition.java	LUDecomposition	col	int	0	DEF	max != $
17387	148	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < m
17387	148	16	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	i < $
17388	161	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
17388	161	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
1299	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.singular
1299	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.cachedL == null
17389	176	12	LUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
17389	176	12	LUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
17390	178	16	LUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
17390	178	16	LUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1300	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.singular
1300	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.cachedU == null
17391	196	12	LUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
17391	196	12	LUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
17392	198	16	LUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
17392	198	16	LUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1301	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.singular
1301	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.cachedP == null
17393	219	12	LUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
17393	219	12	LUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1302	240	8	LUDecomposition.java	getDeterminant	THIS	LUDecomposition	1	RET	$.singular
17394	245	12	LUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
17394	245	12	LUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
4077	105	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
4077	105	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4078	111	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
4078	111	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4079	116	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
4079	116	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
4080	122	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
4080	122	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4081	127	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
4081	127	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
4082	161	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	1	RET	$.complexSolver.isRoot(lo, hi, z)
4082	161	8	LaguerreSolver.java	laguerre	z	Complex	1	RET	complexSolver.isRoot(lo, hi, $)
4082	161	8	LaguerreSolver.java	laguerre	lo	double	1	RET	complexSolver.isRoot($, hi, z)
4082	161	8	LaguerreSolver.java	laguerre	hi	double	1	RET	complexSolver.isRoot(lo, $, z)
19446	167	12	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
19446	167	12	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < root.length
19446	167	12	LaguerreSolver.java	laguerre	root	Complex[]	0	NIL-FOR	i < $.length
4083	168	16	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	DEF	$.complexSolver.isRoot(lo, hi, root[i])
4083	168	16	LaguerreSolver.java	laguerre	i	int	0	DEF	complexSolver.isRoot(lo, hi, root[$])
4083	168	16	LaguerreSolver.java	laguerre	root	Complex[]	0	DEF	complexSolver.isRoot(lo, hi, $[i])
4083	168	16	LaguerreSolver.java	laguerre	lo	double	0	DEF	complexSolver.isRoot($, hi, root[i])
4083	168	16	LaguerreSolver.java	laguerre	hi	double	0	DEF	complexSolver.isRoot(lo, $, root[i])
2797	114	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
2797	114	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
2797	114	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
2798	148	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
2798	148	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
2798	148	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
2799	161	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
2799	161	8	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
18718	164	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
18718	164	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
18718	164	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
2800	170	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
18719	171	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
18719	171	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
18719	171	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
2801	175	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
1908	114	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
1908	114	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
1908	114	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
1909	144	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
1909	144	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
1909	144	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
1910	157	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
1910	157	8	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
18220	160	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
18220	160	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
18220	160	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1911	166	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
18221	167	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
18221	167	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
18221	167	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1912	171	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
4247	224	12	LegendreGaussIntegrator.java	doIntegrate	THIS	LegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
4247	224	12	LegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
4247	224	12	LegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
19580	255	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
19580	255	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
19581	256	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
19581	256	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
4225	68	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
19565	85	8	LegendreHighPrecisionRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
19565	85	8	LegendreHighPrecisionRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
19566	98	12	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
19566	98	12	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
19567	136	12	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
19568	142	16	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
19568	142	16	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4226	159	16	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	DEF	$
4227	160	20	LegendreHighPrecisionRuleFactory.java	computeRule	pa	BigDecimal	1	DEF	$.signum() * pc.signum() <= 0
4227	160	20	LegendreHighPrecisionRuleFactory.java	computeRule	pc	BigDecimal	1	DEF	pa.signum() * $.signum() <= 0
4228	192	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 != 0
19569	194	12	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
19569	194	12	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4230	39	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
19571	56	8	LegendreRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
19571	56	8	LegendreRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
19572	69	12	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
19572	69	12	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
19573	89	12	LegendreRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
19574	93	16	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
19574	93	16	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4231	100	16	LegendreRuleFactory.java	computeRule	done	boolean	0	DEF	$
4232	101	20	LegendreRuleFactory.java	computeRule	pa	double	1	DEF	$ * pc <= 0
4232	101	20	LegendreRuleFactory.java	computeRule	pc	double	1	DEF	pa * $ <= 0
4233	127	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 != 0
19575	129	12	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
19575	129	12	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
18934	332	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
18934	332	12	LevenbergMarquardtOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
18935	341	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
18935	341	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
3071	346	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
18936	350	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
18936	350	16	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
3072	352	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
3073	367	12	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	$ != 0
18937	368	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18937	368	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3074	371	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
18938	373	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
18938	373	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
3075	380	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
3075	380	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
18939	387	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
18939	387	12	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
18940	392	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
18941	395	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18941	395	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
18942	412	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18942	412	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3076	421	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
3077	433	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost < $
3077	433	16	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ < previousCost
18943	440	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18943	440	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
18944	444	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
18944	444	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
18945	449	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18945	449	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3078	462	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
3079	465	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
3079	465	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost >= $
3079	465	24	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ >= previousCost
3080	470	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
3080	470	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
3081	476	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
18946	480	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
18946	480	20	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
3082	487	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$ != null
3083	489	24	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	checker.converged($.getIterations(), previous, current)
3083	489	24	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(getIterations(), $, current)
3083	489	24	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(getIterations(), previous, $)
3083	489	24	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$.converged(getIterations(), previous, current)
18947	497	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18947	497	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3084	512	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
3084	512	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
3084	512	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
3084	512	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
3084	512	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
3084	512	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
3084	512	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
3084	512	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
3085	522	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= 2.2204e-16
3085	522	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= 2.2204e-16
3085	522	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
3086	525	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= 2.2204e-16 * xNorm
3086	525	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= 2.2204e-16 * $
3087	528	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= 2.2204e-16
18948	564	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
18948	564	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
18949	567	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < nC
18949	567	8	LevenbergMarquardtOptimizer.java	determineLMParameter	nC	int	0	NIL-FOR	j < $
18950	570	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
18951	573	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
18951	573	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
18952	582	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18952	582	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
3088	590	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
3088	590	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
3089	600	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
18953	601	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18953	601	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
18954	606	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18954	606	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
18955	609	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
18955	609	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
18956	621	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18956	621	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
18957	624	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
18957	624	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
3090	632	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
3091	640	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
18958	644	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
3092	647	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
18959	651	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18959	651	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
18960	658	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18960	658	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
3093	670	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
3093	670	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
3093	670	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
3093	670	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
3093	670	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
3093	670	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
18961	676	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18961	676	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
18962	680	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18962	680	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
18963	684	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
18963	684	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
18964	689	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18964	689	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
3094	696	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
3095	698	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
18965	733	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18965	733	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
18966	735	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
18966	735	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
18967	743	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18967	743	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
3096	749	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
18968	758	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
18968	758	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
3097	763	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
3097	763	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
3098	768	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
3098	768	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
3098	768	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
18969	786	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
18969	786	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
18970	804	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18970	804	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
3099	805	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
3099	805	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
3099	805	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
3099	805	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
3100	808	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
3100	808	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
3101	812	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
18971	813	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
18972	816	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
18972	816	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
18973	824	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
18973	824	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
18974	862	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
18974	862	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
18975	865	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nR
18975	865	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	i < $
18976	873	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
18976	873	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
18977	878	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nC
18977	878	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	i < $
18978	880	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
18978	880	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
3102	884	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
3102	884	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
3103	888	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
3103	888	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
3104	893	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
3104	893	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
18979	912	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
18980	914	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
18980	914	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
18981	918	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
18981	918	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
18982	935	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < nC
18982	935	8	LevenbergMarquardtOptimizer.java	qTy	nC	int	0	NIL-FOR	k < $
18983	938	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
18983	938	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
18984	942	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
18984	942	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
3105	953	8	LevenbergMarquardtOptimizer.java	checkParameters	THIS	LevenbergMarquardtOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
3105	953	8	LevenbergMarquardtOptimizer.java	checkParameters	THIS	LevenbergMarquardtOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
18222	326	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
18222	326	12	LevenbergMarquardtOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
18223	335	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
18223	335	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
1913	340	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
18224	344	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
18224	344	16	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
1914	346	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1915	361	12	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	$ != 0
18225	362	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18225	362	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1916	365	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
18226	367	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
18226	367	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1917	374	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1917	374	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
18227	383	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
18227	383	12	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
18228	388	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
18229	391	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18229	391	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
18230	408	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18230	408	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1918	417	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1919	429	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost < $
1919	429	16	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ < previousCost
18231	436	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18231	436	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
18232	440	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
18232	440	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
18233	445	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18233	445	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1920	458	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1921	461	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1921	461	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost >= $
1921	461	24	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ >= previousCost
1922	466	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1922	466	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1923	472	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
18234	476	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
18234	476	20	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
1924	483	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$ != null
1925	485	24	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(iter, $, current)
1925	485	24	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(iter, previous, $)
1925	485	24	LevenbergMarquardtOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1925	485	24	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$.converged(iter, previous, current)
18235	495	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18235	495	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1926	510	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1926	510	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1926	510	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
1926	510	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
1926	510	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1926	510	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1926	510	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1926	510	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1927	522	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= 2.2204e-16
1927	522	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= 2.2204e-16
1927	522	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
1928	525	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= 2.2204e-16 * xNorm
1928	525	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= 2.2204e-16 * $
1929	528	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= 2.2204e-16
18236	564	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
18236	564	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
18237	567	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < nC
18237	567	8	LevenbergMarquardtOptimizer.java	determineLMParameter	nC	int	0	NIL-FOR	j < $
18238	570	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
18239	573	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
18239	573	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
18240	582	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18240	582	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1930	590	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1930	590	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1931	600	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
18241	601	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18241	601	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
18242	606	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18242	606	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
18243	609	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
18243	609	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
18244	621	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18244	621	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
18245	624	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
18245	624	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1932	632	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1933	640	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
18246	644	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1934	647	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
18247	651	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18247	651	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
18248	658	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18248	658	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1935	670	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1935	670	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1935	670	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
1935	670	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1935	670	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1935	670	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
18249	676	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18249	676	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
18250	680	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18250	680	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
18251	684	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
18251	684	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
18252	689	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18252	689	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1936	696	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1937	698	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
18253	733	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18253	733	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
18254	735	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
18254	735	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
18255	743	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18255	743	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1938	749	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
18256	758	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
18256	758	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1939	763	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1939	763	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1940	768	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
1940	768	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
1940	768	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
18257	786	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
18257	786	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
18258	804	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
18258	804	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1941	805	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1941	805	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1941	805	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1941	805	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1942	808	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1942	808	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1943	812	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
18259	813	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
18260	816	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
18260	816	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
18261	824	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
18261	824	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
18262	862	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
18262	862	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
18263	865	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nR
18263	865	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	i < $
18264	873	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
18264	873	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
18265	878	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nC
18265	878	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	i < $
18266	880	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
18266	880	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
1944	884	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
1944	884	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
1945	888	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1945	888	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1946	893	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
1946	893	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
18267	912	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
18268	914	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
18268	914	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
18269	918	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
18269	918	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
18270	935	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < nC
18270	935	8	LevenbergMarquardtOptimizer.java	qTy	nC	int	0	NIL-FOR	k < $
18271	938	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
18271	938	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
18272	942	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
18272	942	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
1203	73	8	LevyDistribution.java	density	THIS	LevyDistribution	0	RET	x < $.mu
1203	73	8	LevyDistribution.java	density	x	double	0	RET	$ < mu
1204	91	8	LevyDistribution.java	cumulativeProbability	THIS	LevyDistribution	0	RET	x < $.mu
1204	91	8	LevyDistribution.java	cumulativeProbability	x	double	0	RET	$ < mu
1205	100	8	LevyDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1205	100	8	LevyDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
709	76	8	Line.java	reset	norm2	double	0	MathIllegalArgumentException	$ == 0.0
710	177	8	Line.java	distance	n	double	0	RET	$ < Precision.SAFE_MIN
711	197	8	Line.java	closestPoint	n	double	0	RET	$ < Precision.EPSILON
821	132	8	Line.java	reset	d	double	1	DEF	$ == 0.0
822	159	8	Line.java	revertSelf	THIS	Line	1	DEF	$.angle < FastMath.PI
823	199	8	Line.java	intersection	d	double	0	RET	FastMath.abs($) < 1.0e-10
18688	124	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
18688	124	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
18688	124	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
2724	188	8	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
2724	188	8	LinearConstraint.java	equals	other	Object	0	RET	this == $
2725	191	8	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
18196	130	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
18196	130	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
18196	130	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
1857	192	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
1857	192	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
1858	196	6	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
3872	50	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3872	50	8	LinearInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3872	50	8	LinearInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3873	54	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	NumberIsTooSmallException	x.$.length < 2
3873	54	8	LinearInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 2
19331	66	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
19331	66	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
19332	72	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
19332	72	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
2741	111	8	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
2741	111	8	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
2742	114	8	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
1875	109	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
1875	109	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
1876	113	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
2743	118	12	LinearOptimizer.java	parseOptimizationData	THIS	LinearOptimizer	0	DEF	$.data instanceof LinearObjectiveFunction
2744	122	12	LinearOptimizer.java	parseOptimizationData	THIS	LinearOptimizer	0	DEF	$.data instanceof LinearConstraintSet
2745	126	12	LinearOptimizer.java	parseOptimizationData	THIS	LinearOptimizer	0	DEF	$.data instanceof NonNegativeConstraint
3217	69	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
3218	72	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ <= 0
3219	75	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
3219	75	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NumberIsTooLargeException	chromosomes.size() > $
3220	99	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
3221	102	8	ListPopulation.java	setChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	chromosomes.size() > $.populationLimit
3221	102	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
3222	118	8	ListPopulation.java	addChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() + chromosomeColl.size() > $.populationLimit
3222	118	8	ListPopulation.java	addChromosomes	chromosomeColl	Collection<Chromosome>	0	NumberIsTooLargeException	chromosomes.size() + $.size() > populationLimit
3223	150	8	ListPopulation.java	addChromosome	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() >= $.populationLimit
3224	165	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
3224	165	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
3225	189	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NotPositiveException	$ <= 0
3226	192	8	ListPopulation.java	setPopulationLimit	THIS	ListPopulation	0	NumberIsTooSmallException	populationLimit < $.chromosomes.size()
3226	192	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NumberIsTooSmallException	$ < chromosomes.size()
3956	151	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ < 0
3956	151	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ > 1
3957	156	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	NotPositiveException	$ < 0
3958	221	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
3958	221	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
3958	221	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3959	227	8	LoessInterpolator.java	smooth	n	int	0	NoDataException	$ == 0
3960	237	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
3961	241	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
3962	247	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	NumberIsTooSmallException	$ < 2
19413	264	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
19413	264	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
19414	267	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
19414	267	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
3963	272	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
3964	282	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
3964	282	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
3964	282	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
3964	282	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
19415	301	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
19415	301	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
3965	320	16	LoessInterpolator.java	smooth	THIS	LoessInterpolator	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < $.accuracy
3965	320	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
3965	320	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
3966	334	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
3966	334	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
3967	347	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	FastMath.abs(medianResidual) < $.accuracy
3967	347	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	FastMath.abs($) < accuracy
19416	351	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
19416	351	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
3968	353	16	LoessInterpolator.java	smooth	arg	double	1	DEF	$ >= 1
3969	388	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
3969	388	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
3969	388	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3970	422	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	nextRight < xval.$.length
3970	422	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[nextRight] - xval[i] < xval[i] - xval[$]
3970	422	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	xval[$] - xval[i] < xval[i] - xval[left]
3970	422	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	$ < xval.length
3970	422	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[nextRight] - $[i] < $[i] - $[left]
3970	422	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	nextRight < $.length
3970	422	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[nextRight] - xval[$] < xval[$] - xval[left]
19417	439	8	LoessInterpolator.java	nextNonzero	THIS	LoessInterpolator	0	NIL-WHILE	j < weights.$.length
19417	439	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	$ < weights.length
19417	439	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	weights[$] == 0
19417	439	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	j < $.length
19417	439	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	$[j] == 0
3971	455	8	LoessInterpolator.java	tricube	absX	double	0	RET	$ >= 1.0
19418	470	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
19418	470	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
19418	470	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
1282	132	8	LogNormalDistribution.java	LogNormalDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1283	171	8	LogNormalDistribution.java	density	x	double	0	RET	$ <= 0
1284	195	8	LogNormalDistribution.java	cumulativeProbability	x	double	0	RET	$ <= 0
1285	199	8	LogNormalDistribution.java	cumulativeProbability	THIS	LogNormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.shape
1285	199	8	LogNormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * shape
1286	221	8	LogNormalDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1286	221	8	LogNormalDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
1287	225	8	LogNormalDistribution.java	probability	x0	double	0	RET	$ <= 0
1287	225	8	LogNormalDistribution.java	probability	x1	double	0	RET	$ <= 0
3992	72	8	Logistic.java	Logistic	n	double	0	NotStrictlyPositiveException	$ <= 0
3977	162	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
3977	162	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
3977	162	8	Logit.java	value	lo	double	0	OutOfRangeException	x < $
3977	162	8	Logit.java	value	hi	double	0	OutOfRangeException	x > $
3978	175	8	Logit.java	value	THIS	Logit	0	OutOfRangeException	x < $.lo
3978	175	8	Logit.java	value	THIS	Logit	0	OutOfRangeException	x > $.hi
3978	175	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
3978	175	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
3979	183	8	Logit.java	value	f	double[]	1	DEF	Double.isInfinite($[0])
3980	185	12	Logit.java	value	THIS	Logit	0	DEF	f.$.length > 1
3980	185	12	Logit.java	value	f	double[]	0	DEF	$.length > 1
19428	193	12	Logit.java	value	THIS	Logit	0	NIL-FOR	i < f.$.length
19428	193	12	Logit.java	value	i	int	0	NIL-FOR	$ < f.length
19428	193	12	Logit.java	value	f	double[]	0	NIL-FOR	i < $.length
19429	204	12	Logit.java	value	THIS	Logit	0	NIL-FOR	i < f.$.length
19429	204	12	Logit.java	value	i	int	0	NIL-FOR	$ < f.length
19429	204	12	Logit.java	value	f	double[]	0	NIL-FOR	i < $.length
2400	74	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2400	74	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2401	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	x.$.length == 0
2401	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	y.$.length == 0
2401	78	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2401	78	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
18550	140	8	MannWhitneyUTest.java	mannWhitneyU	THIS	MannWhitneyUTest	0	NIL-FOR	i < x.$.length
18550	140	8	MannWhitneyUTest.java	mannWhitneyU	i	int	0	NIL-FOR	$ < x.length
18550	140	8	MannWhitneyUTest.java	mannWhitneyU	x	double[]	0	NIL-FOR	i < $.length
17205	85	8	MathArrays.java	scale	THIS	MathArrays	0	NIL-FOR	i < arr.$.length
17205	85	8	MathArrays.java	scale	i	int	0	NIL-FOR	$ < arr.length
17205	85	8	MathArrays.java	scale	arr	double[]	0	NIL-FOR	i < $.length
17206	100	8	MathArrays.java	scaleInPlace	THIS	MathArrays	0	NIL-FOR	i < arr.$.length
17206	100	8	MathArrays.java	scaleInPlace	i	int	0	NIL-FOR	$ < arr.length
17206	100	8	MathArrays.java	scaleInPlace	arr	double[]	0	NIL-FOR	i < $.length
113	117	8	MathArrays.java	ebeAdd	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
113	117	8	MathArrays.java	ebeAdd	a	double[]	0	DimensionMismatchException	$.length != b.length
113	117	8	MathArrays.java	ebeAdd	b	double[]	0	DimensionMismatchException	a.length != $.length
17207	122	8	MathArrays.java	ebeAdd	THIS	MathArrays	0	NIL-FOR	i < a.$.length
17207	122	8	MathArrays.java	ebeAdd	i	int	0	NIL-FOR	$ < a.length
17207	122	8	MathArrays.java	ebeAdd	a	double[]	0	NIL-FOR	i < $.length
114	139	8	MathArrays.java	ebeSubtract	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
114	139	8	MathArrays.java	ebeSubtract	a	double[]	0	DimensionMismatchException	$.length != b.length
114	139	8	MathArrays.java	ebeSubtract	b	double[]	0	DimensionMismatchException	a.length != $.length
17208	144	8	MathArrays.java	ebeSubtract	THIS	MathArrays	0	NIL-FOR	i < a.$.length
17208	144	8	MathArrays.java	ebeSubtract	i	int	0	NIL-FOR	$ < a.length
17208	144	8	MathArrays.java	ebeSubtract	a	double[]	0	NIL-FOR	i < $.length
115	161	8	MathArrays.java	ebeMultiply	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
115	161	8	MathArrays.java	ebeMultiply	a	double[]	0	DimensionMismatchException	$.length != b.length
115	161	8	MathArrays.java	ebeMultiply	b	double[]	0	DimensionMismatchException	a.length != $.length
17209	166	8	MathArrays.java	ebeMultiply	THIS	MathArrays	0	NIL-FOR	i < a.$.length
17209	166	8	MathArrays.java	ebeMultiply	i	int	0	NIL-FOR	$ < a.length
17209	166	8	MathArrays.java	ebeMultiply	a	double[]	0	NIL-FOR	i < $.length
116	183	8	MathArrays.java	ebeDivide	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
116	183	8	MathArrays.java	ebeDivide	a	double[]	0	DimensionMismatchException	$.length != b.length
116	183	8	MathArrays.java	ebeDivide	b	double[]	0	DimensionMismatchException	a.length != $.length
17210	188	8	MathArrays.java	ebeDivide	THIS	MathArrays	0	NIL-FOR	i < a.$.length
17210	188	8	MathArrays.java	ebeDivide	i	int	0	NIL-FOR	$ < a.length
17210	188	8	MathArrays.java	ebeDivide	a	double[]	0	NIL-FOR	i < $.length
17211	203	8	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
17211	203	8	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
17211	203	8	MathArrays.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
17212	218	6	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
17212	218	6	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
17212	218	6	MathArrays.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
17213	233	8	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
17213	233	8	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
17213	233	8	MathArrays.java	distance	p1	double[]	0	NIL-FOR	i < $.length
17214	249	6	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
17214	249	6	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
17214	249	6	MathArrays.java	distance	p1	int[]	0	NIL-FOR	i < $.length
17215	265	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
17215	265	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
17215	265	8	MathArrays.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
17216	280	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
17216	280	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
17216	280	8	MathArrays.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
17217	310	8	MathArrays.java	isMonotonic	i	int	0	NIL-FOR	$ < max
17217	310	8	MathArrays.java	isMonotonic	max	int	0	NIL-FOR	i < $
117	315	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
118	316	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
119	320	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
120	327	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
121	328	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
122	332	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
17218	378	8	MathArrays.java	checkOrder	max	int	0	NIL-FOR	index < $
17218	378	8	MathArrays.java	checkOrder	index	int	0	NIL-FOR	$ < max
123	381	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
124	382	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] <= $
124	382	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] <= previous
124	382	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] <= previous
125	386	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] < $
125	386	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] < previous
125	386	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] < previous
126	392	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
127	393	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] >= $
127	393	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] >= previous
127	393	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] >= previous
128	397	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] > $
128	397	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] > previous
128	397	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] > previous
129	410	8	MathArrays.java	checkOrder	max	int	0	RET	index == $
129	410	8	MathArrays.java	checkOrder	index	int	0	RET	$ == max
130	416	8	MathArrays.java	checkOrder	abort	boolean	1	NonMonotonicSequenceException	$
17219	459	8	MathArrays.java	checkRectangular	THIS	MathArrays	0	NIL-FOR	i < in.$.length
17219	459	8	MathArrays.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
17219	459	8	MathArrays.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
131	460	12	MathArrays.java	checkRectangular	THIS	MathArrays	0	DimensionMismatchException	in[i].length != in[0].length
131	460	12	MathArrays.java	checkRectangular	i	int	0	DimensionMismatchException	in[$].length != in[0].length
131	460	12	MathArrays.java	checkRectangular	in	long[][]	0	DimensionMismatchException	$[i].length != $[0].length
17220	478	8	MathArrays.java	checkPositive	THIS	MathArrays	0	NIL-FOR	i < in.$.length
17220	478	8	MathArrays.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
17220	478	8	MathArrays.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
132	479	12	MathArrays.java	checkPositive	i	int	0	NotStrictlyPositiveException	in[$] <= 0
132	479	12	MathArrays.java	checkPositive	in	double[]	0	NotStrictlyPositiveException	$[i] <= 0
17221	494	8	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	i < in.$.length
17221	494	8	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
17221	494	8	MathArrays.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
133	495	12	MathArrays.java	checkNonNegative	i	int	0	NotPositiveException	in[$] < 0
133	495	12	MathArrays.java	checkNonNegative	in	long[]	0	NotPositiveException	$[i] < 0
17222	510	8	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	i < in.$.length
17222	510	8	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
17222	510	8	MathArrays.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
17223	511	12	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	j < in[i].length
17223	511	12	MathArrays.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
17223	511	12	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
17223	511	12	MathArrays.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
134	512	16	MathArrays.java	checkNonNegative	j	int	0	NotPositiveException	in[i][$] < 0
134	512	16	MathArrays.java	checkNonNegative	i	int	0	NotPositiveException	in[$][j] < 0
134	512	16	MathArrays.java	checkNonNegative	in	long[][]	0	NotPositiveException	$[i][j] < 0
17224	589	8	MathArrays.java	safeNorm	THIS	MathArrays	0	NIL-FOR	i < v.$.length
17224	589	8	MathArrays.java	safeNorm	i	int	0	NIL-FOR	$ < v.length
17224	589	8	MathArrays.java	safeNorm	v	double[]	0	NIL-FOR	i < $.length
135	591	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ < rdwarf
135	591	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > agiant
135	591	12	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs < $
135	591	12	MathArrays.java	safeNorm	agiant	double	1	DEF	xabs > $
136	592	16	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > rdwarf
136	592	16	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs > $
137	593	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x1max
137	593	20	MathArrays.java	safeNorm	x1max	double	1	DEF	xabs > $
138	602	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x3max
138	602	20	MathArrays.java	safeNorm	x3max	double	1	DEF	xabs > $
139	607	24	MathArrays.java	safeNorm	xabs	double	0	DEF	$ != 0
140	618	8	MathArrays.java	safeNorm	s1	double	1	DEF	$ != 0
141	621	12	MathArrays.java	safeNorm	s2	double	1	DEF	$ == 0
142	624	16	MathArrays.java	safeNorm	s2	double	1	DEF	$ >= x3max
142	624	16	MathArrays.java	safeNorm	x3max	double	1	DEF	s2 >= $
143	676	8	MathArrays.java	sortInPlace	x	double[]	0	NullArgumentException	$ == null
17225	685	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
17225	685	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
17226	687	12	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
17226	687	12	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
144	689	16	MathArrays.java	sortInPlace	y	double[]	0	NullArgumentException	$ == null
145	692	16	MathArrays.java	sortInPlace	THIS	MathArrays	0	DimensionMismatchException	y.$.length != len
145	692	16	MathArrays.java	sortInPlace	y	double[]	0	DimensionMismatchException	$.length != len
145	692	16	MathArrays.java	sortInPlace	len	int	0	DimensionMismatchException	y.length != $
17227	722	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
17227	722	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
17228	726	12	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
17228	726	12	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
146	802	8	MathArrays.java	linearCombination	THIS	MathArrays	0	DimensionMismatchException	len != b.$.length
146	802	8	MathArrays.java	linearCombination	len	int	0	DimensionMismatchException	$ != b.length
146	802	8	MathArrays.java	linearCombination	b	double[]	0	DimensionMismatchException	len != $.length
17229	809	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
17229	809	8	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
17230	835	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < lenMinusOne
17230	835	8	MathArrays.java	linearCombination	lenMinusOne	int	0	NIL-FOR	i < $
147	845	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
17231	849	12	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
17231	849	12	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
148	925	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
149	1022	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
150	1141	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
151	1161	8	MathArrays.java	equals	x	float[]	0	RET	$ == null
151	1161	8	MathArrays.java	equals	y	float[]	0	RET	$ == null
152	1164	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
152	1164	8	MathArrays.java	equals	x	float[]	0	RET	$.length != y.length
152	1164	8	MathArrays.java	equals	y	float[]	0	RET	x.length != $.length
17232	1167	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
17232	1167	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
17232	1167	8	MathArrays.java	equals	x	float[]	0	NIL-FOR	i < $.length
153	1168	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
153	1168	12	MathArrays.java	equals	x	float[]	0	RET	Precision.equals($[i], y[i])
153	1168	12	MathArrays.java	equals	y	float[]	0	RET	Precision.equals(x[i], $[i])
154	1187	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$ == null
154	1187	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	$ == null
155	1190	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
155	1190	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$.length != y.length
155	1190	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	x.length != $.length
17233	1193	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
17233	1193	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
17233	1193	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	NIL-FOR	i < $.length
156	1194	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
156	1194	12	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
156	1194	12	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
157	1212	8	MathArrays.java	equals	x	double[]	0	RET	$ == null
157	1212	8	MathArrays.java	equals	y	double[]	0	RET	$ == null
158	1215	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
158	1215	8	MathArrays.java	equals	x	double[]	0	RET	$.length != y.length
158	1215	8	MathArrays.java	equals	y	double[]	0	RET	x.length != $.length
17234	1218	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
17234	1218	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
17234	1218	8	MathArrays.java	equals	x	double[]	0	NIL-FOR	i < $.length
159	1219	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
159	1219	12	MathArrays.java	equals	x	double[]	0	RET	Precision.equals($[i], y[i])
159	1219	12	MathArrays.java	equals	y	double[]	0	RET	Precision.equals(x[i], $[i])
160	1238	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$ == null
160	1238	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	$ == null
161	1241	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
161	1241	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$.length != y.length
161	1241	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	x.length != $.length
17235	1244	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
17235	1244	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
17235	1244	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	NIL-FOR	i < $.length
162	1245	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
162	1245	12	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
162	1245	12	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
163	1276	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isInfinite($)
164	1279	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isNaN($)
17236	1285	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
17236	1285	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
165	1286	13	MathArrays.java	normalizeArray	i	int	0	MathIllegalArgumentException	Double.isInfinite(values[$])
165	1286	13	MathArrays.java	normalizeArray	values	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
166	1289	13	MathArrays.java	normalizeArray	i	int	0	DEF	Double.isNaN(values[$])
166	1289	13	MathArrays.java	normalizeArray	values	double[]	0	DEF	Double.isNaN($[i])
167	1293	9	MathArrays.java	normalizeArray	sum	double	0	MathArithmeticException	$ == 0
17237	1296	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
17237	1296	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
168	1297	13	MathArrays.java	normalizeArray	i	int	1	DEF	Double.isNaN(values[$])
168	1297	13	MathArrays.java	normalizeArray	values	double[]	1	DEF	Double.isNaN($[i])
169	1336	9	MathArrays.java	buildArray	columns	int	1	DEF	$ < 0
17238	1344	13	MathArrays.java	buildArray	i	int	0	NIL-FOR	$ < rows
17238	1344	13	MathArrays.java	buildArray	rows	int	0	NIL-FOR	i < $
514	129	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ >= 0
514	129	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ < 0
514	129	8	MathUtils.java	copySign	sign	byte	1	RET	$ < 0
514	129	8	MathUtils.java	copySign	sign	byte	1	RET	$ >= 0
515	132	15	MathUtils.java	copySign	magnitude	byte	1	MathArithmeticException	$ == Byte.MIN_VALUE
515	132	15	MathUtils.java	copySign	sign	byte	1	MathArithmeticException	$ >= 0
516	152	8	MathUtils.java	copySign	magnitude	short	1	RET	$ >= 0
516	152	8	MathUtils.java	copySign	magnitude	short	1	RET	$ < 0
516	152	8	MathUtils.java	copySign	sign	short	1	RET	$ < 0
516	152	8	MathUtils.java	copySign	sign	short	1	RET	$ >= 0
517	155	15	MathUtils.java	copySign	magnitude	short	1	MathArithmeticException	$ == Short.MIN_VALUE
517	155	15	MathUtils.java	copySign	sign	short	1	MathArithmeticException	$ >= 0
518	175	8	MathUtils.java	copySign	magnitude	int	1	RET	$ >= 0
518	175	8	MathUtils.java	copySign	magnitude	int	1	RET	$ < 0
518	175	8	MathUtils.java	copySign	sign	int	1	RET	$ >= 0
518	175	8	MathUtils.java	copySign	sign	int	1	RET	$ < 0
519	178	15	MathUtils.java	copySign	magnitude	int	1	MathArithmeticException	$ == Integer.MIN_VALUE
519	178	15	MathUtils.java	copySign	sign	int	1	MathArithmeticException	$ >= 0
520	198	8	MathUtils.java	copySign	magnitude	long	1	RET	$ >= 0
520	198	8	MathUtils.java	copySign	magnitude	long	1	RET	$ < 0
520	198	8	MathUtils.java	copySign	sign	long	1	RET	$ >= 0
520	198	8	MathUtils.java	copySign	sign	long	1	RET	$ < 0
521	201	15	MathUtils.java	copySign	magnitude	long	1	MathArithmeticException	$ == Long.MIN_VALUE
521	201	15	MathUtils.java	copySign	sign	long	1	MathArithmeticException	$ >= 0
522	217	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
522	217	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
17261	231	8	MathUtils.java	checkFinite	THIS	MathUtils	0	NIL-FOR	i < val.$.length
17261	231	8	MathUtils.java	checkFinite	i	int	0	NIL-FOR	$ < val.length
17261	231	8	MathUtils.java	checkFinite	val	double[]	0	NIL-FOR	i < $.length
523	233	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
523	233	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
524	251	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
525	264	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
1578	130	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$[0] == null
1578	130	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$ == null
1579	159	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$ == null
1579	159	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$[0] == null
17860	177	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
17860	177	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
17861	198	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
17861	198	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
17862	216	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
17862	216	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
17862	216	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
17863	235	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
17863	235	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
17863	235	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
1580	251	8	MatrixUtils.java	createRealVector	data	double[]	0	NullArgumentException	$ == null
1581	269	8	MatrixUtils.java	createFieldVector	data	T[]	0	NullArgumentException	$ == null
1582	272	8	MatrixUtils.java	createFieldVector	THIS	MatrixUtils	0	ZeroException	data.$.length == 0
1582	272	8	MatrixUtils.java	createFieldVector	data	T[]	0	ZeroException	$.length == 0
1583	289	8	MatrixUtils.java	createRowRealMatrix	rowData	double[]	0	NullArgumentException	$ == null
17864	294	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
17864	294	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
1584	313	8	MatrixUtils.java	createRowFieldMatrix	rowData	T[]	0	NullArgumentException	$ == null
1585	317	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
17865	321	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
17865	321	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
1586	338	8	MatrixUtils.java	createColumnRealMatrix	columnData	double[]	0	NullArgumentException	$ == null
17866	343	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
17866	343	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
1587	362	8	MatrixUtils.java	createColumnFieldMatrix	columnData	T[]	0	NullArgumentException	$ == null
1588	366	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NoDataException	$ == 0
17867	370	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
17867	370	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
1589	391	8	MatrixUtils.java	isSymmetricInternal	rows	int	0	NonSquareMatrixException:RET	$ != matrix.getColumnDimension()
1589	391	8	MatrixUtils.java	isSymmetricInternal	matrix	RealMatrix	0	NonSquareMatrixException:RET	rows != $.getColumnDimension()
1590	392	12	MatrixUtils.java	isSymmetricInternal	raiseException	boolean	1	NonSquareMatrixException	$
17868	398	8	MatrixUtils.java	isSymmetricInternal	i	int	0	NIL-FOR	$ < rows
17868	398	8	MatrixUtils.java	isSymmetricInternal	rows	int	0	NIL-FOR	i < $
17869	399	12	MatrixUtils.java	isSymmetricInternal	j	int	0	NIL-FOR	$ < rows
17869	399	12	MatrixUtils.java	isSymmetricInternal	rows	int	0	NIL-FOR	j < $
1591	402	16	MatrixUtils.java	isSymmetricInternal	mij	double	0	NonSymmetricMatrixException:RET	FastMath.abs($ - mji) > FastMath.max(FastMath.abs($), FastMath.abs(mji)) * relativeTolerance
1591	402	16	MatrixUtils.java	isSymmetricInternal	mji	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - $) > FastMath.max(FastMath.abs(mij), FastMath.abs($)) * relativeTolerance
1591	402	16	MatrixUtils.java	isSymmetricInternal	relativeTolerance	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - mji) > FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * $
1592	404	20	MatrixUtils.java	isSymmetricInternal	raiseException	boolean	1	NonSymmetricMatrixException	$
1593	467	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1593	467	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1593	467	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= m.getRowDimension()
1594	483	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1594	483	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1594	483	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= m.getColumnDimension()
1595	508	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1595	508	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1596	515	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1596	515	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1597	540	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1598	543	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1599	546	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedRows.$.length == 0
1599	546	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1600	549	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedColumns.$.length == 0
1600	549	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1601	571	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1601	571	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1601	571	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1601	571	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1602	588	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1602	588	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1602	588	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1602	588	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1603	606	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DimensionMismatchException	$.getColumnDimension() != right.getRowDimension()
1603	606	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DimensionMismatchException	left.getColumnDimension() != $.getRowDimension()
17870	745	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
17870	745	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
17871	776	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
17871	776	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
17872	848	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
17872	848	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
17873	849	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
17873	849	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
17874	882	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
17874	882	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
17875	884	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
17875	884	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1604	930	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$ == null
1604	930	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$.getRowDimension() != b.getDimension()
1604	930	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	DimensionMismatchException	rm.getRowDimension() != $.getDimension()
1604	930	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	DimensionMismatchException	$ == null
1605	935	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
17876	940	8	MatrixUtils.java	solveLowerTriangularSystem	i	int	0	NIL-FOR	$ < rows
17876	940	8	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	i < $
1606	942	12	MatrixUtils.java	solveLowerTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
17877	947	12	MatrixUtils.java	solveLowerTriangularSystem	j	int	0	NIL-FOR	$< rows
17877	947	12	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	j< $
1607	975	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$ == null
1607	975	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$.getRowDimension() != b.getDimension()
1607	975	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	DimensionMismatchException	$ == null
1607	975	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	DimensionMismatchException	rm.getRowDimension() != $.getDimension()
1608	980	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
17878	985	8	MatrixUtils.java	solveUpperTriangularSystem	i	int	0	NIL-FOR	$ >-1
1609	987	12	MatrixUtils.java	solveUpperTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
17879	992	12	MatrixUtils.java	solveUpperTriangularSystem	j	int	0	NIL-FOR	$>-1
1610	1013	8	MatrixUtils.java	blockInverse	n	int	0	NonSquareMatrixException	m.getColumnDimension() != $
1610	1013	8	MatrixUtils.java	blockInverse	m	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != n
2344	78	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
2344	78	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
2344	78	8	Max.java	increment	d	double	0	DEF	$ > value
2345	134	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
2345	134	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2345	134	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
2345	134	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
18536	136	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18536	136	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18536	136	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2346	137	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2346	137	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
2777	36	8	MaxEval.java	MaxEval	max	int	0	NotStrictlyPositiveException	$ <= 0
2778	36	8	MaxIter.java	MaxIter	max	int	0	NotStrictlyPositiveException	$ <= 0
2275	114	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
2276	124	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
2277	163	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
2277	163	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
2277	163	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
2277	163	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
18522	172	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18522	172	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18522	172	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2278	211	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, weights, begin, length)
2278	211	8	Mean.java	evaluate	values	double[]	0	RET	test($, weights, begin, length)
2278	211	8	Mean.java	evaluate	weights	double[]	0	RET	test(values, $, begin, length)
2278	211	8	Mean.java	evaluate	begin	int	0	RET	test(values, weights, $, length)
2278	211	8	Mean.java	evaluate	length	int	0	RET	test(values, weights, begin, $)
18523	220	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18523	220	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18523	220	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
19018	147	8	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
3151	167	8	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
19019	176	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
3152	182	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
3153	186	12	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
3153	186	12	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
3153	186	12	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
19020	191	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
3154	197	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
3155	233	8	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
19021	235	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
19022	241	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
3910	154	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$ == null
3910	154	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	NullArgumentException	$ == null
3911	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NoDataException	xval.$.length == 0
3911	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NoDataException	$.length == 0
3912	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xval.$.length != yval.$.length
3912	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DimensionMismatchException	$.length != yval.length
3912	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3913	164	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$[0] == null
19356	173	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NIL-FOR	i < xval.$.length
19356	173	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < xval.length
19356	173	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NIL-FOR	i < $.length
3914	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	NullArgumentException	$ == null
3915	178	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xvalI.$.length != $.dimension
3915	178	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	DimensionMismatchException	$.length != dimension
19357	188	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < microsphereElements
19357	188	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	microsphereElements	int	0	NIL-FOR	i < $
3916	213	12	MicrosphereInterpolatingFunction.java	value	diffNorm	double	0	RET	FastMath.abs($) < FastMath.ulp(1d)
3917	232	12	MicrosphereInterpolatingFunction.java	value	sd	Entry<RealVector,Double>	0	DEF	$ != null
3944	77	8	MicrosphereInterpolator.java	MicrosphereInterpolator	exponent	int	0	NotPositiveException	$ < 0
3945	80	8	MicrosphereInterpolator.java	MicrosphereInterpolator	elements	int	0	NotStrictlyPositiveException	$ <= 0
3461	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	1	DEF	$.previousState != null
3461	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
19212	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19212	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
19213	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19213	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2520	102	8	MillerUpdatingRegression.java	MillerUpdatingRegression	numberOfVariables	int	0	ModelSpecificationException	$ < 1
2521	105	8	MillerUpdatingRegression.java	MillerUpdatingRegression	includeConstant	boolean	1	DEF	$
18620	122	8	MillerUpdatingRegression.java	MillerUpdatingRegression	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
18620	122	8	MillerUpdatingRegression.java	MillerUpdatingRegression	i	int	0	NIL-FOR	$ < this.nvars
2522	125	8	MillerUpdatingRegression.java	MillerUpdatingRegression	errorTolerance	double	1	DEF	$ > 0
2523	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2523	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != $.nvars
2523	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2523	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length + 1 != $.nvars
2523	170	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length != nvars
2523	170	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length + 1 != nvars
2524	175	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
2525	195	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != y.$.length
2525	195	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2525	195	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2525	195	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2525	195	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
2526	201	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length == 0
2526	201	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length == 0
2527	205	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x[0].length + 1 > x.$.length
2527	205	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$[0].length + 1 > $.length
18621	210	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
18621	210	8	MillerUpdatingRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
18621	210	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
18622	242	8	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
18622	242	8	MillerUpdatingRegression.java	include	i	int	0	NIL-FOR	$ < x.length
18622	242	8	MillerUpdatingRegression.java	include	x	double[]	0	NIL-FOR	i < $.length
2528	243	12	MillerUpdatingRegression.java	include	w	double	0	RET	$ == 0.0
2529	248	12	MillerUpdatingRegression.java	include	xi	double	0	DEF	$ == 0.0
2530	255	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2531	258	16	MillerUpdatingRegression.java	include	tmp	double	0	DEF	FastMath.abs($) > Precision.EPSILON
18623	266	12	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	k < $.nvars
18623	266	12	MillerUpdatingRegression.java	include	k	int	0	NIL-FOR	$ < nvars
2532	269	16	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2533	278	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2534	297	8	MillerUpdatingRegression.java	smartAdd	_a	double	1	RET	$ > _b
2534	297	8	MillerUpdatingRegression.java	smartAdd	_b	double	1	RET	_a > $
2535	299	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_b > $
2535	299	12	MillerUpdatingRegression.java	smartAdd	_b	double	0	RET	$ > eps
2536	305	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_a > $
2536	305	12	MillerUpdatingRegression.java	smartAdd	_a	double	0	RET	$ > eps
18624	326	8	MillerUpdatingRegression.java	clear	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
18624	326	8	MillerUpdatingRegression.java	clear	i	int	0	NIL-FOR	$ < nvars
18625	344	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
18625	344	8	MillerUpdatingRegression.java	tolset	i	int	0	NIL-FOR	$ < nvars
18626	348	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
18626	348	8	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	$ < nvars
18627	351	12	MillerUpdatingRegression.java	tolset	row	int	0	NIL-FOR	$ < col
18627	351	12	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	row < $
2537	373	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ < 1
2538	376	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	ModelSpecificationException	nreq > $.nvars
2538	376	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ > this.nvars
2539	380	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.tol_set
18628	385	8	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ > -1
2540	386	12	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[i]) < $.tol[i]
2540	386	12	MillerUpdatingRegression.java	regcf	i	int	1	DEF	Math.sqrt(d[$]) < tol[$]
18629	393	16	MillerUpdatingRegression.java	regcf	j	int	0	NIL-FOR	$ < nreq
18629	393	16	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	j < $
2541	399	8	MillerUpdatingRegression.java	regcf	rankProblem	boolean	0	DEF	$
18630	400	12	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ < nreq
18630	400	12	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	i < $
2542	401	16	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2542	401	16	MillerUpdatingRegression.java	regcf	i	int	0	DEF	this.lindep[$]
18631	415	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
18631	415	8	MillerUpdatingRegression.java	singcheck	i	int	0	NIL-FOR	$ < nvars
18632	418	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
18632	418	8	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	$ < nvars
18633	424	12	MillerUpdatingRegression.java	singcheck	row	int	0	NIL-FOR	$ < col - 1
18633	424	12	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	row < $ - 1
2543	425	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	Math.abs($.r[pos]) * $.work_sing[row] < temp
2543	425	16	MillerUpdatingRegression.java	singcheck	row	int	0	DEF	Math.abs(r[pos]) * work_sing[$] < temp
2543	425	16	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	Math.abs(r[pos]) * work_sing[row] < $
2543	425	16	MillerUpdatingRegression.java	singcheck	pos	int	0	DEF	Math.abs(r[$]) * work_sing[row] < temp
2544	434	12	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	$.work_sing[col] < temp
2544	434	12	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	work_sing[col] < $
2544	434	12	MillerUpdatingRegression.java	singcheck	col	int	0	DEF	work_sing[$] < temp
2545	436	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	1	DEF	col < $.nvars - 1
2545	436	16	MillerUpdatingRegression.java	singcheck	col	int	1	DEF	$ < nvars - 1
18634	439	20	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	_xi < $.nvars
18634	439	20	MillerUpdatingRegression.java	singcheck	_xi	int	0	NIL-FOR	$ < nvars
18635	467	8	MillerUpdatingRegression.java	ss	i	int	0	NIL-FOR	$ > 0
2546	493	8	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	RET	$.nobs <= nreq
2546	493	8	MillerUpdatingRegression.java	cov	nreq	int	0	RET	this.nobs <= $
18636	497	8	MillerUpdatingRegression.java	cov	i	int	0	NIL-FOR	$ < nreq
18636	497	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	i < $
2547	498	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2547	498	12	MillerUpdatingRegression.java	cov	i	int	0	DEF	this.lindep[$]
18637	511	8	MillerUpdatingRegression.java	cov	row	int	0	NIL-FOR	$ < nreq
18637	511	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	row < $
2548	513	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[row]
2548	513	12	MillerUpdatingRegression.java	cov	row	int	0	DEF	this.lindep[$]
18638	514	16	MillerUpdatingRegression.java	cov	col	int	0	NIL-FOR	$ < nreq
18638	514	16	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	col < $
2549	515	20	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	1	DEF	$.lindep[col]
2549	515	20	MillerUpdatingRegression.java	cov	col	int	1	DEF	this.lindep[$]
2550	517	24	MillerUpdatingRegression.java	cov	col	int	1	DEF	row == $
2550	517	24	MillerUpdatingRegression.java	cov	row	int	1	DEF	$ == col
18639	522	24	MillerUpdatingRegression.java	cov	k	int	0	NIL-FOR	$ < nreq
18639	522	24	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	k < $
2551	523	28	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2551	523	28	MillerUpdatingRegression.java	cov	k	int	0	DEF	this.lindep[$]
18640	553	8	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	$ > 0
2552	554	12	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	1	DEF	$.lindep[row]
2552	554	12	MillerUpdatingRegression.java	inverse	row	int	1	DEF	this.lindep[$]
18641	556	16	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	$ > row
18641	556	16	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	col > $
18642	560	20	MillerUpdatingRegression.java	inverse	k	int	0	NIL-FOR	$ < col - 1
18642	560	20	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	k < $ - 1
2553	562	24	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2553	562	24	MillerUpdatingRegression.java	inverse	k	int	0	DEF	this.lindep[$]
2554	622	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	RET	in >= $.nvars
2554	622	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ >= nvars
2554	622	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ < -1
2555	627	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	DEF	$.d[in] > 0.0
2555	627	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	DEF	d[$] > 0.0
18643	630	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
18643	630	8	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	$ < nvars
18644	633	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col
18644	633	12	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	row < $
2556	637	12	MillerUpdatingRegression.java	getPartialCorrelations	sumxx	double	1	DEF	$ > 0.0
18645	644	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	row < $.nvars
18645	644	8	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < nvars
2557	647	8	MillerUpdatingRegression.java	getPartialCorrelations	sumyy	double	0	DEF	$ > 0.0
18646	651	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col1 < $.nvars
18646	651	8	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	$ < nvars
18647	655	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col1
18647	655	12	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	row < $
18648	657	16	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
18648	657	16	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
18649	665	12	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
18649	665	12	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
2558	703	8	MillerUpdatingRegression.java	vmove	from	int	0	RET	$ == to
2558	703	8	MillerUpdatingRegression.java	vmove	to	int	0	RET	from == $
2559	706	8	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	$.rss_set
2560	710	8	MillerUpdatingRegression.java	vmove	from	int	1	DEF	$ < to
2560	710	8	MillerUpdatingRegression.java	vmove	to	int	1	DEF	from < $
18650	722	8	MillerUpdatingRegression.java	vmove	count	int	0	NIL-WHILE	idx < $
18650	722	8	MillerUpdatingRegression.java	vmove	idx	int	0	NIL-WHILE	$ < count
2561	730	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 > $.epsilon
2561	730	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d1 > $.epsilon
2561	730	12	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	$ > this.epsilon
2561	730	12	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ > this.epsilon
2562	732	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	Math.abs(X) * Math.sqrt(d1) < $.tol[mp1]
2562	732	16	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	Math.abs(X) * Math.sqrt($) < tol[mp1]
2562	732	16	MillerUpdatingRegression.java	vmove	mp1	int	0	DEF	Math.abs(X) * Math.sqrt(d1) < tol[$]
2563	735	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	d1 < $.epsilon
2563	735	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	Math.abs(X) < $.epsilon
2563	735	16	MillerUpdatingRegression.java	vmove	d1	double	1	DEF	$ < this.epsilon
18651	739	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
18651	739	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2564	751	23	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 < $.epsilon
2564	751	23	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ < this.epsilon
18652	754	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	_i < m1 + $.nvars - m - 1
18652	754	20	MillerUpdatingRegression.java	vmove	_i	int	0	NIL-FOR	$ < m1 + nvars - m - 1
18652	754	20	MillerUpdatingRegression.java	vmove	m1	int	0	NIL-FOR	_i < $ + nvars - m - 1
18652	754	20	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	_i < m1 + nvars - $ - 1
2565	761	16	MillerUpdatingRegression.java	vmove	bSkipTo40	boolean	0	DEF	$
18653	769	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
18653	769	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2566	781	12	MillerUpdatingRegression.java	vmove	m	int	0	DEF	$ > 0
18654	783	16	MillerUpdatingRegression.java	vmove	row	int	0	NIL-FOR	$ < m
18654	783	16	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	row < $
2567	824	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length < 1
2567	824	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length > $.nvars + 1 - pos1
2567	824	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length < 1
2567	824	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length > nvars + 1 - pos1
2567	824	8	MillerUpdatingRegression.java	reorderRegressors	pos1	int	0	RET	list.length > nvars + 1 - $
18655	829	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-WHILE	i < $.nvars
18655	829	8	MillerUpdatingRegression.java	reorderRegressors	i	int	0	NIL-WHILE	$ < nvars
18656	831	12	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-FOR	j < list.$.length
18656	831	12	MillerUpdatingRegression.java	reorderRegressors	j	int	0	NIL-FOR	$ < list.length
18656	831	12	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	NIL-FOR	j < $.length
2568	832	16	MillerUpdatingRegression.java	reorderRegressors	j	int	0	RET	l == list[$]
2568	832	16	MillerUpdatingRegression.java	reorderRegressors	next	int	0	RET	i > $
2568	832	16	MillerUpdatingRegression.java	reorderRegressors	i	int	0	RET	$ > next
2568	832	16	MillerUpdatingRegression.java	reorderRegressors	l	int	0	RET	$ == list[j]
2568	832	16	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	l == $[j]
2569	835	20	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	1	RET	next >= list.$.length + pos1
2569	835	20	MillerUpdatingRegression.java	reorderRegressors	next	int	1	RET	$ >= list.length + pos1
2569	835	20	MillerUpdatingRegression.java	reorderRegressors	list	int[]	1	RET	next >= $.length + pos1
2569	835	20	MillerUpdatingRegression.java	reorderRegressors	pos1	int	1	RET	next >= list.length + $
2570	858	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	RET	row_data.$.length > $.nvars
2570	858	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row_data	double[]	0	RET	$.length > nvars
2571	862	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
18657	870	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	NIL-FOR	col < xrow.$.length
18657	870	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	$ < xrow.length
18657	870	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	xrow	double[]	0	NIL-FOR	col < $.length
2572	871	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[col]) < $.tol[col]
2572	871	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	1	DEF	Math.sqrt(d[$]) < tol[$]
18658	876	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row	int	0	NIL-FOR	$ < col
18658	876	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	row < $
2573	920	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= numberOfRegressors
2573	920	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	this.nobs <= $
2574	925	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	numberOfRegressors > $.nvars
2574	925	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	$ > this.nvars
18659	940	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
18659	940	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2575	941	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2575	941	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
18660	947	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < numberOfRegressors
18660	947	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	i < $
2576	948	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != i
2576	948	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != $
2577	953	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
18661	962	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
18661	962	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < nvars
18662	963	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < numberOfRegressors
18662	963	16	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	j < $
2578	964	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == i
2578	964	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == i
2578	964	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == $
18663	975	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
18663	975	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
18663	975	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
18664	977	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
18664	977	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2579	979	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2579	979	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2580	1006	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	variablesToInclude.$.length > $.nvars
2580	1006	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > this.nvars
2581	1010	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= $.nvars
18665	1017	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
18665	1017	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
18665	1017	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2582	1018	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	i >= $.nvars
2582	1018	12	MillerUpdatingRegression.java	regress	i	int	0	ModelSpecificationException	$ >= this.nvars
2583	1022	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	$ > 0
2583	1022	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] == variablesToInclude[$ - 1]
2583	1022	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] == $[i - 1]
2584	1028	8	MillerUpdatingRegression.java	regress	iExclude	int	1	DEF	$ > 0
18666	1031	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
18666	1031	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
18666	1031	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2585	1032	16	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] > -1
2585	1032	16	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] > -1
18667	1052	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
18667	1052	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2586	1053	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2586	1053	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
18668	1059	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
18668	1059	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.nvars
2587	1060	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != series[i]
2587	1060	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != series[$]
2587	1060	12	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[i] != $[i]
2588	1065	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
18669	1072	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < series.$.length
18669	1072	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < series.length
18669	1072	12	MillerUpdatingRegression.java	regress	series	int[]	0	NIL-FOR	i < $.length
18670	1073	16	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	j < $.vorder.length
18670	1073	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < this.vorder.length
2589	1074	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == series[i]
2589	1074	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == series[i]
2589	1074	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == series[$]
2589	1074	20	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[j] == $[i]
18671	1085	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
18671	1085	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
18671	1085	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
18672	1087	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
18672	1087	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2590	1089	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2590	1089	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2341	78	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
2341	78	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
2341	78	8	Min.java	increment	d	double	0	DEF	$ < value
2342	134	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
2342	134	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2342	134	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
2342	134	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
18535	136	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18535	136	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18535	136	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2343	137	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2343	137	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
17337	88	8	MixtureMultivariateNormalDistribution.java	createComponents	THIS	MixtureMultivariateNormalDistribution	0	NIL-FOR	i < weights.$.length
17337	88	8	MixtureMultivariateNormalDistribution.java	createComponents	i	int	0	NIL-FOR	$ < weights.length
17337	88	8	MixtureMultivariateNormalDistribution.java	createComponents	weights	double[]	0	NIL-FOR	i < $.length
17356	72	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	i	int	0	NIL-FOR	$ < numComp
17356	72	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	numComp	int	0	NIL-FOR	i < $
1235	74	12	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	comp	Pair<Double,T>	0	DimensionMismatchException	$.getSecond().getDimension() != dim
1235	74	12	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	dim	int	0	DimensionMismatchException	comp.getSecond().getDimension() != $
1236	77	12	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	comp	Pair<Double,T>	0	NotPositiveException	$.getFirst() < 0
1237	84	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	weightSum	double	0	MathArithmeticException	Double.isInfinite($)
17357	91	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	i	int	0	NIL-FOR	$ < numComp
17357	91	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	numComp	int	0	NIL-FOR	i < $
17358	101	8	MixtureMultivariateRealDistribution.java	density	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
17358	101	8	MixtureMultivariateRealDistribution.java	density	i	int	0	NIL-FOR	$ < weight.length
17359	116	8	MixtureMultivariateRealDistribution.java	sample	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
17359	116	8	MixtureMultivariateRealDistribution.java	sample	i	int	0	NIL-FOR	$ < weight.length
1238	118	12	MixtureMultivariateRealDistribution.java	sample	randomValue	double	0	DEF	$ <= sum
1238	118	12	MixtureMultivariateRealDistribution.java	sample	sum	double	0	DEF	randomValue <= $
1239	125	8	MixtureMultivariateRealDistribution.java	sample	vals	double[]	0	DEF	$ == null
17360	141	8	MixtureMultivariateRealDistribution.java	reseedRandomGenerator	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.distribution.size()
17360	141	8	MixtureMultivariateRealDistribution.java	reseedRandomGenerator	i	int	0	NIL-FOR	$ < distribution.size()
17361	156	8	MixtureMultivariateRealDistribution.java	getComponents	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
17361	156	8	MixtureMultivariateRealDistribution.java	getComponents	i	int	0	NIL-FOR	$ < weight.length
4063	98	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMin) < $
4063	98	8	MullerSolver.java	doSolve	fMin	double	0	RET	FastMath.abs($) < functionValueAccuracy
4064	102	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMax) < $
4064	102	8	MullerSolver.java	doSolve	fMax	double	0	RET	FastMath.abs($) < functionValueAccuracy
4065	106	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fInitial) < $
4065	106	8	MullerSolver.java	doSolve	fInitial	double	0	RET	FastMath.abs($) < functionValueAccuracy
4066	112	8	MullerSolver.java	doSolve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial)
4066	112	8	MullerSolver.java	doSolve	min	double	1	RET	isBracketing($, initial)
4066	112	8	MullerSolver.java	doSolve	initial	double	1	RET	isBracketing(min, $)
4067	169	12	MullerSolver.java	solve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
4067	169	12	MullerSolver.java	solve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4067	169	12	MullerSolver.java	solve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
4067	169	12	MullerSolver.java	solve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
4067	169	12	MullerSolver.java	solve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
4068	182	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
4069	192	16	MullerSolver.java	solve	ym	double	1	DEF	FastMath.signum(y0) + FastMath.signum($) == 0.0
4069	192	16	MullerSolver.java	solve	y0	double	1	DEF	FastMath.signum($) + FastMath.signum(ym) == 0.0
4057	103	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y0) < $
4057	103	8	MullerSolver2.java	doSolve	y0	double	0	RET	FastMath.abs($) < functionValueAccuracy
4058	108	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y1) < $
4058	108	8	MullerSolver2.java	doSolve	y1	double	0	RET	FastMath.abs($) < functionValueAccuracy
4059	112	8	MullerSolver2.java	doSolve	y0	double	0	NoBracketingException	$ * y1 > 0
4059	112	8	MullerSolver2.java	doSolve	y1	double	0	NoBracketingException	y0 * $ > 0
4060	129	12	MullerSolver2.java	doSolve	delta	double	1	DEF	$ >= 0.0
4061	138	12	MullerSolver2.java	doSolve	denominator	double	1	DEF	$ != 0
19445	142	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x1
19445	142	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x2
19445	142	16	MullerSolver2.java	doSolve	x1	double	0	NIL-WHILE	x == $
19445	142	16	MullerSolver2.java	doSolve	x2	double	0	NIL-WHILE	x == $
4062	154	12	MullerSolver2.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
4062	154	12	MullerSolver2.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4062	154	12	MullerSolver2.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
4062	154	12	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
4062	154	12	MullerSolver2.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
2816	163	8	MultiDirectionalSimplex.java	iterate	best	PointValuePair	0	RET	comparator.compare(reflected, $) < 0
2816	163	8	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare($, best) < 0
2816	163	8	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(reflected, best) < 0
2817	168	12	MultiDirectionalSimplex.java	iterate	expanded	PointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
2817	168	12	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	DEF	comparator.compare($, expanded) <= 0
2817	168	12	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
18731	202	8	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
18731	202	8	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
18732	205	12	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
18732	205	12	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
1985	166	8	MultiDirectionalSimplex.java	iterate	best	PointValuePair	0	RET	comparator.compare(reflected, $) < 0
1985	166	8	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare($, best) < 0
1985	166	8	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(reflected, best) < 0
1986	171	12	MultiDirectionalSimplex.java	iterate	expanded	PointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
1986	171	12	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	DEF	comparator.compare($, expanded) <= 0
1986	171	12	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
18307	205	8	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
18307	205	8	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
18308	208	12	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
18308	208	12	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
2717	81	8	MultiStartUnivariateOptimizer.java	MultiStartUnivariateOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
2718	119	8	MultiStartUnivariateOptimizer.java	getOptima	THIS	MultiStartUnivariateOptimizer	0	MathIllegalStateException	$.optima == null
18686	147	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	NIL-FOR	i < $.optimData.$.length
18686	147	8	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < optimData.length
2719	148	12	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	DEF	$.optimData[i] instanceof MaxEval
2719	148	12	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof MaxEval
2720	153	12	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	DEF	$.optimData[i] instanceof SearchInterval
2720	153	12	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof SearchInterval
2721	159	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	MathIllegalStateException	$.maxEvalIndex == -1
2722	162	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	MathIllegalStateException	$.searchIntervalIndex == -1
18687	176	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	NIL-FOR	i < $.starts
18687	176	8	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < starts
2723	199	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	DEF	$.optima[0] == null
17199	173	8	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
17199	173	8	MultidimensionalCounter.java	MultidimensionalCounter	i	int	0	NIL-FOR	$ < last
17200	175	12	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	j < $.dimension
17200	175	12	MultidimensionalCounter.java	MultidimensionalCounter	j	int	0	NIL-FOR	$ < dimension
109	183	8	MultidimensionalCounter.java	MultidimensionalCounter	tS	int	0	NotStrictlyPositiveException	$ <= 0
110	217	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.totalSize
110	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ < 0
110	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ >= totalSize
17201	225	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
17201	225	8	MultidimensionalCounter.java	getCounts	i	int	0	NIL-FOR	$ < last
17202	228	12	MultidimensionalCounter.java	getCounts	count	int	0	NIL-WHILE	$ <= index
17202	228	12	MultidimensionalCounter.java	getCounts	index	int	0	NIL-WHILE	count <= $
111	255	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	DimensionMismatchException	c.$.length != $.dimension
111	255	8	MultidimensionalCounter.java	getCount	c	int	0	DimensionMismatchException	$.length != dimension
17203	259	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
17203	259	8	MultidimensionalCounter.java	getCount	i	int	0	NIL-FOR	$ < dimension
112	261	12	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.size[i]
112	261	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ >= size[i]
112	261	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ < 0
112	261	12	MultidimensionalCounter.java	getCount	i	int	0	OutOfRangeException	index >= size[$]
17204	293	8	MultidimensionalCounter.java	toString	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
17204	293	8	MultidimensionalCounter.java	toString	i	int	0	NIL-FOR	$ < dimension
3537	120	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	NumberIsTooSmallException	$ < 2
3054	104	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
3054	104	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
3054	104	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
18922	107	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < lower.$.length
18922	107	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < lower.length
18922	107	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NIL-FOR	i < $.length
3055	109	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
3055	109	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
3055	109	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
18923	116	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
18923	116	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < mappers.length
3056	117	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(lower[$])
3056	117	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	1	DEF	Double.isInfinite($[i])
3057	118	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
3057	118	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
3058	126	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
3058	126	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
18924	146	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
18924	146	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	i	int	0	NIL-FOR	$ < mappers.length
18925	162	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
18925	162	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	i	int	0	NIL-FOR	$ < mappers.length
2230	105	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2230	105	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2230	105	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
18502	108	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < lower.$.length
18502	108	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < lower.length
18502	108	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NIL-FOR	i < $.length
2231	110	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2231	110	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2231	110	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
18503	117	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
18503	117	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < mappers.length
2232	118	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(lower[$])
2232	118	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	1	DEF	Double.isInfinite($[i])
2233	119	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2233	119	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
2234	127	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2234	127	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
18504	147	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
18504	147	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	i	int	0	NIL-FOR	$ < mappers.length
18505	163	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
18505	163	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	i	int	0	NIL-FOR	$ < mappers.length
3048	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
3048	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
3048	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
3049	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != scale.$.length
3049	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != scale.length
3049	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	scale	double[]	0	DimensionMismatchException	lower.length != $.length
18919	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < lower.$.length
18919	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NIL-FOR	$ < lower.length
18919	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NIL-FOR	i < $.length
3050	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
3050	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
3050	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
18920	164	8	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < $.scale.$.length
18920	164	8	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	NIL-FOR	$ < scale.length
3051	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] < $.lower[i]
3051	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] > $.upper[i]
3051	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] < lower[$]
3051	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] > upper[$]
3051	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] < lower[i]
3051	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] > upper[i]
18921	168	16	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	j < $.scale.$.length
18921	168	16	MultivariateFunctionPenaltyAdapter.java	value	j	int	0	NIL-FOR	$ < scale.length
3052	170	20	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] < $.lower[j]
3052	170	20	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] < lower[$]
3052	170	20	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] < lower[j]
3053	172	27	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] > $.upper[j]
3053	172	27	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] > upper[$]
3053	172	27	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] > upper[j]
2224	133	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2224	133	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2224	133	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
2225	136	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != scale.$.length
2225	136	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != scale.length
2225	136	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	scale	double[]	0	DimensionMismatchException	lower.length != $.length
18499	139	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < lower.$.length
18499	139	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NIL-FOR	$ < lower.length
18499	139	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NIL-FOR	i < $.length
2226	141	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2226	141	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2226	141	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
18500	166	8	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < $.scale.$.length
18500	166	8	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	NIL-FOR	$ < scale.length
2227	167	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] < $.lower[i]
2227	167	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] > $.upper[i]
2227	167	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] < lower[$]
2227	167	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] > upper[$]
2227	167	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] < lower[i]
2227	167	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] > upper[i]
18501	170	16	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	j < $.scale.$.length
18501	170	16	MultivariateFunctionPenaltyAdapter.java	value	j	int	0	NIL-FOR	$ < scale.length
2228	172	20	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] < $.lower[j]
2228	172	20	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] < lower[$]
2228	172	20	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] < lower[j]
2229	174	27	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] > $.upper[j]
2229	174	27	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] > upper[$]
2229	174	27	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] > upper[j]
1100	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	covariances.$.length != dim
1100	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	DimensionMismatchException	covariances.length != $
1100	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covariances	double[][]	0	DimensionMismatchException	$.length != dim
17317	111	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NIL-FOR	$ < dim
17317	111	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	i < $
1101	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	dim != covariances[i].length
1101	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	DimensionMismatchException	dim != covariances[$].length
1101	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	DimensionMismatchException	$ != covariances[i].length
1101	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covariances	double[][]	0	DimensionMismatchException	dim != $[i].length
17318	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < covMatEigenvalues.$.length
17318	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NIL-FOR	$ < covMatEigenvalues.length
17318	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covMatEigenvalues	double[]	0	NIL-FOR	i < $.length
1102	133	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NonPositiveDefiniteMatrixException	covMatEigenvalues[$] < 0
1102	133	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covMatEigenvalues	double[]	0	NonPositiveDefiniteMatrixException	$[i] < 0
17319	140	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	v	int	0	NIL-FOR	$ < dim
17319	140	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	v < $
17320	148	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	row	int	0	NIL-FOR	$ < dim
17320	148	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	row < $
17321	150	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	col	int	0	NIL-FOR	$ < dim
17321	150	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	col < $
1103	179	8	MultivariateNormalDistribution.java	density	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	vals.$.length != dim
1103	179	8	MultivariateNormalDistribution.java	density	dim	int	0	DimensionMismatchException	vals.length != $
1103	179	8	MultivariateNormalDistribution.java	density	vals	double[]	0	DimensionMismatchException	$.length != dim
17322	198	8	MultivariateNormalDistribution.java	getStandardDeviations	i	int	0	NIL-FOR	$ < dim
17322	198	8	MultivariateNormalDistribution.java	getStandardDeviations	dim	int	0	NIL-FOR	i < $
17323	209	8	MultivariateNormalDistribution.java	sample	i	int	0	NIL-FOR	$ < dim
17323	209	8	MultivariateNormalDistribution.java	sample	dim	int	0	NIL-FOR	i < $
17324	215	8	MultivariateNormalDistribution.java	sample	i	int	0	NIL-FOR	$ < dim
17324	215	8	MultivariateNormalDistribution.java	sample	dim	int	0	NIL-FOR	i < $
17325	230	8	MultivariateNormalDistribution.java	getExponentTerm	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < centered.$.length
17325	230	8	MultivariateNormalDistribution.java	getExponentTerm	i	int	0	NIL-FOR	$ < centered.length
17325	230	8	MultivariateNormalDistribution.java	getExponentTerm	centered	double[]	0	NIL-FOR	i < $.length
17326	235	8	MultivariateNormalDistribution.java	getExponentTerm	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < preMultiplied.$.length
17326	235	8	MultivariateNormalDistribution.java	getExponentTerm	i	int	0	NIL-FOR	$ < preMultiplied.length
17326	235	8	MultivariateNormalDistribution.java	getExponentTerm	preMultiplied	double[]	0	NIL-FOR	i < $.length
1181	90	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	NotStrictlyPositiveException	data.$.length < 1
1181	90	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	NotStrictlyPositiveException	$.length < 1
17338	96	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	NIL-FOR	i < data.$.length
17338	96	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	i	int	0	NIL-FOR	$ < data.length
17338	96	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	NIL-FOR	i < $.length
1182	97	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	DimensionMismatchException	data[i].length != data[0].length
1182	97	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	i	int	0	DimensionMismatchException	data[$].length != data[0].length
1182	97	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	DimensionMismatchException	$[i].length != $[0].length
1183	102	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	NumberIsTooSmallException	data[i].length < 2
1183	102	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	i	int	0	NumberIsTooSmallException	data[$].length < 2
1183	102	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	NumberIsTooSmallException	$[i].length < 2
1184	139	8	MultivariateNormalMixtureExpectationMaximization.java	fit	maxIterations	int	0	NotStrictlyPositiveException	$ < 1
1185	143	8	MultivariateNormalMixtureExpectationMaximization.java	fit	threshold	double	0	NotStrictlyPositiveException	$ < Double.MIN_VALUE
1186	157	8	MultivariateNormalMixtureExpectationMaximization.java	fit	numCols	int	0	DimensionMismatchException	numMeanColumns != $
1186	157	8	MultivariateNormalMixtureExpectationMaximization.java	fit	numMeanColumns	int	0	DimensionMismatchException	$ != numCols
17339	169	8	MultivariateNormalMixtureExpectationMaximization.java	fit	THIS	MultivariateNormalMixtureExpectationMaximization	0	NIL-WHILE	Math.abs(previousLogLikelihood - $.logLikelihood) > threshold
17339	169	8	MultivariateNormalMixtureExpectationMaximization.java	fit	numIterations	int	0	NIL-WHILE	$++ <= maxIterations
17339	169	8	MultivariateNormalMixtureExpectationMaximization.java	fit	previousLogLikelihood	double	0	NIL-WHILE	Math.abs($ - logLikelihood) > threshold
17339	169	8	MultivariateNormalMixtureExpectationMaximization.java	fit	maxIterations	int	0	NIL-WHILE	numIterations++ <= $
17339	169	8	MultivariateNormalMixtureExpectationMaximization.java	fit	threshold	double	0	NIL-WHILE	Math.abs(previousLogLikelihood - logLikelihood) > $
17340	183	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
17340	183	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
17341	200	12	MultivariateNormalMixtureExpectationMaximization.java	fit	i	int	0	NIL-FOR	$ < n
17341	200	12	MultivariateNormalMixtureExpectationMaximization.java	fit	n	int	0	NIL-FOR	i < $
17342	204	16	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
17342	204	16	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
17343	208	20	MultivariateNormalMixtureExpectationMaximization.java	fit	col	int	0	NIL-FOR	$ < numCols
17343	208	20	MultivariateNormalMixtureExpectationMaximization.java	fit	numCols	int	0	NIL-FOR	col < $
17344	221	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
17344	221	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
17345	223	16	MultivariateNormalMixtureExpectationMaximization.java	fit	col	int	0	NIL-FOR	$ < numCols
17345	223	16	MultivariateNormalMixtureExpectationMaximization.java	fit	numCols	int	0	NIL-FOR	col < $
17346	230	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
17346	230	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
17347	233	12	MultivariateNormalMixtureExpectationMaximization.java	fit	i	int	0	NIL-FOR	$ < n
17347	233	12	MultivariateNormalMixtureExpectationMaximization.java	fit	n	int	0	NIL-FOR	i < $
17348	234	16	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
17348	234	16	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
17349	245	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
17349	245	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
1187	256	8	MultivariateNormalMixtureExpectationMaximization.java	fit	THIS	MultivariateNormalMixtureExpectationMaximization	0	ConvergenceException	Math.abs(previousLogLikelihood - $.logLikelihood) > threshold
1187	256	8	MultivariateNormalMixtureExpectationMaximization.java	fit	previousLogLikelihood	double	0	ConvergenceException	Math.abs($ - logLikelihood) > threshold
1187	256	8	MultivariateNormalMixtureExpectationMaximization.java	fit	threshold	double	0	ConvergenceException	Math.abs(previousLogLikelihood - logLikelihood) > $
1188	309	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	THIS	MultivariateNormalMixtureExpectationMaximization	0	NotStrictlyPositiveException	data.$.length < 2
1188	309	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	data	double[][]	0	NotStrictlyPositiveException	$.length < 2
1189	312	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numComponents	int	0	NumberIsTooSmallException	$ < 2
1190	315	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	THIS	MultivariateNormalMixtureExpectationMaximization	0	NumberIsTooLargeException	numComponents > data.$.length
1190	315	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	data	double[][]	0	NumberIsTooLargeException	numComponents > $.length
1190	315	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numComponents	int	0	NumberIsTooLargeException	$ > data.length
17350	324	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	i	int	0	NIL-FOR	$ < numRows
17350	324	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numRows	int	0	NIL-FOR	i < $
17351	339	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	binNumber	int	0	NIL-FOR	$ <= totalBins
17351	339	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	totalBins	int	0	NIL-FOR	binNumber <= $
17352	359	12	MultivariateNormalMixtureExpectationMaximization.java	estimate	i	int	0	NIL-FOR	$ <= maxIndex
17352	359	12	MultivariateNormalMixtureExpectationMaximization.java	estimate	maxIndex	int	0	NIL-FOR	i <= $
17353	360	16	MultivariateNormalMixtureExpectationMaximization.java	estimate	j	int	0	NIL-FOR	$ < numCols
17353	360	16	MultivariateNormalMixtureExpectationMaximization.java	estimate	numCols	int	0	NIL-FOR	j < $
3045	86	12	MultivariateOptimizer.java	parseOptimizationData	THIS	MultivariateOptimizer	0	DEF	$.data instanceof GoalType
3046	90	12	MultivariateOptimizer.java	parseOptimizationData	THIS	MultivariateOptimizer	0	DEF	$.data instanceof ObjectiveFunction
18506	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
18506	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
18507	150	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
18507	150	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
18508	187	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
18508	187	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
18508	187	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
2236	246	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
2237	248	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
18509	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
18509	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
18510	336	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
18510	336	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
18510	336	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
2238	337	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
18511	350	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
18511	350	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
2239	370	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
2239	370	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
2240	373	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
2241	620	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	MathIllegalStateException	$.n > 0
2242	632	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
2242	632	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
3067	136	12	MultivariateVectorOptimizer.java	parseOptimizationData	THIS	MultivariateVectorOptimizer	0	DEF	$.data instanceof ModelFunction
3068	140	12	MultivariateVectorOptimizer.java	parseOptimizationData	THIS	MultivariateVectorOptimizer	0	DEF	$.data instanceof Target
3069	144	12	MultivariateVectorOptimizer.java	parseOptimizationData	THIS	MultivariateVectorOptimizer	0	DEF	$.data instanceof Weight
3070	161	8	MultivariateVectorOptimizer.java	checkParameters	THIS	MultivariateVectorOptimizer	0	DimensionMismatchException	$.target.$.length != $.weightMatrix.getColumnDimension()
3200	68	8	NPointCrossover.java	NPointCrossover	crossoverPoints	int	0	NotStrictlyPositiveException	$ <= 0
3201	111	8	NPointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3201	111	8	NPointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3202	131	8	NPointCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3202	131	8	NPointCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
3203	134	8	NPointCrossover.java	mate	THIS	NPointCrossover	0	NumberIsTooLargeException	$.crossoverPoints >= length
3203	134	8	NPointCrossover.java	mate	length	int	0	NumberIsTooLargeException	crossoverPoints >= $
19041	152	8	NPointCrossover.java	mate	THIS	NPointCrossover	0	NIL-FOR	i < $.crossoverPoints
19041	152	8	NPointCrossover.java	mate	i	int	0	NIL-FOR	$ < crossoverPoints
19042	157	12	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < crossoverIndex
19042	157	12	NPointCrossover.java	mate	crossoverIndex	int	0	NIL-FOR	j < $
19043	171	8	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < length
19043	171	8	NPointCrossover.java	mate	length	int	0	NIL-FOR	j < $
18601	196	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
18601	196	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
18601	196	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
2486	217	16	NaturalRanking.java	rank	nanPositions	List<Integer>	0	NotANumberException	$.size() > 0
18602	235	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
18602	235	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
18602	235	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2487	236	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
2487	236	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
2488	239	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2489	250	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2490	253	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
2491	267	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
2491	267	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
18603	272	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
18603	272	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
18603	272	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2492	273	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
2492	273	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
18604	275	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
18604	275	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
18604	275	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
18605	297	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
18605	297	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
18605	297	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2493	298	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2493	298	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
18606	312	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
18606	312	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
18606	312	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2494	313	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
2494	313	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
18607	355	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
18608	366	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
18609	384	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
2495	396	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
18610	400	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
18611	414	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
18611	414	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
18611	414	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2496	415	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2496	415	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
18909	200	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
18909	200	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
18910	202	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
18910	202	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
18911	207	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
18911	207	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
18912	213	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
18912	213	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3034	219	8	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare($, reflected) <= 0
3034	219	8	NelderMeadSimplex.java	iterate	secondBest	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
3034	219	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(best, $) <= 0
3034	219	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, secondBest) < 0
3034	219	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(best, reflected) <= 0
3034	219	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
3035	223	15	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
3035	223	15	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, best) < 0
3035	223	15	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, best) < 0
18913	226	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
18913	226	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3036	232	12	NelderMeadSimplex.java	iterate	expanded	PointValuePair	1	DEF	comparator.compare($, reflected) < 0
3036	232	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(expanded, $) < 0
3036	232	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
3037	240	12	NelderMeadSimplex.java	iterate	worst	PointValuePair	1	RET	comparator.compare(reflected, $) < 0
3037	240	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	RET	comparator.compare($, worst) < 0
3037	240	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	RET	$.compare(reflected, worst) < 0
18914	243	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
18914	243	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3038	248	16	NelderMeadSimplex.java	iterate	outContracted	PointValuePair	0	RET	comparator.compare($, reflected) <= 0
3038	248	16	NelderMeadSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
3038	248	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
18915	256	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
18915	256	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3039	262	16	NelderMeadSimplex.java	iterate	inContracted	PointValuePair	0	RET	comparator.compare($, worst) < 0
3039	262	16	NelderMeadSimplex.java	iterate	worst	PointValuePair	0	RET	comparator.compare(inContracted, $) < 0
3039	262	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(inContracted, worst) < 0
18916	271	12	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
18916	271	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
18917	273	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
18917	273	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
18485	203	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
18485	203	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
18486	205	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
18486	205	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
18487	210	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
18487	210	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
18488	216	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
18488	216	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2203	222	8	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare($, reflected) <= 0
2203	222	8	NelderMeadSimplex.java	iterate	secondBest	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
2203	222	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, secondBest) < 0
2203	222	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(best, $) <= 0
2203	222	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
2203	222	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(best, reflected) <= 0
2204	226	15	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
2204	226	15	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, best) < 0
2204	226	15	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, best) < 0
18489	229	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
18489	229	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2205	235	12	NelderMeadSimplex.java	iterate	expanded	PointValuePair	1	DEF	comparator.compare($, reflected) < 0
2205	235	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(expanded, $) < 0
2205	235	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
2206	243	12	NelderMeadSimplex.java	iterate	worst	PointValuePair	1	RET	comparator.compare(reflected, $) < 0
2206	243	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	RET	comparator.compare($, worst) < 0
2206	243	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	RET	$.compare(reflected, worst) < 0
18490	246	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
18490	246	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2207	251	16	NelderMeadSimplex.java	iterate	outContracted	PointValuePair	0	RET	comparator.compare($, reflected) <= 0
2207	251	16	NelderMeadSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
2207	251	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
18491	259	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
18491	259	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2208	265	16	NelderMeadSimplex.java	iterate	inContracted	PointValuePair	0	RET	comparator.compare($, worst) < 0
2208	265	16	NelderMeadSimplex.java	iterate	worst	PointValuePair	0	RET	comparator.compare(inContracted, $) < 0
2208	265	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(inContracted, worst) < 0
18492	274	12	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
18492	274	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
18493	276	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
18493	276	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
858	78	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	MathIllegalArgumentException	$[0] == null
17296	88	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	0	NIL-FOR	i < loop.$.length
17296	88	8	NestedLoops.java	NestedLoops	i	int	0	NIL-FOR	$ < loop.length
17296	88	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	NIL-FOR	i < $.length
859	99	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	1	DEF	Double.isInfinite($.polygon.getSize())
860	126	12	NestedLoops.java	add	THIS	NestedLoops	0	RET	$.child.$.polygon.contains(node.$.polygon)
860	126	12	NestedLoops.java	add	node	NestedLoops	0	RET	child.polygon.contains($.polygon)
17297	133	8	NestedLoops.java	add	iterator	Iterator<NestedLoops>	0	NIL-FOR	$.hasNext()
861	135	12	NestedLoops.java	add	THIS	NestedLoops	0	DEF	node.$.polygon.contains(child.$.polygon)
861	135	12	NestedLoops.java	add	child	NestedLoops	0	DEF	node.polygon.contains($.polygon)
861	135	12	NestedLoops.java	add	node	NestedLoops	0	DEF	$.polygon.contains(child.polygon)
862	144	12	NestedLoops.java	add	THIS	NestedLoops	0	MathIllegalArgumentException	factory.intersection(node.$.polygon, $.child.$.polygon).isEmpty()
862	144	12	NestedLoops.java	add	factory	RegionFactory<Euclidean2D>	0	MathIllegalArgumentException	$.intersection(node.polygon, child.polygon).isEmpty()
862	144	12	NestedLoops.java	add	node	NestedLoops	0	MathIllegalArgumentException	factory.intersection($.polygon, child.polygon).isEmpty()
863	170	8	NestedLoops.java	setClockWise	THIS	NestedLoops	0	DEF	$.originalIsClockwise ^ clockwise
863	170	8	NestedLoops.java	setClockWise	clockwise	boolean	0	DEF	originalIsClockwise ^ $
17298	174	12	NestedLoops.java	setClockWise	min	int	0	NIL-WHILE	++$ < --max
17298	174	12	NestedLoops.java	setClockWise	max	int	0	NIL-WHILE	++min < --$
4028	86	12	NewtonRaphsonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
4028	86	12	NewtonRaphsonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
4028	86	12	NewtonRaphsonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
4029	86	12	NewtonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
4029	86	12	NewtonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
4029	86	12	NewtonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
3059	198	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
3059	198	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
18926	199	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18926	199	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
18927	209	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18927	209	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3060	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	$ != null
3061	222	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	RET	checker.converged($.getIterations(), previous, current)
3061	222	16	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	checker.converged(getIterations(), $, current)
3061	222	16	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	RET	$.converged(getIterations(), previous, current)
3061	222	16	NonLinearConjugateGradientOptimizer.java	doOptimize	current	PointValuePair	0	RET	checker.converged(getIterations(), previous, $)
18928	238	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < point.$.length
18928	238	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
18928	238	12	NonLinearConjugateGradientOptimizer.java	doOptimize	point	double[]	0	NIL-FOR	i < $.length
3062	243	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
3062	243	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
18929	244	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18929	244	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
18930	253	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18930	253	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
18931	264	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
18931	264	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
18931	264	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
3063	276	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.getIterations() % n == 0
3063	276	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
3063	276	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	getIterations() % $ == 0
18932	282	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18932	282	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3064	307	12	NonLinearConjugateGradientOptimizer.java	parseOptimizationData	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.data instanceof BracketingStep
18933	331	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
3065	334	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
3065	334	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
3066	401	8	NonLinearConjugateGradientOptimizer.java	checkParameters	THIS	NonLinearConjugateGradientOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3066	401	8	NonLinearConjugateGradientOptimizer.java	checkParameters	THIS	NonLinearConjugateGradientOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
1951	141	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
1952	156	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1952	156	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
18280	157	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18280	157	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
18281	167	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18281	167	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1953	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	$ != null
1954	181	16	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	checker.converged(iter, $, current)
1954	181	16	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	RET	$.converged(iter, previous, current)
1954	181	16	NonLinearConjugateGradientOptimizer.java	doOptimize	current	PointValuePair	0	RET	checker.converged(iter, previous, $)
1954	181	16	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
18282	197	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
18282	197	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
1955	202	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1955	202	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
18283	203	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18283	203	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
18284	212	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18284	212	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1956	217	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
18285	221	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
18285	221	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
18285	221	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
1957	229	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
1957	229	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	iter % $ == 0
1957	229	12	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	1	DEF	$ % n == 0
18286	235	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18286	235	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
18287	255	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
1958	258	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
1958	258	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
3359	86	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
3359	86	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
3360	89	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
3360	89	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
3361	92	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
3361	92	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
19115	151	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
19115	151	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
19116	157	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
19116	157	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
19116	157	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
19117	160	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
19117	160	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
19117	160	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
19118	201	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
19119	205	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
19119	205	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
19119	205	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
19120	212	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
19120	212	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
3362	234	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
19121	238	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
19121	238	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
3363	243	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
3364	268	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
19122	270	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
19122	270	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
3365	278	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
3366	284	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
3366	284	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
1113	107	8	NormalDistribution.java	NormalDistribution	sd	double	0	NotStrictlyPositiveException	$ <= 0
1114	150	8	NormalDistribution.java	cumulativeProbability	THIS	NormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.standardDeviation
1114	150	8	NormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * standardDeviation
1115	159	8	NormalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1115	159	8	NormalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1116	181	8	NormalDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1116	181	8	NormalDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
18673	112	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
18673	112	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
18674	113	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
18674	113	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
2591	114	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
2591	114	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
2591	114	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
2591	114	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
2592	143	8	OLSMultipleLinearRegression.java	calculateTotalSumOfSquares	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2593	198	8	OLSMultipleLinearRegression.java	calculateAdjustedRSquared	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
3249	82	8	OnePointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3249	82	8	OnePointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3250	100	8	OnePointCrossover.java	crossover	length	int	0	DimensionMismatchException	$ != second.getLength()
3250	100	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
19059	115	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
19059	115	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
19060	120	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
19060	120	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
2402	250	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ <= 0
2402	250	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ > 0.5
2403	278	8	OneWayAnova.java	anovaStats	allowOneElementData	boolean	0	DimensionMismatchException	$
2404	280	12	OneWayAnova.java	anovaStats	categoryData	Collection<SummaryStatistics>	0	DimensionMismatchException	$.size() < 2
2405	287	16	OneWayAnova.java	anovaStats	THIS	OneWayAnova	0	DimensionMismatchException	$.array.getN() <= 1
238	150	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
239	155	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
239	155	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
240	179	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
240	179	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
240	179	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
241	183	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
241	183	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
17249	188	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
17249	188	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
242	191	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
242	191	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
242	191	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
243	209	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
243	209	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
243	209	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
244	213	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
244	213	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
17250	218	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
17250	218	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
245	221	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
245	221	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
245	221	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
246	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
246	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
247	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
247	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
247	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
247	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
247	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
248	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
248	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
249	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
249	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
249	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
249	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
249	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
250	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
250	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
251	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
251	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
252	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
252	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
253	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
253	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
253	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
253	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
253	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
254	353	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
254	353	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
254	353	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
255	357	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
255	357	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
17251	362	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
17251	362	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
256	365	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
256	365	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
256	365	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
257	410	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
258	418	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
259	420	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
17252	444	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
17252	444	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
260	445	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
260	445	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
529	163	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
530	168	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
530	168	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
531	192	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
531	192	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
531	192	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
532	196	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
532	196	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
17262	201	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
17262	201	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
533	204	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
533	204	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
533	204	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
534	222	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
534	222	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
534	222	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
535	226	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
535	226	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
17263	231	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
17263	231	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
536	234	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
536	234	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
536	234	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
537	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
537	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
538	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
538	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
538	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
538	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
538	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
539	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
539	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
540	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
540	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
540	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
540	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
540	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
541	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
541	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
542	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
542	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
543	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
543	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
544	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
544	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
544	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
544	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
544	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
545	366	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
545	366	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
545	366	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
546	370	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
546	370	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
17264	375	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
17264	375	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
547	378	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
547	378	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
547	378	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
548	423	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
549	431	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
550	433	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
17265	457	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
17265	457	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
551	458	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
551	458	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
1795	66	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lRow	long	0	NumberIsTooLargeException	$ * lCol >= Integer.MAX_VALUE
1795	66	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lCol	long	0	NumberIsTooLargeException	lRow * $ >= Integer.MAX_VALUE
18186	123	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
18187	158	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
18188	186	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
18189	192	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
18189	192	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
18190	218	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
18191	224	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
18191	224	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
1796	226	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
1796	226	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
1796	226	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
1797	230	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
1798	262	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
1799	277	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
1800	292	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
18111	144	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
18111	144	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
18111	144	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
1729	146	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1729	146	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
18112	173	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
18112	173	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
18112	173	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
1730	175	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1730	175	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
18113	201	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
18113	201	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
1731	203	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1731	203	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
1732	235	8	OpenMapRealVector.java	add	v	RealVector	1	RET	$ instanceof OpenMapRealVector
18114	257	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1733	260	12	OpenMapRealVector.java	add	key	int	1	DEF	randomAccess.containsKey($)
1733	260	12	OpenMapRealVector.java	add	randomAccess	OpenIntToDoubleHashMap	1	DEF	$.containsKey(key)
18115	277	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1734	287	8	OpenMapRealVector.java	append	v	RealVector	1	RET	$ instanceof OpenMapRealVector
18116	291	12	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < v.getDimension()
18116	291	12	OpenMapRealVector.java	append	v	RealVector	0	NIL-FOR	i < $.getDimension()
18117	350	8	OpenMapRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < n
18117	350	8	OpenMapRealVector.java	ebeDivide	n	int	0	NIL-FOR	i < $
18118	363	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
1735	374	8	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isNaN()
1735	374	8	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isInfinite()
18119	376	12	OpenMapRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < n
18119	376	12	OpenMapRealVector.java	ebeMultiply	n	int	0	NIL-FOR	i < $
1736	378	16	OpenMapRealVector.java	ebeMultiply	y	double	1	DEF	Double.isNaN($)
1737	380	23	OpenMapRealVector.java	ebeMultiply	y	double	0	DEF	Double.isInfinite($)
1738	394	8	OpenMapRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
18120	401	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1739	404	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
1739	404	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
1739	404	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
1739	404	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
18121	429	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
18122	437	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1740	440	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1740	440	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
1741	452	8	OpenMapRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
18123	481	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
18124	487	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1742	490	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1742	490	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
1743	503	8	OpenMapRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
18125	522	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1744	525	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
1744	525	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
18126	530	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1745	533	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1745	533	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
1746	534	16	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
1746	534	16	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
1747	547	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
18127	559	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
1748	562	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
1749	565	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
18128	576	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
1750	578	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
18129	594	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
18129	594	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
1751	605	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isDefaultValue(value)
1751	605	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isDefaultValue($)
1752	607	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
1752	607	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
18130	618	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.getDimension()
18130	618	8	OpenMapRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < $.getDimension()
18131	626	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
18131	626	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
18132	643	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1753	646	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
1753	646	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1754	660	8	OpenMapRealVector.java	subtract	v	RealVector	1	RET	$ instanceof OpenMapRealVector
1755	679	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	MathArithmeticException	$.isDefaultValue(norm)
1755	679	8	OpenMapRealVector.java	unitize	norm	double	0	MathArithmeticException	isDefaultValue($)
18133	683	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
18134	694	8	OpenMapRealVector.java	toArray	iter	Iterator	0	NIL-WHILE	$.hasNext()
18135	716	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1756	732	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
1756	732	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
1757	735	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
1758	739	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
1758	739	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
1759	742	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
1759	742	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
18136	747	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1760	750	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
1760	750	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
18137	755	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1761	758	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
1761	758	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
1761	758	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
3251	74	8	OrderedCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3251	74	8	OrderedCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3252	92	8	OrderedCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3252	92	8	OrderedCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
19061	110	8	OrderedCrossover.java	mate	a	int	0	NIL-DOWHILE	$ == b
19061	110	8	OrderedCrossover.java	mate	b	int	0	NIL-DOWHILE	a == $
19062	124	8	OrderedCrossover.java	mate	i	int	0	NIL-FOR	$ <= length
19062	124	8	OrderedCrossover.java	mate	length	int	0	NIL-FOR	i <= $
3253	132	12	OrderedCrossover.java	mate	item2	T	0	DEF	child1Set.contains($)
3253	132	12	OrderedCrossover.java	mate	child1Set	Set<T>	0	DEF	$.contains(item2)
3254	138	12	OrderedCrossover.java	mate	item1	T	0	DEF	child2Set.contains($)
3254	138	12	OrderedCrossover.java	mate	child2Set	Set<T>	0	DEF	$.contains(item1)
17271	139	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	NIL-FOR	i < components.$.length
17271	139	8	OrderedTuple.java	OrderedTuple	i	int	0	NIL-FOR	$ < components.length
17271	139	8	OrderedTuple.java	OrderedTuple	components	double	0	NIL-FOR	i < $.length
567	140	12	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isInfinite(components[$])
567	140	12	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isInfinite($[i])
568	141	16	OrderedTuple.java	OrderedTuple	i	int	1	DEF	components[$] < 0
568	141	16	OrderedTuple.java	OrderedTuple	components	double	1	DEF	$[i] < 0
569	146	19	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isNaN(components[$])
569	146	19	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isNaN($[i])
570	151	16	OrderedTuple.java	OrderedTuple	m	long	0	DEF	$ != 0
571	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.negInf
571	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.posInf
572	166	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	1	DEF	$.lsb <= msb
572	166	8	OrderedTuple.java	OrderedTuple	msb	int	1	DEF	lsb <= $
573	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding.$.length == 1
573	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding != null
573	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding[0] == 0x0L
17272	202	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	eIndex < $.encoding.$.length
17272	202	8	OrderedTuple.java	encode	eIndex	int	0	NIL-FOR	$ < encoding.length
17273	203	12	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	vIndex < $.components.$.length
17273	203	12	OrderedTuple.java	encode	vIndex	int	0	NIL-FOR	$ < components.length
574	204	16	OrderedTuple.java	encode	THIS	OrderedTuple	0	DEF	$.getBit(vIndex, k) != 0
574	204	16	OrderedTuple.java	encode	vIndex	int	0	DEF	getBit($, k) != 0
574	204	16	OrderedTuple.java	encode	k	int	0	DEF	getBit(vIndex, $) != 0
575	207	16	OrderedTuple.java	encode	shift	int	0	DEF	$-- == 0
576	248	8	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.components.$.length == ot.$.components.$.length
576	248	8	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	components.length == $.components.length
577	249	12	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.nan
578	251	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.nan
578	251	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.nan
579	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.posInf
579	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.negInf
579	253	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.posInf
580	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.posInf
580	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.negInf
580	255	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.negInf
581	259	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	DEF	$.offset < ot.$.offset
581	259	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	DEF	offset < $.offset
582	261	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	DEF	$.offset > ot.$.offset
582	261	23	OrderedTuple.java	compareTo	ot	OrderedTuple	0	DEF	offset > $.offset
17274	266	16	OrderedTuple.java	compareTo	i	int	0	NIL-FOR	$ < limit
17274	266	16	OrderedTuple.java	compareTo	limit	int	0	NIL-FOR	i < $
583	267	20	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding[i] < ot.$.encoding[i]
583	267	20	OrderedTuple.java	compareTo	i	int	1	RET	encoding[$] < ot.encoding[$]
583	267	20	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding[i] < $.encoding[i]
584	269	27	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.encoding[i] > ot.$.encoding[i]
584	269	27	OrderedTuple.java	compareTo	i	int	0	RET	encoding[$] > ot.encoding[$]
584	269	27	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	encoding[i] > $.encoding[i]
585	274	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length < ot.$.encoding.$.length
585	274	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length < $.encoding.length
586	276	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length > ot.$.encoding.$.length
586	276	23	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length > $.encoding.length
587	292	8	OrderedTuple.java	equals	THIS	OrderedTuple	1	RET	$ == other
587	292	8	OrderedTuple.java	equals	other	Object	1	RET	this == $
588	294	15	OrderedTuple.java	equals	other	Object	1	RET	$ instanceof OrderedTuple
17275	369	8	OrderedTuple.java	computeMSB	scale	int	0	NIL-WHILE	$ != 0
589	370	12	OrderedTuple.java	computeMSB	ll	long	0	DEF	($ & mask) != $
589	370	12	OrderedTuple.java	computeMSB	mask	long	0	DEF	(ll & $) != ll
17276	395	8	OrderedTuple.java	computeLSB	scale	int	0	NIL-WHILE	$ != 0
590	396	12	OrderedTuple.java	computeLSB	ll	long	0	DEF	($ & mask) == $
590	396	12	OrderedTuple.java	computeLSB	mask	long	0	DEF	(ll & $) == ll
591	417	8	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k > $.offset
591	417	8	OrderedTuple.java	getBit	e	int	1	RET	k < $
591	417	8	OrderedTuple.java	getBit	k	int	1	RET	$ > offset
591	417	8	OrderedTuple.java	getBit	k	int	1	RET	$ < e
592	419	15	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k == $.offset
592	419	15	OrderedTuple.java	getBit	k	int	1	RET	$ == offset
593	421	15	OrderedTuple.java	getBit	e	int	1	RET	k > ($ + 52)
593	421	15	OrderedTuple.java	getBit	k	int	1	RET	$ > (e + 52)
17285	72	8	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	NIL-FOR	i < outline.$.length
17285	72	8	OutlineExtractor.java	getOutline	i	int	0	NIL-FOR	$ < outline.length
17285	72	8	OutlineExtractor.java	getOutline	outline	Vector2D[][]	0	NIL-FOR	i < $.length
17286	76	12	OutlineExtractor.java	getOutline	end	int	0	NIL-WHILE	j < $
17286	76	12	OutlineExtractor.java	getOutline	j	int	0	NIL-WHILE	$ < end
764	77	16	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	1	DEF	$.pointIsBetween(rawLoop, end, j)
764	77	16	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	1	DEF	pointIsBetween($, end, j)
764	77	16	OutlineExtractor.java	getOutline	end	int	1	DEF	pointIsBetween(rawLoop, $, j)
764	77	16	OutlineExtractor.java	getOutline	j	int	1	DEF	pointIsBetween(rawLoop, end, $)
17287	79	20	OutlineExtractor.java	getOutline	k	int	0	NIL-FOR	$ < (end - 1)
17287	79	20	OutlineExtractor.java	getOutline	end	int	0	NIL-FOR	k < ($ - 1)
765	88	12	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	DEF	end != rawLoop.$.length
765	88	12	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	0	DEF	end != $.length
765	88	12	OutlineExtractor.java	getOutline	end	int	0	DEF	$ != rawLoop.length
170	106	8	Pair.java	equals	THIS	Pair	0	RET	$ == o
170	106	8	Pair.java	equals	o	Object	0	RET	this == $
171	109	8	Pair.java	equals	o	Object	1	RET	$ instanceof Pair
3343	60	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	name	String	0	DEF	pode.isSupported($)
3343	60	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	pode	ParameterizedODE	0	DEF	$.isSupported(name)
3344	82	8	ParameterJacobianWrapper.java	computeParameterJacobian	THIS	ParameterJacobianWrapper	1	DEF	$.pode.isSupported(paramName)
3344	82	8	ParameterJacobianWrapper.java	computeParameterJacobian	paramName	String	1	DEF	pode.isSupported($)
19108	90	12	ParameterJacobianWrapper.java	computeParameterJacobian	i	int	0	NIL-FOR	$ < n
19108	90	12	ParameterJacobianWrapper.java	computeParameterJacobian	n	int	0	NIL-FOR	i < $
3489	75	8	ParameterizedWrapper.java	getParameter	THIS	ParameterizedWrapper	0	UnknownParameterException	$.isSupported(name)
3489	75	8	ParameterizedWrapper.java	getParameter	name	String	0	UnknownParameterException	isSupported($)
1162	105	8	PascalDistribution.java	PascalDistribution	r	int	0	NotStrictlyPositiveException	$ <= 0
1163	109	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ < 0
1163	109	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ > 1
1164	138	8	PascalDistribution.java	probability	x	int	1	DEF	$ < 0
1165	152	8	PascalDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
2476	95	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	NullArgumentException	$ == null
18588	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
18588	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
18589	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
18589	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
18590	167	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
18590	167	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
18591	168	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
18591	168	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
2477	169	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
2477	169	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
18592	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
18592	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
18593	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
18593	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
2478	229	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2478	229	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2478	229	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2479	231	15	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2479	231	15	PearsonsCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
18594	235	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
18594	235	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
18594	235	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
18595	256	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
18595	256	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
18596	259	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
18596	259	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
2480	279	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2480	279	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
2347	136	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2348	149	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2349	269	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ <= 0
2349	269	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ > 100
2350	273	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
2351	276	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
2352	286	8	Percentile.java	evaluate	THIS	Percentile	1	DEF	values == $.getDataRef()
2352	286	8	Percentile.java	evaluate	values	double[]	1	DEF	$ == getDataRef()
2353	296	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
2354	299	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
2354	299	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
18537	324	8	Percentile.java	select	begin	int	0	NIL-WHILE	end - $ > MIN_SELECT_SIZE
18537	324	8	Percentile.java	select	end	int	0	NIL-WHILE	$ - begin > MIN_SELECT_SIZE
2355	327	12	Percentile.java	select	THIS	Percentile	1	DEF	node < pivotsHeap.$.length
2355	327	12	Percentile.java	select	node	int	1	DEF	pivotsHeap[$] >= 0
2355	327	12	Percentile.java	select	node	int	1	DEF	$ < pivotsHeap.length
2355	327	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	$[node] >= 0
2355	327	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	node < $.length
2356	334	16	Percentile.java	select	THIS	Percentile	0	DEF	node < pivotsHeap.$.length
2356	334	16	Percentile.java	select	node	int	0	DEF	$ < pivotsHeap.length
2356	334	16	Percentile.java	select	pivotsHeap	int[]	0	DEF	node < $.length
2357	339	12	Percentile.java	select	pivot	int	1	RET	k == $
2357	339	12	Percentile.java	select	k	int	1	RET	$ == pivot
2358	342	19	Percentile.java	select	pivot	int	1	DEF	k < $
2358	342	19	Percentile.java	select	k	int	1	DEF	$ < pivot
2359	376	8	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wMiddle
2359	376	8	Percentile.java	medianOf3	wMiddle	double	1	RET	wBegin < $
2360	377	12	Percentile.java	medianOf3	wMiddle	double	1	RET	$ < wEnd
2360	377	12	Percentile.java	medianOf3	wEnd	double	1	RET	wMiddle < $
2361	383	12	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wEnd
2361	383	12	Percentile.java	medianOf3	wEnd	double	1	RET	wBegin < $
18538	412	8	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
18538	412	8	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
18539	413	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[j] > $
18539	413	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
18539	413	12	Percentile.java	partition	j	int	0	NIL-WHILE	work[$] > value
18539	413	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
18539	413	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[j] > value
18540	416	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[i] < $
18540	416	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
18540	416	12	Percentile.java	partition	i	int	0	NIL-WHILE	work[$] < value
18540	416	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
18540	416	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[i] < value
2362	420	12	Percentile.java	partition	i	int	0	DEF	$ < j
2362	420	12	Percentile.java	partition	j	int	0	DEF	i < $
2363	427	8	Percentile.java	partition	value	double	0	DEF	work[i] > $
2363	427	8	Percentile.java	partition	i	int	0	DEF	$ >= end
2363	427	8	Percentile.java	partition	i	int	0	DEF	work[$] > value
2363	427	8	Percentile.java	partition	work	double[]	0	DEF	$[i] > value
2363	427	8	Percentile.java	partition	end	int	0	DEF	i >= $
18541	443	8	Percentile.java	insertionSort	j	int	0	NIL-FOR	$ < end
18541	443	8	Percentile.java	insertionSort	end	int	0	NIL-FOR	j < $
18542	446	12	Percentile.java	insertionSort	saved	double	0	NIL-WHILE	$ < work[i]
18542	446	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	$ >= begin
18542	446	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	saved < work[$]
18542	446	12	Percentile.java	insertionSort	work	double[]	0	NIL-WHILE	saved < $[i]
18542	446	12	Percentile.java	insertionSort	begin	int	0	NIL-WHILE	i >= $
2364	473	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ > 100
2364	473	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ <= 0
2365	504	8	Percentile.java	copy	THIS	Percentile	0	DEF	source.$.cachedPivots != null
2365	504	8	Percentile.java	copy	source	Percentile	0	DEF	$.cachedPivots != null
705	140	8	Plane.java	setNormal	norm	double	0	MathArithmeticException	$ < 1.0e-10
706	310	8	Plane.java	intersection	dot	double	0	RET	FastMath.abs($) < 1.0e-10
707	325	8	Plane.java	intersection	direction	Vector3D	0	RET	$.getNorm() < 1.0e-10
708	362	8	Plane.java	intersection	determinant	double	0	RET	FastMath.abs($) < 1.0e-10
1217	112	8	PoissonDistribution.java	PoissonDistribution	p	double	0	NotStrictlyPositiveException	$ <= 0
1218	165	8	PoissonDistribution.java	probability	x	int	1	DEF	$ < 0
1218	165	8	PoissonDistribution.java	probability	x	int	1	DEF	$ == Integer.MAX_VALUE
1219	167	15	PoissonDistribution.java	probability	x	int	1	DEF	$ == 0
1220	179	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ < 0
1221	182	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
1222	292	8	PoissonDistribution.java	nextPoisson	pivot	double	1	RET	meanPoisson < $
1222	292	8	PoissonDistribution.java	nextPoisson	meanPoisson	double	1	RET	$ < pivot
17354	298	12	PoissonDistribution.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * meanPoisson
17354	298	12	PoissonDistribution.java	nextPoisson	meanPoisson	double	0	NIL-WHILE	n < 1000 * $
1223	301	16	PoissonDistribution.java	nextPoisson	p	double	1	DEF	r >= $
1223	301	16	PoissonDistribution.java	nextPoisson	r	double	1	DEF	$ >= p
1224	333	16	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ <= p1
1224	333	16	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u <= $
1225	336	20	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	x < -$
1225	336	20	PoissonDistribution.java	nextPoisson	delta	double	0	DEF	x > $
1225	336	20	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ < -lambda
1225	336	20	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ > delta
1226	343	20	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
1226	343	20	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u > $ + p2
1226	343	20	PoissonDistribution.java	nextPoisson	p2	double	1	DEF	u > p1 + $
1227	354	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < -t
1227	354	16	PoissonDistribution.java	nextPoisson	a	int	0	DEF	$ == 0
1227	354	16	PoissonDistribution.java	nextPoisson	t	double	0	DEF	v < -$
1228	360	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < qa
1228	360	16	PoissonDistribution.java	nextPoisson	qa	double	0	DEF	v < $
1229	364	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ > qr
1229	364	16	PoissonDistribution.java	nextPoisson	qr	double	0	DEF	v > $
1230	367	16	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + $)) + logLambdaFactorial
1230	367	16	PoissonDistribution.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1230	367	16	PoissonDistribution.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + $
1230	367	16	PoissonDistribution.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - ArithmeticUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
1230	367	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1080	46	8	PollardRho.java	primeFactors	n	int	0	RET	1 == $
1081	50	8	PollardRho.java	primeFactors	n	int	0	RET	SmallPrimes.millerRabinPrimeTest($)
17311	81	12	PollardRho.java	rhoBrent	i	int	0	NIL-FOR	$ < r
17311	81	12	PollardRho.java	rhoBrent	r	int	0	NIL-FOR	i < $
17312	86	12	PollardRho.java	rhoBrent	k	int	0	NIL-DOWHILE	$ < r
17312	86	12	PollardRho.java	rhoBrent	r	int	0	NIL-DOWHILE	k < $
17313	89	16	PollardRho.java	rhoBrent	i	int	0	NIL-FOR	$ < bound
17313	89	16	PollardRho.java	rhoBrent	bound	int	0	NIL-FOR	i < $
1082	93	20	PollardRho.java	rhoBrent	divisor	long	0	DEF	0 == $
1083	102	20	PollardRho.java	rhoBrent	q	int	0	RET	0 == $
1084	107	16	PollardRho.java	rhoBrent	out	int	0	RET	1 != $
1085	136	8	PollardRho.java	gcdPositive	a	int	1	RET	$ == 0
1086	138	15	PollardRho.java	gcdPositive	b	int	0	RET	$ == 0
17314	153	8	PollardRho.java	gcdPositive	a	int	0	NIL-WHILE	$ != b
17314	153	8	PollardRho.java	gcdPositive	b	int	0	NIL-WHILE	a != $
828	177	8	PolygonsSet.java	verticesToTree	n	int	0	RET	$ == 0
17290	184	8	PolygonsSet.java	verticesToTree	i	int	0	NIL-FOR	$ < n
17290	184	8	PolygonsSet.java	verticesToTree	n	int	0	NIL-FOR	i < $
17291	190	8	PolygonsSet.java	verticesToTree	i	int	0	NIL-FOR	$ < n
17291	190	8	PolygonsSet.java	verticesToTree	n	int	0	NIL-FOR	i < $
829	200	12	PolygonsSet.java	verticesToTree	line	Line	0	DEF	$ == null
830	209	16	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	$.vertex != end
830	209	16	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	FastMath.abs(line.getOffset($.vertex.getLocation())) <= hyperplaneThickness
830	209	16	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	$.vertex != start
830	209	16	PolygonsSet.java	verticesToTree	start	Vertex	0	DEF	vertex != $
830	209	16	PolygonsSet.java	verticesToTree	end	Vertex	0	DEF	vertex != $
830	209	16	PolygonsSet.java	verticesToTree	line	Line	0	DEF	FastMath.abs($.getOffset(vertex.getLocation())) <= hyperplaneThickness
830	209	16	PolygonsSet.java	verticesToTree	hyperplaneThickness	double	0	DEF	FastMath.abs(line.getOffset(vertex.getLocation())) <= $
17292	240	8	PolygonsSet.java	insertEdges	index	int	0	NIL-WHILE	$ < edges.size()
17292	240	8	PolygonsSet.java	insertEdges	inserted	Edge	0	NIL-WHILE	$ == null
17292	240	8	PolygonsSet.java	insertEdges	edges	List<Edge>	0	NIL-WHILE	index < $.size()
831	242	12	PolygonsSet.java	insertEdges	inserted	Edge	1	DEF	$.getNode() == null
832	243	16	PolygonsSet.java	insertEdges	inserted	Edge	1	DEF	node.insertCut($.getLine())
832	243	16	PolygonsSet.java	insertEdges	node	BSPTree<Euclidean2D>	1	DEF	$.insertCut(inserted.getLine())
833	253	8	PolygonsSet.java	insertEdges	inserted	Edge	0	RET	$ == null
834	257	12	PolygonsSet.java	insertEdges	parent	BSPTree<Euclidean2D>	1	DEF	node == $.getMinus()
834	257	12	PolygonsSet.java	insertEdges	parent	BSPTree<Euclidean2D>	1	DEF	$ == null
834	257	12	PolygonsSet.java	insertEdges	node	BSPTree<Euclidean2D>	1	DEF	$ == parent.getMinus()
835	270	12	PolygonsSet.java	insertEdges	THIS	PolygonsSet	0	DEF	$.edge != inserted
835	270	12	PolygonsSet.java	insertEdges	inserted	Edge	0	DEF	edge != $
836	279	24	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.MINUS
836	279	24	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.MINUS
837	289	24	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.PLUS
837	289	24	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.PLUS
838	299	24	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.PLUS
838	299	24	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.PLUS
839	301	31	PolygonsSet.java	insertEdges	THIS	PolygonsSet	0	DEF	endSide == $.Side.MINUS
839	301	31	PolygonsSet.java	insertEdges	endSide	Side	0	DEF	$ == Side.MINUS
840	310	8	PolygonsSet.java	insertEdges	plusList	List<Edge>	1	DEF	$.isEmpty()
841	315	8	PolygonsSet.java	insertEdges	minusList	List<Edge>	1	DEF	$.isEmpty()
842	525	8	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	v.$.length == 0
842	525	8	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$.length == 0
843	527	12	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree<Euclidean2D>	1	DEF	(Boolean) $.getAttribute()
843	527	12	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree<Euclidean2D>	1	DEF	$.getCut() == null
844	535	15	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$[0][0] == null
845	561	12	PolygonsSet.java	computeGeometricalProperties	sum	double	1	DEF	$ < 0
846	598	8	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	$.vertices == null
847	599	12	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.getTree(false).getCut() == null
17293	611	16	PolygonsSet.java	getVertices	sorted	AVLTree<ComparableSegment>	0	NIL-WHILE	$.isEmpty()
848	614	20	PolygonsSet.java	getVertices	loop	List<ComparableSegment>	0	DEF	$ != null
849	624	20	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.size() < 2
850	632	27	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.get(0).getStart() == null
851	638	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == 0
852	646	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j < (array.$.length - 1)
852	646	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j < ($.length - 1)
852	646	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ < (array.length - 1)
853	651	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j == (array.$.length - 1)
853	651	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j == ($.length - 1)
853	651	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == (array.length - 1)
17294	697	8	PolygonsSet.java	followLoop	globalStart	Vector2D	0	NIL-WHILE	$.distance(end) > 1.0e-10
17294	697	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	globalStart.distance($) > 1.0e-10
17294	697	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	$ != null
17294	697	8	PolygonsSet.java	followLoop	open	boolean	0	NIL-WHILE	$
17295	705	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$ != null
17295	705	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$.getElement().compareTo(upperRight) <= 0
17295	705	12	PolygonsSet.java	followLoop	upperRight	ComparableSegment	0	NIL-FOR	n.getElement().compareTo($) <= 0
854	710	16	PolygonsSet.java	followLoop	distance	double	0	DEF	$ < selectedDistance
854	710	16	PolygonsSet.java	followLoop	selectedDistance	double	0	DEF	distance < $
855	717	12	PolygonsSet.java	followLoop	selectedDistance	double	0	RET	$ > 1.0e-10
856	730	8	PolygonsSet.java	followLoop	loop	ArrayList<ComparableSegment>	0	RET	$.size() == 2
856	730	8	PolygonsSet.java	followLoop	open	boolean	0	RET	$
857	735	8	PolygonsSet.java	followLoop	end	Vector2D	0	MathInternalError	$ == null
857	735	8	PolygonsSet.java	followLoop	open	boolean	0	MathInternalError	$
766	137	8	PolyhedronsSet.java	computeGeometricalProperties	THIS	PolyhedronsSet	1	DEF	$.getSize() < 0
767	235	8	PolyhedronsSet.java	recurseFirstIntersection	cut	SubHyperplane<Euclidean3D>	0	RET	$ == null
768	247	8	PolyhedronsSet.java	recurseFirstIntersection	offset	double	1	DEF	$ < 0
769	255	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
770	258	12	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
771	265	8	PolyhedronsSet.java	recurseFirstIntersection	crossed	SubHyperplane<Euclidean3D>	0	RET	$ != null
772	269	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
773	272	12	PolyhedronsSet.java	recurseFirstIntersection	hit3D	Vector3D	0	RET	$ != null
774	274	16	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
775	297	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
775	297	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
775	297	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
775	297	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusOutside() != null
776	301	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
776	301	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
776	301	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
776	301	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusInside() != null
4197	72	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NoDataException	$ == 0
19541	75	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	$ > 1
19541	75	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	c[$ - 1] == 0
19541	75	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[n - 1] == 0
4198	132	8	PolynomialFunction.java	evaluate	n	int	0	NoDataException	$ == 0
19542	136	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >= 0
4199	152	8	PolynomialFunction.java	value	n	int	0	NoDataException	$ == 0
19543	157	8	PolynomialFunction.java	value	j	int	0	NIL-FOR	$ >= 0
19544	176	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
19544	176	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
19545	201	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
19545	201	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
4200	204	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
4200	204	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
19546	205	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
19546	205	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
19547	223	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
19547	223	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
19548	238	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
19548	238	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
19548	238	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
19549	240	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < FastMath.min($.coefficients.$.length, i + 1)
19549	240	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < FastMath.min(coefficients.length, i + 1)
19549	240	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < FastMath.min(coefficients.length, $ + 1)
4201	262	8	PolynomialFunction.java	differentiate	n	int	0	NoDataException	$ == 0
4202	265	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
19550	269	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
4203	311	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
4204	312	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
19551	319	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
19551	319	8	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
4205	320	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
4205	320	12	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
4206	321	16	PolynomialFunction.java	toString	s	StringBuilder	1	DEF	$.length() > 0
4207	322	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
4207	322	20	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
4208	328	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
4208	328	20	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
4209	334	16	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
4210	340	16	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
4211	358	8	PolynomialFunction.java	toString	c	String	1	RET	$.endsWith(".0")
4212	377	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
4212	377	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
4213	380	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
4214	384	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
4214	384	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
4189	80	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.verifyInterpolationArray(x, y, false)
4189	80	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	x	double	0	DEF	verifyInterpolationArray($, y, false)
4189	80	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	y	double	0	DEF	verifyInterpolationArray(x, $, false)
4190	149	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
4191	175	8	PolynomialFunctionLagrangeForm.java	evaluate	THIS	PolynomialFunctionLagrangeForm	0	RET	$.verifyInterpolationArray(x, y, false)
4191	175	8	PolynomialFunctionLagrangeForm.java	evaluate	x	double	0	RET	verifyInterpolationArray($, y, false)
4191	175	8	PolynomialFunctionLagrangeForm.java	evaluate	y	double	0	RET	verifyInterpolationArray(x, $, false)
19532	213	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
19532	213	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
4192	219	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	dist	double	0	DEF	$ < min_dist
4192	219	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	min_dist	double	0	DEF	dist < $
19533	228	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
19533	228	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
19534	229	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	j	int	0	NIL-FOR	$ < n-i
19534	229	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	j < n-$
19534	229	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	j < $-i
4193	239	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	1	DEF	nearest < 0.5*(n-$+1)
4193	239	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	nearest	int	1	DEF	$ < 0.5*(n-i+1)
4193	239	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	1	DEF	nearest < 0.5*($-i+1)
19535	259	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
19535	259	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
19536	266	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
19536	266	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
19537	267	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
19538	275	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
19538	275	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
19539	278	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
19539	278	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
4194	279	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
4194	279	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
19540	289	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
4195	318	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DimensionMismatchException	x.$.length != y.$.length
4195	318	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DimensionMismatchException	$.length != y.length
4195	318	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DimensionMismatchException	x.length != $.length
4196	321	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	NumberIsTooSmallException	x.$.length < 2
4196	321	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	NumberIsTooSmallException	$.length < 2
19560	109	8	PolynomialFunctionNewtonForm.java	value	i	int	0	NIL-FOR	$ >= 0
4217	160	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
19561	188	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
19562	203	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
19562	203	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
19563	208	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
19564	209	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
4218	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	c.$.length == 0
4218	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	a.$.length == 0
4218	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	NoDataException	$.length == 0
4218	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	NoDataException	$.length == 0
4219	240	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DimensionMismatchException	a.$.length != c.$.length + 1
4219	240	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DimensionMismatchException	$.length != c.length + 1
4219	240	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DimensionMismatchException	a.length != $.length + 1
4180	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NullArgumentException	$ == null
4180	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	NullArgumentException	$ == null
4181	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	NumberIsTooSmallException	knots.$.length < 2
4181	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NumberIsTooSmallException	$.length < 2
4182	113	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DimensionMismatchException	knots.$.length - 1 != polynomials.$.length
4182	113	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DimensionMismatchException	$.length - 1 != polynomials.length
4182	113	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DimensionMismatchException	knots.length - 1 != $.length
4183	137	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v > $.knots[$.n]
4183	137	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v < $.knots[0]
4183	137	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ > knots[n]
4183	137	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ < knots[0]
4184	141	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
4185	147	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
4185	147	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
19531	169	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
19531	169	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
4186	181	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	t0 < $.knots[0]
4186	181	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	t0 > $.knots[$.n]
4186	181	8	PolynomialSplineFunction.java	value	t0	double	0	OutOfRangeException	$ < knots[0]
4186	181	8	PolynomialSplineFunction.java	value	t0	double	0	OutOfRangeException	$ > knots[n]
4187	185	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
4188	191	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
4188	191	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
4215	219	8	PolynomialsUtils.java	createJacobiPolynomial	key	JacobiKey	0	DEF	JACOBI_COEFFICIENTS.containsKey($)
19552	329	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
19552	329	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
19553	330	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ <= i
19553	330	12	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	j <= $
19554	336	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
19554	336	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
19555	342	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < d
19555	342	8	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	i < $
19556	343	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ < d
19556	343	12	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	j < $
4216	365	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
4216	365	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
19557	381	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
19557	381	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
19558	401	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
19558	401	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
19559	417	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
19559	417	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
3024	124	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
3025	127	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
18905	181	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18905	181	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
18906	200	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18906	200	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3026	211	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
3026	211	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
3026	211	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
3027	224	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
3028	225	16	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	DEF	$ != null
3029	229	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
3030	230	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
3030	230	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
18907	239	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18907	239	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3031	247	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
3031	247	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
3032	254	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
18908	285	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
18908	285	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
3033	375	8	PowellOptimizer.java	checkParameters	THIS	PowellOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
3033	375	8	PowellOptimizer.java	checkParameters	THIS	PowellOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
2194	114	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
2195	117	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
18481	170	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18481	170	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
18482	190	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18482	190	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2196	201	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
2196	201	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
2196	201	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
2197	214	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
2198	215	16	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	DEF	$ != null
2199	219	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
2200	220	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
2200	220	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
18483	229	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
18483	229	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2201	237	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
2201	237	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
2202	244	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
18484	275	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
18484	275	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
220	96	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, eps)
220	96	8	Precision.java	compareTo	x	double	1	RET	equals($, y, eps)
220	96	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, eps)
220	96	8	Precision.java	compareTo	eps	double	1	RET	equals(x, y, $)
221	98	15	Precision.java	compareTo	x	double	0	RET	$ < y
221	98	15	Precision.java	compareTo	y	double	0	RET	x < $
222	122	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, maxUlps)
222	122	8	Precision.java	compareTo	x	double	1	RET	equals($, y, maxUlps)
222	122	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, maxUlps)
222	122	8	Precision.java	compareTo	maxUlps	int	1	RET	equals(x, y, $)
223	124	15	Precision.java	compareTo	x	double	0	RET	$ < y
223	124	15	Precision.java	compareTo	y	double	0	RET	x < $
224	207	8	Precision.java	equals	xInt	int	0	DEF	$ < 0
225	210	8	Precision.java	equals	yInt	int	0	DEF	$ < 0
226	288	8	Precision.java	equalsWithRelativeTolerance	THIS	Precision	0	RET	$.equals(x, y, 1)
226	288	8	Precision.java	equalsWithRelativeTolerance	x	double	0	RET	equals($, y, 1)
226	288	8	Precision.java	equalsWithRelativeTolerance	y	double	0	RET	equals(x, $, 1)
227	335	8	Precision.java	equals	xInt	long	0	DEF	$ < 0
228	338	8	Precision.java	equals	yInt	long	0	DEF	$ < 0
229	400	12	Precision.java	round	x	double	1	RET	Double.isInfinite($)
230	460	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
231	470	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
232	479	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
233	488	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
234	490	19	Precision.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
235	494	16	Precision.java	roundUnscaled	unscaled	double	1	DEF	FastMath.floor($) / 2.0 == FastMath.floor(Math .floor($) / 2.0)
236	506	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
237	514	12	Precision.java	roundUnscaled	unscaled	double	0	MathArithmeticException	$ != FastMath.floor($)
1473	144	8	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$ != null
1474	145	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	NonSquareOperatorException	$.getColumnDimension() != $.getRowDimension()
1475	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	m.getRowDimension() != $.getRowDimension()
1475	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$.getRowDimension() != a.getRowDimension()
1059	55	8	Primes.java	isPrime	n	int	0	RET	$ < 2
1060	60	12	Primes.java	isPrime	THIS	Primes	0	RET	0 == (n % $.p)
1060	60	12	Primes.java	isPrime	n	int	0	RET	0 == ($ % p)
1061	75	8	Primes.java	nextPrime	n	int	0	MathIllegalArgumentException	$ < 0
1062	78	8	Primes.java	nextPrime	n	int	0	RET	$ == 2
1063	82	8	Primes.java	nextPrime	n	int	0	RET	$ == 1
1064	86	8	Primes.java	nextPrime	THIS	Primes	0	RET	$.isPrime(n)
1064	86	8	Primes.java	nextPrime	n	int	0	RET	isPrime($)
1065	93	8	Primes.java	nextPrime	rem	int	1	DEF	0 == $
1066	95	15	Primes.java	nextPrime	rem	int	0	DEF	1 == $
1067	100	12	Primes.java	nextPrime	THIS	Primes	0	RET	$.isPrime(n)
1067	100	12	Primes.java	nextPrime	n	int	0	RET	isPrime($)
1068	104	12	Primes.java	nextPrime	THIS	Primes	0	RET	$.isPrime(n)
1068	104	12	Primes.java	nextPrime	n	int	0	RET	isPrime($)
1069	120	8	Primes.java	primeFactors	n	int	0	MathIllegalArgumentException	$ < 2
2253	125	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length, true)
2253	125	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2253	125	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2253	125	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
18517	127	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18517	127	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18517	127	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2254	165	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, weights, begin, length, true)
2254	165	8	Product.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
2254	165	8	Product.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
2254	165	8	Product.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
2254	165	8	Product.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
18518	167	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18518	167	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18518	167	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1017	100	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
1018	103	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
1019	138	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
1020	149	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
1021	162	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
1022	170	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
1023	201	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
1024	209	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
1025	216	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
1026	220	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
1027	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
1000	101	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
1001	138	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
1002	149	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
1003	162	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
1004	170	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
1005	201	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
1006	209	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
1007	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
17717	111	8	QRDecomposition.java	decompose	THIS	QRDecomposition	0	NIL-FOR	minor < FastMath.min($.qrt.$.length, $.qrt[0].length)
17717	111	8	QRDecomposition.java	decompose	minor	int	0	NIL-FOR	$ < FastMath.min(qrt.length, qrt[0].length)
17718	132	8	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	row < qrtMinor.$.length
17718	132	8	QRDecomposition.java	performHouseholderReflection	row	int	0	NIL-FOR	$ < qrtMinor.length
17718	132	8	QRDecomposition.java	performHouseholderReflection	qrtMinor	double[]	0	NIL-FOR	row < $.length
1495	139	8	QRDecomposition.java	performHouseholderReflection	a	double	0	DEF	$ != 0.0
17719	163	12	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	col < $.qrt.$.length
17719	163	12	QRDecomposition.java	performHouseholderReflection	col	int	0	NIL-FOR	$ < qrt.length
17720	166	16	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	row < qrtCol.$.length
17720	166	16	QRDecomposition.java	performHouseholderReflection	row	int	0	NIL-FOR	$ < qrtCol.length
17720	166	16	QRDecomposition.java	performHouseholderReflection	qrtCol	double[]	0	NIL-FOR	row < $.length
17721	172	16	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	row < qrtCol.$.length
17721	172	16	QRDecomposition.java	performHouseholderReflection	row	int	0	NIL-FOR	$ < qrtCol.length
17721	172	16	QRDecomposition.java	performHouseholderReflection	qrtCol	double[]	0	NIL-FOR	row < $.length
1496	187	8	QRDecomposition.java	getR	THIS	QRDecomposition	0	DEF	$.cachedR == null
17722	194	12	QRDecomposition.java	getR	row	int	0	NIL-FOR	$ >= 0
17723	196	16	QRDecomposition.java	getR	col	int	0	NIL-FOR	$ < n
17723	196	16	QRDecomposition.java	getR	n	int	0	NIL-FOR	col < $
1497	213	8	QRDecomposition.java	getQ	THIS	QRDecomposition	0	DEF	$.cachedQ == null
1498	225	8	QRDecomposition.java	getQT	THIS	QRDecomposition	0	DEF	$.cachedQT == null
17724	237	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= FastMath.min(m, n)
17724	237	12	QRDecomposition.java	getQT	n	int	0	NIL-FOR	minor >= FastMath.min(m, $)
17724	237	12	QRDecomposition.java	getQT	m	int	0	NIL-FOR	minor >= FastMath.min($, n)
17725	241	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= 0
1499	244	16	QRDecomposition.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
1499	244	16	QRDecomposition.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
17726	245	20	QRDecomposition.java	getQT	col	int	0	NIL-FOR	$ < m
17726	245	20	QRDecomposition.java	getQT	m	int	0	NIL-FOR	col < $
17727	247	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
17727	247	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
17728	252	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
17728	252	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
1500	273	8	QRDecomposition.java	getH	THIS	QRDecomposition	0	DEF	$.cachedH == null
17729	278	12	QRDecomposition.java	getH	i	int	0	NIL-FOR	$ < m
17729	278	12	QRDecomposition.java	getH	m	int	0	NIL-FOR	i < $
17730	279	16	QRDecomposition.java	getH	j	int	0	NIL-FOR	$ < FastMath.min(i + 1, n)
17730	279	16	QRDecomposition.java	getH	i	int	0	NIL-FOR	j < FastMath.min($ + 1, n)
17730	279	16	QRDecomposition.java	getH	n	int	0	NIL-FOR	j < FastMath.min(i + 1, $)
949	90	8	Quaternion.java	Quaternion	THIS	Quaternion	0	DimensionMismatchException	v.$.length != 3
949	90	8	Quaternion.java	Quaternion	v	double[]	0	DimensionMismatchException	$.length != 3
950	254	8	Quaternion.java	normalize	norm	double	0	ZeroException	$ < Precision.SAFE_MIN
951	269	8	Quaternion.java	equals	THIS	Quaternion	0	RET	$ == other
951	269	8	Quaternion.java	equals	other	Object	0	RET	this == $
952	272	8	Quaternion.java	equals	other	Object	0	RET	$ instanceof Quaternion
953	343	8	Quaternion.java	getPositivePolarForm	THIS	Quaternion	1	RET	$.getQ0() < 0
954	365	8	Quaternion.java	getInverse	squareNorm	double	0	ZeroException	$ < Precision.SAFE_MIN
17505	88	8	RRQRDecomposition.java	decompose	THIS	RRQRDecomposition	0	NIL-FOR	i < $.p.$.length
17505	88	8	RRQRDecomposition.java	decompose	i	int	0	NIL-FOR	$ < p.length
17506	103	8	RRQRDecomposition.java	performHouseholderReflection	THIS	RRQRDecomposition	0	NIL-FOR	i < qrt.$.length
17506	103	8	RRQRDecomposition.java	performHouseholderReflection	i	int	0	NIL-FOR	$ < qrt.length
17506	103	8	RRQRDecomposition.java	performHouseholderReflection	qrt	double[][]	0	NIL-FOR	i < $.length
17507	105	12	RRQRDecomposition.java	performHouseholderReflection	THIS	RRQRDecomposition	0	NIL-FOR	j < qrt[i].length
17507	105	12	RRQRDecomposition.java	performHouseholderReflection	j	int	0	NIL-FOR	$ < qrt[i].length
17507	105	12	RRQRDecomposition.java	performHouseholderReflection	i	int	0	NIL-FOR	j < qrt[$].length
17507	105	12	RRQRDecomposition.java	performHouseholderReflection	qrt	double[][]	0	NIL-FOR	j < $[i].length
1324	108	12	RRQRDecomposition.java	performHouseholderReflection	l2NormSquared	double	0	DEF	$ > l2NormSquaredMax
1324	108	12	RRQRDecomposition.java	performHouseholderReflection	l2NormSquaredMax	double	0	DEF	l2NormSquared > $
1325	114	8	RRQRDecomposition.java	performHouseholderReflection	l2NormSquaredMaxIndex	int	0	DEF	$ != minor
1325	114	8	RRQRDecomposition.java	performHouseholderReflection	minor	int	0	DEF	l2NormSquaredMaxIndex != $
1326	136	8	RRQRDecomposition.java	getP	THIS	RRQRDecomposition	0	DEF	$.cachedP == null
17508	139	12	RRQRDecomposition.java	getP	i	int	0	NIL-FOR	$ < n
17508	139	12	RRQRDecomposition.java	getP	n	int	0	NIL-FOR	i < $
17509	172	8	RRQRDecomposition.java	getRank	rows	int	0	NIL-WHILE	rank < FastMath.min($, columns)
17509	172	8	RRQRDecomposition.java	getRank	columns	int	0	NIL-WHILE	rank < FastMath.min(rows, $)
17509	172	8	RRQRDecomposition.java	getRank	rank	int	0	NIL-WHILE	$ < FastMath.min(rows, columns)
1327	174	12	RRQRDecomposition.java	getRank	thisNorm	double	0	DEF	$ == 0
1327	174	12	RRQRDecomposition.java	getRank	thisNorm	double	0	DEF	($ / lastNorm) * rNorm < dropThreshold
1327	174	12	RRQRDecomposition.java	getRank	lastNorm	double	0	DEF	(thisNorm / $) * rNorm < dropThreshold
1327	174	12	RRQRDecomposition.java	getRank	rNorm	double	0	DEF	(thisNorm / lastNorm) * $ < dropThreshold
1327	174	12	RRQRDecomposition.java	getRank	dropThreshold	double	0	DEF	(thisNorm / lastNorm) * rNorm < $
3148	178	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
3149	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
3150	193	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
3160	161	8	RandomDataGenerator.java	nextHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
19027	176	8	RandomDataGenerator.java	nextHexString	THIS	RandomDataGenerator	0	NIL-FOR	i < randomBytes.$.length
19027	176	8	RandomDataGenerator.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
19027	176	8	RandomDataGenerator.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
3161	187	12	RandomDataGenerator.java	nextHexString	hex	String	0	DEF	$.length() == 1
3162	197	8	RandomDataGenerator.java	nextInt	lower	int	0	NumberIsTooLargeException	$ >= upper
3162	197	8	RandomDataGenerator.java	nextInt	upper	int	0	NumberIsTooLargeException	lower >= $
3163	202	8	RandomDataGenerator.java	nextInt	max	int	1	RET	$ <= 0
3164	208	16	RandomDataGenerator.java	nextInt	r	int	0	RET	$ >= lower
3164	208	16	RandomDataGenerator.java	nextInt	r	int	0	RET	$ <= upper
3164	208	16	RandomDataGenerator.java	nextInt	lower	int	0	RET	r >= $
3164	208	16	RandomDataGenerator.java	nextInt	upper	int	0	RET	r <= $
3165	220	8	RandomDataGenerator.java	nextLong	lower	long	0	NumberIsTooLargeException	$ >= upper
3165	220	8	RandomDataGenerator.java	nextLong	upper	long	0	NumberIsTooLargeException	lower >= $
3166	225	8	RandomDataGenerator.java	nextLong	max	long	1	RET	$ <= 0
3167	231	16	RandomDataGenerator.java	nextLong	r	long	0	RET	$ <= upper
3167	231	16	RandomDataGenerator.java	nextLong	r	long	0	RET	$ >= lower
3167	231	16	RandomDataGenerator.java	nextLong	lower	long	0	RET	r >= $
3167	231	16	RandomDataGenerator.java	nextLong	upper	long	0	RET	r <= $
3168	235	15	RandomDataGenerator.java	nextLong	max	long	1	RET	$ < Integer.MAX_VALUE
3169	257	8	RandomDataGenerator.java	nextLong	n	long	0	RET	$ > 0
19028	261	12	RandomDataGenerator.java	nextLong	bits	long	0	NIL-DOWHILE	$ - val + (n - 1) < 0
19028	261	12	RandomDataGenerator.java	nextLong	val	long	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
19028	261	12	RandomDataGenerator.java	nextLong	n	long	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
3170	293	8	RandomDataGenerator.java	nextSecureHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
19029	312	8	RandomDataGenerator.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
19029	312	8	RandomDataGenerator.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
19030	321	12	RandomDataGenerator.java	nextSecureHexString	THIS	RandomDataGenerator	0	NIL-FOR	i < hash.$.length
19030	321	12	RandomDataGenerator.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
19030	321	12	RandomDataGenerator.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
3171	332	16	RandomDataGenerator.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
3172	343	8	RandomDataGenerator.java	nextSecureInt	lower	int	0	NumberIsTooLargeException	$ >= upper
3172	343	8	RandomDataGenerator.java	nextSecureInt	upper	int	0	NumberIsTooLargeException	lower >= $
3173	348	8	RandomDataGenerator.java	nextSecureInt	max	int	1	RET	$ <= 0
3174	354	16	RandomDataGenerator.java	nextSecureInt	r	int	0	RET	$ >= lower
3174	354	16	RandomDataGenerator.java	nextSecureInt	r	int	0	RET	$ <= upper
3174	354	16	RandomDataGenerator.java	nextSecureInt	lower	int	0	RET	r >= $
3174	354	16	RandomDataGenerator.java	nextSecureInt	upper	int	0	RET	r <= $
3175	366	8	RandomDataGenerator.java	nextSecureLong	lower	long	0	NumberIsTooLargeException	$ >= upper
3175	366	8	RandomDataGenerator.java	nextSecureLong	upper	long	0	NumberIsTooLargeException	lower >= $
3176	371	8	RandomDataGenerator.java	nextSecureLong	max	long	1	RET	$ <= 0
3177	377	16	RandomDataGenerator.java	nextSecureLong	r	long	0	RET	$ <= upper
3177	377	16	RandomDataGenerator.java	nextSecureLong	r	long	0	RET	$ >= lower
3177	377	16	RandomDataGenerator.java	nextSecureLong	lower	long	0	RET	r >= $
3177	377	16	RandomDataGenerator.java	nextSecureLong	upper	long	0	RET	r <= $
3178	381	15	RandomDataGenerator.java	nextSecureLong	max	long	1	RET	$ < Integer.MAX_VALUE
3179	403	8	RandomDataGenerator.java	nextLong	n	long	0	RET	$ > 0
19031	407	12	RandomDataGenerator.java	nextLong	bits	long	0	NIL-DOWHILE	$ - val + (n - 1) < 0
19031	407	12	RandomDataGenerator.java	nextLong	val	long	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
19031	407	12	RandomDataGenerator.java	nextLong	n	long	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
3180	443	8	RandomDataGenerator.java	nextGaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
3181	658	8	RandomDataGenerator.java	nextUniform	lower	double	0	NumberIsTooLargeException	$ >= upper
3181	658	8	RandomDataGenerator.java	nextUniform	upper	double	0	NumberIsTooLargeException	lower >= $
3182	663	8	RandomDataGenerator.java	nextUniform	lower	double	0	NotFiniteNumberException	Double.isInfinite($)
3183	666	8	RandomDataGenerator.java	nextUniform	upper	double	0	NotFiniteNumberException	Double.isInfinite($)
3184	670	8	RandomDataGenerator.java	nextUniform	lower	double	0	NotANumberException	Double.isNaN($)
3184	670	8	RandomDataGenerator.java	nextUniform	upper	double	0	NotANumberException	Double.isNaN($)
19032	678	8	RandomDataGenerator.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
19032	678	8	RandomDataGenerator.java	nextUniform	lowerInclusive	boolean	0	NIL-WHILE	$
3185	698	8	RandomDataGenerator.java	nextPermutation	n	int	0	NumberIsTooLargeException	k > $
3185	698	8	RandomDataGenerator.java	nextPermutation	k	int	0	NumberIsTooLargeException	$ > n
3186	702	8	RandomDataGenerator.java	nextPermutation	k	int	0	NotStrictlyPositiveException	$ <= 0
19033	710	8	RandomDataGenerator.java	nextPermutation	i	int	0	NIL-FOR	$ < k
19033	710	8	RandomDataGenerator.java	nextPermutation	k	int	0	NIL-FOR	i < $
3187	733	8	RandomDataGenerator.java	nextSample	len	int	0	NumberIsTooLargeException	k > $
3187	733	8	RandomDataGenerator.java	nextSample	k	int	0	NumberIsTooLargeException	$ > len
3188	737	8	RandomDataGenerator.java	nextSample	k	int	0	NotStrictlyPositiveException	$ <= 0
19034	744	8	RandomDataGenerator.java	nextSample	i	int	0	NIL-FOR	$ < k
19034	744	8	RandomDataGenerator.java	nextSample	k	int	0	NIL-FOR	i < $
3189	827	8	RandomDataGenerator.java	getRandomGenerator	THIS	RandomDataGenerator	0	DEF	$.rand == null
3190	851	8	RandomDataGenerator.java	getSecRan	THIS	RandomDataGenerator	0	DEF	$.secRand == null
19035	867	8	RandomDataGenerator.java	shuffle	i	int	0	NIL-FOR	$ >= end
19035	867	8	RandomDataGenerator.java	shuffle	end	int	0	NIL-FOR	i >= $
3191	868	12	RandomDataGenerator.java	shuffle	i	int	1	DEF	$ == 0
19036	888	8	RandomDataGenerator.java	getNatural	i	int	0	NIL-FOR	$ < n
19036	888	8	RandomDataGenerator.java	getNatural	n	int	0	NIL-FOR	i < $
3238	121	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	representation.size() != $
3238	121	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	DimensionMismatchException	$.size() != l
3239	124	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	sortedRepr.size() != $
3239	124	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	DimensionMismatchException	$.size() != l
19053	133	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
19053	133	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
3240	151	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
3241	156	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
3241	156	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
19054	165	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
19054	165	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
3242	166	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
3242	166	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
3242	166	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
3243	182	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
3243	182	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
19055	199	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
19055	199	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
19056	214	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
19056	214	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
3244	262	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	DimensionMismatchException	$.size() != permutedData.size()
3244	262	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	DimensionMismatchException	originalData.size() != $.size()
19057	270	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
19057	270	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
3245	272	12	RandomKey.java	inducedPermutation	index	int	0	MathIllegalArgumentException	$ == -1
19058	294	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
19058	294	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
3213	40	8	RandomKeyMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof RandomKey<?>
17510	256	8	RealMatrixFormat.java	format	i	int	0	NIL-FOR	$ < rows
17510	256	8	RealMatrixFormat.java	format	rows	int	0	NIL-FOR	i < $
17511	258	12	RealMatrixFormat.java	format	j	int	0	NIL-FOR	$ < matrix.getColumnDimension()
17511	258	12	RealMatrixFormat.java	format	matrix	RealMatrix	0	NIL-FOR	j < $.getColumnDimension()
1328	259	16	RealMatrixFormat.java	format	j	int	0	DEF	$ > 0
1329	265	12	RealMatrixFormat.java	format	i	int	0	DEF	$ < rows - 1
1329	265	12	RealMatrixFormat.java	format	rows	int	0	DEF	i < $ - 1
1330	287	8	RealMatrixFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1331	314	8	RealMatrixFormat.java	parse	trimmedPrefix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1331	314	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1331	314	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
17512	321	8	RealMatrixFormat.java	parse	loop	boolean	0	NIL-FOR	$
1332	323	12	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	RET	$.isEmpty()
1333	325	16	RealMatrixFormat.java	parse	trimmedColumnSeparator	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1333	325	16	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedColumnSeparator, pos)
1333	325	16	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, $)
1334	326	20	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	$.length() != 0
1334	326	20	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	CompositeFormat.parseFixedstring(source, $, pos)
1334	326	20	RealMatrixFormat.java	parse	source	String	1	RET	CompositeFormat.parseFixedstring($, trimmedRowSuffix, pos)
1334	326	20	RealMatrixFormat.java	parse	pos	ParsePosition	1	RET	CompositeFormat.parseFixedstring(source, trimmedRowSuffix, $)
1335	331	24	RealMatrixFormat.java	parse	trimmedRowSeparator	String	1	DEF	CompositeFormat.parseFixedstring(source, $, pos)
1335	331	24	RealMatrixFormat.java	parse	source	String	1	DEF	CompositeFormat.parseFixedstring($, trimmedRowSeparator, pos)
1335	331	24	RealMatrixFormat.java	parse	pos	ParsePosition	1	DEF	CompositeFormat.parseFixedstring(source, trimmedRowSeparator, $)
1336	342	16	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	$.length() != 0
1336	342	16	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1336	342	16	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedRowPrefix, pos)
1336	342	16	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedRowPrefix, $)
1337	348	12	RealMatrixFormat.java	parse	loop	boolean	0	RET	$
1338	351	16	RealMatrixFormat.java	parse	component	Number	1	DEF	$ != null
1339	354	20	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	DEF	$.isEmpty()
1340	367	8	RealMatrixFormat.java	parse	rowComponents	List<Number>	0	DEF	$.isEmpty()
1341	373	8	RealMatrixFormat.java	parse	trimmedSuffix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1341	373	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1341	373	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
1342	378	8	RealMatrixFormat.java	parse	matrix	List<List<Number>>	0	RET	$.isEmpty()
17513	388	12	RealMatrixFormat.java	parse	THIS	RealMatrixFormat	0	NIL-FOR	i < $.rowList.size()
17513	388	12	RealMatrixFormat.java	parse	i	int	0	NIL-FOR	$ < rowList.size()
1769	178	8	RealVector.java	checkVectorDimensions	d	int	0	DimensionMismatchException	$ != n
1769	178	8	RealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	d != $
1770	190	8	RealVector.java	checkIndex	THIS	RealVector	0	OutOfRangeException	index >= $.getDimension()
1770	190	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1770	190	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1771	209	8	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	start >= $
1771	209	8	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ >= dim
1771	209	8	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ < 0
1772	213	8	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	end >= $
1772	213	8	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ < 0
1772	213	8	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ >= dim
1773	217	8	RealVector.java	checkIndices	start	int	0	NumberIsTooSmallException	end < $
1773	217	8	RealVector.java	checkIndices	end	int	0	NumberIsTooSmallException	$ < start
18138	237	8	RealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
18139	258	8	RealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1774	285	8	RealVector.java	mapAddToSelf	d	double	0	RET	$ != 0
18140	310	8	RealVector.java	dotProduct	i	int	0	NIL-FOR	$ < n
18140	310	8	RealVector.java	dotProduct	n	int	0	NIL-FOR	i < $
1775	332	8	RealVector.java	cosine	norm	double	0	MathArithmeticException	$ == 0
1775	332	8	RealVector.java	cosine	vNorm	double	0	MathArithmeticException	$ == 0
18141	399	8	RealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
18142	420	8	RealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
18143	441	8	RealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
18144	461	8	RealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
18145	484	8	RealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
18146	510	8	RealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
18147	527	8	RealVector.java	getMinIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1776	529	12	RealVector.java	getMinIndex	entry	Entry	0	DEF	$.getValue() <= minValue
1776	529	12	RealVector.java	getMinIndex	minValue	double	0	DEF	entry.getValue() <= $
18148	558	8	RealVector.java	getMaxIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1777	560	12	RealVector.java	getMaxIndex	entry	Entry	0	DEF	$.getValue() >= maxValue
1777	560	12	RealVector.java	getMaxIndex	maxValue	double	0	DEF	entry.getValue() >= $
1778	656	8	RealVector.java	outerProduct	v	RealVector	1	DEF	$ instanceof SparseRealVector
18149	661	8	RealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
18149	661	8	RealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
18150	662	12	RealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
18150	662	12	RealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1779	682	8	RealVector.java	projection	norm2	double	0	MathArithmeticException	$ == 0.0
18151	695	8	RealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
18152	711	8	RealVector.java	toArray	i	int	0	NIL-FOR	$ < dim
18152	711	8	RealVector.java	toArray	dim	int	0	NIL-FOR	i < $
1780	726	8	RealVector.java	unitVector	norm	double	0	MathArithmeticException	$ == 0
1781	740	8	RealVector.java	unitize	norm	double	0	MathArithmeticException	$ == 0
18153	845	8	RealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
18154	885	8	RealVector.java	combineToSelf	THIS	RealVector	0	NIL-FOR	i < $.getDimension()
18154	885	8	RealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < getDimension()
18155	906	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
18155	906	8	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
18156	930	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
18156	930	8	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
18157	986	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
18157	986	8	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
18158	1010	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
18158	1010	8	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
17880	202	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
17880	202	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
1611	203	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
1612	226	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1613	246	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
1613	246	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1613	246	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
17881	252	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
1614	254	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
1615	256	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
1615	256	16	RealVectorFormat.java	parse	source	String	0	DEF	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
1615	256	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
1616	261	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
1617	264	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
1618	278	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
1618	278	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1618	278	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
17882	284	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
17882	284	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
17882	284	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
18026	90	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
18026	90	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
18027	95	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	loop	boolean	0	NIL-FOR	$
18028	99	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
18028	99	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1675	102	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ii	int	0	DEF	c[$][$] > c[isr][isr]
1675	102	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	isr	int	0	DEF	c[ii][ii] > c[$][$]
1675	102	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	DEF	$[ii][ii] > $[isr][isr]
1676	109	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	swapR	int	0	DEF	$ != r
1676	109	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	DEF	swapR != $
1677	120	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ir	int	1	NonPositiveDefiniteMatrixException	c[$][$] <= small
1677	120	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	1	NonPositiveDefiniteMatrixException	$[ir][ir] <= small
1677	120	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	1	NonPositiveDefiniteMatrixException	c[ir][ir] <= $
1678	122	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NonPositiveDefiniteMatrixException	$ == 0
18029	127	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
18029	127	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1679	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1679	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	NonPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1679	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	index	int[]	0	NonPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1679	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	0	NonPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
18030	146	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
18030	146	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
18031	151	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < i
18031	151	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	j < $
18032	167	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
18032	167	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
18033	168	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < r
18033	168	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NIL-FOR	j < $
652	44	8	RegionFactory.java	buildConvex	THIS	RegionFactory	0	RET	hyperplanes.$.length == 0
652	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$.length == 0
652	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$ == null
653	55	12	RegionFactory.java	buildConvex	THIS	RegionFactory	0	DEF	node.insertCut($.hyperplane)
653	55	12	RegionFactory.java	buildConvex	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
654	137	8	RegionFactory.java	recurseComplement	node	BSPTree<S>	0	RET	$.getCut() == null
655	143	8	RegionFactory.java	recurseComplement	attribute	BoundaryAttribute<S>	0	DEF	$ != null
2610	100	8	RegressionResults.java	RegressionResults	copyData	boolean	1	DEF	$
18679	103	12	RegressionResults.java	RegressionResults	THIS	RegressionResults	0	NIL-FOR	i < varcov.$.length
18679	103	12	RegressionResults.java	RegressionResults	i	int	0	NIL-FOR	$ < varcov.length
18679	103	12	RegressionResults.java	RegressionResults	varcov	double[][]	0	NIL-FOR	i < $.length
2611	117	8	RegressionResults.java	RegressionResults	rank	int	0	DEF	$ > 0
2612	129	8	RegressionResults.java	RegressionResults	containsConstant	boolean	1	DEF	$
2613	151	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2614	154	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2614	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ < 0
2614	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2615	171	8	RegressionResults.java	getParameterEstimates	THIS	RegressionResults	0	RET	$.parameters == null
2616	188	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2617	191	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2617	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ < 0
2617	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2618	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	Double.isNaN($)
2618	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	$ > Double.MIN_VALUE
2619	213	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	RET	$.parameters == null
18680	217	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	NIL-FOR	i < $.parameters.length
18680	217	8	RegressionResults.java	getStdErrorOfEstimates	i	int	0	NIL-FOR	$ < this.parameters.length
2620	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	Double.isNaN($)
2620	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	$ > Double.MIN_VALUE
2621	241	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2622	244	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	i >= $.parameters.length
2622	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ < 0
2622	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ >= this.parameters.length
2623	247	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	j >= $.parameters.length
2623	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ >= this.parameters.length
2623	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ < 0
2624	262	8	RegressionResults.java	getNumberOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2625	401	8	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.isSymmetricVCD
2626	402	12	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.varCovData.length > 1
2627	404	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ == j
2627	404	16	RegressionResults.java	getVcvElement	j	int	1	RET	i == $
2628	406	23	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	i >= $.varCovData[j].length
2628	406	23	RegressionResults.java	getVcvElement	i	int	1	RET	$ >= varCovData[j].length
2628	406	23	RegressionResults.java	getVcvElement	j	int	1	RET	i >= varCovData[$].length
2629	412	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ > j
2629	412	16	RegressionResults.java	getVcvElement	j	int	1	RET	i > $
190	401	8	ResizableDoubleArray.java	ResizableDoubleArray	initialCapacity	int	0	NotStrictlyPositiveException	$ <= 0
191	414	8	ResizableDoubleArray.java	ResizableDoubleArray	data	double	0	DEF	$ != null
192	441	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.internalArray.$.length <= $.startIndex + $.numElements
193	481	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
194	491	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
195	509	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	MathIllegalStateException	$.numElements < 1
196	555	8	ResizableDoubleArray.java	checkContractExpand	contraction	double	0	DEF	$ < expansion
196	555	8	ResizableDoubleArray.java	checkContractExpand	expansion	double	0	DEF	contraction < $
197	562	8	ResizableDoubleArray.java	checkContractExpand	contraction	double	0	DEF	$ <= 1
198	569	8	ResizableDoubleArray.java	checkContractExpand	expansion	double	0	DEF	$ <= 1
199	655	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	MathIllegalArgumentException	i > $.numElements
199	655	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ > numElements
200	659	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ < 0
201	666	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
202	670	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
203	691	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == $.ExpansionMode.MULTIPLICATIVE
204	760	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	ArrayIndexOutOfBoundsException	index >= $.numElements
204	760	8	ResizableDoubleArray.java	getElement	index	int	1	ArrayIndexOutOfBoundsException	$ >= numElements
205	762	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
206	952	8	ResizableDoubleArray.java	setElement	index	int	0	ArrayIndexOutOfBoundsException	$ < 0
207	955	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
207	955	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
208	958	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
208	958	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
209	996	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != ADDITIVE_MODE
209	996	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != MULTIPLICATIVE_MODE
210	1003	12	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	1	DEF	$ == MULTIPLICATIVE_MODE
211	1005	19	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ == ADDITIVE_MODE
212	1047	8	ResizableDoubleArray.java	setNumElements	i	int	0	MathIllegalArgumentException	$ < 0
213	1056	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	newSize > $.internalArray.$.length
213	1056	8	ResizableDoubleArray.java	setNumElements	newSize	int	0	DEF	$ > internalArray.length
214	1071	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == $.ExpansionMode.MULTIPLICATIVE
215	1154	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
215	1154	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
216	1157	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
217	1169	16	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
4049	82	8	RiddersSolver.java	doSolve	y1	double	0	RET	$ == 0
4050	85	8	RiddersSolver.java	doSolve	y2	double	0	RET	$ == 0
4051	99	12	RiddersSolver.java	doSolve	y3	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4051	99	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y3) <= $
4052	110	12	RiddersSolver.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
4052	110	12	RiddersSolver.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
4052	110	12	RiddersSolver.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
4053	113	12	RiddersSolver.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4053	113	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
4054	119	12	RiddersSolver.java	doSolve	correction	double	1	DEF	$ > 0.0
4055	120	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y1) + FastMath.signum($) == 0.0
4055	120	16	RiddersSolver.java	doSolve	y1	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
4056	130	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y2) + FastMath.signum($) == 0.0
4056	130	16	RiddersSolver.java	doSolve	y2	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
4248	64	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
4249	86	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
19582	124	12	RombergIntegrator.java	doIntegrate	j	int	0	NIL-FOR	$ <= i
19582	124	12	RombergIntegrator.java	doIntegrate	i	int	0	NIL-FOR	j <= $
4250	131	12	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	i >= $.getMinimalIterationCount()
4250	131	12	RombergIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
4251	134	16	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4251	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4251	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4251	134	16	RombergIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
871	91	8	RootsOfUnity.java	isCounterClockWise	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
872	119	8	RootsOfUnity.java	computeRoots	n	int	0	ZeroException	$ == 0
873	129	8	RootsOfUnity.java	computeRoots	THIS	RootsOfUnity	0	RET	absN == $.omegaCount
873	129	8	RootsOfUnity.java	computeRoots	absN	int	0	RET	$ == omegaCount
17300	143	8	RootsOfUnity.java	computeRoots	i	int	0	NIL-FOR	$ < absN
17300	143	8	RootsOfUnity.java	computeRoots	absN	int	0	NIL-FOR	i < $
874	165	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
875	169	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
875	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ >= omegaCount
875	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ < 0
876	192	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
877	196	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
877	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ >= omegaCount
877	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ < 0
712	138	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
713	178	4	Rotation.java	Rotation	norm	double	0	MathIllegalArgumentException	$ == 0
714	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
714	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
714	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
714	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
714	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
714	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
714	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
714	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
715	240	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
716	331	4	Rotation.java	Rotation	normProduct	double	0	MathArithmeticException	$ == 0
717	337	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
717	337	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
718	409	6	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
719	418	10	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
720	427	14	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
721	495	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
722	497	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
723	510	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
723	510	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
724	512	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
725	556	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
726	565	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
726	565	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
727	574	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
728	583	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
728	583	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
729	592	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
730	601	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
730	601	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
731	610	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
732	619	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
732	619	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
733	628	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
734	637	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
734	637	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
735	646	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
736	655	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
736	655	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
737	664	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
738	673	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
738	673	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
739	682	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
740	691	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
740	691	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
741	700	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
742	709	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
742	709	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
743	718	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
744	727	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
744	727	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
745	736	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
746	745	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
746	745	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
747	763	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
747	763	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
17284	961	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
748	1002	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
748	1002	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
748	1002	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
19223	108	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
19223	108	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
19224	127	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
19225	135	6	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
19225	135	6	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
19226	137	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
19226	137	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
19226	137	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
19227	139	14	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
19227	139	14	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
19228	150	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
19228	150	6	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
19228	150	6	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
19229	152	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
19229	152	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
3477	164	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	$.isLastStep
3478	172	10	RungeKuttaIntegrator.java	integrate	nextIsLast	boolean	0	DEF	$
3367	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
3367	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
19123	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
19123	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
19123	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
19124	157	4	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
19124	157	4	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
19125	163	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
19125	163	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
19126	164	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
19126	164	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
3368	183	4	RungeKuttaStepInterpolator.java	readExternal	n	int	1	DEF	$ < 0
19127	187	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
19127	187	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
19128	194	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
19128	194	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
19129	196	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
19129	196	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
3369	203	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
1241	109	8	SaddlePointExpansion.java	getStirlingError	z	double	1	DEF	$ < 15.0
1242	111	12	SaddlePointExpansion.java	getStirlingError	z2	double	1	DEF	FastMath.floor($) == $
1243	147	8	SaddlePointExpansion.java	getDeviancePart	x	double	1	DEF	FastMath.abs($ - mu) < 0.1 * ($ + mu)
1243	147	8	SaddlePointExpansion.java	getDeviancePart	mu	double	1	DEF	FastMath.abs(x - $) < 0.1 * (x + $)
17363	155	12	SaddlePointExpansion.java	getDeviancePart	s1	double	0	NIL-WHILE	$ != s
17363	155	12	SaddlePointExpansion.java	getDeviancePart	s	double	0	NIL-WHILE	s1 != $
1244	180	8	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == 0
1245	181	12	SaddlePointExpansion.java	logBinomialProbability	p	double	1	DEF	$ < 0.1
1246	186	15	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == n
1246	186	15	SaddlePointExpansion.java	logBinomialProbability	n	int	1	DEF	x == $
1247	187	12	SaddlePointExpansion.java	logBinomialProbability	q	double	1	DEF	$ < 0.1
1627	70	8	SchurTransformer.java	SchurTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1628	93	8	SchurTransformer.java	getP	THIS	SchurTransformer	0	DEF	$.cachedP == null
1629	106	8	SchurTransformer.java	getPT	THIS	SchurTransformer	0	DEF	$.cachedPt == null
1630	120	8	SchurTransformer.java	getT	THIS	SchurTransformer	0	DEF	$.cachedT == null
17897	144	8	SchurTransformer.java	transform	iu	int	0	NIL-WHILE	$ >= 0
1631	150	12	SchurTransformer.java	transform	il	int	1	DEF	$ == iu
1631	150	12	SchurTransformer.java	transform	iu	int	1	DEF	il == $
1632	155	19	SchurTransformer.java	transform	il	int	1	DEF	$ == iu - 1
1632	155	19	SchurTransformer.java	transform	iu	int	1	DEF	il == $ - 1
1633	162	16	SchurTransformer.java	transform	q	double	0	DEF	$ >= 0
1634	164	20	SchurTransformer.java	transform	p	double	1	DEF	$ >= 0
17898	178	20	SchurTransformer.java	transform	j	int	0	NIL-FOR	$ < n
17898	178	20	SchurTransformer.java	transform	n	int	0	NIL-FOR	j < $
17899	185	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= iu
17899	185	20	SchurTransformer.java	transform	iu	int	0	NIL-FOR	i <= $
17900	192	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= n - 1
17900	192	20	SchurTransformer.java	transform	n	int	0	NIL-FOR	i <= $ - 1
1635	205	16	SchurTransformer.java	transform	iteration	int	0	MaxCountExceededException	++$ > MAX_ITERATIONS
17901	226	8	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	i < $.matrixT.$.length
17901	226	8	SchurTransformer.java	getNorm	i	int	0	NIL-FOR	$ < matrixT.length
17902	228	12	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	j < $.matrixT.$.length
17902	228	12	SchurTransformer.java	getNorm	j	int	0	NIL-FOR	$ < matrixT.length
17903	244	8	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	NIL-WHILE	$ > 0
1636	246	12	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	$ == 0.0
1637	249	12	SchurTransformer.java	findSmallSubDiagonalElement	THIS	SchurTransformer	0	DEF	FastMath.abs($.matrixT[l][l - 1]) < $.epsilon * s
1637	249	12	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	FastMath.abs(matrixT[l][l - 1]) < epsilon * $
1637	249	12	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	DEF	FastMath.abs(matrixT[$][$ - 1]) < epsilon * s
1638	269	8	SchurTransformer.java	computeShift	l	int	0	DEF	$ < idx
1638	269	8	SchurTransformer.java	computeShift	idx	int	0	DEF	l < $
1639	275	8	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 10
17904	277	12	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
17904	277	12	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
1640	287	8	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 30
1641	290	12	SchurTransformer.java	computeShift	s	double	0	DEF	$ > 0.0
1642	292	16	SchurTransformer.java	computeShift	THIS	SchurTransformer	0	DEF	shift.$.y < shift.$.x
1642	292	16	SchurTransformer.java	computeShift	shift	ShiftInfo	0	DEF	$.y < $.x
17905	296	16	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
17905	296	16	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
17906	317	8	SchurTransformer.java	initQRStep	im	int	0	NIL-WHILE	$ >= il
17906	317	8	SchurTransformer.java	initQRStep	il	int	0	NIL-WHILE	im >= $
1643	325	12	SchurTransformer.java	initQRStep	im	int	0	DEF	$ == il
1643	325	12	SchurTransformer.java	initQRStep	il	int	0	DEF	im == $
1644	334	12	SchurTransformer.java	initQRStep	THIS	SchurTransformer	0	DEF	lhs < $.epsilon * rhs
1644	334	12	SchurTransformer.java	initQRStep	lhs	double	0	DEF	$ < epsilon * rhs
1644	334	12	SchurTransformer.java	initQRStep	rhs	double	0	DEF	lhs < epsilon * $
17907	360	8	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	$ <= iu - 1
17907	360	8	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	k <= $ - 1
1645	362	12	SchurTransformer.java	performDoubleQRStep	k	int	0	DEF	$ != im
1645	362	12	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	k != $
1646	367	16	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	Precision.equals(shift.$.x, 0.0, $.epsilon)
1646	367	16	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	Precision.equals($.x, 0.0, epsilon)
1647	373	12	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	shift.$.x == 0.0
1647	373	12	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	$.x == 0.0
1648	377	12	SchurTransformer.java	performDoubleQRStep	p	double	0	DEF	$ < 0.0
1649	380	12	SchurTransformer.java	performDoubleQRStep	s	double	0	DEF	$ != 0.0
1650	381	16	SchurTransformer.java	performDoubleQRStep	k	int	1	DEF	$ != im
1650	381	16	SchurTransformer.java	performDoubleQRStep	im	int	1	DEF	k != $
1651	383	23	SchurTransformer.java	performDoubleQRStep	il	int	0	DEF	$ != im
1651	383	23	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	il != $
17908	394	16	SchurTransformer.java	performDoubleQRStep	j	int	0	NIL-FOR	$ < n
17908	394	16	SchurTransformer.java	performDoubleQRStep	n	int	0	NIL-FOR	j < $
1652	396	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
17909	405	16	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= FastMath.min(iu, k + 3)
17909	405	16	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	i <= FastMath.min(iu, $ + 3)
17909	405	16	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	i <= FastMath.min($, k + 3)
1653	407	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
17910	417	16	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= high
17910	417	16	SchurTransformer.java	performDoubleQRStep	high	int	0	NIL-FOR	i <= $
1654	419	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
17911	430	8	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= iu
17911	430	8	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	i <= $
1655	432	12	SchurTransformer.java	performDoubleQRStep	i	int	0	DEF	$ > im + 2
1655	432	12	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	i > $ + 2
2690	49	8	SearchInterval.java	SearchInterval	lo	double	0	NumberIsTooLargeException	$ >= hi
2690	49	8	SearchInterval.java	SearchInterval	hi	double	0	NumberIsTooLargeException	lo >= $
2691	52	8	SearchInterval.java	SearchInterval	lo	double	0	OutOfRangeException	init < $
2691	52	8	SearchInterval.java	SearchInterval	hi	double	0	OutOfRangeException	init > $
2691	52	8	SearchInterval.java	SearchInterval	init	double	0	OutOfRangeException	$ < lo
2691	52	8	SearchInterval.java	SearchInterval	init	double	0	OutOfRangeException	$ > hi
4070	87	8	SecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
4071	90	8	SecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
4072	111	12	SecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
4073	124	12	SecantSolver.java	doSolve	f1	double	0	RET	FastMath.abs($) <= ftol
4073	124	12	SecantSolver.java	doSolve	ftol	double	0	RET	FastMath.abs(f1) <= $
4074	130	12	SecantSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
4074	130	12	SecantSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
4074	130	12	SecantSolver.java	doSolve	atol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
4074	130	12	SecantSolver.java	doSolve	rtol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
2293	82	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
827	97	8	Segment.java	distance	r	double	1	RET	$ < 0
827	97	8	Segment.java	distance	r	double	1	RET	$ > 1
2303	268	8	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 0
2303	268	8	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 0
2304	271	12	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 1
2304	271	12	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 1
18531	278	16	SemiVariance.java	evaluate	i	int	0	NIL-FOR	$ < length
18531	278	16	SemiVariance.java	evaluate	length	int	0	NIL-FOR	i < $
2305	279	20	SemiVariance.java	evaluate	i	int	0	DEF	(values[$] > cutoff) == booleanDirection
2305	279	20	SemiVariance.java	evaluate	booleanDirection	boolean	0	DEF	(values[i] > cutoff) == $
2305	279	20	SemiVariance.java	evaluate	values	double[]	0	DEF	($[i] > cutoff) == booleanDirection
2305	279	20	SemiVariance.java	evaluate	cutoff	double	0	DEF	(values[i] > $) == booleanDirection
2306	285	16	SemiVariance.java	evaluate	corrected	boolean	1	RET	$
3993	172	8	Sigmoid.java	value	exp	double	1	DEF	Double.isInfinite($)
19437	190	12	Sigmoid.java	value	THIS	Sigmoid	0	NIL-FOR	n < f.$.length
19437	190	12	Sigmoid.java	value	n	int	0	NIL-FOR	$ < f.length
19437	190	12	Sigmoid.java	value	f	double[]	0	NIL-FOR	n < $.length
19438	195	16	Sigmoid.java	value	k	int	0	NIL-FOR	$ >= 0
3994	197	20	Sigmoid.java	value	k	int	1	DEF	$ > 1
2769	90	8	SimplePointChecker.java	SimplePointChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2770	116	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2771	117	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	iteration >= $.maxIterationCount
2771	117	12	SimplePointChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
18710	124	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	NIL-FOR	i < p.$.length
18710	124	8	SimplePointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
18710	124	8	SimplePointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
2772	129	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > $.getAbsoluteThreshold()
2772	129	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > size * $.getRelativeThreshold()
2772	129	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
2772	129	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
2772	129	12	SimplePointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
1900	102	8	SimplePointChecker.java	SimplePointChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1901	128	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1902	129	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	iteration >= $.maxIterationCount
1902	129	12	SimplePointChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
18218	136	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	NIL-FOR	i < p.$.length
18218	136	8	SimplePointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
18218	136	8	SimplePointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1903	141	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > $.getAbsoluteThreshold()
1903	141	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > size * $.getRelativeThreshold()
1903	141	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1903	141	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1903	141	12	SimplePointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
2630	133	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
2631	137	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2632	149	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2633	174	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
2634	175	12	SimpleRegression.java	removeData	THIS	SimpleRegression	1	DEF	$.hasIntercept
18681	218	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
18681	218	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
18681	218	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
2635	219	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	ModelSpecificationException	data[i].length < 2
2635	219	12	SimpleRegression.java	addData	i	int	0	ModelSpecificationException	data[$].length < 2
2635	219	12	SimpleRegression.java	addData	data	double[][]	0	ModelSpecificationException	$[i].length < 2
2636	237	8	SimpleRegression.java	addObservation	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length == 0
2636	237	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length == 0
2636	237	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$ == null
2637	254	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length != y.$.length
2637	254	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2637	254	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2637	254	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2637	254	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
18682	261	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
18682	261	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
18682	261	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
2638	262	12	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	DEF	x[i].length == 0
2638	262	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$].length == 0
2638	262	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$] == null
2638	262	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i].length == 0
2638	262	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i] == null
2639	266	8	SimpleRegression.java	addObservations	obsOk	boolean	0	ModelSpecificationException	$
18683	271	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
18683	271	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
18683	271	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
18684	290	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
18684	290	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
18684	290	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
18684	290	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
2640	335	8	SimpleRegression.java	predict	THIS	SimpleRegression	0	RET	$.hasIntercept
2641	391	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
2642	394	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	FastMath.abs($.sumXX) < 10 * Double.MIN_VALUE
2643	444	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2644	458	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2645	504	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
2646	527	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
2647	565	8	SimpleRegression.java	getInterceptStdErr	THIS	SimpleRegression	0	RET	$.hasIntercept
2648	646	8	SimpleRegression.java	getSlopeConfidenceInterval	THIS	SimpleRegression	0	RET	$.n < 3
2649	649	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ <= 0
2649	649	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ >= 1
2650	682	8	SimpleRegression.java	getSignificance	THIS	SimpleRegression	0	RET	$.n < 3
2651	702	6	SimpleRegression.java	getIntercept	THIS	SimpleRegression	0	RET	$.hasIntercept
2652	731	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	NoDataException:RET	$.hasIntercept
2653	732	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 3
2654	735	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	FastMath.abs( $.sumXX ) > Precision.SAFE_MIN
2655	758	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 2
2656	761	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	Double.isNaN($.sumXX)
2657	786	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	MathIllegalArgumentException	variablesToInclude.$.length == 0
2657	786	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$.length == 0
2657	786	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$ == null
2658	789	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 2
2658	789	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	$.hasIntercept
2658	789	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 1
2658	789	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 2
2658	789	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 1
2659	795	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	$.hasIntercept
2660	796	12	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	variablesToInclude.$.length == 2
2660	796	12	SimpleRegression.java	regress	variablesToInclude	int[]	1	OutOfRangeException:RET	$.length == 2
2661	797	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	ModelSpecificationException	$[0] == 1
2662	799	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2663	802	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[1] != 1
2664	807	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2664	807	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 1
2665	812	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	RET	$[0] == 0
2666	820	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	RET	$[0] == 1
2667	826	20	SimpleRegression.java	regress	_sxx	double	1	RET	Double.isNaN($)
2668	842	12	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2687	91	8	SimpleUnivariateValueChecker.java	SimpleUnivariateValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2688	117	8	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2689	118	12	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	iteration >= $.maxIterationCount
2689	118	12	SimpleUnivariateValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
1824	103	8	SimpleUnivariateValueChecker.java	SimpleUnivariateValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1825	129	8	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1826	130	12	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	iteration >= $.maxIterationCount
1826	130	12	SimpleUnivariateValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
2671	89	8	SimpleValueChecker.java	SimpleValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2672	115	8	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2673	116	12	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	iteration >= $.maxIterationCount
2673	116	12	SimpleValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
1805	100	8	SimpleValueChecker.java	SimpleValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1806	126	8	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1807	127	12	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	iteration >= $.maxIterationCount
1807	127	12	SimpleValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
2773	91	8	SimpleVectorValueChecker.java	SimpleVectorValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2774	117	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2775	118	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	iteration >= $.maxIterationCount
2775	118	12	SimpleVectorValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
18711	125	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	NIL-FOR	i < p.$.length
18711	125	8	SimpleVectorValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
18711	125	8	SimpleVectorValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
2776	130	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > $.getAbsoluteThreshold()
2776	130	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > size * $.getRelativeThreshold()
2776	130	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
2776	130	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
2776	130	12	SimpleVectorValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
1904	102	8	SimpleVectorValueChecker.java	SimpleVectorValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1905	128	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1906	129	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	iteration >= $.maxIterationCount
1906	129	12	SimpleVectorValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
18219	136	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	NIL-FOR	i < p.$.length
18219	136	8	SimpleVectorValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
18219	136	8	SimpleVectorValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1907	141	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > $.getAbsoluteThreshold()
1907	141	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > size * $.getRelativeThreshold()
1907	141	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1907	141	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1907	141	12	SimpleVectorValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
3040	158	12	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	RET	$.getIterations() > 0
18918	160	16	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
18918	160	16	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
3041	165	16	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
3042	197	12	SimplexOptimizer.java	parseOptimizationData	THIS	SimplexOptimizer	0	DEF	$.data instanceof AbstractSimplex
3043	213	8	SimplexOptimizer.java	checkParameters	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
3044	216	8	SimplexOptimizer.java	checkParameters	THIS	SimplexOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3044	216	8	SimplexOptimizer.java	checkParameters	THIS	SimplexOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
2220	172	12	SimplexOptimizer.java	parseOptimizationData	THIS	SimplexOptimizer	0	DEF	$.data instanceof AbstractSimplex
2221	182	8	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
2222	214	12	SimplexOptimizer.java	doOptimize	iteration	int	0	RET	$ > 0
18498	216	16	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
18498	216	16	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
2223	221	16	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
18689	126	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
18689	126	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
2726	130	12	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	$ < minValue
2726	130	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	entry < $
18690	149	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
18690	149	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
2727	153	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	Precision.compareTo(entry, 0d, $.maxUlps) > 0
2727	153	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	Precision.compareTo($, 0d, maxUlps) > 0
2728	158	16	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
2729	160	23	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
2730	168	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
2731	170	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
2732	174	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
18691	176	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
18691	176	20	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
2733	179	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
2733	179	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	Precision.equals(entry, 1d, $.maxUlps)
2733	179	24	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
2733	179	24	SimplexSolver.java	getPivotRow	entry	double	0	RET	Precision.equals($, 1d, maxUlps)
2733	179	24	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
2734	195	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.getEvaluations() < $.getMaxEvaluations() / 2
18692	201	20	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	NIL-FOR	$.row.equals(minRow)
18692	201	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < varEnd
18692	201	20	SimplexSolver.java	getPivotRow	minRow	Integer	0	NIL-FOR	row.equals($)
18692	201	20	SimplexSolver.java	getPivotRow	varEnd	int	0	NIL-FOR	i < $
2735	203	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	basicRow.equals($.row)
2735	203	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$.equals(row)
2735	203	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$ != null
2736	204	28	SimplexSolver.java	getPivotRow	i	int	0	DEF	$ < minIndex
2736	204	28	SimplexSolver.java	getPivotRow	minIndex	int	0	DEF	i < $
2737	232	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
18693	241	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
18693	241	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
2738	242	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
2738	242	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
2739	263	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
18694	267	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
2740	272	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, $.epsilon)
2740	272	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	Precision.equals($.getEntry(0, $.getRhsOffset()), 0d, epsilon)
18695	295	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
18197	75	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
18197	75	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
1859	79	12	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	$ < minValue
1859	79	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	entry < $
18198	97	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
18198	97	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1860	101	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	Precision.compareTo(entry, 0d, $.maxUlps) > 0
1860	101	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	Precision.compareTo($, 0d, maxUlps) > 0
1861	106	16	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
1862	108	23	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
1863	116	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
1864	118	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
1865	122	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
18199	124	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
18199	124	20	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
1866	127	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
1866	127	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	Precision.equals(entry, 1d, $.maxUlps)
1866	127	24	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
1866	127	24	SimplexSolver.java	getPivotRow	entry	double	0	RET	Precision.equals($, 1d, maxUlps)
1866	127	24	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
1867	143	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.getIterations() < $.getMaxIterations() / 2
18200	149	20	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	NIL-FOR	$.row.equals(minRow)
18200	149	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < varEnd
18200	149	20	SimplexSolver.java	getPivotRow	minRow	Integer	0	NIL-FOR	row.equals($)
18200	149	20	SimplexSolver.java	getPivotRow	varEnd	int	0	NIL-FOR	i < $
1868	151	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	basicRow.equals($.row)
1868	151	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$.equals(row)
1868	151	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$ != null
1869	152	28	SimplexSolver.java	getPivotRow	i	int	0	DEF	$ < minIndex
1869	152	28	SimplexSolver.java	getPivotRow	minIndex	int	0	DEF	i < $
1870	178	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
18201	187	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
18201	187	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1871	188	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
1871	188	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
1872	206	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
18202	210	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1873	215	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, $.epsilon)
1873	215	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	Precision.equals($.getEntry(0, $.getRhsOffset()), 0d, epsilon)
18203	235	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
2746	179	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
18696	183	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
18696	183	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
2747	186	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
18697	189	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
18697	189	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
18698	192	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
18698	192	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
2748	212	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
2749	223	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
18699	231	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
18699	231	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
2750	239	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
2751	248	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
2751	248	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
2752	250	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
2752	250	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
2753	255	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
2753	255	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
2753	255	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
2753	255	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
2754	285	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
2755	310	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
2755	310	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
18700	337	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
18700	337	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
2756	339	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	Precision.equals(entry, 1d, $.maxUlps)
2756	339	12	SimplexTableau.java	getBasicRow	entry	double	1	DEF	Precision.equals($, 1d, maxUlps)
2756	339	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
2757	341	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	Precision.equals(entry, 0d, $.maxUlps)
2757	341	19	SimplexTableau.java	getBasicRow	entry	double	0	RET	Precision.equals($, 0d, maxUlps)
2758	353	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
18701	361	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
18701	361	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
2759	363	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	Precision.compareTo(entry, 0d, $.epsilon) > 0
2759	363	12	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	Precision.compareTo($, 0d, epsilon) > 0
18702	369	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
18702	369	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
2760	371	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
2760	371	12	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
18703	377	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
18703	377	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
18704	379	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
18704	379	12	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
2761	380	16	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
2761	380	16	SimplexTableau.java	dropPhase1Objective	columnsToDrop	Set<Integer>	0	DEF	$.contains(j)
18705	388	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
18706	409	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
18706	409	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
2762	411	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	Precision.compareTo(entry, 0d, $.epsilon) < 0
2762	411	12	SimplexTableau.java	isOptimal	entry	double	0	RET	Precision.compareTo($, 0d, epsilon) < 0
18707	429	8	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
18707	429	8	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
18707	429	8	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
2763	431	12	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
2764	436	12	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ == 0
2764	436	12	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ != null
2765	441	19	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
2765	441	19	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
18708	465	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
18708	465	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
18709	482	8	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth()
18709	482	8	SimplexTableau.java	subtractRow	i	int	0	NIL-FOR	$ < getWidth()
2766	485	12	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	DEF	FastMath.abs(result) < $.cutOff
2766	485	12	SimplexTableau.java	subtractRow	result	double	0	DEF	FastMath.abs($) < cutOff
2767	602	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
2767	602	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
2768	606	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
1877	158	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
18204	162	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
18204	162	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
1878	165	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
18205	168	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
18205	168	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
18206	171	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
18206	171	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1879	191	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
1880	202	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
18207	210	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
18207	210	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
1881	218	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
1882	227	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
1882	227	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
1883	229	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1883	229	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1884	234	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
1884	234	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1884	234	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
1884	234	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1885	264	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
1886	289	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
1886	289	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
18208	316	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
18208	316	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
1887	318	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	Precision.equals(entry, 1d, $.maxUlps)
1887	318	12	SimplexTableau.java	getBasicRow	entry	double	1	DEF	Precision.equals($, 1d, maxUlps)
1887	318	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
1888	320	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	Precision.equals(entry, 0d, $.maxUlps)
1888	320	19	SimplexTableau.java	getBasicRow	entry	double	0	RET	Precision.equals($, 0d, maxUlps)
1889	332	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
18209	340	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
18209	340	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
1890	342	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	Precision.compareTo(entry, 0d, $.epsilon) > 0
1890	342	12	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	Precision.compareTo($, 0d, epsilon) > 0
18210	348	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
18210	348	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1891	350	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
1891	350	12	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
18211	356	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
18211	356	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
18212	358	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
18212	358	12	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
1892	359	16	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
1892	359	16	SimplexTableau.java	dropPhase1Objective	columnsToDrop	Set<Integer>	0	DEF	$.contains(j)
18213	367	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
18214	388	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
18214	388	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
1893	390	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	Precision.compareTo(entry, 0d, $.epsilon) < 0
1893	390	12	SimplexTableau.java	isOptimal	entry	double	0	RET	Precision.compareTo($, 0d, epsilon) < 0
18215	408	6	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
18215	408	6	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
18215	408	6	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
1894	410	10	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
1895	415	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ == 0
1895	415	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ != null
1896	420	17	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
1896	420	17	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
18216	444	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
18216	444	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
18217	461	8	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth()
18217	461	8	SimplexTableau.java	subtractRow	i	int	0	NIL-FOR	$ < getWidth()
1897	464	12	SimplexTableau.java	subtractRow	result	double	0	DEF	FastMath.abs($) < CUTOFF_THRESHOLD
1898	581	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
1898	581	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
1899	585	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
4220	63	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
4221	85	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
4222	105	8	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.getMinimalIterationCount() == 1
4223	116	12	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.iterations.getCount() >= $.getMinimalIterationCount()
4224	120	16	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4224	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4224	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4224	120	16	SimpsonIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
3987	88	8	Sinc.java	value	scaledX	double	1	RET	FastMath.abs($) <= SHORTCUT
3988	117	8	Sinc.java	value	scaledX	double	1	DEF	FastMath.abs($) <= SHORTCUT
19433	119	12	Sinc.java	value	THIS	Sinc	0	NIL-FOR	i < f.$.length
19433	119	12	Sinc.java	value	i	int	0	NIL-FOR	$ < f.length
19433	119	12	Sinc.java	value	f	double[]	0	NIL-FOR	i < $.length
3989	121	16	Sinc.java	value	i	int	1	DEF	($ & 0x1) == 0
19434	154	12	Sinc.java	value	THIS	Sinc	0	NIL-FOR	n < f.$.length
19434	154	12	Sinc.java	value	n	int	0	NIL-FOR	$ < f.length
19434	154	12	Sinc.java	value	f	double[]	0	NIL-FOR	n < $.length
3990	161	16	Sinc.java	value	n	int	1	DEF	($ & 0x1) == 0
19435	173	16	Sinc.java	value	k	int	0	NIL-FOR	$ > 1
3991	194	8	Sinc.java	value	THIS	Sinc	0	DEF	$.normalized
19436	196	12	Sinc.java	value	THIS	Sinc	0	NIL-FOR	i < f.$.length
19436	196	12	Sinc.java	value	i	int	0	NIL-FOR	$ < f.length
19436	196	12	Sinc.java	value	f	double[]	0	NIL-FOR	i < $.length
1693	92	8	SingularValueDecomposition.java	SingularValueDecomposition	matrix	RealMatrix	1	DEF	$.getRowDimension() < $.getColumnDimension()
18066	113	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ < FastMath.max(nct, nrt)
18066	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	NIL-FOR	k < FastMath.max($, nrt)
18066	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	NIL-FOR	k < FastMath.max(nct, $)
1694	114	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1694	114	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
18067	119	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18067	119	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1695	122	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1695	122	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1696	123	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	A[$][$] < 0
18068	126	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18068	126	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
18069	133	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
18069	133	12	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
1697	134	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1697	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1697	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1697	134	16	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
18070	138	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18070	138	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
18071	142	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18071	142	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1698	150	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1698	150	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
18072	153	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18072	153	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1699	157	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1699	157	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
18073	162	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
18073	162	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1700	165	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1700	165	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1701	166	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$ + 1] < 0
1701	166	20	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k + 1] < 0
18074	169	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
18074	169	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1702	175	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k + 1 < $.m
1702	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1702	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ + 1 < m
1702	175	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
18075	178	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18075	178	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
18076	181	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
18076	181	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
18077	182	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18077	182	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
18078	186	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
18078	186	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
18079	188	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18079	188	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
18080	196	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
18080	196	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1703	203	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	nct < $.n
1703	203	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	$ < n
1704	206	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.m < p
1704	206	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	m < $
1705	209	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	$ + 1 < p
1705	209	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	nrt + 1 < $
18081	215	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
18081	215	8	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
18082	216	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18082	216	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
18083	221	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1706	222	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.singularValues[k] != 0
1706	222	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	singularValues[$] != 0
18084	223	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
18084	223	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
18085	225	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18085	225	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
18086	229	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18086	229	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
18087	233	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18087	233	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
18088	237	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < k - 1
18088	237	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	i < $ - 1
18089	241	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18089	241	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
18090	249	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1707	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1707	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1707	250	12	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1707	250	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
18091	252	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
18091	252	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
18092	254	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
18092	254	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
18093	258	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
18093	258	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
18094	263	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
18094	263	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
18095	272	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-WHILE	$ > 0
18096	284	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1708	295	16	SingularValueDecomposition.java	SingularValueDecomposition	threshold	double	0	DEF	FastMath.abs(e[k]) > $
1708	295	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	FastMath.abs(e[$]) > threshold
1708	295	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	FastMath.abs($[k]) > threshold
1709	302	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	$ == p - 2
1709	302	12	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	k == $ - 2
18097	306	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	NIL-FOR	$ >= k
18097	306	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	ks >= $
1710	307	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	$ == k
1710	307	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	ks == $
1711	312	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	FastMath.abs($.singularValues[ks]) <= TINY + EPS * t
1711	312	20	SingularValueDecomposition.java	SingularValueDecomposition	t	double	0	DEF	FastMath.abs(singularValues[ks]) <= TINY + EPS * $
1711	312	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	FastMath.abs(singularValues[$]) <= TINY + EPS * t
1712	317	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == k
1712	317	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	ks == $
1713	319	23	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == p - 1
1713	319	23	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	ks == $ - 1
18098	333	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ >= k
18098	333	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	j >= $
1714	338	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1714	338	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
18099	343	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
18099	343	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
18100	355	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p
18100	355	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $
18101	363	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18101	363	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1715	388	20	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ != 0
1715	388	20	SingularValueDecomposition.java	SingularValueDecomposition	c	double	0	DEF	$ != 0
1716	391	24	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ < 0
18102	399	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p - 1
18102	399	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $ - 1
1717	403	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1717	403	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
18103	411	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
18103	411	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1718	424	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	j < $.m - 1
1718	424	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ < m - 1
18104	425	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18104	425	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1719	439	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] <= 0
1719	439	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] <= 0
18105	442	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ <= pp
18105	442	24	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-FOR	i <= $
18106	447	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-WHILE	$ < pp
18106	447	20	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-WHILE	k < $
1720	448	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] >= $.singularValues[k + 1]
1720	448	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] >= singularValues[$ + 1]
1721	454	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.n - 1
1721	454	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < n - 1
18107	455	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
18107	455	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1722	461	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.m - 1
1722	461	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < m - 1
18108	462	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
18108	462	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1723	481	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.transposed
1724	509	8	SingularValueDecomposition.java	getUT	THIS	SingularValueDecomposition	0	DEF	$.cachedUt == null
1725	523	8	SingularValueDecomposition.java	getS	THIS	SingularValueDecomposition	0	DEF	$.cachedS == null
1726	558	8	SingularValueDecomposition.java	getVT	THIS	SingularValueDecomposition	0	DEF	$.cachedVt == null
18109	580	8	SingularValueDecomposition.java	getCovariance	THIS	SingularValueDecomposition	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
18109	580	8	SingularValueDecomposition.java	getCovariance	p	int	0	NIL-WHILE	dimension < $
18109	580	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
18109	580	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	$ < p
18109	580	8	SingularValueDecomposition.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
1727	585	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NumberIsTooLargeException	$ == 0
18110	644	8	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.singularValues.$.length
18110	644	8	SingularValueDecomposition.java	getRank	i	int	0	NIL-FOR	$ < singularValues.length
1728	645	12	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	DEF	$.singularValues[i] > $.tol
1728	645	12	SingularValueDecomposition.java	getRank	i	int	0	DEF	singularValues[$] > tol
2280	96	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
2281	111	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
2282	115	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
2283	136	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
2284	164	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
2284	164	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2284	164	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
2284	164	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
2284	164	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
18524	174	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18524	174	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18524	174	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
18525	182	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18525	182	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18525	182	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
17307	85	12	SmallPrimes.java	smallTrialDivision	THIS	SmallPrimes	0	NIL-WHILE	0 == n % $.p
17307	85	12	SmallPrimes.java	smallTrialDivision	n	int	0	NIL-WHILE	0 == $ % p
17308	103	8	SmallPrimes.java	boundedTrialDivision	f	int	0	NIL-WHILE	$ <= maxFactor
17308	103	8	SmallPrimes.java	boundedTrialDivision	maxFactor	int	0	NIL-WHILE	f <= $
1070	104	12	SmallPrimes.java	boundedTrialDivision	f	int	0	DEF	0 == n % $
1070	104	12	SmallPrimes.java	boundedTrialDivision	n	int	0	DEF	0 == $ % f
1071	110	12	SmallPrimes.java	boundedTrialDivision	f	int	0	DEF	0 == n % $
1071	110	12	SmallPrimes.java	boundedTrialDivision	n	int	0	DEF	0 == $ % f
1072	117	8	SmallPrimes.java	boundedTrialDivision	n	int	0	DEF	$ != 1
1073	131	8	SmallPrimes.java	trialDivision	n	int	0	RET	1 == $
1074	155	8	SmallPrimes.java	millerRabinPrimeTest	n	int	0	DEF	$ >= 2047
1075	158	8	SmallPrimes.java	millerRabinPrimeTest	n	int	0	DEF	$ >= 1373653
1076	161	8	SmallPrimes.java	millerRabinPrimeTest	n	int	0	DEF	$ >= 25326001
17309	167	8	SmallPrimes.java	millerRabinPrimeTest	i	int	0	NIL-FOR	$ < t
17309	167	8	SmallPrimes.java	millerRabinPrimeTest	t	int	0	NIL-FOR	i < $
1077	171	12	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	1 != $
1077	171	12	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	$ != nMinus1
1077	171	12	SmallPrimes.java	millerRabinPrimeTest	nMinus1	int	0	RET	y != $
17310	173	16	SmallPrimes.java	millerRabinPrimeTest	j	int	0	NIL-WHILE	$ <= s - 1
17310	173	16	SmallPrimes.java	millerRabinPrimeTest	y	int	0	NIL-WHILE	nMinus1 != $
17310	173	16	SmallPrimes.java	millerRabinPrimeTest	nMinus1	int	0	NIL-WHILE	$ != y
17310	173	16	SmallPrimes.java	millerRabinPrimeTest	s	int	0	NIL-WHILE	j <= $ - 1
1078	176	20	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	1 == $
1079	181	16	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	nMinus1 != $
1079	181	16	SmallPrimes.java	millerRabinPrimeTest	nMinus1	int	0	RET	$ != y
3972	75	8	SmoothingPolynomialBicubicSplineInterpolator.java	SmoothingPolynomialBicubicSplineInterpolator	xDegree	int	0	NotPositiveException	$ < 0
3973	78	8	SmoothingPolynomialBicubicSplineInterpolator.java	SmoothingPolynomialBicubicSplineInterpolator	yDegree	int	0	NotPositiveException	$ < 0
3974	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3974	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3974	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3974	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3974	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3974	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3975	104	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3975	104	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3975	104	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
19419	111	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19419	111	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3976	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3976	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3976	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3976	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
19420	123	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
19420	123	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
19421	125	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19421	125	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
19422	137	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
19422	137	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
19423	139	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19423	139	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
19424	147	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19424	147	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
19425	149	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
19425	149	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
19426	161	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19426	161	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
19427	163	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
19427	163	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
17590	97	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rows
17590	97	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rows
17591	98	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columns
17591	98	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columns
1397	111	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1397	111	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
1398	157	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1398	157	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
1399	170	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1399	170	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
17692	120	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
17692	120	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
17692	120	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
17693	159	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1476	163	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1476	163	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
17694	182	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1477	191	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
17695	196	12	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < n
17695	196	12	SparseFieldVector.java	append	n	int	0	NIL-FOR	i < $
17696	223	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
17697	236	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
17698	249	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
1478	285	8	SparseFieldVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
17699	293	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1479	296	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
1479	296	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
1479	296	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
1479	296	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
17700	310	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
17700	310	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
17701	326	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
17702	340	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
17702	340	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
17703	354	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
17704	380	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
17705	383	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
1480	393	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
17706	399	12	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
17707	403	16	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < n
17707	403	16	SparseFieldVector.java	outerProduct	n	int	0	NIL-FOR	col < $
17708	423	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
17708	423	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
17709	443	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < n
17709	443	8	SparseFieldVector.java	setSubVector	n	int	0	NIL-FOR	i < $
17710	460	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1481	463	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1481	463	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1482	475	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
17711	481	12	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < n
17711	481	12	SparseFieldVector.java	subtract	n	int	0	NIL-FOR	i < $
1483	482	16	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
1483	482	16	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
17712	496	8	SparseFieldVector.java	toArray	iter	Iterator	0	NIL-WHILE	$.hasNext()
1484	510	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	OutOfRangeException	index >= $.getDimension()
1484	510	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1484	510	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1485	523	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DimensionMismatchException	$.getDimension() != n
1485	523	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	getDimension() != $
1486	530	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
17713	537	12	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < n
17713	537	12	SparseFieldVector.java	add	n	int	0	NIL-FOR	i < $
17714	552	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1487	565	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
1487	565	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
1488	569	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector<?>
1489	576	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
1490	577	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
1490	577	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
1491	580	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
1491	580	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
1492	583	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
1492	583	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
17715	588	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1493	591	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
1493	591	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
17716	596	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1494	599	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
1494	599	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
1494	599	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
2484	156	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2484	156	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2484	156	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2485	158	15	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2485	158	15	SpearmansCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
18600	174	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
18600	174	8	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
749	246	8	SphericalCoordinates.java	computeJacobian	THIS	SphericalCoordinates	0	DEF	$.jacobian == null
750	280	8	SphericalCoordinates.java	computeHessians	THIS	SphericalCoordinates	0	DEF	$.rHessian == null
3870	70	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3870	70	8	SplineInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3870	70	8	SplineInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3871	74	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	NumberIsTooSmallException	x.$.length < 3
3871	74	8	SplineInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 3
19327	86	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
19327	86	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
19328	95	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
19328	95	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
19329	110	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
19330	118	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
19330	118	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
3139	61	8	StableRandomGenerator.java	StableRandomGenerator	generator	RandomGenerator	0	NullArgumentException	$ == null
3140	65	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ > 0d
3140	65	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ <= 2d
3141	70	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ >= -1d
3141	70	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ <= 1d
3142	78	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	1	DEF	$ < 2d
3142	78	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	1	DEF	$ != 0d
3143	96	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	RET	$.alpha == 2d
3144	103	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.beta == 0d
3145	105	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.alpha == 1d
3146	117	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	FastMath.abs($.alpha - 1d) > 1e-8
3147	128	16	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	DEF	$.alpha != 1d
2515	703	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2515	703	8	StatUtils.java	sumDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2515	703	8	StatUtils.java	sumDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2516	706	8	StatUtils.java	sumDifference	n	int	0	NoDataException	$ <= 0
18616	710	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
18616	710	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
2517	752	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2517	752	8	StatUtils.java	varianceDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2517	752	8	StatUtils.java	varianceDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2518	755	8	StatUtils.java	varianceDifference	n	int	0	NumberIsTooSmallException	$ < 2
18617	758	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
18617	758	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
18618	777	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
18618	777	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
18618	777	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
18619	788	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
18619	788	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
18619	788	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
2382	134	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
2382	134	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
2383	137	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
3995	65	8	StepFunction.java	StepFunction	x	double[]	0	NullArgumentException	$ == null
3995	65	8	StepFunction.java	StepFunction	y	double[]	0	NullArgumentException	$ == null
3996	69	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	y.$.length == 0
3996	69	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	x.$.length == 0
3996	69	8	StepFunction.java	StepFunction	x	double[]	0	NoDataException	$.length == 0
3996	69	8	StepFunction.java	StepFunction	y	double[]	0	NoDataException	$.length == 0
3997	73	8	StepFunction.java	StepFunction	THIS	StepFunction	0	DimensionMismatchException	y.$.length != x.$.length
3997	73	8	StepFunction.java	StepFunction	x	double[]	0	DimensionMismatchException	y.length != $.length
3997	73	8	StepFunction.java	StepFunction	y	double[]	0	DimensionMismatchException	$.length != x.length
3998	87	8	StepFunction.java	value	index	int	1	DEF	$ < -1
3999	90	15	StepFunction.java	value	index	int	1	DEF	$ >= 0
3353	206	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
3354	215	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
3355	224	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	Precision.equals(nextTime, $.lastTime, 1)
3355	224	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.mode == $.StepNormalizerMode.MULTIPLES
3355	224	8	StepNormalizer.java	handleStep	nextTime	double	0	DEF	Precision.equals($, lastTime, 1)
19114	231	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
3356	243	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
3357	250	12	StepNormalizer.java	handleStep	addLast	boolean	0	DEF	$
3358	278	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.bounds.firstIncluded()
3358	278	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.firstTime == $.lastTime
2474	110	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	0	NumberIsTooSmallException	$.n < 2
2475	114	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	1	RET	$.biasCorrected
18582	82	8	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
18582	82	8	StorelessCovariance.java	initializeMatrix	i	int	0	NIL-FOR	$ < dimension
18583	83	12	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
18583	83	12	StorelessCovariance.java	initializeMatrix	j	int	0	NIL-FOR	$ < dimension
2473	151	8	StorelessCovariance.java	increment	THIS	StorelessCovariance	0	DimensionMismatchException	length != $.dimension
2473	151	8	StorelessCovariance.java	increment	length	int	0	DimensionMismatchException	$ != dimension
18584	157	8	StorelessCovariance.java	increment	i	int	0	NIL-FOR	$ < length
18584	157	8	StorelessCovariance.java	increment	length	int	0	NIL-FOR	i < $
18585	158	12	StorelessCovariance.java	increment	j	int	0	NIL-FOR	$ < length
18585	158	12	StorelessCovariance.java	increment	length	int	0	NIL-FOR	j < $
18586	184	8	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
18586	184	8	StorelessCovariance.java	getData	i	int	0	NIL-FOR	$ < dimension
18587	185	12	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
18587	185	12	StorelessCovariance.java	getData	j	int	0	NIL-FOR	$ < dimension
751	121	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
824	125	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
825	159	8	SubLine.java	side	crossing	Vector2D	0	RET	$ == null
826	180	8	SubLine.java	split	crossing	Vector2D	0	RET	$ == null
662	60	8	SubPlane.java	side	inter	Line	0	RET	$ == null
663	77	8	SubPlane.java	side	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
663	77	8	SubPlane.java	side	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
664	103	8	SubPlane.java	split	inter	Line	0	RET	$ == null
665	115	8	SubPlane.java	split	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
665	115	8	SubPlane.java	split	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
2250	124	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length, true)
2250	124	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2250	124	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2250	124	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
18514	126	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18514	126	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18514	126	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2251	163	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, weights, begin, length, true)
2251	163	8	Sum.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
2251	163	8	Sum.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
2251	163	8	Sum.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
2251	163	8	Sum.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
18515	165	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18515	165	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18515	165	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2252	135	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length, true)
2252	135	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2252	135	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2252	135	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
18516	137	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18516	137	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18516	137	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2249	123	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length, true)
2249	123	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2249	123	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2249	123	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
18513	125	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18513	125	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18513	125	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2320	159	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2321	162	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2322	165	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl != $.geoMean
2323	218	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
2324	219	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
2325	354	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2326	357	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2327	371	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
2327	371	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
2328	374	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
2329	645	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	MathIllegalStateException	$.n > 0
2330	684	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getVarianceImpl() instanceof Variance
2331	689	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.meanImpl instanceof Mean
2331	689	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.meanImpl instanceof Mean
2332	694	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
2333	702	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
2333	702	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
2334	707	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
2334	707	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
2335	712	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
2335	712	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
2336	717	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
2336	717	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
2337	722	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
2337	722	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
2338	727	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
2338	727	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
2339	732	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
2339	732	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
2340	737	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
2340	737	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
1351	1168	8	SymmLQ.java	solveInPlace	state	State	0	RET	$.bEqualsNullVector()
1352	1177	8	SymmLQ.java	solveInPlace	earlyStop	boolean	0	DEF	$
17528	1178	12	SymmLQ.java	solveInPlace	state	State	0	NIL-DOWHILE	$.hasConverged()
1156	91	8	TDistribution.java	TDistribution	degreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1157	122	8	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ == 0
1158	130	12	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
1159	158	8	TDistribution.java	getNumericalMean	df	double	0	RET	$ > 1
1160	179	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 2
1161	183	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ <= 2
1161	183	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 1
2406	1133	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ <= 0
2406	1133	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ > 0.5
2407	1150	8	TTest.java	checkSampleData	data	double[]	0	NullArgumentException	$ == null
2408	1153	8	TTest.java	checkSampleData	THIS	TTest	0	NumberIsTooSmallException	data.$.length < 2
2408	1153	8	TTest.java	checkSampleData	data	double[]	0	NumberIsTooSmallException	$.length < 2
2409	1171	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NullArgumentException	$ == null
2410	1174	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NumberIsTooSmallException	$.getN() < 2
2302	90	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
3462	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	1	DEF	$.previousState != null
3462	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
19214	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19214	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
19215	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
19215	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3208	72	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	MathIllegalArgumentException	population.getPopulationSize() < $.arity
3208	72	8	TournamentSelection.java	tournament	population	ListPopulation	0	MathIllegalArgumentException	$.getPopulationSize() < this.arity
19047	86	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
19047	86	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
19083	62	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
19083	62	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
19083	62	8	TransformUtils.java	scaleArray	f	double[]	0	NIL-FOR	i < $.length
19084	78	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
19084	78	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
19084	78	8	TransformUtils.java	scaleArray	f	Complex[]	0	NIL-FOR	i < $.length
19085	102	8	TransformUtils.java	createRealImaginaryArray	THIS	TransformUtils	0	NIL-FOR	i < dataC.$.length
19085	102	8	TransformUtils.java	createRealImaginaryArray	i	int	0	NIL-FOR	$ < dataC.length
19085	102	8	TransformUtils.java	createRealImaginaryArray	dataC	Complex[]	0	NIL-FOR	i < $.length
3321	127	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataRI.$.length != 2
3321	127	8	TransformUtils.java	createComplexArray	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
3322	132	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataR.$.length != dataI.$.length
3322	132	8	TransformUtils.java	createComplexArray	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
3322	132	8	TransformUtils.java	createComplexArray	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
19086	138	8	TransformUtils.java	createComplexArray	i	int	0	NIL-FOR	$ < n
19086	138	8	TransformUtils.java	createComplexArray	n	int	0	NIL-FOR	i < $
3323	157	8	TransformUtils.java	exactLog2	index	int	0	MathIllegalArgumentException	$ < 0
102	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
102	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
103	148	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
104	159	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
104	159	8	TransformerMap.java	equals	other	Object	0	RET	this == $
105	162	8	TransformerMap.java	equals	other	Object	0	RET	$ instanceof TransformerMap
106	164	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
106	164	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
107	167	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
107	167	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
108	171	16	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
108	171	16	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
4240	66	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
4241	88	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
4242	120	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
19579	135	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
19579	135	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
4243	155	12	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	i >= $.getMinimalIterationCount()
4243	155	12	TrapezoidIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
4244	159	16	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4244	159	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4244	159	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4244	159	16	TrapezoidIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
1343	63	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1344	86	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
1345	98	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
17514	103	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
1346	106	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
1346	106	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
17515	110	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
17515	110	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
17516	113	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
17516	113	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
17517	115	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
17517	115	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
17518	120	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
17518	120	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
1347	139	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
17519	142	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
17519	142	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
1348	144	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
1349	147	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1349	147	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
17520	195	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
17520	195	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
17521	201	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
17521	201	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1350	207	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
17522	218	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
17522	218	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
17523	222	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
17523	222	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
17524	232	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
17524	232	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
17525	238	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
17525	238	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
17526	244	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
17526	244	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
17527	246	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
17527	246	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1166	82	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooLargeException	$ >= b
1166	82	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	a >= $
1167	87	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooSmallException	c < $
1167	87	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooSmallException	$ < a
1168	91	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooLargeException	$ > b
1168	91	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	c > $
1169	142	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.a
1169	142	8	TriangularDistribution.java	density	x	double	0	RET	$ < a
1170	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.a <= x
1170	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.c
1170	145	8	TriangularDistribution.java	density	x	double	0	RET	a <= $
1170	145	8	TriangularDistribution.java	density	x	double	0	RET	$ < c
1171	150	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x == $.c
1171	150	8	TriangularDistribution.java	density	x	double	0	RET	$ == c
1172	153	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x <= $.b
1172	153	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.c < x
1172	153	8	TriangularDistribution.java	density	x	double	0	RET	$ <= b
1172	153	8	TriangularDistribution.java	density	x	double	0	RET	c < $
1173	175	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.a
1173	175	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < a
1174	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.a <= x
1174	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.c
1174	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	a <= $
1174	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < c
1175	183	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x == $.c
1175	183	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ == c
1176	186	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.c < x
1176	186	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x <= $.b
1176	186	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	c < $
1176	186	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ <= b
1177	262	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0
1177	262	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1
1178	265	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
1179	268	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1180	271	8	TriangularDistribution.java	inverseCumulativeProbability	THIS	TriangularDistribution	0	RET	p < ($.c - $.a) / ($.b - $.a)
1180	271	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ < (c - a) / (b - a)
3874	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	z.$.length == 0
3874	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3874	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3874	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3874	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3874	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	z	double[]	0	NoDataException	$.length == 0
3874	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$[0].length == 0
3874	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$.length == 0
3875	158	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3875	158	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3875	158	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	xLen != $.length
3876	161	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3876	161	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3876	161	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	xLen != $.length
3877	164	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3877	164	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3877	164	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3878	167	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdZ.$.length
3878	167	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdZ.length
3878	167	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3879	170	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3879	170	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3879	170	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3880	173	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdZ.$.length
3880	173	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdZ.length
3880	173	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3881	176	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdYdZ.$.length
3881	176	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdYdZ.length
3881	176	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3882	179	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d3FdXdYdZ.$.length
3882	179	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d3FdXdYdZ.length
3882	179	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
19333	196	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
19333	196	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3883	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3883	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3883	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3883	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3884	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3884	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3884	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3884	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3885	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3885	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3885	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3885	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3886	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i].length != yLen
3886	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$].length != yLen
3886	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdZ[i].length != $
3886	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3887	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3887	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3887	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3887	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3888	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i].length != yLen
3888	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$].length != yLen
3888	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdZ[i].length != $
3888	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3889	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i].length != yLen
3889	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$].length != yLen
3889	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdYdZ[i].length != $
3889	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3890	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i].length != yLen
3890	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$].length != yLen
3890	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d3FdXdYdZ[i].length != $
3890	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
19334	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
19334	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3891	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i][j].length != zLen
3891	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	f[i][$].length != zLen
3891	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$][j].length != zLen
3891	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	f[i][j].length != $
3891	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3892	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i][j].length != zLen
3892	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdX[i][$].length != zLen
3892	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$][j].length != zLen
3892	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdX[i][j].length != $
3892	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3893	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i][j].length != zLen
3893	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdY[i][$].length != zLen
3893	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$][j].length != zLen
3893	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdY[i][j].length != $
3893	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3894	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i][j].length != zLen
3894	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdZ[i][$].length != zLen
3894	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$][j].length != zLen
3894	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdZ[i][j].length != $
3894	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3895	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i][j].length != zLen
3895	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdY[i][$].length != zLen
3895	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$][j].length != zLen
3895	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdY[i][j].length != $
3895	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3896	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i][j].length != zLen
3896	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdZ[i][$].length != zLen
3896	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$][j].length != zLen
3896	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdZ[i][j].length != $
3896	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3897	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i][j].length != zLen
3897	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdYdZ[i][$].length != zLen
3897	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$][j].length != zLen
3897	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdYdZ[i][j].length != $
3897	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3898	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != zLen
3898	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d3FdXdYdZ[i][$].length != zLen
3898	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$][j].length != zLen
3898	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != $
3898	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
19335	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	k	int	0	NIL-FOR	$ < lastK
19335	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastK	int	0	NIL-FOR	k < $
3899	309	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
3900	313	8	TricubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
3901	317	8	TricubicSplineInterpolatingFunction.java	value	k	int	0	OutOfRangeException	$ == -1
3902	335	8	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
3902	335	8	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
19336	340	8	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
19336	340	8	TricubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
3903	341	12	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
3903	341	12	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
3903	341	12	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
19337	401	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < sz
19337	401	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	i < $
19338	404	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < sz
19338	404	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	j < $
19339	430	8	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	i	int	0	NIL-FOR	$ < N
19340	431	12	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	j	int	0	NIL-FOR	$ < N
19341	432	16	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	k	int	0	NIL-FOR	$ < N
3904	449	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3904	449	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3905	452	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
3905	452	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
3906	455	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ < 0
3906	455	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ > 1
19342	472	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	NIL-FOR	$ < N
19343	473	12	TricubicSplineInterpolatingFunction.java	value	j	int	0	NIL-FOR	$ < N
19344	474	16	TricubicSplineInterpolatingFunction.java	value	k	int	0	NIL-FOR	$ < N
3952	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3952	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	zval.$.length == 0
3952	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3952	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3952	42	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3952	42	8	TricubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3952	42	8	TricubicSplineInterpolator.java	interpolate	zval	double[]	0	NoDataException	$.length == 0
3952	42	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	NoDataException	$.length == 0
3953	45	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3953	45	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3953	45	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	xval.length != $.length
19395	62	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19395	62	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3954	63	12	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3954	63	12	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3954	63	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3954	63	12	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i].length != yLen
19396	67	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
19396	67	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
3955	68	16	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i][j].length != zLen
3955	68	16	TricubicSplineInterpolator.java	interpolate	j	int	0	DimensionMismatchException	fval[i][$].length != zLen
3955	68	16	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$][j].length != zLen
3955	68	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	DimensionMismatchException	fval[i][j].length != $
3955	68	16	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
19397	72	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
19397	72	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
19398	85	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19398	85	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
19399	92	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
19399	92	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
19400	99	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
19400	99	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
19401	107	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
19401	107	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
19402	109	12	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19402	109	12	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
19403	111	16	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
19403	111	16	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
19404	123	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19404	123	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
19405	125	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
19405	125	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
19406	127	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
19406	127	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
19407	137	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
19407	137	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
19408	139	12	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
19408	139	12	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
19409	141	16	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19409	141	16	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
19410	150	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
19410	150	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
19411	153	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
19411	153	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
19412	156	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
19412	156	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
3192	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != standardDeviation.$.length
3192	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != standardDeviation.length
3192	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DimensionMismatchException	mean.length != $.length
19037	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
19037	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
19037	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
3209	64	8	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ > 1.0d
3209	64	8	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ < 0.0d
3210	90	8	UniformCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3210	90	8	UniformCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3211	107	8	UniformCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3211	107	8	UniformCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
19048	120	8	UniformCrossover.java	mate	index	int	0	NIL-FOR	$ < length
19048	120	8	UniformCrossover.java	mate	length	int	0	NIL-FOR	index < $
3212	122	12	UniformCrossover.java	mate	THIS	UniformCrossover	1	DEF	random.nextDouble() < $.ratio
3212	122	12	UniformCrossover.java	mate	random	RandomGenerator	1	DEF	$.nextDouble() < ratio
1191	72	8	UniformIntegerDistribution.java	UniformIntegerDistribution	lower	int	0	NumberIsTooLargeException	$ >= upper
1191	72	8	UniformIntegerDistribution.java	UniformIntegerDistribution	upper	int	0	NumberIsTooLargeException	lower >= $
1192	83	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1192	83	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1192	83	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ < lower
1192	83	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ > upper
1193	91	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1193	91	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ < lower
1194	94	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1194	94	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ > upper
1195	96	8	UniformRealDistribution.java	UniformRealDistribution	lower	double	0	NumberIsTooLargeException	$ >= upper
1195	96	8	UniformRealDistribution.java	UniformRealDistribution	upper	double	0	NumberIsTooLargeException	lower >= $
1196	109	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x < $.lower
1196	109	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x > $.upper
1196	109	8	UniformRealDistribution.java	density	x	double	0	RET	$ < lower
1196	109	8	UniformRealDistribution.java	density	x	double	0	RET	$ > upper
1197	117	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x <= $.lower
1197	117	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ <= lower
1198	120	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x >= $.upper
1198	120	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ >= upper
19013	68	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
19013	68	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
19014	75	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
19014	75	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
1852	77	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	optimizer	BaseUnivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1852	77	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	generator	RandomGenerator	0	NullArgumentException	$ == null
1853	81	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1854	135	8	UnivariateMultiStartOptimizer.java	getOptima	THIS	UnivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
18195	158	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
18195	158	8	UnivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1855	174	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
2674	100	12	UnivariateOptimizer.java	parseOptimizationData	THIS	UnivariateOptimizer	0	DEF	$.data instanceof SearchInterval
2675	107	12	UnivariateOptimizer.java	parseOptimizationData	THIS	UnivariateOptimizer	0	DEF	$.data instanceof UnivariateObjectiveFunction
2676	111	12	UnivariateOptimizer.java	parseOptimizationData	THIS	UnivariateOptimizer	0	DEF	$.data instanceof GoalType
3946	88	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NumberIsTooSmallException	xval.$.length < $.extend
3946	88	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NumberIsTooSmallException	$.length < extend
19383	98	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < xval.$.length
19383	98	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xval.length
19383	98	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NIL-FOR	i < $.length
19384	105	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < $.extend
19384	105	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < extend
4011	53	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
4012	78	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
4013	107	8	UnivariateSolverUtils.java	forceSide	THIS	UnivariateSolverUtils	0	RET	allowedSolution == $.AllowedSolution.ANY_SIDE
4013	107	8	UnivariateSolverUtils.java	forceSide	allowedSolution	AllowedSolution	0	RET	$ == AllowedSolution.ANY_SIDE
19439	120	8	UnivariateSolverUtils.java	forceSide	remainingEval	int	0	NIL-WHILE	$ > 0
4014	122	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ <= 0
4014	122	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ >= 0
4014	122	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ <= 0
4014	122	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ >= 0
4015	130	12	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ < fHi
4015	130	12	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo < $
4016	132	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ >= 0
4017	137	19	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ > fHi
4017	137	19	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo > $
4018	139	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ <= 0
4019	151	12	UnivariateSolverUtils.java	forceSide	changeLo	boolean	0	DEF	$
4020	158	12	UnivariateSolverUtils.java	forceSide	changeHi	boolean	0	DEF	$
4021	260	8	UnivariateSolverUtils.java	bracket	function	UnivariateFunction	0	NullArgumentException	$ == null
4022	263	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NotStrictlyPositiveException	$ <= 0
19440	274	8	UnivariateSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
19440	274	8	UnivariateSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
19440	274	8	UnivariateSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
19440	274	8	UnivariateSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
19440	274	8	UnivariateSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
19440	274	8	UnivariateSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
19440	274	8	UnivariateSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
19440	274	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
4023	284	8	UnivariateSolverUtils.java	bracket	fa	double	0	NoBracketingException	$ * fb > 0.0
4023	284	8	UnivariateSolverUtils.java	bracket	fb	double	0	NoBracketingException	fa * $ > 0.0
4024	321	8	UnivariateSolverUtils.java	isBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
4025	353	8	UnivariateSolverUtils.java	verifyInterval	lower	double	0	NumberIsTooLargeException	$ >= upper
4025	353	8	UnivariateSolverUtils.java	verifyInterval	upper	double	0	NumberIsTooLargeException	lower >= $
4026	392	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
4027	396	8	UnivariateSolverUtils.java	verifyBracketing	THIS	UnivariateSolverUtils	0	NoBracketingException	$.isBracketing(function, lower, upper)
4027	396	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NoBracketingException	isBracketing($, lower, upper)
4027	396	8	UnivariateSolverUtils.java	verifyBracketing	lower	double	0	NoBracketingException	isBracketing(function, $, upper)
4027	396	8	UnivariateSolverUtils.java	verifyBracketing	upper	double	0	NoBracketingException	isBracketing(function, lower, $)
19038	159	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
19038	159	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
19038	159	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
19039	177	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
19039	177	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
3193	291	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
3194	308	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
3195	383	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution == null
3195	383	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution.getBinStats().size() == 0
3196	411	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
3197	414	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
3197	414	8	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
3198	418	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
3198	418	12	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
2255	171	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
2256	181	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
2257	183	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
2258	186	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
2259	206	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
2260	229	8	Variance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2261	261	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
2261	261	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2261	261	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
2261	261	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
2262	263	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2263	265	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
2264	321	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights,begin, length)
2264	321	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights,begin, length)
2264	321	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $,begin, length)
2264	321	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights,$, length)
2264	321	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights,begin, $)
2265	323	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2266	325	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
2267	408	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
2267	408	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2267	408	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
2267	408	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
2268	409	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2269	411	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
18519	415	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18519	415	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18519	415	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2270	421	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
2271	511	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights, begin, length)
2271	511	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
2271	511	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
2271	511	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
2271	511	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
2272	512	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2273	514	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
18520	518	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18520	518	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18520	518	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
18521	525	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
18521	525	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
18521	525	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2274	529	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
805	188	8	Vector1D.java	normalize	s	double	0	MathArithmeticException	$ == 0
806	305	8	Vector1D.java	equals	THIS	Vector1D	0	RET	$ == other
806	305	8	Vector1D.java	equals	other	Object	0	RET	this == $
807	309	8	Vector1D.java	equals	other	Object	0	RET	$ instanceof Vector1D
808	311	12	Vector1D.java	equals	rhs	Vector1D	0	RET	$.isNaN()
809	329	8	Vector1D.java	hashCode	THIS	Vector1D	0	RET	$.isNaN()
801	115	8	Vector1DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
802	127	8	Vector1DFormat.java	parse	coordinates	double[]	0	RET	$ == null
864	80	8	Vector2D.java	Vector2D	THIS	Vector2D	0	DimensionMismatchException	v.$.length != 2
864	80	8	Vector2D.java	Vector2D	v	double[]	0	DimensionMismatchException	$.length != 2
865	226	8	Vector2D.java	normalize	s	double	0	MathArithmeticException	$ == 0
866	347	8	Vector2D.java	equals	THIS	Vector2D	0	RET	$ == other
866	347	8	Vector2D.java	equals	other	Object	0	RET	this == $
867	351	8	Vector2D.java	equals	other	Object	0	RET	$ instanceof Vector2D
868	353	12	Vector2D.java	equals	rhs	Vector2D	0	RET	$.isNaN()
869	371	8	Vector2D.java	hashCode	THIS	Vector2D	0	RET	$.isNaN()
819	118	8	Vector2DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
820	130	8	Vector2DFormat.java	parse	coordinates	double[]	0	RET	$ == null
752	108	8	Vector3D.java	Vector3D	THIS	Vector3D	0	DimensionMismatchException	v.$.length != 3
752	108	8	Vector3D.java	Vector3D	v	double[]	0	DimensionMismatchException	$.length != 3
753	298	8	Vector3D.java	normalize	s	double	0	MathArithmeticException	$ == 0
754	322	8	Vector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
755	326	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	FastMath.abs($.x) <= threshold
755	326	8	Vector3D.java	orthogonal	threshold	double	1	RET	FastMath.abs(x) <= $
756	329	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	FastMath.abs($.y) <= threshold
756	329	15	Vector3D.java	orthogonal	threshold	double	0	RET	FastMath.abs(y) <= $
757	352	8	Vector3D.java	angle	normProduct	double	0	MathArithmeticException	$ == 0
758	358	8	Vector3D.java	angle	dot	double	0	RET	$ > threshold
758	358	8	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
758	358	8	Vector3D.java	angle	threshold	double	0	RET	dot > $
758	358	8	Vector3D.java	angle	threshold	double	0	RET	dot < -$
759	361	12	Vector3D.java	angle	dot	double	0	RET	$ >= 0
760	414	8	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
760	414	8	Vector3D.java	equals	other	Object	0	RET	this == $
761	418	8	Vector3D.java	equals	other	Object	0	RET	$ instanceof Vector3D
762	420	12	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
763	438	8	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
666	130	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
667	147	8	Vector3DFormat.java	parse	coordinates	double[]	0	RET	$ == null
17281	202	8	VectorFormat.java	format	THIS	VectorFormat	0	NIL-FOR	i < coordinates.$.length
17281	202	8	VectorFormat.java	format	i	int	0	NIL-FOR	$ < coordinates.length
17281	202	8	VectorFormat.java	format	coordinates	double	0	NIL-FOR	i < $.length
656	203	12	VectorFormat.java	format	i	int	0	DEF	$ > 0
657	247	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
657	247	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
657	247	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
17282	251	8	VectorFormat.java	parseCoordinates	i	int	0	NIL-FOR	$ < dimension
17282	251	8	VectorFormat.java	parseCoordinates	dimension	int	0	NIL-FOR	i < $
658	257	12	VectorFormat.java	parseCoordinates	i	int	0	RET	$ > 0
659	258	16	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
659	258	16	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
659	258	16	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
660	268	12	VectorFormat.java	parseCoordinates	c	Number	0	RET	$ == null
661	282	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
661	282	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
661	282	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
2285	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
2285	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
18526	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
18526	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
18526	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
18527	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
18527	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
2286	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
18528	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
18528	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
18529	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
18529	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
2287	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
2287	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
2288	139	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
2289	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
2289	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
2290	146	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
2290	146	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
2291	149	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
2291	149	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
2292	152	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
2292	152	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
18532	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
18532	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
2307	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
2307	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
18533	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
18533	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
18533	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
18534	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
18534	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
18534	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
2308	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
2308	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
2309	96	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
2310	100	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
2310	100	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
1121	114	8	WeibullDistribution.java	WeibullDistribution	alpha	double	0	NotStrictlyPositiveException	$ <= 0
1122	118	8	WeibullDistribution.java	WeibullDistribution	beta	double	0	NotStrictlyPositiveException	$ <= 0
1123	147	8	WeibullDistribution.java	density	x	double	0	RET	$ < 0
1124	167	8	WeibullDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
1125	184	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
1125	184	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
1126	186	15	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1127	188	16	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
1128	215	8	WeibullDistribution.java	getNumericalMean	THIS	WeibullDistribution	0	DEF	$.numericalMeanIsCalculated
1129	241	8	WeibullDistribution.java	getNumericalVariance	THIS	WeibullDistribution	0	DEF	$.numericalVarianceIsCalculated
3114	51	8	Weight.java	Weight	weight	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
2235	53	8	Weight.java	Weight	weight	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
2390	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2390	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2391	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	y.$.length == 0
2391	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	x.$.length == 0
2391	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2391	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
2392	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	DimensionMismatchException	y.$.length != x.$.length
2392	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	DimensionMismatchException	y.length != $.length
2392	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	DimensionMismatchException	$.length != x.length
18545	102	8	WilcoxonSignedRankTest.java	calculateDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < x.$.length
18545	102	8	WilcoxonSignedRankTest.java	calculateDifferences	i	int	0	NIL-FOR	$ < x.length
18545	102	8	WilcoxonSignedRankTest.java	calculateDifferences	x	double[]	0	NIL-FOR	i < $.length
2393	120	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NullArgumentException	$ == null
2394	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NoDataException	z.$.length == 0
2394	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NoDataException	$.length == 0
18546	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
18546	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	i	int	0	NIL-FOR	$ < z.length
18546	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NIL-FOR	i < $.length
18547	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
18547	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	NIL-FOR	$ < z.length
18547	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	NIL-FOR	i < $.length
2395	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	DEF	z[$] > 0
2395	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	DEF	$[i] > 0
18548	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	NIL-FOR	$ < m
18548	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	m	int	0	NIL-FOR	i < $
18549	219	12	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	NIL-FOR	$ < N
2396	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	DEF	((i >> $) & 1) == 1
2396	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	DEF	(($ >> j) & 1) == 1
2397	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	rankSum	int	0	DEF	$ >= Wmax
2397	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	Wmax	double	0	DEF	rankSum >= $
2398	314	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	0	NumberIsTooLargeException	$
2399	318	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	1	RET	$
1288	77	8	ZipfDistribution.java	ZipfDistribution	numberOfElements	int	0	NotStrictlyPositiveException	$ <= 0
1289	81	8	ZipfDistribution.java	ZipfDistribution	exponent	double	0	NotStrictlyPositiveException	$ <= 0
1290	110	8	ZipfDistribution.java	probability	THIS	ZipfDistribution	0	RET	x > $.numberOfElements
1290	110	8	ZipfDistribution.java	probability	x	int	0	RET	$ > numberOfElements
1290	110	8	ZipfDistribution.java	probability	x	int	0	RET	$ <= 0
1291	119	8	ZipfDistribution.java	cumulativeProbability	x	int	1	RET	$ <= 0
1292	121	15	ZipfDistribution.java	cumulativeProbability	THIS	ZipfDistribution	0	RET	x >= $.numberOfElements
1292	121	15	ZipfDistribution.java	cumulativeProbability	x	int	0	RET	$ >= numberOfElements
1293	139	8	ZipfDistribution.java	getNumericalMean	THIS	ZipfDistribution	0	DEF	$.numericalMeanIsCalculated
1294	173	8	ZipfDistribution.java	getNumericalVariance	THIS	ZipfDistribution	0	DEF	$.numericalVarianceIsCalculated
17380	207	8	ZipfDistribution.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
