id	line	column	filename	methodname	varname	vartype	else	return	right
514	62	8	AVLTree.java	insert	element	T	0	DEF	$ != null
515	63	12	AVLTree.java	insert	THIS	AVLTree	1	DEF	$.top == null
516	82	8	AVLTree.java	delete	element	T	0	RET	$ != null
31722	83	12	AVLTree.java	delete	node	Node	0	NIL-FOR	$ != null
517	86	16	AVLTree.java	delete	THIS	AVLTree	1	RET	node.$.element == element
517	86	16	AVLTree.java	delete	node	Node	1	RET	$.element == element
517	86	16	AVLTree.java	delete	element	T	1	RET	node.element == $
518	89	23	AVLTree.java	delete	THIS	AVLTree	0	RET	node.$.element.compareTo(element) > 0
518	89	23	AVLTree.java	delete	node	Node	0	RET	$.element.compareTo(element) > 0
518	89	23	AVLTree.java	delete	element	T	0	RET	node.element.compareTo($) > 0
31723	153	8	AVLTree.java	getNotSmaller	node	Node	0	NIL-FOR	$ != null
519	154	12	AVLTree.java	getNotSmaller	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) < 0
519	154	12	AVLTree.java	getNotSmaller	node	Node	1	RET	$.element.compareTo(reference) < 0
519	154	12	AVLTree.java	getNotSmaller	reference	T	1	RET	node.element.compareTo($) < 0
520	155	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.right == null
520	155	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.right == null
521	161	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.left == null
521	161	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.left == null
31724	184	8	AVLTree.java	getNotLarger	node	Node	0	NIL-FOR	$ != null
522	185	12	AVLTree.java	getNotLarger	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) > 0
522	185	12	AVLTree.java	getNotLarger	node	Node	1	RET	$.element.compareTo(reference) > 0
522	185	12	AVLTree.java	getNotLarger	reference	T	1	RET	node.element.compareTo($) > 0
523	186	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.left == null
523	186	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.left == null
524	192	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.right == null
524	192	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.right == null
964	79	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
964	79	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
965	115	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	THIS	AbstractContinuousDistribution	0	RET	FastMath.abs(rootFindingFunction.value(lowerBound)) < $.getSolverAbsoluteAccuracy()
965	115	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	FastMath.abs($.value(lowerBound)) < getSolverAbsoluteAccuracy()
965	115	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	lowerBound	double	0	RET	FastMath.abs(rootFindingFunction.value($)) < getSolverAbsoluteAccuracy()
966	118	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	THIS	AbstractContinuousDistribution	0	RET	FastMath.abs(rootFindingFunction.value(upperBound)) < $.getSolverAbsoluteAccuracy()
966	118	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	FastMath.abs($.value(upperBound)) < getSolverAbsoluteAccuracy()
966	118	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	upperBound	double	0	RET	FastMath.abs(rootFindingFunction.value($)) < getSolverAbsoluteAccuracy()
967	169	8	AbstractContinuousDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
31758	174	8	AbstractContinuousDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
31758	174	8	AbstractContinuousDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1016	74	8	AbstractDistribution.java	cumulativeProbability	x0	double	0	NumberIsTooLargeException	$ > x1
1016	74	8	AbstractDistribution.java	cumulativeProbability	x1	double	0	NumberIsTooLargeException	x0 > $
1017	97	8	AbstractDistribution.java	getNumericalMean	THIS	AbstractDistribution	0	DEF	$.numericalMeanIsCalculated
1018	123	8	AbstractDistribution.java	getNumericalVariance	THIS	AbstractDistribution	0	DEF	$.numericalVarianceIsCalculated
1223	76	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ <= 0
1224	80	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ <= 0
1225	97	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NullArgumentException	$ == null
1226	100	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1226	100	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$.length == 0
1227	103	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d[0].length == 0
1227	103	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$[0].length == 0
1228	118	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1228	118	8	AbstractFieldMatrix.java	extractField	d	T[]	0	NoDataException	$.length == 0
1229	139	8	AbstractFieldMatrix.java	buildArray	columns	int	0	RET	$ < 0
32121	145	8	AbstractFieldMatrix.java	buildArray	THIS	AbstractFieldMatrix	0	NIL-FOR	i < array.$.length
32121	145	8	AbstractFieldMatrix.java	buildArray	i	int	0	NIL-FOR	$ < array.length
32121	145	8	AbstractFieldMatrix.java	buildArray	array	T[][]	0	NIL-FOR	i < $.length
32122	187	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
32122	187	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
32123	188	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
32123	188	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
32124	204	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
32124	204	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
32125	205	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
32125	205	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
32126	219	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
32126	219	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
32127	220	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
32127	220	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
32128	233	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
32128	233	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
32129	234	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
32129	234	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
32130	251	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
32130	251	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
32131	252	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
32131	252	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
32132	254	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
32132	254	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1230	271	8	AbstractFieldMatrix.java	power	p	int	0	IllegalArgumentException	$ < 0
1231	275	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NonSquareMatrixException	$.isSquare()
1232	279	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 0
1233	283	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 1
32133	300	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
32133	300	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
32133	300	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1234	301	12	AbstractFieldMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1234	301	12	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
32134	312	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
32134	312	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
32134	312	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
32135	331	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
32135	331	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
32135	331	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
32136	333	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
32136	333	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
32136	333	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
32137	348	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
32137	348	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
32138	349	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
32138	349	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1235	390	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1235	390	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1235	390	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1235	390	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1235	390	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1235	390	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1236	429	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1236	429	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1236	429	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1236	429	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1236	429	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
1236	429	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
32139	438	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
32139	438	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
32139	438	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
32140	440	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
32140	440	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
32140	440	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1237	449	8	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	NullArgumentException	$ == null
1238	453	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1239	458	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
32141	462	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
32141	462	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1240	463	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1240	463	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1240	463	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1240	463	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[r].length != nCols
32142	473	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
32142	473	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
32143	474	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
32143	474	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
32144	485	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
32144	485	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1241	497	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1241	497	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1241	497	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
32145	503	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
32145	503	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
32146	515	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
32146	515	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1242	527	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1242	527	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1242	527	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
32147	533	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
32147	533	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1243	548	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1243	548	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nCols
32148	552	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
32148	552	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1244	567	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1244	567	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nRows
32149	571	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
32149	571	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
32150	582	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
32150	582	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1245	594	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1245	594	8	AbstractFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1245	594	8	AbstractFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
32151	597	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
32151	597	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
32152	608	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
32152	608	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1246	620	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1246	620	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1246	620	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
32153	623	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
32153	623	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1247	671	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1247	671	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
32154	675	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
32154	675	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1248	686	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1248	686	8	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1248	686	8	AbstractFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
32155	691	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
32155	691	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
32156	693	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
32156	693	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1249	709	12	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1249	709	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nCols
32157	714	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
32157	714	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
32158	716	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
32158	716	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1250	731	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1250	731	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1250	731	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
32159	736	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
32159	736	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
32160	738	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
32160	738	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1251	754	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1251	754	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nRows
32161	759	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
32161	759	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
32162	761	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
32162	761	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
32163	776	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
32163	776	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
32164	777	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
32164	777	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
32165	791	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
32165	791	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
32166	792	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
32166	792	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
32167	806	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
32167	806	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
32168	807	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
32168	807	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
32169	823	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
32169	823	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
32170	824	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
32170	824	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
32171	836	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
32171	836	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
32172	837	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
32172	837	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
32173	851	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
32173	851	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
32174	852	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
32174	852	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
32175	866	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
32175	866	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
32176	867	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
32176	867	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
32177	883	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
32177	883	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
32178	884	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
32178	884	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
32179	928	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
32179	928	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1252	929	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
32180	933	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
32180	933	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1253	934	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
1254	956	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
1254	956	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
1255	959	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix<?> == false
1256	965	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getRowDimension() != nRows
1256	965	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getColumnDimension() != nCols
1256	965	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1256	965	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
32181	968	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
32181	968	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
32182	969	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
32182	969	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1257	970	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
1257	970	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
1257	970	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
1257	970	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
32183	990	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
32183	990	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
32184	991	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
32184	991	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1258	1005	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1258	1005	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1258	1005	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= getRowDimension()
1259	1018	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1259	1018	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= getColumnDimension()
1259	1018	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1260	1040	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1260	1040	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1261	1047	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1261	1047	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1262	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1262	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1263	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedRows.$.length == 0
1263	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedColumns.$.length == 0
1263	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1263	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1264	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1264	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1264	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1264	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1265	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1265	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1265	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1265	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1266	1119	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DimensionMismatchException	$.getColumnDimension() != m.getRowDimension()
1266	1119	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DimensionMismatchException	getColumnDimension() != $.getRowDimension()
866	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	NullArgumentException	$ == null
867	132	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	NullArgumentException	$ == null
868	162	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
868	162	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
31753	164	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
31753	164	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
31753	164	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
869	169	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
869	169	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
917	87	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	0	NumberIsTooSmallException	x1 < $
917	87	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	double	0	NumberIsTooSmallException	$ < x0
918	91	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	1	RET	FastMath.floor($) < $
919	125	8	AbstractIntegerDistribution.java	probability	fl	double	1	RET	$ == x
919	125	8	AbstractIntegerDistribution.java	probability	x	double	1	RET	fl == $
920	144	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	NumberIsTooSmallException	x1 < $
920	144	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	NumberIsTooSmallException	$ < x0
921	163	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0
921	163	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1
31755	172	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	0	NIL-WHILE	$ < x1
31755	172	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	0	NIL-WHILE	x0 < $
922	175	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	1	DEF	$ > p
922	175	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	1	DEF	pm > $
923	177	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x1
923	177	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	1	DEF	xm == $
924	187	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x0
924	187	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	1	DEF	xm == $
31756	200	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	0	NIL-WHILE	$ > p
31756	200	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	pm > $
925	242	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
31757	247	8	AbstractIntegerDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
31757	247	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
926	268	8	AbstractIntegerDistribution.java	checkedCumulativeProbability	result	double	0	MathException	Double.isNaN($)
2524	205	8	AbstractIntegrator.java	computeDerivatives	THIS	AbstractIntegrator	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
2525	242	12	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.statesInitialized
2526	261	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.state.evaluateStep(interpolator)
2526	261	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	state.evaluateStep($)
33196	267	12	AbstractIntegrator.java	acceptStep	occuringEvents	SortedSet<EventState>	0	NIL-WHILE	$.isEmpty()
2527	290	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	RET	$.isLastStep
2528	296	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	RET	$.reset(eventT, eventY)
2528	296	16	AbstractIntegrator.java	acceptStep	eventT	double	0	RET	currentEvent.reset($, eventY)
2528	296	16	AbstractIntegrator.java	acceptStep	eventY	double[]	0	RET	currentEvent.reset(eventT, $)
2529	311	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	DEF	$.evaluateStep(interpolator)
2529	311	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	currentEvent.evaluateStep($)
2530	334	12	AbstractIntegrator.java	acceptStep	cause	Throwable	0	DEF	$ instanceof MathUserException
2530	334	12	AbstractIntegrator.java	acceptStep	cause	Throwable	0	DEF	$ != null
2531	357	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	ode.getDimension() != y0.$.length
2531	357	8	AbstractIntegrator.java	sanityChecks	ode	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y0.length
2531	357	8	AbstractIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	ode.getDimension() != $.length
2532	362	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	ode.getDimension() != y.$.length
2532	362	8	AbstractIntegrator.java	sanityChecks	ode	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y.length
2532	362	8	AbstractIntegrator.java	sanityChecks	y	double[]	0	IntegratorException	ode.getDimension() != $.length
2533	367	8	AbstractIntegrator.java	sanityChecks	t0	double	0	IntegratorException	FastMath.abs(t - $) <= 1.0e-12 * FastMath.max(FastMath.abs($), FastMath.abs(t))
2533	367	8	AbstractIntegrator.java	sanityChecks	t	double	0	IntegratorException	FastMath.abs($ - t0) <= 1.0e-12 * FastMath.max(FastMath.abs(t0), FastMath.abs($))
1580	112	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	$.weightedResidualJacobian.$.length != $.rows
32589	118	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
32589	118	8	AbstractLeastSquaresOptimizer.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
32590	121	12	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
32590	121	12	AbstractLeastSquaresOptimizer.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1581	137	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	$.objective.$.length != $.rows
32591	145	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
32591	145	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
32592	192	8	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.cols
32592	192	8	AbstractLeastSquaresOptimizer.java	getCovariances	i	int	0	NIL-FOR	$ < cols
32593	193	12	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
32593	193	12	AbstractLeastSquaresOptimizer.java	getCovariances	j	int	0	NIL-FOR	$ < cols
32594	195	16	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	k < $.rows
32594	195	16	AbstractLeastSquaresOptimizer.java	getCovariances	k	int	0	NIL-FOR	$ < rows
1582	223	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NumberIsTooSmallException	$.rows <= $.cols
32595	230	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
32595	230	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
32595	230	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
1516	98	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxCountExceededException	++$.iterations > $.maxIterations
2203	93	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DEF	$ == null
2204	97	8	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	data.$.length != nobs * (nvars + 1)
2204	97	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DEF	$.length != nobs * (nvars + 1)
2204	97	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DEF	data.length != $ * (nvars + 1)
2204	97	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DEF	data.length != nobs * ($ + 1)
2205	101	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DEF	$ <= nvars
2205	101	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DEF	nobs <= $
32980	109	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
32980	109	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
2206	111	12	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	$.noIntercept
32981	114	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < cols
32981	114	12	AbstractMultipleLinearRegression.java	newSampleData	cols	int	0	NIL-FOR	j < $
2207	129	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	DEF	$ == null
2208	133	8	AbstractMultipleLinearRegression.java	newYSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	y.$.length == 0
2208	133	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	DEF	$.length == 0
2209	164	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DEF	$ == null
2210	168	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length == 0
2210	168	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DEF	$.length == 0
2211	172	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	$.noIntercept
32982	177	12	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NIL-FOR	i < x.$.length
32982	177	12	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	NIL-FOR	$ < x.length
32982	177	12	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NIL-FOR	i < $.length
2212	178	16	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x[i].length != nVars
2212	178	16	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	DEF	x[$].length != nVars
2212	178	16	AbstractMultipleLinearRegression.java	newXSampleData	nVars	int	0	DEF	x[i].length != $
2212	178	16	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DEF	$[i].length != nVars
2213	205	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length != y.$.length
2213	205	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$.length != y.length
2213	205	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$ == null
2213	205	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DEF	x.length != $.length
2213	205	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DEF	$ == null
2214	211	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length == 0
2214	211	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$.length == 0
2215	215	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x[0].length + 1 > x.$.length
2215	215	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$[0].length + 1 > $.length
2216	232	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length != covariance.$.length
2216	232	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DEF	$.length != covariance.length
2216	232	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	x.length != $.length
2217	236	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	covariance.$.length != covariance[0].length
2217	236	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	covariance.$.length > 0
2217	236	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	$.length != $[0].length
2217	236	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	$.length > 0
32983	275	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
32983	275	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
33001	108	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
33001	108	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
33001	108	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
33002	110	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
2257	111	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
2258	115	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
2258	115	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
2258	115	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
2259	157	8	AbstractRandomGenerator.java	nextInt	n	int	0	NotStrictlyPositiveException	$ <= 0
2260	253	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
33003	261	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
2261	266	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
1162	54	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ < 1
1163	57	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ < 1
31999	76	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
31999	76	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
32000	77	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
32000	77	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
32001	93	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
32001	93	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
32002	94	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
32002	94	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
32003	107	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
32003	107	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
32004	108	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
32004	108	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
32005	121	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
32005	121	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
32006	122	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
32006	122	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
32007	139	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
32007	139	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
32008	140	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
32008	140	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
32009	142	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
32009	142	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1164	159	8	AbstractRealMatrix.java	power	p	int	0	IllegalArgumentException	$ < 0
1165	163	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NonSquareMatrixException	$.isSquare()
1166	167	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 0
1167	171	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 1
32010	188	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
32010	188	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
32010	188	8	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1168	189	12	AbstractRealMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1168	189	12	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
1169	194	16	AbstractRealMatrix.java	power	maxI	int	0	DEF	$ == -1
32011	203	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ <= maxI
32011	203	8	AbstractRealMatrix.java	power	maxI	int	0	NIL-FOR	i <= $
32012	220	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
32012	220	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
32012	220	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
32013	222	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
32013	222	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
32013	222	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
32014	301	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
32014	301	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
32015	302	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
32015	302	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1170	339	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1170	339	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1170	339	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1170	339	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1170	339	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1170	339	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1171	375	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1171	375	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1171	375	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1171	375	8	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1171	375	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
1171	375	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
32016	382	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
32016	382	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
32016	382	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
32017	384	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
32017	384	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
32017	384	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1172	395	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1173	400	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
32018	404	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
32018	404	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1174	405	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1174	405	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1174	405	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1174	405	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[r].length != nCols
32019	415	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
32019	415	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
32020	416	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
32020	416	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
32021	427	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
32021	427	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1175	438	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1175	438	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1175	438	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
32022	444	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
32022	444	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
32023	454	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
32023	454	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1176	465	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1176	465	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1176	465	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
32024	471	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
32024	471	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1177	485	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1177	485	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nCols
32025	489	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
32025	489	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1178	503	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1178	503	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nRows
32026	507	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
32026	507	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
32027	517	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
32027	517	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1179	528	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1179	528	8	AbstractRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1179	528	8	AbstractRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
32028	531	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
32028	531	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
32029	541	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
32029	541	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1180	552	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1180	552	8	AbstractRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1180	552	8	AbstractRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
32030	555	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
32030	555	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1181	617	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1181	617	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
32031	621	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
32031	621	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1182	631	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1182	631	8	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1182	631	8	AbstractRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
32032	636	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
32032	636	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
32033	638	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
32033	638	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1183	655	12	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1183	655	12	AbstractRealMatrix.java	operate	v	RealVector	0	DimensionMismatchException	$.getDimension() != nCols
32034	660	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
32034	660	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
32035	662	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
32035	662	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1184	677	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1184	677	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1184	677	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
32036	682	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
32036	682	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
32037	684	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
32037	684	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1185	701	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1185	701	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DimensionMismatchException	$.getDimension() != nRows
32038	706	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
32038	706	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
32039	708	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
32039	708	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
32040	723	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
32040	723	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
32041	724	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
32041	724	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
32042	738	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
32042	738	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
32043	739	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
32043	739	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
32044	753	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
32044	753	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
32045	754	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
32045	754	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
32046	770	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
32046	770	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
32047	771	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
32047	771	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
32048	783	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
32048	783	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
32049	784	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
32049	784	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
32050	798	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
32050	798	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
32051	799	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
32051	799	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
32052	813	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
32052	813	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
32053	814	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
32053	814	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
32054	830	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
32054	830	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
32055	831	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
32055	831	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
32056	875	8	AbstractRealMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
32056	875	8	AbstractRealMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1186	876	12	AbstractRealMatrix.java	toString	i	int	0	DEF	$ > 0
32057	880	12	AbstractRealMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
32057	880	12	AbstractRealMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1187	881	16	AbstractRealMatrix.java	toString	j	int	0	DEF	$ > 0
1188	903	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
1188	903	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
1189	906	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
1190	912	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
1190	912	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
1190	912	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1190	912	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
32058	915	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
32058	915	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
32059	916	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
32059	916	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1191	917	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
1191	917	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
1191	917	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
1191	917	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
32060	937	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
32060	937	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
32061	938	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
32061	938	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
552	90	8	AbstractRegion.java	AbstractRegion	boundary	Collection<SubHyperplane<S>>	1	DEF	$.size() == 0
553	141	8	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	1	DEF	hyperplanes.$.length == 0
553	141	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$.length == 0
553	141	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$ == null
554	152	16	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	0	DEF	node.insertCut($.hyperplane)
554	152	16	AbstractRegion.java	AbstractRegion	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
31731	179	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
31731	179	8	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	NIL-WHILE	$ == null
555	181	12	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	DEF	node.insertCut($.copySelf())
555	181	12	AbstractRegion.java	insertCuts	node	BSPTree<S>	0	DEF	$.insertCut(inserted.copySelf())
556	186	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	RET	$.hasNext()
31732	193	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
557	235	8	AbstractRegion.java	isEmpty	node	BSPTree<S>	0	RET	$.getCut() == null
558	264	8	AbstractRegion.java	checkPoint	cell	BSPTree<S>	0	RET	$.getCut() == null
559	278	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getCut() != null
559	278	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getAttribute() == null
559	278	8	AbstractRegion.java	getTree	includeBoundaryAttributes	boolean	0	DEF	$
560	289	8	AbstractRegion.java	recurseBuildBoundary	node	BSPTree<S>	0	DEF	$.getCut() != null
561	299	12	AbstractRegion.java	recurseBuildBoundary	plusChar	Characterization<S>	0	DEF	$.hasOut()
562	306	16	AbstractRegion.java	recurseBuildBoundary	minusChar	Characterization<S>	0	DEF	$.hasIn()
563	311	12	AbstractRegion.java	recurseBuildBoundary	plusChar	Characterization<S>	0	DEF	$.hasIn()
564	318	16	AbstractRegion.java	recurseBuildBoundary	minusChar	Characterization<S>	0	DEF	$.hasOut()
565	345	8	AbstractRegion.java	characterize	node	BSPTree<S>	1	DEF	$.getCut() == null
566	379	8	AbstractRegion.java	getSize	THIS	AbstractRegion	0	DEF	$.barycenter == null
567	394	8	AbstractRegion.java	getBarycenter	THIS	AbstractRegion	0	DEF	$.barycenter == null
568	438	8	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	RET	$.getCut() == null
569	439	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getAttribute()
570	451	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
570	451	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
570	451	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
571	452	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
571	452	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
572	456	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
572	456	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
573	460	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
573	460	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
574	466	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
574	466	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
574	466	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
575	467	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
575	467	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
576	471	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
576	471	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
577	475	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
577	475	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
578	487	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
578	487	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
579	493	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())
579	493	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().getHyperplane().sameOrientationAs($.getHyperplane())
580	494	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
580	494	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
581	497	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
581	497	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
582	501	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
582	501	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
583	504	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
583	504	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
584	569	8	AbstractRegion.java	recurseIntersection	node	BSPTree<S>	0	RET	$.getCut() == null
585	583	12	AbstractRegion.java	recurseIntersection	plus	SubHyperplane<S>	1	RET	$ == null
586	585	19	AbstractRegion.java	recurseIntersection	minus	SubHyperplane<S>	1	RET	$ == null
587	619	8	AbstractRegion.java	recurseTransform	node	BSPTree<S>	0	RET	$.getCut() == null
588	626	8	AbstractRegion.java	recurseTransform	attribute	BoundaryAttribute<S>	0	DEF	$ != null
1593	98	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
1594	101	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
1594	101	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
32610	109	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
32610	109	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
32611	111	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
32611	111	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
1595	112	16	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
1595	112	16	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
1596	133	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
1596	133	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
32612	145	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
32612	145	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
32612	145	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
1597	149	12	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
1597	149	12	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
32613	152	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
32613	152	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
32614	155	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
32614	155	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1598	156	20	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
1598	156	20	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
1598	156	20	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
1599	161	16	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
1600	168	12	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
32615	170	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
32615	170	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1601	219	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
1601	219	8	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
32616	228	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
32616	228	8	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
32617	231	12	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
32617	231	12	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
32618	251	8	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
32618	251	8	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
1602	254	12	AbstractSimplex.java	evaluate	vertex	RealPointValuePair	0	DEF	Double.isNaN($.getValue())
32619	272	8	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
32619	272	8	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
1603	273	12	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
1603	273	12	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
1603	273	12	AbstractSimplex.java	replaceWorstPoint	pointValuePair	RealPointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
1603	273	12	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
1604	300	8	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1604	300	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
1604	300	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1605	315	8	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1605	315	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
1605	315	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1606	329	8	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
1606	329	8	AbstractSimplex.java	setPoints	points	RealPointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
32620	345	8	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
32620	345	8	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
2394	159	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState != null
2394	159	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState != null
2395	340	6	AbstractStepInterpolator.java	getInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
2396	355	6	AbstractStepInterpolator.java	getInterpolatedDerivatives	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
2397	409	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
2398	442	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
2399	454	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
33073	455	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
33073	455	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
2400	497	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
33074	501	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
33074	501	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
1866	58	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	NullArgumentException	$ == null
1867	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1867	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1867	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
1867	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
1868	126	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	NullArgumentException	$ == null
1869	145	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1869	145	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
1869	145	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
1869	145	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
32820	147	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
32820	147	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
1870	162	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
1870	162	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
1871	165	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
614	126	8	AbstractSubHyperplane.java	recurseTransform	node	BSPTree<T>	0	RET	$.getCut() == null
615	133	8	AbstractSubHyperplane.java	recurseTransform	attribute	BoundaryAttribute<T>	0	DEF	$ != null
1501	112	8	AbstractUnivariateRealOptimizer.java	optimize	f	UnivariateRealFunction	0	NullArgumentException	$ == null
1502	115	8	AbstractUnivariateRealOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
1991	163	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
1992	167	8	AbstractUnivariateStatistic.java	test	begin	int	0	NotPositiveException	$ < 0
1993	171	8	AbstractUnivariateStatistic.java	test	length	int	0	NotPositiveException	$ < 0
1994	175	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
1994	175	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
1994	175	8	AbstractUnivariateStatistic.java	test	begin	int	0	NumberIsTooLargeException	$ + length > values.length
1994	175	8	AbstractUnivariateStatistic.java	test	length	int	0	NumberIsTooLargeException	begin + $ > values.length
1995	180	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
1995	180	8	AbstractUnivariateStatistic.java	test	allowEmpty	boolean	0	RET	$
1996	258	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	NullArgumentException	$ == null
1997	262	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DimensionMismatchException	weights.$.length != values.$.length
1997	262	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DimensionMismatchException	weights.length != $.length
1997	262	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DimensionMismatchException	$.length != values.length
32851	267	8	AbstractUnivariateStatistic.java	test	i	int	0	NIL-FOR	$ < begin + length
32851	267	8	AbstractUnivariateStatistic.java	test	begin	int	0	NIL-FOR	i < $ + length
32851	267	8	AbstractUnivariateStatistic.java	test	length	int	0	NIL-FOR	i < begin + $
1998	268	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isNaN(weights[$])
1998	268	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isNaN($[i])
1999	271	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isInfinite(weights[$])
1999	271	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
2000	274	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	weights[$] < 0
2000	274	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	$[i] < 0
2001	277	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] > 0.0
2001	277	12	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
2001	277	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] > 0.0
2002	282	8	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	MathIllegalArgumentException	$
32996	111	8	AbstractWell.java	AbstractWell	j	int	0	NIL-FOR	$ < r
32996	111	8	AbstractWell.java	AbstractWell	r	int	0	NIL-FOR	j < $
2255	154	8	AbstractWell.java	setSeed	seed	int[]	0	RET	$ == null
2256	161	8	AbstractWell.java	setSeed	THIS	AbstractWell	0	DEF	seed.$.length < $.v.$.length
2256	161	8	AbstractWell.java	setSeed	seed	int[]	0	DEF	$.length < v.length
32997	162	12	AbstractWell.java	setSeed	THIS	AbstractWell	0	NIL-FOR	i < $.v.$.length
32997	162	12	AbstractWell.java	setSeed	i	int	0	NIL-FOR	$ < v.length
2478	204	8	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2478	204	8	AdamsBashforthIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
33129	231	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-DOWHILE	$.isLastStep
33130	234	12	AdamsBashforthIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
33131	240	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.mainSetDimension
33131	240	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < mainSetDimension
2479	250	16	AdamsBashforthIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
33132	270	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
33132	270	12	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
33132	270	12	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2480	284	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.isLastStep
2481	289	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.resetOccurred
2482	305	16	AdamsBashforthIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
2473	221	8	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2473	221	8	AdamsMoultonIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
33125	248	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-DOWHILE	$.isLastStep
33126	251	12	AdamsMoultonIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
33127	264	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
33127	264	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
33127	264	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2474	273	16	AdamsMoultonIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
33128	287	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
33128	287	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
33128	287	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2475	302	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.isLastStep
2476	307	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.resetOccurred
2477	324	16	AdamsMoultonIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
33184	165	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
33185	177	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
33185	177	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
2523	191	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
33186	225	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
33186	225	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
33186	225	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
33187	230	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
33187	230	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
33187	230	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
33188	261	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < y.$.length
33188	261	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < y.length
33188	261	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	y	double[][]	0	NIL-FOR	i < $.length
33189	271	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < aI.$.length
33189	271	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < aI.length
33189	271	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	aI	double[]	0	NIL-FOR	j < $.length
33190	282	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < yI.$.length
33190	282	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < yI.length
33190	282	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	yI	double[]	0	NIL-FOR	j < $.length
33191	328	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
33191	328	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
33191	328	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
33192	331	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
33192	331	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
33192	331	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
2507	208	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
2507	208	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
2507	208	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
2507	208	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
2508	231	6	AdaptiveStepsizeIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	1	DEF	$ instanceof ExtendedFirstOrderDifferentialEquations
2509	237	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance.$.length != $.mainSetDimension
2509	237	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance != null
2510	242	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance != null
2510	242	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance.$.length != $.mainSetDimension
2511	269	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
33173	279	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
33173	279	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
33173	279	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2512	288	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
33174	293	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
33174	293	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
33174	293	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
33175	300	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
33175	300	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
33175	300	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2513	314	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
2513	314	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
2514	317	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
2514	317	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
2515	320	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
2516	341	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	FastMath.abs(h) < $.minStep
2516	341	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	IntegratorException	FastMath.abs($) < minStep
2517	342	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
2518	351	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
2518	351	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
2519	353	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
2519	353	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
2005	302	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
2006	306	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
32852	316	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
2007	318	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
2007	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
2007	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
2008	321	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
2008	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
2008	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
2009	333	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
2010	335	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
2373	43	8	ArgUtils.java	flatten	array	Object[]	0	DEF	$ != null
2374	45	16	ArgUtils.java	flatten	THIS	ArgUtils	1	DEF	$.o instanceof Object[]
1211	151	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
1212	156	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NoDataException	$ == 0
1213	160	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
32090	163	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
32090	163	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
1214	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	d[r].length != nCols
1214	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1214	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1214	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DimensionMismatchException	$[r].length != nCols
32091	195	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
32091	195	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
32092	227	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
32092	227	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
32093	231	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
32093	231	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
32094	254	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
32094	254	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
32095	258	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
32095	258	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
32096	283	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
32096	283	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
32097	286	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
32097	286	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
32098	288	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
32098	288	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1215	318	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DimensionMismatchException	$.data == null
1216	319	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1217	322	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1218	326	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1219	331	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
32099	335	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
32099	335	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1220	336	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1220	336	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1220	336	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1220	336	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[i].length != nCols
1221	400	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1221	400	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1221	400	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
32100	404	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
32100	404	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
32101	407	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
32101	407	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1222	420	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1222	420	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1222	420	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
32102	425	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
32102	425	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
32103	427	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
32103	427	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
32104	442	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
32104	442	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
32105	444	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
32105	444	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
32106	457	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
32106	457	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
32107	459	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
32107	459	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
32108	474	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
32108	474	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
32109	476	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
32109	476	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
32110	491	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
32110	491	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
32111	493	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
32111	493	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
32112	506	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
32112	506	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
32113	507	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
32113	507	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
32114	521	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
32114	521	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
32115	522	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
32115	522	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
32116	537	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
32116	537	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
32117	538	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
32117	538	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
32118	554	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
32118	554	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
32119	555	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
32119	555	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
32120	571	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
32120	571	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1350	117	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
1351	120	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullArgumentException	$ == null
1352	124	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NoDataException	$ == 0
1353	128	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	NoDataException	$ == 0
32369	131	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
32369	131	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
1354	132	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	d[r].length != nCols
1354	132	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1354	132	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1354	132	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DimensionMismatchException	$[r].length != nCols
32370	150	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
32370	150	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
32371	183	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
32371	183	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
32372	187	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
32372	187	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
32373	210	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
32373	210	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
32374	214	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
32374	214	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
32375	238	8	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
32375	238	8	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
32376	241	12	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
32376	241	12	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
32377	243	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
32377	243	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1355	273	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DimensionMismatchException	$.data == null
1356	274	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1357	277	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1358	282	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1359	287	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
32378	291	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
32378	291	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1360	292	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1360	292	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1360	292	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1360	292	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[i].length != nCols
1361	348	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1361	348	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1361	348	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
32379	352	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
32379	352	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
32380	355	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
32380	355	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1362	368	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1362	368	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1362	368	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
32381	373	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
32381	373	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
32382	375	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
32382	375	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
32383	391	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
32383	391	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
32384	393	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
32384	393	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
32385	406	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
32385	406	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
32386	408	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
32386	408	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
32387	423	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
32387	423	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
32388	425	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
32388	425	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
32389	440	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
32389	440	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
32390	442	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
32390	442	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
32391	455	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
32391	455	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
32392	456	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
32392	456	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
32393	470	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
32393	470	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
32394	471	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
32394	471	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
32395	486	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
32395	486	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
32396	487	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
32396	487	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
32397	503	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
32397	503	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
32398	504	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
32398	504	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
32399	520	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
32399	520	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1431	97	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1432	117	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1433	146	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1434	149	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	d.$.length == 0
1434	149	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	ZeroException	$.length == 0
1435	172	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1436	190	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1437	193	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1437	193	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1437	193	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1437	193	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1438	213	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1439	216	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1439	216	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1439	216	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1439	216	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1440	231	8	ArrayFieldVector.java	ArrayFieldVector	v	FieldVector<T>	0	NullArgumentException	$ == null
32478	236	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32478	236	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
1441	248	8	ArrayFieldVector.java	ArrayFieldVector	v	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1442	264	8	ArrayFieldVector.java	ArrayFieldVector	v	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1443	280	8	ArrayFieldVector.java	ArrayFieldVector	v1	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1443	280	8	ArrayFieldVector.java	ArrayFieldVector	v2	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1444	299	8	ArrayFieldVector.java	ArrayFieldVector	v1	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1444	299	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	NullArgumentException	$ == null
1445	318	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	NullArgumentException	$ == null
1445	318	8	ArrayFieldVector.java	ArrayFieldVector	v2	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1446	344	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	NullArgumentException	$ == null
1446	344	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	NullArgumentException	$ == null
1447	348	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1447	348	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1447	348	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
1448	369	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1448	369	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1448	369	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
32479	406	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32479	406	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
32480	417	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32480	417	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
32481	440	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32481	440	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
32482	451	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32482	451	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
32483	470	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32483	470	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
32484	478	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32484	478	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
32485	487	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32485	487	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
32486	495	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32486	495	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
32487	504	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32487	504	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
32488	512	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32488	512	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
32489	521	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32489	521	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
32490	529	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32490	529	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
32491	539	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32491	539	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
32492	548	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32492	548	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
32493	561	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32493	561	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
32494	572	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32494	572	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
32495	595	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32495	595	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
32496	606	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32496	606	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
32497	643	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32497	643	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
32498	654	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32498	654	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
32499	697	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
32499	697	12	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
32500	698	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
32500	698	16	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
32501	721	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
32501	721	8	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
32502	722	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
32502	722	12	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
32503	797	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
32503	797	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
32503	797	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
1449	857	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DimensionMismatchException	$.data.$.length != n
1449	857	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1450	871	8	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
1450	871	8	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
1451	874	8	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
1452	881	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
1452	881	12	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
32504	885	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
32504	885	12	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1453	886	16	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
1453	886	16	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
1453	886	16	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
1454	918	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	OutOfRangeException	index >= $.getDimension()
1454	918	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1454	918	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1086	102	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1087	119	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1088	122	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1088	122	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NumberIsTooLargeException	$.length < pos + size
1088	122	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1088	122	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
31904	136	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
31904	136	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
31904	136	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
1089	152	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NullArgumentException	$ == null
1090	155	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1090	155	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NumberIsTooLargeException	$.length < pos + size
1090	155	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1090	155	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
31905	159	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
31905	159	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
31905	159	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
1091	171	8	ArrayRealVector.java	ArrayRealVector	v	RealVector	0	NullArgumentException	$ == null
31906	175	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31906	175	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
31907	222	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l2
31907	222	8	ArrayRealVector.java	ArrayRealVector	l2	int	0	NIL-FOR	i < $
31908	236	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l1
31908	236	8	ArrayRealVector.java	ArrayRealVector	l1	int	0	NIL-FOR	i < $
1092	290	8	ArrayRealVector.java	add	v	RealVector	1	RET	$ instanceof ArrayRealVector
31909	296	12	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < dim
31909	296	12	ArrayRealVector.java	add	dim	int	0	NIL-FOR	i < $
31910	305	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
31910	305	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
31910	305	12	ArrayRealVector.java	add	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1093	315	8	ArrayRealVector.java	subtract	v	RealVector	1	RET	$ instanceof ArrayRealVector
31911	321	12	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < dim
31911	321	12	ArrayRealVector.java	subtract	dim	int	0	NIL-FOR	i < $
31912	330	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
31912	330	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
31912	330	12	ArrayRealVector.java	subtract	e	Entry	0	NIL-WHILE	($ = it.next()) != null
31913	346	8	ArrayRealVector.java	mapToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31913	346	8	ArrayRealVector.java	mapToSelf	i	int	0	NIL-FOR	$ < data.length
31914	355	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31914	355	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
31915	364	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31915	364	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
31916	373	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31916	373	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
31917	382	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31917	382	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
1094	391	8	ArrayRealVector.java	ebeMultiply	v	RealVector	1	RET	$ instanceof ArrayRealVector
31918	397	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < dim
31918	397	12	ArrayRealVector.java	ebeMultiply	dim	int	0	NIL-FOR	i < $
31919	404	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31919	404	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
1095	413	8	ArrayRealVector.java	ebeDivide	v	RealVector	1	RET	$ instanceof ArrayRealVector
31920	419	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < dim
31920	419	12	ArrayRealVector.java	ebeDivide	dim	int	0	NIL-FOR	i < $
31921	426	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31921	426	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
1096	452	8	ArrayRealVector.java	dotProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
31922	456	12	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31922	456	12	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
31923	465	12	ArrayRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
31923	465	12	ArrayRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
31923	465	12	ArrayRealVector.java	dotProduct	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1097	505	8	ArrayRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
31924	509	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31924	509	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
31925	517	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31925	517	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
1098	528	8	ArrayRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof ArrayRealVector
31926	532	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31926	532	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
31927	540	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31927	540	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
1099	551	8	ArrayRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
31928	555	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31928	555	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
31929	563	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31929	563	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
1100	575	8	ArrayRealVector.java	unitVector	norm	double	0	MathArithmeticException	$ == 0
1101	585	8	ArrayRealVector.java	unitize	norm	double	0	MathArithmeticException	$ == 0
1102	599	8	ArrayRealVector.java	outerProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
31930	604	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
31930	604	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
31931	605	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
31931	605	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
31932	614	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
31932	614	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
31933	615	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
31933	615	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1103	684	8	ArrayRealVector.java	setSubVector	v	RealVector	1	DEF	$ instanceof ArrayRealVector
31934	688	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
31934	688	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
31934	688	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
1104	754	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DimensionMismatchException	$.data.$.length != n
1104	754	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1105	767	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
1106	782	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
1107	787	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
1108	811	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
1108	811	8	ArrayRealVector.java	equals	other	Object	0	RET	this == $
1109	815	8	ArrayRealVector.java	equals	other	Object	0	RET	$ instanceof RealVector
1109	815	8	ArrayRealVector.java	equals	other	Object	0	RET	$ == null
1110	820	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
1110	820	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
1111	824	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
31935	828	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
31935	828	8	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1112	829	12	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
1112	829	12	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
1112	829	12	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
1113	844	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
1114	859	8	ArrayRealVector.java	combineToSelf	y	RealVector	1	DEF	$ instanceof ArrayRealVector
31936	862	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
31936	862	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
31937	867	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
31937	867	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
32673	252	8	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
32673	252	8	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
1664	256	12	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	sl.getEntry(j) >= -$.initialTrustRegionRadius
1664	256	12	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	sl.getEntry($) >= -initialTrustRegionRadius
1664	256	12	BOBYQAOptimizer.java	bobyqa	sl	ArrayRealVector	1	DEF	$.getEntry(j) >= -initialTrustRegionRadius
1665	257	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	sl.getEntry($) >= ZERO
1665	257	16	BOBYQAOptimizer.java	bobyqa	sl	ArrayRealVector	1	DEF	$.getEntry(j) >= ZERO
1666	268	19	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	su.getEntry(j) <= $.initialTrustRegionRadius
1666	268	19	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	su.getEntry($) <= initialTrustRegionRadius
1666	268	19	BOBYQAOptimizer.java	bobyqa	su	ArrayRealVector	0	DEF	$.getEntry(j) <= initialTrustRegionRadius
1667	269	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	su.getEntry($) <= ZERO
1667	269	16	BOBYQAOptimizer.java	bobyqa	su	ArrayRealVector	1	DEF	$.getEntry(j) <= ZERO
32674	432	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32674	432	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1668	457	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	PathIsExploredException	$.trustRegionCenterInterpolationPointIndex != kbase
1668	457	12	BOBYQAOptimizer.java	bobyqb	kbase	int	0	PathIsExploredException	trustRegionCenterInterpolationPointIndex != $
32675	459	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
32675	459	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
32676	460	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
32676	460	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1669	461	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
1669	461	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
1670	468	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	PathIsExploredException	$.getEvaluations() > npt
1670	468	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	PathIsExploredException	getEvaluations() > $
32677	469	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32677	469	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32678	471	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
32678	471	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
32679	475	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32679	475	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1671	508	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
1671	508	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
1672	513	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
1672	513	16	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
1673	527	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
1673	527	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
1673	527	16	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
1673	527	16	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
32680	532	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
32680	532	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1674	534	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	xnew.getEntry($) == sl.getEntry($)
1674	534	20	BOBYQAOptimizer.java	bobyqb	sl	ArrayRealVector	0	DEF	xnew.getEntry(j) == $.getEntry(j)
1674	534	20	BOBYQAOptimizer.java	bobyqb	xnew	ArrayRealVector	0	DEF	$.getEntry(j) == sl.getEntry(j)
1675	537	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	xnew.getEntry($) == su.getEntry($)
1675	537	20	BOBYQAOptimizer.java	bobyqb	su	ArrayRealVector	0	DEF	xnew.getEntry(j) == $.getEntry(j)
1675	537	20	BOBYQAOptimizer.java	bobyqb	xnew	ArrayRealVector	0	DEF	$.getEntry(j) == su.getEntry(j)
1676	540	20	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
1676	540	20	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
32681	542	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32681	542	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1677	548	24	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
1677	548	24	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
1678	565	12	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
1678	565	12	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
32682	570	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32682	570	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32683	573	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32683	573	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
32684	579	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32684	579	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
32685	583	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
32685	583	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
32686	594	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
32686	594	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
32687	597	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32687	597	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32688	602	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
32688	602	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
32689	604	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32689	604	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32690	608	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32690	608	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32691	614	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32691	614	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
32692	617	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
32692	617	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
32693	629	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
32693	629	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
32694	631	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32694	631	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32695	635	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
32695	635	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
32696	644	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32696	644	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1679	653	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
32697	686	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32697	686	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
32698	696	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32698	696	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32699	700	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
32699	700	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
32700	710	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
32700	710	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
32701	712	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32701	712	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32702	716	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32702	716	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32703	723	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
32703	723	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
32704	728	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32704	728	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32705	733	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32705	733	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1680	747	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
1681	751	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
1681	751	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
1681	751	16	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
32706	752	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32706	752	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
32707	770	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32707	770	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1682	771	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
1682	771	20	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
32708	775	20	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
32708	775	20	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
32709	784	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
32709	784	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1683	795	20	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
1683	795	20	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
1683	795	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
32710	817	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32710	817	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1684	825	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	xnew.getEntry($) == sl.getEntry($)
1684	825	16	BOBYQAOptimizer.java	bobyqb	sl	ArrayRealVector	0	DEF	xnew.getEntry(i) == $.getEntry(i)
1684	825	16	BOBYQAOptimizer.java	bobyqb	xnew	ArrayRealVector	0	DEF	$.getEntry(i) == sl.getEntry(i)
1685	828	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	xnew.getEntry($) == su.getEntry($)
1685	828	16	BOBYQAOptimizer.java	bobyqb	su	ArrayRealVector	0	DEF	xnew.getEntry(i) == $.getEntry(i)
1685	828	16	BOBYQAOptimizer.java	bobyqb	xnew	ArrayRealVector	0	DEF	$.getEntry(i) == su.getEntry(i)
1686	835	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
1687	837	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
32711	848	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
32711	848	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
32712	850	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
32712	850	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1688	852	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
1688	852	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
32713	859	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32713	859	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1689	869	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
1689	869	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
1690	875	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
1691	876	16	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
1692	880	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
1693	884	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
1694	894	16	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
1694	894	16	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
1695	900	16	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
1695	900	16	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
32714	907	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32714	907	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32715	909	24	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
32715	909	24	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
32716	918	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
32716	918	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1696	929	24	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
1696	929	24	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
1696	929	24	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
1697	941	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
1697	941	20	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
32717	957	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32717	957	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
32718	959	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
32718	959	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
32719	964	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
32719	964	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
32720	966	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32720	966	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32721	975	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32721	975	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
32722	979	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32722	979	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32723	981	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
32723	981	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
32724	985	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
32724	985	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
32725	989	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32725	989	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
32726	993	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32726	993	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1698	999	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
1698	999	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
32727	1003	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
32727	1003	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
32728	1008	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
32728	1008	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1699	1009	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
1699	1009	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
32729	1016	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32729	1016	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32730	1018	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
32730	1018	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
32731	1022	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32731	1022	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1700	1032	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
32732	1033	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32732	1033	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32733	1037	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
32733	1037	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
32734	1039	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32734	1039	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32735	1042	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32735	1042	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32736	1046	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32736	1046	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32737	1048	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
32737	1048	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
32738	1056	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32738	1056	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
32739	1058	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32739	1058	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1701	1062	20	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	xopt.getEntry($) == sl.getEntry($)
1701	1062	20	BOBYQAOptimizer.java	bobyqb	xopt	ArrayRealVector	1	DEF	$.getEntry(i) == sl.getEntry(i)
1701	1062	20	BOBYQAOptimizer.java	bobyqb	sl	ArrayRealVector	1	DEF	xopt.getEntry(i) == $.getEntry(i)
1702	1072	27	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	xopt.getEntry($) == su.getEntry($)
1702	1072	27	BOBYQAOptimizer.java	bobyqb	xopt	ArrayRealVector	1	DEF	$.getEntry(i) == su.getEntry(i)
1702	1072	27	BOBYQAOptimizer.java	bobyqb	su	ArrayRealVector	1	DEF	xopt.getEntry(i) == $.getEntry(i)
1703	1095	16	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
1703	1095	16	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
1704	1098	16	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
32740	1099	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
32740	1099	20	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
1705	1100	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
1705	1100	24	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
1706	1103	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
1706	1103	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
1707	1106	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
1707	1106	24	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
1708	1118	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
1709	1121	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
1709	1121	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
1709	1121	12	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
32741	1139	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
32741	1139	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
32742	1141	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
32742	1141	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1710	1146	16	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
1710	1146	16	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
1711	1158	12	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
1712	1160	16	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1713	1165	20	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
1713	1165	20	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
1714	1178	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1715	1181	12	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
1716	1184	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta, dnorm) > $
1716	1184	12	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($, dnorm) > rho
1716	1184	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta, $) > rho
1717	1192	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
1717	1192	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
1718	1195	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
1719	1197	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
1720	1211	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1721	1216	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	fval.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
1721	1216	12	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fval.getEntry(trustRegionCenterInterpolationPointIndex) <= $
1721	1216	12	BOBYQAOptimizer.java	bobyqb	fval	ArrayRealVector	0	DEF	$.getEntry(trustRegionCenterInterpolationPointIndex) <= fsave
32743	1217	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
32743	1217	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1722	1225	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	xopt.getEntry($) == sl.getEntry($)
1722	1225	20	BOBYQAOptimizer.java	bobyqb	xopt	ArrayRealVector	0	DEF	$.getEntry(i) == sl.getEntry(i)
1722	1225	20	BOBYQAOptimizer.java	bobyqb	sl	ArrayRealVector	0	DEF	xopt.getEntry(i) == $.getEntry(i)
1723	1228	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	xopt.getEntry($) == su.getEntry($)
1723	1228	20	BOBYQAOptimizer.java	bobyqb	xopt	ArrayRealVector	0	DEF	$.getEntry(i) == su.getEntry(i)
1723	1228	20	BOBYQAOptimizer.java	bobyqb	su	ArrayRealVector	0	DEF	xopt.getEntry(i) == $.getEntry(i)
32744	1307	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
32744	1307	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
32745	1310	8	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
32745	1310	8	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
32746	1312	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
32746	1312	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
32747	1321	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
32747	1321	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
32748	1324	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
32748	1324	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
32749	1326	12	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
32749	1326	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
32750	1330	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
32750	1330	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
32751	1346	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
32751	1346	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
1724	1347	12	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
1724	1347	12	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
32752	1352	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
32752	1352	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
32753	1365	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
32753	1365	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1725	1367	16	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
1726	1368	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < sl.getEntry(i) - xopt.getEntry(i)
1726	1368	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < sl.getEntry($) - xopt.getEntry($)
1726	1368	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < sl.getEntry(i) - xopt.getEntry(i)
1726	1368	20	BOBYQAOptimizer.java	altmov	xopt	ArrayRealVector	0	DEF	slbd * tmp < sl.getEntry(i) - $.getEntry(i)
1726	1368	20	BOBYQAOptimizer.java	altmov	sl	ArrayRealVector	0	DEF	slbd * tmp < $.getEntry(i) - xopt.getEntry(i)
1727	1372	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > su.getEntry(i) - xopt.getEntry(i)
1727	1372	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > su.getEntry($) - xopt.getEntry($)
1727	1372	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > su.getEntry(i) - xopt.getEntry(i)
1727	1372	20	BOBYQAOptimizer.java	altmov	xopt	ArrayRealVector	0	DEF	subd * tmp > su.getEntry(i) - $.getEntry(i)
1727	1372	20	BOBYQAOptimizer.java	altmov	su	ArrayRealVector	0	DEF	subd * tmp > $.getEntry(i) - xopt.getEntry(i)
1728	1378	23	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
1729	1379	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > su.getEntry(i) - xopt.getEntry(i)
1729	1379	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > su.getEntry($) - xopt.getEntry($)
1729	1379	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > su.getEntry(i) - xopt.getEntry(i)
1729	1379	20	BOBYQAOptimizer.java	altmov	xopt	ArrayRealVector	0	DEF	slbd * tmp > su.getEntry(i) - $.getEntry(i)
1729	1379	20	BOBYQAOptimizer.java	altmov	su	ArrayRealVector	0	DEF	slbd * tmp > $.getEntry(i) - xopt.getEntry(i)
1730	1383	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < sl.getEntry(i) - xopt.getEntry(i)
1730	1383	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < sl.getEntry($) - xopt.getEntry($)
1730	1383	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < sl.getEntry(i) - xopt.getEntry(i)
1730	1383	20	BOBYQAOptimizer.java	altmov	xopt	ArrayRealVector	0	DEF	subd * tmp < sl.getEntry(i) - $.getEntry(i)
1730	1383	20	BOBYQAOptimizer.java	altmov	sl	ArrayRealVector	0	DEF	subd * tmp < $.getEntry(i) - xopt.getEntry(i)
1731	1398	12	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
1731	1398	12	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
1732	1402	16	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
1732	1402	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
1733	1410	16	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
1733	1410	16	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
1734	1412	20	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
1734	1412	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
1735	1424	16	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
1735	1424	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
1736	1429	16	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
1737	1430	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
1738	1443	12	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
1738	1443	12	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
32754	1453	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
32754	1453	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1739	1458	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
1740	1461	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
32755	1476	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
32755	1476	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1741	1479	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(xopt.getEntry(i) - sl.getEntry(i), $) > ZERO
1741	1479	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(xopt.getEntry(i) - su.getEntry(i), $) < ZERO
1741	1479	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(xopt.getEntry($) - sl.getEntry($), glagValue) > ZERO
1741	1479	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(xopt.getEntry($) - su.getEntry($), glagValue) < ZERO
1741	1479	16	BOBYQAOptimizer.java	altmov	xopt	ArrayRealVector	0	DEF	Math.min($.getEntry(i) - sl.getEntry(i), glagValue) > ZERO
1741	1479	16	BOBYQAOptimizer.java	altmov	xopt	ArrayRealVector	0	DEF	Math.max($.getEntry(i) - su.getEntry(i), glagValue) < ZERO
1741	1479	16	BOBYQAOptimizer.java	altmov	sl	ArrayRealVector	0	DEF	Math.min(xopt.getEntry(i) - $.getEntry(i), glagValue) > ZERO
1741	1479	16	BOBYQAOptimizer.java	altmov	su	ArrayRealVector	0	DEF	Math.max(xopt.getEntry(i) - $.getEntry(i), glagValue) < ZERO
1742	1486	12	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
1743	1493	16	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ > ZERO
32756	1497	20	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
32756	1497	20	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1744	1498	24	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
1744	1498	24	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
1744	1498	24	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
1745	1500	28	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= sl.getEntry(i)
1745	1500	28	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= sl.getEntry($)
1745	1500	28	BOBYQAOptimizer.java	altmov	sl	ArrayRealVector	1	DEF	tmp2 <= $.getEntry(i)
1746	1505	35	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= su.getEntry(i)
1746	1505	35	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= su.getEntry($)
1746	1505	35	BOBYQAOptimizer.java	altmov	su	ArrayRealVector	1	DEF	tmp2 >= $.getEntry(i)
1747	1517	20	BOBYQAOptimizer.java	altmov	wsqsav	double	0	DEF	wfixsq > $
1747	1517	20	BOBYQAOptimizer.java	altmov	wfixsq	double	0	DEF	$ > wsqsav
1747	1517	20	BOBYQAOptimizer.java	altmov	ggfree	double	0	DEF	$ > ZERO
32757	1528	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
32757	1528	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1748	1530	16	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
1748	1530	16	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
1748	1530	16	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
1749	1535	23	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
1749	1535	23	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
1750	1537	23	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
32758	1551	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
32758	1551	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
32759	1553	16	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
32759	1553	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
1751	1558	12	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
1752	1561	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
1752	1561	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
1752	1561	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
1752	1561	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
32760	1564	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
32760	1564	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1753	1582	12	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
32761	1583	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
32761	1583	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1754	1593	8	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
1754	1593	8	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
32762	1594	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
32762	1594	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
32763	1660	8	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
32763	1660	8	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
32764	1662	12	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
32764	1662	12	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
32765	1665	12	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
32765	1665	12	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
32766	1669	8	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
32766	1669	8	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
32767	1672	8	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
32767	1672	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
32768	1674	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
32768	1674	12	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
32769	1686	8	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
32769	1686	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
1755	1693	12	BOBYQAOptimizer.java	prelim	nfm	int	1	PathIsExploredException	$ <= 2 * n
1755	1693	12	BOBYQAOptimizer.java	prelim	n	int	1	PathIsExploredException	nfm <= 2 * $
1756	1694	16	BOBYQAOptimizer.java	prelim	nfm	int	1	PathIsExploredException	$ >= 1
1756	1694	16	BOBYQAOptimizer.java	prelim	nfm	int	1	PathIsExploredException	$ <= n
1756	1694	16	BOBYQAOptimizer.java	prelim	n	int	1	PathIsExploredException	nfm <= $
1757	1697	20	BOBYQAOptimizer.java	prelim	nfmm	int	0	PathIsExploredException	su.getEntry($) == ZERO
1757	1697	20	BOBYQAOptimizer.java	prelim	su	ArrayRealVector	0	PathIsExploredException	$.getEntry(nfmm) == ZERO
1758	1702	23	BOBYQAOptimizer.java	prelim	nfm	int	0	PathIsExploredException	$ > n
1758	1702	23	BOBYQAOptimizer.java	prelim	n	int	0	PathIsExploredException	nfm > $
1759	1705	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	PathIsExploredException	sl.getEntry($) == ZERO
1759	1705	20	BOBYQAOptimizer.java	prelim	sl	ArrayRealVector	0	PathIsExploredException	$.getEntry(nfxm) == ZERO
1760	1709	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	PathIsExploredException	su.getEntry($) == ZERO
1760	1709	20	BOBYQAOptimizer.java	prelim	su	ArrayRealVector	0	PathIsExploredException	$.getEntry(nfxm) == ZERO
1761	1719	16	BOBYQAOptimizer.java	prelim	n	int	0	PathIsExploredException	ipt > $
1761	1719	16	BOBYQAOptimizer.java	prelim	ipt	int	0	PathIsExploredException	$ > n
32770	1732	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
32770	1732	12	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
1762	1736	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	xpt.getEntry(nfm, $) == sl.getEntry($)
1762	1736	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	xpt.getEntry($, j) == sl.getEntry(j)
1762	1736	16	BOBYQAOptimizer.java	prelim	xpt	Array2DRowRealMatrix	0	DEF	$.getEntry(nfm, j) == sl.getEntry(j)
1762	1736	16	BOBYQAOptimizer.java	prelim	sl	ArrayRealVector	0	DEF	xpt.getEntry(nfm, j) == $.getEntry(j)
1763	1739	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	xpt.getEntry(nfm, $) == su.getEntry($)
1763	1739	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	xpt.getEntry($, j) == su.getEntry(j)
1763	1739	16	BOBYQAOptimizer.java	prelim	xpt	Array2DRowRealMatrix	0	DEF	$.getEntry(nfm, j) == su.getEntry(j)
1763	1739	16	BOBYQAOptimizer.java	prelim	su	ArrayRealVector	0	DEF	xpt.getEntry(nfm, j) == $.getEntry(j)
1764	1749	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
1765	1752	19	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < fval.getEntry($.trustRegionCenterInterpolationPointIndex)
1765	1752	19	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fval.getEntry(trustRegionCenterInterpolationPointIndex)
1765	1752	19	BOBYQAOptimizer.java	prelim	fval	ArrayRealVector	0	DEF	f < $.getEntry(trustRegionCenterInterpolationPointIndex)
1766	1762	12	BOBYQAOptimizer.java	prelim	numEval	int	1	PathIsExploredException	$ <= 2 * n + 1
1766	1762	12	BOBYQAOptimizer.java	prelim	n	int	1	PathIsExploredException	numEval <= 2 * $ + 1
1767	1763	16	BOBYQAOptimizer.java	prelim	numEval	int	1	PathIsExploredException	$ >= 2
1767	1763	16	BOBYQAOptimizer.java	prelim	numEval	int	1	PathIsExploredException	$ <= n + 1
1767	1763	16	BOBYQAOptimizer.java	prelim	n	int	1	PathIsExploredException	numEval <= $ + 1
1768	1766	20	BOBYQAOptimizer.java	prelim	numEval	int	0	PathIsExploredException	npt < $ + n
1768	1766	20	BOBYQAOptimizer.java	prelim	n	int	0	PathIsExploredException	npt < numEval + $
1768	1766	20	BOBYQAOptimizer.java	prelim	npt	int	0	PathIsExploredException	$ < numEval + n
1769	1773	23	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
1769	1773	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
1770	1779	20	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
1770	1779	20	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
1771	1780	24	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fval.getEntry($ - n)
1771	1780	24	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fval.getEntry(nfm - n)
1771	1780	24	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fval.getEntry(nfm - $)
1771	1780	24	BOBYQAOptimizer.java	prelim	fval	ArrayRealVector	0	DEF	f < $.getEntry(nfm - n)
1772	1783	28	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
1772	1783	28	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
32771	1929	8	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
32771	1929	8	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1773	1931	12	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xopt.getEntry($) <= sl.getEntry($)
1773	1931	12	BOBYQAOptimizer.java	trsbox	xopt	ArrayRealVector	1	DEF	$.getEntry(i) <= sl.getEntry(i)
1773	1931	12	BOBYQAOptimizer.java	trsbox	sl	ArrayRealVector	1	DEF	xopt.getEntry(i) <= $.getEntry(i)
1774	1932	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gopt.getEntry($) >= ZERO
1774	1932	16	BOBYQAOptimizer.java	trsbox	gopt	ArrayRealVector	0	DEF	$.getEntry(i) >= ZERO
1775	1935	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xopt.getEntry($) >= su.getEntry($)
1775	1935	19	BOBYQAOptimizer.java	trsbox	xopt	ArrayRealVector	0	DEF	$.getEntry(i) >= su.getEntry(i)
1775	1935	19	BOBYQAOptimizer.java	trsbox	su	ArrayRealVector	0	DEF	xopt.getEntry(i) >= $.getEntry(i)
1776	1936	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gopt.getEntry($) <= ZERO
1776	1936	16	BOBYQAOptimizer.java	trsbox	gopt	ArrayRealVector	0	DEF	$.getEntry(i) <= ZERO
1777	1940	12	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
1777	1940	12	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
32772	1965	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
32772	1965	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1778	1966	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
1778	1966	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
1779	1968	23	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
1780	1977	12	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
1781	1980	12	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
1782	1984	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
1782	1984	12	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
1782	1984	12	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
32773	1999	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
32773	1999	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1783	2000	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1783	2000	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1784	2008	12	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
1785	2012	12	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
1786	2018	12	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
32774	2027	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
32774	2027	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1787	2028	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
1787	2028	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
1788	2030	20	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
1788	2030	20	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
1789	2035	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
1789	2035	20	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
1790	2045	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
1791	2048	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
1791	2048	16	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
1792	2050	20	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
32775	2056	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
32775	2056	16	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1793	2058	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1793	2058	20	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1794	2073	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
1795	2076	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
1795	2076	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
1796	2082	16	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
1797	2091	12	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
1797	2091	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
1798	2092	16	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
1798	2092	16	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
1799	2095	16	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
1799	2095	16	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
1800	2111	12	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
1800	2111	12	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
32776	2117	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
32776	2117	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1801	2118	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
1801	2118	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
1802	2139	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
1802	2139	12	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
32777	2143	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
32777	2143	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1803	2144	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
1803	2144	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
32778	2159	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
32778	2159	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1804	2160	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1804	2160	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1805	2163	20	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
1806	2167	27	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
1807	2180	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
1808	2182	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
1808	2182	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
1808	2182	24	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
1809	2191	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
1810	2193	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
1810	2193	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
1810	2193	24	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
32779	2210	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
32779	2210	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1811	2211	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1811	2211	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
32780	2226	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
32780	2226	12	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
1812	2231	16	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
1812	2231	16	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
1813	2235	23	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
1813	2235	23	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
1814	2244	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
1815	2247	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
1815	2247	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
1816	2255	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
32781	2265	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
32781	2265	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1817	2267	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1817	2267	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1818	2277	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
1818	2277	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
1818	2277	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
1819	2286	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
1819	2286	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
32782	2292	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
32782	2292	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1820	2298	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
1820	2298	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
1821	2301	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
1821	2301	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
32783	2317	12	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
32783	2317	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
32784	2319	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
32784	2319	16	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
1822	2320	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
1822	2320	20	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
32785	2328	12	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
32785	2328	12	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
1823	2329	16	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	pq.getEntry($) != ZERO
1823	2329	16	BOBYQAOptimizer.java	trsbox	pq	ArrayRealVector	0	DEF	$.getEntry(k) != ZERO
32786	2330	20	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
32786	2330	20	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1824	2335	12	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
1825	2338	12	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
1825	2338	12	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
32787	2341	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
32787	2341	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
32788	2388	8	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
32788	2388	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
32789	2389	12	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
32789	2389	12	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
32790	2398	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
32790	2398	8	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
1826	2400	12	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
1826	2400	12	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
32791	2408	16	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
32791	2408	16	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
32792	2420	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
32792	2420	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
32793	2432	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
32793	2432	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
32794	2439	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
32794	2439	8	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
32795	2444	12	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
32795	2444	12	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
1827	2447	16	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
1827	2447	16	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
1828	2465	8	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
1829	2470	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
1829	2470	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
1829	2470	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
1829	2470	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
1830	2479	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	1	DEF	$.lowerBound == null
1831	2481	15	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	DimensionMismatchException	$.lowerBound.$.length != init.$.length
1831	2481	15	BOBYQAOptimizer.java	setup	init	double[]	0	DimensionMismatchException	lowerBound.length != $.length
1832	2485	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	1	DEF	$.upperBound == null
1833	2487	15	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	DimensionMismatchException	$.upperBound.$.length != init.$.length
1833	2487	15	BOBYQAOptimizer.java	setup	init	double[]	0	DimensionMismatchException	upperBound.length != $.length
32796	2491	7	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
32796	2491	7	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
1834	2495	12	BOBYQAOptimizer.java	setup	v	double	0	OutOfRangeException	$ > hi
1834	2495	12	BOBYQAOptimizer.java	setup	v	double	0	OutOfRangeException	$ < lo
1834	2495	12	BOBYQAOptimizer.java	setup	lo	double	0	OutOfRangeException	v < $
1834	2495	12	BOBYQAOptimizer.java	setup	hi	double	0	OutOfRangeException	v > $
32797	2505	7	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
32797	2505	7	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
1835	2509	8	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
1835	2509	8	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
591	149	8	BSPTree.java	insertCut	THIS	BSPTree	0	DEF	$.cut != null
592	155	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$.isEmpty()
593	180	8	BSPTree.java	copySelf	THIS	BSPTree	0	RET	$.cut == null
594	241	8	BSPTree.java	visit	THIS	BSPTree	1	DEF	$.cut == null
31733	292	8	BSPTree.java	fitToCell	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
31733	292	8	BSPTree.java	fitToCell	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
595	293	12	BSPTree.java	fitToCell	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
595	293	12	BSPTree.java	fitToCell	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
596	311	8	BSPTree.java	getCell	THIS	BSPTree	0	RET	$.cut == null
597	318	8	BSPTree.java	getCell	offset	double	1	RET	FastMath.abs($) < 1.0e-10
598	320	15	BSPTree.java	getCell	offset	double	1	RET	$ <= 0
599	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.cut == null
599	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute == null
599	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute.equals($.minus.$.attribute)
599	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute != null
599	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.attribute == null
599	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.cut == null
599	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.cut != null
600	384	8	BSPTree.java	merge	THIS	BSPTree	1	RET	$.cut == null
601	387	15	BSPTree.java	merge	THIS	BSPTree	1	RET	tree.$.cut == null
601	387	15	BSPTree.java	merge	tree	BSPTree<S>	1	RET	$.cut == null
602	393	12	BSPTree.java	merge	parentTree	BSPTree<S>	0	DEF	$ != null
603	395	16	BSPTree.java	merge	isPlusChild	boolean	1	DEF	$
604	406	12	BSPTree.java	merge	THIS	BSPTree	0	DEF	merged.$.cut != null
604	406	12	BSPTree.java	merge	merged	BSPTree<S>	0	DEF	$.cut != null
605	488	8	BSPTree.java	split	THIS	BSPTree	0	RET	$.cut == null
606	499	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
606	499	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
607	515	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
607	515	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
608	567	8	BSPTree.java	insertInTree	parentTree	BSPTree<S>	0	DEF	$ != null
609	568	12	BSPTree.java	insertInTree	isPlusChild	boolean	1	DEF	$
610	576	8	BSPTree.java	insertInTree	THIS	BSPTree	0	DEF	$.cut != null
31734	579	12	BSPTree.java	insertInTree	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
31734	579	12	BSPTree.java	insertInTree	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
611	586	16	BSPTree.java	insertInTree	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
611	586	16	BSPTree.java	insertInTree	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
612	613	8	BSPTree.java	chopOffMinus	THIS	BSPTree	0	DEF	$.cut != null
613	627	8	BSPTree.java	chopOffPlus	THIS	BSPTree	0	DEF	$.cut != null
1609	112	8	BaseAbstractScalarOptimizer.java	optimize	f	FUNC	0	NullArgumentException	$ == null
1610	115	8	BaseAbstractScalarOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
1611	118	8	BaseAbstractScalarOptimizer.java	optimize	startPoint	double[]	0	NullArgumentException	$ == null
1659	114	8	BaseAbstractVectorialOptimizer.java	optimize	f	FUNC	0	NullArgumentException	$ == null
1660	117	8	BaseAbstractVectorialOptimizer.java	optimize	t	double[]	0	NullArgumentException	$ == null
1661	120	8	BaseAbstractVectorialOptimizer.java	optimize	w	double[]	0	NullArgumentException	$ == null
1662	123	8	BaseAbstractVectorialOptimizer.java	optimize	startPoint	double[]	0	NullArgumentException	$ == null
1663	126	8	BaseAbstractVectorialOptimizer.java	optimize	THIS	BaseAbstractVectorialOptimizer	0	DimensionMismatchException	t.$.length != w.$.length
1663	126	8	BaseAbstractVectorialOptimizer.java	optimize	t	double[]	0	DimensionMismatchException	$.length != w.length
1663	126	8	BaseAbstractVectorialOptimizer.java	optimize	w	double[]	0	DimensionMismatchException	t.length != $.length
1854	74	8	BaseMultiStartMultivariateRealOptimizer.java	BaseMultiStartMultivariateRealOptimizer	optimizer	BaseMultivariateRealOptimizer<FUNC>	0	NullArgumentException	$ == null
1854	74	8	BaseMultiStartMultivariateRealOptimizer.java	BaseMultiStartMultivariateRealOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1855	78	8	BaseMultiStartMultivariateRealOptimizer.java	BaseMultiStartMultivariateRealOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1856	114	8	BaseMultiStartMultivariateRealOptimizer.java	getOptima	THIS	BaseMultiStartMultivariateRealOptimizer	0	MathIllegalStateException	$.optima == null
32812	152	8	BaseMultiStartMultivariateRealOptimizer.java	optimize	THIS	BaseMultiStartMultivariateRealOptimizer	0	NIL-FOR	i < $.starts
32812	152	8	BaseMultiStartMultivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1857	166	8	BaseMultiStartMultivariateRealOptimizer.java	optimize	THIS	BaseMultiStartMultivariateRealOptimizer	0	DEF	$.optima[0] == null
1461	74	8	BaseMultiStartMultivariateVectorialOptimizer.java	BaseMultiStartMultivariateVectorialOptimizer	optimizer	BaseMultivariateVectorialOptimizer<FUNC>	0	NullArgumentException	$ == null
1461	74	8	BaseMultiStartMultivariateVectorialOptimizer.java	BaseMultiStartMultivariateVectorialOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1462	78	8	BaseMultiStartMultivariateVectorialOptimizer.java	BaseMultiStartMultivariateVectorialOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1463	115	8	BaseMultiStartMultivariateVectorialOptimizer.java	getOptima	THIS	BaseMultiStartMultivariateVectorialOptimizer	0	MathIllegalStateException	$.optima == null
32512	153	8	BaseMultiStartMultivariateVectorialOptimizer.java	optimize	THIS	BaseMultiStartMultivariateVectorialOptimizer	0	NIL-FOR	i < $.starts
32512	153	8	BaseMultiStartMultivariateVectorialOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1464	170	8	BaseMultiStartMultivariateVectorialOptimizer.java	optimize	THIS	BaseMultiStartMultivariateVectorialOptimizer	0	DEF	$.optima[0] == null
2988	139	8	BaseSecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
2989	142	8	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
2990	167	12	BaseSecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
2991	172	12	BaseSecantSolver.java	doSolve	fx	double	1	DEF	f1 * $ < 0
2991	172	12	BaseSecantSolver.java	doSolve	f1	double	1	DEF	$ * fx < 0
2992	202	12	BaseSecantSolver.java	doSolve	f1	double	0	MathInternalError:RET	FastMath.abs($) <= ftol
2992	202	12	BaseSecantSolver.java	doSolve	ftol	double	0	MathInternalError:RET	FastMath.abs(f1) <= $
2993	207	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
2994	212	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
2995	217	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ <= 0
2996	222	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ >= 0
2997	233	12	BaseSecantSolver.java	doSolve	x0	double	0	MathInternalError:RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
2997	233	12	BaseSecantSolver.java	doSolve	x1	double	0	MathInternalError:RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
2997	233	12	BaseSecantSolver.java	doSolve	atol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
2997	233	12	BaseSecantSolver.java	doSolve	rtol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
2357	120	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
2357	120	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
2357	120	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
2357	120	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
2357	120	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
2357	120	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
2357	120	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
2358	128	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
2358	128	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
2358	128	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
2359	195	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
2359	195	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
2359	195	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
2359	195	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
1019	99	8	BetaDistributionImpl.java	recomputeZ	THIS	BetaDistributionImpl	0	DEF	Double.isNaN($.z)
1020	110	8	BetaDistributionImpl.java	density	x	double	1	RET	$ < 0
1020	110	8	BetaDistributionImpl.java	density	x	double	1	RET	$ > 1
1021	112	15	BetaDistributionImpl.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 0
1022	113	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	NumberIsTooSmallException	$.alpha < 1
1023	117	15	BetaDistributionImpl.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 1
1024	118	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	NumberIsTooSmallException	$.beta < 1
1025	132	8	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 0
1026	134	15	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 1
1027	161	8	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ <= 0
1028	163	15	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ >= 1
1267	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
1267	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
1268	90	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
32185	100	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
32185	100	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
32186	105	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
32186	105	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
1269	108	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
1269	108	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
1269	108	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
32187	109	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
32187	109	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
32188	111	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
32188	111	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
32189	116	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
32189	116	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
1270	122	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
1271	139	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
32190	144	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
32190	144	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
1272	146	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
1272	146	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
1273	147	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
1274	151	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1274	151	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
1275	171	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
32191	181	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
32191	181	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
32192	186	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
32192	186	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
1276	189	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
1276	189	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
32193	190	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
32193	190	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
32194	192	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
32194	192	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
32195	197	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
32195	197	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
1277	203	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
32196	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
32196	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
32197	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
32197	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1278	272	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
32198	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
32198	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
32199	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
32199	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
32200	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
32200	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1279	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
1279	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
32201	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
32201	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
1280	297	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
32202	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
32202	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
32203	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
32203	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
32204	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
32204	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
32205	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
32205	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
32206	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
32206	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1281	336	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
32207	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
32207	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
32208	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
32208	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
32209	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
32209	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1282	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
1282	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
32210	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
32210	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
1283	361	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
32211	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
32211	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
32212	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
32212	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
32213	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
32213	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
2931	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
2931	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
2931	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
2931	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
2931	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$[0].length == 0
2931	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$.length == 0
2932	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
2932	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
2932	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	xLen != $.length
2933	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
2933	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
2933	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	xLen != $.length
2934	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
2934	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
2934	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	xLen != $.length
2935	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
2935	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
2935	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	xLen != $.length
33304	127	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
33304	127	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
2936	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
2936	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
2936	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
2936	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	$[i].length != yLen
2937	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
2937	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
2937	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
2937	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	$[i].length != yLen
2938	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
2938	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
2938	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
2938	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
2939	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
2939	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
2939	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
2939	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
33305	141	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
33305	141	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
2940	160	8	BicubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
2941	164	8	BicubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
2942	226	8	BicubicSplineInterpolatingFunction.java	partialDerivative	THIS	BicubicSplineInterpolatingFunction	0	DEF	$.partialDerivatives == null
2943	231	8	BicubicSplineInterpolatingFunction.java	partialDerivative	i	int	0	OutOfRangeException	$ == -1
2944	235	8	BicubicSplineInterpolatingFunction.java	partialDerivative	j	int	0	OutOfRangeException	$ == -1
33306	253	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < lastI
33306	253	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastI	int	0	NIL-FOR	i < $
33307	254	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < lastJ
33307	254	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastJ	int	0	NIL-FOR	j < $
2945	273	8	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
2945	273	8	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
33308	278	8	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
33308	278	8	BicubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
2946	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
2946	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
2946	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
33309	319	8	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < 16
33310	322	12	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < 16
33311	367	8	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	i	int	0	NIL-FOR	$ < N
33312	368	12	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	j	int	0	NIL-FOR	$ < N
2947	378	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
2947	378	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
2948	381	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
2948	381	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
33313	406	8	BicubicSplineInterpolatingFunction.java	apply	i	int	0	NIL-FOR	$ < N
33314	407	12	BicubicSplineInterpolatingFunction.java	apply	j	int	0	NIL-FOR	$ < N
2949	419	8	BicubicSplineInterpolatingFunction.java	partialDerivativeX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeX == null
2950	429	8	BicubicSplineInterpolatingFunction.java	partialDerivativeY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeY == null
2951	439	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXX == null
2952	449	8	BicubicSplineInterpolatingFunction.java	partialDerivativeYY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeYY == null
2953	459	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXY == null
33315	476	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < N
33316	477	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < N
2928	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
2928	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
2928	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
2928	39	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
2928	39	8	BicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
2928	39	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
2929	42	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
2929	42	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
2929	42	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
33292	57	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33292	57	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
2930	58	12	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
2930	58	12	BicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
2930	58	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
2930	58	12	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
33293	62	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
33293	62	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
33294	72	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
33294	72	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
33295	79	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33295	79	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
33296	85	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
33296	85	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
33297	87	12	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33297	87	12	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
33298	94	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33298	94	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
33299	96	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
33299	96	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
33300	103	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33300	103	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
33301	106	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
33301	106	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
814	118	8	BigFraction.java	BigFraction	num	BigInteger	0	NullArgumentException	$ == null
815	121	8	BigFraction.java	BigFraction	den	BigInteger	0	NullArgumentException	$ == null
816	124	8	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.equals($)
817	127	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
818	134	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
819	140	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
820	174	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isNaN($)
821	177	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isInfinite($)
822	186	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
823	190	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
31750	194	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
31750	194	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
824	199	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
825	276	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
825	276	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
826	282	8	BigFraction.java	BigFraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
826	282	8	BigFraction.java	BigFraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
826	282	8	BigFraction.java	BigFraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
31751	298	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
827	304	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
827	304	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
827	304	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
827	304	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
828	309	12	BigFraction.java	BigFraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
828	309	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
828	309	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
828	309	12	BigFraction.java	BigFraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
828	309	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
828	309	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
828	309	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
829	323	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
829	323	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
830	327	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
830	327	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
831	434	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
832	509	8	BigFraction.java	add	fraction	BigFraction	0	NullArgumentException	$ == null
833	512	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
834	519	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
834	519	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
835	616	8	BigFraction.java	divide	bg	BigInteger	0	DEF	BigInteger.ZERO.equals($)
836	666	8	BigFraction.java	divide	fraction	BigFraction	0	NullArgumentException	$ == null
837	669	8	BigFraction.java	divide	THIS	BigFraction	0	DEF	BigInteger.ZERO.equals(fraction.$.numerator)
837	669	8	BigFraction.java	divide	fraction	BigFraction	0	DEF	BigInteger.ZERO.equals($.numerator)
838	709	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
838	709	8	BigFraction.java	equals	other	Object	1	DEF	this == $
839	711	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
840	852	8	BigFraction.java	multiply	bg	BigInteger	0	NullArgumentException	$ == null
841	897	8	BigFraction.java	multiply	fraction	BigFraction	0	NullArgumentException	$ == null
842	900	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	fraction.$.numerator.equals(BigInteger.ZERO)
842	900	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
842	900	8	BigFraction.java	multiply	fraction	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
843	944	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
844	961	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
845	980	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
846	1039	8	BigFraction.java	subtract	bg	BigInteger	0	NullArgumentException	$ == null
847	1082	8	BigFraction.java	subtract	fraction	BigFraction	0	NullArgumentException	$ == null
848	1085	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
849	1091	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
849	1091	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
850	1114	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
851	1116	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
852	169	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
853	171	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
854	173	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
855	195	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
856	219	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
857	252	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
31752	275	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
31752	275	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
31752	275	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
31752	275	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
61	271	8	BigReal.java	equals	THIS	BigReal	0	RET	$ == other
61	271	8	BigReal.java	equals	other	Object	0	RET	this == $
62	275	8	BigReal.java	equals	other	Object	0	RET	$ instanceof BigReal
2339	55	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
2339	55	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
33030	70	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
33030	70	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
2340	82	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
2341	87	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
2341	87	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
33031	91	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
33031	91	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
2342	92	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
2342	92	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
2342	92	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
2351	36	8	BinaryMutation.java	mutate	original	Chromosome	0	IllegalArgumentException	$ instanceof BinaryChromosome
957	52	8	BinomialDistributionImpl.java	BinomialDistributionImpl	trials	int	0	NotPositiveException	$ < 0
958	56	8	BinomialDistributionImpl.java	BinomialDistributionImpl	p	double	0	OutOfRangeException	$ > 1
958	56	8	BinomialDistributionImpl.java	BinomialDistributionImpl	p	double	0	OutOfRangeException	$ < 0
959	113	8	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
960	115	15	BinomialDistributionImpl.java	cumulativeProbability	THIS	BinomialDistributionImpl	1	DEF	x >= $.numberOfTrials
960	115	15	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= numberOfTrials
961	132	8	BinomialDistributionImpl.java	probability	THIS	BinomialDistributionImpl	1	DEF	x > $.numberOfTrials
961	132	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ < 0
961	132	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ > numberOfTrials
962	157	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
963	160	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
3061	76	12	BisectionSolver.java	doSolve	fm	double	1	DEF	$ * fmin > 0
3061	76	12	BisectionSolver.java	doSolve	fmin	double	1	DEF	fm * $ > 0
3062	84	12	BisectionSolver.java	doSolve	min	double	0	RET	FastMath.abs(max - $) <= absoluteAccuracy
3062	84	12	BisectionSolver.java	doSolve	max	double	0	RET	FastMath.abs($ - min) <= absoluteAccuracy
3062	84	12	BisectionSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(max - min) <= $
33020	68	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
33020	68	8	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
33021	77	8	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
33021	77	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
33021	77	8	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
2312	99	8	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
2313	138	8	BitsStreamGenerator.java	nextInt	n	int	0	RET	$ > 0
2314	139	12	BitsStreamGenerator.java	nextInt	n	int	0	RET	($ & -$) == $
33022	144	12	BitsStreamGenerator.java	nextInt	bits	int	0	NIL-DOWHILE	$ - val + (n - 1) < 0
33022	144	12	BitsStreamGenerator.java	nextInt	val	int	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
33022	144	12	BitsStreamGenerator.java	nextInt	n	int	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
1052	150	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
31774	159	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
31774	159	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
31775	161	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
31775	161	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1053	162	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1053	162	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1053	162	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1053	162	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1053	162	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1054	166	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
31776	205	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
31776	205	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
31776	205	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
1055	207	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1055	207	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
31777	216	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
31777	216	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
31778	220	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
31778	220	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
31779	231	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
31779	231	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
31780	265	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
31780	265	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
31781	269	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
31781	269	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
31782	295	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
31782	295	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
31783	316	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
31783	316	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
31783	316	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
31784	317	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
31784	317	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
31784	317	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
31785	327	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
31785	327	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
31786	328	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
31786	328	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
31787	359	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
31787	359	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
31787	359	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
31788	363	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
31788	363	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
31788	363	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
31789	385	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
31789	385	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
31789	385	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
31790	386	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
31790	386	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
31790	386	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
31791	396	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
31791	396	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
31792	397	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
31792	397	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
31793	427	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
31793	427	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
31793	427	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
31794	431	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
31794	431	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
31794	431	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
31795	445	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
31795	445	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
31795	445	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
31796	448	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
31796	448	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
31796	448	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
31797	463	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
31797	463	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
31797	463	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
31798	466	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
31798	466	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
31798	466	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
31799	489	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
31799	489	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
31799	489	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
31800	494	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
31800	494	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
31800	494	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
31801	503	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
31801	503	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
31802	508	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
31802	508	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
31803	511	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
31803	511	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
31804	514	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
31804	514	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
31805	552	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
31805	552	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
31805	552	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
31806	557	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
31806	557	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
31806	557	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
31807	567	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
31807	567	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
31808	572	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
31808	572	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
31809	575	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
31809	575	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
31810	579	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
31810	579	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
31811	588	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
31811	588	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
31812	613	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
31812	613	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
31813	618	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
31813	618	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
31814	622	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
31814	622	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
31815	654	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
31815	654	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
31815	654	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
31816	657	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
31816	657	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
31816	657	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
1056	668	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1057	670	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1058	702	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
31817	752	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
31817	752	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1059	765	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1060	772	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1060	772	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
31818	784	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
31818	784	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
31819	790	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
31819	790	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
31820	799	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
31820	799	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
31821	821	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
31821	821	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1061	825	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1061	825	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1062	864	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1062	864	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1062	864	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
31822	877	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
31822	877	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1063	881	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1063	881	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
31823	906	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
31823	906	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
31824	909	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
31824	909	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1064	910	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
1064	910	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1064	910	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
1065	946	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1065	946	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1065	946	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
31825	960	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
31825	960	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
31826	963	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
31826	963	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1066	964	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
1066	964	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1066	964	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
31827	983	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
31827	983	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
31828	1014	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
31828	1014	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
31829	1017	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
31829	1017	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
31830	1045	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
31830	1045	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1067	1060	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1067	1060	8	BlockFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1067	1060	8	BlockFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
31831	1068	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
31831	1068	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
31832	1087	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
31832	1087	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
31833	1090	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
31833	1090	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1068	1103	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1068	1103	8	BlockFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1068	1103	8	BlockFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
31834	1112	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
31834	1112	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
31835	1115	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
31835	1115	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
31836	1188	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
31836	1188	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
31837	1189	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
31837	1189	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
31838	1199	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
31838	1199	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
31839	1202	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
31839	1202	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1069	1233	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.columns
1069	1233	8	BlockFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != columns
31840	1240	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
31840	1240	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
31841	1243	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
31841	1243	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
31842	1248	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
31842	1248	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
31843	1251	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
31843	1251	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
31844	1260	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
31844	1260	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1070	1275	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.rows
1070	1275	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != rows
31845	1282	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
31845	1282	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
31846	1289	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
31846	1289	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
31847	1293	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
31847	1293	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
31848	1297	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
31848	1297	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
31849	1306	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
31849	1306	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
31850	1322	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
31850	1322	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
31851	1325	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
31851	1325	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
31852	1326	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
31852	1326	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
31853	1332	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
31853	1332	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
31854	1346	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
31854	1346	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
31855	1349	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
31855	1349	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
31856	1350	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
31856	1350	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
31857	1356	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
31857	1356	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
31858	1373	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
31858	1373	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
31859	1377	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
31859	1377	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
31860	1378	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
31860	1378	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
31861	1385	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
31861	1385	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
31862	1402	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
31862	1402	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
31863	1406	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
31863	1406	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
31864	1407	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
31864	1407	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
31865	1414	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
31865	1414	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
31866	1429	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
31866	1429	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
31867	1432	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
31867	1432	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
31868	1437	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
31868	1437	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
31869	1438	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
31869	1438	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
31870	1454	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
31870	1454	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
31871	1457	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
31871	1457	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
31872	1462	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
31872	1462	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
31873	1463	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
31873	1463	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
31874	1481	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
31874	1481	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
31875	1485	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
31875	1485	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
31876	1491	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
31876	1491	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
31877	1493	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
31877	1493	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
31878	1510	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
31878	1510	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
31879	1514	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
31879	1514	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
31880	1520	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
31880	1520	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
31881	1522	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
31881	1522	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
1331	147	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
32255	156	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32255	156	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
32256	158	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32256	158	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1332	159	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1332	159	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1332	159	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1332	159	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1332	159	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1333	163	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
32257	198	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
32257	198	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
32257	198	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
1334	200	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1334	200	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
32258	208	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
32258	208	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
32259	212	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
32259	212	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
32260	223	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
32260	223	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
32261	252	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
32261	252	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
32262	256	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
32262	256	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
32263	281	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
32263	281	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
32264	301	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
32264	301	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
32264	301	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32265	302	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
32265	302	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
32265	302	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32266	312	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
32266	312	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
32267	313	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
32267	313	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
32268	342	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
32268	342	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
32268	342	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
32269	346	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
32269	346	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
32269	346	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
32270	367	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
32270	367	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
32270	367	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32271	368	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
32271	368	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
32271	368	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32272	378	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
32272	378	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
32273	379	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
32273	379	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
32274	408	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
32274	408	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
32274	408	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
32275	412	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
32275	412	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
32275	412	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
32276	427	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
32276	427	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
32276	427	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
32277	430	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
32277	430	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
32277	430	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
32278	444	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
32278	444	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
32278	444	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
32279	447	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
32279	447	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
32279	447	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
32280	468	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
32280	468	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
32280	468	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32281	472	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
32281	472	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
32281	472	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32282	480	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
32282	480	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
32283	485	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
32283	485	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
32284	488	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
32284	488	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
32285	491	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
32285	491	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
32286	525	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
32286	525	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
32286	525	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32287	530	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
32287	530	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
32287	530	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32288	540	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
32288	540	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
32289	545	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
32289	545	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
32290	548	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
32290	548	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
32291	552	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
32291	552	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
32292	560	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
32292	560	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
32293	583	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32293	583	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
32294	588	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
32294	588	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
32295	592	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
32295	592	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
32296	610	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32296	610	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
32297	613	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32297	613	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
32298	616	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
32298	616	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
32299	618	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
32299	618	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
32300	624	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
32300	624	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
32301	635	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
32301	635	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
32302	662	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
32302	662	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
32302	662	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32303	665	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
32303	665	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
32303	665	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
1335	676	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1336	678	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1337	710	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
32304	760	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
32304	760	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1338	774	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1339	781	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1339	781	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
32305	793	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
32305	793	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
32306	799	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
32306	799	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
32307	808	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
32307	808	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
32308	830	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32308	830	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1340	834	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1340	834	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1341	873	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1341	873	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1341	873	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
32309	886	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32309	886	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1342	890	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1342	890	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
32310	915	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32310	915	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
32311	918	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
32311	918	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1343	919	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
1343	919	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1343	919	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
1344	955	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1344	955	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1344	955	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
32312	969	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32312	969	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
32313	972	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
32313	972	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1345	973	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
1345	973	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1345	973	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
32314	992	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32314	992	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
32315	1023	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32315	1023	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
32316	1026	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
32316	1026	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
32317	1054	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32317	1054	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1346	1069	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1346	1069	8	BlockRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1346	1069	8	BlockRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
32318	1077	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32318	1077	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
32319	1096	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32319	1096	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
32320	1099	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
32320	1099	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1347	1112	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1347	1112	8	BlockRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1347	1112	8	BlockRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
32321	1121	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32321	1121	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
32322	1124	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
32322	1124	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
32323	1183	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
32323	1183	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
32324	1184	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
32324	1184	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
32325	1193	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
32325	1193	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
32326	1196	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
32326	1196	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1348	1225	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.columns
1348	1225	8	BlockRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != columns
32327	1231	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32327	1231	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
32328	1234	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32328	1234	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
32329	1239	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
32329	1239	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
32330	1242	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
32330	1242	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
32331	1250	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
32331	1250	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1349	1264	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.rows
1349	1264	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != rows
32332	1270	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32332	1270	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
32333	1277	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32333	1277	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
32334	1281	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
32334	1281	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
32335	1285	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
32335	1285	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
32336	1293	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
32336	1293	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
32337	1309	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32337	1309	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
32338	1312	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
32338	1312	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
32339	1313	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32339	1313	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
32340	1319	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
32340	1319	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
32341	1333	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32341	1333	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
32342	1336	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
32342	1336	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
32343	1337	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32343	1337	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
32344	1343	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
32344	1343	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
32345	1360	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
32345	1360	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
32346	1364	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
32346	1364	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
32347	1365	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
32347	1365	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
32348	1372	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
32348	1372	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
32349	1389	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
32349	1389	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
32350	1393	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
32350	1393	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
32351	1394	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
32351	1394	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
32352	1401	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
32352	1401	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
32353	1416	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32353	1416	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
32354	1419	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32354	1419	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
32355	1424	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
32355	1424	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
32356	1425	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
32356	1425	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
32357	1441	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
32357	1441	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
32358	1444	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
32358	1444	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
32359	1449	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
32359	1449	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
32360	1450	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
32360	1450	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
32361	1468	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
32361	1468	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
32362	1472	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
32362	1472	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
32363	1478	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
32363	1478	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
32364	1480	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
32364	1480	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
32365	1497	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
32365	1497	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
32366	1501	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
32366	1501	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
32367	1507	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
32367	1507	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
32368	1509	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
32368	1509	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
589	47	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusOutside() != null
590	50	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusInside() != null
1465	92	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
1466	95	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
1467	121	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
1467	121	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
1467	121	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
32513	137	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
32513	137	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
32513	137	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
1468	148	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
1468	148	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
1468	148	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
1469	150	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
1469	150	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
1469	150	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
1470	158	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
1470	158	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
1470	158	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
1471	167	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
1471	167	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
1471	167	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
1472	170	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
1472	170	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
1472	170	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
1473	172	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
1473	172	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
1473	172	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
1474	202	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
2999	83	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3000	103	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3001	125	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3002	155	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	MathUtils.equals($[1], 0.0, 1)
3003	162	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	MathUtils.equals($[0], 0.0, 1)
3004	169	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[0] * $[1] < 0
3005	179	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	MathUtils.equals($[2], 0.0, 1)
3006	184	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[1] * $[2] < 0
3007	213	12	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	MathInternalError:RET	FastMath.max(absYA, absYB) < $.getFunctionValueAccuracy()
3007	213	12	BracketingNthOrderBrentSolver.java	doSolve	xTol	double	0	MathInternalError:RET	(xB - xA) <= $
3007	213	12	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	MathInternalError:RET	(xB - $) <= xTol
3007	213	12	BracketingNthOrderBrentSolver.java	doSolve	absYA	double	0	MathInternalError:RET	FastMath.max($, absYB) < getFunctionValueAccuracy()
3007	213	12	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	MathInternalError:RET	($ - xA) <= xTol
3007	213	12	BracketingNthOrderBrentSolver.java	doSolve	absYB	double	0	MathInternalError:RET	FastMath.max(absYA, $) < getFunctionValueAccuracy()
3008	233	12	BracketingNthOrderBrentSolver.java	doSolve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
3009	236	19	BracketingNthOrderBrentSolver.java	doSolve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
33352	248	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	NIL-DOWHILE	Double.isNaN($)
33352	248	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	0	NIL-DOWHILE	end - $ > 1
33352	248	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	0	NIL-DOWHILE	$ - start > 1
3010	254	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ < xB
3010	254	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ > xA
3010	254	16	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	DEF	nextX > $
3010	254	16	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	DEF	nextX < $
3011	260	20	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
3011	260	20	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
3011	260	20	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	1	DEF	$ - start >= end - $
3012	275	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	Double.isNaN($)
3013	284	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	0	RET	MathUtils.equals($, 0.0, 1)
3014	290	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	end - $ != nbPoints
3014	290	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	$ - start != nbPoints
3014	290	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	end - start != $
3014	290	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	$ > 2
3015	299	20	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	nbPoints == x.$.length
3015	299	20	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	nbPoints == $.length
3015	299	20	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	0	DEF	$ == x.length
3016	305	16	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
3016	305	16	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
3016	305	16	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
3017	323	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	1	DEF	$ * yA <= 0
3017	323	12	BracketingNthOrderBrentSolver.java	doSolve	yA	double	1	DEF	nextY * $ <= 0
33353	365	8	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	$ < end - 1
33353	365	8	BracketingNthOrderBrentSolver.java	guessX	end	int	0	NIL-FOR	i < $ - 1
33354	367	12	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ > i
33354	367	12	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	j > $
33355	374	8	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ >= start
33355	374	8	BracketingNthOrderBrentSolver.java	guessX	start	int	0	NIL-FOR	j >= $
2800	77	8	BracketingNthOrderBrentSolverDFP.java	BracketingNthOrderBrentSolverDFP	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
2801	203	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[1].isZero()
2802	211	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[0].isZero()
2803	218	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[0].multiply($[1]).negativeOrNull()
2804	229	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[2].isZero()
2805	234	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[1].multiply($[2]).negativeOrNull()
2806	267	12	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	MathInternalError:RET	maxY.lessThan($.functionValueAccuracy)
2806	267	12	BracketingNthOrderBrentSolverDFP.java	solve	maxY	Dfp	0	MathInternalError:RET	$.lessThan(functionValueAccuracy)
2806	267	12	BracketingNthOrderBrentSolverDFP.java	solve	xTol	Dfp	0	MathInternalError:RET	xB.subtract(xA).subtract($).negativeOrNull()
2806	267	12	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	MathInternalError:RET	xB.subtract($).subtract(xTol).negativeOrNull()
2806	267	12	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	MathInternalError:RET	$.subtract(xA).subtract(xTol).negativeOrNull()
2807	288	12	BracketingNthOrderBrentSolverDFP.java	solve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
2808	291	19	BracketingNthOrderBrentSolverDFP.java	solve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
33256	303	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	NIL-DOWHILE	$.isNaN()
33256	303	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	0	NIL-DOWHILE	end - $ > 1
33256	303	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	0	NIL-DOWHILE	$ - start > 1
2809	309	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.greaterThan(xA)
2809	309	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.lessThan(xB)
2809	309	16	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	DEF	nextX.greaterThan($)
2809	309	16	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	DEF	nextX.lessThan($)
2810	315	20	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
2810	315	20	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
2810	315	20	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	1	DEF	$ - start >= end - $
2811	330	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.isNaN()
2812	340	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	0	RET	$.isZero()
2813	346	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	end - $ != nbPoints
2813	346	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	$ - start != nbPoints
2813	346	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	$ > 2
2813	346	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	end - start != $
2814	355	20	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	nbPoints == x.$.length
2814	355	20	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	nbPoints == $.length
2814	355	20	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	0	DEF	$ == x.length
2815	361	16	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
2815	361	16	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
2815	361	16	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
2816	379	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	1	DEF	$.multiply(yA).negativeOrNull()
2816	379	12	BracketingNthOrderBrentSolverDFP.java	solve	yA	Dfp	1	DEF	nextY.multiply($).negativeOrNull()
33257	421	8	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	$ < end - 1
33257	421	8	BracketingNthOrderBrentSolverDFP.java	guessX	end	int	0	NIL-FOR	i < $ - 1
33258	423	12	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ > i
33258	423	12	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	j > $
33259	430	8	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ >= start
33259	430	8	BracketingNthOrderBrentSolverDFP.java	guessX	start	int	0	NIL-FOR	j >= $
1479	77	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1480	80	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
1481	101	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
1481	101	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
1482	115	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1483	133	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
1484	139	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
1484	139	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
1485	145	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
1486	154	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
1486	154	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
1486	154	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
1486	154	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
1486	154	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
1486	154	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
1486	154	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
1486	154	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
1486	154	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
1486	154	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
1486	154	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
1487	162	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
1487	162	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
1487	162	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
1487	162	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
1487	162	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
1487	162	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
1488	163	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
1488	163	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
1489	171	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1489	171	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1490	180	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1490	180	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1491	189	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
1491	189	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
1492	190	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
1493	200	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1494	205	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
1494	205	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
1495	206	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1495	206	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1496	218	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1496	218	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1497	223	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
1497	223	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	MathUtils.equals(w, $)
1497	223	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	MathUtils.equals($, x)
1497	223	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
1498	229	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
1498	229	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	MathUtils.equals(v, $)
1498	229	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	MathUtils.equals($, w)
1498	229	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	MathUtils.equals($, x)
1498	229	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	MathUtils.equals(v, $)
1498	229	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
1499	241	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariateRealPointValuePair>	0	RET	$ != null
1500	242	20	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariateRealPointValuePair>	0	RET	$.converged(iter, previous, current)
1500	242	20	BrentOptimizer.java	doOptimize	previous	UnivariateRealPointValuePair	0	RET	checker.converged(iter, $, current)
1500	242	20	BrentOptimizer.java	doOptimize	current	UnivariateRealPointValuePair	0	RET	checker.converged(iter, previous, $)
1500	242	20	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
3070	92	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
3070	92	8	BrentSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3071	98	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
3071	98	8	BrentSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3072	103	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
3072	103	8	BrentSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
3073	109	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
3073	109	8	BrentSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3074	114	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
3074	114	8	BrentSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
3075	152	12	BrentSolver.java	brent	fb	double	0	DEF	FastMath.abs(fc) < FastMath.abs($)
3075	152	12	BrentSolver.java	brent	fc	double	0	DEF	FastMath.abs($) < FastMath.abs(fb)
3076	164	12	BrentSolver.java	brent	tol	double	0	RET	FastMath.abs(m) <= $
3076	164	12	BrentSolver.java	brent	m	double	0	RET	FastMath.abs($) <= tol
3076	164	12	BrentSolver.java	brent	fb	double	0	RET	MathUtils.equals($, 0)
3077	168	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(e) < $
3077	168	12	BrentSolver.java	brent	fa	double	1	DEF	FastMath.abs($) <= FastMath.abs(fb)
3077	168	12	BrentSolver.java	brent	fb	double	1	DEF	FastMath.abs(fa) <= FastMath.abs($)
3077	168	12	BrentSolver.java	brent	e	double	1	DEF	FastMath.abs($) < tol
3078	180	16	BrentSolver.java	brent	a	double	1	DEF	$ == c
3078	180	16	BrentSolver.java	brent	c	double	1	DEF	a == $
3079	191	16	BrentSolver.java	brent	p	double	1	DEF	$ > 0
3080	198	16	BrentSolver.java	brent	s	double	1	DEF	p >= FastMath.abs(0.5 * $ * q)
3080	198	16	BrentSolver.java	brent	p	double	1	DEF	$ >= 1.5 * m * q - FastMath.abs(tol * q)
3080	198	16	BrentSolver.java	brent	p	double	1	DEF	$ >= FastMath.abs(0.5 * s * q)
3080	198	16	BrentSolver.java	brent	q	double	1	DEF	p >= 1.5 * m * $ - FastMath.abs(tol * $)
3080	198	16	BrentSolver.java	brent	q	double	1	DEF	p >= FastMath.abs(0.5 * s * $)
3080	198	16	BrentSolver.java	brent	tol	double	1	DEF	p >= 1.5 * m * q - FastMath.abs($ * q)
3080	198	16	BrentSolver.java	brent	m	double	1	DEF	p >= 1.5 * $ * q - FastMath.abs(tol * q)
3081	212	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(d) > $
3081	212	12	BrentSolver.java	brent	d	double	1	DEF	FastMath.abs($) > tol
3082	214	19	BrentSolver.java	brent	m	double	1	DEF	$ > 0
3083	220	12	BrentSolver.java	brent	fb	double	0	DEF	$ <= 0
3083	220	12	BrentSolver.java	brent	fb	double	0	DEF	$ > 0
3083	220	12	BrentSolver.java	brent	fc	double	0	DEF	$ > 0
3083	220	12	BrentSolver.java	brent	fc	double	0	DEF	$ <= 0
1612	298	8	CMAESOptimizer.java	CMAESOptimizer	boundaries	double[][]	1	DEF	$ == null
32623	303	12	CMAESOptimizer.java	CMAESOptimizer	i	int	0	NIL-FOR	$ < len
32623	303	12	CMAESOptimizer.java	CMAESOptimizer	len	int	0	NIL-FOR	i < $
32624	366	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
32625	372	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
32625	372	16	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
32626	374	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount+1
32626	374	20	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount+1
1613	375	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1614	382	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
1614	382	24	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
1614	382	24	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
1614	382	24	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
1615	404	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1616	413	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
1616	413	16	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
1617	419	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1617	419	20	CMAESOptimizer.java	doOptimize	lastResult	RealPointValuePair	0	DEF	$ != null
1618	420	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, optimum, lastResult)
1618	420	24	CMAESOptimizer.java	doOptimize	optimum	RealPointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1618	420	24	CMAESOptimizer.java	doOptimize	lastResult	RealPointValuePair	0	DEF	getConvergenceChecker().converged(iterations, optimum, $)
1619	427	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopfitness != 0
1620	428	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopfitness : -$.stopfitness)
1620	428	20	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopfitness : -stopfitness)
32627	434	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
32627	434	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1621	435	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > $.stopTolX
1621	435	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma*(Math.max(Math.abs(pcCol[$]), sqrtDiagC[$])) > stopTolX
1621	435	20	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma*(Math.max(Math.abs(pcCol[i]), $[i])) > stopTolX
1621	435	20	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma*(Math.max(Math.abs($[i]), sqrtDiagC[i])) > stopTolX
1622	438	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension-1
1622	438	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension-1
32628	442	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
32628	442	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1623	443	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma*sqrtDiagC[i] > $.stopTolUpX
1623	443	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma*sqrtDiagC[$] > stopTolUpX
1623	443	20	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma*$[i] > stopTolUpX
1624	449	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1624	449	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < $.stopTolFun
1624	449	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
1624	449	16	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
1624	449	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
1624	449	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
1625	453	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
1625	453	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst-historyBest < $.stopTolHistFun
1625	453	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst-$ < stopTolHistFun
1625	453	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$-historyBest < stopTolHistFun
1626	458	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD)/$.min($.diagD) > 1e7
1627	462	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1628	466	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, current, lastResult)
1628	466	20	CMAESOptimizer.java	doOptimize	current	RealPointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1628	466	20	CMAESOptimizer.java	doOptimize	lastResult	RealPointValuePair	0	DEF	$ != null
1628	466	20	CMAESOptimizer.java	doOptimize	lastResult	RealPointValuePair	0	DEF	getConvergenceChecker().converged(iterations, current, $)
1629	473	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1+$.lambda/4.)]]
1629	473	16	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1+lambda/4.)]]
1629	473	16	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1+lambda/4.)]]
1629	473	16	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1+lambda/4.)]]
1630	476	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1630	476	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
1630	476	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
1630	476	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
1631	483	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
1632	498	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.boundaries != null
1633	499	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	MultiDimensionMismatchException	$.boundaries.$.length != 2
1634	504	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NoDataException	$.boundaries[0] == null
1634	504	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NoDataException	$.boundaries[1] == null
1635	507	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	MultiDimensionMismatchException	$.boundaries[0].length != init.$.length
1635	507	12	CMAESOptimizer.java	checkParameters	init	double[]	0	MultiDimensionMismatchException	boundaries[0].length != $.length
1636	512	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	MultiDimensionMismatchException	$.boundaries[1].length != init.$.length
1636	512	12	CMAESOptimizer.java	checkParameters	init	double[]	0	MultiDimensionMismatchException	boundaries[1].length != $.length
32629	517	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
32629	517	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
32629	517	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
1637	518	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.boundaries[0][i] > init[i]
1637	518	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.boundaries[1][i] < init[i]
1637	518	16	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	boundaries[0][$] > init[$]
1637	518	16	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	boundaries[1][$] < init[$]
1637	518	16	CMAESOptimizer.java	checkParameters	init	double[]	0	OutOfRangeException	boundaries[0][i] > $[i]
1637	518	16	CMAESOptimizer.java	checkParameters	init	double[]	0	OutOfRangeException	boundaries[1][i] < $[i]
1638	524	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
1639	525	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	MultiDimensionMismatchException	$.inputSigma.$.length != init.$.length
1639	525	12	CMAESOptimizer.java	checkParameters	init	double[]	0	MultiDimensionMismatchException	inputSigma.length != $.length
32630	530	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
32630	530	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
32630	530	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
1640	531	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NotPositiveException	$.inputSigma[i] < 0
1640	531	16	CMAESOptimizer.java	checkParameters	i	int	0	NotPositiveException	inputSigma[$] < 0
1641	534	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.boundaries != null
1642	535	20	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > 1.0
1642	535	20	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > 1.0
1643	551	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	DEF	$.lambda <= 0
32631	556	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
32631	556	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
32631	556	8	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
32632	574	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
32632	574	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
32633	613	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
32633	613	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
1644	637	8	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
1645	667	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
1645	667	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
1646	695	8	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
1647	703	12	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
1648	727	16	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
1648	727	16	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
1649	767	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
1649	767	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1.
1649	767	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
1649	767	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1.
1650	776	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
32634	777	16	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
32634	777	16	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
1651	778	20	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i, 0) < 0
1651	778	20	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($, 0) < 0
1652	786	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
32635	806	8	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
32636	821	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
32636	821	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
32636	821	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
32637	826	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
32637	826	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
32637	826	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
32638	1032	8	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
32638	1032	8	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
32639	1033	12	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
32639	1033	12	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
32640	1047	8	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
32640	1047	8	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
32641	1048	12	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
32641	1048	12	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
32642	1061	8	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
32642	1061	8	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
32643	1062	12	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
32643	1062	12	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
32644	1079	8	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
32644	1079	8	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
32645	1080	12	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
32645	1080	12	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
32646	1096	8	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
32646	1096	8	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
32647	1097	12	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
32647	1097	12	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
32648	1111	8	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
32648	1111	8	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
32649	1112	12	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
32649	1112	12	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
32649	1112	12	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
32650	1126	8	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
32650	1126	8	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
32651	1127	12	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
32651	1127	12	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
32652	1141	8	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
32652	1141	8	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
32653	1143	12	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
32653	1143	12	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
1653	1158	8	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
32654	1160	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
32654	1160	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
32655	1166	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
32655	1166	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
32656	1186	8	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
32656	1186	8	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
32657	1200	8	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
32657	1200	8	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
32658	1215	8	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
32658	1215	8	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
1654	1216	12	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
1654	1216	12	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
32659	1247	8	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
32659	1247	8	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
32659	1247	8	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
32660	1248	12	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
32660	1248	12	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
32660	1248	12	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
32661	1268	8	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
32661	1268	8	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
32662	1282	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
32662	1282	8	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
32663	1283	12	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
32663	1283	12	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
1655	1285	16	CMAESOptimizer.java	max	e	double	0	DEF	max < $
1655	1285	16	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
32664	1300	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
32664	1300	8	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
32665	1301	12	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
32665	1301	12	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
1656	1303	16	CMAESOptimizer.java	min	e	double	0	DEF	min > $
1656	1303	16	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
32666	1318	8	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
32666	1318	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
32666	1318	8	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
1657	1319	12	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
1657	1319	12	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
1657	1319	12	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
32667	1333	8	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
32667	1333	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
32667	1333	8	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
1658	1334	12	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
1658	1334	12	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
1658	1334	12	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
32668	1348	8	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
32668	1348	8	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
32668	1348	8	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
32669	1361	8	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
32669	1361	8	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
32669	1361	8	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
32670	1374	8	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
32670	1374	8	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
32671	1389	8	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
32671	1389	8	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
32672	1390	12	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
32672	1390	12	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
992	81	8	CauchyDistributionImpl.java	CauchyDistributionImpl	scale	double	0	NotStrictlyPositiveException	$ <= 0
993	135	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0
993	135	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1
994	137	15	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
995	139	16	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
996	159	8	CauchyDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < 0.5
997	180	8	CauchyDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < 0.5
998	201	8	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < 0.5
999	203	15	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > 0.5
511	75	8	Characterization.java	add	inside	boolean	1	DEF	$
512	76	12	Characterization.java	add	THIS	Characterization	1	DEF	$.in == null
513	82	12	Characterization.java	add	THIS	Characterization	1	DEF	$.out == null
2025	57	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	DimensionMismatchException	expected.$.length < 2
2025	57	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length < 2
2026	60	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	DimensionMismatchException	expected.$.length != observed.$.length
2026	60	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length != observed.length
2026	60	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	DimensionMismatchException	expected.length != $.length
32859	67	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
32859	67	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
32859	67	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2027	73	8	ChiSquareTestImpl.java	chiSquare	sumExpected	double	0	DEF	FastMath.abs($ - sumObserved) > 10E-6
2027	73	8	ChiSquareTestImpl.java	chiSquare	sumObserved	double	0	DEF	FastMath.abs(sumExpected - $) > 10E-6
32860	78	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
32860	78	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
32860	78	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2028	79	12	ChiSquareTestImpl.java	chiSquare	rescale	boolean	1	DEF	$
2029	127	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
2029	127	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
32861	148	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
32861	148	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
32862	149	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
32862	149	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
32863	159	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
32863	159	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
32864	160	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
32864	160	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
2030	193	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
2030	193	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
2031	209	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	DimensionMismatchException	observed1.$.length < 2
2031	209	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
2032	212	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	DimensionMismatchException	observed1.$.length != observed2.$.length
2032	212	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
2032	212	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
32865	225	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
32865	225	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
32865	225	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2033	230	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum1	long	0	MathIllegalArgumentException	$ == 0
2034	233	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum2	long	0	MathIllegalArgumentException	$ == 0
2035	238	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
32866	246	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
32866	246	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
32866	246	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2036	247	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	MathIllegalArgumentException	observed1[$] == 0
2036	247	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	MathIllegalArgumentException	observed2[$] == 0
2036	247	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	1	MathIllegalArgumentException	$[i] == 0
2036	247	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	1	MathIllegalArgumentException	$[i] == 0
2037	252	16	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
2038	292	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
2038	292	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
2039	309	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	MathIllegalArgumentException	in.$.length < 2
2039	309	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	MathIllegalArgumentException	$.length < 2
2040	314	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	MathIllegalArgumentException	in[0].length < 2
2040	314	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	MathIllegalArgumentException	$[0].length < 2
32867	336	8	ChiSquareTestImpl.java	checkRectangular	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
32867	336	8	ChiSquareTestImpl.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
32867	336	8	ChiSquareTestImpl.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
2041	337	12	ChiSquareTestImpl.java	checkRectangular	THIS	ChiSquareTestImpl	0	DimensionMismatchException	in[i].length != in[0].length
2041	337	12	ChiSquareTestImpl.java	checkRectangular	i	int	0	DimensionMismatchException	in[$].length != in[0].length
2041	337	12	ChiSquareTestImpl.java	checkRectangular	in	long[][]	0	DimensionMismatchException	$[i].length != $[0].length
32868	351	8	ChiSquareTestImpl.java	checkPositive	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
32868	351	8	ChiSquareTestImpl.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
32868	351	8	ChiSquareTestImpl.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
2042	352	12	ChiSquareTestImpl.java	checkPositive	i	int	0	MathIllegalArgumentException	in[$] <= 0
2042	352	12	ChiSquareTestImpl.java	checkPositive	in	double[]	0	MathIllegalArgumentException	$[i] <= 0
32869	367	8	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
32869	367	8	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
32869	367	8	ChiSquareTestImpl.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
2043	368	12	ChiSquareTestImpl.java	checkNonNegative	i	int	0	MathIllegalArgumentException	in[$] < 0
2043	368	12	ChiSquareTestImpl.java	checkNonNegative	in	long[]	0	MathIllegalArgumentException	$[i] < 0
32870	383	8	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
32870	383	8	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
32870	383	8	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
32871	384	12	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	j < in[i].length
32871	384	12	ChiSquareTestImpl.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
32871	384	12	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
32871	384	12	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
2044	385	16	ChiSquareTestImpl.java	checkNonNegative	j	int	0	MathIllegalArgumentException	in[i][$] < 0
2044	385	16	ChiSquareTestImpl.java	checkNonNegative	i	int	0	MathIllegalArgumentException	in[$][j] < 0
2044	385	16	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	MathIllegalArgumentException	$[i][j] < 0
988	111	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
989	114	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
990	148	8	ChiSquaredDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
991	174	8	ChiSquaredDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < 0.5
1320	94	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
32235	105	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
32235	105	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
32236	109	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	j	int	0	NIL-FOR	$ < order
32236	109	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	j < $
1321	115	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lIJ	double	0	NonSymmetricMatrixException	FastMath.abs($ - lJI) > maxDelta
1321	115	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lJI	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - $) > maxDelta
1321	115	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	maxDelta	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - lJI) > $
32237	123	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
32237	123	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
1322	128	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	ltI	double[]	0	NonPositiveDefiniteMatrixException	$[i] < absolutePositivityThreshold
1322	128	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NonPositiveDefiniteMatrixException	ltI[$] < absolutePositivityThreshold
1322	128	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	absolutePositivityThreshold	double	0	NonPositiveDefiniteMatrixException	ltI[i] < $
32238	135	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	q	int	0	NIL-FOR	$ > i
32238	135	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	q > $
32239	138	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	p	int	0	NIL-FOR	$ < order
32239	138	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	p < $
1323	147	8	CholeskyDecompositionImpl.java	getL	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedL == null
1324	156	8	CholeskyDecompositionImpl.java	getLT	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedLT == null
32240	167	8	CholeskyDecompositionImpl.java	getDeterminant	THIS	CholeskyDecompositionImpl	0	NIL-FOR	i < $.lTData.$.length
32240	167	8	CholeskyDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
2325	45	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == Double.MIN_VALUE
2326	91	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
2327	107	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
33172	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
33172	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
769	115	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN
770	118	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
771	121	8	Complex.java	abs	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
772	122	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
773	128	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
774	157	8	Complex.java	add	THIS	Complex	0	RET	addend.$.isNaN
774	157	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
774	157	8	Complex.java	add	addend	Complex	0	RET	$.isNaN
775	174	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
775	174	8	Complex.java	add	addend	double	0	RET	Double.isNaN($)
776	196	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN
777	248	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
777	248	8	Complex.java	divide	THIS	Complex	0	RET	divisor.$.isNaN
777	248	8	Complex.java	divide	divisor	Complex	0	RET	$.isNaN
778	254	8	Complex.java	divide	c	double	0	RET	$ == 0.0
778	254	8	Complex.java	divide	d	double	0	RET	$ == 0.0
779	258	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
779	258	8	Complex.java	divide	divisor	Complex	0	RET	$.isInfinite()
780	262	8	Complex.java	divide	c	double	1	RET	FastMath.abs($) < FastMath.abs(d)
780	262	8	Complex.java	divide	d	double	1	RET	FastMath.abs(c) < FastMath.abs($)
781	284	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
781	284	8	Complex.java	divide	divisor	double	0	RET	Double.isNaN($)
782	287	8	Complex.java	divide	divisor	double	0	RET	$ == 0d
783	290	8	Complex.java	divide	divisor	double	0	RET	Double.isInfinite($)
784	314	8	Complex.java	equals	THIS	Complex	0	RET	$ == other
784	314	8	Complex.java	equals	other	Object	0	RET	this == $
785	317	8	Complex.java	equals	other	Object	0	RET	$ instanceof Complex
786	319	12	Complex.java	equals	THIS	Complex	1	RET	c.$.isNaN
786	319	12	Complex.java	equals	c	Complex	1	RET	$.isNaN
787	337	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN
788	413	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
788	413	8	Complex.java	multiply	THIS	Complex	0	RET	factor.$.isNaN
788	413	8	Complex.java	multiply	factor	Complex	0	RET	$.isNaN
789	416	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.imaginary)
789	416	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
789	416	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.real)
789	416	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
789	416	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.imaginary)
789	416	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.real)
790	436	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
790	436	8	Complex.java	multiply	factor	double	0	RET	Double.isNaN($)
791	439	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
791	439	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
791	439	8	Complex.java	multiply	factor	double	0	RET	Double.isInfinite($)
792	456	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN
793	484	8	Complex.java	subtract	THIS	Complex	0	RET	subtrahend.$.isNaN
793	484	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
793	484	8	Complex.java	subtract	subtrahend	Complex	0	RET	$.isNaN
794	501	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
794	501	8	Complex.java	subtract	subtrahend	double	0	RET	Double.isNaN($)
795	524	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN
796	549	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN
797	574	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN
798	615	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN
799	655	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN
800	696	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN
801	741	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN
802	819	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN
803	859	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN
804	902	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN
805	906	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
805	906	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
806	911	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
807	973	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN
808	1018	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN
809	1077	8	Complex.java	nthRoot	n	int	0	NotPositiveException	$ <= 0
810	1084	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN
811	1088	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
31749	1100	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
31749	1100	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
812	1134	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
812	1134	8	Complex.java	valueOf	imaginaryPart	double	0	RET	Double.isNaN($)
813	1148	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
755	115	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NullArgumentException	$ == null
756	118	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NoDataException	$.length() == 0
757	121	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
758	124	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
759	183	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
760	188	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
760	188	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
761	211	8	ComplexFormat.java	formatImaginary	absIm	double	0	MathInternalError	$ < 0
762	219	8	ComplexFormat.java	formatImaginary	toAppendTo	StringBuffer	0	DEF	$.toString().equals("1")
763	245	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
764	247	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
765	323	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
766	346	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
767	382	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
768	390	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	CompositeFormat.parseFixedstring(source, $.getImaginaryCharacter(), pos)
768	390	8	ComplexFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, getImaginaryCharacter(), pos)
768	390	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), $)
754	65	8	ComplexUtils.java	polar2Complex	r	double	0	DEF	$ < 0
342	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
342	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
31675	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
31675	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
31675	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
343	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
343	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
344	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
344	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
345	122	12	CompositeFormat.java	parseNumber	sb	StringBuilder	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
345	122	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
345	122	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
345	122	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
346	148	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
346	148	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
31676	153	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
31676	153	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
31676	153	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
347	155	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
348	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
348	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
348	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
348	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
348	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
348	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
348	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
348	177	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
349	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
349	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
31648	132	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
31648	132	8	ContinuedFraction.java	evaluate	relativeError	double	0	NIL-WHILE	$ > epsilon
31648	132	8	ContinuedFraction.java	evaluate	epsilon	double	0	NIL-WHILE	relativeError > $
31648	132	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
12	139	12	ContinuedFraction.java	evaluate	p2	double	0	ConvergenceException	Double.isInfinite($)
12	139	12	ContinuedFraction.java	evaluate	q2	double	0	ConvergenceException	Double.isInfinite($)
13	149	16	ContinuedFraction.java	evaluate	scale	double	0	ConvergenceException	$ <= 0
31649	154	16	ContinuedFraction.java	evaluate	i	int	0	NIL-FOR	$ < maxPower
31649	154	16	ContinuedFraction.java	evaluate	maxPower	int	0	NIL-FOR	i < $
14	157	20	ContinuedFraction.java	evaluate	a	double	1	DEF	$ > b
14	157	20	ContinuedFraction.java	evaluate	a	double	1	DEF	$ != 0.0
14	157	20	ContinuedFraction.java	evaluate	b	double	1	DEF	a > $
15	160	27	ContinuedFraction.java	evaluate	b	double	0	DEF	$ != 0
16	165	20	ContinuedFraction.java	evaluate	infinite	boolean	0	DEF	$
17	171	12	ContinuedFraction.java	evaluate	infinite	boolean	0	ConvergenceException	$
18	179	12	ContinuedFraction.java	evaluate	r	double	0	ConvergenceException	Double.isNaN($)
19	193	8	ContinuedFraction.java	evaluate	n	int	0	MaxCountExceededException	$ >= maxIterations
19	193	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxCountExceededException	n >= $
2543	129	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
2543	129	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
2544	133	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
2545	138	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DEF	$.getInterpolatedState().length != model.getInterpolatedState().length
2545	138	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DEF	getInterpolatedState().length != $.getInterpolatedState().length
2546	144	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DEF	$.forward ^ model.$.forward
2546	144	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DEF	forward ^ $.forward
2547	154	6	ContinuousOutputModel.java	append	step	double	0	DEF	FastMath.abs(gap) > 1.0e-3 * FastMath.abs($)
2547	154	6	ContinuousOutputModel.java	append	gap	double	0	DEF	FastMath.abs($) > 1.0e-3 * FastMath.abs(step)
2548	193	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
2549	200	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
2550	258	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
2550	258	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
2550	258	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
2551	263	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
2551	263	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
2551	263	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
33198	270	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
33198	270	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
2552	275	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
2553	278	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
2554	292	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs(tMax - $) < 1e-6
2554	292	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs($ - tMin) < 1e-6
2554	292	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	FastMath.abs(tMed - $) < 1e-6
2554	292	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	FastMath.abs($ - tMed) < 1e-6
2555	315	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
2555	315	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
2556	317	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
2556	317	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
33199	325	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
33199	325	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
33199	325	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
33199	325	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
2557	351	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
2558	352	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
2558	352	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
2559	354	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
2559	354	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
2560	360	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
2560	360	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
2561	362	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
2561	362	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
2248	92	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
2248	92	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
2248	92	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
32988	122	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
32988	122	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
32989	169	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.normalized.$.length
32989	169	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < normalized.length
32990	175	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
32990	175	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
32990	175	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
32991	177	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.root.getColumnDimension()
32991	177	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < root.getColumnDimension()
32903	164	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
32903	164	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
32904	165	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
32904	165	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
2090	225	8	Covariance.java	covariance	THIS	Covariance	1	MathIllegalArgumentException	length != yArray.$.length
2090	225	8	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ != yArray.length
2090	225	8	Covariance.java	covariance	yArray	double[]	1	MathIllegalArgumentException	length != $.length
2091	228	15	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ < 2
32905	234	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
32905	234	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
2092	268	8	Covariance.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2092	268	8	Covariance.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
484	47	8	DefaultTransformer.java	transform	o	Object	0	NullArgumentException	$ == null
485	51	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
486	66	8	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
486	66	8	DefaultTransformer.java	equals	other	Object	0	RET	this == $
487	69	8	DefaultTransformer.java	equals	other	Object	0	RET	$ == null
1935	137	8	DescriptiveStatistics.java	DescriptiveStatistics	initialDoubleArray	double[]	0	DEF	$ != null
1936	161	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
1937	162	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
1938	164	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
1939	225	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
1940	226	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
1941	324	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < 1
1942	325	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
1943	336	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
1943	336	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
1943	336	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
1944	397	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
2584	217	8	Dfp.java	Dfp	x	long	0	DEF	$ == Long.MIN_VALUE
2585	225	8	Dfp.java	Dfp	x	long	1	DEF	$ < 0
33204	233	8	Dfp.java	Dfp	x	long	0	NIL-WHILE	$ != 0
2586	240	8	Dfp.java	Dfp	isLongMin	boolean	0	DEF	$
33205	243	12	Dfp.java	Dfp	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
33205	243	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < mant.length - 1
2587	244	16	Dfp.java	Dfp	THIS	Dfp	0	DEF	$.mant[i] != 0
2587	244	16	Dfp.java	Dfp	i	int	0	DEF	mant[$] != 0
2588	269	8	Dfp.java	Dfp	exponent	int	0	RET	$ == -1023
2589	271	12	Dfp.java	Dfp	x	double	0	RET	$ == 0
2590	273	16	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
33206	282	12	Dfp.java	Dfp	mantissa	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
2591	289	8	Dfp.java	Dfp	exponent	int	0	RET	$ == 1024
2592	291	12	Dfp.java	Dfp	x	double	1	DEF	$ != $
2593	294	19	Dfp.java	Dfp	x	double	1	DEF	$ < 0
2594	308	8	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
2595	349	8	Dfp.java	Dfp	s	String	0	RET	$.equals(POS_INFINITY_STRING)
2596	355	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NEG_INFINITY_STRING)
2597	361	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NAN_STRING)
2598	369	8	Dfp.java	Dfp	p	int	0	DEF	$ == -1
2599	375	8	Dfp.java	Dfp	p	int	1	DEF	$ != -1
33207	381	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$<fpexp.length()
33207	381	12	Dfp.java	Dfp	fpexp	String	0	NIL-FOR	i<$.length()
2600	383	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) == '-'
2600	383	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) == '-'
2601	388	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) >= '0'
2601	388	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) <= '9'
2601	388	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) >= '0'
2601	388	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) <= '9'
2602	393	12	Dfp.java	Dfp	negative	boolean	0	DEF	$
2603	402	8	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.indexOf("-") != -1
2604	412	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) <= '9'
2604	412	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) >= '1'
2604	412	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) <= '9'
2604	412	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) >= '1'
2605	416	12	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2605	416	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '0'
2605	416	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '0'
2606	420	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
2606	420	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
2607	426	12	Dfp.java	Dfp	p	int	0	DEF	$ == fpdecimal.length()
2607	426	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == $.length()
2608	439	12	Dfp.java	Dfp	p	int	0	DEF	$ == (fpdecimal.length())
2608	439	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == ($.length())
2609	444	12	Dfp.java	Dfp	THIS	Dfp	0	DEF	q == $.mant.$.length*rsize+offset+1
2609	444	12	Dfp.java	Dfp	rsize	int	0	DEF	q == mant.length*$+offset+1
2609	444	12	Dfp.java	Dfp	offset	int	0	DEF	q == mant.length*rsize+$+1
2609	444	12	Dfp.java	Dfp	q	int	0	DEF	$ == mant.length*rsize+offset+1
2610	448	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
2610	448	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
2611	455	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) < '0'
2611	455	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) > '9'
2611	455	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) < '0'
2611	455	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) > '9'
2612	468	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2612	468	8	Dfp.java	Dfp	offset	int	0	DEF	q != $
2612	468	8	Dfp.java	Dfp	q	int	0	DEF	$ != offset
2613	471	16	Dfp.java	Dfp	offset	int	0	DEF	q == $
2613	471	16	Dfp.java	Dfp	q	int	0	DEF	$ == offset
2614	474	16	Dfp.java	Dfp	striped	char[]	1	DEF	$[q] == '0'
2614	474	16	Dfp.java	Dfp	q	int	1	DEF	striped[$] == '0'
2615	483	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2615	483	8	Dfp.java	Dfp	significantDigits	int	0	DEF	$ == 0
2616	488	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
33208	496	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	$ > q
33208	496	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	p > $
2617	497	12	Dfp.java	Dfp	striped	char[]	0	DEF	$[p] != '0'
2617	497	12	Dfp.java	Dfp	p	int	0	DEF	striped[$] != '0'
33209	509	8	Dfp.java	Dfp	THIS	Dfp	0	NIL-WHILE	(p - q) < ($.mant.$.length * rsize)
33209	509	8	Dfp.java	Dfp	rsize	int	0	NIL-WHILE	(p - q) < (mant.length * $)
33209	509	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	($ - q) < (mant.length * rsize)
33209	509	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	(p - $) < (mant.length * rsize)
33210	510	12	Dfp.java	Dfp	rsize	int	0	NIL-FOR	i < $
33210	510	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < rsize
33211	517	8	Dfp.java	Dfp	i	int	0	NIL-FOR	$ >= 0
2618	528	8	Dfp.java	Dfp	THIS	Dfp	0	DEF	q < striped.$.length
2618	528	8	Dfp.java	Dfp	striped	char[]	0	DEF	q < $.length
2618	528	8	Dfp.java	Dfp	q	int	0	DEF	$ < striped.length
2619	597	8	Dfp.java	newInstance	THIS	Dfp	0	RET	$.field.getRadixDigits() != d.$.field.getRadixDigits()
2619	597	8	Dfp.java	newInstance	d	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
33212	669	8	Dfp.java	shiftLeft	i	int	0	NIL-FOR	$ > 0
33213	681	8	Dfp.java	shiftRight	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
33213	681	8	Dfp.java	shiftRight	i	int	0	NIL-FOR	$ < mant.length - 1
2620	703	8	Dfp.java	align	adiff	int	0	DEF	$ < 0
2621	707	8	Dfp.java	align	diff	int	0	RET	$ == 0
2622	711	8	Dfp.java	align	THIS	Dfp	0	RET	adiff > ($.mant.$.length + 1)
2622	711	8	Dfp.java	align	adiff	int	0	RET	$ > (mant.length + 1)
33214	722	8	Dfp.java	align	i	int	0	NIL-FOR	$ < adiff
33214	722	8	Dfp.java	align	adiff	int	0	NIL-FOR	i < $
2623	723	12	Dfp.java	align	diff	int	1	DEF	$ < 0
2624	728	16	Dfp.java	align	lostdigit	int	0	DEF	$ != 0
2625	740	8	Dfp.java	align	inexact	boolean	0	DEF	$
2626	756	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2626	756	8	Dfp.java	lessThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2627	765	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.isNaN()
2627	765	8	Dfp.java	lessThan	x	Dfp	0	RET	$.isNaN()
2628	781	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2628	781	8	Dfp.java	greaterThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2629	790	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.isNaN()
2629	790	8	Dfp.java	greaterThan	x	Dfp	0	RET	$.isNaN()
2630	804	8	Dfp.java	negativeOrNull	THIS	Dfp	0	RET	$.isNaN()
2631	819	8	Dfp.java	strictlyNegative	THIS	Dfp	0	RET	$.isNaN()
2632	834	8	Dfp.java	positiveOrNull	THIS	Dfp	0	RET	$.isNaN()
2633	849	8	Dfp.java	strictlyPositive	THIS	Dfp	0	RET	$.isNaN()
2634	887	8	Dfp.java	isZero	THIS	Dfp	0	RET	$.isNaN()
2635	904	8	Dfp.java	equals	other	Object	0	RET	$ instanceof Dfp
2636	906	12	Dfp.java	equals	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2636	906	12	Dfp.java	equals	THIS	Dfp	0	RET	$.isNaN()
2636	906	12	Dfp.java	equals	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2636	906	12	Dfp.java	equals	x	Dfp	0	RET	$.isNaN()
2637	931	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.isNaN()
2637	931	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2637	931	8	Dfp.java	unequal	x	Dfp	0	RET	$.isNaN()
2637	931	8	Dfp.java	unequal	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2638	946	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
2638	946	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
2638	946	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[a.$.mant.$.length - 1] == 0
2638	946	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length - 1] == 0
2638	946	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
2638	946	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
2638	946	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
2638	946	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
2639	951	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.sign != b.$.sign
2639	951	8	Dfp.java	compare	a	Dfp	0	RET	$.sign != b.sign
2639	951	8	Dfp.java	compare	b	Dfp	0	RET	a.sign != $.sign
2640	952	12	Dfp.java	compare	THIS	Dfp	1	RET	a.$.sign == -1
2640	952	12	Dfp.java	compare	a	Dfp	1	RET	$.sign == -1
2641	960	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
2641	960	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
2641	960	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
2641	960	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
2642	964	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
2642	964	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
2642	964	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
2642	964	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
2643	968	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
2643	968	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
2643	968	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
2643	968	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
2644	973	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[b.$.mant.$.length-1] != 0
2644	973	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length-1] != 0
2644	973	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[b.mant.length-1] != 0
2644	973	8	Dfp.java	compare	b	Dfp	0	RET	a.mant[$.mant.length-1] != 0
2644	973	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length-1] != 0
2645	974	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp < b.$.exp
2645	974	12	Dfp.java	compare	a	Dfp	0	RET	$.exp < b.exp
2645	974	12	Dfp.java	compare	b	Dfp	0	RET	a.exp < $.exp
2646	978	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp > b.$.exp
2646	978	12	Dfp.java	compare	a	Dfp	0	RET	$.exp > b.exp
2646	978	12	Dfp.java	compare	b	Dfp	0	RET	a.exp > $.exp
33215	984	8	Dfp.java	compare	i	int	0	NIL-FOR	$ >= 0
2647	985	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] > b.$.mant[i]
2647	985	12	Dfp.java	compare	i	int	0	RET	a.mant[$] > b.mant[$]
2647	985	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] > b.mant[i]
2647	985	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] > $.mant[i]
2648	989	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] < b.$.mant[i]
2648	989	12	Dfp.java	compare	i	int	0	RET	a.mant[$] < b.mant[$]
2648	989	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] < b.mant[i]
2648	989	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] < $.mant[i]
2649	1032	8	Dfp.java	remainder	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2649	1032	8	Dfp.java	remainder	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2650	1047	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.isNaN()
2651	1051	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.nans == INFINITE
2652	1055	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2653	1062	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp < 0
2654	1073	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp >= $.mant.$.length
33216	1081	8	Dfp.java	trunc	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length-result.$.exp
33216	1081	8	Dfp.java	trunc	i	int	0	NIL-FOR	$ < mant.length-result.exp
33216	1081	8	Dfp.java	trunc	result	Dfp	0	NIL-FOR	i < mant.length-$.exp
2655	1086	8	Dfp.java	trunc	changed	boolean	0	RET	$
2656	1089	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == -1
2656	1089	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == -1
2657	1096	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == 1
2657	1096	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == 1
2658	1107	20	Dfp.java	trunc	half	Dfp	0	DEF	a.greaterThan($)
2658	1107	20	Dfp.java	trunc	a	Dfp	0	DEF	$.greaterThan(half)
2659	1114	20	Dfp.java	trunc	THIS	Dfp	0	DEF	(result.$.mant[$.mant.$.length-result.$.exp]&1) != 0
2659	1114	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.exp > 0
2659	1114	20	Dfp.java	trunc	half	Dfp	0	DEF	a.equals($)
2659	1114	20	Dfp.java	trunc	a	Dfp	0	DEF	$.equals(half)
2659	1114	20	Dfp.java	trunc	result	Dfp	0	DEF	($.mant[mant.length-$.exp]&1) != 0
2659	1114	20	Dfp.java	trunc	result	Dfp	0	DEF	$.exp > 0
2660	1140	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.greaterThan($.newInstance(2147483647))
2660	1140	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.greaterThan(newInstance(2147483647))
2661	1144	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.lessThan($.newInstance(-2147483648))
2661	1144	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.lessThan(newInstance(-2147483648))
33217	1148	8	Dfp.java	intValue	THIS	Dfp	0	NIL-FOR	i >= $.mant.$.length - rounded.$.exp
33217	1148	8	Dfp.java	intValue	i	int	0	NIL-FOR	$ >= mant.length - rounded.exp
33217	1148	8	Dfp.java	intValue	rounded	Dfp	0	NIL-FOR	i >= mant.length - $.exp
2662	1152	8	Dfp.java	intValue	THIS	Dfp	0	DEF	rounded.$.sign == -1
2662	1152	8	Dfp.java	intValue	rounded	Dfp	0	DEF	$.sign == -1
2663	1182	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 1000
2664	1185	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 100
2665	1188	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 10
2666	1201	8	Dfp.java	power10	e	int	1	DEF	$ >= 0
33218	1232	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
33218	1232	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
33219	1238	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
33219	1238	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
2667	1254	8	Dfp.java	add	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2667	1254	8	Dfp.java	add	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2668	1262	8	Dfp.java	add	THIS	Dfp	0	RET	$.nans != FINITE
2668	1262	8	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans != FINITE
2668	1262	8	Dfp.java	add	x	Dfp	0	RET	$.nans != FINITE
2669	1263	12	Dfp.java	add	THIS	Dfp	0	RET	$.isNaN()
2670	1267	12	Dfp.java	add	x	Dfp	0	RET	$.isNaN()
2671	1271	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == FINITE
2671	1271	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2671	1271	12	Dfp.java	add	x	Dfp	0	RET	$.nans == FINITE
2672	1275	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2672	1275	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == FINITE
2672	1275	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2673	1279	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2673	1279	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2673	1279	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign == x.$.sign
2673	1279	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2673	1279	12	Dfp.java	add	x	Dfp	0	RET	sign == $.sign
2674	1283	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2674	1283	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign != x.$.sign
2674	1283	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2674	1283	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2674	1283	12	Dfp.java	add	x	Dfp	0	RET	sign != $.sign
2675	1308	8	Dfp.java	add	THIS	Dfp	0	DEF	$.compare(a, b) > 0
2675	1308	8	Dfp.java	add	a	Dfp	0	DEF	compare($, b) > 0
2675	1308	8	Dfp.java	add	b	Dfp	0	DEF	compare(a, $) > 0
2676	1315	8	Dfp.java	add	THIS	Dfp	0	DEF	b.$.mant[$.mant.$.length-1] == 0
2676	1315	8	Dfp.java	add	b	Dfp	0	DEF	$.mant[mant.length-1] == 0
2677	1319	8	Dfp.java	add	THIS	Dfp	0	DEF	a.$.mant[$.mant.$.length-1] == 0
2677	1319	8	Dfp.java	add	a	Dfp	0	DEF	$.mant[mant.length-1] == 0
2678	1326	8	Dfp.java	add	THIS	Dfp	1	DEF	a.$.exp < b.$.exp
2678	1326	8	Dfp.java	add	a	Dfp	1	DEF	$.exp < b.exp
2678	1326	8	Dfp.java	add	b	Dfp	1	DEF	a.exp < $.exp
2679	1333	8	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2679	1333	8	Dfp.java	add	bsign	byte	0	DEF	asign != $
2680	1334	12	Dfp.java	add	asign	byte	1	DEF	$ == rsign
2680	1334	12	Dfp.java	add	rsign	byte	1	DEF	asign == $
33220	1343	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
33220	1343	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2681	1354	8	Dfp.java	add	asign	byte	0	DEF	$ == bsign
2681	1354	8	Dfp.java	add	bsign	byte	0	DEF	asign == $
2681	1354	8	Dfp.java	add	rh	int	0	DEF	$ != 0
2682	1359	12	Dfp.java	add	excp	int	0	DEF	$ != 0
33221	1365	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
33221	1365	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2683	1366	12	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] != 0
2683	1366	12	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] != 0
2684	1370	12	Dfp.java	add	i	int	0	DEF	$ == 0
2685	1378	8	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2685	1378	8	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2686	1381	12	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2686	1381	12	Dfp.java	add	bsign	byte	0	DEF	asign != $
2687	1389	8	Dfp.java	add	excp	int	0	DEF	$ != 0
2688	1454	8	Dfp.java	round	inc	boolean	0	DEF	$
33222	1457	12	Dfp.java	round	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
33222	1457	12	Dfp.java	round	i	int	0	NIL-FOR	$ < mant.length
2689	1463	12	Dfp.java	round	rh	int	0	DEF	$ != 0
2690	1470	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp < MIN_EXP
2691	1476	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp > MAX_EXP
2692	1482	8	Dfp.java	round	n	int	0	RET	$ != 0
2693	1499	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2693	1499	8	Dfp.java	multiply	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2694	1509	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
2694	1509	8	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans != FINITE
2694	1509	8	Dfp.java	multiply	x	Dfp	0	RET	$.nans != FINITE
2695	1510	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
2696	1514	12	Dfp.java	multiply	x	Dfp	0	RET	$.isNaN()
2697	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2697	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] != 0
2697	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2697	1518	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
2697	1518	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] != 0
2698	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2698	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2698	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] != 0
2698	1524	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2699	1530	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2699	1530	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2699	1530	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2700	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2700	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2700	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2700	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2700	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2700	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] == 0
2700	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
2700	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2700	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] == 0
33223	1548	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
33223	1548	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
33224	1550	12	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	j<$.mant.$.length
33224	1550	12	Dfp.java	multiply	j	int	0	NIL-FOR	$<mant.length
33225	1562	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ >= 0
2701	1563	12	Dfp.java	multiply	i	int	0	DEF	product[$] != 0
2701	1563	12	Dfp.java	multiply	product	int[]	0	DEF	$[i] != 0
33226	1570	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
33226	1570	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
2702	1578	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2702	1578	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2703	1584	8	Dfp.java	multiply	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
2703	1584	8	Dfp.java	multiply	md	int	1	DEF	$ > (mant.length-1)
2704	1590	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
2705	1607	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
2706	1608	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
2707	1612	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2707	1612	12	Dfp.java	multiply	x	int	0	RET	$ != 0
2708	1617	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2708	1617	12	Dfp.java	multiply	x	int	0	RET	$ == 0
2709	1627	8	Dfp.java	multiply	x	int	0	RET	$ < 0
2709	1627	8	Dfp.java	multiply	x	int	0	RET	$ >= RADIX
33227	1636	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
33227	1636	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
2710	1643	8	Dfp.java	multiply	rh	int	0	DEF	$ != 0
2711	1649	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2711	1649	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2712	1654	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
2713	1678	8	Dfp.java	divide	THIS	Dfp	0	RET	$.field.getRadixDigits() != divisor.$.field.getRadixDigits()
2713	1678	8	Dfp.java	divide	divisor	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2714	1688	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
2714	1688	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans != FINITE
2714	1688	8	Dfp.java	divide	divisor	Dfp	0	RET	$.nans != FINITE
2715	1689	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
2716	1693	12	Dfp.java	divide	divisor	Dfp	0	RET	$.isNaN()
2717	1697	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == FINITE
2717	1697	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2717	1697	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == FINITE
2718	1703	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == FINITE
2718	1703	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2718	1703	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2719	1709	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2719	1709	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2719	1709	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2720	1719	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.mant[$.mant.$.length-1] == 0
2720	1719	8	Dfp.java	divide	divisor	Dfp	0	RET	$.mant[mant.length-1] == 0
33228	1742	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
33228	1742	8	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
33229	1750	8	Dfp.java	divide	qd	int	0	NIL-FOR	$ >= 0
33230	1759	12	Dfp.java	divide	trialgood	boolean	0	NIL-WHILE	$
33231	1765	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
33231	1765	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
33232	1774	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
33232	1774	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
2721	1781	16	Dfp.java	divide	rh	int	0	DEF	$ == 0
2722	1791	16	Dfp.java	divide	minadj	int	0	DEF	$ >= 2
33233	1799	16	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2723	1800	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] > remainder[i]
2723	1800	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] > remainder[$]
2723	1800	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] > $[i]
2723	1800	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] > remainder[i]
2724	1803	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] < remainder[i]
2724	1803	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] < remainder[$]
2724	1803	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] < $[i]
2724	1803	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] < remainder[i]
2725	1808	16	Dfp.java	divide	THIS	Dfp	0	DEF	remainder[$.mant.$.length] != 0
2725	1808	16	Dfp.java	divide	remainder	int[]	0	DEF	$[mant.length] != 0
2726	1812	16	Dfp.java	divide	trialgood	boolean	0	DEF	$ == false
2727	1819	12	Dfp.java	divide	nsqd	int	0	DEF	$ != 0
2727	1819	12	Dfp.java	divide	trial	int	0	DEF	$ != 0
2728	1823	12	Dfp.java	divide	THIS	Dfp	0	DEF	$.field.getRoundingMode() == DfpField.$.RoundingMode.ROUND_DOWN
2728	1823	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd == $.mant.$.length
2728	1823	12	Dfp.java	divide	nsqd	int	0	DEF	$ == mant.length
2729	1828	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd > $.mant.$.length
2729	1828	12	Dfp.java	divide	nsqd	int	0	DEF	$ > mant.length
33234	1835	12	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
33234	1835	12	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
33235	1842	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2730	1843	12	Dfp.java	divide	i	int	0	DEF	quotient[$] != 0
2730	1843	12	Dfp.java	divide	quotient	int[]	0	DEF	$[i] != 0
33236	1850	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i<$.mant.$.length
33236	1850	8	Dfp.java	divide	i	int	0	NIL-FOR	$<mant.length
2731	1858	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2731	1858	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2732	1862	8	Dfp.java	divide	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
2732	1862	8	Dfp.java	divide	md	int	1	DEF	$ > (mant.length-1)
2733	1868	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
2734	1883	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
2735	1884	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
2736	1888	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2737	1894	8	Dfp.java	divide	divisor	int	0	RET	$ == 0
2738	1904	8	Dfp.java	divide	divisor	int	0	RET	$ < 0
2738	1904	8	Dfp.java	divide	divisor	int	0	RET	$ >= RADIX
33237	1915	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2739	1922	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2739	1922	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2740	1932	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
2741	1946	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2741	1946	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == FINITE
2742	1951	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans != FINITE
2743	1952	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == INFINITE
2743	1952	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == 1
2744	1957	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == QNAN
2745	1961	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == SNAN
2746	1971	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == -1
2747	1985	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp < -1
2747	1985	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp > 1
2747	1985	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp < -1
2747	1985	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp > 1
33238	2011	8	Dfp.java	sqrt	x	Dfp	0	NIL-WHILE	$.unequal(px)
33238	2011	8	Dfp.java	sqrt	px	Dfp	0	NIL-WHILE	x.unequal($)
2748	2020	12	Dfp.java	sqrt	x	Dfp	0	DEF	$.equals(ppx)
2748	2020	12	Dfp.java	sqrt	ppx	Dfp	0	DEF	x.equals($)
2749	2027	12	Dfp.java	sqrt	THIS	Dfp	0	DEF	dx.$.mant[$.mant.$.length-1] == 0
2749	2027	12	Dfp.java	sqrt	dx	Dfp	0	DEF	$.mant[mant.length-1] == 0
2750	2041	8	Dfp.java	toString	THIS	Dfp	0	RET	$.nans != FINITE
2751	2043	12	Dfp.java	toString	THIS	Dfp	1	RET	$.nans == INFINITE
2752	2050	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp < -1
2752	2050	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp > $.mant.$.length
33239	2072	8	Dfp.java	dfp2sci	i	int	0	NIL-FOR	$ >= 0
33240	2080	8	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-FOR	p < rawdigits.$.length
33240	2080	8	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-FOR	p < $.length
33240	2080	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ < rawdigits.length
2753	2081	12	Dfp.java	dfp2sci	rawdigits	char[]	0	DEF	$[p] != '0'
2753	2081	12	Dfp.java	dfp2sci	p	int	0	DEF	rawdigits[$] != '0'
2754	2089	8	Dfp.java	dfp2sci	THIS	Dfp	0	DEF	$.sign == -1
2755	2093	8	Dfp.java	dfp2sci	THIS	Dfp	1	DEF	p != rawdigits.$.length
2755	2093	8	Dfp.java	dfp2sci	rawdigits	char[]	1	DEF	p != $.length
2755	2093	8	Dfp.java	dfp2sci	p	int	1	DEF	$ != rawdigits.length
33241	2098	12	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-WHILE	p<rawdigits.$.length
33241	2098	12	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-WHILE	p<$.length
33241	2098	12	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$<rawdigits.length
2756	2116	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
33242	2121	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ > ae
33242	2121	8	Dfp.java	dfp2sci	ae	int	0	NIL-FOR	p > $
2757	2125	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
33243	2129	8	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$ > 0
2758	2151	8	Dfp.java	dfp2string	e	int	0	DEF	$ <= 0
33244	2157	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ < 0
33245	2165	8	Dfp.java	dfp2string	i	int	0	NIL-FOR	$ >= 0
2759	2170	12	Dfp.java	dfp2string	e	int	0	DEF	--$ == 0
33246	2176	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ > 0
2760	2184	8	Dfp.java	dfp2string	pointInserted	boolean	0	DEF	$
33247	2191	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[q] == '0'
33247	2191	8	Dfp.java	dfp2string	q	int	0	NIL-WHILE	buffer[$] == '0'
2761	2194	8	Dfp.java	dfp2string	buffer	char[]	0	DEF	$[q] == '.'
2761	2194	8	Dfp.java	dfp2string	q	int	0	DEF	buffer[$] == '.'
33248	2199	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[p-1] == '0'
33248	2199	8	Dfp.java	dfp2string	p	int	0	NIL-WHILE	buffer[$-1] == '0'
2762	2204	8	Dfp.java	dfp2string	THIS	Dfp	0	DEF	$.sign < 0
2763	2230	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] != 0
2763	2230	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
2764	2237	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
2764	2237	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] == 0
2765	2243	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == QNAN
2765	2243	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
2766	2248	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
2766	2248	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == SNAN
2767	2255	16	Dfp.java	dotrap	THIS	Dfp	1	DEF	(result.$.exp+$.mant.$.length) < MIN_EXP
2767	2255	16	Dfp.java	dotrap	result	Dfp	1	DEF	($.exp+mant.length) < MIN_EXP
2768	2320	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2768	2320	8	Dfp.java	nextAfter	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2769	2329	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan(x)
2769	2329	8	Dfp.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
2770	2333	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.compare(this, x) == 0
2770	2333	8	Dfp.java	nextAfter	x	Dfp	0	RET	compare(this, $) == 0
2771	2337	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan($.getZero())
2772	2343	8	Dfp.java	nextAfter	up	boolean	1	DEF	$
2773	2348	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
2774	2358	12	Dfp.java	nextAfter	THIS	Dfp	1	DEF	$.equals(inc)
2774	2358	12	Dfp.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
2775	2364	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
2776	2371	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.classify() != INFINITE
2776	2371	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
2777	2376	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero()) == false
2777	2376	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	result.equals($.getZero())
2777	2376	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
2778	2391	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isInfinite()
2779	2392	12	Dfp.java	toDouble	THIS	Dfp	1	RET	$.lessThan($.getZero())
2780	2399	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isNaN()
2781	2406	8	Dfp.java	toDouble	cmp0	int	1	RET	$ == 0
2782	2408	15	Dfp.java	toDouble	cmp0	int	0	DEF	$ < 0
2783	2416	8	Dfp.java	toDouble	exponent	int	0	DEF	$ < 0
33249	2421	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.equals($)
33249	2421	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.lessThan($)
33249	2421	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.equals(y)
33249	2421	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.lessThan(y)
2784	2430	8	Dfp.java	toDouble	exponent	int	0	DEF	$ > -1023
2785	2434	8	Dfp.java	toDouble	exponent	int	0	RET	$ < -1074
2786	2438	8	Dfp.java	toDouble	exponent	int	0	RET	$ > 1023
2787	2448	8	Dfp.java	toDouble	mantissa	long	0	DEF	$ == 4503599627370496L
2788	2455	8	Dfp.java	toDouble	exponent	int	0	DEF	$ <= -1023
33250	2459	8	Dfp.java	toDouble	exponent	int	0	NIL-WHILE	$ < -1023
2789	2467	8	Dfp.java	toDouble	negate	boolean	0	DEF	$
2563	131	8	DfpDec.java	newInstance	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != d.getField().getRadixDigits()
2563	131	8	DfpDec.java	newInstance	d	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2564	168	8	DfpDec.java	round	msb	int	0	RET	$ == 0
33200	175	8	DfpDec.java	round	msb	int	0	NIL-WHILE	lsbthreshold > $
33200	175	8	DfpDec.java	round	lsbthreshold	int	0	NIL-WHILE	$ > msb
33201	186	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsbshift % 4
33201	186	8	DfpDec.java	round	lsbshift	int	0	NIL-FOR	i < $ % 4
2565	192	8	DfpDec.java	round	THIS	DfpDec	0	RET	digits == 4 * $.mant.$.length - 3
2565	192	8	DfpDec.java	round	lsbthreshold	int	0	RET	$ <= 1
2565	192	8	DfpDec.java	round	digits	int	0	RET	$ == 4 * mant.length - 3
2566	198	8	DfpDec.java	round	lsbthreshold	int	1	DEF	$ == 1
33202	208	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsd
33202	208	8	DfpDec.java	round	lsd	int	0	NIL-FOR	i < $
2567	255	8	DfpDec.java	round	inc	boolean	0	DEF	$
33203	258	12	DfpDec.java	round	THIS	DfpDec	0	NIL-FOR	i < $.mant.$.length
33203	258	12	DfpDec.java	round	i	int	0	NIL-FOR	$ < mant.length
2568	264	12	DfpDec.java	round	rh	int	0	DEF	$ != 0
2569	271	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp < MIN_EXP
2570	277	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp > MAX_EXP
2571	283	8	DfpDec.java	round	discarded	int	0	RET	$ != 0
2571	283	8	DfpDec.java	round	n	int	0	RET	$ != 0
2572	298	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != x.getField().getRadixDigits()
2572	298	8	DfpDec.java	nextAfter	x	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2573	310	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan(x)
2573	310	8	DfpDec.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
2574	314	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.equals(x)
2574	314	8	DfpDec.java	nextAfter	x	Dfp	0	RET	equals($)
2575	318	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan($.getZero())
2576	322	8	DfpDec.java	nextAfter	up	boolean	1	DEF	$
2577	326	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2578	330	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2578	330	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2579	339	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	$.equals(inc)
2579	339	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
2580	345	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2581	349	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2581	349	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2582	356	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.classify() != INFINITE
2582	356	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
2583	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	result.equals($.getZero())
2583	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero()) == false
2583	361	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
2790	197	8	DfpField.java	DfpField	computeConstants	boolean	1	DEF	$
33251	529	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
33251	529	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
33251	529	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
2791	532	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '1'
2791	532	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2791	532	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '1'
2791	532	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
2792	536	8	DfpField.java	split	i	int	0	DEF	buf[$] == '.'
2792	536	8	DfpField.java	split	buf	char[]	0	DEF	$[i] == '.'
2793	541	8	DfpField.java	split	THIS	DfpField	0	DEF	sig == ($.radixDigits / 2) * 4
2793	541	8	DfpField.java	split	sig	int	0	DEF	$ == (radixDigits / 2) * 4
2794	546	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2794	546	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
2794	546	8	DfpField.java	split	leading	boolean	0	DEF	$
2794	546	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
2794	546	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
33252	553	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
33252	553	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
33252	553	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
2795	555	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2795	555	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
2795	555	8	DfpField.java	split	i	int	0	DEF	$ < sp
2795	555	8	DfpField.java	split	sp	int	0	DEF	i < $
2795	555	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
2795	555	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
2796	570	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String == null
2796	570	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String.length() < highPrecisionDecimalDigits - 3
2796	570	8	DfpField.java	computeStringConstants	highPrecisionDecimalDigits	int	0	DEF	sqr2String.length() < $ - 3
33253	615	8	DfpField.java	computePi	i	int	0	NIL-FOR	$ < 20
2797	629	12	DfpField.java	computePi	ykM1	Dfp	0	DEF	yk.equals($)
2797	629	12	DfpField.java	computePi	yk	Dfp	0	DEF	$.equals(ykM1)
33254	651	8	DfpField.java	computeExp	i	int	0	NIL-FOR	$ < 10000
2798	656	12	DfpField.java	computeExp	y	Dfp	0	DEF	$.equals(py)
2798	656	12	DfpField.java	computeExp	py	Dfp	0	DEF	y.equals($)
33255	734	8	DfpField.java	computeLn	i	int	0	NIL-FOR	$ < 10000
2799	740	12	DfpField.java	computeLn	y	Dfp	0	DEF	$.equals(py)
2799	740	12	DfpField.java	computeLn	py	Dfp	0	DEF	y.equals($)
33260	54	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
33260	54	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
33260	54	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
2817	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '1'
2817	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2817	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '1'
2817	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2818	61	12	DfpMath.java	split	i	int	0	DEF	buf[$] == '.'
2818	61	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] == '.'
2819	66	12	DfpMath.java	split	sig	int	0	DEF	$ == (field.getRadixDigits() / 2) * 4
2819	66	12	DfpMath.java	split	field	DfpField	0	DEF	sig == ($.getRadixDigits() / 2) * 4
2820	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
2820	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2820	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
2820	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2820	71	12	DfpMath.java	split	leading	boolean	0	DEF	$
33261	78	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
33261	78	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
33261	78	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
2821	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
2821	80	12	DfpMath.java	split	i	int	0	DEF	$ < sp
2821	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2821	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
2821	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2821	80	12	DfpMath.java	split	sp	int	0	DEF	i < $
2822	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].equals($[1])
2822	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].classify() == Dfp.INFINITE
2823	162	8	DfpMath.java	splitPow	a	int	0	RET	$ == 0
2824	167	8	DfpMath.java	splitPow	a	int	0	DEF	$ < 0
33262	174	8	DfpMath.java	splitPow	a	int	0	NIL-DOWHILE	$ >= 1
2825	183	16	DfpMath.java	splitPow	trial	int	0	DEF	$ > a
2825	183	16	DfpMath.java	splitPow	a	int	0	DEF	trial > $
2826	198	8	DfpMath.java	splitPow	invert	boolean	0	DEF	$
2827	217	8	DfpMath.java	pow	a	int	0	RET	$ == 0
2828	222	8	DfpMath.java	pow	a	int	0	DEF	$ < 0
33263	228	8	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$ >= 1
33264	234	12	DfpMath.java	pow	trial	int	0	NIL-DOWHILE	a>$
33264	234	12	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$>trial
2829	249	8	DfpMath.java	pow	invert	boolean	0	DEF	$
2830	270	8	DfpMath.java	exp	ia	int	0	RET	$ > 2147483646
2831	275	8	DfpMath.java	exp	ia	int	0	RET	$ < -2147483646
33265	297	8	DfpMath.java	expInternal	i	int	0	NIL-FOR	$ < 90
2832	301	12	DfpMath.java	expInternal	y	Dfp	0	DEF	$.equals(py)
2832	301	12	DfpMath.java	expInternal	py	Dfp	0	DEF	y.equals($)
2833	324	8	DfpMath.java	log	a	Dfp	0	RET	$.lessThan($.getZero())
2833	324	8	DfpMath.java	log	a	Dfp	0	RET	$.isNaN()
2833	324	8	DfpMath.java	log	a	Dfp	0	RET	$.equals($.getZero())
2834	330	8	DfpMath.java	log	a	Dfp	0	RET	$.classify() == Dfp.INFINITE
33266	340	8	DfpMath.java	log	ix	int	0	NIL-WHILE	$ > 2
33267	353	8	DfpMath.java	log	spx	Dfp[]	0	NIL-WHILE	$[0].add($[1]).greaterThan(spy[0])
33267	353	8	DfpMath.java	log	spy	Dfp[]	0	NIL-WHILE	spx[0].add(spx[1]).greaterThan($[0])
33268	447	8	DfpMath.java	logInternal	i	int	0	NIL-FOR	$ < 10000
2835	453	12	DfpMath.java	logInternal	y	Dfp	0	DEF	$.equals(py)
2835	453	12	DfpMath.java	logInternal	py	Dfp	0	DEF	y.equals($)
2836	508	8	DfpMath.java	pow	x	Dfp	0	RET	$.getField().getRadixDigits() != y.getField().getRadixDigits()
2836	508	8	DfpMath.java	pow	y	Dfp	0	RET	x.getField().getRadixDigits() != $.getField().getRadixDigits()
2837	522	8	DfpMath.java	pow	zero	Dfp	0	RET	y.equals($)
2837	522	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(zero)
2838	526	8	DfpMath.java	pow	one	Dfp	0	RET	y.equals($)
2838	526	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(one)
2839	527	12	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
2840	535	8	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
2840	535	8	DfpMath.java	pow	y	Dfp	0	RET	$.isNaN()
2841	542	8	DfpMath.java	pow	zero	Dfp	0	RET	x.equals($)
2841	542	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(zero)
2842	543	12	DfpMath.java	pow	zero	Dfp	1	RET	Dfp.copysign(one, x).greaterThan($)
2842	543	12	DfpMath.java	pow	one	Dfp	1	RET	Dfp.copysign($, x).greaterThan(zero)
2842	543	12	DfpMath.java	pow	x	Dfp	1	RET	Dfp.copysign(one, $).greaterThan(zero)
2843	545	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2843	545	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2844	552	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
2844	552	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
2844	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
2844	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
2844	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
2845	554	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2845	554	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2846	561	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2846	561	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2847	570	8	DfpMath.java	pow	zero	Dfp	0	DEF	x.lessThan($)
2847	570	8	DfpMath.java	pow	x	Dfp	0	DEF	$.lessThan(zero)
2848	576	8	DfpMath.java	pow	one	Dfp	0	RET	x.greaterThan($)
2848	576	8	DfpMath.java	pow	x	Dfp	0	RET	$.greaterThan(one)
2848	576	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
2849	577	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2849	577	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2850	584	8	DfpMath.java	pow	one	Dfp	0	RET	x.lessThan($)
2850	584	8	DfpMath.java	pow	x	Dfp	0	RET	$.lessThan(one)
2850	584	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
2851	585	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2851	585	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2852	592	8	DfpMath.java	pow	one	Dfp	0	RET	x.equals($)
2852	592	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(one)
2852	592	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
2853	597	8	DfpMath.java	pow	x	Dfp	0	RET	$.classify() == Dfp.INFINITE
2854	599	12	DfpMath.java	pow	invert	boolean	1	RET	$
2855	601	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
2855	601	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
2855	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
2855	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
2855	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
2856	603	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2856	603	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2857	610	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2857	610	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2858	618	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2858	618	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2859	626	8	DfpMath.java	pow	invert	boolean	0	RET	$
2859	626	8	DfpMath.java	pow	y	Dfp	0	RET	$.rint().equals($)
2860	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.greaterThan($.newInstance(-100000000))
2860	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.lessThan($.newInstance(100000000))
2860	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.greaterThan(x.newInstance(-100000000))
2860	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.lessThan(x.newInstance(100000000))
2861	640	12	DfpMath.java	pow	v	Dfp	1	DEF	$.unequal(zero)
2861	640	12	DfpMath.java	pow	zero	Dfp	1	DEF	v.unequal($)
2862	656	8	DfpMath.java	pow	invert	boolean	0	DEF	$
2863	658	12	DfpMath.java	pow	zero	Dfp	0	DEF	y.remainder(two).equals($)
2863	658	12	DfpMath.java	pow	two	Dfp	0	DEF	y.remainder($).equals(zero)
2863	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.rint().equals($)
2863	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.remainder(two).equals(zero)
33269	681	8	DfpMath.java	sinInternal	i	int	0	NIL-FOR	$ < 90
2864	687	12	DfpMath.java	sinInternal	y	Dfp	0	DEF	$.equals(py)
2864	687	12	DfpMath.java	sinInternal	py	Dfp	0	DEF	y.equals($)
33270	714	8	DfpMath.java	cosInternal	i	int	0	NIL-FOR	$ < 90
2865	721	12	DfpMath.java	cosInternal	y	Dfp	0	DEF	$.equals(py)
2865	721	12	DfpMath.java	cosInternal	py	Dfp	0	DEF	y.equals($)
2866	745	8	DfpMath.java	sin	zero	Dfp	0	DEF	x.lessThan($)
2866	745	8	DfpMath.java	sin	x	Dfp	0	DEF	$.lessThan(zero)
2867	754	8	DfpMath.java	sin	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
2867	754	8	DfpMath.java	sin	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
2868	759	8	DfpMath.java	sin	pi	Dfp	1	DEF	x.lessThan($.divide(4))
2868	759	8	DfpMath.java	sin	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
2869	774	8	DfpMath.java	sin	neg	boolean	0	DEF	$
2870	796	8	DfpMath.java	cos	zero	Dfp	0	DEF	x.lessThan($)
2870	796	8	DfpMath.java	cos	x	Dfp	0	DEF	$.lessThan(zero)
2871	804	8	DfpMath.java	cos	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
2871	804	8	DfpMath.java	cos	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
2872	810	8	DfpMath.java	cos	pi	Dfp	1	DEF	x.lessThan($.divide(4))
2872	810	8	DfpMath.java	cos	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
2873	824	8	DfpMath.java	cos	neg	boolean	0	DEF	$
33271	850	8	DfpMath.java	atanInternal	i	int	0	NIL-FOR	$ < 90
2874	855	12	DfpMath.java	atanInternal	y	Dfp	0	DEF	$.equals(py)
2874	855	12	DfpMath.java	atanInternal	py	Dfp	0	DEF	y.equals($)
2875	890	8	DfpMath.java	atan	zero	Dfp	0	DEF	x.lessThan($)
2875	890	8	DfpMath.java	atan	x	Dfp	0	DEF	$.lessThan(zero)
2876	895	8	DfpMath.java	atan	one	Dfp	0	DEF	x.greaterThan($)
2876	895	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(one)
2877	900	8	DfpMath.java	atan	ty	Dfp	0	DEF	x.greaterThan($)
2877	900	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(ty)
2878	923	8	DfpMath.java	atan	sub	boolean	0	DEF	$
2879	927	8	DfpMath.java	atan	recp	boolean	0	DEF	$
2880	931	8	DfpMath.java	atan	neg	boolean	0	DEF	$
2881	955	8	DfpMath.java	acos	a	Dfp	0	DEF	$.lessThan($.getZero())
2882	963	8	DfpMath.java	acos	negative	boolean	0	DEF	$
33302	105	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
33302	105	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
33303	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
33303	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
33303	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
33124	144	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < $.mainSetDimension
33124	144	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2419	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
2419	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
2420	171	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
2421	173	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
33091	183	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
33091	183	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
33092	206	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
33092	206	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
33123	258	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < $.mainSetDimension
33123	258	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2472	279	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
2491	246	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
2491	246	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
33143	257	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
33143	257	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
33144	264	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
33144	264	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
33145	291	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
33145	291	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
33146	296	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
33146	296	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
2492	317	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
2493	319	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
33147	321	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
33148	330	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
33148	330	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
33149	348	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < D.$.length
33149	348	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < D.length
33150	370	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
33150	370	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2494	391	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
33151	401	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
33151	401	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
33152	410	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
33152	410	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
33153	420	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
33153	420	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
33154	446	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
33154	446	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
33155	469	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
33155	469	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
2407	117	4	DummyStepInterpolator.java	writeExternal	THIS	DummyStepInterpolator	0	DEF	$.currentDerivative != null
33076	118	8	DummyStepInterpolator.java	writeExternal	THIS	DummyStepInterpolator	0	NIL-FOR	i < $.currentDerivative.$.length
33076	118	8	DummyStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentDerivative.length
2408	136	4	DummyStepInterpolator.java	readExternal	THIS	DummyStepInterpolator	1	DEF	$.currentState == null
33077	140	8	DummyStepInterpolator.java	readExternal	THIS	DummyStepInterpolator	0	NIL-FOR	i < $.currentDerivative.$.length
33077	140	8	DummyStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < currentDerivative.length
1400	100	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	0	DEF	$.isSymmetric(matrix, true)
1400	100	8	EigenDecompositionImpl.java	EigenDecompositionImpl	matrix	RealMatrix	0	DEF	isSymmetric($, true)
32444	123	8	EigenDecompositionImpl.java	EigenDecompositionImpl	i	int	0	NIL-FOR	$<size
32444	123	8	EigenDecompositionImpl.java	EigenDecompositionImpl	size	int	0	NIL-FOR	i<$
32445	144	8	EigenDecompositionImpl.java	isSymmetric	i	int	0	NIL-FOR	$ < rows
32445	144	8	EigenDecompositionImpl.java	isSymmetric	rows	int	0	NIL-FOR	i < $
32446	145	12	EigenDecompositionImpl.java	isSymmetric	j	int	0	NIL-FOR	$ < columns
32446	145	12	EigenDecompositionImpl.java	isSymmetric	columns	int	0	NIL-FOR	j < $
1401	148	16	EigenDecompositionImpl.java	isSymmetric	mij	double	0	NonSymmetricMatrixException:RET	FastMath.abs($ - mji) > (FastMath.max(FastMath.abs($), FastMath.abs(mji)) * eps)
1401	148	16	EigenDecompositionImpl.java	isSymmetric	mji	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - $) > (FastMath.max(FastMath.abs(mij), FastMath.abs($)) * eps)
1401	148	16	EigenDecompositionImpl.java	isSymmetric	eps	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - mji) > (FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * $)
1402	150	20	EigenDecompositionImpl.java	isSymmetric	raiseException	boolean	0	NonSymmetricMatrixException	$
1403	163	8	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.cachedV == null
32447	166	12	EigenDecompositionImpl.java	getV	k	int	0	NIL-FOR	$ < m
32447	166	12	EigenDecompositionImpl.java	getV	m	int	0	NIL-FOR	k < $
1404	177	8	EigenDecompositionImpl.java	getD	THIS	EigenDecompositionImpl	0	DEF	$.cachedD == null
1405	187	8	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.cachedVt == null
32448	190	12	EigenDecompositionImpl.java	getVT	k	int	0	NIL-FOR	$ < m
32448	190	12	EigenDecompositionImpl.java	getVT	m	int	0	NIL-FOR	k < $
32449	472	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n - 1
32449	472	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $ - 1
32450	481	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
32450	481	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1406	482	12	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	FastMath.abs($.realEigenvalues[i])>maxAbsoluteValue
1406	482	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$])>maxAbsoluteValue
1406	482	12	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i])>$
1407	485	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$])>maxAbsoluteValue
1407	485	12	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i])>maxAbsoluteValue
1407	485	12	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i])>$
1408	490	8	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$!=0.0
32451	491	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
32451	491	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1409	492	16	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	FastMath.abs($.realEigenvalues[i])<=MathUtils.EPSILON*maxAbsoluteValue
1409	492	16	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$])<=MathUtils.EPSILON*maxAbsoluteValue
1409	492	16	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i])<=MathUtils.EPSILON*$
1410	495	16	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$])<=MathUtils.EPSILON*maxAbsoluteValue
1410	495	16	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i])<=MathUtils.EPSILON*maxAbsoluteValue
1410	495	16	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i])<=MathUtils.EPSILON*$
32452	501	8	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
32452	501	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
32453	504	12	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-DOWHILE	$ != j
32453	504	12	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-DOWHILE	m != $
32454	505	16	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	$ < n - 1
32454	505	16	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	m < $ - 1
1411	507	20	EigenDecompositionImpl.java	findEigenVectors	delta	double	0	DEF	FastMath.abs(e[m]) + $ == $
1411	507	20	EigenDecompositionImpl.java	findEigenVectors	m	int	0	DEF	FastMath.abs(e[$]) + delta == delta
1411	507	20	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[m]) + delta == delta
1412	511	16	EigenDecompositionImpl.java	findEigenVectors	m	int	0	MaxCountExceededException	$ != j
1412	511	16	EigenDecompositionImpl.java	findEigenVectors	j	int	0	MaxCountExceededException	m != $
1413	512	20	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	MaxCountExceededException	its == $.maxIter
1413	512	20	EigenDecompositionImpl.java	findEigenVectors	its	int	0	MaxCountExceededException	$ == maxIter
1414	519	20	EigenDecompositionImpl.java	findEigenVectors	q	double	1	DEF	$ < 0.0
32455	528	20	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ >= j
32455	528	20	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	i >= $
1415	531	24	EigenDecompositionImpl.java	findEigenVectors	p	double	1	DEF	FastMath.abs($) >= FastMath.abs(q)
1415	531	24	EigenDecompositionImpl.java	findEigenVectors	q	double	1	DEF	FastMath.abs(p) >= FastMath.abs($)
1416	544	24	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	e[$ + 1] == 0.0
1416	544	24	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	$[i + 1] == 0.0
32456	554	24	EigenDecompositionImpl.java	findEigenVectors	ia	int	0	NIL-FOR	$ < n
32456	554	24	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	ia < $
1417	560	20	EigenDecompositionImpl.java	findEigenVectors	t	double	0	DEF	$ == 0.0
1417	560	20	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	$ >= j
1417	560	20	EigenDecompositionImpl.java	findEigenVectors	j	int	0	DEF	i >= $
32457	571	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
32457	571	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
32458	574	12	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
32458	574	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
1418	575	16	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	$.realEigenvalues[j] > p
1418	575	16	EigenDecompositionImpl.java	findEigenVectors	j	int	0	DEF	realEigenvalues[$] > p
1418	575	16	EigenDecompositionImpl.java	findEigenVectors	p	double	0	DEF	realEigenvalues[j] > $
1419	580	12	EigenDecompositionImpl.java	findEigenVectors	k	int	0	DEF	$ != i
1419	580	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	k != $
32459	583	16	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
32459	583	16	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
32460	593	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
32460	593	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1420	594	12	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	FastMath.abs($.realEigenvalues[i])>maxAbsoluteValue
1420	594	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$])>maxAbsoluteValue
1420	594	12	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i])>$
1421	599	8	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$!=0.0
32461	600	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
32461	600	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1422	601	16	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	FastMath.abs($.realEigenvalues[i])<MathUtils.EPSILON*maxAbsoluteValue
1422	601	16	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$])<MathUtils.EPSILON*maxAbsoluteValue
1422	601	16	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i])<MathUtils.EPSILON*$
32462	608	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
32462	608	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
32463	609	12	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
32463	609	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
33026	82	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$<oldChromosomes.size()
33026	82	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i<$.size()
2322	97	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	IllegalArgumentException	$ < 0
2322	97	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	IllegalArgumentException	$ > 1
2483	204	4	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2483	204	4	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
33134	227	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
33135	233	6	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
2484	235	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2484	235	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2485	240	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2486	242	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance == null
33136	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
33136	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
33136	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
33137	247	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
33137	247	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
33137	247	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
33138	259	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
33138	259	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
33139	261	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
33139	261	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
33139	261	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
33140	263	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
33140	263	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
33141	274	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
33141	274	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
33141	274	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
33142	276	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
33142	276	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2487	284	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
2488	300	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.isLastStep
2489	305	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2490	320	10	EmbeddedRungeKuttaIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
2249	199	12	EmpiricalDistributionImpl.java	load	THIS	EmpiricalDistributionImpl	0	DEF	$.sampleStats.getN() == 0
2250	390	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	DEF	$.binStats.isEmpty()
32992	393	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
32992	393	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
32993	407	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount-1
32993	407	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
2251	434	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	DEF	$.loaded
32994	442	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
32994	442	8	EmpiricalDistributionImpl.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
2252	443	11	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	RET	x <= $.upperBounds[i]
2252	443	11	EmpiricalDistributionImpl.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
2252	443	11	EmpiricalDistributionImpl.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
2253	445	15	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
2254	446	19	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
32995	506	8	EmpiricalDistributionImpl.java	getUpperBounds	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount - 1
32995	506	8	EmpiricalDistributionImpl.java	getUpperBounds	i	int	0	NIL-FOR	$ < binCount - 1
2354	67	8	Erf.java	erf	x	double	0	RET	FastMath.abs($) > 40
2355	98	8	Erf.java	erfc	x	double	0	RET	FastMath.abs($) > 40
2356	116	8	Erf.java	erf	x1	double	0	RET	$ > x2
2356	116	8	Erf.java	erf	x2	double	0	RET	x1 > $
32882	64	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
32882	64	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
32882	64	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
32883	68	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
32883	68	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
32883	68	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
2078	77	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
2079	81	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point.$.length != otherPoint.$.length
2079	81	8	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point.length != $.length
32884	84	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < $.point.$.length
32884	84	8	EuclideanIntegerPoint.java	equals	i	int	0	NIL-FOR	$ < point.length
2080	85	12	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point[i] != otherPoint[i]
2080	85	12	EuclideanIntegerPoint.java	equals	i	int	0	RET	point[$] != otherPoint[$]
2080	85	12	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point[i] != $[i]
32885	110	8	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < coordinates.$.length
32885	110	8	EuclideanIntegerPoint.java	toString	i	int	0	NIL-FOR	$ < coordinates.length
32885	110	8	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	NIL-FOR	i < $.length
2081	112	12	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	DEF	i < coordinates.$.length - 1
2081	112	12	EuclideanIntegerPoint.java	toString	i	int	0	DEF	$ < coordinates.length - 1
2081	112	12	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	DEF	i < $.length - 1
33176	84	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
33176	84	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2534	161	12	EventState.java	reinitializeBegin	THIS	EventState	0	DEF	$.g0 == 0
2535	206	12	EventState.java	evaluateStep	THIS	EventState	0	RET	FastMath.abs(dt) < $.convergence
2535	206	12	EventState.java	evaluateStep	dt	double	0	RET	FastMath.abs($) < convergence
33197	226	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
33197	226	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
2536	234	16	EventState.java	evaluateStep	THIS	EventState	1	RET	$.g0Positive ^ (gb >= 0)
2536	234	16	EventState.java	evaluateStep	gb	double	1	RET	g0Positive ^ ($ >= 0)
2537	242	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	$.solver instanceof BracketedUnivariateRealSolver<?>
2538	263	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Double.isNaN($.previousEventTime)
2538	263	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - ta) <= $.convergence
2538	263	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - $.previousEventTime) <= $.convergence
2538	263	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - ta) <= convergence
2538	263	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - previousEventTime) <= convergence
2538	263	20	EventState.java	evaluateStep	ta	double	1	DEF	FastMath.abs(root - $) <= convergence
2539	271	27	EventState.java	evaluateStep	THIS	EventState	1	RET	FastMath.abs($.previousEventTime - root) > $.convergence
2539	271	27	EventState.java	evaluateStep	THIS	EventState	1	RET	Double.isNaN($.previousEventTime)
2539	271	27	EventState.java	evaluateStep	root	double	1	RET	FastMath.abs(previousEventTime - $) > convergence
2540	325	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	FastMath.abs($.pendingEventTime - t) <= $.convergence
2540	325	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
2540	325	8	EventState.java	stepAccepted	t	double	1	DEF	FastMath.abs(pendingEventTime - $) <= convergence
2541	356	8	EventState.java	reset	THIS	EventState	0	RET	FastMath.abs($.pendingEventTime - t) <= $.convergence
2541	356	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
2541	356	8	EventState.java	reset	t	double	0	RET	FastMath.abs(pendingEventTime - $) <= convergence
2542	360	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.RESET_STATE
33042	153	8	ExceptionContext.java	buildMessage	i	int	0	NIL-FOR	$ < len
33042	153	8	ExceptionContext.java	buildMessage	len	int	0	NIL-FOR	i < $
2375	159	12	ExceptionContext.java	buildMessage	count	int	0	DEF	++$ < len
2375	159	12	ExceptionContext.java	buildMessage	len	int	0	DEF	++count < $
33043	205	8	ExceptionContext.java	serializeMessages	i	int	0	NIL-FOR	$ < len
33043	205	8	ExceptionContext.java	serializeMessages	len	int	0	NIL-FOR	i < $
33044	213	12	ExceptionContext.java	serializeMessages	j	int	0	NIL-FOR	$ < aLen
33044	213	12	ExceptionContext.java	serializeMessages	aLen	int	0	NIL-FOR	j < $
2376	214	16	ExceptionContext.java	serializeMessages	j	int	1	DEF	args[$] instanceof Serializable
2376	214	16	ExceptionContext.java	serializeMessages	args	Object[]	1	DEF	$[j] instanceof Serializable
33045	240	8	ExceptionContext.java	deSerializeMessages	i	int	0	NIL-FOR	$ < len
33045	240	8	ExceptionContext.java	deSerializeMessages	len	int	0	NIL-FOR	i < $
33046	247	12	ExceptionContext.java	deSerializeMessages	j	int	0	NIL-FOR	$ < aLen
33046	247	12	ExceptionContext.java	deSerializeMessages	aLen	int	0	NIL-FOR	j < $
2377	270	12	ExceptionContext.java	serializeContext	value	Object	1	DEF	$ instanceof Serializable
33047	293	8	ExceptionContext.java	deSerializeContext	i	int	0	NIL-FOR	$ < len
33047	293	8	ExceptionContext.java	deSerializeContext	len	int	0	NIL-FOR	i < $
1045	65	8	ExponentialDistributionImpl.java	ExponentialDistributionImpl	mean	double	0	NotStrictlyPositiveException	$ <= 0
1046	84	8	ExponentialDistributionImpl.java	density	x	double	0	RET	$ < 0
1047	107	8	ExponentialDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
1048	131	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
1048	131	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
1049	133	15	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
1050	183	8	ExponentialDistributionImpl.java	getDomainUpperBound	p	double	1	RET	$ < 0.5
1051	205	8	ExponentialDistributionImpl.java	getInitialDomain	p	double	1	RET	$ < 0.5
980	79	8	FDistributionImpl.java	FDistributionImpl	numeratorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
981	83	8	FDistributionImpl.java	FDistributionImpl	denominatorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
982	131	8	FDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0
983	159	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
984	162	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
985	206	8	FDistributionImpl.java	getInitialDomain	d	double	0	DEF	$ > 2
986	280	8	FDistributionImpl.java	calculateNumericalMean	denominatorDF	double	0	RET	$ > 2
987	307	8	FDistributionImpl.java	calculateNumericalVariance	denominatorDF	double	0	RET	$ > 4
2378	224	8	FastCosineTransformer.java	fct	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
2379	229	8	FastCosineTransformer.java	fct	n	int	0	RET	$ == 1
33048	240	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
33048	240	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
33049	254	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
33049	254	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
2384	306	8	FastFourierTransformer.java	fft	THIS	FastFourierTransformer	0	RET	f.$.length == 1
2384	306	8	FastFourierTransformer.java	fft	f	double	0	RET	$.length == 1
33058	315	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
33059	325	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
2385	354	8	FastFourierTransformer.java	fft	n	int	0	RET	$ == 1
2386	358	8	FastFourierTransformer.java	fft	n	int	0	RET	$ == 2
33060	366	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < n
33060	366	8	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	i < $
33061	369	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	$ > 0
33061	369	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	ii >= $
33061	369	12	FastFourierTransformer.java	fft	ii	int	0	NIL-WHILE	$ >= k
33062	376	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < n
33062	376	8	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	i < $
33063	391	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < n
33063	391	8	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	i < $
33064	393	12	FastFourierTransformer.java	fft	j	int	0	NIL-FOR	$ < n
33064	393	12	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	j < $
33065	394	16	FastFourierTransformer.java	fft	k	int	0	NIL-FOR	$ < i
33065	394	16	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	k < $
2387	433	8	FastFourierTransformer.java	sample	n	int	0	DEF	$ <= 0
33066	442	8	FastFourierTransformer.java	sample	i	int	0	NIL-FOR	$ < n
33066	442	8	FastFourierTransformer.java	sample	n	int	0	NIL-FOR	i < $
33067	457	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
33067	457	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
33067	457	8	FastFourierTransformer.java	scaleArray	f	double	0	NIL-FOR	i < $.length
33068	472	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
33068	472	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
33068	472	8	FastFourierTransformer.java	scaleArray	f	Complex	0	NIL-FOR	i < $.length
2388	495	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(d.$.length)
2388	495	8	FastFourierTransformer.java	verifyDataSet	d	double	0	DEF	isPowerOf2($.length)
2389	508	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(o.$.length)
2389	508	8	FastFourierTransformer.java	verifyDataSet	o	Object	0	DEF	isPowerOf2($.length)
2390	524	8	FastFourierTransformer.java	verifyInterval	lower	double	0	DEF	$ >= upper
2390	524	8	FastFourierTransformer.java	verifyInterval	upper	double	0	DEF	lower >= $
33069	551	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
33069	551	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
33069	551	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
2391	571	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
2391	571	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
2391	571	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
33070	573	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
33070	573	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
33070	573	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
2392	579	12	FastFourierTransformer.java	mdfft	forward	boolean	1	DEF	$
33071	585	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
33071	585	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
33071	585	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
2393	592	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
2393	592	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
2393	592	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
33072	598	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
33072	598	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
33072	598	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
33072	598	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
2380	162	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
33050	174	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
33050	174	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
33051	182	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
33051	182	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
33052	188	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
33052	188	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
2381	213	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
33053	225	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
33053	225	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
33054	233	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
33054	233	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
33055	239	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
33055	239	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
86	288	8	FastMath.java	doubleHighPart	d	double	0	RET	$ > -MathUtils.SAFE_MIN
86	288	8	FastMath.java	doubleHighPart	d	double	0	RET	$ < MathUtils.SAFE_MIN
87	310	6	FastMath.java	cosh	x	double	0	RET	$ != $
88	314	6	FastMath.java	cosh	x	double	0	RET	$ > 20.0
89	318	6	FastMath.java	cosh	x	double	0	RET	$ < -20
90	323	6	FastMath.java	cosh	x	double	0	DEF	$ < 0.0
91	365	6	FastMath.java	sinh	x	double	0	RET	$ != $
92	369	6	FastMath.java	sinh	x	double	0	RET	$ > 20.0
93	373	6	FastMath.java	sinh	x	double	0	RET	$ < -20
94	377	6	FastMath.java	sinh	x	double	0	RET	$ == 0
95	381	6	FastMath.java	sinh	x	double	0	DEF	$ < 0.0
96	388	6	FastMath.java	sinh	x	double	1	DEF	$ > 0.25
97	462	6	FastMath.java	sinh	negate	boolean	0	DEF	$
98	476	6	FastMath.java	tanh	x	double	0	RET	$ != $
99	480	6	FastMath.java	tanh	x	double	0	RET	$ > 20.0
100	484	6	FastMath.java	tanh	x	double	0	RET	$ < -20
101	488	6	FastMath.java	tanh	x	double	0	RET	$ == 0
102	492	6	FastMath.java	tanh	x	double	0	DEF	$ < 0.0
103	498	6	FastMath.java	tanh	x	double	1	DEF	$ >= 0.5
104	580	6	FastMath.java	tanh	negate	boolean	0	DEF	$
105	602	8	FastMath.java	asinh	a	double	0	DEF	$ < 0
106	608	8	FastMath.java	asinh	a	double	1	DEF	$ > 0.167
107	612	12	FastMath.java	asinh	a	double	1	DEF	$ > 0.097
108	614	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.036
109	616	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.0036
110	634	8	FastMath.java	atanh	a	double	0	DEF	$ < 0
111	640	8	FastMath.java	atanh	a	double	1	DEF	$ > 0.15
112	644	12	FastMath.java	atanh	a	double	1	DEF	$ > 0.087
113	646	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.031
114	648	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.003
115	741	8	FastMath.java	exp	x	double	1	RET	$ < 0.0
116	744	12	FastMath.java	exp	intVal	int	0	RET	$ > 746
117	745	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
118	752	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
119	755	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
120	762	12	FastMath.java	exp	intVal	int	0	RET	$ == 709
121	765	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
122	781	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
123	782	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
124	834	8	FastMath.java	exp	extra	double	1	DEF	$ != 0.0
125	840	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
126	863	8	FastMath.java	expm1	x	double	0	RET	$ == 0.0
126	863	8	FastMath.java	expm1	x	double	0	RET	$ != $
127	867	8	FastMath.java	expm1	x	double	0	RET	$ <= -1.0
127	867	8	FastMath.java	expm1	x	double	0	RET	$ >= 1.0
128	872	12	FastMath.java	expm1	x	double	1	RET	$ > 0.0
129	887	8	FastMath.java	expm1	x	double	0	DEF	$ < 0.0
130	963	8	FastMath.java	expm1	negative	boolean	0	DEF	$
131	996	8	FastMath.java	expm1	hiPrecOut	double	0	DEF	$ != null
31661	1019	8	FastMath.java	slowexp	i	int	0	NIL-FOR	$ >= 0
132	1032	8	FastMath.java	slowexp	result	double	0	DEF	$ != null
133	1046	8	FastMath.java	split	d	double	1	DEF	$ > -8e298
133	1046	8	FastMath.java	split	d	double	1	DEF	$ < 8e298
134	1065	8	FastMath.java	resplit	c	double	1	DEF	$ > -8e298
134	1065	8	FastMath.java	resplit	c	double	1	DEF	$ < 8e298
135	1123	8	FastMath.java	splitReciprocal	in	double	0	DEF	$[0] == 0.0
136	1131	8	FastMath.java	splitReciprocal	result	double	0	DEF	$[1] != $[1]
31662	1138	8	FastMath.java	splitReciprocal	i	int	0	NIL-FOR	$ < 2
31663	1226	8	FastMath.java	expint	p	int	0	NIL-WHILE	$ > 0
137	1227	12	FastMath.java	expint	p	int	0	DEF	($ & 1) != 0
138	1238	8	FastMath.java	expint	result	double	0	DEF	$ != null
139	1266	8	FastMath.java	log	x	double	0	RET	$==0
140	1272	8	FastMath.java	log	bits	long	0	RET	($ & 0x8000000000000000L) != 0
140	1272	8	FastMath.java	log	x	double	0	RET	$ != $
141	1273	12	FastMath.java	log	x	double	0	RET	$ != 0.0
142	1274	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
143	1283	8	FastMath.java	log	x	double	0	RET	$ == Double.POSITIVE_INFINITY
144	1284	12	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
145	1294	8	FastMath.java	log	bits	long	0	RET	($ & 0x7ff0000000000000L) == 0
146	1296	12	FastMath.java	log	x	double	0	RET	$ == 0
147	1298	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
31664	1307	12	FastMath.java	log	bits	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
148	1314	8	FastMath.java	log	exp	int	0	RET	$ == -1
148	1314	8	FastMath.java	log	exp	int	0	RET	$ == 0
149	1315	12	FastMath.java	log	x	double	0	RET	$ > 0.99
149	1315	12	FastMath.java	log	x	double	0	RET	$ < 1.01
149	1315	12	FastMath.java	log	hiPrec	double[]	0	RET	$ == null
31665	1331	16	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
150	1378	8	FastMath.java	log	hiPrec	double[]	1	DEF	$ != null
31666	1396	12	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
151	1479	8	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
152	1493	8	FastMath.java	log1p	x	double	0	RET	$ == -1
153	1497	8	FastMath.java	log1p	x	double	0	RET	$ > 0
153	1497	8	FastMath.java	log1p	x	double	0	RET	1/$ == 0
154	1501	8	FastMath.java	log1p	x	double	0	RET	$<-1e-6
154	1501	8	FastMath.java	log1p	x	double	0	RET	$>1e-6
155	1508	12	FastMath.java	log1p	lores	double	0	RET	Double.isInfinite($)
156	1538	8	FastMath.java	log10	lores	double	0	RET	Double.isInfinite($)
157	1562	8	FastMath.java	pow	y	double	0	RET	$ == 0.0
158	1566	8	FastMath.java	pow	x	double	0	RET	$ != $
159	1571	8	FastMath.java	pow	x	double	0	RET	$ == 0
160	1573	12	FastMath.java	pow	bits	long	0	RET	($ & 0x8000000000000000L) != 0
161	1577	16	FastMath.java	pow	yi	long	0	RET	y == $
161	1577	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
161	1577	16	FastMath.java	pow	y	double	0	RET	$ == yi
161	1577	16	FastMath.java	pow	y	double	0	RET	$ < 0
162	1581	16	FastMath.java	pow	yi	long	0	RET	y == $
162	1581	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
162	1581	16	FastMath.java	pow	y	double	0	RET	$ < 0
162	1581	16	FastMath.java	pow	y	double	0	RET	$ == yi
163	1585	16	FastMath.java	pow	yi	long	0	RET	y == $
163	1585	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
163	1585	16	FastMath.java	pow	y	double	0	RET	$ == yi
163	1585	16	FastMath.java	pow	y	double	0	RET	$ > 0
164	1590	12	FastMath.java	pow	y	double	0	RET	$ < 0
165	1593	12	FastMath.java	pow	y	double	0	RET	$ > 0
166	1600	8	FastMath.java	pow	x	double	0	RET	$ == Double.POSITIVE_INFINITY
167	1601	12	FastMath.java	pow	y	double	0	RET	$ != $
168	1604	12	FastMath.java	pow	y	double	1	RET	$ < 0.0
169	1611	8	FastMath.java	pow	y	double	0	RET	$ == Double.POSITIVE_INFINITY
170	1612	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
171	1616	12	FastMath.java	pow	x	double	1	RET	$ * $ > 1.0
172	1623	8	FastMath.java	pow	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
173	1624	12	FastMath.java	pow	y	double	0	RET	$ != $
174	1628	12	FastMath.java	pow	y	double	0	RET	$ < 0
175	1630	16	FastMath.java	pow	yi	long	0	RET	y == $
175	1630	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
175	1630	16	FastMath.java	pow	y	double	0	RET	$ == yi
176	1637	12	FastMath.java	pow	y	double	0	RET	$ > 0
177	1639	16	FastMath.java	pow	yi	long	0	RET	y == $
177	1639	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
177	1639	16	FastMath.java	pow	y	double	0	RET	$ == yi
178	1647	8	FastMath.java	pow	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
179	1649	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
180	1653	12	FastMath.java	pow	x	double	1	RET	$ * $ < 1.0
181	1661	8	FastMath.java	pow	x	double	0	RET	$ < 0
182	1663	12	FastMath.java	pow	THIS	FastMath	0	RET	y <= -$.TWO_POWER_52
182	1663	12	FastMath.java	pow	THIS	FastMath	0	RET	y >= $.TWO_POWER_52
182	1663	12	FastMath.java	pow	y	double	0	RET	$ <= -TWO_POWER_52
182	1663	12	FastMath.java	pow	y	double	0	RET	$ >= TWO_POWER_52
183	1667	12	FastMath.java	pow	y	double	1	RET	$ == (long) $
184	1678	8	FastMath.java	pow	y	double	1	DEF	$ < 8e298
184	1678	8	FastMath.java	pow	y	double	1	DEF	$ > -8e298
185	1691	8	FastMath.java	pow	lores	double	0	RET	Double.isInfinite($)
31667	1770	8	FastMath.java	slowLog	i	int	0	NIL-FOR	$ >= 0
31668	1800	8	FastMath.java	slowSin	i	int	0	NIL-FOR	$ >= 0
186	1804	12	FastMath.java	slowSin	i	int	0	DEF	($ & 1) == 0
187	1811	12	FastMath.java	slowSin	i	int	0	DEF	($ & 2) != 0
188	1820	8	FastMath.java	slowSin	result	double	0	DEF	$ != null
31669	1843	8	FastMath.java	slowCos	i	int	0	NIL-FOR	$ >= 0
189	1847	12	FastMath.java	slowCos	i	int	0	DEF	($ & 1) != 0
190	1854	12	FastMath.java	slowCos	i	int	0	DEF	($ & 2) != 0
191	1863	8	FastMath.java	slowCos	result	double	0	DEF	$ != null
31670	1877	8	FastMath.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 7
31671	1890	8	FastMath.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 14
192	1897	12	FastMath.java	buildSinCosTables	i	int	1	DEF	($ & 1) == 0
31672	1946	8	FastMath.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 14
193	2116	8	FastMath.java	sinQ	xb	double	0	DEF	$ != 0.0
194	2246	8	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
195	2279	8	FastMath.java	tanQ	xb	double	0	DEF	$ != 0.0
196	2283	12	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
197	2325	8	FastMath.java	reducePayneHanek	shift	int	1	DEF	$ != 0
198	2356	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
198	2356	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
198	2356	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
198	2356	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
198	2356	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
199	2370	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
199	2370	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
199	2370	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
199	2370	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
199	2370	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
200	2390	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
200	2390	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
200	2390	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
200	2390	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
200	2390	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
201	2442	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
201	2442	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
201	2442	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
201	2442	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
201	2442	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
202	2456	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
202	2456	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
202	2456	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
202	2456	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
202	2456	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
203	2476	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
203	2476	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
203	2476	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
203	2476	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
203	2476	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
204	2498	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
204	2498	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
204	2498	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
204	2498	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
204	2498	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
205	2529	8	FastMath.java	sin	x	double	0	DEF	$ < 0
206	2535	8	FastMath.java	sin	xa	double	0	RET	$ == 0.0
207	2537	12	FastMath.java	sin	bits	long	0	RET	$ < 0
208	2543	8	FastMath.java	sin	xa	double	0	RET	$ != $
208	2543	8	FastMath.java	sin	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
209	2548	8	FastMath.java	sin	xa	double	1	DEF	$ > 3294198.0
210	2557	15	FastMath.java	sin	xa	double	0	DEF	$ > 1.5707963267948966
211	2582	16	FastMath.java	sin	remA	double	0	DEF	$ > 0.0
212	2596	8	FastMath.java	sin	negative	boolean	0	DEF	$
213	2624	8	FastMath.java	cos	x	double	0	DEF	$ < 0
214	2628	8	FastMath.java	cos	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
214	2628	8	FastMath.java	cos	xa	double	0	RET	$ != $
215	2634	8	FastMath.java	cos	xa	double	1	DEF	$ > 3294198.0
216	2643	15	FastMath.java	cos	xa	double	0	DEF	$ > 1.5707963267948966
217	2668	16	FastMath.java	cos	remA	double	0	DEF	$ > 0.0
218	2710	8	FastMath.java	tan	x	double	0	DEF	$ < 0
219	2716	8	FastMath.java	tan	xa	double	0	RET	$ == 0.0
220	2718	12	FastMath.java	tan	bits	long	0	RET	$ < 0
221	2724	8	FastMath.java	tan	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
221	2724	8	FastMath.java	tan	xa	double	0	RET	$ != $
222	2730	8	FastMath.java	tan	xa	double	1	DEF	$ > 3294198.0
223	2739	15	FastMath.java	tan	xa	double	0	DEF	$ > 1.5707963267948966
224	2764	16	FastMath.java	tan	remA	double	0	DEF	$ > 0.0
225	2778	8	FastMath.java	tan	xa	double	0	DEF	$ > 1.5
226	2794	8	FastMath.java	tan	quadrant	int	1	DEF	($ & 1) == 0
227	2800	8	FastMath.java	tan	negative	boolean	0	DEF	$
228	2826	8	FastMath.java	atan	xa	double	0	RET	$ == 0.0
229	2830	8	FastMath.java	atan	xa	double	0	DEF	$ < 0
230	2837	8	FastMath.java	atan	xa	double	0	RET	$ > 1.633123935319537E16
231	2842	8	FastMath.java	atan	xa	double	1	DEF	$ < 1.0
232	2864	8	FastMath.java	atan	idx	int	1	DEF	$ == 0
233	2945	8	FastMath.java	atan	leftPlane	boolean	0	DEF	$
234	2959	8	FastMath.java	atan	negate	boolean	0	DEF	$ ^ leftPlane
234	2959	8	FastMath.java	atan	leftPlane	boolean	0	DEF	negate ^ $
235	2973	8	FastMath.java	atan2	y	double	0	RET	$ != $
235	2973	8	FastMath.java	atan2	x	double	0	RET	$ !=$
236	2977	8	FastMath.java	atan2	y	double	0	RET	$ == 0.0
237	2982	12	FastMath.java	atan2	invx	double	0	RET	$ == 0.0
238	2983	16	FastMath.java	atan2	x	double	1	RET	$ > 0
239	2990	12	FastMath.java	atan2	invx	double	1	RET	$ < 0.0
239	2990	12	FastMath.java	atan2	x	double	1	RET	$ < 0.0
240	2991	16	FastMath.java	atan2	invy	double	1	RET	$ < 0.0
240	2991	16	FastMath.java	atan2	y	double	1	RET	$ < 0.0
241	3003	8	FastMath.java	atan2	y	double	0	RET	$ == Double.POSITIVE_INFINITY
242	3004	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
243	3008	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
244	3015	8	FastMath.java	atan2	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
245	3016	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
246	3020	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
247	3027	8	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
248	3028	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
248	3028	12	FastMath.java	atan2	y	double	0	RET	1/$ > 0.0
249	3032	12	FastMath.java	atan2	y	double	0	RET	1/$ < 0.0
249	3032	12	FastMath.java	atan2	y	double	0	RET	$ < 0.0
250	3037	8	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
251	3039	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
251	3039	12	FastMath.java	atan2	y	double	0	RET	1/$ > 0.0
252	3043	12	FastMath.java	atan2	y	double	0	RET	$ < 0.0
252	3043	12	FastMath.java	atan2	y	double	0	RET	1/$ < 0.0
253	3050	8	FastMath.java	atan2	x	double	0	RET	$ == 0
254	3051	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
254	3051	12	FastMath.java	atan2	y	double	0	RET	1/$ > 0.0
255	3055	12	FastMath.java	atan2	y	double	0	RET	$ < 0.0
255	3055	12	FastMath.java	atan2	y	double	0	RET	1/$ < 0.0
256	3062	8	FastMath.java	atan2	r	double	0	RET	Double.isInfinite($)
257	3079	8	FastMath.java	atan2	ra	double	0	DEF	$ == 0
258	3094	6	FastMath.java	asin	x	double	0	RET	$ != $
259	3098	6	FastMath.java	asin	x	double	0	RET	$ > 1.0
259	3098	6	FastMath.java	asin	x	double	0	RET	$ < -1.0
260	3102	6	FastMath.java	asin	x	double	0	RET	$ == 1.0
261	3106	6	FastMath.java	asin	x	double	0	RET	$ == -1.0
262	3110	6	FastMath.java	asin	x	double	0	RET	$ == 0.0
263	3170	6	FastMath.java	acos	x	double	0	RET	$ != $
264	3174	6	FastMath.java	acos	x	double	0	RET	$ < -1.0
264	3174	6	FastMath.java	acos	x	double	0	RET	$ > 1.0
265	3178	6	FastMath.java	acos	x	double	0	RET	$ == -1.0
266	3182	6	FastMath.java	acos	x	double	0	RET	$ == 1.0
267	3186	6	FastMath.java	acos	x	double	0	RET	$ == 0
268	3230	6	FastMath.java	acos	r	double	0	RET	Double.isInfinite($)
269	3257	6	FastMath.java	cbrt	exponent	int	0	RET	$ == -1023
270	3258	10	FastMath.java	cbrt	x	double	0	RET	$ == 0
271	3269	6	FastMath.java	cbrt	exponent	int	0	RET	$ == 1024
272	3324	6	FastMath.java	cbrt	subnormal	boolean	0	DEF	$
273	3338	8	FastMath.java	toRadians	x	double	0	RET	Double.isInfinite($)
273	3338	8	FastMath.java	toRadians	x	double	0	RET	$ == 0.0
274	3350	8	FastMath.java	toRadians	result	double	0	DEF	$ == 0
275	3363	8	FastMath.java	toDegrees	x	double	0	RET	Double.isInfinite($)
275	3363	8	FastMath.java	toDegrees	x	double	0	RET	$ == 0.0
276	3419	8	FastMath.java	ulp	x	double	0	RET	Double.isInfinite($)
277	3431	8	FastMath.java	ulp	x	float	0	RET	Float.isInfinite($)
278	3446	8	FastMath.java	scalb	n	int	0	RET	$ > -1023
278	3446	8	FastMath.java	scalb	n	int	0	RET	$ < 1024
279	3451	8	FastMath.java	scalb	d	double	0	RET	Double.isNaN($)
279	3451	8	FastMath.java	scalb	d	double	0	RET	$ == 0
279	3451	8	FastMath.java	scalb	d	double	0	RET	Double.isInfinite($)
280	3454	8	FastMath.java	scalb	n	int	0	RET	$ < -2098
281	3457	8	FastMath.java	scalb	n	int	0	RET	$ > 2097
282	3470	8	FastMath.java	scalb	n	int	1	RET	$ < 0
283	3472	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
284	3475	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -53
285	3484	16	FastMath.java	scalb	mostSignificantLostBit	long	0	DEF	$ != 0
286	3496	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
31673	3499	16	FastMath.java	scalb	mantissa	long	0	NIL-WHILE	($ >>> 52) != 1
287	3506	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
288	3512	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
289	3530	8	FastMath.java	scalb	n	int	0	RET	$ < 128
289	3530	8	FastMath.java	scalb	n	int	0	RET	$ > -127
290	3535	8	FastMath.java	scalb	f	float	0	RET	$ == 0f
290	3535	8	FastMath.java	scalb	f	float	0	RET	Float.isNaN($)
290	3535	8	FastMath.java	scalb	f	float	0	RET	Float.isInfinite($)
291	3538	8	FastMath.java	scalb	n	int	0	RET	$ < -277
292	3541	8	FastMath.java	scalb	n	int	0	RET	$ > 276
293	3554	8	FastMath.java	scalb	n	int	1	RET	$ < 0
294	3556	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
295	3559	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -24
296	3568	16	FastMath.java	scalb	mostSignificantLostBit	int	0	DEF	$ != 0
297	3580	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
31674	3583	16	FastMath.java	scalb	mantissa	int	0	NIL-WHILE	($ >>> 23) != 1
298	3590	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
299	3596	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
300	3639	8	FastMath.java	nextAfter	d	double	1	RET	Double.isNaN($)
300	3639	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
301	3641	15	FastMath.java	nextAfter	d	double	1	RET	$ == direction
301	3641	15	FastMath.java	nextAfter	direction	double	1	RET	d == $
302	3643	15	FastMath.java	nextAfter	d	double	1	RET	Double.isInfinite($)
303	3645	15	FastMath.java	nextAfter	d	double	0	RET	$ == 0
304	3653	8	FastMath.java	nextAfter	sign	long	1	RET	(direction < d) ^ ($ == 0L)
304	3653	8	FastMath.java	nextAfter	d	double	1	RET	(direction < $) ^ (sign == 0L)
304	3653	8	FastMath.java	nextAfter	direction	double	1	RET	($ < d) ^ (sign == 0L)
305	3695	8	FastMath.java	nextAfter	f	float	1	RET	Double.isNaN($)
305	3695	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
306	3697	15	FastMath.java	nextAfter	f	float	1	RET	$ == direction
306	3697	15	FastMath.java	nextAfter	direction	double	1	RET	f == $
307	3699	15	FastMath.java	nextAfter	f	float	1	RET	Float.isInfinite($)
308	3701	15	FastMath.java	nextAfter	f	float	0	RET	$ == 0f
309	3709	8	FastMath.java	nextAfter	sign	int	1	RET	(direction < f) ^ ($ == 0)
309	3709	8	FastMath.java	nextAfter	f	float	1	RET	(direction < $) ^ (sign == 0)
309	3709	8	FastMath.java	nextAfter	direction	double	1	RET	($ < f) ^ (sign == 0)
310	3724	8	FastMath.java	floor	x	double	0	RET	$ != $
311	3728	8	FastMath.java	floor	THIS	FastMath	0	RET	x <= -$.TWO_POWER_52
311	3728	8	FastMath.java	floor	THIS	FastMath	0	RET	x >= $.TWO_POWER_52
311	3728	8	FastMath.java	floor	x	double	0	RET	$ <= -TWO_POWER_52
311	3728	8	FastMath.java	floor	x	double	0	RET	$ >= TWO_POWER_52
312	3733	8	FastMath.java	floor	y	long	0	DEF	$ != x
312	3733	8	FastMath.java	floor	x	double	0	DEF	$ < 0
312	3733	8	FastMath.java	floor	x	double	0	DEF	y != $
313	3737	8	FastMath.java	floor	y	long	0	RET	$ == 0
314	3751	8	FastMath.java	ceil	x	double	0	RET	$ != $
315	3756	8	FastMath.java	ceil	y	double	0	RET	$ == x
315	3756	8	FastMath.java	ceil	x	double	0	RET	y == $
316	3762	8	FastMath.java	ceil	y	double	0	RET	$ == 0
317	3777	8	FastMath.java	rint	d	double	0	RET	$ > 0.5
318	3778	12	FastMath.java	rint	y	double	0	RET	$ == -1.0
319	3783	8	FastMath.java	rint	d	double	0	RET	$ < 0.5
320	3832	8	FastMath.java	min	a	float	0	RET	$ > b
320	3832	8	FastMath.java	min	b	float	0	RET	a > $
321	3835	8	FastMath.java	min	a	float	0	RET	$ < b
321	3835	8	FastMath.java	min	b	float	0	RET	a < $
322	3839	8	FastMath.java	min	a	float	0	RET	$ != b
322	3839	8	FastMath.java	min	b	float	0	RET	a != $
323	3845	8	FastMath.java	min	bits	int	0	RET	$ == 0x80000000
324	3857	8	FastMath.java	min	a	double	0	RET	$ > b
324	3857	8	FastMath.java	min	b	double	0	RET	a > $
325	3860	8	FastMath.java	min	a	double	0	RET	$ < b
325	3860	8	FastMath.java	min	b	double	0	RET	a < $
326	3864	8	FastMath.java	min	a	double	0	RET	$ != b
326	3864	8	FastMath.java	min	b	double	0	RET	a != $
327	3870	8	FastMath.java	min	bits	long	0	RET	$ == 0x8000000000000000L
328	3900	8	FastMath.java	max	a	float	0	RET	$ > b
328	3900	8	FastMath.java	max	b	float	0	RET	a > $
329	3903	8	FastMath.java	max	a	float	0	RET	$ < b
329	3903	8	FastMath.java	max	b	float	0	RET	a < $
330	3907	8	FastMath.java	max	a	float	0	RET	$ != b
330	3907	8	FastMath.java	max	b	float	0	RET	a != $
331	3913	8	FastMath.java	max	bits	int	0	RET	$ == 0x80000000
332	3925	8	FastMath.java	max	a	double	0	RET	$ > b
332	3925	8	FastMath.java	max	b	double	0	RET	a > $
333	3928	8	FastMath.java	max	a	double	0	RET	$ < b
333	3928	8	FastMath.java	max	b	double	0	RET	a < $
334	3932	8	FastMath.java	max	a	double	0	RET	$ != b
334	3932	8	FastMath.java	max	b	double	0	RET	a != $
335	3938	8	FastMath.java	max	bits	long	0	RET	$ == 0x8000000000000000L
336	3959	8	FastMath.java	hypot	x	double	1	RET	Double.isInfinite($)
336	3959	8	FastMath.java	hypot	y	double	1	RET	Double.isInfinite($)
337	3961	15	FastMath.java	hypot	x	double	1	RET	Double.isNaN($)
337	3961	15	FastMath.java	hypot	y	double	1	RET	Double.isNaN($)
338	3967	12	FastMath.java	hypot	expX	int	1	RET	$ > expY + 27
338	3967	12	FastMath.java	hypot	expY	int	1	RET	expX > $ + 27
339	3970	19	FastMath.java	hypot	expX	int	1	RET	expY > $ + 27
339	3970	19	FastMath.java	hypot	expY	int	1	RET	$ > expX + 27
340	4028	8	FastMath.java	copySign	m	long	0	RET	$ >= 0
340	4028	8	FastMath.java	copySign	m	long	0	RET	$ < 0
340	4028	8	FastMath.java	copySign	s	long	0	RET	$ < 0
340	4028	8	FastMath.java	copySign	s	long	0	RET	$ >= 0
341	4045	8	FastMath.java	copySign	m	int	0	RET	$ >= 0
341	4045	8	FastMath.java	copySign	m	int	0	RET	$ < 0
341	4045	8	FastMath.java	copySign	s	int	0	RET	$ >= 0
341	4045	8	FastMath.java	copySign	s	int	0	RET	$ < 0
2382	218	8	FastSineTransformer.java	fst	f	double	0	DEF	$[0] != 0.0
2383	224	8	FastSineTransformer.java	fst	n	int	0	RET	$ == 1
33056	233	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
33056	233	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
33057	245	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
33057	245	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
1115	72	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
31938	86	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
31938	86	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
31939	93	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	$ < m
31939	93	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	col < $
31940	98	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < col
31940	98	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	row < $
31941	101	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < row
31941	101	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	i < $
31942	109	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
31942	109	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
31943	112	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < col
31943	112	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	i < $
1116	117	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	THIS	FieldLUDecompositionImpl	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
1116	117	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
1116	117	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
1117	124	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	RET	$ >= m
1117	124	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	RET	nonZero >= $
1118	130	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	DEF	$ != col
1118	130	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	DEF	nonZero != $
31944	132	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < m
31944	132	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	i < $
31945	145	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
31945	145	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
1119	155	8	FieldLUDecompositionImpl.java	getL	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedL == null
1119	155	8	FieldLUDecompositionImpl.java	getL	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
31946	158	12	FieldLUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
31946	158	12	FieldLUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
31947	160	16	FieldLUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
31947	160	16	FieldLUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
1120	171	8	FieldLUDecompositionImpl.java	getU	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedU == null
1120	171	8	FieldLUDecompositionImpl.java	getU	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
31948	174	12	FieldLUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
31948	174	12	FieldLUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
31949	176	16	FieldLUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
31949	176	16	FieldLUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
1121	186	8	FieldLUDecompositionImpl.java	getP	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedP == null
1121	186	8	FieldLUDecompositionImpl.java	getP	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
31950	189	12	FieldLUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
31950	189	12	FieldLUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
1122	203	8	FieldLUDecompositionImpl.java	getDeterminant	THIS	FieldLUDecompositionImpl	1	RET	$.singular
31951	208	12	FieldLUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
31951	208	12	FieldLUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
1924	102	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
2337	42	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	IllegalArgumentException	$ <= 0
2338	57	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
1902	88	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
886	181	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	a0 > $
886	181	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	$ > overflow
887	187	8	Fraction.java	Fraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
887	187	8	Fraction.java	Fraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
887	187	8	Fraction.java	Fraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
31754	203	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
888	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	q2 > $
888	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	p2 > $
888	209	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	$ > overflow
888	209	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	$ > overflow
889	214	12	Fraction.java	Fraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
889	214	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
889	214	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
889	214	12	Fraction.java	Fraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
889	214	12	Fraction.java	Fraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
889	214	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
889	214	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
890	226	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
890	226	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
891	230	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
891	230	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
892	257	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == 0
893	261	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ < 0
894	262	12	Fraction.java	Fraction	num	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
894	262	12	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
895	272	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
896	278	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
897	292	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
898	333	8	Fraction.java	equals	THIS	Fraction	0	RET	$ == other
898	333	8	Fraction.java	equals	other	Object	0	RET	this == $
899	336	8	Fraction.java	equals	other	Object	0	RET	$ instanceof Fraction
900	406	8	Fraction.java	negate	THIS	Fraction	0	MathArithmeticException	$.numerator==Integer.MIN_VALUE
901	477	8	Fraction.java	addSub	fraction	Fraction	0	NullArgumentException	$ == null
902	481	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
903	484	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
903	484	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
904	490	8	Fraction.java	addSub	d1	int	0	RET	$==1
905	514	8	Fraction.java	addSub	w	BigInteger	0	MathArithmeticException	$.bitLength() > 31
906	534	8	Fraction.java	multiply	fraction	Fraction	0	NullArgumentException	$ == null
907	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
907	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
907	537	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
908	569	8	Fraction.java	divide	fraction	Fraction	0	NullArgumentException	$ == null
909	572	8	Fraction.java	divide	THIS	Fraction	0	MathArithmeticException	fraction.$.numerator == 0
909	572	8	Fraction.java	divide	fraction	Fraction	0	MathArithmeticException	$.numerator == 0
910	600	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ == 0
911	604	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
912	608	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
912	608	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
913	611	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ < 0
914	612	12	Fraction.java	getReducedFraction	numerator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
914	612	12	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
915	639	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
916	641	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
870	176	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
871	178	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
872	206	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
873	230	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
874	263	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
32918	86	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2105	112	8	Frequency.java	addValue	v	Comparable<?>	0	DEF	$ instanceof Integer
2106	117	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
32919	185	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
2107	199	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
2108	205	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
2109	265	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
2110	315	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
2111	318	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
2112	323	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
2113	330	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
2114	337	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
2114	337	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
2114	337	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
2115	341	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
2115	341	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
2115	341	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
32920	346	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2116	348	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
2116	348	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
2116	348	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
2117	408	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
2118	494	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
2118	494	8	Frequency.java	equals	obj	Object	0	RET	this == $
2119	497	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
2120	501	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
2121	502	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
2121	502	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
2122	505	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
2122	505	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
2127	80	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
2360	88	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
2360	88	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
33040	94	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ > 0
2361	153	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
2361	153	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
2361	153	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
2361	153	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
2362	155	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
2363	157	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x >= $ + 1
2363	157	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ >= a + 1
33041	166	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
33041	166	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	FastMath.abs($/sum) > epsilon
33041	166	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	$ < Double.POSITIVE_INFINITY
33041	166	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	FastMath.abs(an/$) > epsilon
33041	166	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	FastMath.abs(an/sum) > $
33041	166	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
2364	176	12	Gamma.java	regularizedGammaP	n	double	1	MaxCountExceededException	$ >= maxIterations
2364	176	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxCountExceededException	n >= $
2365	178	19	Gamma.java	regularizedGammaP	sum	double	1	DEF	Double.isInfinite($)
2366	231	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
2366	231	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
2366	231	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
2366	231	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
2367	233	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
2368	235	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $ + 1.0
2368	235	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a + 1.0
2369	283	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
2369	283	8	Gamma.java	digamma	x	double	0	RET	$ > 0
2370	289	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
2371	313	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
2371	313	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
2372	317	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
935	70	8	GammaDistributionImpl.java	GammaDistributionImpl	alpha	double	0	NotStrictlyPositiveException	$ <= 0
936	73	8	GammaDistributionImpl.java	GammaDistributionImpl	beta	double	0	NotStrictlyPositiveException	$ <= 0
937	104	8	GammaDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0
938	129	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
939	132	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
940	157	8	GammaDistributionImpl.java	density	x	double	0	RET	$ < 0
941	194	8	GammaDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < 0.5
942	220	8	GammaDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < 0.5
32604	106	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
32605	121	12	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.rows
32605	121	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < rows
32606	129	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	j < $.cols
32606	129	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
32607	134	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	k < $.cols
32607	134	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
32608	137	20	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	l < $.cols
32608	137	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < cols
32609	152	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.cols
32609	152	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < cols
1591	160	12	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<VectorialPointValuePair>	0	DEF	$ != null
1592	161	16	GaussNewtonOptimizer.java	doOptimize	previous	VectorialPointValuePair	0	DEF	$ != null
2981	54	8	Gaussian.java	Gaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
2332	69	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	IllegalArgumentException	$ < 0
2332	69	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	IllegalArgumentException	$ > 1
2333	72	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	IllegalArgumentException	$ > 1
2333	72	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	IllegalArgumentException	$ < 0
33028	113	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
33028	113	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
33029	147	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
2334	152	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
2334	152	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
2335	158	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
2335	158	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
2336	168	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
1922	111	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
1923	203	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	DEF	$.getN() > 0
33133	112	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
33133	112	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2422	226	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ > 0.9999
2422	226	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ < 0.0001
2423	261	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control1	double	1	DEF	$ > 0.9999
2423	261	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control1	double	1	DEF	$ < 0.0001
2424	267	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control2	double	1	DEF	$ > 0.9999
2424	267	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control2	double	1	DEF	$ < 0.0001
2425	273	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control3	double	1	DEF	$ > 0.9999
2425	273	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control3	double	1	DEF	$ < 0.0001
2426	279	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control4	double	1	DEF	$ > 999.9
2426	279	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control4	double	1	DEF	$ < 1.0001
2427	313	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ % 2 != 0
2427	313	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ <= 6
2428	317	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ > 0.9999
2428	317	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ < 0.0001
2429	323	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ < 0.0001
2429	323	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ > 0.9999
2430	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
2430	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
2430	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
33093	375	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
33093	375	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
33094	382	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
33094	382	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
33095	387	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
33095	387	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
33096	389	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
33096	389	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
2431	412	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ >= 7
2431	412	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ <= 0
2432	426	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
33097	427	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
33097	427	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
33097	427	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
33098	432	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
33098	432	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
33098	432	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
33099	468	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
33099	468	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
33099	468	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
33100	475	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
33100	475	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
2433	477	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
2433	477	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
33101	483	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
33101	483	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
33101	483	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
2434	492	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
2434	492	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
2434	492	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
2434	492	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
2434	492	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
33102	494	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
33102	494	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
33102	494	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
33103	499	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
33103	499	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
33103	499	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
2435	503	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * FastMath.max(1.0e-15, $)
2435	503	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * FastMath.max(1.0e-15, initialNorm)
33104	511	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
33104	511	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
33104	511	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
33105	530	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
33105	530	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
33106	531	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
33106	531	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
33106	531	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
33107	539	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
33107	539	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
33107	539	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
33108	564	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
33108	564	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
33109	570	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
33109	570	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
33110	577	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
33110	577	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
33110	577	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
2436	583	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2436	583	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
33111	622	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-DOWHILE	$.isLastStep
2437	627	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
2438	632	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
2439	636	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2440	649	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
2440	649	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
2440	649	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2440	649	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2440	649	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
2440	649	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
33112	658	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
2441	663	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2441	663	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
2441	663	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
2441	663	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
2441	663	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2441	663	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
2441	663	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2441	663	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2441	663	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2441	663	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2442	676	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
33113	685	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < $.mainSetDimension
33113	685	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < mainSetDimension
2443	691	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
2443	691	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
2443	691	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
2443	691	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
2444	712	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2444	712	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2445	715	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2446	724	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2446	724	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2447	730	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2447	730	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2447	730	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2448	742	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2449	750	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2449	750	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2450	755	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2450	755	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2450	755	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2451	766	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
2452	768	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2452	768	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2452	768	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2453	779	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.isLastStep
2453	779	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
2453	779	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2454	791	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2455	798	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
33114	801	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
33114	801	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
33115	807	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
33115	807	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
33116	813	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
33116	813	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
33116	813	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
33117	816	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
33117	816	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
33117	816	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
33118	819	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
33118	819	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
33118	819	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
33119	824	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
33119	824	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
33119	824	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
33120	829	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
33120	829	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
33121	830	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
33121	830	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
33122	831	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
33122	831	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
33122	831	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
2456	839	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
2457	846	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
2458	851	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
2459	861	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2460	874	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
2461	876	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2462	879	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
2462	879	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
2463	881	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
2463	881	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2464	883	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
2464	883	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
2465	888	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
2465	888	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
2465	888	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
2466	892	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
2466	892	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
2466	892	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
2467	897	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
2468	904	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
2468	904	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
2469	907	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
2469	907	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
2469	907	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
2469	907	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
2470	926	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2471	932	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
2495	165	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynoms == null
2495	165	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms == null
33156	170	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynoms.$.length
33156	170	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynoms.length
2496	187	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
2497	194	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms != null
33157	196	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
33157	196	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
33157	196	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
33158	200	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
33158	200	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
33158	200	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
2498	207	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
33159	211	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
33159	211	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
33160	215	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
33160	215	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
2499	240	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms.$.length <= (mu + 4)
2499	240	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms == null
2499	240	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynoms.length <= ($ + 4)
33161	246	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
33161	246	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
2500	259	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
2501	267	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
2502	271	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
2503	275	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
33162	279	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
33162	279	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
2504	299	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
33163	300	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < scale.$.length
33163	300	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < scale.length
33163	300	6	GraggBulirschStoerStepInterpolator.java	estimateError	scale	double[]	0	NIL-FOR	i < $.length
33164	325	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
33164	325	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
2505	334	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
33165	337	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
2506	348	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
33166	368	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
33166	368	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
33167	369	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
33167	369	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
33168	390	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
33168	390	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
33169	391	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
33169	391	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
33194	117	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < $.mainSetDimension
33194	117	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
33195	119	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < STATIC_E.$.length
33195	119	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < STATIC_E.length
33193	89	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
33193	89	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1029	62	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	NotStrictlyPositiveException	$ <= 0
1030	66	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	numberOfSuccesses	int	0	NotPositiveException	$ < 0
1031	70	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	sampleSize	int	0	NotPositiveException	$ < 0
1032	75	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	NumberIsTooLargeException	numberOfSuccesses > $
1032	75	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	numberOfSuccesses	int	0	NumberIsTooLargeException	$ > populationSize
1033	79	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	NumberIsTooLargeException	sampleSize > $
1033	79	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	sampleSize	int	0	NumberIsTooLargeException	$ > populationSize
1034	100	8	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
1034	100	8	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
1035	102	15	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
1035	102	15	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
1036	205	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x < $[0]
1036	205	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x > $[1]
1036	205	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ < domain[0]
1036	205	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ > domain[1]
1037	250	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x < $[0]
1037	250	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ < domain[0]
1038	252	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
1038	252	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
31773	281	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
31773	281	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
31656	73	8	Incrementor.java	incrementCount	i	int	0	NIL-FOR	$ < value
31656	73	8	Incrementor.java	incrementCount	value	int	0	NIL-FOR	i < $
33	84	8	Incrementor.java	incrementCount	THIS	Incrementor	0	MaxCountExceededException	++$.count > $.maximalCount
712	93	8	IntervalsSet.java	buildTree	lower	double	0	RET	$ < 0
712	93	8	IntervalsSet.java	buildTree	lower	double	0	RET	Double.isInfinite($)
713	94	12	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
713	94	12	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
714	108	8	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
714	108	8	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
715	136	8	IntervalsSet.java	computeGeometricalProperties	THIS	IntervalsSet	1	DEF	$.getTree(false).getCut() == null
31741	160	8	IntervalsSet.java	getInf	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
31742	177	8	IntervalsSet.java	getSup	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
716	215	8	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	1	DEF	$.getCut() == null
717	216	12	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	0	DEF	(Boolean) $.getAttribute()
718	232	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(low, loc) == $.Location.INSIDE
718	232	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(high, loc) == $.Location.INSIDE
718	232	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(low, $) == Location.INSIDE
718	232	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(high, $) == Location.INSIDE
718	232	12	IntervalsSet.java	recurseList	low	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
718	232	12	IntervalsSet.java	recurseList	high	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
1071	37	8	InvertibleRealLinearOperator.java	solve	THIS	InvertibleRealLinearOperator	0	DimensionMismatchException	b.$.length != $.getRowDimension()
1071	37	8	InvertibleRealLinearOperator.java	solve	b	double[]	0	DimensionMismatchException	$.length != getRowDimension()
1072	42	8	InvertibleRealLinearOperator.java	solve	x	RealVector	1	RET	$ instanceof ArrayRealVector
32873	108	8	KMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
32873	108	8	KMeansPlusPlusClusterer.java	cluster	numTrials	int	0	NIL-FOR	i < $
2054	116	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2055	129	12	KMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
2055	129	12	KMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
2056	161	8	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
2056	161	8	KMeansPlusPlusClusterer.java	cluster	k	int	0	NumberIsTooSmallException	points.size() < $
32874	175	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
32874	175	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
2057	180	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
2058	205	12	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
2058	205	12	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
2059	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
2059	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
2059	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
32875	282	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
32875	282	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2060	283	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
2060	283	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
32876	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
32876	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
32877	295	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
32877	295	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2061	296	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2061	296	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
32878	311	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
32878	311	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2062	312	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2062	312	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2063	314	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
2063	314	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
2064	324	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
32879	325	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
2065	326	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2065	326	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2066	334	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
2067	343	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	DEF	$.size() < k
2067	343	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	DEF	resultSet.size() < $
32880	346	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
32880	346	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
2068	348	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
2068	348	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
2069	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
2069	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
2069	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
2070	380	12	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2071	391	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
2071	391	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
2072	400	8	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
2073	426	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
2073	426	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
2074	434	8	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
32881	460	12	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
32881	460	12	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
2075	462	16	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
2075	462	16	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
2076	472	8	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster<T>	0	ConvergenceException	$ == null
2077	495	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
2077	495	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
1	133	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getControlMatrix() == null
2	153	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialStateEstimate() == null
3	160	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	DimensionMismatchException	$.transitionMatrix.getColumnDimension() != $.stateEstimation.getDimension()
4	167	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialErrorCovariance() == null
5	176	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	NonSquareMatrixException	$.transitionMatrix.isSquare()
6	183	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() > 0
6	183	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix != null
6	183	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() > 0
6	183	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() != 1
6	183	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() != $.transitionMatrix.getRowDimension()
7	197	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.measurementMatrix.getColumnDimension() != $.transitionMatrix.getRowDimension()
8	205	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	measNoise.getRowDimension() != $.measurementMatrix.getRowDimension()
8	205	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
8	205	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != measurementMatrix.getRowDimension()
9	296	8	KalmanFilter.java	predict	THIS	KalmanFilter	0	DimensionMismatchException	u.getDimension() != $.controlMatrix.getColumnDimension()
9	296	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$ != null
9	296	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$.getDimension() != controlMatrix.getColumnDimension()
10	307	8	KalmanFilter.java	predict	u	RealVector	0	DEF	$ != null
11	345	8	KalmanFilter.java	correct	THIS	KalmanFilter	0	DimensionMismatchException	z.getDimension() != $.measurementMatrix.getRowDimension()
11	345	8	KalmanFilter.java	correct	z	RealVector	0	DimensionMismatchException	$.getDimension() != measurementMatrix.getRowDimension()
1007	84	8	KolmogorovSmirnovDistributionImpl.java	KolmogorovSmirnovDistributionImpl	n	int	0	NotStrictlyPositiveException	$ <= 0
1008	157	8	KolmogorovSmirnovDistributionImpl.java	cdf	ninvhalf	double	1	RET	d <= $
1008	157	8	KolmogorovSmirnovDistributionImpl.java	cdf	d	double	1	RET	$ <= ninvhalf
1009	161	15	KolmogorovSmirnovDistributionImpl.java	cdf	ninv	double	1	RET	d <= $
1009	161	15	KolmogorovSmirnovDistributionImpl.java	cdf	ninvhalf	double	1	RET	$ < d
1009	161	15	KolmogorovSmirnovDistributionImpl.java	cdf	d	double	1	RET	ninvhalf < $
1009	161	15	KolmogorovSmirnovDistributionImpl.java	cdf	d	double	1	RET	$ <= ninv
31761	167	12	KolmogorovSmirnovDistributionImpl.java	cdf	THIS	KolmogorovSmirnovDistributionImpl	0	NIL-FOR	i <= $.n
31761	167	12	KolmogorovSmirnovDistributionImpl.java	cdf	i	int	0	NIL-FOR	$ <= n
1010	173	15	KolmogorovSmirnovDistributionImpl.java	cdf	ninv	double	1	RET	1 - $ <= d
1010	173	15	KolmogorovSmirnovDistributionImpl.java	cdf	d	double	1	RET	$ < 1
1010	173	15	KolmogorovSmirnovDistributionImpl.java	cdf	d	double	1	RET	1 - ninv <= $
1011	177	15	KolmogorovSmirnovDistributionImpl.java	cdf	d	double	0	RET	1 <= $
31762	207	8	KolmogorovSmirnovDistributionImpl.java	exactK	THIS	KolmogorovSmirnovDistributionImpl	0	NIL-FOR	i <= $.n
31762	207	8	KolmogorovSmirnovDistributionImpl.java	exactK	i	int	0	NIL-FOR	$ <= n
31763	244	8	KolmogorovSmirnovDistributionImpl.java	roundedK	i	int	0	NIL-FOR	$ < m
31763	244	8	KolmogorovSmirnovDistributionImpl.java	roundedK	m	int	0	NIL-FOR	i < $
31764	245	12	KolmogorovSmirnovDistributionImpl.java	roundedK	j	int	0	NIL-FOR	$ < m
31764	245	12	KolmogorovSmirnovDistributionImpl.java	roundedK	m	int	0	NIL-FOR	j < $
31765	254	8	KolmogorovSmirnovDistributionImpl.java	roundedK	THIS	KolmogorovSmirnovDistributionImpl	0	NIL-FOR	i <= $.n
31765	254	8	KolmogorovSmirnovDistributionImpl.java	roundedK	i	int	0	NIL-FOR	$ <= n
1012	280	8	KolmogorovSmirnovDistributionImpl.java	createH	hDouble	double	0	ArithmeticException	$ >= 1
31766	306	8	KolmogorovSmirnovDistributionImpl.java	createH	i	int	0	NIL-FOR	$ < m
31766	306	8	KolmogorovSmirnovDistributionImpl.java	createH	m	int	0	NIL-FOR	i < $
31767	307	12	KolmogorovSmirnovDistributionImpl.java	createH	j	int	0	NIL-FOR	$ < m
31767	307	12	KolmogorovSmirnovDistributionImpl.java	createH	m	int	0	NIL-FOR	j < $
1013	308	16	KolmogorovSmirnovDistributionImpl.java	createH	j	int	1	DEF	i - $ + 1 < 0
1013	308	16	KolmogorovSmirnovDistributionImpl.java	createH	i	int	1	DEF	$ - j + 1 < 0
31768	322	8	KolmogorovSmirnovDistributionImpl.java	createH	i	int	0	NIL-FOR	$ < m
31768	322	8	KolmogorovSmirnovDistributionImpl.java	createH	m	int	0	NIL-FOR	i < $
31769	329	8	KolmogorovSmirnovDistributionImpl.java	createH	i	int	0	NIL-FOR	$ < m
31769	329	8	KolmogorovSmirnovDistributionImpl.java	createH	m	int	0	NIL-FOR	i < $
1014	339	8	KolmogorovSmirnovDistributionImpl.java	createH	h	BigFraction	0	DEF	$.compareTo(BigFraction.ONE_HALF) == 1
31770	354	8	KolmogorovSmirnovDistributionImpl.java	createH	i	int	0	NIL-FOR	$ < m
31770	354	8	KolmogorovSmirnovDistributionImpl.java	createH	m	int	0	NIL-FOR	i < $
31771	355	12	KolmogorovSmirnovDistributionImpl.java	createH	j	int	0	NIL-FOR	$ < i + 1
31771	355	12	KolmogorovSmirnovDistributionImpl.java	createH	i	int	0	NIL-FOR	j < $ + 1
1015	356	16	KolmogorovSmirnovDistributionImpl.java	createH	j	int	0	DEF	i - $ + 1 > 0
1015	356	16	KolmogorovSmirnovDistributionImpl.java	createH	i	int	0	DEF	$ - j + 1 > 0
31772	357	20	KolmogorovSmirnovDistributionImpl.java	createH	g	int	0	NIL-FOR	$ <= i - j + 1
31772	357	20	KolmogorovSmirnovDistributionImpl.java	createH	j	int	0	NIL-FOR	g <= i - $ + 1
31772	357	20	KolmogorovSmirnovDistributionImpl.java	createH	i	int	0	NIL-FOR	g <= $ - j + 1
1917	98	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
1918	112	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
1919	114	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
1919	114	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
1920	132	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
1921	170	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
1921	170	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1921	170	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
1921	170	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
1921	170	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
32838	181	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
32838	181	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
32838	181	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1423	70	8	LUDecompositionImpl.java	LUDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
32464	83	8	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
32464	83	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
32465	90	8	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	$ < m
32465	90	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	col < $
32466	95	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < col
32466	95	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	row < $
32467	98	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < row
32467	98	16	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	i < $
32468	107	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
32468	107	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
32469	110	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < col
32469	110	16	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	i < $
1424	116	16	LUDecompositionImpl.java	LUDecompositionImpl	sum	double	0	DEF	FastMath.abs($) > largest
1424	116	16	LUDecompositionImpl.java	LUDecompositionImpl	largest	double	0	DEF	FastMath.abs(sum) > $
1425	123	12	LUDecompositionImpl.java	LUDecompositionImpl	THIS	LUDecompositionImpl	0	RET	FastMath.abs($.lu[max][col]) < singularityThreshold
1425	123	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	RET	FastMath.abs(lu[$][col]) < singularityThreshold
1425	123	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	RET	FastMath.abs(lu[max][$]) < singularityThreshold
1425	123	12	LUDecompositionImpl.java	LUDecompositionImpl	singularityThreshold	double	0	RET	FastMath.abs(lu[max][col]) < $
1426	129	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	DEF	$ != col
1426	129	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	DEF	max != $
32470	133	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < m
32470	133	16	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	i < $
32471	146	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
32471	146	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
1427	154	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.singular
1427	154	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.cachedL == null
32472	157	12	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
32472	157	12	LUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
32473	159	16	LUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
32473	159	16	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
1428	170	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.cachedU == null
1428	170	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.singular
32474	173	12	LUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
32474	173	12	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
32475	175	16	LUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
32475	175	16	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
1429	185	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.cachedP == null
1429	185	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.singular
32476	188	12	LUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
32476	188	12	LUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
1430	202	8	LUDecompositionImpl.java	getDeterminant	THIS	LUDecompositionImpl	1	RET	$.singular
32477	207	12	LUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
32477	207	12	LUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
3063	98	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
3063	98	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3064	104	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
3064	104	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3065	109	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
3065	109	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
3066	115	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
3066	115	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3067	120	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
3067	120	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
33359	149	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < coefficients.$.length
33359	149	8	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < coefficients.length
33359	149	8	LaguerreSolver.java	laguerre	coefficients	double[]	0	NIL-FOR	i < $.length
3068	154	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	1	RET	$.complexSolver.isRoot(lo, hi, z)
3068	154	8	LaguerreSolver.java	laguerre	z	Complex	1	RET	complexSolver.isRoot(lo, hi, $)
3068	154	8	LaguerreSolver.java	laguerre	lo	double	1	RET	complexSolver.isRoot($, hi, z)
3068	154	8	LaguerreSolver.java	laguerre	hi	double	1	RET	complexSolver.isRoot(lo, $, z)
33360	160	12	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
33360	160	12	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < root.length
33360	160	12	LaguerreSolver.java	laguerre	root	Complex[]	0	NIL-FOR	i < $.length
3069	161	16	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	DEF	$.complexSolver.isRoot(lo, hi, root[i])
3069	161	16	LaguerreSolver.java	laguerre	i	int	0	DEF	complexSolver.isRoot(lo, hi, root[$])
3069	161	16	LaguerreSolver.java	laguerre	root	Complex[]	0	DEF	complexSolver.isRoot(lo, hi, $[i])
3069	161	16	LaguerreSolver.java	laguerre	lo	double	0	DEF	complexSolver.isRoot($, hi, root[i])
3069	161	16	LaguerreSolver.java	laguerre	hi	double	0	DEF	complexSolver.isRoot(lo, $, root[i])
1540	113	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
1540	113	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
1540	113	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
1541	143	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
1541	143	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
1541	143	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
1542	156	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
1542	156	8	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
32535	159	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
32535	159	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
32535	159	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1543	165	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
32536	166	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
32536	166	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
32536	166	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1544	170	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
3131	216	12	LegendreGaussIntegrator.java	doIntegrate	THIS	LegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.minimalIterationCount
3131	216	12	LegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
3131	216	12	LegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
33389	247	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
33389	247	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
33390	248	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
33390	248	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
32538	306	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i<$.rows
32538	306	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$<rows
32539	319	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
32539	319	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
1546	324	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
32540	328	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
32540	328	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1547	330	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1548	345	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.cost != 0
32541	346	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32541	346	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1549	349	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
32542	351	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
32542	351	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1550	358	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1550	358	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
32543	366	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
32543	366	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
32544	371	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
32545	374	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32545	374	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
32546	391	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32546	391	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1551	400	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1552	409	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost < previousCost
1552	409	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost < $
32547	416	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32547	416	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
32548	420	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
32548	420	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
32549	425	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32549	425	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1553	438	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1554	441	24	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost >= previousCost
1554	441	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1554	441	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost >= $
1555	446	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1555	446	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1556	452	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
32550	456	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
32550	456	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1557	464	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<VectorialPointValuePair>	0	RET	$ != null
1558	466	24	LevenbergMarquardtOptimizer.java	doOptimize	previous	VectorialPointValuePair	0	RET	checker.converged(iter, $, current)
1558	466	24	LevenbergMarquardtOptimizer.java	doOptimize	current	VectorialPointValuePair	0	RET	checker.converged(iter, previous, $)
1558	466	24	LevenbergMarquardtOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1558	466	24	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<VectorialPointValuePair>	0	RET	$.converged(iter, previous, current)
32551	473	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32551	473	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1559	486	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1559	486	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1559	486	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
1559	486	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
1559	486	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1559	486	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1559	486	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1559	486	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1560	495	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= 2.2204e-16
1560	495	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= 2.2204e-16
1560	495	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
1561	498	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= 2.2204e-16 * xNorm
1561	498	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= 2.2204e-16 * $
1562	501	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= 2.2204e-16
32552	536	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
32552	536	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
32553	539	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
32553	539	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
32554	542	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
32555	545	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
32555	545	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
32556	554	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32556	554	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1563	562	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1563	562	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1564	572	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
32557	573	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32557	573	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
32558	578	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32558	578	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
32559	581	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
32559	581	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
32560	593	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32560	593	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
32561	596	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
32561	596	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1565	604	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1566	612	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
32562	616	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1567	619	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
32563	623	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32563	623	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
32564	630	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32564	630	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1568	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1568	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1568	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
1568	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1568	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1568	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
32565	648	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32565	648	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
32566	652	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32566	652	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
32567	656	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
32567	656	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
32568	661	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32568	661	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1569	668	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1570	670	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
32569	705	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32569	705	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
32570	707	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
32570	707	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
32571	715	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32571	715	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1571	721	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
32572	730	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
32572	730	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1572	735	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1572	735	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1573	740	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
1573	740	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
1573	740	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
32573	758	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
32573	758	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
32574	776	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
32574	776	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1574	777	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1574	777	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1574	777	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1574	777	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1575	780	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1575	780	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1576	784	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
32575	785	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
32576	788	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
32576	788	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
32577	796	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
32577	796	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
32578	826	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
32578	826	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
32579	829	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.weightedResidualJacobian.$.length
32579	829	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < weightedResidualJacobian.length
32580	837	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
32580	837	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
32581	842	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.cols
32581	842	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
32582	844	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
32582	844	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
1577	848	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
1577	848	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
1578	852	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1578	852	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1579	857	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
1579	857	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
32583	876	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
32584	878	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
32584	878	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
32585	882	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
32585	882	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
32586	896	8	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
32586	896	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < cols
32587	899	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
32587	899	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
32588	903	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
32588	903	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
636	76	8	Line.java	reset	norm2	double	0	MathIllegalArgumentException	$ == 0.0
637	175	8	Line.java	distance	n	double	0	RET	$ < MathUtils.SAFE_MIN
638	195	8	Line.java	closestPoint	n	double	0	RET	$ < MathUtils.EPSILON
721	132	8	Line.java	reset	d	double	1	DEF	$ == 0.0
722	159	8	Line.java	revertSelf	THIS	Line	1	DEF	$.angle < FastMath.PI
723	199	8	Line.java	intersection	d	double	0	RET	FastMath.abs($) < 1.0e-10
32515	128	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
32515	128	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
32515	128	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
1503	191	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
1503	191	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
1504	195	6	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
2885	44	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
2885	44	8	LinearInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
2885	44	8	LinearInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
2886	48	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	NumberIsTooSmallException	x.$.length < 2
2886	48	8	LinearInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 2
33276	60	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
33276	60	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
33277	66	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
33277	66	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1517	108	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
1517	108	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
1518	112	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
2328	49	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
2328	49	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NumberIsTooLargeException	chromosomes.size() > $
2329	53	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ < 0
2330	68	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ < 0
2331	107	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
2331	107	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
2961	146	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ < 0
2961	146	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ > 1
2962	151	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	NotPositiveException	$ < 0
2963	205	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
2963	205	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
2963	205	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
2964	211	8	LoessInterpolator.java	smooth	n	int	0	NoDataException	$ == 0
2965	221	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
2966	225	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
2967	231	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	NumberIsTooSmallException	$ < 2
33337	248	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
33337	248	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
33338	251	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
33338	251	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
2968	256	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
2969	266	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
2969	266	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
2969	266	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
2969	266	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
33339	285	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
33339	285	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
2970	304	16	LoessInterpolator.java	smooth	THIS	LoessInterpolator	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < $.accuracy
2970	304	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
2970	304	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
2971	318	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
2971	318	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
2972	331	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	FastMath.abs(medianResidual) < $.accuracy
2972	331	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	FastMath.abs($) < accuracy
33340	335	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
33340	335	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
2973	337	16	LoessInterpolator.java	smooth	arg	double	1	DEF	$ >= 1
2974	367	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
2974	367	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
2974	367	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
2975	401	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	nextRight < xval.$.length
2975	401	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[nextRight] - xval[i] < xval[i] - xval[$]
2975	401	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	xval[$] - xval[i] < xval[i] - xval[left]
2975	401	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	$ < xval.length
2975	401	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[nextRight] - $[i] < $[i] - $[left]
2975	401	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	nextRight < $.length
2975	401	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[nextRight] - xval[$] < xval[$] - xval[left]
33341	418	8	LoessInterpolator.java	nextNonzero	THIS	LoessInterpolator	0	NIL-WHILE	j < weights.$.length
33341	418	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	weights[$] == 0
33341	418	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	$ < weights.length
33341	418	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	$[j] == 0
33341	418	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	j < $.length
2976	434	8	LoessInterpolator.java	tricube	absX	double	0	RET	$ >= 1.0
33342	449	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
33342	449	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
33342	449	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
2982	68	8	Logistic.java	Logistic	n	double	0	NotStrictlyPositiveException	$ <= 0
2980	152	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
2980	152	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
2980	152	8	Logit.java	value	lo	double	0	OutOfRangeException	x < $
2980	152	8	Logit.java	value	hi	double	0	OutOfRangeException	x > $
2045	71	8	MannWhitneyUTestImpl.java	ensureDataConformance	x	double[]	0	IllegalArgumentException	$ == null
2046	75	8	MannWhitneyUTestImpl.java	ensureDataConformance	y	double[]	0	IllegalArgumentException	$ == null
2047	79	8	MannWhitneyUTestImpl.java	ensureDataConformance	THIS	MannWhitneyUTestImpl	0	IllegalArgumentException	x.$.length == 0
2047	79	8	MannWhitneyUTestImpl.java	ensureDataConformance	x	double[]	0	IllegalArgumentException	$.length == 0
2048	84	8	MannWhitneyUTestImpl.java	ensureDataConformance	THIS	MannWhitneyUTestImpl	0	IllegalArgumentException	y.$.length == 0
2048	84	8	MannWhitneyUTestImpl.java	ensureDataConformance	y	double[]	0	IllegalArgumentException	$.length == 0
32872	126	8	MannWhitneyUTestImpl.java	mannWhitneyU	THIS	MannWhitneyUTestImpl	0	NIL-FOR	i < x.$.length
32872	126	8	MannWhitneyUTestImpl.java	mannWhitneyU	i	int	0	NIL-FOR	$ < x.length
32872	126	8	MannWhitneyUTestImpl.java	mannWhitneyU	x	double[]	0	NIL-FOR	i < $.length
0	137	8	MathException.java	getMessage	THIS	MathException	0	RET	$.pattern != null
2247	142	8	MathRuntimeException.java	getMessage	THIS	MathRuntimeException	0	RET	$.pattern != null
350	116	8	MathUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
350	116	8	MathUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
351	149	8	MathUtils.java	addAndCheck	a	long	1	DEF	$ > b
351	149	8	MathUtils.java	addAndCheck	b	long	1	DEF	a > $
352	155	12	MathUtils.java	addAndCheck	a	long	1	MathArithmeticException	$ < 0
353	156	16	MathUtils.java	addAndCheck	b	long	1	MathArithmeticException	$ < 0
354	158	20	MathUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
354	158	20	MathUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
355	172	16	MathUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
355	172	16	MathUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
356	209	8	MathUtils.java	binomialCoefficient	n	int	0	RET	$ == k
356	209	8	MathUtils.java	binomialCoefficient	k	int	0	RET	n == $
356	209	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
357	212	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
357	212	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
357	212	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
358	216	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
358	216	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
359	226	8	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
31677	229	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
31677	229	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
360	233	15	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
31678	237	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
31678	237	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
31679	253	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
31679	253	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
361	286	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
361	286	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
361	286	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
362	289	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
362	289	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
362	289	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
363	292	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
363	292	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
364	295	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
31680	300	8	MathUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
31680	300	8	MathUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
365	327	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
365	327	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
365	327	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
366	330	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
366	330	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
366	330	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
367	338	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
368	346	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
369	350	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
369	350	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
31681	360	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
31681	360	8	MathUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
31682	365	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
31682	365	8	MathUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
370	381	8	MathUtils.java	checkBinomial	n	int	0	NumberIsTooLargeException	$ < k
370	381	8	MathUtils.java	checkBinomial	k	int	0	NumberIsTooLargeException	n < $
371	385	8	MathUtils.java	checkBinomial	n	int	0	NotPositiveException	$ < 0
372	401	8	MathUtils.java	compareTo	THIS	MathUtils	1	RET	$.equals(x, y, eps)
372	401	8	MathUtils.java	compareTo	x	double	1	RET	equals($, y, eps)
372	401	8	MathUtils.java	compareTo	y	double	1	RET	equals(x, $, eps)
372	401	8	MathUtils.java	compareTo	eps	double	1	RET	equals(x, y, $)
373	403	15	MathUtils.java	compareTo	x	double	0	RET	$ < y
373	403	15	MathUtils.java	compareTo	y	double	0	RET	x < $
374	427	8	MathUtils.java	compareTo	THIS	MathUtils	1	RET	$.equals(x, y, maxUlps)
374	427	8	MathUtils.java	compareTo	x	double	1	RET	equals($, y, maxUlps)
374	427	8	MathUtils.java	compareTo	y	double	1	RET	equals(x, $, maxUlps)
374	427	8	MathUtils.java	compareTo	maxUlps	int	1	RET	equals(x, y, $)
375	429	15	MathUtils.java	compareTo	x	double	0	RET	$ < y
375	429	15	MathUtils.java	compareTo	y	double	0	RET	x < $
376	523	8	MathUtils.java	equals	xInt	int	0	DEF	$ < 0
377	526	8	MathUtils.java	equals	yInt	int	0	DEF	$ < 0
378	562	8	MathUtils.java	equals	x	float[]	0	RET	$ == null
378	562	8	MathUtils.java	equals	y	float[]	0	RET	$ == null
379	565	8	MathUtils.java	equals	THIS	MathUtils	0	RET	x.$.length != y.$.length
379	565	8	MathUtils.java	equals	x	float[]	0	RET	$.length != y.length
379	565	8	MathUtils.java	equals	y	float[]	0	RET	x.length != $.length
31683	568	8	MathUtils.java	equals	THIS	MathUtils	0	NIL-FOR	i < x.$.length
31683	568	8	MathUtils.java	equals	i	int	0	NIL-FOR	$ < x.length
31683	568	8	MathUtils.java	equals	x	float[]	0	NIL-FOR	i < $.length
380	569	12	MathUtils.java	equals	THIS	MathUtils	0	RET	$.equals(x[i], y[i])
380	569	12	MathUtils.java	equals	i	int	0	RET	equals(x[$], y[$])
380	569	12	MathUtils.java	equals	x	float[]	0	RET	equals($[i], y[i])
380	569	12	MathUtils.java	equals	y	float[]	0	RET	equals(x[i], $[i])
381	588	8	MathUtils.java	equalsIncludingNaN	x	float[]	0	RET	$ == null
381	588	8	MathUtils.java	equalsIncludingNaN	y	float[]	0	RET	$ == null
382	591	8	MathUtils.java	equalsIncludingNaN	THIS	MathUtils	0	RET	x.$.length != y.$.length
382	591	8	MathUtils.java	equalsIncludingNaN	x	float[]	0	RET	$.length != y.length
382	591	8	MathUtils.java	equalsIncludingNaN	y	float[]	0	RET	x.length != $.length
31684	594	8	MathUtils.java	equalsIncludingNaN	THIS	MathUtils	0	NIL-FOR	i < x.$.length
31684	594	8	MathUtils.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
31684	594	8	MathUtils.java	equalsIncludingNaN	x	float[]	0	NIL-FOR	i < $.length
383	595	12	MathUtils.java	equalsIncludingNaN	THIS	MathUtils	0	RET	$.equalsIncludingNaN(x[i], y[i])
383	595	12	MathUtils.java	equalsIncludingNaN	i	int	0	RET	equalsIncludingNaN(x[$], y[$])
383	595	12	MathUtils.java	equalsIncludingNaN	x	float[]	0	RET	equalsIncludingNaN($[i], y[i])
383	595	12	MathUtils.java	equalsIncludingNaN	y	float[]	0	RET	equalsIncludingNaN(x[i], $[i])
384	679	8	MathUtils.java	equals	xInt	long	0	DEF	$ < 0
385	682	8	MathUtils.java	equals	yInt	long	0	DEF	$ < 0
386	718	8	MathUtils.java	equals	x	double[]	0	RET	$ == null
386	718	8	MathUtils.java	equals	y	double[]	0	RET	$ == null
387	721	8	MathUtils.java	equals	THIS	MathUtils	0	RET	x.$.length != y.$.length
387	721	8	MathUtils.java	equals	x	double[]	0	RET	$.length != y.length
387	721	8	MathUtils.java	equals	y	double[]	0	RET	x.length != $.length
31685	724	8	MathUtils.java	equals	THIS	MathUtils	0	NIL-FOR	i < x.$.length
31685	724	8	MathUtils.java	equals	i	int	0	NIL-FOR	$ < x.length
31685	724	8	MathUtils.java	equals	x	double[]	0	NIL-FOR	i < $.length
388	725	12	MathUtils.java	equals	THIS	MathUtils	0	RET	$.equals(x[i], y[i])
388	725	12	MathUtils.java	equals	i	int	0	RET	equals(x[$], y[$])
388	725	12	MathUtils.java	equals	x	double[]	0	RET	equals($[i], y[i])
388	725	12	MathUtils.java	equals	y	double[]	0	RET	equals(x[i], $[i])
389	744	8	MathUtils.java	equalsIncludingNaN	x	double[]	0	RET	$ == null
389	744	8	MathUtils.java	equalsIncludingNaN	y	double[]	0	RET	$ == null
390	747	8	MathUtils.java	equalsIncludingNaN	THIS	MathUtils	0	RET	x.$.length != y.$.length
390	747	8	MathUtils.java	equalsIncludingNaN	x	double[]	0	RET	$.length != y.length
390	747	8	MathUtils.java	equalsIncludingNaN	y	double[]	0	RET	x.length != $.length
31686	750	8	MathUtils.java	equalsIncludingNaN	THIS	MathUtils	0	NIL-FOR	i < x.$.length
31686	750	8	MathUtils.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
31686	750	8	MathUtils.java	equalsIncludingNaN	x	double[]	0	NIL-FOR	i < $.length
391	751	12	MathUtils.java	equalsIncludingNaN	THIS	MathUtils	0	RET	$.equalsIncludingNaN(x[i], y[i])
391	751	12	MathUtils.java	equalsIncludingNaN	i	int	0	RET	equalsIncludingNaN(x[$], y[$])
391	751	12	MathUtils.java	equalsIncludingNaN	x	double[]	0	RET	equalsIncludingNaN($[i], y[i])
391	751	12	MathUtils.java	equalsIncludingNaN	y	double[]	0	RET	equalsIncludingNaN(x[i], $[i])
392	783	8	MathUtils.java	factorial	n	int	0	NotPositiveException	$ < 0
393	787	8	MathUtils.java	factorial	n	int	0	MathArithmeticException	$ > 20
394	807	8	MathUtils.java	factorialDouble	n	int	0	NotPositiveException	$ < 0
395	811	8	MathUtils.java	factorialDouble	n	int	0	RET	$ < 21
396	825	8	MathUtils.java	factorialLog	n	int	0	NotPositiveException	$ < 0
397	829	8	MathUtils.java	factorialLog	n	int	0	RET	$ < 21
31687	833	8	MathUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
31687	833	8	MathUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
398	871	8	MathUtils.java	gcd	u	int	0	MathArithmeticException:RET	$ == 0
398	871	8	MathUtils.java	gcd	v	int	0	MathArithmeticException:RET	$ == 0
399	872	12	MathUtils.java	gcd	u	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
399	872	12	MathUtils.java	gcd	v	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
400	883	8	MathUtils.java	gcd	u	int	0	DEF	$ > 0
401	886	8	MathUtils.java	gcd	v	int	0	DEF	$ > 0
31688	891	8	MathUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
31688	891	8	MathUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
31688	891	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
402	897	8	MathUtils.java	gcd	k	int	0	MathArithmeticException	$ == 31
31689	906	8	MathUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
31690	909	12	MathUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
403	913	12	MathUtils.java	gcd	t	int	1	DEF	$ > 0
404	958	8	MathUtils.java	gcd	u	long	0	MathArithmeticException:RET	$ == 0
404	958	8	MathUtils.java	gcd	v	long	0	MathArithmeticException:RET	$ == 0
405	959	12	MathUtils.java	gcd	u	long	0	MathArithmeticException	$ == Long.MIN_VALUE
405	959	12	MathUtils.java	gcd	v	long	0	MathArithmeticException	$ == Long.MIN_VALUE
406	970	8	MathUtils.java	gcd	u	long	0	DEF	$ > 0
407	973	8	MathUtils.java	gcd	v	long	0	DEF	$ > 0
31691	978	8	MathUtils.java	gcd	u	long	0	NIL-WHILE	($ & 1) == 0
31691	978	8	MathUtils.java	gcd	v	long	0	NIL-WHILE	($ & 1) == 0
31691	978	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 63
408	984	8	MathUtils.java	gcd	k	int	0	MathArithmeticException	$ == 63
31692	993	8	MathUtils.java	gcd	t	long	0	NIL-DOWHILE	$ != 0
31693	996	12	MathUtils.java	gcd	t	long	0	NIL-WHILE	($ & 1) == 0
409	1000	12	MathUtils.java	gcd	t	long	1	DEF	$ > 0
410	1054	8	MathUtils.java	indicator	x	double	0	RET	Double.isNaN($)
411	1068	8	MathUtils.java	indicator	x	float	0	RET	Float.isNaN($)
412	1128	8	MathUtils.java	lcm	a	int	0	RET	$ == 0
412	1128	8	MathUtils.java	lcm	b	int	0	RET	$ == 0
413	1132	8	MathUtils.java	lcm	lcm	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
414	1162	8	MathUtils.java	lcm	a	long	0	RET	$ == 0
414	1162	8	MathUtils.java	lcm	b	long	0	RET	$ == 0
415	1166	8	MathUtils.java	lcm	lcm	long	0	MathArithmeticException	$ == Long.MIN_VALUE
416	1205	8	MathUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
416	1205	8	MathUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
417	1223	8	MathUtils.java	mulAndCheck	a	long	1	DEF	$ > b
417	1223	8	MathUtils.java	mulAndCheck	b	long	1	DEF	a > $
418	1227	12	MathUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ < 0
419	1228	16	MathUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ < 0
420	1230	20	MathUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
420	1230	20	MathUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
421	1235	23	MathUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ > 0
422	1237	20	MathUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
422	1237	20	MathUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
423	1247	19	MathUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ > 0
424	1252	16	MathUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
424	1252	16	MathUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
425	1333	9	MathUtils.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isInfinite($)
426	1336	9	MathUtils.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isNaN($)
31694	1342	9	MathUtils.java	normalizeArray	i	int	0	NIL-FOR	$ < len
31694	1342	9	MathUtils.java	normalizeArray	len	int	0	NIL-FOR	i < $
427	1343	13	MathUtils.java	normalizeArray	i	int	0	MathIllegalArgumentException	Double.isInfinite(values[$])
427	1343	13	MathUtils.java	normalizeArray	values	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
428	1346	13	MathUtils.java	normalizeArray	i	int	0	DEF	Double.isNaN(values[$])
428	1346	13	MathUtils.java	normalizeArray	values	double[]	0	DEF	Double.isNaN($[i])
429	1350	9	MathUtils.java	normalizeArray	sum	double	0	MathArithmeticException	$ == 0
31695	1353	9	MathUtils.java	normalizeArray	i	int	0	NIL-FOR	$ < len
31695	1353	9	MathUtils.java	normalizeArray	len	int	0	NIL-FOR	i < $
430	1354	13	MathUtils.java	normalizeArray	i	int	1	DEF	Double.isNaN(values[$])
430	1354	13	MathUtils.java	normalizeArray	values	double[]	1	DEF	Double.isNaN($[i])
431	1402	12	MathUtils.java	round	x	double	1	RET	Double.isInfinite($)
432	1458	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
433	1468	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
434	1477	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
435	1486	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
436	1488	19	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
437	1492	16	MathUtils.java	roundUnscaled	unscaled	double	1	DEF	FastMath.floor($) / 2.0 == FastMath.floor(Math .floor($) / 2.0)
438	1504	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
439	1512	12	MathUtils.java	roundUnscaled	unscaled	double	0	MathArithmeticException	$ != FastMath.floor($)
440	1561	8	MathUtils.java	sign	x	double	0	RET	Double.isNaN($)
441	1579	8	MathUtils.java	sign	x	float	0	RET	Float.isNaN($)
442	1647	8	MathUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
442	1647	8	MathUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
443	1665	8	MathUtils.java	subAndCheck	b	long	1	MathArithmeticException	$ == Long.MIN_VALUE
444	1666	12	MathUtils.java	subAndCheck	a	long	1	DEF	$ < 0
445	1687	8	MathUtils.java	pow	e	int	0	NotPositiveException	$ < 0
31696	1693	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
446	1694	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
447	1713	8	MathUtils.java	pow	e	long	0	NotPositiveException	$ < 0
31697	1719	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
448	1720	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
449	1739	8	MathUtils.java	pow	e	int	0	NotPositiveException	$ < 0
31698	1745	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
450	1746	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
451	1765	8	MathUtils.java	pow	e	long	0	NotPositiveException	$ < 0
31699	1771	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
452	1772	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
453	1791	8	MathUtils.java	pow	e	int	0	NotPositiveException	$ < 0
454	1807	8	MathUtils.java	pow	e	long	0	NotPositiveException	$ < 0
31700	1813	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
455	1814	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
456	1834	8	MathUtils.java	pow	e	BigInteger	0	NotPositiveException	$.compareTo(BigInteger.ZERO) < 0
31701	1840	8	MathUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
457	1841	12	MathUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
31702	1860	8	MathUtils.java	distance1	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
31702	1860	8	MathUtils.java	distance1	i	int	0	NIL-FOR	$ < p1.length
31702	1860	8	MathUtils.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
31703	1875	6	MathUtils.java	distance1	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
31703	1875	6	MathUtils.java	distance1	i	int	0	NIL-FOR	$ < p1.length
31703	1875	6	MathUtils.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
31704	1890	8	MathUtils.java	distance	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
31704	1890	8	MathUtils.java	distance	i	int	0	NIL-FOR	$ < p1.length
31704	1890	8	MathUtils.java	distance	p1	double[]	0	NIL-FOR	i < $.length
31705	1906	6	MathUtils.java	distance	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
31705	1906	6	MathUtils.java	distance	i	int	0	NIL-FOR	$ < p1.length
31705	1906	6	MathUtils.java	distance	p1	int[]	0	NIL-FOR	i < $.length
31706	1922	8	MathUtils.java	distanceInf	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
31706	1922	8	MathUtils.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
31706	1922	8	MathUtils.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
31707	1937	8	MathUtils.java	distanceInf	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
31707	1937	8	MathUtils.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
31707	1937	8	MathUtils.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
31708	1970	8	MathUtils.java	checkOrder	i	int	0	NIL-FOR	$ < max
31708	1970	8	MathUtils.java	checkOrder	max	int	0	NIL-FOR	i < $
458	1973	16	MathUtils.java	checkOrder	strict	boolean	1	DEF	$
459	1974	20	MathUtils.java	checkOrder	i	int	0	DEF	val[$] <= previous
459	1974	20	MathUtils.java	checkOrder	previous	double	0	DEF	val[i] <= $
459	1974	20	MathUtils.java	checkOrder	val	double[]	0	DEF	$[i] <= previous
460	1978	20	MathUtils.java	checkOrder	i	int	0	DEF	val[$] < previous
460	1978	20	MathUtils.java	checkOrder	previous	double	0	DEF	val[i] < $
460	1978	20	MathUtils.java	checkOrder	val	double[]	0	DEF	$[i] < previous
461	1984	16	MathUtils.java	checkOrder	strict	boolean	1	DEF	$
462	1985	20	MathUtils.java	checkOrder	i	int	0	DEF	val[$] >= previous
462	1985	20	MathUtils.java	checkOrder	previous	double	0	DEF	val[i] >= $
462	1985	20	MathUtils.java	checkOrder	val	double[]	0	DEF	$[i] >= previous
463	1989	20	MathUtils.java	checkOrder	i	int	0	DEF	val[$] > previous
463	1989	20	MathUtils.java	checkOrder	previous	double	0	DEF	val[i] > $
463	1989	20	MathUtils.java	checkOrder	val	double[]	0	DEF	$[i] > previous
464	1999	12	MathUtils.java	checkOrder	ok	boolean	0	NonMonotonousSequenceException	$
464	1999	12	MathUtils.java	checkOrder	abort	boolean	0	NonMonotonousSequenceException	$
465	2042	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
465	2042	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
31709	2055	8	MathUtils.java	checkFinite	THIS	MathUtils	0	NIL-FOR	i < val.$.length
31709	2055	8	MathUtils.java	checkFinite	i	int	0	NIL-FOR	$ < val.length
31709	2055	8	MathUtils.java	checkFinite	val	double[]	0	NIL-FOR	i < $.length
466	2057	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
466	2057	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
31710	2133	8	MathUtils.java	safeNorm	THIS	MathUtils	0	NIL-FOR	i < v.$.length
31710	2133	8	MathUtils.java	safeNorm	i	int	0	NIL-FOR	$ < v.length
31710	2133	8	MathUtils.java	safeNorm	v	double[]	0	NIL-FOR	i < $.length
467	2135	12	MathUtils.java	safeNorm	xabs	double	1	DEF	$ > agiant
467	2135	12	MathUtils.java	safeNorm	xabs	double	1	DEF	$ < rdwarf
467	2135	12	MathUtils.java	safeNorm	rdwarf	double	1	DEF	xabs < $
467	2135	12	MathUtils.java	safeNorm	agiant	double	1	DEF	xabs > $
468	2136	16	MathUtils.java	safeNorm	xabs	double	1	DEF	$ > rdwarf
468	2136	16	MathUtils.java	safeNorm	rdwarf	double	1	DEF	xabs > $
469	2137	20	MathUtils.java	safeNorm	xabs	double	1	DEF	$ > x1max
469	2137	20	MathUtils.java	safeNorm	x1max	double	1	DEF	xabs > $
470	2146	20	MathUtils.java	safeNorm	xabs	double	1	DEF	$ > x3max
470	2146	20	MathUtils.java	safeNorm	x3max	double	1	DEF	xabs > $
471	2151	24	MathUtils.java	safeNorm	xabs	double	0	DEF	$ != 0
472	2162	8	MathUtils.java	safeNorm	s1	double	1	DEF	$ != 0
473	2165	12	MathUtils.java	safeNorm	s2	double	1	DEF	$ == 0
474	2168	16	MathUtils.java	safeNorm	s2	double	1	DEF	$ >= x3max
474	2168	16	MathUtils.java	safeNorm	x3max	double	1	DEF	s2 >= $
475	2206	8	MathUtils.java	sortInPlace	x	double[]	0	NullArgumentException	$ == null
475	2206	8	MathUtils.java	sortInPlace	yList	double[]	0	NullArgumentException	$ == null
31711	2216	8	MathUtils.java	sortInPlace	i	int	0	NIL-FOR	$ < len
31711	2216	8	MathUtils.java	sortInPlace	len	int	0	NIL-FOR	i < $
31712	2218	12	MathUtils.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
31712	2218	12	MathUtils.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
476	2220	16	MathUtils.java	sortInPlace	THIS	MathUtils	0	DimensionMismatchException	y.$.length != len
476	2220	16	MathUtils.java	sortInPlace	y	double[]	0	DimensionMismatchException	$.length != len
476	2220	16	MathUtils.java	sortInPlace	len	int	0	DimensionMismatchException	y.length != $
31713	2250	8	MathUtils.java	sortInPlace	i	int	0	NIL-FOR	$ < len
31713	2250	8	MathUtils.java	sortInPlace	len	int	0	NIL-FOR	i < $
31714	2254	12	MathUtils.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
31714	2254	12	MathUtils.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
477	2321	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
478	2334	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
479	2407	8	MathUtils.java	linearCombination	result	double	0	DEF	Double.isNaN($)
480	2505	8	MathUtils.java	linearCombination	result	double	0	DEF	Double.isNaN($)
481	2625	8	MathUtils.java	linearCombination	result	double	0	DEF	Double.isNaN($)
482	2653	8	MathUtils.java	linearCombination	THIS	MathUtils	0	DimensionMismatchException	len != b.$.length
482	2653	8	MathUtils.java	linearCombination	len	int	0	DimensionMismatchException	$ != b.length
482	2653	8	MathUtils.java	linearCombination	b	double[]	0	DimensionMismatchException	len != $.length
31715	2660	8	MathUtils.java	linearCombination	i	int	0	NIL-FOR	$ < len
31715	2660	8	MathUtils.java	linearCombination	len	int	0	NIL-FOR	i < $
31716	2686	8	MathUtils.java	linearCombination	i	int	0	NIL-FOR	$ < lenMinusOne
31716	2686	8	MathUtils.java	linearCombination	lenMinusOne	int	0	NIL-FOR	i < $
483	2696	8	MathUtils.java	linearCombination	result	double	0	DEF	Double.isNaN($)
31717	2700	12	MathUtils.java	linearCombination	i	int	0	NIL-FOR	$ < len
31717	2700	12	MathUtils.java	linearCombination	len	int	0	NIL-FOR	i < $
1284	116	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$[0] == null
1284	116	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$ == null
1285	144	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$[0] == null
1285	144	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$ == null
32214	162	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
32214	162	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
32215	184	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
32215	184	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
32216	202	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
32216	202	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
32216	202	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
32217	221	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
32217	221	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
32217	221	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
1286	236	8	MatrixUtils.java	createRealVector	data	double[]	0	NullArgumentException	$ == null
1287	253	8	MatrixUtils.java	createFieldVector	data	T[]	0	NullArgumentException	$ == null
1288	256	8	MatrixUtils.java	createFieldVector	THIS	MatrixUtils	0	ZeroException	data.$.length == 0
1288	256	8	MatrixUtils.java	createFieldVector	data	T[]	0	ZeroException	$.length == 0
1289	272	8	MatrixUtils.java	createRowRealMatrix	rowData	double[]	0	NullArgumentException	$ == null
32218	277	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
32218	277	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
1290	295	8	MatrixUtils.java	createRowFieldMatrix	rowData	T[]	0	NullArgumentException	$ == null
1291	299	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
32219	303	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
32219	303	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
1292	319	8	MatrixUtils.java	createColumnRealMatrix	columnData	double[]	0	NullArgumentException	$ == null
32220	324	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
32220	324	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
1293	342	8	MatrixUtils.java	createColumnFieldMatrix	columnData	T[]	0	NullArgumentException	$ == null
1294	346	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NoDataException	$ == 0
32221	350	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
32221	350	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
1295	379	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1295	379	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= m.getRowDimension()
1295	379	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1296	394	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1296	394	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= m.getColumnDimension()
1296	394	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1297	418	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1297	418	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1298	425	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1298	425	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1299	449	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1300	452	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1301	455	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedRows.$.length == 0
1301	455	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1302	458	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedColumns.$.length == 0
1302	458	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1303	478	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1303	478	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1303	478	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1303	478	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1304	493	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1304	493	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1304	493	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1304	493	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1305	508	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DimensionMismatchException	$.getColumnDimension() != right.getRowDimension()
1305	508	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DimensionMismatchException	left.getColumnDimension() != $.getRowDimension()
32222	647	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
32222	647	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
32223	678	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
32223	678	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
32224	750	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
32224	750	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
32225	751	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
32225	751	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
32226	784	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
32226	784	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
32227	786	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
32227	786	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1306	827	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$ == null
1306	827	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getRowDimension() != b.getDimension()
1306	827	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	MathIllegalArgumentException	rm.getRowDimension() != $.getDimension()
1306	827	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	MathIllegalArgumentException	$ == null
1307	832	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getColumnDimension() != $.getRowDimension()
32228	838	8	MatrixUtils.java	solveLowerTriangularSystem	i	int	0	NIL-FOR	$ < rows
32228	838	8	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	i < $
1308	840	12	MatrixUtils.java	solveLowerTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < MathUtils.SAFE_MIN
32229	845	12	MatrixUtils.java	solveLowerTriangularSystem	j	int	0	NIL-FOR	$< rows
32229	845	12	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	j< $
1309	867	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$ == null
1309	867	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getRowDimension() != b.getDimension()
1309	867	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	MathIllegalArgumentException	$ == null
1309	867	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	MathIllegalArgumentException	rm.getRowDimension() != $.getDimension()
1310	872	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getColumnDimension() != $.getRowDimension()
32230	878	8	MatrixUtils.java	solveUpperTriangularSystem	i	int	0	NIL-FOR	$ >-1
1311	880	12	MatrixUtils.java	solveUpperTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < MathUtils.SAFE_MIN
32231	885	12	MatrixUtils.java	solveUpperTriangularSystem	j	int	0	NIL-FOR	$>-1
1969	76	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
1969	76	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
1969	76	8	Max.java	increment	d	double	0	DEF	$ > value
1970	131	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
1970	131	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1970	131	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
1970	131	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
32844	133	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
32844	133	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
32844	133	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1971	134	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1971	134	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1898	109	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
1899	119	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
1900	157	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
1900	157	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
1900	157	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
1900	157	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
32830	166	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
32830	166	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
32830	166	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1901	205	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, weights, begin, length)
1901	205	8	Mean.java	evaluate	values	double[]	0	RET	test($, weights, begin, length)
1901	205	8	Mean.java	evaluate	weights	double[]	0	RET	test(values, $, begin, length)
1901	205	8	Mean.java	evaluate	begin	int	0	RET	test(values, weights, $, length)
1901	205	8	Mean.java	evaluate	length	int	0	RET	test(values, weights, begin, $)
32831	214	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
32831	214	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
32831	214	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
33015	146	8	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
2307	163	8	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
33016	172	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
2308	178	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
2309	182	12	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
2309	182	12	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
2309	182	12	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
33017	187	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
2310	193	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
2311	227	8	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
33018	229	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
33019	235	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
2920	151	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$ == null
2920	151	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	NullArgumentException	$ == null
2921	155	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NoDataException	xval.$.length == 0
2921	155	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NoDataException	$.length == 0
2922	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xval.$.length != yval.$.length
2922	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DimensionMismatchException	$.length != yval.length
2922	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	DimensionMismatchException	xval.length != $.length
2923	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$[0] == null
33290	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NIL-FOR	i < xval.$.length
33290	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < xval.length
33290	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NIL-FOR	i < $.length
2924	172	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	NullArgumentException	$ == null
2925	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xvalI.$.length != $.dimension
2925	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	DimensionMismatchException	$.length != dimension
33291	185	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < microsphereElements
33291	185	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	microsphereElements	int	0	NIL-FOR	i < $
2926	209	12	MicrosphereInterpolatingFunction.java	value	diffNorm	double	0	RET	FastMath.abs($) < FastMath.ulp(1d)
2927	228	12	MicrosphereInterpolatingFunction.java	value	sd	Entry<RealVector,Double>	0	DEF	$ != null
2954	72	8	MicrosphereInterpolator.java	MicrosphereInterpolator	exponent	int	0	NotPositiveException	$ < 0
2955	75	8	MicrosphereInterpolator.java	MicrosphereInterpolator	elements	int	0	NotStrictlyPositiveException	$ <= 0
33170	91	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
33170	91	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2128	117	8	MillerUpdatingRegression.java	MillerUpdatingRegression	numberOfVariables	int	0	ModelSpecificationException	$ < 1
2129	120	8	MillerUpdatingRegression.java	MillerUpdatingRegression	includeConstant	boolean	1	DEF	$
32925	137	8	MillerUpdatingRegression.java	MillerUpdatingRegression	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
32925	137	8	MillerUpdatingRegression.java	MillerUpdatingRegression	i	int	0	NIL-FOR	$ < this.nvars
2130	140	8	MillerUpdatingRegression.java	MillerUpdatingRegression	errorTolerance	double	1	DEF	$ > 0
2131	183	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2131	183	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2131	183	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != $.nvars
2131	183	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length + 1 != $.nvars
2131	183	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length != nvars
2131	183	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length + 1 != nvars
2132	188	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
2133	209	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != y.$.length
2133	209	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2133	209	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2133	209	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2133	209	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
2134	215	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length == 0
2134	215	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length == 0
2135	219	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x[0].length + 1 > x.$.length
2135	219	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$[0].length + 1 > $.length
32926	224	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
32926	224	8	MillerUpdatingRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
32926	224	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
32927	257	8	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
32927	257	8	MillerUpdatingRegression.java	include	i	int	0	NIL-FOR	$ < x.length
32927	257	8	MillerUpdatingRegression.java	include	x	double[]	0	NIL-FOR	i < $.length
2136	258	12	MillerUpdatingRegression.java	include	w	double	0	RET	$ == 0.0
2137	263	12	MillerUpdatingRegression.java	include	xi	double	0	DEF	$ == 0.0
2138	270	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2139	273	16	MillerUpdatingRegression.java	include	tmp	double	0	DEF	FastMath.abs($) > MathUtils.EPSILON
32928	281	12	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	k < $.nvars
32928	281	12	MillerUpdatingRegression.java	include	k	int	0	NIL-FOR	$ < nvars
2140	284	16	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2141	293	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2142	313	8	MillerUpdatingRegression.java	smartAdd	_a	double	1	RET	$ > _b
2142	313	8	MillerUpdatingRegression.java	smartAdd	_b	double	1	RET	_a > $
2143	315	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_b > $
2143	315	12	MillerUpdatingRegression.java	smartAdd	_b	double	0	RET	$ > eps
2144	321	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_a > $
2144	321	12	MillerUpdatingRegression.java	smartAdd	_a	double	0	RET	$ > eps
32929	342	8	MillerUpdatingRegression.java	clear	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
32929	342	8	MillerUpdatingRegression.java	clear	i	int	0	NIL-FOR	$ < nvars
32930	361	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
32930	361	8	MillerUpdatingRegression.java	tolset	i	int	0	NIL-FOR	$ < nvars
32931	365	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
32931	365	8	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	$ < nvars
32932	368	12	MillerUpdatingRegression.java	tolset	row	int	0	NIL-FOR	$ < col
32932	368	12	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	row < $
2145	389	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ < 1
2146	392	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	ModelSpecificationException	nreq > $.nvars
2146	392	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ > this.nvars
2147	396	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.tol_set
32933	401	8	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ > -1
2148	402	12	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[i]) < $.tol[i]
2148	402	12	MillerUpdatingRegression.java	regcf	i	int	1	DEF	Math.sqrt(d[$]) < tol[$]
32934	409	16	MillerUpdatingRegression.java	regcf	j	int	0	NIL-FOR	$ < nreq
32934	409	16	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	j < $
2149	415	8	MillerUpdatingRegression.java	regcf	rankProblem	boolean	0	DEF	$
32935	416	12	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ < nreq
32935	416	12	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	i < $
2150	417	16	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2150	417	16	MillerUpdatingRegression.java	regcf	i	int	0	DEF	this.lindep[$]
32936	434	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
32936	434	8	MillerUpdatingRegression.java	singcheck	i	int	0	NIL-FOR	$ < nvars
32937	437	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
32937	437	8	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	$ < nvars
32938	443	12	MillerUpdatingRegression.java	singcheck	row	int	0	NIL-FOR	$ < col - 1
32938	443	12	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	row < $ - 1
2151	444	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	Math.abs($.r[pos]) * $.work_sing[row] < temp
2151	444	16	MillerUpdatingRegression.java	singcheck	row	int	0	DEF	Math.abs(r[pos]) * work_sing[$] < temp
2151	444	16	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	Math.abs(r[pos]) * work_sing[row] < $
2151	444	16	MillerUpdatingRegression.java	singcheck	pos	int	0	DEF	Math.abs(r[$]) * work_sing[row] < temp
2152	453	12	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	$.work_sing[col] < temp
2152	453	12	MillerUpdatingRegression.java	singcheck	col	int	0	DEF	work_sing[$] < temp
2152	453	12	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	work_sing[col] < $
2153	455	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	1	DEF	col < $.nvars - 1
2153	455	16	MillerUpdatingRegression.java	singcheck	col	int	1	DEF	$ < nvars - 1
32939	458	20	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	_xi < $.nvars
32939	458	20	MillerUpdatingRegression.java	singcheck	_xi	int	0	NIL-FOR	$ < nvars
32940	487	8	MillerUpdatingRegression.java	ss	i	int	0	NIL-FOR	$ > 0
2154	514	8	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	RET	$.nobs <= nreq
2154	514	8	MillerUpdatingRegression.java	cov	nreq	int	0	RET	this.nobs <= $
32941	518	8	MillerUpdatingRegression.java	cov	i	int	0	NIL-FOR	$ < nreq
32941	518	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	i < $
2155	519	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2155	519	12	MillerUpdatingRegression.java	cov	i	int	0	DEF	this.lindep[$]
32942	532	8	MillerUpdatingRegression.java	cov	row	int	0	NIL-FOR	$ < nreq
32942	532	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	row < $
2156	534	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[row]
2156	534	12	MillerUpdatingRegression.java	cov	row	int	0	DEF	this.lindep[$]
32943	535	16	MillerUpdatingRegression.java	cov	col	int	0	NIL-FOR	$ < nreq
32943	535	16	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	col < $
2157	536	20	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	1	DEF	$.lindep[col]
2157	536	20	MillerUpdatingRegression.java	cov	col	int	1	DEF	this.lindep[$]
2158	538	24	MillerUpdatingRegression.java	cov	col	int	1	DEF	row == $
2158	538	24	MillerUpdatingRegression.java	cov	row	int	1	DEF	$ == col
32944	543	24	MillerUpdatingRegression.java	cov	k	int	0	NIL-FOR	$ < nreq
32944	543	24	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	k < $
2159	544	28	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2159	544	28	MillerUpdatingRegression.java	cov	k	int	0	DEF	this.lindep[$]
32945	575	8	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	$ > 0
2160	576	12	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	1	DEF	$.lindep[row]
2160	576	12	MillerUpdatingRegression.java	inverse	row	int	1	DEF	this.lindep[$]
32946	578	16	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	$ > row
32946	578	16	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	col > $
32947	582	20	MillerUpdatingRegression.java	inverse	k	int	0	NIL-FOR	$ < col - 1
32947	582	20	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	k < $ - 1
2161	584	24	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2161	584	24	MillerUpdatingRegression.java	inverse	k	int	0	DEF	this.lindep[$]
2162	646	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	RET	in >= $.nvars
2162	646	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ < -1
2162	646	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ >= nvars
2163	651	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	DEF	$.d[in] > 0.0
2163	651	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	DEF	d[$] > 0.0
32948	654	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
32948	654	8	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	$ < nvars
32949	657	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col
32949	657	12	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	row < $
2164	661	12	MillerUpdatingRegression.java	getPartialCorrelations	sumxx	double	1	DEF	$ > 0.0
32950	668	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	row < $.nvars
32950	668	8	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < nvars
2165	671	8	MillerUpdatingRegression.java	getPartialCorrelations	sumyy	double	0	DEF	$ > 0.0
32951	675	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col1 < $.nvars
32951	675	8	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	$ < nvars
32952	679	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col1
32952	679	12	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	row < $
32953	681	16	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
32953	681	16	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
32954	689	12	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
32954	689	12	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
2166	727	8	MillerUpdatingRegression.java	vmove	from	int	0	RET	$ == to
2166	727	8	MillerUpdatingRegression.java	vmove	to	int	0	RET	from == $
2167	730	8	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	$.rss_set
2168	734	8	MillerUpdatingRegression.java	vmove	from	int	1	DEF	$ < to
2168	734	8	MillerUpdatingRegression.java	vmove	to	int	1	DEF	from < $
32955	746	8	MillerUpdatingRegression.java	vmove	count	int	0	NIL-WHILE	idx < $
32955	746	8	MillerUpdatingRegression.java	vmove	idx	int	0	NIL-WHILE	$ < count
2169	754	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d1 > $.epsilon
2169	754	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 > $.epsilon
2169	754	12	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	$ > this.epsilon
2169	754	12	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ > this.epsilon
2170	756	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	Math.abs(X) * Math.sqrt(d1) < $.tol[mp1]
2170	756	16	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	Math.abs(X) * Math.sqrt($) < tol[mp1]
2170	756	16	MillerUpdatingRegression.java	vmove	mp1	int	0	DEF	Math.abs(X) * Math.sqrt(d1) < tol[$]
2171	759	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	d1 < $.epsilon
2171	759	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	Math.abs(X) < $.epsilon
2171	759	16	MillerUpdatingRegression.java	vmove	d1	double	1	DEF	$ < this.epsilon
32956	763	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
32956	763	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2172	775	23	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 < $.epsilon
2172	775	23	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ < this.epsilon
32957	778	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	_i < m1 + $.nvars - m - 1
32957	778	20	MillerUpdatingRegression.java	vmove	_i	int	0	NIL-FOR	$ < m1 + nvars - m - 1
32957	778	20	MillerUpdatingRegression.java	vmove	m1	int	0	NIL-FOR	_i < $ + nvars - m - 1
32957	778	20	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	_i < m1 + nvars - $ - 1
2173	785	16	MillerUpdatingRegression.java	vmove	bSkipTo40	boolean	0	DEF	$
32958	793	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
32958	793	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2174	805	12	MillerUpdatingRegression.java	vmove	m	int	0	DEF	$ > 0
32959	807	16	MillerUpdatingRegression.java	vmove	row	int	0	NIL-FOR	$ < m
32959	807	16	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	row < $
2175	848	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length < 1
2175	848	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length > $.nvars + 1 - pos1
2175	848	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length < 1
2175	848	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length > nvars + 1 - pos1
2175	848	8	MillerUpdatingRegression.java	reorderRegressors	pos1	int	0	RET	list.length > nvars + 1 - $
32960	853	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-WHILE	i < $.nvars
32960	853	8	MillerUpdatingRegression.java	reorderRegressors	i	int	0	NIL-WHILE	$ < nvars
32961	855	12	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-FOR	j < list.$.length
32961	855	12	MillerUpdatingRegression.java	reorderRegressors	j	int	0	NIL-FOR	$ < list.length
32961	855	12	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	NIL-FOR	j < $.length
2176	856	16	MillerUpdatingRegression.java	reorderRegressors	j	int	0	RET	l == list[$]
2176	856	16	MillerUpdatingRegression.java	reorderRegressors	l	int	0	RET	$ == list[j]
2176	856	16	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	l == $[j]
2177	857	20	MillerUpdatingRegression.java	reorderRegressors	next	int	0	RET	i > $
2177	857	20	MillerUpdatingRegression.java	reorderRegressors	i	int	0	RET	$ > next
2178	860	24	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	1	RET	next >= list.$.length + pos1
2178	860	24	MillerUpdatingRegression.java	reorderRegressors	next	int	1	RET	$ >= list.length + pos1
2178	860	24	MillerUpdatingRegression.java	reorderRegressors	list	int[]	1	RET	next >= $.length + pos1
2178	860	24	MillerUpdatingRegression.java	reorderRegressors	pos1	int	1	RET	next >= list.length + $
2179	884	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	RET	row_data.$.length > $.nvars
2179	884	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row_data	double[]	0	RET	$.length > nvars
2180	888	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
32962	896	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	NIL-FOR	col < xrow.$.length
32962	896	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	$ < xrow.length
32962	896	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	xrow	double[]	0	NIL-FOR	col < $.length
2181	897	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[col]) < $.tol[col]
2181	897	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	1	DEF	Math.sqrt(d[$]) < tol[$]
32963	902	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row	int	0	NIL-FOR	$ < col
32963	902	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	row < $
2182	946	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= numberOfRegressors
2182	946	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	this.nobs <= $
2183	951	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	numberOfRegressors > $.nvars
2183	951	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	$ > this.nvars
32964	966	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
32964	966	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2184	967	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2184	967	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
32965	973	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < numberOfRegressors
32965	973	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	i < $
2185	974	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != i
2185	974	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != $
2186	979	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
32966	988	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
32966	988	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < nvars
32967	989	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < numberOfRegressors
32967	989	16	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	j < $
2187	990	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == i
2187	990	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == i
2187	990	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == $
32968	1001	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
32968	1001	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
32968	1001	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
32969	1003	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
32969	1003	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2188	1005	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2188	1005	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2189	1032	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	variablesToInclude.$.length > $.nvars
2189	1032	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > this.nvars
2190	1036	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= $.nvars
32970	1043	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
32970	1043	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
32970	1043	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2191	1044	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	i >= $.nvars
2191	1044	12	MillerUpdatingRegression.java	regress	i	int	0	ModelSpecificationException	$ >= this.nvars
2192	1048	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	$ > 0
2192	1048	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] == variablesToInclude[$ - 1]
2192	1048	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] == $[i - 1]
2193	1054	8	MillerUpdatingRegression.java	regress	iExclude	int	1	DEF	$ > 0
32971	1057	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
32971	1057	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
32971	1057	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2194	1058	16	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] > -1
2194	1058	16	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] > -1
32972	1080	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
32972	1080	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2195	1081	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2195	1081	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
32973	1087	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
32973	1087	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.nvars
2196	1088	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != series[i]
2196	1088	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != series[$]
2196	1088	12	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[i] != $[i]
2197	1093	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
32974	1100	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < series.$.length
32974	1100	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < series.length
32974	1100	12	MillerUpdatingRegression.java	regress	series	int[]	0	NIL-FOR	i < $.length
32975	1101	16	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	j < $.vorder.length
32975	1101	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < this.vorder.length
2198	1102	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == series[i]
2198	1102	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == series[i]
2198	1102	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == series[$]
2198	1102	20	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[j] == $[i]
32976	1113	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
32976	1113	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
32976	1113	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
32977	1115	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
32977	1115	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2199	1117	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2199	1117	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
1966	76	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
1966	76	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
1966	76	8	Min.java	increment	d	double	0	DEF	$ < value
1967	131	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
1967	131	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1967	131	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
1967	131	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
32843	133	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
32843	133	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
32843	133	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1968	134	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1968	134	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
3032	93	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMin) < $
3032	93	8	MullerSolver.java	doSolve	fMin	double	0	RET	FastMath.abs($) < functionValueAccuracy
3033	97	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMax) < $
3033	97	8	MullerSolver.java	doSolve	fMax	double	0	RET	FastMath.abs($) < functionValueAccuracy
3034	101	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fInitial) < $
3034	101	8	MullerSolver.java	doSolve	fInitial	double	0	RET	FastMath.abs($) < functionValueAccuracy
3035	107	8	MullerSolver.java	doSolve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial)
3035	107	8	MullerSolver.java	doSolve	min	double	1	RET	isBracketing($, initial)
3035	107	8	MullerSolver.java	doSolve	initial	double	1	RET	isBracketing(min, $)
3036	161	12	MullerSolver.java	solve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3036	161	12	MullerSolver.java	solve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3036	161	12	MullerSolver.java	solve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3036	161	12	MullerSolver.java	solve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3036	161	12	MullerSolver.java	solve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
3037	174	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
3038	184	16	MullerSolver.java	solve	ym	double	1	DEF	MathUtils.sign(y0) + MathUtils.sign($) == 0.0
3038	184	16	MullerSolver.java	solve	y0	double	1	DEF	MathUtils.sign($) + MathUtils.sign(ym) == 0.0
3026	98	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y0) < $
3026	98	8	MullerSolver2.java	doSolve	y0	double	0	RET	FastMath.abs($) < functionValueAccuracy
3027	103	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y1) < $
3027	103	8	MullerSolver2.java	doSolve	y1	double	0	RET	FastMath.abs($) < functionValueAccuracy
3028	107	8	MullerSolver2.java	doSolve	y0	double	0	NoBracketingException	$ * y1 > 0
3028	107	8	MullerSolver2.java	doSolve	y1	double	0	NoBracketingException	y0 * $ > 0
3029	124	12	MullerSolver2.java	doSolve	delta	double	1	DEF	$ >= 0.0
3030	133	12	MullerSolver2.java	doSolve	denominator	double	1	DEF	$ != 0
33356	137	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x1
33356	137	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x2
33356	137	16	MullerSolver2.java	doSolve	x1	double	0	NIL-WHILE	x == $
33356	137	16	MullerSolver2.java	doSolve	x2	double	0	NIL-WHILE	x == $
3031	149	12	MullerSolver2.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3031	149	12	MullerSolver2.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3031	149	12	MullerSolver2.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3031	149	12	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3031	149	12	MullerSolver2.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
1607	166	8	MultiDirectionalSimplex.java	iterate	best	RealPointValuePair	0	RET	comparator.compare(reflected, $) < 0
1607	166	8	MultiDirectionalSimplex.java	iterate	reflected	RealPointValuePair	0	RET	comparator.compare($, best) < 0
1607	166	8	MultiDirectionalSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(reflected, best) < 0
1608	171	12	MultiDirectionalSimplex.java	iterate	expanded	RealPointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
1608	171	12	MultiDirectionalSimplex.java	iterate	reflected	RealPointValuePair	0	DEF	comparator.compare($, expanded) <= 0
1608	171	12	MultiDirectionalSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
32621	207	8	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
32621	207	8	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
32622	210	12	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
32622	210	12	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
1475	76	8	MultiStartUnivariateRealOptimizer.java	MultiStartUnivariateRealOptimizer	optimizer	BaseUnivariateRealOptimizer<FUNC>	0	NullArgumentException	$ == null
1475	76	8	MultiStartUnivariateRealOptimizer.java	MultiStartUnivariateRealOptimizer	generator	RandomGenerator	0	NullArgumentException	$ == null
1476	80	8	MultiStartUnivariateRealOptimizer.java	MultiStartUnivariateRealOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1477	141	8	MultiStartUnivariateRealOptimizer.java	getOptima	THIS	MultiStartUnivariateRealOptimizer	0	MathIllegalStateException	$.optima == null
32514	164	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	NIL-FOR	i < $.starts
32514	164	8	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1478	178	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	DEF	$.optima[0] == null
31650	173	8	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
31650	173	8	MultidimensionalCounter.java	MultidimensionalCounter	i	int	0	NIL-FOR	$ < last
31651	175	12	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	j < $.dimension
31651	175	12	MultidimensionalCounter.java	MultidimensionalCounter	j	int	0	NIL-FOR	$ < dimension
27	183	8	MultidimensionalCounter.java	MultidimensionalCounter	tS	int	0	NotStrictlyPositiveException	$ <= 0
28	217	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.totalSize
28	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ < 0
28	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ >= totalSize
31652	225	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
31652	225	8	MultidimensionalCounter.java	getCounts	i	int	0	NIL-FOR	$ < last
31653	228	12	MultidimensionalCounter.java	getCounts	count	int	0	NIL-WHILE	$ <= index
31653	228	12	MultidimensionalCounter.java	getCounts	index	int	0	NIL-WHILE	count <= $
29	254	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	DimensionMismatchException	c.$.length != $.dimension
29	254	8	MultidimensionalCounter.java	getCount	c	int	0	DimensionMismatchException	$.length != dimension
31654	258	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
31654	258	8	MultidimensionalCounter.java	getCount	i	int	0	NIL-FOR	$ < dimension
30	260	12	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.size[i]
30	260	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ < 0
30	260	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ >= size[i]
30	260	12	MultidimensionalCounter.java	getCount	i	int	0	OutOfRangeException	index >= size[$]
31655	292	8	MultidimensionalCounter.java	toString	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
31655	292	8	MultidimensionalCounter.java	toString	i	int	0	NIL-FOR	$ < dimension
2562	116	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	DEF	$ <= 1
32814	124	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
32814	124	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
32815	148	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
32815	148	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
32816	185	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
32816	185	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
32816	185	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
1859	244	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
1860	246	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
32817	250	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
32817	250	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
32818	334	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
32818	334	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
32818	334	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
1861	335	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
32819	348	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
32819	348	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
1862	368	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
1862	368	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
1863	371	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
1864	609	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	DEF	$.n > 0
1865	622	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
1865	622	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
32907	194	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
32907	194	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
32907	194	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
32908	227	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
32908	227	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
32908	227	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2095	228	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
2095	228	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
2096	231	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2097	242	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2098	245	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
2099	259	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
2099	259	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
32909	264	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
32909	264	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
32909	264	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2100	265	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
2100	265	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
32910	267	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
32910	267	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
32910	267	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
32911	289	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
32911	289	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
32911	289	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2101	290	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2101	290	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
32912	304	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
32912	304	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
32912	304	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2102	305	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
2102	305	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
32913	347	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
32914	357	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
32915	375	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
2103	387	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
32916	391	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
32917	405	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
32917	405	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
32917	405	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2104	406	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2104	406	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
32802	203	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
32802	203	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
32803	205	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
32803	205	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
32804	210	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
32804	210	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
32805	216	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
32805	216	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1845	222	8	NelderMeadSimplex.java	iterate	best	RealPointValuePair	1	DEF	comparator.compare($, reflected) <= 0
1845	222	8	NelderMeadSimplex.java	iterate	secondBest	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1845	222	8	NelderMeadSimplex.java	iterate	reflected	RealPointValuePair	1	DEF	comparator.compare($, secondBest) < 0
1845	222	8	NelderMeadSimplex.java	iterate	reflected	RealPointValuePair	1	DEF	comparator.compare(best, $) <= 0
1845	222	8	NelderMeadSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
1845	222	8	NelderMeadSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(best, reflected) <= 0
1846	226	15	NelderMeadSimplex.java	iterate	best	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1846	226	15	NelderMeadSimplex.java	iterate	reflected	RealPointValuePair	1	DEF	comparator.compare($, best) < 0
1846	226	15	NelderMeadSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, best) < 0
32806	229	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
32806	229	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1847	235	12	NelderMeadSimplex.java	iterate	expanded	RealPointValuePair	1	DEF	comparator.compare($, reflected) < 0
1847	235	12	NelderMeadSimplex.java	iterate	reflected	RealPointValuePair	1	DEF	comparator.compare(expanded, $) < 0
1847	235	12	NelderMeadSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
1848	243	12	NelderMeadSimplex.java	iterate	worst	RealPointValuePair	1	RET	comparator.compare(reflected, $) < 0
1848	243	12	NelderMeadSimplex.java	iterate	reflected	RealPointValuePair	1	RET	comparator.compare($, worst) < 0
1848	243	12	NelderMeadSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	1	RET	$.compare(reflected, worst) < 0
32807	246	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
32807	246	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1849	251	16	NelderMeadSimplex.java	iterate	outContracted	RealPointValuePair	0	RET	comparator.compare($, reflected) <= 0
1849	251	16	NelderMeadSimplex.java	iterate	reflected	RealPointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
1849	251	16	NelderMeadSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
32808	259	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
32808	259	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1850	265	16	NelderMeadSimplex.java	iterate	inContracted	RealPointValuePair	0	RET	comparator.compare($, worst) < 0
1850	265	16	NelderMeadSimplex.java	iterate	worst	RealPointValuePair	0	RET	comparator.compare(inContracted, $) < 0
1850	265	16	NelderMeadSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(inContracted, worst) < 0
32809	274	12	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
32809	274	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
32810	276	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
32810	276	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
743	78	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	MathIllegalArgumentException	$[0] == null
31746	88	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	0	NIL-FOR	i < loop.$.length
31746	88	8	NestedLoops.java	NestedLoops	i	int	0	NIL-FOR	$ < loop.length
31746	88	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	NIL-FOR	i < $.length
744	99	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	1	DEF	Double.isInfinite($.polygon.getSize())
745	126	12	NestedLoops.java	add	THIS	NestedLoops	0	RET	$.child.$.polygon.contains(node.$.polygon)
745	126	12	NestedLoops.java	add	node	NestedLoops	0	RET	child.polygon.contains($.polygon)
31747	133	8	NestedLoops.java	add	iterator	Iterator<NestedLoops>	0	NIL-FOR	$.hasNext()
746	135	12	NestedLoops.java	add	THIS	NestedLoops	0	DEF	node.$.polygon.contains(child.$.polygon)
746	135	12	NestedLoops.java	add	child	NestedLoops	0	DEF	node.polygon.contains($.polygon)
746	135	12	NestedLoops.java	add	node	NestedLoops	0	DEF	$.polygon.contains(child.polygon)
747	144	12	NestedLoops.java	add	THIS	NestedLoops	0	MathIllegalArgumentException	factory.intersection(node.$.polygon, $.child.$.polygon).isEmpty()
747	144	12	NestedLoops.java	add	factory	RegionFactory<Euclidean2D>	0	MathIllegalArgumentException	$.intersection(node.polygon, child.polygon).isEmpty()
747	144	12	NestedLoops.java	add	node	NestedLoops	0	MathIllegalArgumentException	factory.intersection($.polygon, child.polygon).isEmpty()
748	170	8	NestedLoops.java	setClockWise	THIS	NestedLoops	0	DEF	$.originalIsClockwise ^ clockwise
748	170	8	NestedLoops.java	setClockWise	clockwise	boolean	0	DEF	originalIsClockwise ^ $
31748	174	12	NestedLoops.java	setClockWise	min	int	0	NIL-WHILE	++$ < --max
31748	174	12	NestedLoops.java	setClockWise	max	int	0	NIL-WHILE	++min < --$
2998	81	12	NewtonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
2998	81	12	NewtonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
2998	81	12	NewtonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
1583	137	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
1584	152	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1584	152	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
32596	153	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
32596	153	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
32597	163	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
32597	163	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1585	176	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	$ != null
1586	177	16	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	checker.converged(iter, $, current)
1586	177	16	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker	0	RET	$.converged(iter, previous, current)
1586	177	16	NonLinearConjugateGradientOptimizer.java	doOptimize	current	RealPointValuePair	0	RET	checker.converged(iter, previous, $)
1586	177	16	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
32598	193	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
32598	193	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
1587	198	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1587	198	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
32599	199	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
32599	199	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
32600	208	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
32600	208	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1588	213	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
32601	217	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
32601	217	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
32601	217	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
1589	225	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
1589	225	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	iter % $ == 0
1589	225	12	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	1	DEF	$ % n == 0
32602	231	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
32602	231	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
32603	253	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
1590	256	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
1590	256	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
2409	85	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
2409	85	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
2410	88	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
2410	88	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
2411	91	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
2411	91	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
33078	146	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
33078	146	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
33079	152	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
33079	152	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
33079	152	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
33080	155	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
33080	155	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
33080	155	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
33081	198	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
33082	202	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
33082	202	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
33082	202	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
33083	209	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
33083	209	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
2412	231	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
33084	235	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
33084	235	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
2413	240	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
2414	265	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
33085	267	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
33085	267	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
2415	275	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
2416	281	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
2416	281	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
948	76	8	NormalDistributionImpl.java	NormalDistributionImpl	sd	double	0	NotStrictlyPositiveException	$ <= 0
949	128	8	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	0	RET	FastMath.abs(dev) > 40 * $.standardDeviation
949	128	8	NormalDistributionImpl.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * standardDeviation
950	139	8	NormalDistributionImpl.java	cumulativeProbability	x0	double	0	NumberIsTooLargeException	$ > x1
950	139	8	NormalDistributionImpl.java	cumulativeProbability	x1	double	0	NumberIsTooLargeException	x0 > $
951	177	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
952	180	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
953	210	8	NormalDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < 0.5
954	231	8	NormalDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < 0.5
955	252	8	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < 0.5
956	254	15	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > 0.5
32978	107	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
32978	107	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
32979	108	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
32979	108	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
2200	109	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
2200	109	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
2200	109	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
2200	109	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
2201	135	8	OLSMultipleLinearRegression.java	calculateTotalSumOfSquares	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2202	185	8	OLSMultipleLinearRegression.java	calculateAdjustedRSquared	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2352	71	8	OnePointCrossover.java	crossover	first	Chromosome	0	IllegalArgumentException	$ instanceof AbstractListChromosome<?>
2352	71	8	OnePointCrossover.java	crossover	second	Chromosome	0	IllegalArgumentException	$ instanceof AbstractListChromosome<?>
2353	87	8	OnePointCrossover.java	crossover	length	int	0	IllegalArgumentException	$ != second.getLength()
2353	87	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	IllegalArgumentException	length != $.getLength()
33038	102	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
33038	102	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
33039	107	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
33039	107	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
2022	104	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	DEF	$ > 0.5
2022	104	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	DEF	$ <= 0
2023	127	8	OneWayAnovaImpl.java	anovaStats	categoryData	Collection<double[]>	0	DEF	$.size() < 2
2024	135	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	DEF	$.array.$.length <= 1
32858	154	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	NIL-FOR	i < $.data.$.length
32858	154	12	OneWayAnovaImpl.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
63	153	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
64	158	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
64	158	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
65	182	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
65	182	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
65	182	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
66	186	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
66	186	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
31657	191	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
31657	191	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
67	194	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
67	194	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
67	194	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
68	212	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
68	212	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
68	212	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
69	216	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
69	216	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
31658	221	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
31658	221	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
70	224	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
70	224	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
70	224	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
71	274	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
71	274	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
72	276	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
72	276	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
72	276	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
72	276	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
72	276	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
73	282	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
73	282	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
74	288	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
74	288	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
74	288	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
74	288	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
74	288	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
75	294	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
75	294	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
76	296	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
76	296	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
77	307	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
77	307	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
78	309	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
78	309	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
78	309	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
78	309	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
78	309	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
79	356	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
79	356	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
79	356	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
80	360	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
80	360	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
31659	365	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
31659	365	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
81	368	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
81	368	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
81	368	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
82	413	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
83	421	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
84	423	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
31660	447	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
31660	447	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
85	448	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
85	448	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
488	165	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
489	170	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
489	170	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
490	194	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
490	194	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
490	194	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
491	198	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
491	198	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
31718	203	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
31718	203	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
492	206	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
492	206	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
492	206	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
493	224	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
493	224	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
493	224	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
494	228	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
494	228	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
31719	233	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
31719	233	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
495	236	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
495	236	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
495	236	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
496	286	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
496	286	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
497	288	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
497	288	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
497	288	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
497	288	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
497	288	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
498	294	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
498	294	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
499	300	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
499	300	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
499	300	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
499	300	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
499	300	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
500	306	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
500	306	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
501	308	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
501	308	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
502	319	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
502	319	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
503	321	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
503	321	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
503	321	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
503	321	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
503	321	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
504	368	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
504	368	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
504	368	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
505	372	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
505	372	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
31720	377	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
31720	377	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
506	380	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
506	380	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
506	380	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
507	425	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
508	433	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
509	435	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
31721	459	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
31721	459	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
510	460	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
510	460	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
32505	97	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
32506	131	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
32507	153	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
32508	159	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
32508	159	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
32509	183	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
32510	189	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
32510	189	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
1455	191	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
1455	191	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
1455	191	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
1456	195	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
1457	226	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
1458	240	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
1459	254	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
32400	136	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
32400	136	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
32400	136	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
1363	138	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1363	138	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
32401	165	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
32401	165	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
32401	165	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
1364	167	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1364	167	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
32402	193	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
32402	193	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
1365	195	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1365	195	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
1366	226	8	OpenMapRealVector.java	add	v	RealVector	1	RET	$ instanceof OpenMapRealVector
32403	248	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1367	251	12	OpenMapRealVector.java	add	key	int	1	DEF	randomAccess.containsKey($)
1367	251	12	OpenMapRealVector.java	add	randomAccess	OpenIntToDoubleHashMap	1	DEF	$.containsKey(key)
32404	268	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1368	277	8	OpenMapRealVector.java	append	v	RealVector	1	RET	$ instanceof OpenMapRealVector
32405	281	12	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < v.getDimension()
32405	281	12	OpenMapRealVector.java	append	v	RealVector	0	NIL-FOR	i < $.getDimension()
32406	319	8	OpenMapRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
1369	329	8	OpenMapRealVector.java	dotProduct	v	RealVector	1	RET	$ instanceof OpenMapRealVector
32407	341	8	OpenMapRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
32408	353	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
32409	367	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1370	370	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
1370	370	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
1370	370	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
1370	370	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
32410	382	8	OpenMapRealVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
32411	405	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
32412	413	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1371	416	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1371	416	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
1372	428	8	OpenMapRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
32413	453	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
32414	459	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1373	462	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1373	462	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
1374	474	8	OpenMapRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
32415	490	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1375	493	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
1375	493	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
32416	498	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1376	501	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1376	501	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
1377	502	16	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
1377	502	16	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
1378	514	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
32417	525	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
1379	528	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
1380	531	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
32418	541	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
1381	543	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
32419	559	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
32419	559	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
1382	574	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isDefaultValue(value)
1382	574	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isDefaultValue($)
1383	576	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
1383	576	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
32420	586	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.getDimension()
32420	586	8	OpenMapRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < $.getDimension()
32421	594	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
32421	594	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
32422	611	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1384	614	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
1384	614	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1385	627	8	OpenMapRealVector.java	subtract	v	RealVector	1	RET	$ instanceof OpenMapRealVector
1386	646	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	MathArithmeticException	$.isDefaultValue(norm)
1386	646	8	OpenMapRealVector.java	unitize	norm	double	0	MathArithmeticException	isDefaultValue($)
32423	650	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
32424	677	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1387	693	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
1387	693	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
1388	696	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
1389	700	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
1389	700	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
1390	703	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
1390	703	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
32425	708	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1391	711	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
1391	711	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
32426	716	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1392	719	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
1392	719	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
1392	719	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
31725	139	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	NIL-FOR	i < components.$.length
31725	139	8	OrderedTuple.java	OrderedTuple	i	int	0	NIL-FOR	$ < components.length
31725	139	8	OrderedTuple.java	OrderedTuple	components	double	0	NIL-FOR	i < $.length
525	140	12	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isInfinite(components[$])
525	140	12	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isInfinite($[i])
526	141	16	OrderedTuple.java	OrderedTuple	i	int	1	DEF	components[$] < 0
526	141	16	OrderedTuple.java	OrderedTuple	components	double	1	DEF	$[i] < 0
527	146	19	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isNaN(components[$])
527	146	19	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isNaN($[i])
528	151	16	OrderedTuple.java	OrderedTuple	m	long	0	DEF	$ != 0
529	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.posInf
529	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.negInf
530	166	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	1	DEF	$.lsb <= msb
530	166	8	OrderedTuple.java	OrderedTuple	msb	int	1	DEF	lsb <= $
531	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding[0] == 0x0L
531	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding != null
531	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding.$.length == 1
31726	202	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	eIndex < $.encoding.$.length
31726	202	8	OrderedTuple.java	encode	eIndex	int	0	NIL-FOR	$ < encoding.length
31727	203	12	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	vIndex < $.components.$.length
31727	203	12	OrderedTuple.java	encode	vIndex	int	0	NIL-FOR	$ < components.length
532	204	16	OrderedTuple.java	encode	THIS	OrderedTuple	0	DEF	$.getBit(vIndex, k) != 0
532	204	16	OrderedTuple.java	encode	vIndex	int	0	DEF	getBit($, k) != 0
532	204	16	OrderedTuple.java	encode	k	int	0	DEF	getBit(vIndex, $) != 0
533	207	16	OrderedTuple.java	encode	shift	int	0	DEF	$-- == 0
534	248	8	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.components.$.length == ot.$.components.$.length
534	248	8	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	components.length == $.components.length
535	249	12	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.nan
536	251	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.nan
536	251	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.nan
537	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.negInf
537	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.posInf
537	253	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.posInf
538	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.negInf
538	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.posInf
538	255	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.negInf
539	259	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	DEF	$.offset < ot.$.offset
539	259	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	DEF	offset < $.offset
540	261	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	DEF	$.offset > ot.$.offset
540	261	23	OrderedTuple.java	compareTo	ot	OrderedTuple	0	DEF	offset > $.offset
31728	266	16	OrderedTuple.java	compareTo	i	int	0	NIL-FOR	$ < limit
31728	266	16	OrderedTuple.java	compareTo	limit	int	0	NIL-FOR	i < $
541	267	20	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding[i] < ot.$.encoding[i]
541	267	20	OrderedTuple.java	compareTo	i	int	1	RET	encoding[$] < ot.encoding[$]
541	267	20	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding[i] < $.encoding[i]
542	269	27	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.encoding[i] > ot.$.encoding[i]
542	269	27	OrderedTuple.java	compareTo	i	int	0	RET	encoding[$] > ot.encoding[$]
542	269	27	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	encoding[i] > $.encoding[i]
543	274	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length < ot.$.encoding.$.length
543	274	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length < $.encoding.length
544	276	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length > ot.$.encoding.$.length
544	276	23	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length > $.encoding.length
545	292	8	OrderedTuple.java	equals	THIS	OrderedTuple	1	RET	$ == other
545	292	8	OrderedTuple.java	equals	other	Object	1	RET	this == $
546	294	15	OrderedTuple.java	equals	other	Object	1	RET	$ instanceof OrderedTuple
31729	358	8	OrderedTuple.java	computeMSB	scale	int	0	NIL-WHILE	$ != 0
547	359	12	OrderedTuple.java	computeMSB	ll	long	0	DEF	($ & mask) != $
547	359	12	OrderedTuple.java	computeMSB	mask	long	0	DEF	(ll & $) != ll
31730	384	8	OrderedTuple.java	computeLSB	scale	int	0	NIL-WHILE	$ != 0
548	385	12	OrderedTuple.java	computeLSB	ll	long	0	DEF	($ & mask) == $
548	385	12	OrderedTuple.java	computeLSB	mask	long	0	DEF	(ll & $) == ll
549	406	8	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k > $.offset
549	406	8	OrderedTuple.java	getBit	e	int	1	RET	k < $
549	406	8	OrderedTuple.java	getBit	k	int	1	RET	$ < e
549	406	8	OrderedTuple.java	getBit	k	int	1	RET	$ > offset
550	408	15	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k == $.offset
550	408	15	OrderedTuple.java	getBit	k	int	1	RET	$ == offset
551	410	15	OrderedTuple.java	getBit	e	int	1	RET	k > ($ + 52)
551	410	15	OrderedTuple.java	getBit	k	int	1	RET	$ > (e + 52)
31738	72	8	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	NIL-FOR	i < outline.$.length
31738	72	8	OutlineExtractor.java	getOutline	i	int	0	NIL-FOR	$ < outline.length
31738	72	8	OutlineExtractor.java	getOutline	outline	Vector2D[][]	0	NIL-FOR	i < $.length
31739	76	12	OutlineExtractor.java	getOutline	end	int	0	NIL-WHILE	j < $
31739	76	12	OutlineExtractor.java	getOutline	j	int	0	NIL-WHILE	$ < end
692	77	16	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	1	DEF	$.pointIsBetween(rawLoop, end, j)
692	77	16	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	1	DEF	pointIsBetween($, end, j)
692	77	16	OutlineExtractor.java	getOutline	end	int	1	DEF	pointIsBetween(rawLoop, $, j)
692	77	16	OutlineExtractor.java	getOutline	j	int	1	DEF	pointIsBetween(rawLoop, end, $)
31740	79	20	OutlineExtractor.java	getOutline	k	int	0	NIL-FOR	$ < (end - 1)
31740	79	20	OutlineExtractor.java	getOutline	end	int	0	NIL-FOR	k < ($ - 1)
693	88	12	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	DEF	end != rawLoop.$.length
693	88	12	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	0	DEF	end != $.length
693	88	12	OutlineExtractor.java	getOutline	end	int	0	DEF	$ != rawLoop.length
31	84	8	Pair.java	equals	o	Object	0	RET	$ == null
32	87	8	Pair.java	equals	o	Object	1	RET	$ instanceof Pair
1039	51	8	PascalDistributionImpl.java	PascalDistributionImpl	r	int	0	NotPositiveException	$ < 0
1040	55	8	PascalDistributionImpl.java	PascalDistributionImpl	p	double	0	OutOfRangeException	$ > 1
1040	55	8	PascalDistributionImpl.java	PascalDistributionImpl	p	double	0	OutOfRangeException	$ < 0
1041	113	8	PascalDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
1042	130	8	PascalDistributionImpl.java	probability	x	int	1	DEF	$ < 0
1043	158	8	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1044	160	15	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
2085	97	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	NullArgumentException	$ == null
32894	142	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
32894	142	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
32895	143	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
32895	143	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
32896	168	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
32896	168	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
32897	169	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
32897	169	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
2086	170	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
2086	170	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
32898	193	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
32898	193	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
32899	194	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
32899	194	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
2087	230	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2087	230	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2087	230	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2088	232	15	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DEF	xArray.$.length < 2
2088	232	15	PearsonsCorrelation.java	correlation	xArray	double[]	1	DEF	$.length < 2
32900	236	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
32900	236	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
32900	236	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
32901	257	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
32901	257	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
32902	260	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
32902	260	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
2089	279	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	DEF	$ < 2
2089	279	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	DEF	$ < 2
1972	133	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
1973	145	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
1974	261	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ > 100
1974	261	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ <= 0
1975	264	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
1976	267	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
1977	277	8	Percentile.java	evaluate	THIS	Percentile	1	DEF	values == $.getDataRef()
1977	277	8	Percentile.java	evaluate	values	double[]	1	DEF	$ == getDataRef()
1978	287	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
1979	290	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
1979	290	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
32845	315	8	Percentile.java	select	begin	int	0	NIL-WHILE	end - $ > MIN_SELECT_SIZE
32845	315	8	Percentile.java	select	end	int	0	NIL-WHILE	$ - begin > MIN_SELECT_SIZE
1980	318	12	Percentile.java	select	THIS	Percentile	1	DEF	node < pivotsHeap.$.length
1980	318	12	Percentile.java	select	node	int	1	DEF	$ < pivotsHeap.length
1980	318	12	Percentile.java	select	node	int	1	DEF	pivotsHeap[$] >= 0
1980	318	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	node < $.length
1980	318	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	$[node] >= 0
1981	325	16	Percentile.java	select	THIS	Percentile	0	DEF	node < pivotsHeap.$.length
1981	325	16	Percentile.java	select	node	int	0	DEF	$ < pivotsHeap.length
1981	325	16	Percentile.java	select	pivotsHeap	int[]	0	DEF	node < $.length
1982	330	12	Percentile.java	select	pivot	int	1	RET	k == $
1982	330	12	Percentile.java	select	k	int	1	RET	$ == pivot
1983	333	19	Percentile.java	select	pivot	int	1	DEF	k < $
1983	333	19	Percentile.java	select	k	int	1	DEF	$ < pivot
1984	367	8	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wMiddle
1984	367	8	Percentile.java	medianOf3	wMiddle	double	1	RET	wBegin < $
1985	368	12	Percentile.java	medianOf3	wMiddle	double	1	RET	$ < wEnd
1985	368	12	Percentile.java	medianOf3	wEnd	double	1	RET	wMiddle < $
1986	374	12	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wEnd
1986	374	12	Percentile.java	medianOf3	wEnd	double	1	RET	wBegin < $
32846	403	8	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
32846	403	8	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
32847	404	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[j] >= $
32847	404	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
32847	404	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
32847	404	12	Percentile.java	partition	j	int	0	NIL-WHILE	work[$] >= value
32847	404	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[j] >= value
32848	407	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[i] <= $
32848	407	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
32848	407	12	Percentile.java	partition	i	int	0	NIL-WHILE	work[$] <= value
32848	407	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
32848	407	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[i] <= value
1987	411	12	Percentile.java	partition	i	int	0	DEF	$ < j
1987	411	12	Percentile.java	partition	j	int	0	DEF	i < $
1988	418	8	Percentile.java	partition	value	double	0	DEF	work[i] > $
1988	418	8	Percentile.java	partition	i	int	0	DEF	work[$] > value
1988	418	8	Percentile.java	partition	i	int	0	DEF	$ >= end
1988	418	8	Percentile.java	partition	work	double[]	0	DEF	$[i] > value
1988	418	8	Percentile.java	partition	end	int	0	DEF	i >= $
32849	434	8	Percentile.java	insertionSort	j	int	0	NIL-FOR	$ < end
32849	434	8	Percentile.java	insertionSort	end	int	0	NIL-FOR	j < $
32850	437	12	Percentile.java	insertionSort	saved	double	0	NIL-WHILE	$ < work[i]
32850	437	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	$ >= begin
32850	437	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	saved < work[$]
32850	437	12	Percentile.java	insertionSort	work	double[]	0	NIL-WHILE	saved < $[i]
32850	437	12	Percentile.java	insertionSort	begin	int	0	NIL-WHILE	i >= $
1989	464	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ > 100
1989	464	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ <= 0
1990	493	8	Percentile.java	copy	THIS	Percentile	0	DEF	source.$.cachedPivots != null
1990	493	8	Percentile.java	copy	source	Percentile	0	DEF	$.cachedPivots != null
632	138	8	Plane.java	setNormal	norm	double	0	MathArithmeticException	$ < 1.0e-10
633	308	8	Plane.java	intersection	dot	double	0	RET	FastMath.abs($) < 1.0e-10
634	323	8	Plane.java	intersection	direction	Vector3D	0	RET	$.getNorm() < 1.0e-10
635	360	8	Plane.java	intersection	determinant	double	0	RET	FastMath.abs($) < 1.0e-10
943	85	8	PoissonDistributionImpl.java	PoissonDistributionImpl	p	double	0	NotStrictlyPositiveException	$ <= 0
944	131	8	PoissonDistributionImpl.java	probability	x	int	1	DEF	$ < 0
944	131	8	PoissonDistributionImpl.java	probability	x	int	1	DEF	$ == Integer.MAX_VALUE
945	133	15	PoissonDistributionImpl.java	probability	x	int	1	DEF	$ == 0
946	154	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ < 0
947	157	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
727	132	8	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	v.$.length == 0
727	132	8	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$.length == 0
728	133	12	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	(Boolean) $.getTree(false).getAttribute()
729	140	15	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$[0][0] == null
730	166	12	PolygonsSet.java	computeGeometricalProperties	sum	double	1	DEF	$ < 0
731	203	8	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	$.vertices == null
732	204	12	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.getTree(false).getCut() == null
31743	216	16	PolygonsSet.java	getVertices	sorted	AVLTree<ComparableSegment>	0	NIL-WHILE	$.isEmpty()
733	219	20	PolygonsSet.java	getVertices	loop	List<ComparableSegment>	0	DEF	$ != null
734	229	20	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.size() < 2
735	237	27	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.get(0).getStart() == null
736	243	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == 0
737	251	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j < (array.$.length - 1)
737	251	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j < ($.length - 1)
737	251	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ < (array.length - 1)
738	256	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j == (array.$.length - 1)
738	256	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j == ($.length - 1)
738	256	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == (array.length - 1)
31744	302	8	PolygonsSet.java	followLoop	globalStart	Vector2D	0	NIL-WHILE	$.distance(end) > 1.0e-10
31744	302	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	globalStart.distance($) > 1.0e-10
31744	302	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	$ != null
31744	302	8	PolygonsSet.java	followLoop	open	boolean	0	NIL-WHILE	$
31745	310	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$.getElement().compareTo(upperRight) <= 0
31745	310	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$ != null
31745	310	12	PolygonsSet.java	followLoop	upperRight	ComparableSegment	0	NIL-FOR	n.getElement().compareTo($) <= 0
739	315	16	PolygonsSet.java	followLoop	distance	double	0	DEF	$ < selectedDistance
739	315	16	PolygonsSet.java	followLoop	selectedDistance	double	0	DEF	distance < $
740	322	12	PolygonsSet.java	followLoop	selectedDistance	double	0	RET	$ > 1.0e-10
741	335	8	PolygonsSet.java	followLoop	loop	ArrayList<ComparableSegment>	0	RET	$.size() == 2
741	335	8	PolygonsSet.java	followLoop	open	boolean	0	RET	$
742	340	8	PolygonsSet.java	followLoop	end	Vector2D	0	MathInternalError	$ == null
742	340	8	PolygonsSet.java	followLoop	open	boolean	0	MathInternalError	$
694	118	8	PolyhedronsSet.java	computeGeometricalProperties	THIS	PolyhedronsSet	1	DEF	$.getSize() < 0
695	216	8	PolyhedronsSet.java	recurseFirstIntersection	cut	SubHyperplane<Euclidean3D>	0	RET	$ == null
696	228	8	PolyhedronsSet.java	recurseFirstIntersection	offset	double	1	DEF	$ < 0
697	236	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
698	239	12	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
699	246	8	PolyhedronsSet.java	recurseFirstIntersection	crossed	SubHyperplane<Euclidean3D>	0	RET	$ != null
700	250	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
701	253	12	PolyhedronsSet.java	recurseFirstIntersection	hit3D	Vector3D	0	RET	$ != null
702	255	16	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
703	278	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
703	278	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
703	278	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusOutside() != null
703	278	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
704	282	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
704	282	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
704	282	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
704	282	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusInside() != null
3098	70	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NoDataException	$ == 0
33371	73	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	c[$ - 1] == 0
33371	73	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	$ > 1
33371	73	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[n - 1] == 0
3099	130	8	PolynomialFunction.java	evaluate	n	int	0	NoDataException	$ == 0
33372	134	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >= 0
33373	153	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
33373	153	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
33374	178	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
33374	178	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
3100	181	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
3100	181	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
33375	182	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
33375	182	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
33376	200	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
33376	200	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
33377	215	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
33377	215	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
33377	215	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
33378	217	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < FastMath.min($.coefficients.$.length, i + 1)
33378	217	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < FastMath.min(coefficients.length, i + 1)
33378	217	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < FastMath.min(coefficients.length, $ + 1)
3101	239	8	PolynomialFunction.java	differentiate	n	int	0	NoDataException	$ == 0
3102	242	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
33379	246	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
3103	288	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
3104	289	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
33380	296	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
33380	296	8	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
3105	297	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
3105	297	12	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
3106	298	16	PolynomialFunction.java	toString	s	StringBuilder	1	DEF	$.length() > 0
3107	299	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
3107	299	20	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
3108	305	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
3108	305	20	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
3109	311	16	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
3110	317	16	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
3111	335	8	PolynomialFunction.java	toString	c	String	1	RET	$.endsWith(".0")
3112	354	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
3112	354	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
3113	357	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
3114	361	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
3114	361	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
3090	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.verifyInterpolationArray(x, y, false)
3090	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	x	double	0	DEF	verifyInterpolationArray($, y, false)
3090	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	y	double	0	DEF	verifyInterpolationArray(x, $, false)
3091	147	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
3092	172	8	PolynomialFunctionLagrangeForm.java	evaluate	THIS	PolynomialFunctionLagrangeForm	0	RET	$.verifyInterpolationArray(x, y, false)
3092	172	8	PolynomialFunctionLagrangeForm.java	evaluate	x	double	0	RET	verifyInterpolationArray($, y, false)
3092	172	8	PolynomialFunctionLagrangeForm.java	evaluate	y	double	0	RET	verifyInterpolationArray(x, $, false)
33362	210	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
33362	210	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
3093	216	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	dist	double	0	DEF	$ < min_dist
3093	216	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	min_dist	double	0	DEF	dist < $
33363	225	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
33363	225	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
33364	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	j	int	0	NIL-FOR	$ < n-i
33364	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	j < n-$
33364	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	j < $-i
3094	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	1	DEF	nearest < 0.5*(n-$+1)
3094	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	nearest	int	1	DEF	$ < 0.5*(n-i+1)
3094	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	1	DEF	nearest < 0.5*($-i+1)
33365	256	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
33365	256	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
33366	263	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
33366	263	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
33367	264	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
33368	272	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
33368	272	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
33369	275	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
33369	275	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
3095	276	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
3095	276	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
33370	286	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
3096	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DimensionMismatchException	x.$.length != y.$.length
3096	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DimensionMismatchException	$.length != y.length
3096	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DimensionMismatchException	x.length != $.length
3097	317	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	NumberIsTooSmallException	x.$.length < 2
3097	317	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	NumberIsTooSmallException	$.length < 2
3116	140	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
33384	168	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
33385	183	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
33385	183	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
33386	188	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
33387	189	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
3117	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	c.$.length == 0
3117	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	a.$.length == 0
3117	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	NoDataException	$.length == 0
3117	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	NoDataException	$.length == 0
3118	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DimensionMismatchException	a.$.length != c.$.length + 1
3118	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DimensionMismatchException	$.length != c.length + 1
3118	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DimensionMismatchException	a.length != $.length + 1
3084	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NullArgumentException	$ == null
3084	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	NullArgumentException	$ == null
3085	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	NumberIsTooSmallException	knots.$.length < 2
3085	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NumberIsTooSmallException	$.length < 2
3086	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DimensionMismatchException	knots.$.length - 1 != polynomials.$.length
3086	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DimensionMismatchException	$.length - 1 != polynomials.length
3086	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DimensionMismatchException	knots.length - 1 != $.length
3087	133	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v < $.knots[0]
3087	133	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v > $.knots[$.n]
3087	133	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ < knots[0]
3087	133	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ > knots[n]
3088	137	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
3089	143	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
3089	143	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
33361	165	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
33361	165	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
3115	199	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
3115	199	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
33381	215	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
33381	215	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
33382	235	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
33382	235	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
33383	251	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
33383	251	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
1836	84	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1837	87	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
32798	123	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
32798	123	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
32799	143	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
32799	143	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1838	154	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
1838	154	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
1838	154	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
1839	167	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
1840	168	16	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<RealPointValuePair>	0	DEF	$ != null
1841	172	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
1842	173	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
1842	173	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
32800	182	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
32800	182	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1843	190	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
1843	190	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
1844	197	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
32801	230	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
32801	230	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
1876	122	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length, true)
1876	122	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1876	122	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1876	122	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
32825	124	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
32825	124	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
32825	124	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1877	162	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, weights, begin, length, true)
1877	162	8	Product.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
1877	162	8	Product.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
1877	162	8	Product.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
1877	162	8	Product.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
32826	164	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
32826	164	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
32826	164	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
875	100	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
876	103	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
877	138	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
878	149	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
879	162	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
880	170	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
881	201	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
882	209	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
883	216	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
884	220	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
885	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
858	101	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
859	138	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
860	149	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
861	162	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
862	170	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
863	201	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
864	209	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
865	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
32241	87	8	QRDecompositionImpl.java	QRDecompositionImpl	minor	int	0	NIL-FOR	$ < FastMath.min(m, n)
32241	87	8	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	minor < FastMath.min($, n)
32241	87	8	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	minor < FastMath.min(m, $)
32242	99	12	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
32242	99	12	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
1325	106	12	QRDecompositionImpl.java	QRDecompositionImpl	a	double	0	DEF	$ != 0.0
32243	130	16	QRDecompositionImpl.java	QRDecompositionImpl	col	int	0	NIL-FOR	$ < n
32243	130	16	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	col < $
32244	133	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
32244	133	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
32245	139	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
32245	139	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
1326	150	8	QRDecompositionImpl.java	getR	THIS	QRDecompositionImpl	0	DEF	$.cachedR == null
32246	158	12	QRDecompositionImpl.java	getR	row	int	0	NIL-FOR	$ >= 0
32247	160	16	QRDecompositionImpl.java	getR	col	int	0	NIL-FOR	$ < n
32247	160	16	QRDecompositionImpl.java	getR	n	int	0	NIL-FOR	col < $
1327	172	8	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	DEF	$.cachedQ == null
1328	180	8	QRDecompositionImpl.java	getQT	THIS	QRDecompositionImpl	0	DEF	$.cachedQT == null
32248	192	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= FastMath.min(m, n)
32248	192	12	QRDecompositionImpl.java	getQT	n	int	0	NIL-FOR	minor >= FastMath.min(m, $)
32248	192	12	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	minor >= FastMath.min($, n)
32249	196	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= 0
1329	199	16	QRDecompositionImpl.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
1329	199	16	QRDecompositionImpl.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
32250	200	20	QRDecompositionImpl.java	getQT	col	int	0	NIL-FOR	$ < m
32250	200	20	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	col < $
32251	202	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
32251	202	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
32252	207	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
32252	207	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
1330	221	8	QRDecompositionImpl.java	getH	THIS	QRDecompositionImpl	0	DEF	$.cachedH == null
32253	226	12	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	$ < m
32253	226	12	QRDecompositionImpl.java	getH	m	int	0	NIL-FOR	i < $
32254	227	16	QRDecompositionImpl.java	getH	j	int	0	NIL-FOR	$ < FastMath.min(i + 1, n)
32254	227	16	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	j < FastMath.min($ + 1, n)
32254	227	16	QRDecompositionImpl.java	getH	n	int	0	NIL-FOR	j < FastMath.min(i + 1, $)
2262	178	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2263	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2264	193	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2265	198	8	RandomDataImpl.java	nextHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
33004	213	8	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
33004	213	8	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
33004	213	8	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
2266	224	12	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
2267	244	8	RandomDataImpl.java	nextInt	lower	int	0	NumberIsTooLargeException	$ >= upper
2267	244	8	RandomDataImpl.java	nextInt	upper	int	0	NumberIsTooLargeException	lower >= $
2268	264	8	RandomDataImpl.java	nextLong	lower	long	0	NumberIsTooLargeException	$ >= upper
2268	264	8	RandomDataImpl.java	nextLong	upper	long	0	NumberIsTooLargeException	lower >= $
2269	294	8	RandomDataImpl.java	nextSecureHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
33005	313	8	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
33005	313	8	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
33006	322	12	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
33006	322	12	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
33006	322	12	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
2270	333	16	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
2271	355	8	RandomDataImpl.java	nextSecureInt	lower	int	0	NumberIsTooLargeException	$ >= upper
2271	355	8	RandomDataImpl.java	nextSecureInt	upper	int	0	NumberIsTooLargeException	lower >= $
2272	376	8	RandomDataImpl.java	nextSecureLong	lower	long	0	NumberIsTooLargeException	$ >= upper
2272	376	8	RandomDataImpl.java	nextSecureLong	upper	long	0	NumberIsTooLargeException	lower >= $
2273	402	8	RandomDataImpl.java	nextPoisson	mean	double	0	NotStrictlyPositiveException	$ <= 0
2274	407	8	RandomDataImpl.java	nextPoisson	pivot	double	1	RET	mean < $
2274	407	8	RandomDataImpl.java	nextPoisson	mean	double	1	RET	$ < pivot
33007	414	12	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
33007	414	12	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
2275	417	16	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
2275	417	16	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
2276	449	16	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= p1
2276	449	16	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u <= $
2277	452	20	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	x < -$
2277	452	20	RandomDataImpl.java	nextPoisson	delta	double	0	DEF	x > $
2277	452	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ < -lambda
2277	452	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ > delta
2278	459	20	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
2278	459	20	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u > $ + p2
2278	459	20	RandomDataImpl.java	nextPoisson	p2	double	1	DEF	u > p1 + $
2279	470	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < -t
2279	470	16	RandomDataImpl.java	nextPoisson	a	int	0	DEF	$ == 0
2279	470	16	RandomDataImpl.java	nextPoisson	t	double	0	DEF	v < -$
2280	476	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < qa
2280	476	16	RandomDataImpl.java	nextPoisson	qa	double	0	DEF	v < $
2281	480	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ > qr
2281	480	16	RandomDataImpl.java	nextPoisson	qr	double	0	DEF	v > $
2282	483	16	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - MathUtils.factorialLog((int) (y + $)) + logLambdaFactorial
2282	483	16	RandomDataImpl.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - MathUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
2282	483	16	RandomDataImpl.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - MathUtils.factorialLog((int) (y + lambda)) + $
2282	483	16	RandomDataImpl.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - MathUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
2282	483	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - MathUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
2283	505	8	RandomDataImpl.java	nextGaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
2284	527	8	RandomDataImpl.java	nextExponential	mean	double	0	NotStrictlyPositiveException	$ <= 0.0
33008	536	8	RandomDataImpl.java	nextExponential	u	double	0	NIL-WHILE	$ < 0.5
2285	545	8	RandomDataImpl.java	nextExponential	u	double	0	RET	$ <= EXPONENTIAL_SA_QI[0]
33009	555	8	RandomDataImpl.java	nextExponential	u	double	0	NIL-DOWHILE	$ > EXPONENTIAL_SA_QI[i]
33009	555	8	RandomDataImpl.java	nextExponential	i	int	0	NIL-DOWHILE	u > EXPONENTIAL_SA_QI[$]
2286	559	12	RandomDataImpl.java	nextExponential	u2	double	0	DEF	$ < umin
2286	559	12	RandomDataImpl.java	nextExponential	umin	double	0	DEF	u2 < $
2287	587	8	RandomDataImpl.java	nextUniform	lower	double	0	NumberIsTooLargeException	$ >= upper
2287	587	8	RandomDataImpl.java	nextUniform	upper	double	0	NumberIsTooLargeException	lower >= $
33010	595	8	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
2288	699	8	RandomDataImpl.java	nextGamma	shape	double	0	RET	$ < 1
2289	708	16	RandomDataImpl.java	nextGamma	p	double	1	RET	$ <= 1
2290	714	20	RandomDataImpl.java	nextGamma	x	double	1	DEF	u2 > FastMath.exp(-$)
2290	714	20	RandomDataImpl.java	nextGamma	u2	double	1	DEF	$ > FastMath.exp(-x)
2291	726	20	RandomDataImpl.java	nextGamma	x	double	1	DEF	u2 > FastMath.pow($, shape - 1)
2291	726	20	RandomDataImpl.java	nextGamma	u2	double	1	DEF	$ > FastMath.pow(x, shape - 1)
2291	726	20	RandomDataImpl.java	nextGamma	shape	double	1	DEF	u2 > FastMath.pow(x, $ - 1)
2292	746	12	RandomDataImpl.java	nextGamma	v	double	0	DEF	$ <= 0
2293	754	12	RandomDataImpl.java	nextGamma	xx	double	0	RET	u < 1 - 0.0331*$*$
2293	754	12	RandomDataImpl.java	nextGamma	u	double	0	RET	$ < 1 - 0.0331*xx*xx
2294	758	12	RandomDataImpl.java	nextGamma	v	double	0	RET	FastMath.log(u) < 0.5*xx + d*(1 - $ + FastMath.log($))
2294	758	12	RandomDataImpl.java	nextGamma	xx	double	0	RET	FastMath.log(u) < 0.5*$ + d*(1 - v + FastMath.log(v))
2294	758	12	RandomDataImpl.java	nextGamma	u	double	0	RET	FastMath.log($) < 0.5*xx + d*(1 - v + FastMath.log(v))
2294	758	12	RandomDataImpl.java	nextGamma	d	double	0	RET	FastMath.log(u) < 0.5*xx + $*(1 - v + FastMath.log(v))
2295	849	8	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
2296	865	8	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
2297	882	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
2298	896	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
2299	912	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
2300	923	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
2301	985	8	RandomDataImpl.java	nextPermutation	n	int	0	NumberIsTooLargeException	k > $
2301	985	8	RandomDataImpl.java	nextPermutation	k	int	0	NumberIsTooLargeException	$ > n
2302	989	8	RandomDataImpl.java	nextPermutation	k	int	0	NotStrictlyPositiveException	$ == 0
33011	997	8	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
33011	997	8	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
2303	1024	8	RandomDataImpl.java	nextSample	len	int	0	NumberIsTooLargeException	k > $
2303	1024	8	RandomDataImpl.java	nextSample	k	int	0	NumberIsTooLargeException	$ > len
2304	1028	8	RandomDataImpl.java	nextSample	k	int	0	NotStrictlyPositiveException	$ <= 0
33012	1035	8	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
33012	1035	8	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
2305	1067	8	RandomDataImpl.java	nextInversionDeviate	glb	int	1	RET	distribution.cumulativeProbability($) == 1.0d
2305	1067	8	RandomDataImpl.java	nextInversionDeviate	distribution	IntegerDistribution	1	RET	$.cumulativeProbability(glb) == 1.0d
33013	1087	8	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
33013	1087	8	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
2306	1088	12	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
33014	1108	8	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
33014	1108	8	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
2343	123	8	RandomKey.java	decodeGeneric	l	int	0	IllegalArgumentException	representation.size() != $
2343	123	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	IllegalArgumentException	$.size() != l
2344	126	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	IllegalArgumentException	$.size() != sortedRepr.size()
2344	126	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	IllegalArgumentException	representation.size() != $.size()
33032	134	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
33032	134	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
2345	152	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
2346	157	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
2346	157	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
33033	166	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
33033	166	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
2347	167	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
2347	167	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
2347	167	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
2348	181	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
2348	181	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
33034	199	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
33034	199	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
33035	215	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
33035	215	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
2349	255	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	IllegalArgumentException	$.size() != permutedData.size()
2349	255	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	IllegalArgumentException	originalData.size() != $.size()
33036	263	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
33036	263	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
2350	265	12	RandomKey.java	inducedPermutation	index	int	0	IllegalArgumentException	$ == -1
33037	290	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
33037	290	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
2324	41	8	RandomKeyMutation.java	mutate	original	Chromosome	0	DEF	$ instanceof RandomKey<?>
1393	161	8	RealVector.java	checkVectorDimensions	d	int	0	DimensionMismatchException	$ != n
1393	161	8	RealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	d != $
1394	173	8	RealVector.java	checkIndex	THIS	RealVector	0	OutOfRangeException	index >= $.getDimension()
1394	173	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1394	173	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
32427	193	8	RealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
32427	193	8	RealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
32427	193	8	RealVector.java	add	e	Entry	0	NIL-WHILE	($ = it.next()) != null
32428	213	8	RealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
32428	213	8	RealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
32428	213	8	RealVector.java	subtract	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1395	239	8	RealVector.java	mapAddToSelf	d	double	0	RET	$ != 0
32429	265	8	RealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
32429	265	8	RealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
32429	265	8	RealVector.java	dotProduct	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1396	282	8	RealVector.java	cosine	norm	double	0	MathArithmeticException	$ == 0
1396	282	8	RealVector.java	cosine	vNorm	double	0	MathArithmeticException	$ == 0
32430	328	8	RealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
32430	328	8	RealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
32430	328	8	RealVector.java	getDistance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
32431	349	8	RealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
32431	349	8	RealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
32431	349	8	RealVector.java	getNorm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
32432	370	8	RealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
32432	370	8	RealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
32432	370	8	RealVector.java	getL1Norm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
32433	390	8	RealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
32433	390	8	RealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
32433	390	8	RealVector.java	getLInfNorm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
32434	412	8	RealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
32434	412	8	RealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
32434	412	8	RealVector.java	getL1Distance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
32435	437	8	RealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
32435	437	8	RealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
32435	437	8	RealVector.java	getLInfDistance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
32436	453	8	RealVector.java	getMinIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1397	455	12	RealVector.java	getMinIndex	entry	Entry	0	DEF	$.getValue() <= minValue
1397	455	12	RealVector.java	getMinIndex	minValue	double	0	DEF	entry.getValue() <= $
32437	484	8	RealVector.java	getMaxIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1398	486	12	RealVector.java	getMaxIndex	entry	Entry	0	DEF	$.getValue() >= maxValue
1398	486	12	RealVector.java	getMaxIndex	maxValue	double	0	DEF	entry.getValue() >= $
1399	580	8	RealVector.java	outerProduct	v	RealVector	1	DEF	$ instanceof SparseRealVector
32438	589	8	RealVector.java	outerProduct	thisIt	Iterator<Entry>	0	NIL-WHILE	(thisE = $.next()) != null
32438	589	8	RealVector.java	outerProduct	thisIt	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
32438	589	8	RealVector.java	outerProduct	thisE	Entry	0	NIL-WHILE	($ = thisIt.next()) != null
32439	592	12	RealVector.java	outerProduct	otherIt	Iterator<Entry>	0	NIL-WHILE	(otherE = $.next()) != null
32439	592	12	RealVector.java	outerProduct	otherIt	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
32439	592	12	RealVector.java	outerProduct	otherE	Entry	0	NIL-WHILE	($ = otherIt.next()) != null
32440	620	8	RealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
32440	620	8	RealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
32440	620	8	RealVector.java	set	e	Entry	0	NIL-WHILE	($ = it.next()) != null
32441	635	8	RealVector.java	toArray	i	int	0	NIL-FOR	$ < dim
32441	635	8	RealVector.java	toArray	dim	int	0	NIL-FOR	i < $
32442	759	8	RealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
32442	759	8	RealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
32442	759	8	RealVector.java	mapToSelf	e	Entry	0	NIL-WHILE	($ = it.next()) != null
32443	796	8	RealVector.java	combineToSelf	THIS	RealVector	0	NIL-FOR	i < $.getDimension()
32443	796	8	RealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < getDimension()
32232	202	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
32232	202	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
1312	203	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
1313	226	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1314	246	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
1314	246	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1314	246	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
32233	252	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
1315	254	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
1316	256	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
1316	256	16	RealVectorFormat.java	parse	source	String	0	DEF	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
1316	256	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
1317	261	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
1318	264	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
1319	278	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
1319	278	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1319	278	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
32234	284	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
32234	284	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
32234	284	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
31896	60	8	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
31896	60	8	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
31897	65	8	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	loop	boolean	0	NIL-FOR	$
31898	69	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
31898	69	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
1081	72	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	ii	int	0	DEF	c[$][$] > c[isi][isi]
1081	72	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	isi	int	0	DEF	c[ii][ii] > c[$][$]
1081	72	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
1082	79	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	swap	int[]	0	DEF	$[r] != r
1082	79	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	r	int	0	DEF	swap[$] != $
1083	87	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	ir	int	1	NonPositiveDefiniteMatrixException	c[$][$] < small
1083	87	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	c	double[][]	1	NonPositiveDefiniteMatrixException	$[ir][ir] < small
1083	87	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	small	double	1	NonPositiveDefiniteMatrixException	c[ir][ir] < $
1084	89	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	r	int	0	NonPositiveDefiniteMatrixException	$ == 0
31899	94	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
31899	94	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
1085	95	20	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	i	int	0	NonPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1085	95	20	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	c	double[][]	0	NonPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1085	95	20	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	index	int[]	0	NonPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1085	95	20	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	small	double	0	NonPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
31900	113	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
31900	113	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
31901	118	20	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	j	int	0	NIL-FOR	$ < i
31901	118	20	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	i	int	0	NIL-FOR	j < $
31902	134	8	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
31902	134	8	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
31903	135	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	j	int	0	NIL-FOR	$ < r
31903	135	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	r	int	0	NIL-FOR	j < $
616	44	8	RegionFactory.java	buildConvex	THIS	RegionFactory	0	RET	hyperplanes.$.length == 0
616	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$.length == 0
616	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$ == null
617	55	12	RegionFactory.java	buildConvex	THIS	RegionFactory	0	DEF	node.insertCut($.hyperplane)
617	55	12	RegionFactory.java	buildConvex	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
618	137	8	RegionFactory.java	recurseComplement	node	BSPTree<S>	0	RET	$.getCut() == null
619	143	8	RegionFactory.java	recurseComplement	attribute	BoundaryAttribute<S>	0	DEF	$ != null
2218	100	8	RegressionResults.java	RegressionResults	copyData	boolean	1	DEF	$
32984	103	12	RegressionResults.java	RegressionResults	THIS	RegressionResults	0	NIL-FOR	i < varcov.$.length
32984	103	12	RegressionResults.java	RegressionResults	i	int	0	NIL-FOR	$ < varcov.length
32984	103	12	RegressionResults.java	RegressionResults	varcov	double[][]	0	NIL-FOR	i < $.length
2219	117	8	RegressionResults.java	RegressionResults	rank	int	0	DEF	$ > 2
2220	129	8	RegressionResults.java	RegressionResults	containsConstant	boolean	1	DEF	$
2221	150	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2222	153	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	IndexOutOfBoundsException	index >= $.parameters.length
2222	153	8	RegressionResults.java	getParameterEstimate	index	int	0	IndexOutOfBoundsException	$ >= this.parameters.length
2222	153	8	RegressionResults.java	getParameterEstimate	index	int	0	IndexOutOfBoundsException	$ < 0
2223	170	8	RegressionResults.java	getParameterEstimates	THIS	RegressionResults	0	RET	$.parameters == null
2224	186	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2225	189	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	IndexOutOfBoundsException	index >= $.parameters.length
2225	189	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	IndexOutOfBoundsException	$ >= this.parameters.length
2225	189	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	IndexOutOfBoundsException	$ < 0
2226	193	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	Double.isNaN($)
2226	193	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	$ > Double.MIN_VALUE
2227	211	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	RET	$.parameters == null
32985	215	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	NIL-FOR	i < $.parameters.length
32985	215	8	RegressionResults.java	getStdErrorOfEstimates	i	int	0	NIL-FOR	$ < this.parameters.length
2228	217	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	Double.isNaN($)
2228	217	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	$ > Double.MIN_VALUE
2229	238	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2230	241	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	IndexOutOfBoundsException	i >= $.parameters.length
2230	241	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	IndexOutOfBoundsException	$ >= this.parameters.length
2230	241	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	IndexOutOfBoundsException	$ < 0
2231	245	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	IndexOutOfBoundsException	j >= $.parameters.length
2231	245	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	IndexOutOfBoundsException	$ >= this.parameters.length
2231	245	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	IndexOutOfBoundsException	$ < 0
2232	261	8	RegressionResults.java	getNumberOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2233	400	8	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.isSymmetricVCD
2234	401	12	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.varCovData.length > 1
2235	403	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ == j
2235	403	16	RegressionResults.java	getVcvElement	j	int	1	RET	i == $
2236	405	23	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	i >= $.varCovData[j].length
2236	405	23	RegressionResults.java	getVcvElement	i	int	1	RET	$ >= varCovData[j].length
2236	405	23	RegressionResults.java	getVcvElement	j	int	1	RET	i >= varCovData[$].length
2237	411	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ > j
2237	411	16	RegressionResults.java	getVcvElement	j	int	1	RET	i > $
34	182	8	ResizableDoubleArray.java	ResizableDoubleArray	initialArray	double[]	1	DEF	$ == null
35	301	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
36	305	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
37	344	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
38	354	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
39	370	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	DEF	$.numElements < 1
40	395	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	DEF	$ < expansion
40	395	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	DEF	contraction < $
41	401	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	DEF	$ <= 1.0
42	407	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	DEF	$ <= 1.0
43	494	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	DEF	i > $.numElements
43	494	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ > numElements
44	498	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ < 0
45	505	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
46	509	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
47	531	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
48	580	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	DEF	index >= $.numElements
48	580	8	ResizableDoubleArray.java	getElement	index	int	1	DEF	$ >= numElements
49	584	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
50	698	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ < 0
51	703	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
51	703	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
52	706	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
52	706	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
53	739	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != MULTIPLICATIVE_MODE
53	739	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != ADDITIVE_MODE
54	759	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
55	781	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	$ < 0
56	789	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
56	789	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
57	804	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
58	885	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
58	885	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
59	888	7	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
60	901	15	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
3018	79	8	RiddersSolver.java	doSolve	y1	double	0	RET	$ == 0
3019	82	8	RiddersSolver.java	doSolve	y2	double	0	RET	$ == 0
3020	96	12	RiddersSolver.java	doSolve	y3	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3020	96	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y3) <= $
3021	107	12	RiddersSolver.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3021	107	12	RiddersSolver.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3021	107	12	RiddersSolver.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
3022	110	12	RiddersSolver.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3022	110	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3023	116	12	RiddersSolver.java	doSolve	correction	double	1	DEF	$ > 0.0
3024	117	16	RiddersSolver.java	doSolve	y	double	1	DEF	MathUtils.sign(y1) + MathUtils.sign($) == 0.0
3024	117	16	RiddersSolver.java	doSolve	y1	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
3025	127	16	RiddersSolver.java	doSolve	y	double	1	DEF	MathUtils.sign(y2) + MathUtils.sign($) == 0.0
3025	127	16	RiddersSolver.java	doSolve	y2	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
3132	64	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
3133	86	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
33391	123	12	RombergIntegrator.java	doIntegrate	j	int	0	NIL-FOR	$ <= i
33391	123	12	RombergIntegrator.java	doIntegrate	i	int	0	NIL-FOR	j <= $
3134	130	12	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	i >= $.minimalIterationCount
3134	130	12	RombergIntegrator.java	doIntegrate	i	int	0	RET	$ >= minimalIterationCount
3135	133	16	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	delta <= $.absoluteAccuracy
3135	133	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3135	133	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= absoluteAccuracy
3135	133	16	RombergIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
639	136	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
640	176	4	Rotation.java	Rotation	norm	double	0	DEF	$ == 0
641	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
641	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
641	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
641	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
641	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
641	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
641	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
641	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
642	238	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
643	256	4	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
644	265	6	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
645	274	8	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
646	320	2	Rotation.java	Rotation	u1u1	double	0	DEF	$ == 0
646	320	2	Rotation.java	Rotation	u2u2	double	0	DEF	$ == 0
646	320	2	Rotation.java	Rotation	v1v1	double	0	DEF	$ == 0
646	320	2	Rotation.java	Rotation	v2v2	double	0	DEF	$ == 0
647	345	2	Rotation.java	Rotation	k	Vector3D	0	RET	c <= inPlaneThreshold * $.getNorm() * u3.getNorm()
647	345	2	Rotation.java	Rotation	u3	Vector3D	0	RET	c <= inPlaneThreshold * k.getNorm() * $.getNorm()
647	345	2	Rotation.java	Rotation	c	double	0	RET	$ <= inPlaneThreshold * k.getNorm() * u3.getNorm()
647	345	2	Rotation.java	Rotation	inPlaneThreshold	double	0	RET	c <= $ * k.getNorm() * u3.getNorm()
648	354	4	Rotation.java	Rotation	u2Prime	Vector3D	0	RET	c <= inPlaneThreshold * k.getNorm() * $.getNorm()
648	354	4	Rotation.java	Rotation	k	Vector3D	0	RET	c <= inPlaneThreshold * $.getNorm() * u2Prime.getNorm()
648	354	4	Rotation.java	Rotation	c	double	0	RET	$ <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()
648	354	4	Rotation.java	Rotation	inPlaneThreshold	double	0	RET	c <= $ * k.getNorm() * u2Prime.getNorm()
649	360	6	Rotation.java	Rotation	c	double	0	RET	$ <= 0
650	409	4	Rotation.java	Rotation	normProduct	double	0	DEF	$ == 0
651	415	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
651	415	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
652	512	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
653	514	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
654	527	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
654	527	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
655	529	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
656	573	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
657	582	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
657	582	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
658	591	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
659	600	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
659	600	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
660	609	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
661	618	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
661	618	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
662	627	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
663	636	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
663	636	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
664	645	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
665	654	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
665	654	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
666	663	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
667	672	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
667	672	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
668	681	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
669	690	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
669	690	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
670	699	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
671	708	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
671	708	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
672	717	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
673	726	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
673	726	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
674	735	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
675	744	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
675	744	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
676	753	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
677	762	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
677	762	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
678	780	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
678	780	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
31737	939	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
679	980	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
679	980	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
679	980	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
2520	105	4	RungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2520	105	4	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
33177	109	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
33177	109	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
33178	130	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
33179	138	6	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
33179	138	6	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
33180	140	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
33180	140	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
33180	140	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
33181	142	14	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
33181	142	14	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
33182	153	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
33182	153	6	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
33182	153	6	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
33183	155	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
33183	155	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2521	167	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	$.isLastStep
2522	175	10	RungeKuttaIntegrator.java	integrate	nextIsLast	boolean	0	DEF	$
2417	83	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
2417	83	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
33086	87	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
33086	87	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
33086	87	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
33087	143	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
33087	143	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
33088	144	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
33088	144	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
33089	165	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
33089	165	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
33090	167	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
33090	167	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
2418	174	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
1000	109	8	SaddlePointExpansion.java	getStirlingError	z	double	1	DEF	$ < 15.0
1001	111	12	SaddlePointExpansion.java	getStirlingError	z2	double	1	DEF	FastMath.floor($) == $
1002	147	8	SaddlePointExpansion.java	getDeviancePart	x	double	1	DEF	FastMath.abs($ - mu) < 0.1 * ($ + mu)
1002	147	8	SaddlePointExpansion.java	getDeviancePart	mu	double	1	DEF	FastMath.abs(x - $) < 0.1 * (x + $)
31760	155	12	SaddlePointExpansion.java	getDeviancePart	s1	double	0	NIL-WHILE	$ != s
31760	155	12	SaddlePointExpansion.java	getDeviancePart	s	double	0	NIL-WHILE	s1 != $
1003	180	8	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == 0
1004	181	12	SaddlePointExpansion.java	logBinomialProbability	p	double	1	DEF	$ < 0.1
1005	186	15	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == n
1005	186	15	SaddlePointExpansion.java	logBinomialProbability	n	int	1	DEF	x == $
1006	187	12	SaddlePointExpansion.java	logBinomialProbability	q	double	1	DEF	$ < 0.1
3039	83	8	SecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
3040	86	8	SecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
3041	107	12	SecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
3042	120	12	SecantSolver.java	doSolve	f1	double	0	RET	FastMath.abs($) <= ftol
3042	120	12	SecantSolver.java	doSolve	ftol	double	0	RET	FastMath.abs(f1) <= $
3043	126	12	SecantSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
3043	126	12	SecantSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
3043	126	12	SecantSolver.java	doSolve	atol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
3043	126	12	SecantSolver.java	doSolve	rtol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
1916	80	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
1926	183	8	SemiVariance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
1927	281	8	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 0
1927	281	8	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 0
1928	284	12	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 1
1928	284	12	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 1
32839	291	16	SemiVariance.java	evaluate	i	int	0	NIL-FOR	$ < length
32839	291	16	SemiVariance.java	evaluate	length	int	0	NIL-FOR	i < $
1929	292	20	SemiVariance.java	evaluate	i	int	0	DEF	(values[$] > cutoff) == booleanDirection
1929	292	20	SemiVariance.java	evaluate	booleanDirection	boolean	0	DEF	(values[i] > cutoff) == $
1929	292	20	SemiVariance.java	evaluate	values	double[]	0	DEF	($[i] > cutoff) == booleanDirection
1929	292	20	SemiVariance.java	evaluate	cutoff	double	0	DEF	(values[i] > $) == booleanDirection
1930	298	16	SemiVariance.java	evaluate	corrected	boolean	1	RET	$
32813	77	8	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	NIL-FOR	i < p.$.length
32813	77	8	SimpleRealPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
32813	77	8	SimpleRealPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1858	80	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > $.getAbsoluteThreshold()
1858	80	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > size * $.getRelativeThreshold()
1858	80	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1858	80	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1858	80	12	SimpleRealPointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
2238	110	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
2239	142	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
32986	173	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
32986	173	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
32986	173	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
32987	193	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
32987	193	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
32987	193	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
32987	193	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
2240	278	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
2241	281	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	FastMath.abs($.sumXX) < 10 * Double.MIN_VALUE
2242	331	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2243	345	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2244	391	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
2245	414	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
2246	529	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ <= 0
2246	529	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ >= 1
32511	76	8	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	NIL-FOR	i < p.$.length
32511	76	8	SimpleVectorialPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
32511	76	8	SimpleVectorialPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1460	81	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > size * $.getRelativeThreshold()
1460	81	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > $.getAbsoluteThreshold()
1460	81	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1460	81	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1460	81	12	SimpleVectorialPointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
32537	78	8	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	NIL-FOR	i < p.$.length
32537	78	8	SimpleVectorialValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
32537	78	8	SimpleVectorialValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1545	83	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > $.getAbsoluteThreshold()
1545	83	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > size * $.getRelativeThreshold()
1545	83	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1545	83	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1545	83	12	SimpleVectorialValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
1851	116	8	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
1852	148	12	SimplexOptimizer.java	doOptimize	iteration	int	0	RET	$ > 0
32811	150	16	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
32811	150	16	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
1853	154	16	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
32516	72	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
32516	72	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
1505	74	12	SimplexSolver.java	getPivotColumn	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(entry, minValue, $.maxUlps) < 0
1505	74	12	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	MathUtils.compareTo($, minValue, maxUlps) < 0
1505	74	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	MathUtils.compareTo(entry, $, maxUlps) < 0
32517	92	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
32517	92	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1506	96	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(entry, 0d, $.maxUlps) > 0
1506	96	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	MathUtils.compareTo($, 0d, maxUlps) > 0
1507	99	16	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
1508	101	23	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
1509	109	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
1510	111	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
32518	115	12	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
32518	115	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
1511	118	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	MathUtils.equals(entry, 1d, $.maxUlps)
1511	118	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
1511	118	14	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
1511	118	14	SimplexSolver.java	getPivotRow	entry	double	0	RET	MathUtils.equals($, 1d, maxUlps)
1511	118	14	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
1512	141	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
32519	150	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
32519	150	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1513	151	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
1513	151	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
1514	168	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
32520	172	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1515	177	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, $.epsilon)
1515	177	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	MathUtils.equals($.getEntry(0, $.getRhsOffset()), 0d, epsilon)
32521	192	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1519	154	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
32522	158	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
32522	158	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
1520	161	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
32523	164	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
32523	164	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
32524	167	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
32524	167	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1521	187	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
1522	198	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
32525	206	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
32525	206	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
1523	214	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
1524	223	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
1524	223	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
1525	225	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1525	225	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1526	230	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1526	230	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
1526	230	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1526	230	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
1527	260	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
1528	285	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
1528	285	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
32526	312	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
32526	312	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
1529	314	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	MathUtils.equals(entry, 1d, $.maxUlps)
1529	314	12	SimplexTableau.java	getBasicRow	entry	double	1	DEF	MathUtils.equals($, 1d, maxUlps)
1529	314	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
1530	316	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	MathUtils.equals(entry, 0d, $.maxUlps)
1530	316	19	SimplexTableau.java	getBasicRow	entry	double	0	RET	MathUtils.equals($, 0d, maxUlps)
1531	328	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
32527	336	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
32527	336	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
1532	338	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	MathUtils.compareTo(entry, 0d, $.maxUlps) > 0
1532	338	12	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	MathUtils.compareTo($, 0d, maxUlps) > 0
32528	344	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
32528	344	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1533	346	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
1533	346	10	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
32529	352	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
32529	352	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
32530	354	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
32530	354	10	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
1534	355	12	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
1534	355	12	SimplexTableau.java	dropPhase1Objective	columnsToDrop	List<Integer>	0	DEF	$.contains(j)
32531	361	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
32532	382	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
32532	382	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
1535	384	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	MathUtils.compareTo(entry, 0d, $.epsilon) < 0
1535	384	12	SimplexTableau.java	isOptimal	entry	double	0	RET	MathUtils.compareTo($, 0d, epsilon) < 0
32533	403	6	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
32533	403	6	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
32533	403	6	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
1536	405	10	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
1537	410	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
1537	410	10	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
32534	434	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
32534	434	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
1538	565	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
1538	565	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
1539	569	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
3119	63	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
3120	85	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
3121	104	8	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.minimalIterationCount == 1
3122	115	12	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.iterations.getCount() >= $.minimalIterationCount
3123	119	16	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	delta <= $.absoluteAccuracy
3123	119	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3123	119	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= absoluteAccuracy
3123	119	16	SimpsonIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
1123	75	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	matrix	RealMatrix	1	DEF	$.getRowDimension() < $.getColumnDimension()
31952	96	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	NIL-FOR	$ < FastMath.max(nct, nrt)
31952	96	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	nct	int	0	NIL-FOR	k < FastMath.max($, nrt)
31952	96	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	nrt	int	0	NIL-FOR	k < FastMath.max(nct, $)
1124	97	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	$ < nct
1124	97	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	nct	int	0	DEF	k < $
31953	102	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31953	102	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
1125	105	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	DEF	$.singularValues[k] != 0
1125	105	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	singularValues[$] != 0
1126	106	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	A[$][$] < 0
31954	109	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31954	109	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
31955	116	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
31955	116	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	NIL-FOR	$ < n
1127	117	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	DEF	$.singularValues[k] != 0
1127	117	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	$ < nct
1127	117	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	singularValues[$] != 0
1127	117	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	nct	int	0	DEF	k < $
31956	121	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31956	121	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
31957	125	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31957	125	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
1128	133	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	$ < nct
1128	133	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	nct	int	0	DEF	k < $
31958	136	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31958	136	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
1129	140	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	$ < nrt
1129	140	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	nrt	int	0	DEF	k < $
31959	145	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
31959	145	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < n
1130	148	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	e[$] != 0
1130	148	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	e	double[]	0	DEF	$[k] != 0
1131	149	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	e[$ + 1] < 0
1131	149	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	e	double[]	0	DEF	$[k + 1] < 0
31960	152	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
31960	152	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < n
1132	158	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	DEF	k + 1 < $.m
1132	158	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	$ + 1 < m
1132	158	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	e[$] != 0
1132	158	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	e	double[]	0	DEF	$[k] != 0
31961	161	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31961	161	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
31962	164	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
31962	164	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	NIL-FOR	$ < n
31963	165	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31963	165	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
31964	169	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
31964	169	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	NIL-FOR	$ < n
31965	171	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31965	171	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
31966	179	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
31966	179	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < n
1133	186	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	DEF	nct < $.n
1133	186	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	nct	int	0	DEF	$ < n
1134	189	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	DEF	$.m < p
1134	189	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	p	int	0	DEF	m < $
1135	192	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	nrt	int	0	DEF	$ + 1 < p
1135	192	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	p	int	0	DEF	nrt + 1 < $
31967	198	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
31967	198	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	NIL-FOR	$ < n
31968	199	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31968	199	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
31969	204	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	NIL-FOR	$ >= 0
1136	205	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	1	DEF	$.singularValues[k] != 0
1136	205	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	1	DEF	singularValues[$] != 0
31970	206	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
31970	206	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	NIL-FOR	$ < n
31971	208	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31971	208	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
31972	212	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31972	212	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
31973	216	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31973	216	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
31974	220	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < k - 1
31974	220	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	NIL-FOR	i < $ - 1
31975	224	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31975	224	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
31976	232	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	NIL-FOR	$ >= 0
1137	233	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	e[$] != 0
1137	233	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	$ < nrt
1137	233	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	e	double[]	0	DEF	$[k] != 0
1137	233	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	nrt	int	0	DEF	k < $
31977	235	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
31977	235	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	NIL-FOR	$ < n
31978	237	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
31978	237	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < n
31979	241	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
31979	241	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < n
31980	246	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
31980	246	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < n
31981	255	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	p	int	0	NIL-WHILE	$ > 0
31982	267	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	NIL-FOR	$ >= 0
1138	271	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	threshold	double	0	DEF	FastMath.abs(e[k]) <= $
1138	271	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	FastMath.abs(e[$]) <= threshold
1138	271	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	e	double[]	0	DEF	FastMath.abs($[k]) <= threshold
1139	277	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	1	DEF	$ == p - 2
1139	277	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	p	int	1	DEF	k == $ - 2
31983	281	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	ks	int	0	NIL-FOR	$ >= k
31983	281	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	NIL-FOR	ks >= $
1140	282	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	ks	int	0	DEF	$ == k
1140	282	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	ks == $
1141	287	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	DEF	FastMath.abs($.singularValues[ks]) <= TINY + EPS * t
1141	287	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	t	double	0	DEF	FastMath.abs(singularValues[ks]) <= TINY + EPS * $
1141	287	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	ks	int	0	DEF	FastMath.abs(singularValues[$]) <= TINY + EPS * t
1142	292	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	ks	int	1	DEF	$ == k
1142	292	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	1	DEF	ks == $
1143	294	23	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	ks	int	1	DEF	$ == p - 1
1143	294	23	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	p	int	1	DEF	ks == $ - 1
31984	308	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	NIL-FOR	$ >= k
31984	308	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	NIL-FOR	j >= $
1144	313	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	DEF	$ != k
1144	313	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	j != $
31985	318	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
31985	318	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < n
31986	330	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	NIL-FOR	$ < p
31986	330	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	p	int	0	NIL-FOR	j < $
31987	338	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31987	338	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
1145	360	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	b	double	0	DEF	$ != 0
1145	360	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	c	double	0	DEF	$ != 0
1146	363	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	b	double	0	DEF	$ < 0
31988	371	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	NIL-FOR	$ < p - 1
31988	371	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	p	int	0	NIL-FOR	j < $ - 1
1147	375	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	DEF	$ != k
1147	375	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	j != $
31989	383	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
31989	383	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < n
1148	396	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	DEF	j < $.m - 1
1148	396	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	DEF	$ < m - 1
31990	397	28	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31990	397	28	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
1149	411	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	DEF	$.singularValues[k] <= 0
1149	411	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	singularValues[$] <= 0
31991	414	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ <= pp
31991	414	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	pp	int	0	NIL-FOR	i <= $
31992	419	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	NIL-WHILE	$ < pp
31992	419	20	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	pp	int	0	NIL-WHILE	k < $
1150	420	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	DEF	$.singularValues[k] >= $.singularValues[k + 1]
1150	420	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	singularValues[$] >= singularValues[$ + 1]
1151	426	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	DEF	k < $.n - 1
1151	426	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	$ < n - 1
31993	427	28	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
31993	427	28	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < n
1152	433	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	DEF	k < $.m - 1
1152	433	24	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	DEF	$ < m - 1
31994	434	28	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
31994	434	28	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
1153	453	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	1	DEF	$.transposed
1154	471	8	SingularValueDecompositionImpl.java	getUT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedUt == null
1155	480	8	SingularValueDecompositionImpl.java	getS	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedS == null
1156	500	8	SingularValueDecompositionImpl.java	getVT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedVt == null
31995	512	8	SingularValueDecompositionImpl.java	getCovariance	THIS	SingularValueDecompositionImpl	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
31995	512	8	SingularValueDecompositionImpl.java	getCovariance	p	int	0	NIL-WHILE	dimension < $
31995	512	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
31995	512	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NIL-WHILE	$ < p
31995	512	8	SingularValueDecompositionImpl.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
1157	517	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NumberIsTooLargeException	$ == 0
31996	560	8	SingularValueDecompositionImpl.java	getRank	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.singularValues.$.length
31996	560	8	SingularValueDecompositionImpl.java	getRank	i	int	0	NIL-FOR	$ < singularValues.length
1158	561	12	SingularValueDecompositionImpl.java	getRank	THIS	SingularValueDecompositionImpl	0	DEF	$.singularValues[i] > $.tol
1158	561	12	SingularValueDecompositionImpl.java	getRank	i	int	0	DEF	singularValues[$] > tol
1903	91	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
1904	106	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
1905	110	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
1906	131	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
1907	159	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
1907	159	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1907	159	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
1907	159	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
1907	159	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
32832	169	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
32832	169	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
32832	169	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
32833	177	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
32833	177	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
32833	177	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2977	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
2977	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
2977	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
2977	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
2977	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
2977	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
2978	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
2978	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
2978	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
33343	84	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33343	84	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
2979	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
2979	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
2979	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
2979	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
33344	96	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
33344	96	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
33345	98	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33345	98	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
33346	108	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
33346	108	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
33347	110	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33347	110	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
33348	118	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33348	118	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
33349	120	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
33349	120	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
33350	130	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33350	130	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
33351	132	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
33351	132	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
31997	91	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rows
31997	91	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rows
31998	92	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columns
31998	92	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columns
1159	105	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1159	105	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
1160	151	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1160	151	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
1161	164	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1161	164	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
32062	109	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
32062	109	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
32062	109	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
32063	147	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1192	151	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1192	151	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
32064	166	8	SparseFieldVector.java	add	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
32064	166	8	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < v.length
32064	166	8	SparseFieldVector.java	add	v	T[]	0	NIL-FOR	i < $.length
32065	181	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1193	190	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
32066	207	8	SparseFieldVector.java	append	THIS	SparseFieldVector	0	NIL-FOR	i < a.$.length
32066	207	8	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < a.length
32066	207	8	SparseFieldVector.java	append	a	T[]	0	NIL-FOR	i < $.length
32067	223	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
32068	235	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
1194	238	12	SparseFieldVector.java	dotProduct	THIS	SparseFieldVector	0	DEF	idx < v.$.length
1194	238	12	SparseFieldVector.java	dotProduct	idx	int	0	DEF	$ < v.length
1194	238	12	SparseFieldVector.java	dotProduct	v	T[]	0	DEF	idx < $.length
32069	251	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
32070	263	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
32071	275	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
32072	287	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
32073	298	8	SparseFieldVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
32074	328	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1195	331	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
1195	331	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
1195	331	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
1195	331	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
32075	345	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
32075	345	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
32076	359	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
32077	373	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
32077	373	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
32078	387	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
32079	415	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
32080	418	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
32081	431	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
32082	435	12	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < n
32082	435	12	SparseFieldVector.java	outerProduct	n	int	0	NIL-FOR	col < $
1196	444	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
32083	465	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
32083	465	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
32084	487	8	SparseFieldVector.java	setSubVector	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
32084	487	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
32084	487	8	SparseFieldVector.java	setSubVector	v	T[]	0	NIL-FOR	i < $.length
32085	505	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1197	508	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1197	508	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1198	519	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
32086	530	8	SparseFieldVector.java	subtract	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
32086	530	8	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < v.length
32086	530	8	SparseFieldVector.java	subtract	v	T[]	0	NIL-FOR	i < $.length
1199	531	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
1199	531	12	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
1200	552	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	OutOfRangeException	index >= $.getDimension()
1200	552	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1200	552	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1201	564	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DimensionMismatchException	$.getDimension() != n
1201	564	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	getDimension() != $
1202	571	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
32087	598	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1203	611	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
1203	611	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
1204	615	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector<?>
1205	622	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
1206	623	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
1206	623	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
1207	626	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
1207	626	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
1208	629	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
1208	629	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
32088	634	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1209	637	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
1209	637	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
32089	642	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1210	645	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
1210	645	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
1210	645	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
2093	149	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DEF	xArray.$.length != yArray.$.length
2093	149	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	DEF	$.length != yArray.length
2093	149	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	DEF	xArray.length != $.length
2094	152	15	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DEF	xArray.$.length < 2
2094	152	15	SpearmansCorrelation.java	correlation	xArray	double[]	1	DEF	$.length < 2
32906	168	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
32906	168	8	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
2883	68	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
2883	68	8	SplineInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
2883	68	8	SplineInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
2884	72	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	NumberIsTooSmallException	x.$.length < 3
2884	72	8	SplineInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 3
33272	84	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
33272	84	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
33273	93	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
33273	93	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
33274	108	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
33275	116	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
33275	116	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
2123	571	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2123	571	8	StatUtils.java	sumDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2123	571	8	StatUtils.java	sumDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2124	574	8	StatUtils.java	sumDifference	n	int	0	NoDataException	$ <= 0
32921	578	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
32921	578	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
2125	619	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2125	619	8	StatUtils.java	varianceDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2125	619	8	StatUtils.java	varianceDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2126	622	8	StatUtils.java	varianceDifference	n	int	0	NumberIsTooSmallException	$ < 2
32922	625	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
32922	625	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
32923	644	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
32923	644	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
32923	644	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
32924	655	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
32924	655	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
32924	655	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
2003	133	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
2003	133	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
2004	136	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
2983	53	8	StepFunction.java	StepFunction	x	double[]	0	NullArgumentException	$ == null
2983	53	8	StepFunction.java	StepFunction	y	double[]	0	NullArgumentException	$ == null
2984	57	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	y.$.length == 0
2984	57	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	x.$.length == 0
2984	57	8	StepFunction.java	StepFunction	x	double[]	0	NoDataException	$.length == 0
2984	57	8	StepFunction.java	StepFunction	y	double[]	0	NoDataException	$.length == 0
2985	61	8	StepFunction.java	StepFunction	THIS	StepFunction	0	DimensionMismatchException	y.$.length != x.$.length
2985	61	8	StepFunction.java	StepFunction	x	double[]	0	DimensionMismatchException	y.length != $.length
2985	61	8	StepFunction.java	StepFunction	y	double[]	0	DimensionMismatchException	$.length != x.length
2986	75	8	StepFunction.java	value	index	int	1	DEF	$ < -1
2987	78	15	StepFunction.java	value	index	int	1	DEF	$ >= 0
2401	203	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
2402	212	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
2403	221	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	MathUtils.equals(nextTime, $.lastTime, 1)
2403	221	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.mode == $.StepNormalizerMode.MULTIPLES
2403	221	8	StepNormalizer.java	handleStep	nextTime	double	0	DEF	MathUtils.equals($, lastTime, 1)
33075	228	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
2404	240	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
2405	247	12	StepNormalizer.java	handleStep	addLast	boolean	0	DEF	$
2406	277	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.bounds.firstIncluded()
2406	277	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.firstTime == $.lastTime
2083	66	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	0	MathIllegalArgumentException	$.n < 2
2084	68	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	1	RET	$.biasCorrected
32886	55	8	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	i<$.rowDimension
32886	55	8	StorelessCovariance.java	initializeMatrix	i	int	0	NIL-FOR	$<rowDimension
32887	56	12	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	j<$.colDimension
32887	56	12	StorelessCovariance.java	initializeMatrix	j	int	0	NIL-FOR	$<colDimension
2082	76	8	StorelessCovariance.java	incrementRow	THIS	StorelessCovariance	0	MathIllegalArgumentException	length != $.colDimension
2082	76	8	StorelessCovariance.java	incrementRow	length	int	0	MathIllegalArgumentException	$ != colDimension
32888	80	8	StorelessCovariance.java	incrementRow	i	int	0	NIL-FOR	$<length
32888	80	8	StorelessCovariance.java	incrementRow	length	int	0	NIL-FOR	i<$
32889	81	12	StorelessCovariance.java	incrementRow	j	int	0	NIL-FOR	$<length
32889	81	12	StorelessCovariance.java	incrementRow	length	int	0	NIL-FOR	j<$
32890	90	8	StorelessCovariance.java	getCovarianceMatrix	THIS	StorelessCovariance	0	NIL-FOR	i<$.rowDimension
32890	90	8	StorelessCovariance.java	getCovarianceMatrix	i	int	0	NIL-FOR	$<rowDimension
32891	91	12	StorelessCovariance.java	getCovarianceMatrix	THIS	StorelessCovariance	0	NIL-FOR	j<$.colDimension
32891	91	12	StorelessCovariance.java	getCovarianceMatrix	j	int	0	NIL-FOR	$<colDimension
32892	100	8	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	i<$.rowDimension
32892	100	8	StorelessCovariance.java	getData	i	int	0	NIL-FOR	$<rowDimension
32893	101	12	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	j<$.colDimension
32893	101	12	StorelessCovariance.java	getData	j	int	0	NIL-FOR	$<colDimension
680	118	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
724	125	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
725	157	8	SubLine.java	side	crossing	Vector2D	0	RET	$ == null
726	177	8	SubLine.java	split	crossing	Vector2D	0	RET	$ == null
626	58	8	SubPlane.java	side	inter	Line	0	RET	$ == null
627	75	8	SubPlane.java	side	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
627	75	8	SubPlane.java	side	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
628	100	8	SubPlane.java	split	inter	Line	0	RET	$ == null
629	112	8	SubPlane.java	split	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
629	112	8	SubPlane.java	split	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
1873	121	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length, true)
1873	121	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1873	121	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1873	121	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
32822	123	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
32822	123	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
32822	123	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1874	160	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, weights, begin, length, true)
1874	160	8	Sum.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
1874	160	8	Sum.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
1874	160	8	Sum.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
1874	160	8	Sum.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
32823	162	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
32823	162	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
32823	162	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1875	132	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length, true)
1875	132	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1875	132	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1875	132	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
32824	134	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
32824	134	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
32824	134	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1872	120	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length, true)
1872	120	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1872	120	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1872	120	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
32821	122	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
32821	122	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
32821	122	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1945	157	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl instanceof Mean
1946	160	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl instanceof Variance
1947	163	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl instanceof GeometricMean
1948	204	8	SummaryStatistics.java	getMean	THIS	SummaryStatistics	1	RET	$.mean == $.meanImpl
1949	220	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
1950	221	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
1951	238	8	SummaryStatistics.java	getVariance	THIS	SummaryStatistics	1	RET	$.varianceImpl == $.variance
1952	342	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
1953	345	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
1954	359	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
1954	359	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
1955	362	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
1956	632	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	DEF	$.n > 0
1957	669	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
1958	680	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
1958	680	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
1959	685	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
1959	685	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
1960	690	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
1960	690	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
1961	695	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
1961	695	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
1962	700	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
1962	700	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
1963	705	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
1963	705	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
1964	710	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
1964	710	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
1965	715	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
1965	715	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
927	61	8	TDistributionImpl.java	TDistributionImpl	degreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
928	109	8	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ == 0
929	117	12	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
930	143	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
931	146	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
932	244	8	TDistributionImpl.java	calculateNumericalMean	df	double	0	RET	$ > 1
933	267	8	TDistributionImpl.java	calculateNumericalVariance	df	double	0	RET	$ > 2
934	271	8	TDistributionImpl.java	calculateNumericalVariance	df	double	0	RET	$ <= 2
934	271	8	TDistributionImpl.java	calculateNumericalVariance	df	double	0	RET	$ > 1
2049	1004	8	TTestImpl.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ <= 0
2049	1004	8	TTestImpl.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ > 0.5
2050	1018	8	TTestImpl.java	checkSampleData	data	double[]	0	NullArgumentException	$ == null
2051	1021	8	TTestImpl.java	checkSampleData	THIS	TTestImpl	0	NumberIsTooSmallException	data.$.length < 2
2051	1021	8	TTestImpl.java	checkSampleData	data	double[]	0	NumberIsTooSmallException	$.length < 2
2052	1035	8	TTestImpl.java	checkSampleData	stat	StatisticalSummary	0	NullArgumentException	$ == null
2053	1038	8	TTestImpl.java	checkSampleData	stat	StatisticalSummary	0	NumberIsTooSmallException	$.getN() < 2
1925	89	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
33171	102	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
33171	102	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2323	73	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	IllegalArgumentException	population.getPopulationSize() < $.arity
2323	73	8	TournamentSelection.java	tournament	population	ListPopulation	0	IllegalArgumentException	$.getPopulationSize() < this.arity
33027	86	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
33027	86	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
20	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
20	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
21	147	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
22	158	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
22	158	8	TransformerMap.java	equals	other	Object	0	RET	this == $
23	161	8	TransformerMap.java	equals	other	Object	0	RET	$ instanceof TransformerMap
24	163	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
24	163	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
25	166	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
25	166	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
26	170	16	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
26	170	16	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
3126	65	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
3127	87	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
3128	119	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
33388	130	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
33388	130	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
3129	149	12	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	i >= $.minimalIterationCount
3129	149	12	TrapezoidIntegrator.java	doIntegrate	i	int	0	RET	$ >= minimalIterationCount
3130	153	16	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.absoluteAccuracy
3130	153	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3130	153	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= absoluteAccuracy
3130	153	16	TrapezoidIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
1073	63	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1074	86	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
1075	98	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
31882	103	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
1076	107	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
1076	107	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
31883	110	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
31883	110	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
31884	113	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
31884	113	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
31885	115	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
31885	115	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
31886	120	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
31886	120	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
1077	138	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
31887	141	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
31887	141	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
1078	143	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
1079	146	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1079	146	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
31888	194	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
31888	194	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
31889	200	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
31889	200	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1080	206	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
31890	217	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
31890	217	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
31891	221	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
31891	221	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
31892	231	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
31892	231	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
31893	237	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
31893	237	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
31894	243	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
31894	243	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
31895	245	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
31895	245	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
2887	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	z.$.length == 0
2887	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
2887	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
2887	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
2887	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
2887	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	z	double[]	0	NoDataException	$.length == 0
2887	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$.length == 0
2887	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$[0].length == 0
2888	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
2888	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
2888	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	xLen != $.length
2889	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
2889	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
2889	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	xLen != $.length
2890	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
2890	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
2890	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	xLen != $.length
2891	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdZ.$.length
2891	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdZ.length
2891	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
2892	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
2892	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
2892	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	xLen != $.length
2893	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdZ.$.length
2893	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdZ.length
2893	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
2894	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdYdZ.$.length
2894	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdYdZ.length
2894	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
2895	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d3FdXdYdZ.$.length
2895	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d3FdXdYdZ.length
2895	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
33278	201	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
33278	201	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
2896	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
2896	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
2896	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
2896	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2897	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
2897	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
2897	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
2897	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2898	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
2898	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
2898	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
2898	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2899	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i].length != yLen
2899	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$].length != yLen
2899	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdZ[i].length != $
2899	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2900	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
2900	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
2900	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
2900	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2901	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i].length != yLen
2901	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$].length != yLen
2901	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdZ[i].length != $
2901	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2902	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i].length != yLen
2902	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$].length != yLen
2902	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdYdZ[i].length != $
2902	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2903	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i].length != yLen
2903	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$].length != yLen
2903	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d3FdXdYdZ[i].length != $
2903	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
33279	228	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
33279	228	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
2904	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i][j].length != zLen
2904	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	f[i][$].length != zLen
2904	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$][j].length != zLen
2904	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	f[i][j].length != $
2904	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2905	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i][j].length != zLen
2905	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdX[i][$].length != zLen
2905	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$][j].length != zLen
2905	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdX[i][j].length != $
2905	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2906	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i][j].length != zLen
2906	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdY[i][$].length != zLen
2906	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$][j].length != zLen
2906	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdY[i][j].length != $
2906	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2907	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i][j].length != zLen
2907	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdZ[i][$].length != zLen
2907	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$][j].length != zLen
2907	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdZ[i][j].length != $
2907	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2908	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i][j].length != zLen
2908	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdY[i][$].length != zLen
2908	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$][j].length != zLen
2908	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdY[i][j].length != $
2908	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2909	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i][j].length != zLen
2909	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdZ[i][$].length != zLen
2909	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$][j].length != zLen
2909	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdZ[i][j].length != $
2909	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2910	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i][j].length != zLen
2910	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdYdZ[i][$].length != zLen
2910	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$][j].length != zLen
2910	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdYdZ[i][j].length != $
2910	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2911	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != zLen
2911	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d3FdXdYdZ[i][$].length != zLen
2911	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$][j].length != zLen
2911	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != $
2911	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
33280	255	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	k	int	0	NIL-FOR	$ < lastK
33280	255	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastK	int	0	NIL-FOR	k < $
2912	311	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
2913	315	8	TricubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
2914	319	8	TricubicSplineInterpolatingFunction.java	value	k	int	0	OutOfRangeException	$ == -1
2915	338	8	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
2915	338	8	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
33281	343	8	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
33281	343	8	TricubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
2916	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
2916	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
2916	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
33282	405	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < sz
33282	405	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	i < $
33283	408	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < sz
33283	408	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	j < $
33284	434	8	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	i	int	0	NIL-FOR	$ < N
33285	435	12	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	j	int	0	NIL-FOR	$ < N
33286	436	16	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	k	int	0	NIL-FOR	$ < N
2917	450	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
2917	450	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
2918	453	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
2918	453	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
2919	456	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ < 0
2919	456	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ > 1
33287	473	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	NIL-FOR	$ < N
33288	474	12	TricubicSplineInterpolatingFunction.java	value	j	int	0	NIL-FOR	$ < N
33289	475	16	TricubicSplineInterpolatingFunction.java	value	k	int	0	NIL-FOR	$ < N
2956	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	xval.$.length == 0
2956	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	zval.$.length == 0
2956	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	fval.$.length == 0
2956	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	yval.$.length == 0
2956	38	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
2956	38	8	TricubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
2956	38	8	TricubicSplineInterpolator.java	interpolate	zval	double[]	0	NoDataException	$.length == 0
2956	38	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	NoDataException	$.length == 0
2957	41	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
2957	41	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
2957	41	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	xval.length != $.length
33317	58	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33317	58	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
2958	59	12	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
2958	59	12	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
2958	59	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
2958	59	12	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i].length != yLen
33318	63	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
33318	63	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
2959	64	16	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i][j].length != zLen
2959	64	16	TricubicSplineInterpolator.java	interpolate	j	int	0	DimensionMismatchException	fval[i][$].length != zLen
2959	64	16	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$][j].length != zLen
2959	64	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	DimensionMismatchException	fval[i][j].length != $
2959	64	16	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
33319	68	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
33319	68	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
33320	81	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33320	81	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
33321	88	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
33321	88	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
33322	95	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
33322	95	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
33323	103	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
33323	103	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
33324	105	12	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33324	105	12	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
33325	107	16	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
33325	107	16	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
33326	119	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33326	119	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
33327	121	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
33327	121	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
33328	123	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
33328	123	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
33329	133	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
33329	133	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
33330	135	12	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
33330	135	12	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
33331	137	16	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33331	137	16	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
33332	146	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
33332	146	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
33333	149	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
33333	149	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
33334	152	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
33334	152	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
2315	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != standardDeviation.$.length
2315	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != standardDeviation.length
2315	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DimensionMismatchException	mean.length != $.length
33023	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
33023	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
33023	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
32998	66	8	UnitSphereRandomVectorGenerator.java	nextVector	normSq	double	0	NIL-DOWHILE	$ > 1
32999	68	12	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
32999	68	12	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
33000	76	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
33000	76	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
3124	121	8	UnivariateRealIntegratorImpl.java	UnivariateRealIntegratorImpl	minimalIterationCount	int	0	NotStrictlyPositiveException	$ <= 0
3125	124	8	UnivariateRealIntegratorImpl.java	UnivariateRealIntegratorImpl	minimalIterationCount	int	0	NumberIsTooSmallException	maximalIterationCount <= $
3125	124	8	UnivariateRealIntegratorImpl.java	UnivariateRealIntegratorImpl	maximalIterationCount	int	0	NumberIsTooSmallException	$ <= minimalIterationCount
2960	84	8	UnivariateRealPeriodicInterpolator.java	interpolate	THIS	UnivariateRealPeriodicInterpolator	0	NumberIsTooSmallException	xval.$.length < $.extend
2960	84	8	UnivariateRealPeriodicInterpolator.java	interpolate	xval	double[]	0	NumberIsTooSmallException	$.length < extend
33335	94	8	UnivariateRealPeriodicInterpolator.java	interpolate	THIS	UnivariateRealPeriodicInterpolator	0	NIL-FOR	i < xval.$.length
33335	94	8	UnivariateRealPeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xval.length
33335	94	8	UnivariateRealPeriodicInterpolator.java	interpolate	xval	double[]	0	NIL-FOR	i < $.length
33336	101	8	UnivariateRealPeriodicInterpolator.java	interpolate	THIS	UnivariateRealPeriodicInterpolator	0	NIL-FOR	i < $.extend
33336	101	8	UnivariateRealPeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < extend
3044	50	8	UnivariateRealSolverUtils.java	solve	function	UnivariateRealFunction	0	NullArgumentException	$ == null
3045	73	8	UnivariateRealSolverUtils.java	solve	function	UnivariateRealFunction	0	NullArgumentException	$ == null
3046	99	8	UnivariateRealSolverUtils.java	forceSide	THIS	UnivariateRealSolverUtils	0	RET	allowedSolution == $.AllowedSolution.ANY_SIDE
3046	99	8	UnivariateRealSolverUtils.java	forceSide	allowedSolution	AllowedSolution	0	RET	$ == AllowedSolution.ANY_SIDE
33357	112	8	UnivariateRealSolverUtils.java	forceSide	remainingEval	int	0	NIL-WHILE	$ > 0
3047	114	12	UnivariateRealSolverUtils.java	forceSide	fLo	double	0	RET	$ >= 0
3047	114	12	UnivariateRealSolverUtils.java	forceSide	fLo	double	0	RET	$ <= 0
3047	114	12	UnivariateRealSolverUtils.java	forceSide	fHi	double	0	RET	$ >= 0
3047	114	12	UnivariateRealSolverUtils.java	forceSide	fHi	double	0	RET	$ <= 0
3048	122	12	UnivariateRealSolverUtils.java	forceSide	fLo	double	1	DEF	$ < fHi
3048	122	12	UnivariateRealSolverUtils.java	forceSide	fHi	double	1	DEF	fLo < $
3049	124	16	UnivariateRealSolverUtils.java	forceSide	fLo	double	1	DEF	$ >= 0
3050	129	19	UnivariateRealSolverUtils.java	forceSide	fLo	double	1	DEF	$ > fHi
3050	129	19	UnivariateRealSolverUtils.java	forceSide	fHi	double	1	DEF	fLo > $
3051	131	16	UnivariateRealSolverUtils.java	forceSide	fLo	double	1	DEF	$ <= 0
3052	143	12	UnivariateRealSolverUtils.java	forceSide	changeLo	boolean	0	DEF	$
3053	150	12	UnivariateRealSolverUtils.java	forceSide	changeHi	boolean	0	DEF	$
3054	246	8	UnivariateRealSolverUtils.java	bracket	function	UnivariateRealFunction	0	NullArgumentException	$ == null
3055	249	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	NotStrictlyPositiveException	$ <= 0
33358	260	8	UnivariateRealSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
33358	260	8	UnivariateRealSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
33358	260	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
33358	260	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
33358	260	8	UnivariateRealSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
33358	260	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
33358	260	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
33358	260	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
3056	270	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	NoBracketingException	$ * fb > 0.0
3056	270	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	NoBracketingException	fa * $ > 0.0
3057	305	8	UnivariateRealSolverUtils.java	isBracketing	function	UnivariateRealFunction	0	NullArgumentException	$ == null
3058	336	8	UnivariateRealSolverUtils.java	verifyInterval	lower	double	0	NumberIsTooLargeException	$ >= upper
3058	336	8	UnivariateRealSolverUtils.java	verifyInterval	upper	double	0	NumberIsTooLargeException	lower >= $
3059	371	8	UnivariateRealSolverUtils.java	verifyBracketing	function	UnivariateRealFunction	0	NullArgumentException	$ == null
3060	375	8	UnivariateRealSolverUtils.java	verifyBracketing	THIS	UnivariateRealSolverUtils	0	NoBracketingException	$.isBracketing(function, lower, upper)
3060	375	8	UnivariateRealSolverUtils.java	verifyBracketing	function	UnivariateRealFunction	0	NoBracketingException	isBracketing($, lower, upper)
3060	375	8	UnivariateRealSolverUtils.java	verifyBracketing	lower	double	0	NoBracketingException	isBracketing(function, $, upper)
3060	375	8	UnivariateRealSolverUtils.java	verifyBracketing	upper	double	0	NoBracketingException	isBracketing(function, lower, $)
33024	139	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
33024	139	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
33024	139	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
33025	154	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
33025	154	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
2316	262	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
2317	279	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
2318	353	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution.getBinStats().size() == 0
2318	353	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution == null
2319	380	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
2320	383	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
2320	383	8	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
2321	387	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
2321	387	12	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
1878	159	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
1879	169	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
1880	171	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
1881	174	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
1882	194	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
1883	217	8	Variance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
1884	248	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1884	248	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1884	248	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1884	248	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1885	250	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1886	252	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1887	308	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights,begin, length)
1887	308	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights,begin, length)
1887	308	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $,begin, length)
1887	308	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights,$, length)
1887	308	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights,begin, $)
1888	310	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1889	312	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1890	394	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1890	394	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1890	394	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1890	394	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1891	395	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1892	397	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
32827	401	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
32827	401	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
32827	401	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1893	407	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
1894	496	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights, begin, length)
1894	496	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
1894	496	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
1894	496	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
1894	496	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
1895	497	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1896	499	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
32828	503	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
32828	503	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
32828	503	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
32829	510	16	Variance.java	evaluate	THIS	Variance	0	NIL-FOR	i < weights.$.length
32829	510	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < weights.length
32829	510	16	Variance.java	evaluate	weights	double[]	0	NIL-FOR	i < $.length
1897	514	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
707	188	8	Vector1D.java	normalize	s	double	0	MathArithmeticException	$ == 0
708	305	8	Vector1D.java	equals	THIS	Vector1D	0	RET	$ == other
708	305	8	Vector1D.java	equals	other	Object	0	RET	this == $
709	309	8	Vector1D.java	equals	other	Object	0	RET	$ instanceof Vector1D
710	311	12	Vector1D.java	equals	rhs	Vector1D	0	RET	$.isNaN()
711	329	8	Vector1D.java	hashCode	THIS	Vector1D	0	RET	$.isNaN()
705	113	8	Vector1DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
706	124	8	Vector1DFormat.java	parse	coordinates	double[]	0	RET	$ == null
749	203	8	Vector2D.java	normalize	s	double	0	MathArithmeticException	$ == 0
750	324	8	Vector2D.java	equals	THIS	Vector2D	0	RET	$ == other
750	324	8	Vector2D.java	equals	other	Object	0	RET	this == $
751	328	8	Vector2D.java	equals	other	Object	0	RET	$ instanceof Vector2D
752	330	12	Vector2D.java	equals	rhs	Vector2D	0	RET	$.isNaN()
753	348	8	Vector2D.java	hashCode	THIS	Vector2D	0	RET	$.isNaN()
719	116	8	Vector2DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
720	127	8	Vector2DFormat.java	parse	coordinates	double[]	0	RET	$ == null
681	273	8	Vector3D.java	normalize	s	double	0	MathArithmeticException	$ == 0
682	297	8	Vector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
683	301	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
683	301	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
683	301	8	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
683	301	8	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
684	304	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
684	304	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
684	304	15	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
684	304	15	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
685	327	8	Vector3D.java	angle	normProduct	double	0	MathArithmeticException	$ == 0
686	333	8	Vector3D.java	angle	dot	double	0	RET	$ > threshold
686	333	8	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
686	333	8	Vector3D.java	angle	threshold	double	0	RET	dot > $
686	333	8	Vector3D.java	angle	threshold	double	0	RET	dot < -$
687	336	12	Vector3D.java	angle	dot	double	0	RET	$ >= 0
688	389	8	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
688	389	8	Vector3D.java	equals	other	Object	0	RET	this == $
689	393	8	Vector3D.java	equals	other	Object	0	RET	$ instanceof Vector3D
690	395	12	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
691	413	8	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
630	128	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
631	144	8	Vector3DFormat.java	parse	coordinates	double[]	0	RET	$ == null
31735	202	8	VectorFormat.java	format	THIS	VectorFormat	0	NIL-FOR	i < coordinates.$.length
31735	202	8	VectorFormat.java	format	i	int	0	NIL-FOR	$ < coordinates.length
31735	202	8	VectorFormat.java	format	coordinates	double	0	NIL-FOR	i < $.length
620	203	12	VectorFormat.java	format	i	int	0	DEF	$ > 0
621	247	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
621	247	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
621	247	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
31736	251	8	VectorFormat.java	parseCoordinates	i	int	0	NIL-FOR	$ < dimension
31736	251	8	VectorFormat.java	parseCoordinates	dimension	int	0	NIL-FOR	i < $
622	257	12	VectorFormat.java	parseCoordinates	i	int	0	RET	$ > 0
623	258	16	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
623	258	16	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
623	258	16	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
624	268	12	VectorFormat.java	parseCoordinates	c	Number	0	RET	$ == null
625	282	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
625	282	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
625	282	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
1908	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
1908	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
32834	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
32834	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
32834	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
32835	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
32835	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
1909	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
32836	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
32836	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
32837	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
32837	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
1910	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
1910	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
1911	139	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
1912	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
1912	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
1913	146	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
1913	146	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
1914	149	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
1914	149	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
1915	152	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
1915	152	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
32840	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
32840	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
1931	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
1931	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
32841	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
32841	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
32841	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
32842	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
32842	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
32842	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
1932	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
1932	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
1933	96	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
1934	100	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
1934	100	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
968	77	8	WeibullDistributionImpl.java	WeibullDistributionImpl	alpha	double	0	NotStrictlyPositiveException	$ <= 0
969	81	8	WeibullDistributionImpl.java	WeibullDistributionImpl	beta	double	0	NotStrictlyPositiveException	$ <= 0
970	98	8	WeibullDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
971	125	8	WeibullDistributionImpl.java	density	x	double	0	RET	$ < 0
972	155	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
972	155	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
973	157	15	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
974	159	16	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
2011	70	8	WilcoxonSignedRankTestImpl.java	ensureDataConformance	x	double[]	0	IllegalArgumentException	$ == null
2012	74	8	WilcoxonSignedRankTestImpl.java	ensureDataConformance	y	double[]	0	IllegalArgumentException	$ == null
2013	78	8	WilcoxonSignedRankTestImpl.java	ensureDataConformance	THIS	WilcoxonSignedRankTestImpl	0	IllegalArgumentException	x.$.length != y.$.length
2013	78	8	WilcoxonSignedRankTestImpl.java	ensureDataConformance	x	double[]	0	IllegalArgumentException	$.length != y.length
2013	78	8	WilcoxonSignedRankTestImpl.java	ensureDataConformance	y	double[]	0	IllegalArgumentException	x.length != $.length
2014	83	8	WilcoxonSignedRankTestImpl.java	ensureDataConformance	THIS	WilcoxonSignedRankTestImpl	0	IllegalArgumentException	x.$.length == 0
2014	83	8	WilcoxonSignedRankTestImpl.java	ensureDataConformance	x	double[]	0	IllegalArgumentException	$.length == 0
32853	100	8	WilcoxonSignedRankTestImpl.java	calculateDifferences	THIS	WilcoxonSignedRankTestImpl	0	NIL-FOR	i < x.$.length
32853	100	8	WilcoxonSignedRankTestImpl.java	calculateDifferences	i	int	0	NIL-FOR	$ < x.length
32853	100	8	WilcoxonSignedRankTestImpl.java	calculateDifferences	x	double[]	0	NIL-FOR	i < $.length
2015	117	8	WilcoxonSignedRankTestImpl.java	calculateAbsoluteDifferences	z	double[]	0	IllegalArgumentException	$ == null
2016	121	8	WilcoxonSignedRankTestImpl.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTestImpl	0	IllegalArgumentException	z.$.length == 0
2016	121	8	WilcoxonSignedRankTestImpl.java	calculateAbsoluteDifferences	z	double[]	0	IllegalArgumentException	$.length == 0
32854	128	8	WilcoxonSignedRankTestImpl.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTestImpl	0	NIL-FOR	i < z.$.length
32854	128	8	WilcoxonSignedRankTestImpl.java	calculateAbsoluteDifferences	i	int	0	NIL-FOR	$ < z.length
32854	128	8	WilcoxonSignedRankTestImpl.java	calculateAbsoluteDifferences	z	double[]	0	NIL-FOR	i < $.length
32855	160	8	WilcoxonSignedRankTestImpl.java	wilcoxonSignedRank	THIS	WilcoxonSignedRankTestImpl	0	NIL-FOR	i < z.$.length
32855	160	8	WilcoxonSignedRankTestImpl.java	wilcoxonSignedRank	i	int	0	NIL-FOR	$ < z.length
32855	160	8	WilcoxonSignedRankTestImpl.java	wilcoxonSignedRank	z	double[]	0	NIL-FOR	i < $.length
2017	161	12	WilcoxonSignedRankTestImpl.java	wilcoxonSignedRank	i	int	0	DEF	z[$] > 0
2017	161	12	WilcoxonSignedRankTestImpl.java	wilcoxonSignedRank	z	double[]	0	DEF	$[i] > 0
32856	189	8	WilcoxonSignedRankTestImpl.java	calculateExactPValue	i	int	0	NIL-FOR	$ < m
32856	189	8	WilcoxonSignedRankTestImpl.java	calculateExactPValue	m	int	0	NIL-FOR	i < $
32857	193	12	WilcoxonSignedRankTestImpl.java	calculateExactPValue	j	int	0	NIL-FOR	$ < N
2018	196	16	WilcoxonSignedRankTestImpl.java	calculateExactPValue	j	int	0	DEF	((i >> $) & 1) == 1
2018	196	16	WilcoxonSignedRankTestImpl.java	calculateExactPValue	i	int	0	DEF	(($ >> j) & 1) == 1
2019	201	12	WilcoxonSignedRankTestImpl.java	calculateExactPValue	rankSum	int	0	DEF	$ >= Wmax
2019	201	12	WilcoxonSignedRankTestImpl.java	calculateExactPValue	Wmax	double	0	DEF	rankSum >= $
2020	261	8	WilcoxonSignedRankTestImpl.java	wilcoxonSignedRankTest	exactPValue	boolean	0	IllegalArgumentException	$
2021	265	8	WilcoxonSignedRankTestImpl.java	wilcoxonSignedRankTest	exactPValue	boolean	1	RET	$
975	51	8	ZipfDistributionImpl.java	ZipfDistributionImpl	numberOfElements	int	0	NotStrictlyPositiveException	$ <= 0
976	55	8	ZipfDistributionImpl.java	ZipfDistributionImpl	exponent	double	0	NotStrictlyPositiveException	$ <= 0
977	85	8	ZipfDistributionImpl.java	probability	THIS	ZipfDistributionImpl	0	RET	x > $.numberOfElements
977	85	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ <= 0
977	85	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ > numberOfElements
978	101	8	ZipfDistributionImpl.java	cumulativeProbability	x	int	1	RET	$ <= 0
979	103	15	ZipfDistributionImpl.java	cumulativeProbability	THIS	ZipfDistributionImpl	0	RET	x >= $.numberOfElements
979	103	15	ZipfDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ >= numberOfElements
31759	145	8	ZipfDistributionImpl.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
