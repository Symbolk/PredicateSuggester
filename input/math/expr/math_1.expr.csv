id	line	column	filename	methodname	varname	vartype	else	return	right
559	62	8	AVLTree.java	insert	element	T	0	DEF	$ != null
560	63	12	AVLTree.java	insert	THIS	AVLTree	1	DEF	$.top == null
561	82	8	AVLTree.java	delete	element	T	0	RET	$ != null
9952	83	12	AVLTree.java	delete	node	Node	0	NIL-FOR	$ != null
562	86	16	AVLTree.java	delete	THIS	AVLTree	1	RET	node.$.element == element
562	86	16	AVLTree.java	delete	node	Node	1	RET	$.element == element
562	86	16	AVLTree.java	delete	element	T	1	RET	node.element == $
563	89	23	AVLTree.java	delete	THIS	AVLTree	0	RET	node.$.element.compareTo(element) > 0
563	89	23	AVLTree.java	delete	node	Node	0	RET	$.element.compareTo(element) > 0
563	89	23	AVLTree.java	delete	element	T	0	RET	node.element.compareTo($) > 0
9953	153	8	AVLTree.java	getNotSmaller	node	Node	0	NIL-FOR	$ != null
564	154	12	AVLTree.java	getNotSmaller	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) < 0
564	154	12	AVLTree.java	getNotSmaller	node	Node	1	RET	$.element.compareTo(reference) < 0
564	154	12	AVLTree.java	getNotSmaller	reference	T	1	RET	node.element.compareTo($) < 0
565	155	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.right == null
565	155	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.right == null
566	161	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.left == null
566	161	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.left == null
9954	184	8	AVLTree.java	getNotLarger	node	Node	0	NIL-FOR	$ != null
567	185	12	AVLTree.java	getNotLarger	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) > 0
567	185	12	AVLTree.java	getNotLarger	node	Node	1	RET	$.element.compareTo(reference) > 0
567	185	12	AVLTree.java	getNotLarger	reference	T	1	RET	node.element.compareTo($) > 0
568	186	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.left == null
568	186	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.left == null
569	192	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.right == null
569	192	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.right == null
1575	77	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ <= 0
1576	81	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ <= 0
1577	99	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NullArgumentException	$ == null
1578	102	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1578	102	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$.length == 0
1579	105	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d[0].length == 0
1579	105	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$[0].length == 0
1580	121	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1580	121	8	AbstractFieldMatrix.java	extractField	d	T[]	0	NoDataException	$.length == 0
10513	184	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
10513	184	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
10514	185	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
10514	185	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
10515	202	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
10515	202	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
10516	203	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
10516	203	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
10517	217	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
10517	217	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
10518	218	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
10518	218	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
10519	231	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
10519	231	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
10520	232	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
10520	232	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
10521	250	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
10521	250	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
10522	251	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
10522	251	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
10523	253	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
10523	253	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1581	272	8	AbstractFieldMatrix.java	power	p	int	0	NotPositiveException	$ < 0
1582	276	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NonSquareMatrixException	$.isSquare()
1583	280	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 0
1584	284	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 1
10524	301	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
10524	301	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
10524	301	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1585	302	12	AbstractFieldMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1585	302	12	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
10525	313	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
10525	313	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
10525	313	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
10526	332	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
10526	332	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
10526	332	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
10527	334	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
10527	334	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
10527	334	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
10528	350	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
10528	350	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
10529	351	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
10529	351	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1586	395	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1586	395	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1586	395	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1586	395	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1586	395	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1586	395	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1587	436	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1587	436	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1587	436	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1587	436	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1587	436	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
1587	436	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
10530	445	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
10530	445	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
10530	445	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
10531	447	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
10531	447	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
10531	447	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1588	459	8	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	NullArgumentException	$ == null
1589	463	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1590	468	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
10532	472	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
10532	472	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1591	473	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1591	473	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1591	473	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1591	473	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[r].length != nCols
10533	483	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
10533	483	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
10534	484	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
10534	484	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
10535	495	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
10535	495	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1592	508	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1592	508	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1592	508	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
10536	514	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
10536	514	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
10537	527	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
10537	527	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1593	540	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1593	540	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1593	540	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
10538	546	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
10538	546	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1594	563	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1594	563	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nCols
10539	567	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
10539	567	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1595	585	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1595	585	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nRows
10540	589	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
10540	589	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
10541	600	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
10541	600	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1596	613	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1596	613	8	AbstractFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1596	613	8	AbstractFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
10542	616	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
10542	616	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
10543	627	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
10543	627	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1597	640	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1597	640	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1597	640	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
10544	643	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
10544	643	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1598	691	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1598	691	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
10545	695	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
10545	695	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1599	706	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1599	706	8	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1599	706	8	AbstractFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
10546	711	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
10546	711	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
10547	713	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
10547	713	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1600	730	12	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1600	730	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nCols
10548	735	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
10548	735	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
10549	737	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
10549	737	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1601	752	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1601	752	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1601	752	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
10550	757	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
10550	757	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
10551	759	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
10551	759	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1602	776	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1602	776	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nRows
10552	781	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
10552	781	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
10553	783	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
10553	783	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
10554	798	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
10554	798	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
10555	799	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
10555	799	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
10556	813	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
10556	813	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
10557	814	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
10557	814	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
10558	829	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
10558	829	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
10559	830	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
10559	830	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
10560	847	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
10560	847	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
10561	848	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
10561	848	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
10562	860	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
10562	860	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
10563	861	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
10563	861	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
10564	875	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
10564	875	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
10565	876	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
10565	876	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
10566	891	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
10566	891	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
10567	892	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
10567	892	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
10568	909	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
10568	909	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
10569	910	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
10569	910	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
10570	956	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
10570	956	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1603	957	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
10571	961	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
10571	961	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1604	962	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
1605	984	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
1605	984	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
1606	987	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix<?> == false
1607	993	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getColumnDimension() != nCols
1607	993	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getRowDimension() != nRows
1607	993	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1607	993	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
10572	996	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
10572	996	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
10573	997	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
10573	997	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1608	998	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
1608	998	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
1608	998	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
1608	998	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
10574	1018	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
10574	1018	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
10575	1019	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
10575	1019	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1609	1033	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1609	1033	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= getRowDimension()
1609	1033	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1610	1047	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1610	1047	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1610	1047	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= getColumnDimension()
1611	1070	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1611	1070	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1612	1077	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1612	1077	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1613	1095	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1613	1095	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1614	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedColumns.$.length == 0
1614	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedRows.$.length == 0
1614	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1614	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1615	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1615	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1615	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1615	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1616	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1616	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1616	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1616	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1617	1153	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DimensionMismatchException	$.getColumnDimension() != m.getRowDimension()
1617	1153	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DimensionMismatchException	getColumnDimension() != $.getRowDimension()
1012	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	NullArgumentException	$ == null
1013	132	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	NullArgumentException	$ == null
1014	162	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
1014	162	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
9989	164	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
9989	164	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
9989	164	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
1015	169	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
1015	169	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
1091	82	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	NumberIsTooLargeException	x1 < $
1091	82	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	NumberIsTooLargeException	$ < x0
1092	101	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1092	101	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1093	106	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
1094	109	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	1	RET	$ == Integer.MIN_VALUE
1095	110	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	THIS	AbstractIntegerDistribution	0	RET	$.checkedCumulativeProbability(lower) >= p
1095	110	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	RET	checkedCumulativeProbability($) >= p
1095	110	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	checkedCumulativeProbability(lower) >= $
1096	119	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
1097	129	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	0	DEF	$
1098	132	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ > lower
1098	132	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	DEF	tmp > $
1099	137	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ < upper
1099	137	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	upper	int	0	DEF	tmp < $
9999	158	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	NIL-WHILE	$ + 1 < upper
9999	158	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	NIL-WHILE	lower + 1 < $
1100	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ < lower
1100	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ > upper
1100	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	DEF	xm < $
1100	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	DEF	xm > $
1101	170	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	pm	double	1	DEF	$ >= p
1101	170	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	p	double	1	DEF	pm >= $
1102	203	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
10000	208	8	AbstractIntegerDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
10000	208	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1103	229	8	AbstractIntegerDistribution.java	checkedCumulativeProbability	result	double	0	MathInternalError	Double.isNaN($)
3573	232	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y0.$.length != equations.getDimension()
3573	232	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y0.length != $.getDimension()
3573	232	8	AbstractIntegrator.java	integrate	y0	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
3574	235	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y.$.length != equations.getDimension()
3574	235	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y.length != $.getDimension()
3574	235	8	AbstractIntegrator.java	integrate	y	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
3575	321	12	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.statesInitialized
3576	340	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.state.evaluateStep(interpolator)
3576	340	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	state.evaluateStep($)
12029	346	12	AbstractIntegrator.java	acceptStep	occurringEvents	SortedSet<EventState>	0	NIL-WHILE	$.isEmpty()
3577	380	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	RET	$.isLastStep
3578	390	16	AbstractIntegrator.java	acceptStep	needReset	boolean	0	RET	$
3579	406	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	DEF	$.evaluateStep(interpolator)
3579	406	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	currentEvent.evaluateStep($)
3580	451	8	AbstractIntegrator.java	sanityChecks	threshold	double	0	NumberIsTooSmallException	dt <= $
3580	451	8	AbstractIntegrator.java	sanityChecks	dt	double	0	NumberIsTooSmallException	$ <= threshold
10116	203	8	AbstractLeastSquaresOptimizer.java	computeSigma	i	int	0	NIL-FOR	$ < nC
10116	203	8	AbstractLeastSquaresOptimizer.java	computeSigma	nC	int	0	NIL-FOR	i < $
1344	297	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	objectiveValue.$.length != $.target.$.length
1344	297	8	AbstractLeastSquaresOptimizer.java	computeResiduals	objectiveValue	double[]	0	DimensionMismatchException	$.length != target.length
10117	303	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.target.$.length
10117	303	8	AbstractLeastSquaresOptimizer.java	computeResiduals	i	int	0	NIL-FOR	$ < target.length
1345	317	8	AbstractLeastSquaresOptimizer.java	squareRoot	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
10118	320	12	AbstractLeastSquaresOptimizer.java	squareRoot	i	int	0	NIL-FOR	$ < dim
10118	320	12	AbstractLeastSquaresOptimizer.java	squareRoot	dim	int	0	NIL-FOR	i < $
11737	177	8	AbstractLeastSquaresOptimizer.java	computeSigma	i	int	0	NIL-FOR	$ < nC
11737	177	8	AbstractLeastSquaresOptimizer.java	computeSigma	nC	int	0	NIL-FOR	i < $
3155	222	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	objectiveValue.$.length != target.$.length
3155	222	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	DimensionMismatchException	objectiveValue.length != $.length
3155	222	8	AbstractLeastSquaresOptimizer.java	computeResiduals	objectiveValue	double[]	0	DimensionMismatchException	$.length != target.length
11738	228	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < target.$.length
11738	228	8	AbstractLeastSquaresOptimizer.java	computeResiduals	i	int	0	NIL-FOR	$ < target.length
11738	228	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	NIL-FOR	i < $.length
3156	254	12	AbstractLeastSquaresOptimizer.java	parseOptimizationData	THIS	AbstractLeastSquaresOptimizer	0	DEF	$.data instanceof Weight
3157	270	8	AbstractLeastSquaresOptimizer.java	squareRoot	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
11739	273	12	AbstractLeastSquaresOptimizer.java	squareRoot	i	int	0	NIL-FOR	$ < dim
11739	273	12	AbstractLeastSquaresOptimizer.java	squareRoot	dim	int	0	NIL-FOR	i < $
11018	172	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	i	int	0	NIL-FOR	$ < nC
11018	172	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nC	int	0	NIL-FOR	i < $
2000	177	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	dsValue.$.length != nR
2000	177	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	dsValue	DerivativeStructure[]	0	DimensionMismatchException	$.length != nR
2000	177	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nR	int	0	DimensionMismatchException	dsValue.length != $
11019	181	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	i	int	0	NIL-FOR	$ < nR
11019	181	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nR	int	0	NIL-FOR	i < $
11020	183	12	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	j	int	0	NIL-FOR	$ < nC
11020	183	12	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nC	int	0	NIL-FOR	j < $
2001	372	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NumberIsTooSmallException	$.rows <= $.cols
11021	379	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
11021	379	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
11021	379	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
11022	405	8	AbstractLeastSquaresOptimizer.java	computeSigma	i	int	0	NIL-FOR	$ < nC
11022	405	8	AbstractLeastSquaresOptimizer.java	computeSigma	nC	int	0	NIL-FOR	i < $
2002	542	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	objectiveValue.$.length != target.$.length
2002	542	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	DimensionMismatchException	objectiveValue.length != $.length
2002	542	8	AbstractLeastSquaresOptimizer.java	computeResiduals	objectiveValue	double[]	0	DimensionMismatchException	$.length != target.length
11023	548	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < target.$.length
11023	548	8	AbstractLeastSquaresOptimizer.java	computeResiduals	i	int	0	NIL-FOR	$ < target.length
11023	548	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	NIL-FOR	i < $.length
2003	562	8	AbstractLeastSquaresOptimizer.java	squareRoot	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
11024	565	12	AbstractLeastSquaresOptimizer.java	squareRoot	i	int	0	NIL-FOR	$ < dim
11024	565	12	AbstractLeastSquaresOptimizer.java	squareRoot	dim	int	0	NIL-FOR	i < $
1930	131	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxCountExceededException	++$.iterations > $.maxIterations
2655	116	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	NullArgumentException	$ == null
2656	119	8	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	data.$.length != nobs * (nvars + 1)
2656	119	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DimensionMismatchException	$.length != nobs * (nvars + 1)
2656	119	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DimensionMismatchException	data.length != $ * (nvars + 1)
2656	119	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DimensionMismatchException	data.length != nobs * ($ + 1)
2657	122	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NumberIsTooSmallException	$ <= nvars
2657	122	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NumberIsTooSmallException	nobs <= $
11427	129	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
11427	129	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
2658	131	12	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	$.noIntercept
11428	134	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < cols
11428	134	12	AbstractMultipleLinearRegression.java	newSampleData	cols	int	0	NIL-FOR	j < $
2659	150	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NullArgumentException	$ == null
2660	153	8	AbstractMultipleLinearRegression.java	newYSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	y.$.length == 0
2660	153	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NoDataException	$.length == 0
2661	185	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NullArgumentException	$ == null
2662	188	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2662	188	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NoDataException	$.length == 0
2663	191	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	$.noIntercept
11429	196	12	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NIL-FOR	i < x.$.length
11429	196	12	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	NIL-FOR	$ < x.length
11429	196	12	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NIL-FOR	i < $.length
2664	197	16	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x[i].length != nVars
2664	197	16	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	DimensionMismatchException	x[$].length != nVars
2664	197	16	AbstractMultipleLinearRegression.java	newXSampleData	nVars	int	0	DimensionMismatchException	x[i].length != $
2664	197	16	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DimensionMismatchException	$[i].length != nVars
2665	226	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NullArgumentException	$ == null
2665	226	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	NullArgumentException	$ == null
2666	229	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != y.$.length
2666	229	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DimensionMismatchException	$.length != y.length
2666	229	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DimensionMismatchException	x.length != $.length
2667	232	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2667	232	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NoDataException	$.length == 0
2668	235	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	MathIllegalArgumentException	x[0].length + 1 > x.$.length
2668	235	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	MathIllegalArgumentException	$[0].length + 1 > $.length
2669	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != covariance.$.length
2669	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DimensionMismatchException	$.length != covariance.length
2669	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DimensionMismatchException	x.length != $.length
2670	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length != covariance[0].length
2670	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length > 0
2670	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length != $[0].length
2670	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length > 0
11430	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
11430	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
1256	61	8	AbstractMultivariateRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
10046	66	8	AbstractMultivariateRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
10046	66	8	AbstractMultivariateRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
3627	59	12	AbstractParameterizable.java	isSupported	THIS	AbstractParameterizable	0	RET	$.supportedName.equals(name)
3627	59	12	AbstractParameterizable.java	isSupported	name	String	0	RET	supportedName.equals($)
3628	73	8	AbstractParameterizable.java	complainIfNotSupported	THIS	AbstractParameterizable	0	UnknownParameterException	$.isSupported(name)
3628	73	8	AbstractParameterizable.java	complainIfNotSupported	name	String	0	UnknownParameterException	isSupported($)
11769	108	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
11769	108	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
11769	108	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
11770	110	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
3185	111	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
3186	115	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
3186	115	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
3186	115	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
3187	157	8	AbstractRandomGenerator.java	nextInt	n	int	0	NotStrictlyPositiveException	$ <= 0
3188	253	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
11771	261	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
3189	266	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
1285	112	8	AbstractRealDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1285	112	8	AbstractRealDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
1286	157	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1286	157	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1287	162	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
1288	167	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
1289	177	8	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	DEF	$ == Double.NEGATIVE_INFINITY
1290	178	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
10060	182	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(lowerBound) >= p
10060	182	16	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	cumulativeProbability($) >= p
10060	182	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(lowerBound) >= $
1291	188	8	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	DEF	$ == Double.POSITIVE_INFINITY
1292	189	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
10061	193	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(upperBound) < p
10061	193	16	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	cumulativeProbability($) < p
10061	193	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(upperBound) < $
1293	211	8	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.isSupportConnected()
1294	214	12	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	x - dx >= $.getSupportLowerBound()
1294	214	12	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	x - $ >= getSupportLowerBound()
1294	214	12	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	$ - dx >= getSupportLowerBound()
1295	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.cumulativeProbability(x - dx) == px
1295	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	0	RET	cumulativeProbability(x - dx) == $
1295	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	cumulativeProbability(x - $) == px
1295	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	cumulativeProbability($ - dx) == px
10062	218	20	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	NIL-WHILE	upperBound - lowerBound > $
10062	218	20	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	upperBound - $ > dx
10062	218	20	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	$ - lowerBound > dx
1296	220	24	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	1	DEF	$.cumulativeProbability(midPoint) < px
1296	220	24	AbstractRealDistribution.java	inverseCumulativeProbability	midPoint	double	1	DEF	cumulativeProbability($) < px
1296	220	24	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	1	DEF	cumulativeProbability(midPoint) < $
1297	269	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
10063	274	8	AbstractRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
10063	274	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1457	68	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ < 1
1458	71	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ < 1
10337	84	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
10337	84	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
10338	85	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
10338	85	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
10339	101	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
10339	101	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
10340	102	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
10340	102	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
10341	115	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
10341	115	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
10342	116	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
10342	116	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
10343	129	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
10343	129	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
10344	130	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
10344	130	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
10345	147	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
10345	147	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
10346	148	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
10346	148	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
10347	150	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
10347	150	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1459	169	8	AbstractRealMatrix.java	power	p	int	0	NotPositiveException	$ < 0
1460	173	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NonSquareMatrixException	$.isSquare()
1461	177	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 0
1462	181	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 1
10348	198	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
10348	198	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
10348	198	8	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1463	199	12	AbstractRealMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1463	199	12	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
1464	204	16	AbstractRealMatrix.java	power	maxI	int	0	DEF	$ == -1
10349	213	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ <= maxI
10349	213	8	AbstractRealMatrix.java	power	maxI	int	0	NIL-FOR	i <= $
10350	230	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
10350	230	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
10350	230	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
10351	232	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
10351	232	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
10351	232	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
10352	312	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
10352	312	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
10353	313	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
10353	313	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1465	351	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1465	351	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1465	351	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1465	351	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1465	351	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1465	351	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
10354	356	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < rowsCount
10354	356	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	NIL-FOR	i < $
1466	357	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[i].length < columnsCount
1466	357	12	AbstractRealMatrix.java	copySubMatrix	i	int	0	MatrixDimensionMismatchException	destination[$].length < columnsCount
1466	357	12	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[i].length < $
1466	357	12	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[i].length < columnsCount
1467	396	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < nCols
1467	396	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1467	396	8	AbstractRealMatrix.java	copySubMatrix	nCols	int	0	MatrixDimensionMismatchException	destination[0].length < $
1467	396	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1467	396	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < nCols
1467	396	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
10355	402	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
10355	402	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
10355	402	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
1468	404	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destinationI.$.length < nCols
1468	404	12	AbstractRealMatrix.java	copySubMatrix	destinationI	double[]	0	MatrixDimensionMismatchException	$.length < nCols
1468	404	12	AbstractRealMatrix.java	copySubMatrix	nCols	int	0	MatrixDimensionMismatchException	destinationI.length < $
10356	408	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
10356	408	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
10356	408	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1469	420	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1470	425	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
10357	429	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
10357	429	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1471	430	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1471	430	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1471	430	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1471	430	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[r].length != nCols
10358	440	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
10358	440	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
10359	441	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
10359	441	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
10360	452	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
10360	452	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1472	464	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1472	464	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1472	464	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
10361	470	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
10361	470	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
10362	481	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
10362	481	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1473	493	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1473	493	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1473	493	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
10363	499	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
10363	499	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1474	515	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1474	515	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nCols
10364	519	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
10364	519	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1475	535	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1475	535	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nRows
10365	539	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
10365	539	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
10366	549	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
10366	549	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1476	561	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1476	561	8	AbstractRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1476	561	8	AbstractRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
10367	564	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
10367	564	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
10368	574	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
10368	574	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1477	586	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1477	586	8	AbstractRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1477	586	8	AbstractRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
10369	589	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
10369	589	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1478	651	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1478	651	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
10370	655	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
10370	655	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1479	666	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1479	666	8	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1479	666	8	AbstractRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
10371	671	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
10371	671	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
10372	673	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
10372	673	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1480	691	12	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1480	691	12	AbstractRealMatrix.java	operate	v	RealVector	0	DimensionMismatchException	$.getDimension() != nCols
10373	696	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
10373	696	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
10374	698	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
10374	698	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1481	713	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1481	713	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1481	713	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
10375	718	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
10375	718	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
10376	720	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
10376	720	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1482	737	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1482	737	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DimensionMismatchException	$.getDimension() != nRows
10377	742	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
10377	742	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
10378	744	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
10378	744	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
10379	759	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
10379	759	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
10380	760	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
10380	760	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
10381	774	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
10381	774	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
10382	775	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
10382	775	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
10383	790	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
10383	790	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
10384	791	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
10384	791	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
10385	808	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
10385	808	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
10386	809	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
10386	809	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
10387	821	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
10387	821	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
10388	822	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
10388	822	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
10389	836	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
10389	836	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
10390	837	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
10390	837	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
10391	852	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
10391	852	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
10392	853	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
10392	853	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
10393	870	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
10393	870	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
10394	871	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
10394	871	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
1483	930	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
1483	930	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
1484	933	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
1485	939	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
1485	939	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
1485	939	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1485	939	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
10395	942	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
10395	942	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
10396	943	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
10396	943	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1486	944	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
1486	944	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
1486	944	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
1486	944	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
10397	964	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
10397	964	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
10398	965	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
10398	965	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
597	92	8	AbstractRegion.java	AbstractRegion	boundary	Collection<SubHyperplane<S>>	1	DEF	$.size() == 0
598	143	8	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	1	DEF	hyperplanes.$.length == 0
598	143	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$ == null
598	143	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$.length == 0
599	154	16	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	0	DEF	node.insertCut($.hyperplane)
599	154	16	AbstractRegion.java	AbstractRegion	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
9961	181	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
9961	181	8	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	NIL-WHILE	$ == null
600	183	12	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	DEF	node.insertCut($.copySelf())
600	183	12	AbstractRegion.java	insertCuts	node	BSPTree<S>	0	DEF	$.insertCut(inserted.copySelf())
601	188	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	RET	$.hasNext()
9962	195	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
602	237	8	AbstractRegion.java	isEmpty	node	BSPTree<S>	0	RET	$.getCut() == null
603	266	8	AbstractRegion.java	checkPoint	cell	BSPTree<S>	0	RET	$.getCut() == null
604	280	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getAttribute() == null
604	280	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getCut() != null
604	280	8	AbstractRegion.java	getTree	includeBoundaryAttributes	boolean	0	DEF	$
605	412	8	AbstractRegion.java	getSize	THIS	AbstractRegion	0	DEF	$.barycenter == null
606	427	8	AbstractRegion.java	getBarycenter	THIS	AbstractRegion	0	DEF	$.barycenter == null
607	471	8	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	RET	$.getCut() == null
608	472	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getAttribute()
609	484	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
609	484	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
609	484	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
610	485	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
610	485	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
611	489	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
611	489	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
612	493	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
612	493	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
613	499	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
613	499	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
613	499	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
614	500	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
614	500	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
615	504	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
615	504	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
616	508	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
616	508	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
617	520	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
617	520	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
618	526	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())
618	526	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().getHyperplane().sameOrientationAs($.getHyperplane())
619	527	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
619	527	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
620	530	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
620	530	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
621	534	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
621	534	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
622	537	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
622	537	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
623	602	8	AbstractRegion.java	recurseIntersection	node	BSPTree<S>	0	RET	$.getCut() == null
624	616	12	AbstractRegion.java	recurseIntersection	plus	SubHyperplane<S>	1	RET	$ == null
625	618	19	AbstractRegion.java	recurseIntersection	minus	SubHyperplane<S>	1	RET	$ == null
626	652	8	AbstractRegion.java	recurseTransform	node	BSPTree<S>	0	RET	$.getCut() == null
627	659	8	AbstractRegion.java	recurseTransform	attribute	BoundaryAttribute<S>	0	DEF	$ != null
2859	98	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
2860	101	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
2860	101	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
11472	109	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
11472	109	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
11473	111	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
11473	111	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
2861	112	16	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
2861	112	16	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
2862	133	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
2862	133	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
11474	145	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
11474	145	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
11474	145	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
2863	149	12	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
2863	149	12	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
11475	152	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
11475	152	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
11476	155	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
11476	155	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
2864	156	20	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
2864	156	20	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
2864	156	20	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
2865	161	16	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
2866	168	12	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
11477	170	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
11477	170	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
2867	217	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
2867	217	8	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
11478	226	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
11478	226	8	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
11479	229	12	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
11479	229	12	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
11480	247	8	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
11480	247	8	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
2868	250	12	AbstractSimplex.java	evaluate	vertex	PointValuePair	0	DEF	Double.isNaN($.getValue())
11481	268	8	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
11481	268	8	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
2869	269	12	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
2869	269	12	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
2869	269	12	AbstractSimplex.java	replaceWorstPoint	pointValuePair	PointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
2869	269	12	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<PointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
2870	296	8	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
2870	296	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
2870	296	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
2871	311	8	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
2871	311	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
2871	311	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
2872	325	8	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
2872	325	8	AbstractSimplex.java	setPoints	points	PointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
11482	341	8	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
11482	341	8	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
2014	100	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
2015	103	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
2015	103	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
11040	111	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
11040	111	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
11041	113	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
11041	113	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
2016	114	16	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
2016	114	16	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
2017	135	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
2017	135	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
11042	147	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
11042	147	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
11042	147	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
2018	151	12	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
2018	151	12	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
11043	154	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
11043	154	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
11044	157	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
11044	157	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
2019	158	20	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
2019	158	20	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
2019	158	20	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
2020	163	16	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
2021	170	12	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
11045	172	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
11045	172	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
2022	219	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
2022	219	8	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
11046	228	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
11046	228	8	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
11047	231	12	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
11047	231	12	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
11048	249	8	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
11048	249	8	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
2023	252	12	AbstractSimplex.java	evaluate	vertex	PointValuePair	0	DEF	Double.isNaN($.getValue())
11049	270	8	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
11049	270	8	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
2024	271	12	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
2024	271	12	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
2024	271	12	AbstractSimplex.java	replaceWorstPoint	pointValuePair	PointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
2024	271	12	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<PointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
2025	298	8	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
2025	298	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
2025	298	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
2026	313	8	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
2026	313	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
2026	313	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
2027	327	8	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
2027	327	8	AbstractSimplex.java	setPoints	points	PointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
11050	343	8	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
11050	343	8	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
3437	181	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState == null
3437	181	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState == null
11895	194	6	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.interpolatedSecondaryState.$.length
11895	194	6	AbstractStepInterpolator.java	AbstractStepInterpolator	i	int	0	NIL-FOR	$ < interpolatedSecondaryState.length
3438	213	6	AbstractStepInterpolator.java	allocateInterpolatedArrays	dimension	int	1	DEF	$ < 0
3439	225	10	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	1	DEF	$.secondaryMappers == null
11896	231	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
11896	231	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	i	int	0	NIL-FOR	$ < secondaryMappers.length
3440	407	6	AbstractStepInterpolator.java	evaluateCompleteInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
3441	489	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
3442	520	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
3443	537	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
11897	538	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
11897	538	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
11898	582	4	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
11898	582	4	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < secondaryMappers.length
3444	587	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
11899	591	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
11899	591	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
2289	61	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2290	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
2290	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2290	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
2290	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
2291	131	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	NullArgumentException	$ == null
2292	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
2292	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
2292	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
2292	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
11257	152	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
11257	152	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
2293	167	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
2293	167	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
2294	170	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
653	125	8	AbstractSubHyperplane.java	recurseTransform	node	BSPTree<T>	0	RET	$.getCut() == null
654	132	8	AbstractSubHyperplane.java	recurseTransform	attribute	BoundaryAttribute<T>	0	DEF	$ != null
2412	85	8	AbstractUnivariateStatistic.java	setData	values	double[]	0	NullArgumentException	$ == null
2413	89	8	AbstractUnivariateStatistic.java	setData	begin	int	0	NotPositiveException	$ < 0
2414	93	8	AbstractUnivariateStatistic.java	setData	length	int	0	NotPositiveException	$ < 0
2415	97	8	AbstractUnivariateStatistic.java	setData	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
2415	97	8	AbstractUnivariateStatistic.java	setData	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
2415	97	8	AbstractUnivariateStatistic.java	setData	begin	int	0	NumberIsTooLargeException	$ + length > values.length
2415	97	8	AbstractUnivariateStatistic.java	setData	length	int	0	NumberIsTooLargeException	begin + $ > values.length
2416	186	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
2417	190	8	AbstractUnivariateStatistic.java	test	begin	int	0	NotPositiveException	$ < 0
2418	194	8	AbstractUnivariateStatistic.java	test	length	int	0	NotPositiveException	$ < 0
2419	198	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
2419	198	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
2419	198	8	AbstractUnivariateStatistic.java	test	begin	int	0	NumberIsTooLargeException	$ + length > values.length
2419	198	8	AbstractUnivariateStatistic.java	test	length	int	0	NumberIsTooLargeException	begin + $ > values.length
2420	203	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
2420	203	8	AbstractUnivariateStatistic.java	test	allowEmpty	boolean	0	RET	$
2421	284	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
2421	284	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	NullArgumentException	$ == null
2422	288	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DimensionMismatchException	weights.$.length != values.$.length
2422	288	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DimensionMismatchException	weights.length != $.length
2422	288	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DimensionMismatchException	$.length != values.length
11288	293	8	AbstractUnivariateStatistic.java	test	i	int	0	NIL-FOR	$ < begin + length
11288	293	8	AbstractUnivariateStatistic.java	test	begin	int	0	NIL-FOR	i < $ + length
11288	293	8	AbstractUnivariateStatistic.java	test	length	int	0	NIL-FOR	i < begin + $
2423	294	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isNaN(weights[$])
2423	294	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isNaN($[i])
2424	297	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isInfinite(weights[$])
2424	297	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
2425	300	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	weights[$] < 0
2425	300	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	$[i] < 0
2426	303	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] > 0.0
2426	303	12	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
2426	303	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] > 0.0
2427	308	8	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	MathIllegalArgumentException	$
11758	111	8	AbstractWell.java	AbstractWell	j	int	0	NIL-FOR	$ < r
11758	111	8	AbstractWell.java	AbstractWell	r	int	0	NIL-FOR	j < $
3168	154	8	AbstractWell.java	setSeed	seed	int[]	0	RET	$ == null
3169	161	8	AbstractWell.java	setSeed	THIS	AbstractWell	0	DEF	seed.$.length < $.v.$.length
3169	161	8	AbstractWell.java	setSeed	seed	int[]	0	DEF	$.length < v.length
11759	162	12	AbstractWell.java	setSeed	THIS	AbstractWell	0	NIL-FOR	i < $.v.$.length
11759	162	12	AbstractWell.java	setSeed	i	int	0	NIL-FOR	$ < v.length
11955	227	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-DOWHILE	$.isLastStep
11956	230	12	AdamsBashforthIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
11957	236	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.mainSetDimension
11957	236	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < mainSetDimension
3521	246	16	AdamsBashforthIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
11958	273	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
11958	273	12	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
11958	273	12	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
3522	287	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.isLastStep
3523	292	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.resetOccurred
3524	308	16	AdamsBashforthIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
11951	244	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-DOWHILE	$.isLastStep
11952	247	12	AdamsMoultonIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
11953	267	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
11953	267	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
11953	267	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
3517	276	16	AdamsMoultonIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
11954	290	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
11954	290	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
11954	290	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
3518	305	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.isLastStep
3519	310	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.resetOccurred
3520	327	16	AdamsMoultonIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
12016	167	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
12017	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
12017	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
3571	193	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
12018	227	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
12018	227	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
12018	227	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
12019	232	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
12019	232	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
12019	232	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
12020	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < y.$.length
12020	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < y.length
12020	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	y	double[][]	0	NIL-FOR	i < $.length
12021	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < aI.$.length
12021	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < aI.length
12021	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	aI	double[]	0	NIL-FOR	j < $.length
12022	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < yI.$.length
12022	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < yI.length
12022	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	yI	double[]	0	NIL-FOR	j < $.length
12023	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
12023	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
12023	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
12024	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
12024	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
12024	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
3556	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
3556	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
3556	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
3556	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
3557	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance != null
3557	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance.$.length != $.mainSetDimension
3558	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance != null
3558	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance.$.length != $.mainSetDimension
3559	253	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
12004	263	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
12004	263	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
12004	263	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
3560	272	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
12005	277	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
12005	277	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
12005	277	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
12006	284	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
12006	284	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
12006	284	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
3561	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
3561	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
3562	301	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
3562	301	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
3563	304	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
3564	325	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	NumberIsTooSmallException	FastMath.abs(h) < $.minStep
3564	325	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	NumberIsTooSmallException	FastMath.abs($) < minStep
3565	326	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
3566	334	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
3566	334	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
3567	336	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
3567	336	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
2430	307	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
2431	311	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
11289	321	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
2432	323	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
2432	323	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
2432	323	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
2433	326	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
2433	326	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
2433	326	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
2434	338	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
2435	340	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
3403	43	8	ArgUtils.java	flatten	array	Object[]	0	DEF	$ != null
3404	45	16	ArgUtils.java	flatten	THIS	ArgUtils	1	DEF	$.o instanceof Object[]
11	53	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
11	53	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
12	255	8	ArithmeticUtils.java	gcd	a	int	0	MathArithmeticException:RET	$ == 0
12	255	8	ArithmeticUtils.java	gcd	b	int	0	MathArithmeticException:RET	$ == 0
13	257	12	ArithmeticUtils.java	gcd	a	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
13	257	12	ArithmeticUtils.java	gcd	b	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
14	268	8	ArithmeticUtils.java	gcd	a	int	0	DEF	$ < 0
15	269	12	ArithmeticUtils.java	gcd	a	int	1	DEF	Integer.MIN_VALUE == $
16	276	8	ArithmeticUtils.java	gcd	b	int	0	DEF	$ < 0
17	277	12	ArithmeticUtils.java	gcd	b	int	1	DEF	Integer.MIN_VALUE == $
18	284	8	ArithmeticUtils.java	gcd	useLong	boolean	0	MathArithmeticException:RET	$
19	285	12	ArithmeticUtils.java	gcd	al	long	0	MathArithmeticException	$ == bl
19	285	12	ArithmeticUtils.java	gcd	bl	long	0	MathArithmeticException	al == $
20	292	12	ArithmeticUtils.java	gcd	al	long	0	MathArithmeticException:RET	$ == 0
21	293	16	ArithmeticUtils.java	gcd	bl	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
22	331	8	ArithmeticUtils.java	gcdPositive	a	int	1	RET	$ == 0
23	334	13	ArithmeticUtils.java	gcdPositive	b	int	0	RET	$ == 0
9856	351	8	ArithmeticUtils.java	gcdPositive	a	int	0	NIL-WHILE	$ != b
9856	351	8	ArithmeticUtils.java	gcdPositive	b	int	0	NIL-WHILE	a != $
24	396	8	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException:RET	$ == 0
24	396	8	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException:RET	$ == 0
25	397	12	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException	$ == Long.MIN_VALUE
25	397	12	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException	$ == Long.MIN_VALUE
26	408	8	ArithmeticUtils.java	gcd	u	long	0	DEF	$ > 0
27	411	8	ArithmeticUtils.java	gcd	v	long	0	DEF	$ > 0
9857	416	8	ArithmeticUtils.java	gcd	u	long	0	NIL-WHILE	($ & 1) == 0
9857	416	8	ArithmeticUtils.java	gcd	v	long	0	NIL-WHILE	($ & 1) == 0
9857	416	8	ArithmeticUtils.java	gcd	k	int	0	NIL-WHILE	$ < 63
28	422	8	ArithmeticUtils.java	gcd	k	int	0	MathArithmeticException	$ == 63
9858	431	8	ArithmeticUtils.java	gcd	t	long	0	NIL-DOWHILE	$ != 0
9859	434	12	ArithmeticUtils.java	gcd	t	long	0	NIL-WHILE	($ & 1) == 0
29	438	12	ArithmeticUtils.java	gcd	t	long	1	DEF	$ > 0
30	474	8	ArithmeticUtils.java	lcm	a	int	0	RET	$ == 0
30	474	8	ArithmeticUtils.java	lcm	b	int	0	RET	$ == 0
31	478	8	ArithmeticUtils.java	lcm	lcm	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
32	508	8	ArithmeticUtils.java	lcm	a	long	0	RET	$ == 0
32	508	8	ArithmeticUtils.java	lcm	b	long	0	RET	$ == 0
33	512	8	ArithmeticUtils.java	lcm	lcm	long	0	MathArithmeticException	$ == Long.MIN_VALUE
34	531	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
34	531	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
35	549	8	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ > b
35	549	8	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a > $
36	553	12	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ < 0
37	554	16	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ < 0
38	556	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
38	556	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
39	561	23	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ > 0
40	563	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
40	563	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
41	573	19	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ > 0
42	578	16	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
42	578	16	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
43	603	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
43	603	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
44	621	8	ArithmeticUtils.java	subAndCheck	b	long	1	MathArithmeticException	$ == Long.MIN_VALUE
45	622	12	ArithmeticUtils.java	subAndCheck	a	long	1	DEF	$ < 0
46	643	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
9860	649	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
47	650	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
48	669	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
9861	675	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
49	676	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
50	695	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
9862	701	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
51	702	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
52	721	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
9863	727	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
53	728	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
54	747	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
55	763	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
9864	769	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
56	770	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
57	790	8	ArithmeticUtils.java	pow	e	BigInteger	0	NotPositiveException	$.compareTo(BigInteger.ZERO) < 0
9865	796	8	ArithmeticUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
58	797	12	ArithmeticUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
59	846	8	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ > b
59	846	8	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a > $
60	852	12	ArithmeticUtils.java	addAndCheck	a	long	1	MathArithmeticException	$ < 0
61	853	16	ArithmeticUtils.java	addAndCheck	b	long	1	MathArithmeticException	$ < 0
62	855	20	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
62	855	20	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
63	869	16	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
63	869	16	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
1558	157	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
1559	162	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NoDataException	$ == 0
1560	166	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
10476	169	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
10476	169	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
1561	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	d[r].length != nCols
1561	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1561	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1561	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DimensionMismatchException	$[r].length != nCols
10477	202	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
10477	202	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
10478	237	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
10478	237	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
10479	241	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
10479	241	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
10480	265	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
10480	265	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
10481	269	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
10481	269	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
10482	295	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
10482	295	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
10483	298	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
10483	298	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
10484	300	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
10484	300	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1562	333	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DimensionMismatchException	$.data == null
1563	334	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1564	337	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1565	341	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1566	346	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
10485	350	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
10485	350	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1567	351	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1567	351	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1567	351	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1567	351	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[i].length != nCols
1568	419	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1568	419	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1568	419	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
10486	423	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
10486	423	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
10487	426	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
10487	426	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1569	439	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1569	439	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1569	439	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
10488	444	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
10488	444	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
10489	446	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
10489	446	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
10490	461	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
10490	461	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
10491	463	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
10491	463	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
10492	476	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
10492	476	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
10493	478	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
10493	478	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
10494	494	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
10494	494	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
10495	496	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
10495	496	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
10496	512	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
10496	512	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
10497	514	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
10497	514	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
10498	527	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
10498	527	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
10499	528	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
10499	528	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
10500	542	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
10500	542	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
10501	543	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
10501	543	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
10502	559	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
10502	559	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
10503	560	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
10503	560	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
10504	577	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
10504	577	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
10505	578	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
10505	578	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
10506	594	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
10506	594	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1741	102	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
1742	105	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullArgumentException	$ == null
1743	109	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NoDataException	$ == 0
1744	113	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	NoDataException	$ == 0
10779	116	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
10779	116	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
1745	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	d[r].length != nCols
1745	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1745	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1745	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DimensionMismatchException	$[r].length != nCols
10780	135	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
10780	135	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
10781	170	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
10781	170	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
10782	174	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
10782	174	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
10783	197	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
10783	197	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
10784	201	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
10784	201	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
10785	231	8	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
10785	231	8	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
10786	234	12	Array2DRowRealMatrix.java	multiply	mRow	int	0	NIL-FOR	$ < nSum
10786	234	12	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	mRow < $
10787	238	12	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
10787	238	12	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
10788	241	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
10788	241	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1746	272	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DimensionMismatchException	$.data == null
1747	273	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1748	276	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1749	281	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1750	286	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
10789	290	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
10789	290	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1751	291	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1751	291	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1751	291	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1751	291	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[i].length != nCols
1752	354	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1752	354	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1752	354	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
10790	358	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
10790	358	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
10791	361	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
10791	361	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1753	375	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1753	375	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1753	375	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
10792	380	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
10792	380	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
10793	382	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
10793	382	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
10794	398	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
10794	398	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
10795	400	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
10795	400	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
10796	413	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
10796	413	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
10797	415	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
10797	415	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
10798	431	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
10798	431	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
10799	433	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
10799	433	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
10800	449	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
10800	449	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
10801	451	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
10801	451	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
10802	464	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
10802	464	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
10803	465	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
10803	465	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
10804	479	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
10804	479	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
10805	480	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
10805	480	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
10806	496	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
10806	496	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
10807	497	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
10807	497	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
10808	514	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
10808	514	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
10809	515	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
10809	515	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
10810	531	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
10810	531	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1843	149	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	d.$.length == 0
1843	149	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	ZeroException	$.length == 0
1844	191	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1844	191	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1844	191	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1844	191	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1845	213	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1845	213	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1845	213	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1845	213	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
10904	232	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10904	232	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
1846	394	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1846	394	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1846	394	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
1847	418	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1847	418	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1847	418	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
10905	445	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10905	445	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
10906	463	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10906	463	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
10907	477	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10907	477	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
10908	495	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10908	495	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
10909	504	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10909	504	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
10910	512	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10910	512	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
10911	521	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10911	521	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
10912	529	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10912	529	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
10913	538	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10913	538	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
10914	546	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10914	546	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
10915	557	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10915	557	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
10916	567	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10916	567	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
10917	577	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10917	577	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
10918	590	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10918	590	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
10919	608	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10919	608	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
10920	626	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10920	626	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
10921	640	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10921	640	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
10922	663	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10922	663	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
10923	695	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10923	695	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
10924	713	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10924	713	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
10925	745	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
10925	745	12	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
10926	746	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
10926	746	16	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
10927	763	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
10927	763	8	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
10928	764	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
10928	764	12	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1848	810	8	ArrayFieldVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
10929	838	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
10929	838	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
10929	838	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
1849	894	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DimensionMismatchException	$.data.$.length != n
1849	894	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1850	908	8	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
1850	908	8	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
1851	911	8	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
1852	918	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
1852	918	12	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
10930	922	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
10930	922	12	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1853	923	16	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
1853	923	16	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
1853	923	16	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
1854	955	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	OutOfRangeException	index >= $.getDimension()
1854	955	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1854	955	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1412	105	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1413	123	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1414	126	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1414	126	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NumberIsTooLargeException	$.length < pos + size
1414	126	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1414	126	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
10274	140	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
10274	140	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
10274	140	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
1415	157	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NullArgumentException	$ == null
1416	160	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1416	160	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NumberIsTooLargeException	$.length < pos + size
1416	160	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1416	160	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
10275	164	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
10275	164	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
10275	164	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
1417	176	8	ArrayRealVector.java	ArrayRealVector	v	RealVector	0	NullArgumentException	$ == null
10276	180	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10276	180	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
10277	227	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l2
10277	227	8	ArrayRealVector.java	ArrayRealVector	l2	int	0	NIL-FOR	i < $
10278	241	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l1
10278	241	8	ArrayRealVector.java	ArrayRealVector	l1	int	0	NIL-FOR	i < $
1418	296	8	ArrayRealVector.java	add	v	RealVector	1	RET	$ instanceof ArrayRealVector
10279	302	12	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < dim
10279	302	12	ArrayRealVector.java	add	dim	int	0	NIL-FOR	i < $
10280	310	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1419	322	8	ArrayRealVector.java	subtract	v	RealVector	1	RET	$ instanceof ArrayRealVector
10281	328	12	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < dim
10281	328	12	ArrayRealVector.java	subtract	dim	int	0	NIL-FOR	i < $
10282	336	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
10283	353	8	ArrayRealVector.java	mapToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10283	353	8	ArrayRealVector.java	mapToSelf	i	int	0	NIL-FOR	$ < data.length
10284	362	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10284	362	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
10285	371	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10285	371	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
10286	380	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10286	380	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
10287	389	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10287	389	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
1420	399	8	ArrayRealVector.java	ebeMultiply	v	RealVector	1	RET	$ instanceof ArrayRealVector
10288	405	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < dim
10288	405	12	ArrayRealVector.java	ebeMultiply	dim	int	0	NIL-FOR	i < $
10289	412	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10289	412	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
1421	423	8	ArrayRealVector.java	ebeDivide	v	RealVector	1	RET	$ instanceof ArrayRealVector
10290	429	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < dim
10290	429	12	ArrayRealVector.java	ebeDivide	dim	int	0	NIL-FOR	i < $
10291	436	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10291	436	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
1422	456	8	ArrayRealVector.java	dotProduct	v	RealVector	0	RET	$ instanceof ArrayRealVector
10292	460	12	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10292	460	12	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
1423	501	8	ArrayRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
10293	505	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10293	505	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
10294	513	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10294	513	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
1424	525	8	ArrayRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof ArrayRealVector
10295	529	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10295	529	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
10296	537	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10296	537	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
1425	549	8	ArrayRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
10297	553	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10297	553	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
10298	561	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10298	561	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
1426	572	8	ArrayRealVector.java	outerProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
10299	577	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
10299	577	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
10300	578	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
10300	578	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
10301	587	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
10301	587	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
10302	588	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
10302	588	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1427	646	8	ArrayRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
1428	685	8	ArrayRealVector.java	setSubVector	v	RealVector	1	DEF	$ instanceof ArrayRealVector
10303	689	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
10303	689	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
10303	689	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
1429	758	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DimensionMismatchException	$.data.$.length != n
1429	758	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1430	772	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
1431	788	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
1432	793	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
1433	804	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
1433	804	8	ArrayRealVector.java	equals	other	Object	0	RET	this == $
1434	808	8	ArrayRealVector.java	equals	other	Object	0	RET	$ instanceof RealVector
1435	813	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
1435	813	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
1436	817	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
10304	821	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10304	821	8	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1437	822	12	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
1437	822	12	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
1437	822	12	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
1438	834	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
1439	851	8	ArrayRealVector.java	combineToSelf	y	RealVector	1	DEF	$ instanceof ArrayRealVector
10305	854	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
10305	854	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
10306	859	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
10306	859	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
10307	870	8	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10307	870	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
10308	883	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
10308	883	8	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
10309	915	8	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
10309	915	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
10310	928	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
10310	928	8	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
11533	295	8	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
11533	295	8	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
2913	299	12	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= -$.initialTrustRegionRadius
2913	299	12	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= -initialTrustRegionRadius
2914	300	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= ZERO
2914	300	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= ZERO
2915	311	19	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(j) <= $.initialTrustRegionRadius
2915	311	19	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	upperDifference.getEntry($) <= initialTrustRegionRadius
2916	312	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.upperDifference.getEntry(j) <= ZERO
2916	312	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	upperDifference.getEntry($) <= ZERO
11534	406	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11534	406	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2917	443	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex != kbase
2917	443	12	BOBYQAOptimizer.java	bobyqb	kbase	int	0	DEF	trustRegionCenterInterpolationPointIndex != $
11535	445	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11535	445	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11536	446	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
11536	446	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2918	447	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2918	447	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
2919	454	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() > npt
2919	454	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	getEvaluations() > $
11537	455	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11537	455	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11538	457	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11538	457	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11539	461	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11539	461	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2920	494	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
2920	494	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
2921	499	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
2921	499	16	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
2922	513	16	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
2922	513	16	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
2922	513	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
2922	513	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
11540	518	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11540	518	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2923	520	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.lowerDifference.getEntry(j)
2923	520	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2924	523	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.upperDifference.getEntry(j)
2924	523	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2925	526	20	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2925	526	20	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
11541	528	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11541	528	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2926	534	24	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2926	534	24	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
2927	553	12	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
2927	553	12	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
11542	558	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11542	558	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11543	561	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11543	561	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11544	567	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11544	567	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11545	571	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
11545	571	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
11546	582	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
11546	582	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
11547	585	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11547	585	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11548	590	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11548	590	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11549	592	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11549	592	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11550	596	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11550	596	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11551	602	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11551	602	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11552	605	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
11552	605	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
11553	617	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11553	617	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11554	619	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11554	619	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11555	623	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
11555	623	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
11556	632	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11556	632	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2928	641	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
11557	673	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11557	673	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11558	684	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11558	684	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11559	688	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11559	688	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11560	698	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
11560	698	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
11561	700	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11561	700	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11562	704	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11562	704	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11563	711	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11563	711	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11564	716	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11564	716	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11565	721	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11565	721	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2929	740	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
2930	744	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
2930	744	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
2930	744	16	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
11566	745	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11566	745	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11567	763	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11567	763	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2931	764	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2931	764	20	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
11568	768	20	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
11568	768	20	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
11569	777	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11569	777	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2932	786	20	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2932	786	20	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2932	786	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
11570	807	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11570	807	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2933	815	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.lowerDifference.getEntry(i)
2933	815	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2934	818	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.upperDifference.getEntry(i)
2934	818	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2935	825	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
2936	827	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
11571	838	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11571	838	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11572	840	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
11572	840	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2937	842	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
2937	842	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
11573	849	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11573	849	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2938	859	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
2938	859	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
2939	865	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
2940	866	16	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
2941	871	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
2942	874	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
2943	881	16	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2943	881	16	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2944	887	16	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2944	887	16	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
11574	894	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11574	894	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11575	896	24	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
11575	896	24	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
11576	905	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11576	905	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2945	914	24	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2945	914	24	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2945	914	24	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
2946	925	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
2946	925	20	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
11577	940	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11577	940	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11578	942	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
11578	942	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
11579	947	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
11579	947	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
11580	949	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11580	949	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11581	958	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11581	958	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11582	962	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11582	962	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11583	964	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
11583	964	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
11584	968	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11584	968	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11585	972	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11585	972	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11586	976	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11586	976	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2947	982	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2947	982	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
11587	986	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11587	986	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11588	991	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
11588	991	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2948	992	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2948	992	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
11589	999	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11589	999	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11590	1001	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11590	1001	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11591	1005	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11591	1005	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2949	1015	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
11592	1016	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11592	1016	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11593	1020	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
11593	1020	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
11594	1022	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11594	1022	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11595	1025	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11595	1025	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11596	1029	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11596	1029	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11597	1031	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11597	1031	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11598	1039	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11598	1039	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11599	1041	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11599	1041	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2950	1045	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2950	1045	20	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2951	1053	27	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2951	1053	27	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
2952	1074	16	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
2952	1074	16	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
2953	1077	16	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
11600	1078	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
11600	1078	20	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
2954	1079	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
2954	1079	24	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
2955	1082	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
2955	1082	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
2956	1085	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
2956	1085	24	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
2957	1097	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
2958	1100	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
2958	1100	12	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
2958	1100	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
11601	1117	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11601	1117	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11602	1119	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11602	1119	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2959	1124	16	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
2959	1124	16	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
2960	1136	12	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
2961	1138	16	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2962	1141	20	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2962	1141	20	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2963	1153	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2964	1156	12	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
2965	1159	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta, dnorm) > $
2965	1159	12	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($, dnorm) > rho
2965	1159	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta, $) > rho
2966	1168	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
2966	1168	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
2967	1171	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
2968	1173	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
2969	1187	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2970	1193	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
2970	1193	12	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= $
11603	1194	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11603	1194	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2971	1202	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2971	1202	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2972	1205	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2972	1205	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
11604	1268	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
11604	1268	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
11605	1271	8	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
11605	1271	8	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
11606	1273	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
11606	1273	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
11607	1282	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11607	1282	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
11608	1285	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
11608	1285	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
11609	1287	12	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
11609	1287	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
11610	1291	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11610	1291	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
11611	1307	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
11611	1307	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
2973	1308	12	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2973	1308	12	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
11612	1313	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11612	1313	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
11613	1326	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11613	1326	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2974	1328	16	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
2975	1329	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2975	1329	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2975	1329	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2975	1329	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2976	1333	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2976	1333	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2976	1333	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2976	1333	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2977	1339	23	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
2978	1340	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2978	1340	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2978	1340	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2978	1340	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2979	1344	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2979	1344	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2979	1344	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2979	1344	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2980	1359	12	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
2980	1359	12	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
2981	1363	16	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
2981	1363	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
2982	1371	16	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
2982	1371	16	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
2983	1373	20	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
2983	1373	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
2984	1385	16	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
2984	1385	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
2985	1390	16	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
2985	1390	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
2986	1402	12	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
2986	1402	12	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
11614	1412	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11614	1412	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2987	1417	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
2988	1420	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
11615	1435	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11615	1435	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2989	1438	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.min($.trustRegionCenterOffset.getEntry(i) - $.lowerDifference.getEntry(i), glagValue) > ZERO
2989	1438	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.max($.trustRegionCenterOffset.getEntry(i) - $.upperDifference.getEntry(i), glagValue) < ZERO
2989	1438	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
2989	1438	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
2989	1438	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
2989	1438	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
2990	1445	12	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
2991	1451	12	BOBYQAOptimizer.java	altmov	tmp1	double	0	DEF	$ > ZERO
11616	1454	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11616	1454	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2992	1455	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
2992	1455	20	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
2992	1455	20	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
2993	1457	24	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 <= $.lowerDifference.getEntry(i)
2993	1457	24	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= lowerDifference.getEntry(i)
2993	1457	24	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= lowerDifference.getEntry($)
2994	1462	31	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 >= $.upperDifference.getEntry(i)
2994	1462	31	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= upperDifference.getEntry(i)
2994	1462	31	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= upperDifference.getEntry($)
11617	1480	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11617	1480	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2995	1482	16	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
2995	1482	16	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
2995	1482	16	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
2996	1487	23	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
2996	1487	23	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2997	1489	23	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
11618	1503	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
11618	1503	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
11619	1505	16	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
11619	1505	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
2998	1510	12	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
2999	1513	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
2999	1513	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
2999	1513	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
2999	1513	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
11620	1516	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11620	1516	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
3000	1534	12	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
11621	1535	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11621	1535	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
3001	1545	8	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
3001	1545	8	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
11622	1546	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11622	1546	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
11623	1592	8	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
11623	1592	8	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
11624	1594	12	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
11624	1594	12	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
11625	1597	12	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
11625	1597	12	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
11626	1601	8	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
11626	1601	8	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
11627	1604	8	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
11627	1604	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
11628	1606	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
11628	1606	12	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
11629	1618	8	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
11629	1618	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
3002	1625	12	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= 2 * n
3002	1625	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= 2 * $
3003	1626	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ >= 1
3003	1626	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= n
3003	1626	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= $
3004	1629	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfmm) == ZERO
3004	1629	20	BOBYQAOptimizer.java	prelim	nfmm	int	0	DEF	upperDifference.getEntry($) == ZERO
3005	1634	23	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	$ > n
3005	1634	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	nfm > $
3006	1637	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.lowerDifference.getEntry(nfxm) == ZERO
3006	1637	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	lowerDifference.getEntry($) == ZERO
3007	1641	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfxm) == ZERO
3007	1641	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	upperDifference.getEntry($) == ZERO
3008	1651	16	BOBYQAOptimizer.java	prelim	n	int	0	DEF	ipt > $
3008	1651	16	BOBYQAOptimizer.java	prelim	ipt	int	0	DEF	$ > n
11630	1666	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
11630	1666	12	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
3009	1670	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.lowerDifference.getEntry(j)
3009	1670	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == lowerDifference.getEntry($)
3009	1670	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == lowerDifference.getEntry(j)
3010	1673	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.upperDifference.getEntry(j)
3010	1673	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == upperDifference.getEntry($)
3010	1673	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == upperDifference.getEntry(j)
3011	1683	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
3012	1686	19	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex)
3012	1686	19	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
3013	1696	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= 2 * n + 1
3013	1696	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= 2 * $ + 1
3014	1697	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ >= 2
3014	1697	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= n + 1
3014	1697	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= $ + 1
3015	1700	20	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	npt < $ + n
3015	1700	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	npt < numEval + $
3015	1700	20	BOBYQAOptimizer.java	prelim	npt	int	0	DEF	$ < numEval + n
3016	1707	23	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
3016	1707	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
3017	1713	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry(nfm - n)
3017	1713	20	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fAtInterpolationPoints.getEntry($ - n)
3017	1713	20	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
3017	1713	20	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
3017	1713	20	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(nfm - n)
3017	1713	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fAtInterpolationPoints.getEntry(nfm - $)
3018	1716	24	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
3018	1716	24	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
11631	1842	8	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11631	1842	8	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3019	1844	12	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) <= $.lowerDifference.getEntry(i)
3019	1844	12	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	trustRegionCenterOffset.getEntry($) <= lowerDifference.getEntry($)
3020	1845	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) >= ZERO
3020	1845	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) >= ZERO
3021	1848	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) >= $.upperDifference.getEntry(i)
3021	1848	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) <= ZERO
3021	1848	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	trustRegionCenterOffset.getEntry($) >= upperDifference.getEntry($)
3021	1848	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) <= ZERO
3022	1852	12	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
3022	1852	12	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
11632	1878	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11632	1878	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3023	1879	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
3023	1879	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
3024	1881	23	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
3025	1890	12	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
3026	1893	12	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
3027	1897	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
3027	1897	12	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
3027	1897	12	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
11633	1913	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11633	1913	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3028	1914	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3028	1914	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
3029	1922	12	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
3030	1926	12	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
3031	1932	12	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
11634	1941	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11634	1941	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3032	1942	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
3032	1942	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
3033	1944	20	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
3033	1944	20	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
3034	1949	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
3034	1949	20	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
3035	1959	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
3036	1962	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
3036	1962	16	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
3037	1964	20	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
11635	1970	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11635	1970	16	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3038	1972	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3038	1972	20	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
3039	1987	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
3040	1990	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
3040	1990	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
3041	1996	16	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
3042	2005	12	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
3042	2005	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
3043	2006	16	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
3043	2006	16	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
3044	2009	16	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
3044	2009	16	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
3045	2027	12	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
3045	2027	12	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
11636	2033	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11636	2033	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3046	2034	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
3046	2034	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
3047	2056	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
3047	2056	12	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
11637	2060	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11637	2060	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3048	2061	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
3048	2061	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
11638	2076	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11638	2076	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3049	2077	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3049	2077	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
3050	2080	20	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
3051	2084	27	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
3052	2097	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
3053	2099	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
3053	2099	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
3053	2099	24	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
3054	2108	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
3055	2110	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
3055	2110	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
3055	2110	24	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
11639	2128	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11639	2128	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3056	2129	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3056	2129	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
11640	2144	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
11640	2144	12	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
3057	2149	16	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
3057	2149	16	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
3058	2153	23	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
3058	2153	23	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
3059	2162	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
3060	2165	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
3060	2165	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
3061	2173	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
11641	2183	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11641	2183	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3062	2185	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3062	2185	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
3063	2195	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
3063	2195	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
3063	2195	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
3064	2204	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
3064	2204	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
11642	2211	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11642	2211	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3065	2217	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
3065	2217	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
3066	2220	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
3066	2220	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
11643	2237	12	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
11643	2237	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
11644	2239	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
11644	2239	16	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
3067	2240	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
3067	2240	20	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
11645	2248	12	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
11645	2248	12	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
3068	2249	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.modelSecondDerivativesParameters.getEntry(k) != ZERO
3068	2249	16	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	modelSecondDerivativesParameters.getEntry($) != ZERO
11646	2250	20	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11646	2250	20	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3069	2255	12	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
3070	2258	12	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
3070	2258	12	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
11647	2261	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11647	2261	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
11648	2302	8	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
11648	2302	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
11649	2303	12	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
11649	2303	12	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
11650	2312	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
11650	2312	8	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
3071	2314	12	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
3071	2314	12	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
11651	2322	16	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
11651	2322	16	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
11652	2334	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
11652	2334	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
11653	2346	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
11653	2346	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
11654	2353	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
11654	2353	8	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
11655	2358	12	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
11655	2358	12	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
3072	2361	16	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
3072	2361	16	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
3073	2382	8	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
3074	2387	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
3074	2387	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
3074	2387	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
3074	2387	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
11656	2400	8	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
11656	2400	8	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
3075	2404	8	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
3075	2404	8	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
11102	300	8	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
11102	300	8	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
2078	304	12	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= -$.initialTrustRegionRadius
2078	304	12	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= -initialTrustRegionRadius
2079	305	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= ZERO
2079	305	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= ZERO
2080	316	19	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(j) <= $.initialTrustRegionRadius
2080	316	19	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	upperDifference.getEntry($) <= initialTrustRegionRadius
2081	317	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.upperDifference.getEntry(j) <= ZERO
2081	317	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	upperDifference.getEntry($) <= ZERO
11103	411	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11103	411	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2082	448	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex != kbase
2082	448	12	BOBYQAOptimizer.java	bobyqb	kbase	int	0	DEF	trustRegionCenterInterpolationPointIndex != $
11104	450	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11104	450	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11105	451	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
11105	451	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2083	452	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2083	452	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
2084	459	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() > npt
2084	459	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	getEvaluations() > $
11106	460	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11106	460	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11107	462	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11107	462	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11108	466	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11108	466	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2085	499	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
2085	499	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
2086	504	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
2086	504	16	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
2087	518	16	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
2087	518	16	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
2087	518	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
2087	518	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
11109	523	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11109	523	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2088	525	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.lowerDifference.getEntry(j)
2088	525	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2089	528	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.upperDifference.getEntry(j)
2089	528	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2090	531	20	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2090	531	20	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
11110	533	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11110	533	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2091	539	24	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2091	539	24	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
2092	558	12	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
2092	558	12	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
11111	563	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11111	563	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11112	566	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11112	566	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11113	572	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11113	572	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11114	576	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
11114	576	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
11115	587	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
11115	587	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
11116	590	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11116	590	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11117	595	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11117	595	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11118	597	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11118	597	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11119	601	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11119	601	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11120	607	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11120	607	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11121	610	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
11121	610	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
11122	622	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11122	622	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11123	624	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11123	624	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11124	628	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
11124	628	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
11125	637	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11125	637	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2093	646	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
11126	678	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11126	678	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11127	689	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11127	689	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11128	693	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11128	693	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11129	703	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
11129	703	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
11130	705	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11130	705	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11131	709	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11131	709	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11132	716	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11132	716	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11133	721	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11133	721	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11134	726	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11134	726	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2094	745	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
2095	749	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
2095	749	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
2095	749	16	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
11135	750	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11135	750	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11136	768	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11136	768	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2096	769	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2096	769	20	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
11137	773	20	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
11137	773	20	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
11138	782	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11138	782	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2097	791	20	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2097	791	20	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2097	791	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
11139	812	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11139	812	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2098	820	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.lowerDifference.getEntry(i)
2098	820	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2099	823	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.upperDifference.getEntry(i)
2099	823	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2100	830	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
2101	832	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
11140	843	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11140	843	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11141	845	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
11141	845	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2102	847	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
2102	847	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
11142	854	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11142	854	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2103	864	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
2103	864	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
2104	870	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
2105	871	16	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
2106	876	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
2107	879	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
2108	886	16	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2108	886	16	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2109	892	16	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2109	892	16	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
11143	899	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11143	899	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11144	901	24	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
11144	901	24	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
11145	910	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11145	910	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2110	919	24	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2110	919	24	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2110	919	24	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
2111	930	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
2111	930	20	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
11146	945	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11146	945	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11147	947	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
11147	947	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
11148	952	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
11148	952	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
11149	954	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11149	954	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11150	963	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11150	963	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11151	967	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11151	967	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11152	969	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
11152	969	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
11153	973	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11153	973	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11154	977	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11154	977	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11155	981	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11155	981	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2112	987	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2112	987	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
11156	991	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11156	991	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11157	996	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
11157	996	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2113	997	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2113	997	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
11158	1004	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11158	1004	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11159	1006	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11159	1006	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11160	1010	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11160	1010	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2114	1020	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
11161	1021	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11161	1021	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11162	1025	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
11162	1025	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
11163	1027	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11163	1027	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11164	1030	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11164	1030	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11165	1034	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11165	1034	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11166	1036	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11166	1036	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
11167	1044	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11167	1044	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
11168	1046	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11168	1046	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2115	1050	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2115	1050	20	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2116	1058	27	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2116	1058	27	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
2117	1079	16	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
2117	1079	16	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
2118	1082	16	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
11169	1083	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
11169	1083	20	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
2119	1084	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
2119	1084	24	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
2120	1087	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
2120	1087	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
2121	1090	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
2121	1090	24	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
2122	1102	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
2123	1105	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
2123	1105	12	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
2123	1105	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
11170	1122	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
11170	1122	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
11171	1124	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
11171	1124	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2124	1129	16	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
2124	1129	16	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
2125	1141	12	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
2126	1143	16	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2127	1146	20	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2127	1146	20	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2128	1158	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2129	1161	12	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
2130	1164	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta, dnorm) > $
2130	1164	12	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($, dnorm) > rho
2130	1164	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta, $) > rho
2131	1173	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
2131	1173	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
2132	1176	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
2133	1178	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
2134	1192	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2135	1198	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
2135	1198	12	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= $
11172	1199	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
11172	1199	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2136	1207	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2136	1207	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2137	1210	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2137	1210	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
11173	1273	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
11173	1273	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
11174	1276	8	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
11174	1276	8	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
11175	1278	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
11175	1278	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
11176	1287	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11176	1287	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
11177	1290	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
11177	1290	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
11178	1292	12	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
11178	1292	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
11179	1296	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11179	1296	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
11180	1312	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
11180	1312	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
2138	1313	12	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2138	1313	12	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
11181	1318	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11181	1318	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
11182	1331	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11182	1331	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2139	1333	16	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
2140	1334	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2140	1334	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2140	1334	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2140	1334	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2141	1338	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2141	1338	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2141	1338	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2141	1338	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2142	1344	23	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
2143	1345	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2143	1345	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2143	1345	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2143	1345	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2144	1349	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2144	1349	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2144	1349	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2144	1349	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2145	1364	12	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
2145	1364	12	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
2146	1368	16	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
2146	1368	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
2147	1376	16	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
2147	1376	16	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
2148	1378	20	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
2148	1378	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
2149	1390	16	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
2149	1390	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
2150	1395	16	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
2150	1395	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
2151	1407	12	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
2151	1407	12	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
11183	1417	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11183	1417	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2152	1422	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
2153	1425	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
11184	1440	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11184	1440	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2154	1443	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.min($.trustRegionCenterOffset.getEntry(i) - $.lowerDifference.getEntry(i), glagValue) > ZERO
2154	1443	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.max($.trustRegionCenterOffset.getEntry(i) - $.upperDifference.getEntry(i), glagValue) < ZERO
2154	1443	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
2154	1443	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
2154	1443	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
2154	1443	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
2155	1450	12	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
2156	1456	12	BOBYQAOptimizer.java	altmov	tmp1	double	0	DEF	$ > ZERO
11185	1459	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11185	1459	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2157	1460	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
2157	1460	20	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
2157	1460	20	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
2158	1462	24	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 <= $.lowerDifference.getEntry(i)
2158	1462	24	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= lowerDifference.getEntry(i)
2158	1462	24	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= lowerDifference.getEntry($)
2159	1467	31	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 >= $.upperDifference.getEntry(i)
2159	1467	31	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= upperDifference.getEntry(i)
2159	1467	31	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= upperDifference.getEntry($)
11186	1485	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11186	1485	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2160	1487	16	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
2160	1487	16	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
2160	1487	16	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
2161	1492	23	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
2161	1492	23	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2162	1494	23	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
11187	1508	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
11187	1508	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
11188	1510	16	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
11188	1510	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
2163	1515	12	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
2164	1518	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
2164	1518	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
2164	1518	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
2164	1518	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
11189	1521	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11189	1521	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2165	1539	12	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
11190	1540	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11190	1540	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2166	1550	8	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
2166	1550	8	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
11191	1551	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
11191	1551	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
11192	1597	8	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
11192	1597	8	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
11193	1599	12	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
11193	1599	12	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
11194	1602	12	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
11194	1602	12	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
11195	1606	8	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
11195	1606	8	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
11196	1609	8	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
11196	1609	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
11197	1611	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
11197	1611	12	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
11198	1623	8	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
11198	1623	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
2167	1630	12	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= 2 * n
2167	1630	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= 2 * $
2168	1631	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= n
2168	1631	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ >= 1
2168	1631	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= $
2169	1634	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfmm) == ZERO
2169	1634	20	BOBYQAOptimizer.java	prelim	nfmm	int	0	DEF	upperDifference.getEntry($) == ZERO
2170	1639	23	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	$ > n
2170	1639	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	nfm > $
2171	1642	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.lowerDifference.getEntry(nfxm) == ZERO
2171	1642	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	lowerDifference.getEntry($) == ZERO
2172	1646	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfxm) == ZERO
2172	1646	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	upperDifference.getEntry($) == ZERO
2173	1656	16	BOBYQAOptimizer.java	prelim	n	int	0	DEF	ipt > $
2173	1656	16	BOBYQAOptimizer.java	prelim	ipt	int	0	DEF	$ > n
11199	1671	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
11199	1671	12	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
2174	1675	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.lowerDifference.getEntry(j)
2174	1675	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == lowerDifference.getEntry($)
2174	1675	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == lowerDifference.getEntry(j)
2175	1678	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.upperDifference.getEntry(j)
2175	1678	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == upperDifference.getEntry($)
2175	1678	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == upperDifference.getEntry(j)
2176	1688	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
2177	1691	19	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex)
2177	1691	19	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
2178	1701	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= 2 * n + 1
2178	1701	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= 2 * $ + 1
2179	1702	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ >= 2
2179	1702	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= n + 1
2179	1702	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= $ + 1
2180	1705	20	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	npt < $ + n
2180	1705	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	npt < numEval + $
2180	1705	20	BOBYQAOptimizer.java	prelim	npt	int	0	DEF	$ < numEval + n
2181	1712	23	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
2181	1712	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
2182	1718	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry(nfm - n)
2182	1718	20	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fAtInterpolationPoints.getEntry($ - n)
2182	1718	20	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
2182	1718	20	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
2182	1718	20	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(nfm - n)
2182	1718	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fAtInterpolationPoints.getEntry(nfm - $)
2183	1721	24	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
2183	1721	24	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
11200	1847	8	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11200	1847	8	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2184	1849	12	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) <= $.lowerDifference.getEntry(i)
2184	1849	12	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	trustRegionCenterOffset.getEntry($) <= lowerDifference.getEntry($)
2185	1850	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) >= ZERO
2185	1850	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) >= ZERO
2186	1853	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) <= ZERO
2186	1853	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) >= $.upperDifference.getEntry(i)
2186	1853	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) <= ZERO
2186	1853	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	trustRegionCenterOffset.getEntry($) >= upperDifference.getEntry($)
2187	1857	12	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
2187	1857	12	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
11201	1883	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11201	1883	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2188	1884	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
2188	1884	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
2189	1886	23	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
2190	1895	12	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
2191	1898	12	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
2192	1902	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
2192	1902	12	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
2192	1902	12	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
11202	1918	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11202	1918	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2193	1919	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2193	1919	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2194	1927	12	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
2195	1931	12	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
2196	1937	12	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
11203	1946	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11203	1946	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2197	1947	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
2197	1947	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
2198	1949	20	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
2198	1949	20	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
2199	1954	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
2199	1954	20	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
2200	1964	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
2201	1967	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
2201	1967	16	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2202	1969	20	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
11204	1975	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11204	1975	16	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2203	1977	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2203	1977	20	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2204	1992	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
2205	1995	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
2205	1995	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
2206	2001	16	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
2207	2010	12	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
2207	2010	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
2208	2011	16	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
2208	2011	16	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
2209	2014	16	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
2209	2014	16	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
2210	2032	12	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
2210	2032	12	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
11205	2038	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11205	2038	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2211	2039	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2211	2039	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2212	2061	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
2212	2061	12	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
11206	2065	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11206	2065	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2213	2066	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2213	2066	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
11207	2081	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11207	2081	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2214	2082	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2214	2082	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2215	2085	20	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
2216	2089	27	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
2217	2102	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2218	2104	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
2218	2104	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
2218	2104	24	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
2219	2113	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2220	2115	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
2220	2115	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
2220	2115	24	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
11208	2133	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11208	2133	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2221	2134	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2221	2134	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
11209	2149	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
11209	2149	12	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
2222	2154	16	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
2222	2154	16	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
2223	2158	23	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
2223	2158	23	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
2224	2167	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
2225	2170	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
2225	2170	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
2226	2178	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
11210	2188	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11210	2188	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2227	2190	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2227	2190	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2228	2200	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
2228	2200	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
2228	2200	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
2229	2209	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
2229	2209	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
11211	2216	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11211	2216	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2230	2222	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
2230	2222	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
2231	2225	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
2231	2225	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
11212	2242	12	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
11212	2242	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
11213	2244	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
11213	2244	16	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
2232	2245	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
2232	2245	20	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
11214	2253	12	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
11214	2253	12	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
2233	2254	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.modelSecondDerivativesParameters.getEntry(k) != ZERO
2233	2254	16	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	modelSecondDerivativesParameters.getEntry($) != ZERO
11215	2255	20	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11215	2255	20	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2234	2260	12	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
2235	2263	12	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
2235	2263	12	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
11216	2266	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
11216	2266	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
11217	2307	8	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
11217	2307	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
11218	2308	12	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
11218	2308	12	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
11219	2317	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
11219	2317	8	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
2236	2319	12	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
2236	2319	12	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
11220	2327	16	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
11220	2327	16	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
11221	2339	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
11221	2339	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
11222	2351	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
11222	2351	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
11223	2358	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
11223	2358	8	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
11224	2363	12	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
11224	2363	12	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
2237	2366	16	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
2237	2366	16	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
2238	2387	8	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
2239	2392	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
2239	2392	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
2239	2392	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
2239	2392	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
11225	2405	8	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
11225	2405	8	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
2240	2409	8	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
2240	2409	8	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
630	150	8	BSPTree.java	insertCut	THIS	BSPTree	0	DEF	$.cut != null
631	156	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$ == null
631	156	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$.isEmpty()
632	181	8	BSPTree.java	copySelf	THIS	BSPTree	0	RET	$.cut == null
633	242	8	BSPTree.java	visit	THIS	BSPTree	1	DEF	$.cut == null
9963	293	8	BSPTree.java	fitToCell	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
9963	293	8	BSPTree.java	fitToCell	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
634	294	12	BSPTree.java	fitToCell	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
634	294	12	BSPTree.java	fitToCell	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
635	312	8	BSPTree.java	getCell	THIS	BSPTree	0	RET	$.cut == null
636	319	8	BSPTree.java	getCell	offset	double	1	RET	FastMath.abs($) < 1.0e-10
637	321	15	BSPTree.java	getCell	offset	double	1	RET	$ <= 0
638	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.attribute == null
638	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.cut == null
638	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute.equals($.minus.$.attribute)
638	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.cut == null
638	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute == null
638	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.cut != null
638	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute != null
639	385	8	BSPTree.java	merge	THIS	BSPTree	1	RET	$.cut == null
640	388	15	BSPTree.java	merge	THIS	BSPTree	1	RET	tree.$.cut == null
640	388	15	BSPTree.java	merge	tree	BSPTree<S>	1	RET	$.cut == null
641	394	12	BSPTree.java	merge	parentTree	BSPTree<S>	0	DEF	$ != null
642	396	16	BSPTree.java	merge	isPlusChild	boolean	1	DEF	$
643	407	12	BSPTree.java	merge	THIS	BSPTree	0	DEF	merged.$.cut != null
643	407	12	BSPTree.java	merge	merged	BSPTree<S>	0	DEF	$.cut != null
644	489	8	BSPTree.java	split	THIS	BSPTree	0	RET	$.cut == null
645	500	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
645	500	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
646	516	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
646	516	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
647	568	8	BSPTree.java	insertInTree	parentTree	BSPTree<S>	0	DEF	$ != null
648	569	12	BSPTree.java	insertInTree	isPlusChild	boolean	1	DEF	$
649	577	8	BSPTree.java	insertInTree	THIS	BSPTree	0	DEF	$.cut != null
9964	580	12	BSPTree.java	insertInTree	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
9964	580	12	BSPTree.java	insertInTree	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
650	587	16	BSPTree.java	insertInTree	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
650	587	16	BSPTree.java	insertInTree	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
651	614	8	BSPTree.java	chopOffMinus	THIS	BSPTree	0	DEF	$.cut != null
652	628	8	BSPTree.java	chopOffPlus	THIS	BSPTree	0	DEF	$.cut != null
2255	223	12	BaseAbstractMultivariateOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.data instanceof InitialGuess
2256	227	12	BaseAbstractMultivariateOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.data instanceof SimpleBounds
2257	276	8	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooLargeException	$.start != null
2258	278	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooSmallException	$.lowerBound != null
2259	279	16	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DimensionMismatchException	$.lowerBound.$.length != dim
2259	279	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	lowerBound.length != $
11239	282	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
11239	282	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2260	285	20	BaseAbstractMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooSmallException	$ < lo
2260	285	20	BaseAbstractMultivariateOptimizer.java	checkParameters	lo	double	0	NumberIsTooSmallException	v < $
2261	290	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooLargeException	$.upperBound != null
2262	291	16	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DimensionMismatchException	$.upperBound.$.length != dim
2262	291	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	upperBound.length != $
11240	294	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
11240	294	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2263	297	20	BaseAbstractMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooLargeException	$ > hi
2263	297	20	BaseAbstractMultivariateOptimizer.java	checkParameters	hi	double	0	NumberIsTooLargeException	v > $
2264	305	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.lowerBound == null
11241	307	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
11241	307	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2265	311	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.upperBound == null
11242	313	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
11242	313	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2028	184	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	f	FUNC	0	NullArgumentException	$ == null
2029	187	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	t	double[]	0	NullArgumentException	$ == null
2030	190	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	w	double[]	0	NullArgumentException	$ == null
2031	193	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	startPoint	double[]	0	NullArgumentException	$ == null
2032	196	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	t.$.length != w.$.length
2032	196	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	t	double[]	0	DimensionMismatchException	$.length != w.length
2032	196	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	w	double[]	0	DimensionMismatchException	t.length != $.length
11051	324	8	BaseAbstractMultivariateVectorOptimizer.java	setUp	i	int	0	NIL-FOR	$ < dim
11051	324	8	BaseAbstractMultivariateVectorOptimizer.java	setUp	dim	int	0	NIL-FOR	i < $
2033	344	12	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof Target
2034	348	12	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof Weight
2035	352	12	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof InitialGuess
2036	366	8	BaseAbstractMultivariateVectorOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	$.target.$.length != $.weightMatrix.getColumnDimension()
4348	120	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NotStrictlyPositiveException	$ <= 0
4349	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NumberIsTooSmallException	maximalIterationCount <= $
4349	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	maximalIterationCount	int	0	NumberIsTooSmallException	$ <= minimalIterationCount
1871	119	8	BaseAbstractUnivariateOptimizer.java	optimize	f	UnivariateFunction	0	NullArgumentException	$ == null
1872	122	8	BaseAbstractUnivariateOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
2836	84	8	BaseMultiStartMultivariateOptimizer.java	BaseMultiStartMultivariateOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
11464	146	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	NIL-FOR	i < $.optimData.$.length
11464	146	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < optimData.length
2837	147	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	DEF	$.optimData[i] instanceof MaxEval
2837	147	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof MaxEval
2838	151	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	DEF	$.optimData[i] instanceof InitialGuess
2838	151	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof InitialGuess
2839	157	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	MathIllegalStateException	$.maxEvalIndex == -1
2840	160	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	MathIllegalStateException	$.initialGuessIndex == -1
11465	174	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	NIL-FOR	i < $.starts
11465	174	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < starts
2841	181	16	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	1	DEF	$ == 0
11466	185	20	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	NIL-WHILE	$ == null
2842	186	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	TooManyEvaluationsException	attempts++ >= $.getMaxEvaluations()
2842	186	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	attempts	int	0	TooManyEvaluationsException	$++ >= getMaxEvaluations()
11467	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	NIL-FOR	k < s.$.length
11467	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < s.length
11467	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	NIL-FOR	$ != null
11467	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	NIL-FOR	k < $.length
2843	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	k	int	0	DEF	s[$] > max[$]
2843	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	k	int	0	DEF	s[$] < min[$]
2843	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	DEF	$[k] > max[k]
2843	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	DEF	$[k] < min[k]
2843	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	min	double[]	0	DEF	s[k] < $[k]
2843	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	min	double[]	0	DEF	$ != null
2843	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	max	double[]	0	DEF	s[k] > $[k]
2843	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	max	double[]	0	DEF	$ != null
2844	211	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	DEF	optima.$.length == 0
2844	211	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	optima	PAIR[]	0	DEF	$.length == 0
1861	75	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	optimizer	BaseMultivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1861	75	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1862	79	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1863	115	8	BaseMultivariateMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
10937	148	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
10937	148	8	BaseMultivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1864	164	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
2845	87	12	BaseMultivariateOptimizer.java	parseOptimizationData	THIS	BaseMultivariateOptimizer	0	DEF	$.data instanceof InitialGuess
2846	91	12	BaseMultivariateOptimizer.java	parseOptimizationData	THIS	BaseMultivariateOptimizer	0	DEF	$.data instanceof SimpleBounds
2847	128	8	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	NumberIsTooLargeException	$.start != null
2848	130	12	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	NumberIsTooSmallException	$.lowerBound != null
2849	131	16	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	DimensionMismatchException	$.lowerBound.$.length != dim
2849	131	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	lowerBound.length != $
11468	134	16	BaseMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
11468	134	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2850	137	20	BaseMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooSmallException	$ < lo
2850	137	20	BaseMultivariateOptimizer.java	checkParameters	lo	double	0	NumberIsTooSmallException	v < $
2851	142	12	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	NumberIsTooLargeException	$.upperBound != null
2852	143	16	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	DimensionMismatchException	$.upperBound.$.length != dim
2852	143	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	upperBound.length != $
11469	146	16	BaseMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
11469	146	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2853	149	20	BaseMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooLargeException	$ > hi
2853	149	20	BaseMultivariateOptimizer.java	checkParameters	hi	double	0	NumberIsTooLargeException	v > $
1867	75	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	optimizer	BaseMultivariateVectorOptimizer<FUNC>	0	NullArgumentException	$ == null
1867	75	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1868	79	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1869	116	8	BaseMultivariateVectorMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateVectorMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
10938	149	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	NIL-FOR	i < $.starts
10938	149	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1870	168	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	DEF	$.optima[0] == null
2732	221	12	BaseOptimizer.java	parseOptimizationData	THIS	BaseOptimizer	0	DEF	$.data instanceof MaxEval
2733	225	12	BaseOptimizer.java	parseOptimizationData	THIS	BaseOptimizer	0	DEF	$.data instanceof MaxIter
4337	58	8	BaseRuleFactory.java	getRule	numberOfPoints	int	0	NotStrictlyPositiveException	$ <= 0
4338	66	8	BaseRuleFactory.java	getRule	cached	Pair<double[],double[]>	0	DEF	$ == null
4339	96	8	BaseRuleFactory.java	getRuleInternal	rule	Pair<T[],T[]>	0	RET	$ == null
4340	112	8	BaseRuleFactory.java	addRule	THIS	BaseRuleFactory	0	DimensionMismatchException	rule.getFirst().length != rule.getSecond().length
4340	112	8	BaseRuleFactory.java	addRule	rule	Pair<T[],T[]>	0	DimensionMismatchException	$.getFirst().length != $.getSecond().length
12370	147	8	BaseRuleFactory.java	convertToDouble	i	int	0	NIL-FOR	$ < len
12370	147	8	BaseRuleFactory.java	convertToDouble	len	int	0	NIL-FOR	i < $
4090	146	8	BaseSecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
4091	149	8	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
4092	174	12	BaseSecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
4093	179	12	BaseSecantSolver.java	doSolve	fx	double	1	DEF	f1 * $ < 0
4093	179	12	BaseSecantSolver.java	doSolve	f1	double	1	DEF	$ * fx < 0
4094	196	20	BaseSecantSolver.java	doSolve	x	double	0	ConvergenceException	$ == x1
4094	196	20	BaseSecantSolver.java	doSolve	x1	double	0	ConvergenceException	x == $
4095	212	12	BaseSecantSolver.java	doSolve	f1	double	0	MathInternalError:RET	FastMath.abs($) <= ftol
4095	212	12	BaseSecantSolver.java	doSolve	ftol	double	0	MathInternalError:RET	FastMath.abs(f1) <= $
4096	217	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
4097	222	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
4098	227	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ <= 0
4099	232	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ >= 0
4100	243	12	BaseSecantSolver.java	doSolve	x0	double	0	MathInternalError:RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
4100	243	12	BaseSecantSolver.java	doSolve	x1	double	0	MathInternalError:RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
4100	243	12	BaseSecantSolver.java	doSolve	atol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
4100	243	12	BaseSecantSolver.java	doSolve	rtol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
3353	187	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
3353	187	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
3353	187	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
3353	187	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
3353	187	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
3353	187	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
3353	187	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
3354	195	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
3354	195	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
3354	195	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
3355	272	8	Beta.java	logGammaSum	a	double	0	OutOfRangeException	$ < 1.0
3355	272	8	Beta.java	logGammaSum	a	double	0	OutOfRangeException	$ > 2.0
3356	275	8	Beta.java	logGammaSum	b	double	0	OutOfRangeException	$ < 1.0
3356	275	8	Beta.java	logGammaSum	b	double	0	OutOfRangeException	$ > 2.0
3357	280	8	Beta.java	logGammaSum	x	double	1	RET	$ <= 0.5
3358	282	15	Beta.java	logGammaSum	x	double	1	RET	$ <= 1.5
3359	305	8	Beta.java	logGammaMinusLogGammaSum	a	double	0	NumberIsTooSmallException	$ < 0.0
3360	308	8	Beta.java	logGammaMinusLogGammaSum	b	double	0	NumberIsTooSmallException	$ < 10.0
3361	317	8	Beta.java	logGammaMinusLogGammaSum	a	double	1	DEF	$ <= b
3361	317	8	Beta.java	logGammaMinusLogGammaSum	b	double	1	DEF	a <= $
3362	345	8	Beta.java	deltaMinusDeltaSum	a	double	0	OutOfRangeException	$ > b
3362	345	8	Beta.java	deltaMinusDeltaSum	a	double	0	OutOfRangeException	$ < 0
3362	345	8	Beta.java	deltaMinusDeltaSum	b	double	0	OutOfRangeException	a > $
3363	348	8	Beta.java	deltaMinusDeltaSum	b	double	0	NumberIsTooSmallException	$ < 10
11849	361	8	Beta.java	deltaMinusDeltaSum	THIS	Beta	0	NIL-FOR	i < s.$.length
11849	361	8	Beta.java	deltaMinusDeltaSum	i	int	0	NIL-FOR	$ < s.length
11849	361	8	Beta.java	deltaMinusDeltaSum	s	double[]	0	NIL-FOR	i < $.length
11850	370	8	Beta.java	deltaMinusDeltaSum	i	int	0	NIL-FOR	$ >= 0
3364	391	8	Beta.java	sumDeltaMinusDeltaSum	p	double	0	NumberIsTooSmallException	$ < 10.0
3365	394	8	Beta.java	sumDeltaMinusDeltaSum	q	double	0	NumberIsTooSmallException	$ < 10.0
11851	403	8	Beta.java	sumDeltaMinusDeltaSum	i	int	0	NIL-FOR	$ >= 0
3366	420	8	Beta.java	logBeta	p	double	0	RET	$ <= 0.0
3366	420	8	Beta.java	logBeta	p	double	0	RET	Double.isNaN($)
3366	420	8	Beta.java	logBeta	q	double	0	RET	Double.isNaN($)
3366	420	8	Beta.java	logBeta	q	double	0	RET	$ <= 0.0
3367	426	8	Beta.java	logBeta	a	double	1	RET	$ >= 10.0
3368	432	12	Beta.java	logBeta	u	double	1	RET	$ <= v
3368	432	12	Beta.java	logBeta	v	double	1	RET	u <= $
3369	437	15	Beta.java	logBeta	a	double	1	RET	$ > 2.0
3370	438	12	Beta.java	logBeta	b	double	1	RET	$ > 1000.0
11852	442	16	Beta.java	logBeta	i	int	0	NIL-FOR	$ < n
11852	442	16	Beta.java	logBeta	n	int	0	NIL-FOR	i < $
11853	452	16	Beta.java	logBeta	ared	double	0	NIL-WHILE	$ > 2.0
3371	457	16	Beta.java	logBeta	b	double	1	RET	$ < 10.0
11854	460	20	Beta.java	logBeta	bred	double	0	NIL-WHILE	$ > 2.0
3372	475	15	Beta.java	logBeta	a	double	1	RET	$ >= 1.0
3373	476	12	Beta.java	logBeta	b	double	1	RET	$ > 2.0
3374	477	16	Beta.java	logBeta	b	double	1	RET	$ < 10.0
11855	480	20	Beta.java	logBeta	bred	double	0	NIL-WHILE	$ > 2.0
3375	498	12	Beta.java	logBeta	b	double	1	RET	$ >= 10.0
1145	120	8	BetaDistribution.java	recomputeZ	THIS	BetaDistribution	0	DEF	Double.isNaN($.z)
1146	128	8	BetaDistribution.java	density	x	double	1	RET	$ > 1
1146	128	8	BetaDistribution.java	density	x	double	1	RET	$ < 0
1147	130	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 0
1148	131	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.alpha < 1
1149	135	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 1
1150	136	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.beta < 1
1151	149	8	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ <= 0
1152	151	15	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ >= 1
1618	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
1618	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
1619	90	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
10576	100	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
10576	100	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
10577	105	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
10577	105	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
1620	108	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
1620	108	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
1620	108	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
10578	109	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
10578	109	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
10579	111	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
10579	111	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
10580	116	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
10580	116	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
1621	122	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
1622	139	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
10581	144	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
10581	144	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
1623	146	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
1623	146	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
1624	147	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
1625	151	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1625	151	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
1626	171	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
10582	181	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
10582	181	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
10583	186	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
10583	186	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
1627	189	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
1627	189	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
10584	190	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
10584	190	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
10585	192	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
10585	192	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
10586	197	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
10586	197	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
1628	203	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
10587	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
10587	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
10588	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
10588	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1629	272	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
10589	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
10589	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
10590	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
10590	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
10591	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
10591	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1630	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
1630	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
10592	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
10592	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
1631	297	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
10593	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
10593	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
10594	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
10594	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
10595	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
10595	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
10596	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
10596	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
10597	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
10597	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1632	336	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
10598	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
10598	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
10599	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
10599	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
10600	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
10600	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1633	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
1633	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
10601	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
10601	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
1634	361	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
10602	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
10602	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
10603	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
10603	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
10604	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
10604	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
4013	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
4013	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
4013	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
4013	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
4013	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$.length == 0
4013	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$[0].length == 0
4014	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
4014	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
4014	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	xLen != $.length
4015	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
4015	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
4015	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	xLen != $.length
4016	116	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
4016	116	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
4016	116	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	xLen != $.length
4017	119	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
4017	119	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
4017	119	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	xLen != $.length
12156	133	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
12156	133	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
4018	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
4018	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
4018	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
4018	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	$[i].length != yLen
4019	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
4019	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
4019	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
4019	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	$[i].length != yLen
4020	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
4020	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
4020	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
4020	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
4021	143	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
4021	143	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
4021	143	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
4021	143	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
12157	147	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
12157	147	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
4022	184	8	BicubicSplineInterpolatingFunction.java	isValidPoint	THIS	BicubicSplineInterpolatingFunction	1	RET	y > $.yval[$.yval.$.length - 1]
4022	184	8	BicubicSplineInterpolatingFunction.java	isValidPoint	THIS	BicubicSplineInterpolatingFunction	1	RET	x > $.xval[$.xval.$.length - 1]
4022	184	8	BicubicSplineInterpolatingFunction.java	isValidPoint	THIS	BicubicSplineInterpolatingFunction	1	RET	x < $.xval[0]
4022	184	8	BicubicSplineInterpolatingFunction.java	isValidPoint	THIS	BicubicSplineInterpolatingFunction	1	RET	y < $.yval[0]
4022	184	8	BicubicSplineInterpolatingFunction.java	isValidPoint	x	double	1	RET	$ > xval[xval.length - 1]
4022	184	8	BicubicSplineInterpolatingFunction.java	isValidPoint	x	double	1	RET	$ < xval[0]
4022	184	8	BicubicSplineInterpolatingFunction.java	isValidPoint	y	double	1	RET	$ > yval[yval.length - 1]
4022	184	8	BicubicSplineInterpolatingFunction.java	isValidPoint	y	double	1	RET	$ < yval[0]
4023	270	8	BicubicSplineInterpolatingFunction.java	partialDerivative	THIS	BicubicSplineInterpolatingFunction	0	DEF	$.partialDerivatives == null
12158	291	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < lastI
12158	291	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastI	int	0	NIL-FOR	i < $
12159	292	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < lastJ
12159	292	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastJ	int	0	NIL-FOR	j < $
4024	314	8	BicubicSplineInterpolatingFunction.java	searchIndex	THIS	BicubicSplineInterpolatingFunction	0	OutOfRangeException	r == -val.$.length - 1
4024	314	8	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	OutOfRangeException	$ == -1
4024	314	8	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	OutOfRangeException	$ == -val.length - 1
4024	314	8	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	OutOfRangeException	r == -$.length - 1
4025	319	8	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	RET	$ < 0
4026	325	8	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	RET	$ == last
4026	325	8	BicubicSplineInterpolatingFunction.java	searchIndex	last	int	0	RET	r == $
12160	367	8	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < NUM_COEFF
12161	370	12	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < NUM_COEFF
12162	415	8	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	i	int	0	NIL-FOR	$ < N
12163	416	12	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	j	int	0	NIL-FOR	$ < N
4027	426	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
4027	426	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
4028	429	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
4028	429	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
12164	454	8	BicubicSplineInterpolatingFunction.java	apply	i	int	0	NIL-FOR	$ < N
12165	455	12	BicubicSplineInterpolatingFunction.java	apply	j	int	0	NIL-FOR	$ < N
4029	467	8	BicubicSplineInterpolatingFunction.java	partialDerivativeX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeX == null
4030	477	8	BicubicSplineInterpolatingFunction.java	partialDerivativeY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeY == null
4031	487	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXX == null
4032	497	8	BicubicSplineInterpolatingFunction.java	partialDerivativeYY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeYY == null
4033	507	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXY == null
12166	524	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < N
12167	525	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < N
4010	43	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
4010	43	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
4010	43	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
4010	43	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
4010	43	8	BicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
4010	43	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
4011	46	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
4011	46	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
4011	46	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
12144	61	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12144	61	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
4012	62	12	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
4012	62	12	BicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
4012	62	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
4012	62	12	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
12145	66	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
12145	66	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
12146	76	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
12146	76	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
12147	83	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12147	83	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
12148	89	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
12148	89	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
12149	91	12	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12149	91	12	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
12150	98	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12150	98	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
12151	100	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
12151	100	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
12152	107	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12152	107	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
12153	110	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
12153	110	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
959	123	8	BigFraction.java	BigFraction	den	BigInteger	0	ZeroException	BigInteger.ZERO.equals($)
960	126	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
961	133	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
962	139	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
963	173	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isNaN($)
964	176	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isInfinite($)
965	185	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
966	189	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
9986	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
9986	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
967	198	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
968	275	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
968	275	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
969	281	8	BigFraction.java	BigFraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
969	281	8	BigFraction.java	BigFraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
969	281	8	BigFraction.java	BigFraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
9987	297	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
970	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
970	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
970	303	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
970	303	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
971	310	12	BigFraction.java	BigFraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
971	310	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
971	310	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
971	310	12	BigFraction.java	BigFraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
971	310	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
971	310	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
971	310	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
972	324	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
972	324	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
973	328	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
973	328	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
974	435	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
975	510	8	BigFraction.java	add	fraction	BigFraction	0	NullArgumentException	$ == null
976	513	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
977	520	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
977	520	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
978	614	8	BigFraction.java	divide	bg	BigInteger	0	NullArgumentException	$ == null
979	617	8	BigFraction.java	divide	bg	BigInteger	0	MathArithmeticException	BigInteger.ZERO.equals($)
980	663	8	BigFraction.java	divide	fraction	BigFraction	0	NullArgumentException	$ == null
981	666	8	BigFraction.java	divide	THIS	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals(fraction.$.numerator)
981	666	8	BigFraction.java	divide	fraction	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals($.numerator)
982	685	8	BigFraction.java	doubleValue	result	double	0	DEF	Double.isNaN($)
983	715	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
983	715	8	BigFraction.java	equals	other	Object	1	DEF	this == $
984	717	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
985	738	8	BigFraction.java	floatValue	result	float	0	DEF	Double.isNaN($)
986	867	8	BigFraction.java	multiply	bg	BigInteger	0	NullArgumentException	$ == null
987	912	8	BigFraction.java	multiply	fraction	BigFraction	0	NullArgumentException	$ == null
988	915	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	fraction.$.numerator.equals(BigInteger.ZERO)
988	915	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
988	915	8	BigFraction.java	multiply	fraction	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
989	959	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
990	976	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
991	995	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
992	1054	8	BigFraction.java	subtract	bg	BigInteger	0	NullArgumentException	$ == null
993	1097	8	BigFraction.java	subtract	fraction	BigFraction	0	NullArgumentException	$ == null
994	1100	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
995	1106	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
995	1106	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
996	1129	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
997	1131	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
998	169	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
999	171	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
1000	173	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
1001	194	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1002	216	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
1003	249	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
9988	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
9988	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
9988	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
9988	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
224	306	8	BigReal.java	equals	THIS	BigReal	0	RET	$ == other
224	306	8	BigReal.java	equals	other	Object	0	RET	this == $
225	310	8	BigReal.java	equals	other	Object	0	RET	$ instanceof BigReal
3286	56	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
3286	56	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
11812	71	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
11812	71	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
3287	80	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
3288	85	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
3288	85	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
11813	89	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
11813	89	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
3289	90	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
3289	90	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
3289	90	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
3300	41	8	BinaryMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof BinaryChromosome
1219	70	8	BinomialDistribution.java	BinomialDistribution	trials	int	0	NotPositiveException	$ < 0
1220	74	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ < 0
1220	74	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ > 1
1221	103	8	BinomialDistribution.java	probability	THIS	BinomialDistribution	1	DEF	x > $.numberOfTrials
1221	103	8	BinomialDistribution.java	probability	x	int	1	DEF	$ > numberOfTrials
1221	103	8	BinomialDistribution.java	probability	x	int	1	DEF	$ < 0
1222	116	8	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
1223	118	15	BinomialDistribution.java	cumulativeProbability	THIS	BinomialDistribution	1	DEF	x >= $.numberOfTrials
1223	118	15	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= numberOfTrials
4165	78	12	BisectionSolver.java	doSolve	fm	double	1	DEF	$ * fmin > 0
4165	78	12	BisectionSolver.java	doSolve	fmin	double	1	DEF	fm * $ > 0
4166	86	12	BisectionSolver.java	doSolve	min	double	0	RET	FastMath.abs(max - $) <= absoluteAccuracy
4166	86	12	BisectionSolver.java	doSolve	max	double	0	RET	FastMath.abs($ - min) <= absoluteAccuracy
4166	86	12	BisectionSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(max - min) <= $
11777	73	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
11777	73	8	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
11778	82	8	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
11778	82	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
11778	82	8	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
3207	104	8	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
3208	143	8	BitsStreamGenerator.java	nextInt	n	int	0	RET	$ > 0
3209	144	12	BitsStreamGenerator.java	nextInt	n	int	0	RET	($ & -$) == $
11779	149	12	BitsStreamGenerator.java	nextInt	bits	int	0	NIL-DOWHILE	$ - val + (n - 1) < 0
11779	149	12	BitsStreamGenerator.java	nextInt	val	int	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
11779	149	12	BitsStreamGenerator.java	nextInt	n	int	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
3210	177	8	BitsStreamGenerator.java	nextLong	n	long	0	RET	$ > 0
11780	180	12	BitsStreamGenerator.java	nextLong	bits	long	0	NIL-DOWHILE	$ - val + (n - 1) < 0
11780	180	12	BitsStreamGenerator.java	nextLong	val	long	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
11780	180	12	BitsStreamGenerator.java	nextLong	n	long	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
1359	161	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
10140	170	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
10140	170	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
10141	172	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
10141	172	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1360	173	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1360	173	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1360	173	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1360	173	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1360	173	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1361	177	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
10142	217	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
10142	217	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
10142	217	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
1362	219	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1362	219	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
10143	228	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
10143	228	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
10144	232	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
10144	232	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
10145	243	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
10145	243	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
10146	277	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
10146	277	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
10147	281	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
10147	281	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
10148	310	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
10148	310	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
10149	332	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
10149	332	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
10149	332	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
10150	333	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
10150	333	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
10150	333	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
10151	343	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
10151	343	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
10152	344	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
10152	344	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
10153	377	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
10153	377	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
10153	377	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
10154	381	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
10154	381	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
10154	381	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
10155	404	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
10155	404	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
10155	404	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
10156	405	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
10156	405	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
10156	405	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
10157	415	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
10157	415	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
10158	416	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
10158	416	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
10159	447	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
10159	447	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
10159	447	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
10160	451	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
10160	451	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
10160	451	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
10161	465	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
10161	465	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
10161	465	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
10162	468	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
10162	468	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
10162	468	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
10163	483	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
10163	483	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
10163	483	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
10164	486	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
10164	486	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
10164	486	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
10165	510	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
10165	510	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
10165	510	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
10166	515	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
10166	515	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
10166	515	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
10167	524	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
10167	524	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
10168	529	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
10168	529	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
10169	532	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
10169	532	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
10170	535	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
10170	535	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
10171	573	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
10171	573	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
10171	573	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
10172	578	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
10172	578	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
10172	578	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
10173	588	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
10173	588	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
10174	593	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
10174	593	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
10175	596	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
10175	596	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
10176	600	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
10176	600	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
10177	609	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
10177	609	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
10178	634	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
10178	634	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
10179	639	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
10179	639	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
10180	643	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
10180	643	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
10181	677	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
10181	677	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
10181	677	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
10182	680	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
10182	680	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
10182	680	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
1363	691	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1364	693	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1365	725	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
10183	775	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
10183	775	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1366	791	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1367	798	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1367	798	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
10184	810	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
10184	810	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
10185	816	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
10185	816	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
10186	825	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
10186	825	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
10187	848	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
10187	848	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1368	852	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1368	852	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1369	892	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1369	892	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1369	892	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
10188	905	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
10188	905	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1370	909	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1370	909	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
10189	935	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
10189	935	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
10190	938	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
10190	938	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1371	939	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
1371	939	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1371	939	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
1372	976	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1372	976	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1372	976	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
10191	990	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
10191	990	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
10192	993	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
10192	993	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1373	994	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
1373	994	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1373	994	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
10193	1014	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
10193	1014	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
10194	1047	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
10194	1047	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
10195	1050	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
10195	1050	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
10196	1079	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
10196	1079	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1374	1095	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1374	1095	8	BlockFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1374	1095	8	BlockFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
10197	1103	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
10197	1103	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
10198	1122	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
10198	1122	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
10199	1125	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
10199	1125	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1375	1139	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1375	1139	8	BlockFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1375	1139	8	BlockFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
10200	1148	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
10200	1148	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
10201	1151	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
10201	1151	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
10202	1228	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
10202	1228	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
10203	1229	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
10203	1229	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
10204	1239	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
10204	1239	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
10205	1242	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
10205	1242	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1376	1273	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.columns
1376	1273	8	BlockFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != columns
10206	1280	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
10206	1280	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
10207	1283	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
10207	1283	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
10208	1288	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
10208	1288	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
10209	1291	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
10209	1291	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
10210	1300	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
10210	1300	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1377	1315	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.rows
1377	1315	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != rows
10211	1322	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
10211	1322	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
10212	1329	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
10212	1329	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
10213	1333	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
10213	1333	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
10214	1337	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
10214	1337	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
10215	1346	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
10215	1346	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
10216	1362	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
10216	1362	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
10217	1365	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
10217	1365	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
10218	1366	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
10218	1366	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
10219	1372	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
10219	1372	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
10220	1386	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
10220	1386	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
10221	1389	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
10221	1389	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
10222	1390	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
10222	1390	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
10223	1396	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
10223	1396	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
10224	1414	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
10224	1414	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
10225	1418	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
10225	1418	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
10226	1419	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
10226	1419	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
10227	1426	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
10227	1426	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
10228	1444	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
10228	1444	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
10229	1448	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
10229	1448	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
10230	1449	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
10230	1449	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
10231	1456	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
10231	1456	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
10232	1471	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
10232	1471	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
10233	1474	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
10233	1474	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
10234	1479	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
10234	1479	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
10235	1480	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
10235	1480	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
10236	1496	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
10236	1496	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
10237	1499	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
10237	1499	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
10238	1504	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
10238	1504	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
10239	1505	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
10239	1505	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
10240	1524	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
10240	1524	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
10241	1528	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
10241	1528	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
10242	1534	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
10242	1534	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
10243	1536	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
10243	1536	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
10244	1554	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
10244	1554	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
10245	1558	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
10245	1558	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
10246	1564	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
10246	1564	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
10247	1566	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
10247	1566	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
1717	157	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
10657	166	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10657	166	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
10658	168	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10658	168	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1718	169	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1718	169	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1718	169	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1718	169	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1718	169	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1719	173	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
10659	209	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
10659	209	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
10659	209	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
1720	211	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1720	211	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
10660	219	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
10660	219	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
10661	223	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
10661	223	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
10662	234	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
10662	234	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
10663	263	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
10663	263	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
10664	267	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
10664	267	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
10665	294	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
10665	294	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
10666	315	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
10666	315	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
10666	315	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10667	316	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
10667	316	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
10667	316	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10668	326	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
10668	326	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
10669	327	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
10669	327	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
10670	357	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
10670	357	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
10670	357	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
10671	361	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
10671	361	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
10671	361	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
10672	383	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
10672	383	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
10672	383	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10673	384	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
10673	384	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
10673	384	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10674	394	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
10674	394	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
10675	395	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
10675	395	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
10676	425	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
10676	425	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
10676	425	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
10677	429	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
10677	429	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
10677	429	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
10678	444	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
10678	444	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
10678	444	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
10679	447	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
10679	447	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
10679	447	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
10680	461	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
10680	461	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
10680	461	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
10681	464	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
10681	464	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
10681	464	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
10682	486	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
10682	486	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
10682	486	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10683	490	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
10683	490	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
10683	490	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10684	498	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
10684	498	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
10685	503	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
10685	503	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
10686	506	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
10686	506	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
10687	509	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
10687	509	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
10688	543	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
10688	543	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
10688	543	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10689	548	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
10689	548	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
10689	548	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10690	558	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
10690	558	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
10691	563	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
10691	563	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
10692	566	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
10692	566	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
10693	570	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
10693	570	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
10694	578	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
10694	578	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
10695	601	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10695	601	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
10696	606	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
10696	606	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
10697	610	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
10697	610	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
10698	628	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10698	628	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
10699	631	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10699	631	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
10700	634	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
10700	634	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
10701	636	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
10701	636	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
10702	642	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
10702	642	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
10703	653	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
10703	653	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
10704	682	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
10704	682	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
10704	682	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10705	685	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
10705	685	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
10705	685	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
1721	696	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1722	698	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1723	730	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
10706	780	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
10706	780	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1724	796	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1725	803	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1725	803	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
10707	815	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
10707	815	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
10708	821	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
10708	821	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
10709	830	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
10709	830	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
10710	853	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10710	853	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1726	857	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1726	857	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1727	897	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1727	897	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1727	897	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
10711	910	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10711	910	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1728	914	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1728	914	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
10712	940	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10712	940	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
10713	943	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
10713	943	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1729	944	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
1729	944	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1729	944	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
1730	981	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1730	981	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1730	981	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
10714	995	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10714	995	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
10715	998	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
10715	998	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1731	999	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
1731	999	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1731	999	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
10716	1019	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10716	1019	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
10717	1052	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10717	1052	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
10718	1055	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
10718	1055	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
10719	1084	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10719	1084	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1732	1100	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1732	1100	8	BlockRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1732	1100	8	BlockRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
10720	1108	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10720	1108	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
10721	1127	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10721	1127	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
10722	1130	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
10722	1130	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1733	1144	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1733	1144	8	BlockRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1733	1144	8	BlockRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
10723	1153	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10723	1153	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
10724	1156	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
10724	1156	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
10725	1221	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
10725	1221	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
10726	1222	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
10726	1222	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
10727	1231	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
10727	1231	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
10728	1234	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
10728	1234	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1734	1264	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.columns
1734	1264	8	BlockRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != columns
10729	1270	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10729	1270	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
10730	1273	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10730	1273	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
10731	1278	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
10731	1278	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
10732	1281	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
10732	1281	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
10733	1289	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
10733	1289	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1735	1304	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.rows
1735	1304	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != rows
10734	1310	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10734	1310	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
10735	1317	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10735	1317	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
10736	1321	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
10736	1321	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
10737	1325	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
10737	1325	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
10738	1333	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
10738	1333	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
10739	1349	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10739	1349	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
10740	1352	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
10740	1352	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
10741	1353	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10741	1353	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
10742	1359	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
10742	1359	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
10743	1373	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10743	1373	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
10744	1376	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
10744	1376	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
10745	1377	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10745	1377	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
10746	1383	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
10746	1383	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
10747	1401	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
10747	1401	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
10748	1405	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
10748	1405	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
10749	1406	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
10749	1406	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
10750	1413	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
10750	1413	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
10751	1431	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
10751	1431	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
10752	1435	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
10752	1435	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
10753	1436	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
10753	1436	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
10754	1443	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
10754	1443	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
10755	1458	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10755	1458	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
10756	1461	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10756	1461	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
10757	1466	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
10757	1466	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
10758	1467	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
10758	1467	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
10759	1483	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
10759	1483	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
10760	1486	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
10760	1486	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
10761	1491	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
10761	1491	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
10762	1492	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
10762	1492	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
10763	1512	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
10763	1512	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
10764	1516	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
10764	1516	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
10765	1522	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
10765	1522	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
10766	1524	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
10766	1524	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
10767	1543	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
10767	1543	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
10768	1547	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
10768	1547	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
10769	1553	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
10769	1553	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
10770	1555	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
10770	1555	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
628	47	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusOutside() != null
629	50	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusInside() != null
2739	91	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
2740	94	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
2741	118	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
2741	118	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
2741	118	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
11437	134	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
11437	134	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
11437	134	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
2742	145	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
2742	145	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
2742	145	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
2743	147	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
2743	147	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
2743	147	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
2744	155	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
2744	155	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
2744	155	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
2745	164	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
2745	164	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
2745	164	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
2746	167	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
2746	167	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
2746	167	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
2747	169	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
2747	169	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
2747	169	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
2748	199	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
1873	93	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
1874	96	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
1875	120	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
1875	120	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
1875	120	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
10939	136	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
10939	136	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
10939	136	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
1876	147	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
1876	147	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
1876	147	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
1877	149	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
1877	149	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
1877	149	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
1878	157	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
1878	157	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
1878	157	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
1879	166	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
1879	166	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
1879	166	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
1880	169	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
1880	169	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
1880	169	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
1881	171	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
1881	171	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
1881	171	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
1882	201	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
4120	85	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
4121	105	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
4122	127	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
4123	159	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[1], 0.0, 1)
4124	166	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[0], 0.0, 1)
4125	173	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[0] * $[1] < 0
4126	183	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[2], 0.0, 1)
4127	188	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[1] * $[2] < 0
4128	217	12	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	MathInternalError:RET	FastMath.max(absYA, absYB) < $.getFunctionValueAccuracy()
4128	217	12	BracketingNthOrderBrentSolver.java	doSolve	xTol	double	0	MathInternalError:RET	(xB - xA) <= $
4128	217	12	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	MathInternalError:RET	(xB - $) <= xTol
4128	217	12	BracketingNthOrderBrentSolver.java	doSolve	absYA	double	0	MathInternalError:RET	FastMath.max($, absYB) < getFunctionValueAccuracy()
4128	217	12	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	MathInternalError:RET	($ - xA) <= xTol
4128	217	12	BracketingNthOrderBrentSolver.java	doSolve	absYB	double	0	MathInternalError:RET	FastMath.max(absYA, $) < getFunctionValueAccuracy()
4129	237	12	BracketingNthOrderBrentSolver.java	doSolve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
4130	243	19	BracketingNthOrderBrentSolver.java	doSolve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
12226	258	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	NIL-DOWHILE	Double.isNaN($)
12226	258	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	0	NIL-DOWHILE	end - $ > 1
12226	258	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	0	NIL-DOWHILE	$ - start > 1
4131	264	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ > xA
4131	264	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ < xB
4131	264	16	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	DEF	nextX > $
4131	264	16	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	DEF	nextX < $
4132	270	20	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
4132	270	20	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
4132	270	20	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	1	DEF	$ - start >= end - $
4133	285	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	Double.isNaN($)
4134	294	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	0	RET	Precision.equals($, 0.0, 1)
4135	300	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	end - $ != nbPoints
4135	300	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	$ - start != nbPoints
4135	300	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	end - start != $
4135	300	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	$ > 2
4136	309	20	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	nbPoints == x.$.length
4136	309	20	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	nbPoints == $.length
4136	309	20	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	0	DEF	$ == x.length
4137	315	16	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
4137	315	16	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
4137	315	16	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
4138	333	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	1	DEF	$ * yA <= 0
4138	333	12	BracketingNthOrderBrentSolver.java	doSolve	yA	double	1	DEF	nextY * $ <= 0
12227	375	8	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	$ < end - 1
12227	375	8	BracketingNthOrderBrentSolver.java	guessX	end	int	0	NIL-FOR	i < $ - 1
12228	377	12	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ > i
12228	377	12	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	j > $
12229	384	8	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ >= start
12229	384	8	BracketingNthOrderBrentSolver.java	guessX	start	int	0	NIL-FOR	j >= $
3880	78	8	BracketingNthOrderBrentSolverDFP.java	BracketingNthOrderBrentSolverDFP	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3881	202	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[1].isZero()
3882	210	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[0].isZero()
3883	217	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[0].multiply($[1]).negativeOrNull()
3884	228	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[2].isZero()
3885	233	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[1].multiply($[2]).negativeOrNull()
3886	266	12	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	MathInternalError:RET	maxY.lessThan($.functionValueAccuracy)
3886	266	12	BracketingNthOrderBrentSolverDFP.java	solve	maxY	Dfp	0	MathInternalError:RET	$.lessThan(functionValueAccuracy)
3886	266	12	BracketingNthOrderBrentSolverDFP.java	solve	xTol	Dfp	0	MathInternalError:RET	xB.subtract(xA).subtract($).negativeOrNull()
3886	266	12	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	MathInternalError:RET	xB.subtract($).subtract(xTol).negativeOrNull()
3886	266	12	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	MathInternalError:RET	$.subtract(xA).subtract(xTol).negativeOrNull()
3887	287	12	BracketingNthOrderBrentSolverDFP.java	solve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
3888	290	19	BracketingNthOrderBrentSolverDFP.java	solve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
12097	302	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	NIL-DOWHILE	$.isNaN()
12097	302	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	0	NIL-DOWHILE	end - $ > 1
12097	302	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	0	NIL-DOWHILE	$ - start > 1
3889	308	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.lessThan(xB)
3889	308	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.greaterThan(xA)
3889	308	16	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	DEF	nextX.greaterThan($)
3889	308	16	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	DEF	nextX.lessThan($)
3890	314	20	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
3890	314	20	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
3890	314	20	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	1	DEF	$ - start >= end - $
3891	329	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.isNaN()
3892	339	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	0	RET	$.isZero()
3893	345	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	end - $ != nbPoints
3893	345	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	$ - start != nbPoints
3893	345	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	end - start != $
3893	345	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	$ > 2
3894	354	20	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	nbPoints == x.$.length
3894	354	20	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	nbPoints == $.length
3894	354	20	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	0	DEF	$ == x.length
3895	360	16	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
3895	360	16	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
3895	360	16	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
3896	378	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	1	DEF	$.multiply(yA).negativeOrNull()
3896	378	12	BracketingNthOrderBrentSolverDFP.java	solve	yA	Dfp	1	DEF	nextY.multiply($).negativeOrNull()
12098	420	8	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	$ < end - 1
12098	420	8	BracketingNthOrderBrentSolverDFP.java	guessX	end	int	0	NIL-FOR	i < $ - 1
12099	422	12	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ > i
12099	422	12	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	j > $
12100	429	8	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ >= start
12100	429	8	BracketingNthOrderBrentSolverDFP.java	guessX	start	int	0	NIL-FOR	j >= $
2753	83	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
2754	86	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
2755	127	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
2755	127	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
2756	141	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
2757	161	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
2758	167	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
2758	167	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
2759	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
2760	182	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
2760	182	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
2760	182	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
2760	182	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
2760	182	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
2760	182	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
2760	182	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
2760	182	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
2760	182	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
2760	182	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
2760	182	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
2761	190	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
2761	190	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
2761	190	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
2761	190	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
2761	190	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
2761	190	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
2762	191	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
2762	191	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
2763	199	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
2763	199	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
2764	208	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
2764	208	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
2765	217	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
2765	217	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
2766	218	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
2767	228	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
2768	241	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$ != null
2768	241	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$.converged(iter, previous, current)
2768	241	16	BrentOptimizer.java	doOptimize	previous	UnivariatePointValuePair	0	RET	checker.converged(iter, $, current)
2768	241	16	BrentOptimizer.java	doOptimize	current	UnivariatePointValuePair	0	RET	checker.converged(iter, previous, $)
2768	241	16	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
2769	246	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
2769	246	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
2770	247	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
2770	247	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
2771	259	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
2771	259	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
2772	264	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
2772	264	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	Precision.equals(w, $)
2772	264	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	Precision.equals($, x)
2772	264	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
2773	270	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
2773	270	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	Precision.equals(v, $)
2773	270	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, x)
2773	270	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, w)
2773	270	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	Precision.equals(v, $)
2773	270	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
2774	302	8	BrentOptimizer.java	best	a	UnivariatePointValuePair	0	RET	$ == null
2775	305	8	BrentOptimizer.java	best	b	UnivariatePointValuePair	0	RET	$ == null
2776	309	8	BrentOptimizer.java	best	isMinim	boolean	1	RET	$
1885	85	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1886	88	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
1887	129	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
1887	129	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
1888	143	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1889	163	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
1890	169	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
1890	169	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
1891	175	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
1892	184	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
1892	184	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
1892	184	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
1892	184	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
1892	184	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
1892	184	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
1892	184	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
1892	184	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
1892	184	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
1892	184	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
1892	184	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
1893	192	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
1893	192	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
1893	192	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
1893	192	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
1893	192	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
1893	192	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
1894	193	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
1894	193	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
1895	201	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1895	201	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1896	210	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1896	210	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1897	219	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
1897	219	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
1898	220	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
1899	230	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1900	243	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$ != null
1900	243	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$.converged(iter, previous, current)
1900	243	16	BrentOptimizer.java	doOptimize	previous	UnivariatePointValuePair	0	RET	checker.converged(iter, $, current)
1900	243	16	BrentOptimizer.java	doOptimize	current	UnivariatePointValuePair	0	RET	checker.converged(iter, previous, $)
1900	243	16	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1901	248	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
1901	248	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
1902	249	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1902	249	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1903	261	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1903	261	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1904	266	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
1904	266	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	Precision.equals(w, $)
1904	266	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	Precision.equals($, x)
1904	266	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
1905	272	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
1905	272	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	Precision.equals(v, $)
1905	272	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, w)
1905	272	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, x)
1905	272	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	Precision.equals(v, $)
1905	272	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
1906	304	8	BrentOptimizer.java	best	a	UnivariatePointValuePair	0	RET	$ == null
1907	307	8	BrentOptimizer.java	best	b	UnivariatePointValuePair	0	RET	$ == null
1908	311	8	BrentOptimizer.java	best	isMinim	boolean	1	RET	$
4174	97	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
4174	97	8	BrentSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4175	103	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
4175	103	8	BrentSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4176	108	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
4176	108	8	BrentSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
4177	114	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
4177	114	8	BrentSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4178	119	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
4178	119	8	BrentSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
4179	157	12	BrentSolver.java	brent	fb	double	0	DEF	FastMath.abs(fc) < FastMath.abs($)
4179	157	12	BrentSolver.java	brent	fc	double	0	DEF	FastMath.abs($) < FastMath.abs(fb)
4180	169	12	BrentSolver.java	brent	tol	double	0	RET	FastMath.abs(m) <= $
4180	169	12	BrentSolver.java	brent	m	double	0	RET	FastMath.abs($) <= tol
4180	169	12	BrentSolver.java	brent	fb	double	0	RET	Precision.equals($, 0)
4181	173	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(e) < $
4181	173	12	BrentSolver.java	brent	fa	double	1	DEF	FastMath.abs($) <= FastMath.abs(fb)
4181	173	12	BrentSolver.java	brent	fb	double	1	DEF	FastMath.abs(fa) <= FastMath.abs($)
4181	173	12	BrentSolver.java	brent	e	double	1	DEF	FastMath.abs($) < tol
4182	185	16	BrentSolver.java	brent	a	double	1	DEF	$ == c
4182	185	16	BrentSolver.java	brent	c	double	1	DEF	a == $
4183	196	16	BrentSolver.java	brent	p	double	1	DEF	$ > 0
4184	203	16	BrentSolver.java	brent	s	double	1	DEF	p >= FastMath.abs(0.5 * $ * q)
4184	203	16	BrentSolver.java	brent	p	double	1	DEF	$ >= FastMath.abs(0.5 * s * q)
4184	203	16	BrentSolver.java	brent	p	double	1	DEF	$ >= 1.5 * m * q - FastMath.abs(tol * q)
4184	203	16	BrentSolver.java	brent	q	double	1	DEF	p >= FastMath.abs(0.5 * s * $)
4184	203	16	BrentSolver.java	brent	q	double	1	DEF	p >= 1.5 * m * $ - FastMath.abs(tol * $)
4184	203	16	BrentSolver.java	brent	tol	double	1	DEF	p >= 1.5 * m * q - FastMath.abs($ * q)
4184	203	16	BrentSolver.java	brent	m	double	1	DEF	p >= 1.5 * $ * q - FastMath.abs(tol * q)
4185	217	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(d) > $
4185	217	12	BrentSolver.java	brent	d	double	1	DEF	FastMath.abs($) > tol
4186	219	19	BrentSolver.java	brent	m	double	1	DEF	$ > 0
4187	225	12	BrentSolver.java	brent	fb	double	0	DEF	$ <= 0
4187	225	12	BrentSolver.java	brent	fb	double	0	DEF	$ > 0
4187	225	12	BrentSolver.java	brent	fc	double	0	DEF	$ <= 0
4187	225	12	BrentSolver.java	brent	fc	double	0	DEF	$ > 0
11485	387	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
11486	395	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
11486	395	12	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
11487	397	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount + 1
11487	397	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount + 1
2875	398	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
2876	405	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
2876	405	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
2876	405	20	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
2876	405	20	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
2877	428	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
2878	437	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
2878	437	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
2879	442	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
2879	442	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, optimum, lastResult)
2879	442	16	CMAESOptimizer.java	doOptimize	optimum	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
2879	442	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
2879	442	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, optimum, $)
2880	449	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopFitness != 0
2880	449	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopFitness : -$.stopFitness)
2880	449	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopFitness : -stopFitness)
11488	454	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
11488	454	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
2881	455	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > $.stopTolX
2881	455	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * Math.max(Math.abs(pcCol[$]), sqrtDiagC[$]) > stopTolX
2881	455	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * Math.max(Math.abs(pcCol[i]), $[i]) > stopTolX
2881	455	16	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma * Math.max(Math.abs($[i]), sqrtDiagC[i]) > stopTolX
2882	458	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension - 1
2882	458	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension - 1
11489	462	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
11489	462	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
2883	463	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * sqrtDiagC[i] > $.stopTolUpX
2883	463	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * sqrtDiagC[$] > stopTolUpX
2883	463	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * $[i] > stopTolUpX
2884	469	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < $.stopTolFun
2884	469	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2884	469	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
2884	469	12	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
2884	469	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
2884	469	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
2885	474	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
2885	474	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst - historyBest < $.stopTolHistFun
2885	474	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst - $ < stopTolHistFun
2885	474	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$ - historyBest < stopTolHistFun
2886	479	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) / $.min($.diagD) > 1e7
2887	483	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
2888	487	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, current, lastResult)
2888	487	16	CMAESOptimizer.java	doOptimize	current	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
2888	487	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
2888	487	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, current, $)
2889	494	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1+$.lambda/4.)]]
2889	494	12	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1+lambda/4.)]]
2889	494	12	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1+lambda/4.)]]
2889	494	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1+lambda/4.)]]
2890	497	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2890	497	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
2890	497	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
2890	497	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
2891	504	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
2892	532	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof Sigma
2893	536	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof PopulationSize
2894	553	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
2895	554	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	DimensionMismatchException	$.inputSigma.$.length != init.$.length
2895	554	12	CMAESOptimizer.java	checkParameters	init	double[]	0	DimensionMismatchException	inputSigma.length != $.length
11490	557	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
11490	557	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
11490	557	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
2896	558	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > uB[i] - lB[i]
2896	558	16	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > uB[$] - lB[$]
2896	558	16	CMAESOptimizer.java	checkParameters	lB	double[]	0	OutOfRangeException	inputSigma[i] > uB[i] - $[i]
2896	558	16	CMAESOptimizer.java	checkParameters	uB	double[]	0	OutOfRangeException	inputSigma[i] > $[i] - lB[i]
2897	571	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NotStrictlyPositiveException	$.lambda <= 0
11491	576	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
11491	576	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
11491	576	8	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
11492	594	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
11492	594	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
11493	631	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
11493	631	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
2898	653	8	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
2899	676	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
2899	676	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
2900	701	8	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
2901	709	12	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
2902	732	16	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
2902	732	16	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
2903	764	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
2903	764	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1
2903	764	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
2903	764	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
2904	773	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
11494	774	16	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
11494	774	16	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
2905	775	20	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i, 0) < 0
2905	775	20	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($, 0) < 0
2906	783	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
11495	801	8	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
11496	815	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
11496	815	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
11496	815	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
11497	820	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
11497	820	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
11497	820	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
11498	980	8	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
11498	980	8	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11499	981	12	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11499	981	12	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
11500	994	8	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
11500	994	8	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11501	995	12	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11501	995	12	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
11502	1008	8	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
11502	1008	8	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11503	1009	12	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11503	1009	12	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
11504	1024	8	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
11504	1024	8	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11505	1025	12	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11505	1025	12	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
11506	1039	8	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
11506	1039	8	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11507	1040	12	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11507	1040	12	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
11508	1054	8	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
11508	1054	8	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11509	1055	12	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
11509	1055	12	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
11509	1055	12	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
11510	1069	8	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
11510	1069	8	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11511	1070	12	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11511	1070	12	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
11512	1083	8	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11512	1083	8	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
11513	1085	12	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
11513	1085	12	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
2907	1099	8	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
11514	1101	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
11514	1101	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
11515	1107	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
11515	1107	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
11516	1124	8	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
11516	1124	8	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
11517	1136	8	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
11517	1136	8	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
11518	1150	8	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
11518	1150	8	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
2908	1151	12	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
2908	1151	12	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
11519	1177	8	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
11519	1177	8	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
11519	1177	8	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
11520	1178	12	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
11520	1178	12	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
11520	1178	12	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
11521	1195	8	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
11521	1195	8	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
11522	1208	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
11522	1208	8	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11523	1209	12	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11523	1209	12	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2909	1211	16	CMAESOptimizer.java	max	e	double	0	DEF	max < $
2909	1211	16	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
11524	1225	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
11524	1225	8	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11525	1226	12	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11525	1226	12	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2910	1228	16	CMAESOptimizer.java	min	e	double	0	DEF	min > $
2910	1228	16	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
11526	1242	8	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
11526	1242	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
11526	1242	8	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
2911	1243	12	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
2911	1243	12	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
2911	1243	12	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
11527	1256	8	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
11527	1256	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
11527	1256	8	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
2912	1257	12	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
2912	1257	12	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
2912	1257	12	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
11528	1270	8	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
11528	1270	8	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
11528	1270	8	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
11529	1282	8	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
11529	1282	8	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
11529	1282	8	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
11530	1294	8	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
11530	1294	8	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
11531	1307	8	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
11531	1307	8	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
11532	1308	12	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
11532	1308	12	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
11054	517	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
11055	523	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
11055	523	12	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
11056	525	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount + 1
11056	525	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount + 1
2039	526	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
2040	533	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
2040	533	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
2040	533	20	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
2040	533	20	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
2041	556	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
2042	565	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
2042	565	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
2043	570	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, optimum, lastResult)
2043	570	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
2043	570	16	CMAESOptimizer.java	doOptimize	optimum	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
2043	570	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
2043	570	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, optimum, $)
2044	577	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopFitness != 0
2044	577	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopFitness : -$.stopFitness)
2044	577	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopFitness : -stopFitness)
11057	582	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
11057	582	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
2045	583	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > $.stopTolX
2045	583	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * Math.max(Math.abs(pcCol[$]), sqrtDiagC[$]) > stopTolX
2045	583	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * Math.max(Math.abs(pcCol[i]), $[i]) > stopTolX
2045	583	16	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma * Math.max(Math.abs($[i]), sqrtDiagC[i]) > stopTolX
2046	586	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension - 1
2046	586	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension - 1
11058	590	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
11058	590	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
2047	591	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * sqrtDiagC[i] > $.stopTolUpX
2047	591	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * sqrtDiagC[$] > stopTolUpX
2047	591	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * $[i] > stopTolUpX
2048	597	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < $.stopTolFun
2048	597	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2048	597	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
2048	597	12	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
2048	597	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
2048	597	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
2049	602	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst-historyBest < $.stopTolHistFun
2049	602	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
2049	602	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst-$ < stopTolHistFun
2049	602	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$-historyBest < stopTolHistFun
2050	607	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD)/$.min($.diagD) > 1e7
2051	611	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
2052	615	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, current, lastResult)
2052	615	16	CMAESOptimizer.java	doOptimize	current	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
2052	615	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, current, $)
2052	615	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
2053	622	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1+$.lambda/4.)]]
2053	622	12	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1+lambda/4.)]]
2053	622	12	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1+lambda/4.)]]
2053	622	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1+lambda/4.)]]
2054	625	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2054	625	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
2054	625	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
2054	625	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
2055	632	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
2056	656	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof Sigma
2057	660	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof PopulationSize
2058	675	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
2059	676	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	DimensionMismatchException	$.inputSigma.$.length != init.$.length
2059	676	12	CMAESOptimizer.java	checkParameters	init	double[]	0	DimensionMismatchException	inputSigma.length != $.length
11059	679	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
11059	679	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
11059	679	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
2060	680	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NotPositiveException	$.inputSigma[i] < 0
2060	680	16	CMAESOptimizer.java	checkParameters	i	int	0	NotPositiveException	inputSigma[$] < 0
2061	684	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > uB[i] - lB[i]
2061	684	16	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > uB[$] - lB[$]
2061	684	16	CMAESOptimizer.java	checkParameters	lB	double[]	0	OutOfRangeException	inputSigma[i] > uB[i] - $[i]
2061	684	16	CMAESOptimizer.java	checkParameters	uB	double[]	0	OutOfRangeException	inputSigma[i] > $[i] - lB[i]
2062	697	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	DEF	$.lambda <= 0
11060	704	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
11060	704	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
11060	704	8	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
11061	724	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
11061	724	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
11062	761	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
11062	761	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
2063	783	8	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
2064	806	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
2064	806	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
2065	831	8	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
2066	839	12	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
2067	862	16	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
2067	862	16	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
2068	894	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1
2068	894	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
2068	894	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
2068	894	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
2069	903	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
11063	904	16	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
11063	904	16	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
2070	905	20	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i, 0) < 0
2070	905	20	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($, 0) < 0
2071	913	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
11064	931	8	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
11065	945	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
11065	945	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
11065	945	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
11066	950	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
11066	950	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
11066	950	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
11067	1110	8	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
11067	1110	8	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11068	1111	12	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11068	1111	12	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
11069	1124	8	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
11069	1124	8	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11070	1125	12	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11070	1125	12	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
11071	1138	8	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
11071	1138	8	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11072	1139	12	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11072	1139	12	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
11073	1154	8	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
11073	1154	8	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11074	1155	12	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11074	1155	12	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
11075	1169	8	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
11075	1169	8	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11076	1170	12	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11076	1170	12	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
11077	1184	8	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
11077	1184	8	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11078	1185	12	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
11078	1185	12	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
11078	1185	12	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
11079	1199	8	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
11079	1199	8	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11080	1200	12	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11080	1200	12	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
11081	1213	8	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11081	1213	8	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
11082	1215	12	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
11082	1215	12	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
2072	1229	8	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
11083	1231	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
11083	1231	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
11084	1237	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
11084	1237	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
11085	1254	8	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
11085	1254	8	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
11086	1266	8	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
11086	1266	8	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
11087	1280	8	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
11087	1280	8	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
2073	1281	12	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
2073	1281	12	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
11088	1307	8	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
11088	1307	8	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
11088	1307	8	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
11089	1308	12	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
11089	1308	12	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
11089	1308	12	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
11090	1325	8	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
11090	1325	8	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
11091	1338	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
11091	1338	8	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11092	1339	12	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11092	1339	12	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2074	1341	16	CMAESOptimizer.java	max	e	double	0	DEF	max < $
2074	1341	16	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
11093	1355	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
11093	1355	8	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
11094	1356	12	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
11094	1356	12	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2075	1358	16	CMAESOptimizer.java	min	e	double	0	DEF	min > $
2075	1358	16	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
11095	1372	8	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
11095	1372	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
11095	1372	8	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
2076	1373	12	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
2076	1373	12	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
2076	1373	12	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
11096	1386	8	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
11096	1386	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
11096	1386	8	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
2077	1387	12	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
2077	1387	12	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
2077	1387	12	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
11097	1400	8	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
11097	1400	8	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
11097	1400	8	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
11098	1412	8	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
11098	1412	8	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
11098	1412	8	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
11099	1424	8	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
11099	1424	8	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
11100	1437	8	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
11100	1437	8	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
11101	1438	12	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
11101	1438	12	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
11824	35	8	CanberraDistance.java	compute	THIS	CanberraDistance	0	NIL-FOR	i < a.$.length
11824	35	8	CanberraDistance.java	compute	i	int	0	NIL-FOR	$ < a.length
11824	35	8	CanberraDistance.java	compute	a	double[]	0	NIL-FOR	i < $.length
1206	100	8	CauchyDistribution.java	CauchyDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1207	146	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0
1207	146	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1
1208	148	15	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1209	150	16	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
2457	85	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length < 2
2457	85	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length < 2
2458	88	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length != observed.$.length
2458	88	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length != observed.length
2458	88	8	ChiSquareTest.java	chiSquare	observed	long[]	0	DimensionMismatchException	expected.length != $.length
11296	96	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
11296	96	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
11296	96	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2459	102	8	ChiSquareTest.java	chiSquare	sumExpected	double	0	DEF	FastMath.abs($ - sumObserved) > 10E-6
2459	102	8	ChiSquareTest.java	chiSquare	sumObserved	double	0	DEF	FastMath.abs(sumExpected - $) > 10E-6
11297	107	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
11297	107	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
11297	107	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2460	108	12	ChiSquareTest.java	chiSquare	rescale	boolean	1	DEF	$
2461	208	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
2461	208	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
11298	256	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
11298	256	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
11299	257	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
11299	257	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
11300	267	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
11300	267	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
11301	268	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
11301	268	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
2462	363	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
2462	363	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
2463	414	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length < 2
2463	414	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
2464	417	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
2464	417	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
2464	417	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
11302	430	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
11302	430	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
11302	430	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2465	435	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
2465	435	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
2466	440	8	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
11303	448	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
11303	448	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
11303	448	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2467	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
2467	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
2467	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
2467	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
2468	454	16	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
2469	566	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
2469	566	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
2470	588	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in.$.length < 2
2470	588	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$.length < 2
2471	592	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in[0].length < 2
2471	592	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$[0].length < 2
1570	107	8	CholeskyDecomposition.java	CholeskyDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
10507	118	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
10507	118	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
10508	122	12	CholeskyDecomposition.java	CholeskyDecomposition	j	int	0	NIL-FOR	$ < order
10508	122	12	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	j < $
1571	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lIJ	double	0	NonSymmetricMatrixException	FastMath.abs($ - lJI) > maxDelta
1571	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lJI	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - $) > maxDelta
1571	128	16	CholeskyDecomposition.java	CholeskyDecomposition	maxDelta	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - lJI) > $
10509	136	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
10509	136	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
1572	141	12	CholeskyDecomposition.java	CholeskyDecomposition	ltI	double[]	0	NonPositiveDefiniteMatrixException	$[i] <= absolutePositivityThreshold
1572	141	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	ltI[$] <= absolutePositivityThreshold
1572	141	12	CholeskyDecomposition.java	CholeskyDecomposition	absolutePositivityThreshold	double	0	NonPositiveDefiniteMatrixException	ltI[i] <= $
10510	148	12	CholeskyDecomposition.java	CholeskyDecomposition	q	int	0	NIL-FOR	$ > i
10510	148	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	q > $
10511	151	16	CholeskyDecomposition.java	CholeskyDecomposition	p	int	0	NIL-FOR	$ < order
10511	151	16	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	p < $
1573	164	8	CholeskyDecomposition.java	getL	THIS	CholeskyDecomposition	0	DEF	$.cachedL == null
1574	177	8	CholeskyDecomposition.java	getLT	THIS	CholeskyDecomposition	0	DEF	$.cachedLT == null
10512	191	8	CholeskyDecomposition.java	getDeterminant	THIS	CholeskyDecomposition	0	NIL-FOR	i < $.lTData.$.length
10512	191	8	CholeskyDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
3266	43	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == NO_FITNESS
3267	85	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
3268	100	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
3555	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	1	DEF	$.previousState != null
3555	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
12002	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
12002	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
12003	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
12003	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
161	84	8	CombinatoricsUtils.java	binomialCoefficient	n	int	0	RET	$ == k
161	84	8	CombinatoricsUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
161	84	8	CombinatoricsUtils.java	binomialCoefficient	k	int	0	RET	n == $
162	87	8	CombinatoricsUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
162	87	8	CombinatoricsUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
162	87	8	CombinatoricsUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
163	91	8	CombinatoricsUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
163	91	8	CombinatoricsUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
164	101	8	CombinatoricsUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
9921	104	12	CombinatoricsUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
9921	104	12	CombinatoricsUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
165	108	15	CombinatoricsUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
9922	112	12	CombinatoricsUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
9922	112	12	CombinatoricsUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
9923	128	12	CombinatoricsUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
9923	128	12	CombinatoricsUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
166	165	8	CombinatoricsUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
166	165	8	CombinatoricsUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
166	165	8	CombinatoricsUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
167	168	8	CombinatoricsUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
167	168	8	CombinatoricsUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
167	168	8	CombinatoricsUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
168	171	8	CombinatoricsUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
168	171	8	CombinatoricsUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
169	174	8	CombinatoricsUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
9924	179	8	CombinatoricsUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
9924	179	8	CombinatoricsUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
170	210	8	CombinatoricsUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
170	210	8	CombinatoricsUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
170	210	8	CombinatoricsUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
171	213	8	CombinatoricsUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
171	213	8	CombinatoricsUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
171	213	8	CombinatoricsUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
172	221	8	CombinatoricsUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
173	229	8	CombinatoricsUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
174	233	8	CombinatoricsUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
174	233	8	CombinatoricsUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
9925	243	8	CombinatoricsUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
9925	243	8	CombinatoricsUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
9926	248	8	CombinatoricsUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
9926	248	8	CombinatoricsUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
175	280	8	CombinatoricsUtils.java	factorial	n	int	0	NotPositiveException	$ < 0
176	284	8	CombinatoricsUtils.java	factorial	n	int	0	MathArithmeticException	$ > 20
177	304	8	CombinatoricsUtils.java	factorialDouble	n	int	0	NotPositiveException	$ < 0
178	308	8	CombinatoricsUtils.java	factorialDouble	n	int	0	RET	$ < 21
179	322	8	CombinatoricsUtils.java	factorialLog	n	int	0	NotPositiveException	$ < 0
180	326	8	CombinatoricsUtils.java	factorialLog	n	int	0	RET	$ < 21
9927	330	8	CombinatoricsUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
9927	330	8	CombinatoricsUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
181	357	8	CombinatoricsUtils.java	stirlingS2	k	int	0	NotPositiveException	$ < 0
182	360	8	CombinatoricsUtils.java	stirlingS2	n	int	0	NumberIsTooLargeException	k > $
182	360	8	CombinatoricsUtils.java	stirlingS2	k	int	0	NumberIsTooLargeException	$ > n
183	366	8	CombinatoricsUtils.java	stirlingS2	stirlingS2	long[][]	0	DEF	$ == null
9928	375	12	CombinatoricsUtils.java	stirlingS2	THIS	CombinatoricsUtils	0	NIL-FOR	i < stirlingS2.$.length
9928	375	12	CombinatoricsUtils.java	stirlingS2	i	int	0	NIL-FOR	$ < stirlingS2.length
9928	375	12	CombinatoricsUtils.java	stirlingS2	stirlingS2	long[][]	0	NIL-FOR	i < $.length
9929	380	16	CombinatoricsUtils.java	stirlingS2	j	int	0	NIL-FOR	$ < i
9929	380	16	CombinatoricsUtils.java	stirlingS2	i	int	0	NIL-FOR	j < $
184	390	8	CombinatoricsUtils.java	stirlingS2	THIS	CombinatoricsUtils	1	RET	n < stirlingS2.$.length
184	390	8	CombinatoricsUtils.java	stirlingS2	stirlingS2	long[][]	1	RET	n < $.length
184	390	8	CombinatoricsUtils.java	stirlingS2	n	int	1	RET	$ < stirlingS2.length
185	395	12	CombinatoricsUtils.java	stirlingS2	k	int	1	RET	$ == 0
186	397	19	CombinatoricsUtils.java	stirlingS2	n	int	1	RET	k == $
186	397	19	CombinatoricsUtils.java	stirlingS2	k	int	1	RET	$ == 1
186	397	19	CombinatoricsUtils.java	stirlingS2	k	int	1	RET	$ == n
187	399	19	CombinatoricsUtils.java	stirlingS2	k	int	1	RET	$ == 2
188	401	19	CombinatoricsUtils.java	stirlingS2	n	int	1	RET	k == $ - 1
188	401	19	CombinatoricsUtils.java	stirlingS2	k	int	1	RET	$ == n - 1
9930	407	16	CombinatoricsUtils.java	stirlingS2	j	int	0	NIL-FOR	$ <= k
9930	407	16	CombinatoricsUtils.java	stirlingS2	k	int	0	NIL-FOR	j <= $
189	410	20	CombinatoricsUtils.java	stirlingS2	sum	long	0	MathArithmeticException	$ < 0
190	444	8	CombinatoricsUtils.java	combinationsIterator	k	int	0	RET	$ == 0
191	447	8	CombinatoricsUtils.java	combinationsIterator	n	int	0	RET	k == $
191	447	8	CombinatoricsUtils.java	combinationsIterator	k	int	0	RET	$ == n
9931	450	12	CombinatoricsUtils.java	combinationsIterator	i	int	0	NIL-FOR	$ < n
9931	450	12	CombinatoricsUtils.java	combinationsIterator	n	int	0	NIL-FOR	i < $
192	628	8	CombinatoricsUtils.java	checkBinomial	n	int	0	NumberIsTooLargeException	$ < k
192	628	8	CombinatoricsUtils.java	checkBinomial	k	int	0	NumberIsTooLargeException	n < $
193	632	8	CombinatoricsUtils.java	checkBinomial	n	int	0	NotPositiveException	$ < 0
898	116	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN
899	119	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
900	122	8	Complex.java	abs	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
901	123	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
902	129	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
903	158	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
903	158	8	Complex.java	add	THIS	Complex	0	RET	addend.$.isNaN
903	158	8	Complex.java	add	addend	Complex	0	RET	$.isNaN
904	175	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
904	175	8	Complex.java	add	addend	double	0	RET	Double.isNaN($)
905	197	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN
906	249	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
906	249	8	Complex.java	divide	THIS	Complex	0	RET	divisor.$.isNaN
906	249	8	Complex.java	divide	divisor	Complex	0	RET	$.isNaN
907	255	8	Complex.java	divide	c	double	0	RET	$ == 0.0
907	255	8	Complex.java	divide	d	double	0	RET	$ == 0.0
908	259	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
908	259	8	Complex.java	divide	divisor	Complex	0	RET	$.isInfinite()
909	263	8	Complex.java	divide	c	double	1	RET	FastMath.abs($) < FastMath.abs(d)
909	263	8	Complex.java	divide	d	double	1	RET	FastMath.abs(c) < FastMath.abs($)
910	285	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
910	285	8	Complex.java	divide	divisor	double	0	RET	Double.isNaN($)
911	288	8	Complex.java	divide	divisor	double	0	RET	$ == 0d
912	291	8	Complex.java	divide	divisor	double	0	RET	Double.isInfinite($)
913	300	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isNaN
914	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.imaginary == 0.0
914	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.real == 0.0
915	308	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isInfinite
916	312	8	Complex.java	reciprocal	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
917	340	8	Complex.java	equals	THIS	Complex	0	RET	$ == other
917	340	8	Complex.java	equals	other	Object	0	RET	this == $
918	343	8	Complex.java	equals	other	Object	0	RET	$ instanceof Complex
919	345	12	Complex.java	equals	THIS	Complex	1	RET	c.$.isNaN
919	345	12	Complex.java	equals	c	Complex	1	RET	$.isNaN
920	363	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN
921	439	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
921	439	8	Complex.java	multiply	THIS	Complex	0	RET	factor.$.isNaN
921	439	8	Complex.java	multiply	factor	Complex	0	RET	$.isNaN
922	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.real)
922	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.imaginary)
922	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
922	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
922	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.real)
922	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.imaginary)
923	462	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
924	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
924	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
925	481	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
925	481	8	Complex.java	multiply	factor	double	0	RET	Double.isNaN($)
926	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
926	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
926	484	8	Complex.java	multiply	factor	double	0	RET	Double.isInfinite($)
927	501	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN
928	529	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
928	529	8	Complex.java	subtract	THIS	Complex	0	RET	subtrahend.$.isNaN
928	529	8	Complex.java	subtract	subtrahend	Complex	0	RET	$.isNaN
929	546	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
929	546	8	Complex.java	subtract	subtrahend	double	0	RET	Double.isNaN($)
930	569	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN
931	593	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN
932	617	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN
933	658	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN
934	698	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN
935	739	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN
936	784	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN
937	862	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN
938	902	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN
939	945	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN
940	949	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
940	949	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
941	954	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
942	1016	8	Complex.java	tan	THIS	Complex	0	RET	Double.isInfinite($.real)
942	1016	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN
943	1019	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary > 20.0
944	1022	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary < -20.0
945	1067	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN
945	1067	8	Complex.java	tanh	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
946	1070	8	Complex.java	tanh	THIS	Complex	0	RET	$.real > 20.0
947	1073	8	Complex.java	tanh	THIS	Complex	0	RET	$.real < -20.0
948	1131	8	Complex.java	nthRoot	n	int	0	NotPositiveException	$ <= 0
949	1138	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN
950	1142	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
9985	1154	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
9985	1154	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
951	1188	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
951	1188	8	Complex.java	valueOf	imaginaryPart	double	0	RET	Double.isNaN($)
952	1202	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
882	67	8	ComplexFormat.java	ComplexFormat	format	NumberFormat	0	NullArgumentException	$ == null
883	85	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
884	88	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
885	146	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NullArgumentException	$ == null
886	149	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NoDataException	$.length() == 0
887	152	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
888	155	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
889	214	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
890	219	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
890	219	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
891	245	8	ComplexFormat.java	formatImaginary	toAppendTo	StringBuffer	0	DEF	$.toString().equals("1")
892	272	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
893	274	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
894	354	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
895	377	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
896	413	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
897	421	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	CompositeFormat.parseFixedstring(source, $.getImaginaryCharacter(), pos)
897	421	8	ComplexFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, getImaginaryCharacter(), pos)
897	421	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), $)
874	63	8	ComplexUtils.java	polar2Complex	r	double	0	MathIllegalArgumentException	$ < 0
9983	81	8	ComplexUtils.java	convertToComplex	THIS	ComplexUtils	0	NIL-FOR	i < real.$.length
9983	81	8	ComplexUtils.java	convertToComplex	i	int	0	NIL-FOR	$ < real.length
9983	81	8	ComplexUtils.java	convertToComplex	real	double[]	0	NIL-FOR	i < $.length
510	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
510	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
9943	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
9943	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
9943	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
511	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
511	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
512	121	8	CompositeFormat.java	parseNumber	sb	StringBuilder	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
512	121	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
512	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
512	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
512	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
512	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
513	147	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
513	147	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
9944	152	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
9944	152	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
9944	152	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
514	154	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
515	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
515	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
515	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
515	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
515	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
515	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
515	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
515	176	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
516	210	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
516	210	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
1822	176	8	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	1	DEF	$ == null
1823	185	8	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1823	185	8	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
1824	195	12	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	0	DEF	$ != null
1825	199	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1825	199	12	ConjugateGradient.java	solveInPlace	rhoNext	double	0	DEF	$ <= 0.
1826	207	12	ConjugateGradient.java	solveInPlace	manager	IterationManager	1	DEF	$.getIterations() == 2
1827	214	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1827	214	12	ConjugateGradient.java	solveInPlace	pq	double	0	DEF	$ <= 0.
1828	230	12	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1828	230	12	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
64	129	8	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(hPrev, 0.0, $)
64	129	8	ContinuedFraction.java	evaluate	hPrev	double	0	DEF	Precision.equals($, 0.0, small)
9866	138	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
9866	138	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
65	143	12	ContinuedFraction.java	evaluate	dN	double	0	DEF	Precision.equals($, 0.0, small)
65	143	12	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(dN, 0.0, $)
66	147	12	ContinuedFraction.java	evaluate	cN	double	0	DEF	Precision.equals($, 0.0, small)
66	147	12	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(cN, 0.0, $)
67	155	12	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isInfinite($)
68	159	12	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isNaN($)
69	164	12	ContinuedFraction.java	evaluate	deltaN	double	0	DEF	FastMath.abs($ - 1.0) < epsilon
69	164	12	ContinuedFraction.java	evaluate	epsilon	double	0	DEF	FastMath.abs(deltaN - 1.0) < $
70	174	8	ContinuedFraction.java	evaluate	n	int	0	MaxCountExceededException	$ >= maxIterations
70	174	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxCountExceededException	n >= $
3608	133	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
3608	133	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
3609	137	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
3610	142	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DimensionMismatchException	$.getInterpolatedState().length != model.getInterpolatedState().length
3610	142	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DimensionMismatchException	getInterpolatedState().length != $.getInterpolatedState().length
3611	147	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	MathIllegalArgumentException	$.forward ^ model.$.forward
3611	147	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	MathIllegalArgumentException	forward ^ $.forward
3612	156	6	ContinuousOutputModel.java	append	step	double	0	MathIllegalArgumentException	FastMath.abs(gap) > 1.0e-3 * FastMath.abs($)
3612	156	6	ContinuousOutputModel.java	append	gap	double	0	MathIllegalArgumentException	FastMath.abs($) > 1.0e-3 * FastMath.abs(step)
3613	192	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
3614	199	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
3615	257	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
3615	257	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
3615	257	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
3616	262	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
3616	262	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
3616	262	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
12036	269	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
12036	269	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
3617	274	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
3618	277	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
3619	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs(tMax - $) < 1e-6
3619	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs($ - tMin) < 1e-6
3619	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	FastMath.abs(tMed - $) < 1e-6
3619	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	FastMath.abs($ - tMed) < 1e-6
3620	314	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
3620	314	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
3621	316	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
3621	316	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
12037	324	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
12037	324	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
12037	324	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
12037	324	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
3622	365	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
3623	366	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
3623	366	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
3624	368	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
3624	368	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
3625	374	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
3625	374	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
3626	376	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
3626	376	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
3164	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
3164	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
3164	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
11747	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
11747	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
11748	168	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.normalized.$.length
11748	168	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < normalized.length
11749	174	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
11749	174	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
11749	174	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
11750	176	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.root.getColumnDimension()
11750	176	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < root.getColumnDimension()
11344	173	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
11344	173	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
11345	174	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
11345	174	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
2528	245	8	Covariance.java	covariance	THIS	Covariance	1	MathIllegalArgumentException	length != yArray.$.length
2528	245	8	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ != yArray.length
2528	245	8	Covariance.java	covariance	yArray	double[]	1	MathIllegalArgumentException	length != $.length
2529	248	15	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ < 2
11346	254	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
11346	254	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
2530	290	8	Covariance.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2530	290	8	Covariance.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 1
1913	188	8	CurveFitter.java	fit	THIS	CurveFitter	1	DEF	$.optimizer == null
3256	106	8	CycleCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3256	106	8	CycleCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3257	124	8	CycleCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3257	124	8	CycleCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
11805	144	8	CycleCrossover.java	mate	length	int	0	NIL-WHILE	visitedIndices.size() < $
11805	144	8	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.size() < length
11806	150	12	CycleCrossover.java	mate	indices	List<Integer>	0	NIL-WHILE	idx != $.get(0)
11806	150	12	CycleCrossover.java	mate	idx	int	0	NIL-WHILE	$ != indices.get(0)
3258	160	12	CycleCrossover.java	mate	cycle	int	0	DEF	$++ % 2 != 0
11807	171	12	CycleCrossover.java	mate	length	int	0	NIL-WHILE	visitedIndices.size() < $
11807	171	12	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.size() < length
11807	171	12	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.contains(idx)
11807	171	12	CycleCrossover.java	mate	idx	int	0	NIL-WHILE	visitedIndices.contains($)
3259	173	16	CycleCrossover.java	mate	length	int	0	DEF	idx >= $
3259	173	16	CycleCrossover.java	mate	idx	int	0	DEF	$ >= length
3307	101	8	DBSCANClusterer.java	DBSCANClusterer	eps	double	0	NotPositiveException	$ < 0.0d
3308	104	8	DBSCANClusterer.java	DBSCANClusterer	minPts	int	0	NotPositiveException	$ < 0
3309	144	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	0	DEF	visited.get($.point) != null
3309	144	12	DBSCANClusterer.java	cluster	visited	Map<Clusterable,PointStatus>	0	DEF	$.get(point) != null
3310	148	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	1	DEF	neighbors.size() >= $.minPts
3310	148	12	DBSCANClusterer.java	cluster	neighbors	List<T>	1	DEF	$.size() >= minPts
11826	180	8	DBSCANClusterer.java	expandCluster	seeds	List<T>	0	NIL-WHILE	index < $.size()
11826	180	8	DBSCANClusterer.java	expandCluster	index	int	0	NIL-WHILE	$ < seeds.size()
3311	184	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ == null
3312	186	16	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	currentNeighbors.size() >= $.minPts
3312	186	16	DBSCANClusterer.java	expandCluster	currentNeighbors	List<T>	0	DEF	$.size() >= minPts
3313	191	12	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	pStatus != $.PointStatus.PART_OF_CLUSTER
3313	191	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ != PointStatus.PART_OF_CLUSTER
3314	211	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	point != $.neighbor
3314	211	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	$.distance($.neighbor, point) <= $.eps
3314	211	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	$ != neighbor
3314	211	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	distance(neighbor, $) <= eps
3315	228	12	DBSCANClusterer.java	merge	THIS	DBSCANClusterer	0	DEF	oneSet.contains($.item)
3315	228	12	DBSCANClusterer.java	merge	oneSet	Set<T>	0	DEF	$.contains(item)
2485	89	8	DBSCANClusterer.java	DBSCANClusterer	eps	double	0	NotPositiveException	$ < 0.0d
2486	92	8	DBSCANClusterer.java	DBSCANClusterer	minPts	int	0	NotPositiveException	$ < 0
2487	137	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	0	DEF	visited.get($.point) != null
2487	137	12	DBSCANClusterer.java	cluster	visited	Map<Clusterable<T>,PointStatus>	0	DEF	$.get(point) != null
2488	141	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	1	DEF	neighbors.size() >= $.minPts
2488	141	12	DBSCANClusterer.java	cluster	neighbors	List<T>	1	DEF	$.size() >= minPts
11315	173	8	DBSCANClusterer.java	expandCluster	seeds	List<T>	0	NIL-WHILE	index < $.size()
11315	173	8	DBSCANClusterer.java	expandCluster	index	int	0	NIL-WHILE	$ < seeds.size()
2489	177	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ == null
2490	179	16	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	currentNeighbors.size() >= $.minPts
2490	179	16	DBSCANClusterer.java	expandCluster	currentNeighbors	List<T>	0	DEF	$.size() >= minPts
2491	184	12	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	pStatus != $.PointStatus.PART_OF_CLUSTER
2491	184	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ != PointStatus.PART_OF_CLUSTER
2492	204	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	$.neighbor.distanceFrom(point) <= $.eps
2492	204	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	point != $.neighbor
2492	204	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	neighbor.distanceFrom($) <= eps
2492	204	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	$ != neighbor
2493	221	12	DBSCANClusterer.java	merge	THIS	DBSCANClusterer	0	DEF	oneSet.contains($.item)
2493	221	12	DBSCANClusterer.java	merge	oneSet	Set<T>	0	DEF	$.contains(item)
4190	196	8	DSCompiler.java	getCompiler	THIS	DSCompiler	0	RET	cache.$.length > parameters
4190	196	8	DSCompiler.java	getCompiler	THIS	DSCompiler	0	RET	cache[parameters].length > order
4190	196	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$[parameters][order] != null
4190	196	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$.length > parameters
4190	196	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$ != null
4190	196	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$[parameters].length > order
4190	196	8	DSCompiler.java	getCompiler	parameters	int	0	RET	cache[$][order] != null
4190	196	8	DSCompiler.java	getCompiler	parameters	int	0	RET	cache.length > $
4190	196	8	DSCompiler.java	getCompiler	parameters	int	0	RET	cache[$].length > order
4190	196	8	DSCompiler.java	getCompiler	order	int	0	RET	cache[parameters][$] != null
4190	196	8	DSCompiler.java	getCompiler	order	int	0	RET	cache[parameters].length > $
4191	207	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	DEF	$ != null
12236	209	12	DSCompiler.java	getCompiler	THIS	DSCompiler	0	NIL-FOR	i < cache.$.length
12236	209	12	DSCompiler.java	getCompiler	i	int	0	NIL-FOR	$ < cache.length
12236	209	12	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	NIL-FOR	i < $.length
12237	215	8	DSCompiler.java	getCompiler	diag	int	0	NIL-FOR	$ <= parameters + order
12237	215	8	DSCompiler.java	getCompiler	parameters	int	0	NIL-FOR	diag <= $ + order
12237	215	8	DSCompiler.java	getCompiler	order	int	0	NIL-FOR	diag <= parameters + $
12238	216	12	DSCompiler.java	getCompiler	o	int	0	NIL-FOR	$ <= FastMath.min(order, diag)
12238	216	12	DSCompiler.java	getCompiler	diag	int	0	NIL-FOR	o <= FastMath.min(order, $)
12238	216	12	DSCompiler.java	getCompiler	order	int	0	NIL-FOR	o <= FastMath.min($, diag)
4192	218	16	DSCompiler.java	getCompiler	p	int	0	DEF	newCache[$][o] == null
4192	218	16	DSCompiler.java	getCompiler	o	int	0	DEF	newCache[p][$] == null
4192	218	16	DSCompiler.java	getCompiler	newCache	DSCompiler[][]	0	DEF	$[p][o] == null
4193	243	8	DSCompiler.java	compileSizes	parameters	int	1	DEF	$ == 0
12239	248	12	DSCompiler.java	compileSizes	i	int	0	NIL-FOR	$ < order
12239	248	12	DSCompiler.java	compileSizes	order	int	0	NIL-FOR	i < $
4194	268	8	DSCompiler.java	compileDerivativesIndirection	parameters	int	0	RET	$ == 0
4194	268	8	DSCompiler.java	compileDerivativesIndirection	order	int	0	RET	$ == 0
12240	277	8	DSCompiler.java	compileDerivativesIndirection	i	int	0	NIL-FOR	$ < vSize
12240	277	8	DSCompiler.java	compileDerivativesIndirection	vSize	int	0	NIL-FOR	i < $
12241	285	8	DSCompiler.java	compileDerivativesIndirection	i	int	0	NIL-FOR	$ < dSize
12241	285	8	DSCompiler.java	compileDerivativesIndirection	dSize	int	0	NIL-FOR	i < $
4195	316	8	DSCompiler.java	compileLowerIndirection	parameters	int	0	RET	$ == 0
4195	316	8	DSCompiler.java	compileLowerIndirection	order	int	0	RET	$ <= 1
12242	325	8	DSCompiler.java	compileLowerIndirection	i	int	0	NIL-FOR	$ < dSize
12242	325	8	DSCompiler.java	compileLowerIndirection	dSize	int	0	NIL-FOR	i < $
4196	351	8	DSCompiler.java	compileMultiplicationIndirection	parameters	int	0	RET	$ == 0
4196	351	8	DSCompiler.java	compileMultiplicationIndirection	order	int	0	RET	$ == 0
12243	362	8	DSCompiler.java	compileMultiplicationIndirection	i	int	0	NIL-FOR	$ < dSize
12243	362	8	DSCompiler.java	compileMultiplicationIndirection	dSize	int	0	NIL-FOR	i < $
12244	365	12	DSCompiler.java	compileMultiplicationIndirection	THIS	DSCompiler	0	NIL-FOR	j < dRow.$.length
12244	365	12	DSCompiler.java	compileMultiplicationIndirection	j	int	0	NIL-FOR	$ < dRow.length
12244	365	12	DSCompiler.java	compileMultiplicationIndirection	dRow	int[][]	0	NIL-FOR	j < $.length
12245	372	12	DSCompiler.java	compileMultiplicationIndirection	j	int	0	NIL-FOR	$ < row.size()
12245	372	12	DSCompiler.java	compileMultiplicationIndirection	row	List<int[]>	0	NIL-FOR	j < $.size()
4197	374	16	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[0] > 0
12246	375	20	DSCompiler.java	compileMultiplicationIndirection	k	int	0	NIL-FOR	$ < row.size()
12246	375	20	DSCompiler.java	compileMultiplicationIndirection	row	List<int[]>	0	NIL-FOR	k < $.size()
4198	377	24	DSCompiler.java	compileMultiplicationIndirection	termK	int[]	0	DEF	termJ[2] == $[2]
4198	377	24	DSCompiler.java	compileMultiplicationIndirection	termK	int[]	0	DEF	termJ[1] == $[1]
4198	377	24	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[2] == termK[2]
4198	377	24	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[1] == termK[1]
4199	418	8	DSCompiler.java	compileCompositionIndirection	parameters	int	0	RET	$ == 0
4199	418	8	DSCompiler.java	compileCompositionIndirection	order	int	0	RET	$ == 0
12247	433	8	DSCompiler.java	compileCompositionIndirection	i	int	0	NIL-FOR	$ < dSize
12247	433	8	DSCompiler.java	compileCompositionIndirection	dSize	int	0	NIL-FOR	i < $
12248	446	16	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	j < $.term.$.length
12248	446	16	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < term.length
12249	457	16	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	l < $.term.$.length
12249	457	16	DSCompiler.java	compileCompositionIndirection	l	int	0	NIL-FOR	$ < term.length
12250	461	20	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	j < $.term.$.length
12250	461	20	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < term.length
4200	467	24	DSCompiler.java	compileCompositionIndirection	j	int	0	DEF	$ == l
4200	467	24	DSCompiler.java	compileCompositionIndirection	l	int	0	DEF	j == $
12251	482	12	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < row.size()
12251	482	12	DSCompiler.java	compileCompositionIndirection	row	List<int[]>	0	NIL-FOR	j < $.size()
4201	484	16	DSCompiler.java	compileCompositionIndirection	termJ	int[]	0	DEF	$[0] > 0
12252	485	20	DSCompiler.java	compileCompositionIndirection	k	int	0	NIL-FOR	$ < row.size()
12252	485	20	DSCompiler.java	compileCompositionIndirection	row	List<int[]>	0	NIL-FOR	k < $.size()
12253	488	24	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	l < termJ.$.length
12253	488	24	DSCompiler.java	compileCompositionIndirection	l	int	0	NIL-FOR	$ < termJ.length
12253	488	24	DSCompiler.java	compileCompositionIndirection	equals	boolean	0	NIL-FOR	$
12253	488	24	DSCompiler.java	compileCompositionIndirection	termJ	int[]	0	NIL-FOR	l < $.length
4202	491	24	DSCompiler.java	compileCompositionIndirection	equals	boolean	0	DEF	$
4203	546	8	DSCompiler.java	getPartialDerivativeIndex	THIS	DSCompiler	0	DimensionMismatchException	orders.$.length != $.getFreeParameters()
4203	546	8	DSCompiler.java	getPartialDerivativeIndex	orders	int	0	DimensionMismatchException	$.length != getFreeParameters()
12254	573	8	DSCompiler.java	getPartialDerivativeIndex	i	int	0	NIL-FOR	$ >= 0
4204	580	12	DSCompiler.java	getPartialDerivativeIndex	ordersSum	int	0	NumberIsTooLargeException	$ > order
4204	580	12	DSCompiler.java	getPartialDerivativeIndex	order	int	0	NumberIsTooLargeException	ordersSum > $
12255	584	12	DSCompiler.java	getPartialDerivativeIndex	derivativeOrder	int	0	NIL-WHILE	$-- > 0
12256	670	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
12256	670	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
12257	695	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
12257	695	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
12258	726	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
12258	726	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
12259	747	8	DSCompiler.java	add	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
12259	747	8	DSCompiler.java	add	i	int	0	NIL-FOR	$ < getSize()
12260	763	8	DSCompiler.java	subtract	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
12260	763	8	DSCompiler.java	subtract	i	int	0	NIL-FOR	$ < getSize()
12261	781	8	DSCompiler.java	multiply	THIS	DSCompiler	0	NIL-FOR	i < $.multIndirection.$.length
12261	781	8	DSCompiler.java	multiply	i	int	0	NIL-FOR	$ < multIndirection.length
12262	784	12	DSCompiler.java	multiply	THIS	DSCompiler	0	NIL-FOR	j < mappingI.$.length
12262	784	12	DSCompiler.java	multiply	j	int	0	NIL-FOR	$ < mappingI.length
12262	784	12	DSCompiler.java	multiply	mappingI	int[][]	0	NIL-FOR	j < $.length
12263	832	8	DSCompiler.java	remainder	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
12263	832	8	DSCompiler.java	remainder	i	int	0	NIL-FOR	$ < getSize()
4205	855	8	DSCompiler.java	pow	a	double	1	DEF	$ == 0
4206	856	12	DSCompiler.java	pow	operand	double[]	1	DEF	$[operandOffset] == 0
4206	856	12	DSCompiler.java	pow	operandOffset	int	1	DEF	operand[$] == 0
12264	859	16	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i < function.$.length
12264	859	16	DSCompiler.java	pow	i	int	0	NIL-FOR	$ < function.length
12264	859	16	DSCompiler.java	pow	function	double[]	0	NIL-FOR	i < $.length
4207	863	19	DSCompiler.java	pow	operand	double[]	0	DEF	$[operandOffset] < 0
4207	863	19	DSCompiler.java	pow	operandOffset	int	0	DEF	operand[$] < 0
12265	869	12	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i < function.$.length
12265	869	12	DSCompiler.java	pow	i	int	0	NIL-FOR	$ < function.length
12265	869	12	DSCompiler.java	pow	function	double[]	0	NIL-FOR	i < $.length
12266	896	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ > 0
12267	902	8	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
12267	902	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
4208	924	8	DSCompiler.java	pow	n	int	0	RET	$ == 0
4209	935	8	DSCompiler.java	pow	n	int	1	DEF	$ > 0
12268	939	12	DSCompiler.java	pow	i	int	0	NIL-FOR	$ > 0
12269	948	12	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
12269	948	12	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
12270	955	8	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
12270	955	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
4210	1001	8	DSCompiler.java	rootN	n	int	1	DEF	$ == 2
4211	1004	15	DSCompiler.java	rootN	n	int	1	DEF	$ == 3
12271	1013	8	DSCompiler.java	rootN	THIS	DSCompiler	0	NIL-FOR	i <= $.order
12271	1013	8	DSCompiler.java	rootN	i	int	0	NIL-FOR	$ <= order
4212	1078	8	DSCompiler.java	log	THIS	DSCompiler	0	DEF	$.order > 0
12272	1081	12	DSCompiler.java	log	THIS	DSCompiler	0	NIL-FOR	i <= $.order
12272	1081	12	DSCompiler.java	log	i	int	0	NIL-FOR	$ <= order
4213	1105	8	DSCompiler.java	log1p	THIS	DSCompiler	0	DEF	$.order > 0
12273	1108	12	DSCompiler.java	log1p	THIS	DSCompiler	0	NIL-FOR	i <= $.order
12273	1108	12	DSCompiler.java	log1p	i	int	0	NIL-FOR	$ <= order
4214	1132	8	DSCompiler.java	log10	THIS	DSCompiler	0	DEF	$.order > 0
12274	1135	12	DSCompiler.java	log10	THIS	DSCompiler	0	NIL-FOR	i <= $.order
12274	1135	12	DSCompiler.java	log10	i	int	0	NIL-FOR	$ <= order
4215	1160	8	DSCompiler.java	cos	THIS	DSCompiler	0	DEF	$.order > 0
12275	1162	12	DSCompiler.java	cos	THIS	DSCompiler	0	NIL-FOR	i <= $.order
12275	1162	12	DSCompiler.java	cos	i	int	0	NIL-FOR	$ <= order
4216	1186	8	DSCompiler.java	sin	THIS	DSCompiler	0	DEF	$.order > 0
12276	1188	12	DSCompiler.java	sin	THIS	DSCompiler	0	NIL-FOR	i <= $.order
12276	1188	12	DSCompiler.java	sin	i	int	0	NIL-FOR	$ <= order
4217	1214	8	DSCompiler.java	tan	THIS	DSCompiler	0	DEF	$.order > 0
12277	1226	12	DSCompiler.java	tan	THIS	DSCompiler	0	NIL-FOR	n <= $.order
12277	1226	12	DSCompiler.java	tan	n	int	0	NIL-FOR	$ <= order
12278	1231	16	DSCompiler.java	tan	k	int	0	NIL-FOR	$ >= 0
4218	1233	20	DSCompiler.java	tan	k	int	1	DEF	$ > 2
4219	1235	27	DSCompiler.java	tan	k	int	0	DEF	$ == 2
4220	1239	16	DSCompiler.java	tan	n	int	0	DEF	($ & 0x1) == 0
4221	1268	8	DSCompiler.java	acos	THIS	DSCompiler	0	DEF	$.order > 0
12279	1282	12	DSCompiler.java	acos	THIS	DSCompiler	0	NIL-FOR	n <= $.order
12279	1282	12	DSCompiler.java	acos	n	int	0	NIL-FOR	$ <= order
12280	1287	16	DSCompiler.java	acos	k	int	0	NIL-FOR	$ >= 0
4222	1289	20	DSCompiler.java	acos	k	int	1	DEF	$ > 2
4223	1291	27	DSCompiler.java	acos	k	int	0	DEF	$ == 2
4224	1295	16	DSCompiler.java	acos	n	int	0	DEF	($ & 0x1) == 0
4225	1325	8	DSCompiler.java	asin	THIS	DSCompiler	0	DEF	$.order > 0
12281	1339	12	DSCompiler.java	asin	THIS	DSCompiler	0	NIL-FOR	n <= $.order
12281	1339	12	DSCompiler.java	asin	n	int	0	NIL-FOR	$ <= order
12282	1344	16	DSCompiler.java	asin	k	int	0	NIL-FOR	$ >= 0
4226	1346	20	DSCompiler.java	asin	k	int	1	DEF	$ > 2
4227	1348	27	DSCompiler.java	asin	k	int	0	DEF	$ == 2
4228	1352	16	DSCompiler.java	asin	n	int	0	DEF	($ & 0x1) == 0
4229	1382	8	DSCompiler.java	atan	THIS	DSCompiler	0	DEF	$.order > 0
12283	1396	12	DSCompiler.java	atan	THIS	DSCompiler	0	NIL-FOR	n <= $.order
12283	1396	12	DSCompiler.java	atan	n	int	0	NIL-FOR	$ <= order
12284	1401	16	DSCompiler.java	atan	k	int	0	NIL-FOR	$ >= 0
4230	1403	20	DSCompiler.java	atan	k	int	1	DEF	$ > 2
4231	1405	27	DSCompiler.java	atan	k	int	0	DEF	$ == 2
4232	1409	16	DSCompiler.java	atan	n	int	0	DEF	($ & 0x1) == 0
4233	1446	8	DSCompiler.java	atan2	x	double[]	1	DEF	$[xOffset] >= 0
4233	1446	8	DSCompiler.java	atan2	xOffset	int	1	DEF	x[$] >= 0
12285	1452	12	DSCompiler.java	atan2	THIS	DSCompiler	0	NIL-FOR	i < tmp2.$.length
12285	1452	12	DSCompiler.java	atan2	i	int	0	NIL-FOR	$ < tmp2.length
12285	1452	12	DSCompiler.java	atan2	tmp2	double[]	0	NIL-FOR	i < $.length
12286	1464	12	DSCompiler.java	atan2	THIS	DSCompiler	0	NIL-FOR	i < tmp2.$.length
12286	1464	12	DSCompiler.java	atan2	i	int	0	NIL-FOR	$ < tmp2.length
12286	1464	12	DSCompiler.java	atan2	tmp2	double[]	0	NIL-FOR	i < $.length
4234	1489	8	DSCompiler.java	cosh	THIS	DSCompiler	0	DEF	$.order > 0
12287	1491	12	DSCompiler.java	cosh	THIS	DSCompiler	0	NIL-FOR	i <= $.order
12287	1491	12	DSCompiler.java	cosh	i	int	0	NIL-FOR	$ <= order
4235	1515	8	DSCompiler.java	sinh	THIS	DSCompiler	0	DEF	$.order > 0
12288	1517	12	DSCompiler.java	sinh	THIS	DSCompiler	0	NIL-FOR	i <= $.order
12288	1517	12	DSCompiler.java	sinh	i	int	0	NIL-FOR	$ <= order
4236	1543	8	DSCompiler.java	tanh	THIS	DSCompiler	0	DEF	$.order > 0
12289	1555	12	DSCompiler.java	tanh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
12289	1555	12	DSCompiler.java	tanh	n	int	0	NIL-FOR	$ <= order
12290	1560	16	DSCompiler.java	tanh	k	int	0	NIL-FOR	$ >= 0
4237	1562	20	DSCompiler.java	tanh	k	int	1	DEF	$ > 2
4238	1564	27	DSCompiler.java	tanh	k	int	0	DEF	$ == 2
4239	1568	16	DSCompiler.java	tanh	n	int	0	DEF	($ & 0x1) == 0
4240	1597	8	DSCompiler.java	acosh	THIS	DSCompiler	0	DEF	$.order > 0
12291	1611	12	DSCompiler.java	acosh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
12291	1611	12	DSCompiler.java	acosh	n	int	0	NIL-FOR	$ <= order
12292	1616	16	DSCompiler.java	acosh	k	int	0	NIL-FOR	$ >= 0
4241	1618	20	DSCompiler.java	acosh	k	int	1	DEF	$ > 2
4242	1620	27	DSCompiler.java	acosh	k	int	0	DEF	$ == 2
4243	1624	16	DSCompiler.java	acosh	n	int	0	DEF	($ & 0x1) == 0
4244	1654	8	DSCompiler.java	asinh	THIS	DSCompiler	0	DEF	$.order > 0
12293	1668	12	DSCompiler.java	asinh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
12293	1668	12	DSCompiler.java	asinh	n	int	0	NIL-FOR	$ <= order
12294	1673	16	DSCompiler.java	asinh	k	int	0	NIL-FOR	$ >= 0
4245	1675	20	DSCompiler.java	asinh	k	int	1	DEF	$ > 2
4246	1677	27	DSCompiler.java	asinh	k	int	0	DEF	$ == 2
4247	1681	16	DSCompiler.java	asinh	n	int	0	DEF	($ & 0x1) == 0
4248	1711	8	DSCompiler.java	atanh	THIS	DSCompiler	0	DEF	$.order > 0
12295	1725	12	DSCompiler.java	atanh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
12295	1725	12	DSCompiler.java	atanh	n	int	0	NIL-FOR	$ <= order
12296	1730	16	DSCompiler.java	atanh	k	int	0	NIL-FOR	$ >= 0
4249	1732	20	DSCompiler.java	atanh	k	int	1	DEF	$ > 2
4250	1734	27	DSCompiler.java	atanh	k	int	0	DEF	$ == 2
4251	1738	16	DSCompiler.java	atanh	n	int	0	DEF	($ & 0x1) == 0
12297	1765	8	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	i < $.compIndirection.$.length
12297	1765	8	DSCompiler.java	compose	i	int	0	NIL-FOR	$ < compIndirection.length
12298	1768	12	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	j < mappingI.$.length
12298	1768	12	DSCompiler.java	compose	j	int	0	NIL-FOR	$ < mappingI.length
12298	1768	12	DSCompiler.java	compose	mappingI	int[][]	0	NIL-FOR	j < $.length
12299	1771	16	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	k < mappingIJ.$.length
12299	1771	16	DSCompiler.java	compose	k	int	0	NIL-FOR	$ < mappingIJ.length
12299	1771	16	DSCompiler.java	compose	mappingIJ	int[]	0	NIL-FOR	k < $.length
12300	1790	8	DSCompiler.java	taylor	i	int	0	NIL-FOR	$ >= 0
12301	1793	12	DSCompiler.java	taylor	THIS	DSCompiler	0	NIL-FOR	k < orders.$.length
12301	1793	12	DSCompiler.java	taylor	k	int	0	NIL-FOR	$ < orders.length
12301	1793	12	DSCompiler.java	taylor	orders	int[]	0	NIL-FOR	k < $.length
4252	1794	16	DSCompiler.java	taylor	k	int	0	MathInternalError	orders[$] > 0
4252	1794	16	DSCompiler.java	taylor	orders	int[]	0	MathInternalError	$[k] > 0
4253	1815	8	DSCompiler.java	checkCompatibility	THIS	DSCompiler	0	DimensionMismatchException	$.parameters != compiler.$.parameters
4253	1815	8	DSCompiler.java	checkCompatibility	compiler	DSCompiler	0	DimensionMismatchException	parameters != $.parameters
4254	1818	8	DSCompiler.java	checkCompatibility	THIS	DSCompiler	0	DimensionMismatchException	$.order != compiler.$.order
4254	1818	8	DSCompiler.java	checkCompatibility	compiler	DSCompiler	0	DimensionMismatchException	order != $.order
555	247	8	Decimal64.java	equals	obj	Object	0	RET	$ instanceof Decimal64
556	443	8	Decimal64.java	rootN	THIS	Decimal64	1	RET	$.value < 0
557	603	8	Decimal64.java	linearCombination	THIS	Decimal64	0	DimensionMismatchException	a.$.length != b.$.length
557	603	8	Decimal64.java	linearCombination	a	Decimal64[]	0	DimensionMismatchException	$.length != b.length
557	603	8	Decimal64.java	linearCombination	b	Decimal64[]	0	DimensionMismatchException	a.length != $.length
9950	608	8	Decimal64.java	linearCombination	THIS	Decimal64	0	NIL-FOR	i < a.$.length
9950	608	8	Decimal64.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
9950	608	8	Decimal64.java	linearCombination	a	Decimal64[]	0	NIL-FOR	i < $.length
558	620	8	Decimal64.java	linearCombination	THIS	Decimal64	0	DimensionMismatchException	a.$.length != b.$.length
558	620	8	Decimal64.java	linearCombination	a	double[]	0	DimensionMismatchException	$.length != b.length
558	620	8	Decimal64.java	linearCombination	b	Decimal64[]	0	DimensionMismatchException	a.length != $.length
9951	624	8	Decimal64.java	linearCombination	THIS	Decimal64	0	NIL-FOR	i < a.$.length
9951	624	8	Decimal64.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
9951	624	8	Decimal64.java	linearCombination	a	double[]	0	NIL-FOR	i < $.length
1842	114	8	DefaultIterativeLinearSolverEvent.java	getResidual	THIS	DefaultIterativeLinearSolverEvent	0	RET	$.r != null
529	50	8	DefaultTransformer.java	transform	o	Object	0	NullArgumentException	$ == null
530	54	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
531	69	8	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
531	69	8	DefaultTransformer.java	equals	other	Object	0	RET	this == $
4259	121	8	DerivativeStructure.java	DerivativeStructure	parameters	int	0	NumberIsTooLargeException	index >= $
4259	121	8	DerivativeStructure.java	DerivativeStructure	index	int	0	NumberIsTooLargeException	$ >= parameters
4260	125	8	DerivativeStructure.java	DerivativeStructure	order	int	0	DEF	$ > 0
4261	207	8	DerivativeStructure.java	DerivativeStructure	THIS	DerivativeStructure	0	DimensionMismatchException	derivatives.$.length != $.data.$.length
4261	207	8	DerivativeStructure.java	DerivativeStructure	derivatives	double	0	DimensionMismatchException	$.length != data.length
12305	337	8	DerivativeStructure.java	multiply	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
12305	337	8	DerivativeStructure.java	multiply	i	int	0	NIL-FOR	$ < ds.data.length
12305	337	8	DerivativeStructure.java	multiply	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
12306	360	8	DerivativeStructure.java	divide	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
12306	360	8	DerivativeStructure.java	divide	i	int	0	NIL-FOR	$ < ds.data.length
12306	360	8	DerivativeStructure.java	divide	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
12307	401	8	DerivativeStructure.java	negate	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
12307	401	8	DerivativeStructure.java	negate	i	int	0	NIL-FOR	$ < ds.data.length
12307	401	8	DerivativeStructure.java	negate	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
4262	411	8	DerivativeStructure.java	abs	THIS	DerivativeStructure	1	RET	Double.doubleToLongBits($.data[0]) < 0
4263	466	8	DerivativeStructure.java	copySign	m	long	0	RET	$ < 0
4263	466	8	DerivativeStructure.java	copySign	m	long	0	RET	$ >= 0
4263	466	8	DerivativeStructure.java	copySign	s	long	0	RET	$ < 0
4263	466	8	DerivativeStructure.java	copySign	s	long	0	RET	$ >= 0
4264	478	8	DerivativeStructure.java	copySign	m	long	0	RET	$ < 0
4264	478	8	DerivativeStructure.java	copySign	m	long	0	RET	$ >= 0
4264	478	8	DerivativeStructure.java	copySign	s	long	0	RET	$ >= 0
4264	478	8	DerivativeStructure.java	copySign	s	long	0	RET	$ < 0
12308	501	8	DerivativeStructure.java	scalb	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
12308	501	8	DerivativeStructure.java	scalb	i	int	0	NIL-FOR	$ < ds.data.length
12308	501	8	DerivativeStructure.java	scalb	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
4265	517	8	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isInfinite(y.$.data[0])
4265	517	8	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isInfinite($.data[0])
4265	517	8	DerivativeStructure.java	hypot	y	DerivativeStructure	1	RET	Double.isInfinite($.data[0])
4266	521	15	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isNaN($.data[0])
4266	521	15	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isNaN(y.$.data[0])
4266	521	15	DerivativeStructure.java	hypot	y	DerivativeStructure	1	RET	Double.isNaN($.data[0])
4267	529	12	DerivativeStructure.java	hypot	expX	int	1	RET	$ > expY + 27
4267	529	12	DerivativeStructure.java	hypot	expY	int	1	RET	expX > $ + 27
4268	532	19	DerivativeStructure.java	hypot	expX	int	1	RET	expY > $ + 27
4268	532	19	DerivativeStructure.java	hypot	expY	int	1	RET	$ > expX + 27
4269	588	8	DerivativeStructure.java	compose	THIS	DerivativeStructure	0	DimensionMismatchException	f.$.length != $.getOrder() + 1
4269	588	8	DerivativeStructure.java	compose	f	double	0	DimensionMismatchException	$.length != getOrder() + 1
12309	873	8	DerivativeStructure.java	toDegrees	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
12309	873	8	DerivativeStructure.java	toDegrees	i	int	0	NIL-FOR	$ < ds.data.length
12309	873	8	DerivativeStructure.java	toDegrees	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
12310	884	8	DerivativeStructure.java	toRadians	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
12310	884	8	DerivativeStructure.java	toRadians	i	int	0	NIL-FOR	$ < ds.data.length
12310	884	8	DerivativeStructure.java	toRadians	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
12311	909	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < a.$.length
12311	909	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
12311	909	8	DerivativeStructure.java	linearCombination	a	DerivativeStructure[]	0	NIL-FOR	i < $.length
12312	913	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < b.$.length
12312	913	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < b.length
12312	913	8	DerivativeStructure.java	linearCombination	b	DerivativeStructure[]	0	NIL-FOR	i < $.length
12313	920	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < a.$.length
12313	920	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
12313	920	8	DerivativeStructure.java	linearCombination	a	DerivativeStructure[]	0	NIL-FOR	i < $.length
12314	941	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < b.$.length
12314	941	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < b.length
12314	941	8	DerivativeStructure.java	linearCombination	b	DerivativeStructure[]	0	NIL-FOR	i < $.length
12315	948	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < a.$.length
12315	948	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
12315	948	8	DerivativeStructure.java	linearCombination	a	double[]	0	NIL-FOR	i < $.length
4270	1122	8	DerivativeStructure.java	equals	THIS	DerivativeStructure	0	RET	$ == other
4270	1122	8	DerivativeStructure.java	equals	other	Object	0	RET	this == $
4271	1126	8	DerivativeStructure.java	equals	other	Object	0	RET	$ instanceof DerivativeStructure
2357	140	8	DescriptiveStatistics.java	DescriptiveStatistics	initialDoubleArray	double[]	0	DEF	$ != null
2358	165	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
2359	166	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
2360	168	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
2361	252	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
2362	253	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
2363	356	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ < 1
2363	356	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ != INFINITE_WINDOW
2364	366	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
2364	366	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
2364	366	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
2365	427	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
3657	219	8	Dfp.java	Dfp	x	long	0	DEF	$ == Long.MIN_VALUE
3658	227	8	Dfp.java	Dfp	x	long	1	DEF	$ < 0
12043	235	8	Dfp.java	Dfp	x	long	0	NIL-WHILE	$ != 0
3659	242	8	Dfp.java	Dfp	isLongMin	boolean	0	DEF	$
12044	245	12	Dfp.java	Dfp	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
12044	245	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < mant.length - 1
3660	246	16	Dfp.java	Dfp	THIS	Dfp	0	DEF	$.mant[i] != 0
3660	246	16	Dfp.java	Dfp	i	int	0	DEF	mant[$] != 0
3661	271	8	Dfp.java	Dfp	exponent	int	0	RET	$ == -1023
3662	273	12	Dfp.java	Dfp	x	double	0	RET	$ == 0
3663	275	16	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
12045	284	12	Dfp.java	Dfp	mantissa	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
3664	291	8	Dfp.java	Dfp	exponent	int	0	RET	$ == 1024
3665	293	12	Dfp.java	Dfp	x	double	1	DEF	$ != $
3666	296	19	Dfp.java	Dfp	x	double	1	DEF	$ < 0
3667	310	8	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
3668	351	8	Dfp.java	Dfp	s	String	0	RET	$.equals(POS_INFINITY_STRING)
3669	357	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NEG_INFINITY_STRING)
3670	363	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NAN_STRING)
3671	371	8	Dfp.java	Dfp	p	int	0	DEF	$ == -1
3672	377	8	Dfp.java	Dfp	p	int	1	DEF	$ != -1
12046	383	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$<fpexp.length()
12046	383	12	Dfp.java	Dfp	fpexp	String	0	NIL-FOR	i<$.length()
3673	385	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) == '-'
3673	385	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) == '-'
3674	390	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) <= '9'
3674	390	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) >= '0'
3674	390	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) <= '9'
3674	390	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) >= '0'
3675	395	12	Dfp.java	Dfp	negative	boolean	0	DEF	$
3676	404	8	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.indexOf("-") != -1
3677	414	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) <= '9'
3677	414	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) >= '1'
3677	414	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) <= '9'
3677	414	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) >= '1'
3678	418	12	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
3678	418	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '0'
3678	418	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '0'
3679	422	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
3679	422	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
3680	428	12	Dfp.java	Dfp	p	int	0	DEF	$ == fpdecimal.length()
3680	428	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == $.length()
3681	441	12	Dfp.java	Dfp	p	int	0	DEF	$ == (fpdecimal.length())
3681	441	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == ($.length())
3682	446	12	Dfp.java	Dfp	THIS	Dfp	0	DEF	q == $.mant.$.length*rsize+offset+1
3682	446	12	Dfp.java	Dfp	rsize	int	0	DEF	q == mant.length*$+offset+1
3682	446	12	Dfp.java	Dfp	offset	int	0	DEF	q == mant.length*rsize+$+1
3682	446	12	Dfp.java	Dfp	q	int	0	DEF	$ == mant.length*rsize+offset+1
3683	450	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
3683	450	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
3684	457	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) > '9'
3684	457	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) < '0'
3684	457	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) > '9'
3684	457	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) < '0'
3685	470	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
3685	470	8	Dfp.java	Dfp	offset	int	0	DEF	q != $
3685	470	8	Dfp.java	Dfp	q	int	0	DEF	$ != offset
3686	473	16	Dfp.java	Dfp	offset	int	0	DEF	q == $
3686	473	16	Dfp.java	Dfp	q	int	0	DEF	$ == offset
3687	476	16	Dfp.java	Dfp	striped	char[]	1	DEF	$[q] == '0'
3687	476	16	Dfp.java	Dfp	q	int	1	DEF	striped[$] == '0'
3688	485	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
3688	485	8	Dfp.java	Dfp	significantDigits	int	0	DEF	$ == 0
3689	490	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
12047	498	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	$ > q
12047	498	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	p > $
3690	499	12	Dfp.java	Dfp	striped	char[]	0	DEF	$[p] != '0'
3690	499	12	Dfp.java	Dfp	p	int	0	DEF	striped[$] != '0'
12048	511	8	Dfp.java	Dfp	THIS	Dfp	0	NIL-WHILE	(p - q) < ($.mant.$.length * rsize)
12048	511	8	Dfp.java	Dfp	rsize	int	0	NIL-WHILE	(p - q) < (mant.length * $)
12048	511	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	($ - q) < (mant.length * rsize)
12048	511	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	(p - $) < (mant.length * rsize)
12049	512	12	Dfp.java	Dfp	rsize	int	0	NIL-FOR	i < $
12049	512	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < rsize
12050	519	8	Dfp.java	Dfp	i	int	0	NIL-FOR	$ >= 0
3691	530	8	Dfp.java	Dfp	THIS	Dfp	0	DEF	q < striped.$.length
3691	530	8	Dfp.java	Dfp	striped	char[]	0	DEF	q < $.length
3691	530	8	Dfp.java	Dfp	q	int	0	DEF	$ < striped.length
3692	599	8	Dfp.java	newInstance	THIS	Dfp	0	RET	$.field.getRadixDigits() != d.$.field.getRadixDigits()
3692	599	8	Dfp.java	newInstance	d	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
12051	671	8	Dfp.java	shiftLeft	i	int	0	NIL-FOR	$ > 0
12052	683	8	Dfp.java	shiftRight	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
12052	683	8	Dfp.java	shiftRight	i	int	0	NIL-FOR	$ < mant.length - 1
3693	705	8	Dfp.java	align	adiff	int	0	DEF	$ < 0
3694	709	8	Dfp.java	align	diff	int	0	RET	$ == 0
3695	713	8	Dfp.java	align	THIS	Dfp	0	RET	adiff > ($.mant.$.length + 1)
3695	713	8	Dfp.java	align	adiff	int	0	RET	$ > (mant.length + 1)
12053	724	8	Dfp.java	align	i	int	0	NIL-FOR	$ < adiff
12053	724	8	Dfp.java	align	adiff	int	0	NIL-FOR	i < $
3696	725	12	Dfp.java	align	diff	int	1	DEF	$ < 0
3697	730	16	Dfp.java	align	lostdigit	int	0	DEF	$ != 0
3698	742	8	Dfp.java	align	inexact	boolean	0	DEF	$
3699	758	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3699	758	8	Dfp.java	lessThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3700	767	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.isNaN()
3700	767	8	Dfp.java	lessThan	x	Dfp	0	RET	$.isNaN()
3701	783	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3701	783	8	Dfp.java	greaterThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3702	792	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.isNaN()
3702	792	8	Dfp.java	greaterThan	x	Dfp	0	RET	$.isNaN()
3703	806	8	Dfp.java	negativeOrNull	THIS	Dfp	0	RET	$.isNaN()
3704	821	8	Dfp.java	strictlyNegative	THIS	Dfp	0	RET	$.isNaN()
3705	836	8	Dfp.java	positiveOrNull	THIS	Dfp	0	RET	$.isNaN()
3706	851	8	Dfp.java	strictlyPositive	THIS	Dfp	0	RET	$.isNaN()
3707	890	8	Dfp.java	isZero	THIS	Dfp	0	RET	$.isNaN()
3708	907	8	Dfp.java	equals	other	Object	0	RET	$ instanceof Dfp
3709	909	12	Dfp.java	equals	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3709	909	12	Dfp.java	equals	THIS	Dfp	0	RET	$.isNaN()
3709	909	12	Dfp.java	equals	x	Dfp	0	RET	$.isNaN()
3709	909	12	Dfp.java	equals	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3710	934	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.isNaN()
3710	934	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3710	934	8	Dfp.java	unequal	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3710	934	8	Dfp.java	unequal	x	Dfp	0	RET	$.isNaN()
3711	949	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length - 1] == 0
3711	949	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
3711	949	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[a.$.mant.$.length - 1] == 0
3711	949	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
3711	949	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
3711	949	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
3711	949	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
3711	949	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
3712	954	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.sign != b.$.sign
3712	954	8	Dfp.java	compare	a	Dfp	0	RET	$.sign != b.sign
3712	954	8	Dfp.java	compare	b	Dfp	0	RET	a.sign != $.sign
3713	955	12	Dfp.java	compare	THIS	Dfp	1	RET	a.$.sign == -1
3713	955	12	Dfp.java	compare	a	Dfp	1	RET	$.sign == -1
3714	963	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
3714	963	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
3714	963	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
3714	963	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
3715	967	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
3715	967	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
3715	967	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
3715	967	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
3716	971	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
3716	971	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
3716	971	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
3716	971	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
3717	976	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length-1] != 0
3717	976	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[b.$.mant.$.length-1] != 0
3717	976	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[b.mant.length-1] != 0
3717	976	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length-1] != 0
3717	976	8	Dfp.java	compare	b	Dfp	0	RET	a.mant[$.mant.length-1] != 0
3718	977	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp < b.$.exp
3718	977	12	Dfp.java	compare	a	Dfp	0	RET	$.exp < b.exp
3718	977	12	Dfp.java	compare	b	Dfp	0	RET	a.exp < $.exp
3719	981	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp > b.$.exp
3719	981	12	Dfp.java	compare	a	Dfp	0	RET	$.exp > b.exp
3719	981	12	Dfp.java	compare	b	Dfp	0	RET	a.exp > $.exp
12054	987	8	Dfp.java	compare	i	int	0	NIL-FOR	$ >= 0
3720	988	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] > b.$.mant[i]
3720	988	12	Dfp.java	compare	i	int	0	RET	a.mant[$] > b.mant[$]
3720	988	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] > b.mant[i]
3720	988	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] > $.mant[i]
3721	992	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] < b.$.mant[i]
3721	992	12	Dfp.java	compare	i	int	0	RET	a.mant[$] < b.mant[$]
3721	992	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] < b.mant[i]
3721	992	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] < $.mant[i]
3722	1039	8	Dfp.java	remainder	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3722	1039	8	Dfp.java	remainder	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3723	1054	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.isNaN()
3724	1058	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.nans == INFINITE
3725	1062	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3726	1069	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp < 0
3727	1080	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp >= $.mant.$.length
12055	1088	8	Dfp.java	trunc	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length-result.$.exp
12055	1088	8	Dfp.java	trunc	i	int	0	NIL-FOR	$ < mant.length-result.exp
12055	1088	8	Dfp.java	trunc	result	Dfp	0	NIL-FOR	i < mant.length-$.exp
3728	1093	8	Dfp.java	trunc	changed	boolean	0	RET	$
3729	1096	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == -1
3729	1096	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == -1
3730	1103	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == 1
3730	1103	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == 1
3731	1114	20	Dfp.java	trunc	half	Dfp	0	DEF	a.greaterThan($)
3731	1114	20	Dfp.java	trunc	a	Dfp	0	DEF	$.greaterThan(half)
3732	1121	20	Dfp.java	trunc	THIS	Dfp	0	DEF	(result.$.mant[$.mant.$.length-result.$.exp]&1) != 0
3732	1121	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.exp > 0
3732	1121	20	Dfp.java	trunc	half	Dfp	0	DEF	a.equals($)
3732	1121	20	Dfp.java	trunc	a	Dfp	0	DEF	$.equals(half)
3732	1121	20	Dfp.java	trunc	result	Dfp	0	DEF	($.mant[mant.length-$.exp]&1) != 0
3732	1121	20	Dfp.java	trunc	result	Dfp	0	DEF	$.exp > 0
3733	1147	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.greaterThan($.newInstance(2147483647))
3733	1147	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.greaterThan(newInstance(2147483647))
3734	1151	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.lessThan($.newInstance(-2147483648))
3734	1151	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.lessThan(newInstance(-2147483648))
12056	1155	8	Dfp.java	intValue	THIS	Dfp	0	NIL-FOR	i >= $.mant.$.length - rounded.$.exp
12056	1155	8	Dfp.java	intValue	i	int	0	NIL-FOR	$ >= mant.length - rounded.exp
12056	1155	8	Dfp.java	intValue	rounded	Dfp	0	NIL-FOR	i >= mant.length - $.exp
3735	1159	8	Dfp.java	intValue	THIS	Dfp	0	DEF	rounded.$.sign == -1
3735	1159	8	Dfp.java	intValue	rounded	Dfp	0	DEF	$.sign == -1
3736	1190	8	Dfp.java	intLog10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 1000
3737	1193	8	Dfp.java	intLog10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 100
3738	1196	8	Dfp.java	intLog10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 10
3739	1209	8	Dfp.java	power10	e	int	1	DEF	$ >= 0
12057	1240	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
12057	1240	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
12058	1246	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
12058	1246	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
3740	1262	8	Dfp.java	add	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3740	1262	8	Dfp.java	add	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3741	1270	8	Dfp.java	add	THIS	Dfp	0	RET	$.nans != FINITE
3741	1270	8	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans != FINITE
3741	1270	8	Dfp.java	add	x	Dfp	0	RET	$.nans != FINITE
3742	1271	12	Dfp.java	add	THIS	Dfp	0	RET	$.isNaN()
3743	1275	12	Dfp.java	add	x	Dfp	0	RET	$.isNaN()
3744	1279	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == FINITE
3744	1279	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
3744	1279	12	Dfp.java	add	x	Dfp	0	RET	$.nans == FINITE
3745	1283	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
3745	1283	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == FINITE
3745	1283	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
3746	1287	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
3746	1287	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
3746	1287	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign == x.$.sign
3746	1287	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
3746	1287	12	Dfp.java	add	x	Dfp	0	RET	sign == $.sign
3747	1291	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
3747	1291	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
3747	1291	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign != x.$.sign
3747	1291	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
3747	1291	12	Dfp.java	add	x	Dfp	0	RET	sign != $.sign
3748	1316	8	Dfp.java	add	THIS	Dfp	0	DEF	$.compare(a, b) > 0
3748	1316	8	Dfp.java	add	a	Dfp	0	DEF	compare($, b) > 0
3748	1316	8	Dfp.java	add	b	Dfp	0	DEF	compare(a, $) > 0
3749	1323	8	Dfp.java	add	THIS	Dfp	0	DEF	b.$.mant[$.mant.$.length-1] == 0
3749	1323	8	Dfp.java	add	b	Dfp	0	DEF	$.mant[mant.length-1] == 0
3750	1327	8	Dfp.java	add	THIS	Dfp	0	DEF	a.$.mant[$.mant.$.length-1] == 0
3750	1327	8	Dfp.java	add	a	Dfp	0	DEF	$.mant[mant.length-1] == 0
3751	1334	8	Dfp.java	add	THIS	Dfp	1	DEF	a.$.exp < b.$.exp
3751	1334	8	Dfp.java	add	a	Dfp	1	DEF	$.exp < b.exp
3751	1334	8	Dfp.java	add	b	Dfp	1	DEF	a.exp < $.exp
3752	1341	8	Dfp.java	add	asign	byte	0	DEF	$ != bsign
3752	1341	8	Dfp.java	add	bsign	byte	0	DEF	asign != $
3753	1342	12	Dfp.java	add	asign	byte	1	DEF	$ == rsign
3753	1342	12	Dfp.java	add	rsign	byte	1	DEF	asign == $
12059	1351	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
12059	1351	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
3754	1362	8	Dfp.java	add	asign	byte	0	DEF	$ == bsign
3754	1362	8	Dfp.java	add	bsign	byte	0	DEF	asign == $
3754	1362	8	Dfp.java	add	rh	int	0	DEF	$ != 0
3755	1367	12	Dfp.java	add	excp	int	0	DEF	$ != 0
12060	1373	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
12060	1373	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
3756	1374	12	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] != 0
3756	1374	12	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] != 0
3757	1378	12	Dfp.java	add	i	int	0	DEF	$ == 0
3758	1386	8	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3758	1386	8	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3759	1389	12	Dfp.java	add	asign	byte	0	DEF	$ != bsign
3759	1389	12	Dfp.java	add	bsign	byte	0	DEF	asign != $
3760	1397	8	Dfp.java	add	excp	int	0	DEF	$ != 0
3761	1462	8	Dfp.java	round	inc	boolean	0	DEF	$
12061	1465	12	Dfp.java	round	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
12061	1465	12	Dfp.java	round	i	int	0	NIL-FOR	$ < mant.length
3762	1471	12	Dfp.java	round	rh	int	0	DEF	$ != 0
3763	1478	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp < MIN_EXP
3764	1484	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp > MAX_EXP
3765	1490	8	Dfp.java	round	n	int	0	RET	$ != 0
3766	1507	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3766	1507	8	Dfp.java	multiply	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3767	1517	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
3767	1517	8	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans != FINITE
3767	1517	8	Dfp.java	multiply	x	Dfp	0	RET	$.nans != FINITE
3768	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
3769	1522	12	Dfp.java	multiply	x	Dfp	0	RET	$.isNaN()
3770	1526	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
3770	1526	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
3770	1526	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] != 0
3770	1526	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
3770	1526	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] != 0
3771	1532	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
3771	1532	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] != 0
3771	1532	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
3771	1532	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
3772	1538	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
3772	1538	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
3772	1538	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
3773	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
3773	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3773	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] == 0
3773	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
3773	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
3773	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
3773	1544	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
3773	1544	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] == 0
3773	1544	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
12062	1556	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
12062	1556	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
12063	1558	12	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	j<$.mant.$.length
12063	1558	12	Dfp.java	multiply	j	int	0	NIL-FOR	$<mant.length
12064	1570	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ >= 0
3774	1571	12	Dfp.java	multiply	i	int	0	DEF	product[$] != 0
3774	1571	12	Dfp.java	multiply	product	int[]	0	DEF	$[i] != 0
12065	1578	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
12065	1578	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
3775	1586	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3775	1586	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3776	1592	8	Dfp.java	multiply	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
3776	1592	8	Dfp.java	multiply	md	int	1	DEF	$ > (mant.length-1)
3777	1598	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
3778	1611	8	Dfp.java	multiply	x	int	1	RET	$ >= 0
3778	1611	8	Dfp.java	multiply	x	int	1	RET	$ < RADIX
3779	1627	8	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans != FINITE
3780	1628	12	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.isNaN()
3781	1632	12	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans == INFINITE
3781	1632	12	Dfp.java	multiplyFast	x	int	0	RET	$ != 0
3782	1637	12	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans == INFINITE
3782	1637	12	Dfp.java	multiplyFast	x	int	0	RET	$ == 0
3783	1647	8	Dfp.java	multiplyFast	x	int	0	RET	$ >= RADIX
3783	1647	8	Dfp.java	multiplyFast	x	int	0	RET	$ < 0
12066	1656	8	Dfp.java	multiplyFast	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
12066	1656	8	Dfp.java	multiplyFast	i	int	0	NIL-FOR	$ < mant.length
3784	1663	8	Dfp.java	multiplyFast	rh	int	0	DEF	$ != 0
3785	1669	8	Dfp.java	multiplyFast	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3785	1669	8	Dfp.java	multiplyFast	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3786	1674	8	Dfp.java	multiplyFast	excp	int	0	DEF	$ != 0
3787	1698	8	Dfp.java	divide	THIS	Dfp	0	RET	$.field.getRadixDigits() != divisor.$.field.getRadixDigits()
3787	1698	8	Dfp.java	divide	divisor	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3788	1708	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans != FINITE
3788	1708	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
3788	1708	8	Dfp.java	divide	divisor	Dfp	0	RET	$.nans != FINITE
3789	1709	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
3790	1713	12	Dfp.java	divide	divisor	Dfp	0	RET	$.isNaN()
3791	1717	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3791	1717	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == FINITE
3791	1717	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == FINITE
3792	1723	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
3792	1723	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == FINITE
3792	1723	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
3793	1729	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3793	1729	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
3793	1729	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
3794	1739	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.mant[$.mant.$.length-1] == 0
3794	1739	8	Dfp.java	divide	divisor	Dfp	0	RET	$.mant[mant.length-1] == 0
12067	1762	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
12067	1762	8	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
12068	1770	8	Dfp.java	divide	qd	int	0	NIL-FOR	$ >= 0
12069	1779	12	Dfp.java	divide	trialgood	boolean	0	NIL-WHILE	$
12070	1785	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
12070	1785	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
12071	1794	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
12071	1794	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
3795	1801	16	Dfp.java	divide	rh	int	0	DEF	$ == 0
3796	1811	16	Dfp.java	divide	minadj	int	0	DEF	$ >= 2
12072	1819	16	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3797	1820	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] > remainder[i]
3797	1820	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] > remainder[$]
3797	1820	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] > $[i]
3797	1820	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] > remainder[i]
3798	1823	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] < remainder[i]
3798	1823	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] < remainder[$]
3798	1823	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] < $[i]
3798	1823	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] < remainder[i]
3799	1828	16	Dfp.java	divide	THIS	Dfp	0	DEF	remainder[$.mant.$.length] != 0
3799	1828	16	Dfp.java	divide	remainder	int[]	0	DEF	$[mant.length] != 0
3800	1832	16	Dfp.java	divide	trialgood	boolean	0	DEF	$ == false
3801	1839	12	Dfp.java	divide	nsqd	int	0	DEF	$ != 0
3801	1839	12	Dfp.java	divide	trial	int	0	DEF	$ != 0
3802	1843	12	Dfp.java	divide	THIS	Dfp	0	DEF	$.field.getRoundingMode() == DfpField.$.RoundingMode.ROUND_DOWN
3802	1843	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd == $.mant.$.length
3802	1843	12	Dfp.java	divide	nsqd	int	0	DEF	$ == mant.length
3803	1848	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd > $.mant.$.length
3803	1848	12	Dfp.java	divide	nsqd	int	0	DEF	$ > mant.length
12073	1855	12	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
12073	1855	12	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
12074	1862	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3804	1863	12	Dfp.java	divide	i	int	0	DEF	quotient[$] != 0
3804	1863	12	Dfp.java	divide	quotient	int[]	0	DEF	$[i] != 0
12075	1870	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i<$.mant.$.length
12075	1870	8	Dfp.java	divide	i	int	0	NIL-FOR	$<mant.length
3805	1878	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3805	1878	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3806	1882	8	Dfp.java	divide	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
3806	1882	8	Dfp.java	divide	md	int	1	DEF	$ > (mant.length-1)
3807	1888	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
3808	1903	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
3809	1904	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
3810	1908	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3811	1914	8	Dfp.java	divide	divisor	int	0	RET	$ == 0
3812	1924	8	Dfp.java	divide	divisor	int	0	RET	$ < 0
3812	1924	8	Dfp.java	divide	divisor	int	0	RET	$ >= RADIX
12076	1935	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3813	1942	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3813	1942	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3814	1952	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
3815	1972	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == FINITE
3815	1972	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3816	1977	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans != FINITE
3817	1978	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == 1
3817	1978	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == INFINITE
3818	1983	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == QNAN
3819	1987	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == SNAN
3820	1997	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == -1
3821	2011	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp > 1
3821	2011	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp < -1
3821	2011	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp > 1
3821	2011	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp < -1
12077	2037	8	Dfp.java	sqrt	x	Dfp	0	NIL-WHILE	$.unequal(px)
12077	2037	8	Dfp.java	sqrt	px	Dfp	0	NIL-WHILE	x.unequal($)
3822	2046	12	Dfp.java	sqrt	x	Dfp	0	DEF	$.equals(ppx)
3822	2046	12	Dfp.java	sqrt	ppx	Dfp	0	DEF	x.equals($)
3823	2053	12	Dfp.java	sqrt	THIS	Dfp	0	DEF	dx.$.mant[$.mant.$.length-1] == 0
3823	2053	12	Dfp.java	sqrt	dx	Dfp	0	DEF	$.mant[mant.length-1] == 0
3824	2067	8	Dfp.java	toString	THIS	Dfp	0	RET	$.nans != FINITE
3825	2069	12	Dfp.java	toString	THIS	Dfp	1	RET	$.nans == INFINITE
3826	2076	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp > $.mant.$.length
3826	2076	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp < -1
12078	2098	8	Dfp.java	dfp2sci	i	int	0	NIL-FOR	$ >= 0
12079	2106	8	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-FOR	p < rawdigits.$.length
12079	2106	8	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-FOR	p < $.length
12079	2106	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ < rawdigits.length
3827	2107	12	Dfp.java	dfp2sci	rawdigits	char[]	0	DEF	$[p] != '0'
3827	2107	12	Dfp.java	dfp2sci	p	int	0	DEF	rawdigits[$] != '0'
3828	2115	8	Dfp.java	dfp2sci	THIS	Dfp	0	DEF	$.sign == -1
3829	2119	8	Dfp.java	dfp2sci	THIS	Dfp	1	DEF	p != rawdigits.$.length
3829	2119	8	Dfp.java	dfp2sci	rawdigits	char[]	1	DEF	p != $.length
3829	2119	8	Dfp.java	dfp2sci	p	int	1	DEF	$ != rawdigits.length
12080	2124	12	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-WHILE	p<rawdigits.$.length
12080	2124	12	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-WHILE	p<$.length
12080	2124	12	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$<rawdigits.length
3830	2142	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
12081	2147	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ > ae
12081	2147	8	Dfp.java	dfp2sci	ae	int	0	NIL-FOR	p > $
3831	2151	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
12082	2155	8	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$ > 0
3832	2177	8	Dfp.java	dfp2string	e	int	0	DEF	$ <= 0
12083	2183	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ < 0
12084	2191	8	Dfp.java	dfp2string	i	int	0	NIL-FOR	$ >= 0
3833	2196	12	Dfp.java	dfp2string	e	int	0	DEF	--$ == 0
12085	2202	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ > 0
3834	2210	8	Dfp.java	dfp2string	pointInserted	boolean	0	DEF	$
12086	2217	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[q] == '0'
12086	2217	8	Dfp.java	dfp2string	q	int	0	NIL-WHILE	buffer[$] == '0'
3835	2220	8	Dfp.java	dfp2string	buffer	char[]	0	DEF	$[q] == '.'
3835	2220	8	Dfp.java	dfp2string	q	int	0	DEF	buffer[$] == '.'
12087	2225	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[p-1] == '0'
12087	2225	8	Dfp.java	dfp2string	p	int	0	NIL-WHILE	buffer[$-1] == '0'
3836	2230	8	Dfp.java	dfp2string	THIS	Dfp	0	DEF	$.sign < 0
3837	2256	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] != 0
3837	2256	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
3838	2263	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] == 0
3838	2263	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
3839	2269	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == QNAN
3839	2269	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
3840	2274	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == SNAN
3840	2274	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
3841	2281	16	Dfp.java	dotrap	THIS	Dfp	1	DEF	(result.$.exp+$.mant.$.length) < MIN_EXP
3841	2281	16	Dfp.java	dotrap	result	Dfp	1	DEF	($.exp+mant.length) < MIN_EXP
3842	2346	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3842	2346	8	Dfp.java	nextAfter	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3843	2355	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan(x)
3843	2355	8	Dfp.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
3844	2359	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.compare(this, x) == 0
3844	2359	8	Dfp.java	nextAfter	x	Dfp	0	RET	compare(this, $) == 0
3845	2363	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan($.getZero())
3846	2369	8	Dfp.java	nextAfter	up	boolean	1	DEF	$
3847	2374	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
3848	2384	12	Dfp.java	nextAfter	THIS	Dfp	1	DEF	$.equals(inc)
3848	2384	12	Dfp.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
3849	2390	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
3850	2397	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.classify() != INFINITE
3850	2397	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
3851	2402	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	result.equals($.getZero())
3851	2402	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero()) == false
3851	2402	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
3852	2417	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isInfinite()
3853	2418	12	Dfp.java	toDouble	THIS	Dfp	1	RET	$.lessThan($.getZero())
3854	2425	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isNaN()
3855	2432	8	Dfp.java	toDouble	cmp0	int	1	RET	$ == 0
3856	2434	15	Dfp.java	toDouble	cmp0	int	0	DEF	$ < 0
3857	2442	8	Dfp.java	toDouble	exponent	int	0	DEF	$ < 0
12088	2447	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.equals($)
12088	2447	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.lessThan($)
12088	2447	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.equals(y)
12088	2447	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.lessThan(y)
3858	2456	8	Dfp.java	toDouble	exponent	int	0	DEF	$ > -1023
3859	2460	8	Dfp.java	toDouble	exponent	int	0	RET	$ < -1074
3860	2464	8	Dfp.java	toDouble	exponent	int	0	RET	$ > 1023
3861	2474	8	Dfp.java	toDouble	mantissa	long	0	DEF	$ == 4503599627370496L
3862	2481	8	Dfp.java	toDouble	exponent	int	0	DEF	$ <= -1023
12089	2485	8	Dfp.java	toDouble	exponent	int	0	NIL-WHILE	$ < -1023
3863	2493	8	Dfp.java	toDouble	negate	boolean	0	DEF	$
3864	2568	8	Dfp.java	signum	THIS	Dfp	1	RET	$.isNaN()
3864	2568	8	Dfp.java	signum	THIS	Dfp	1	RET	$.isZero()
3865	2579	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign < 0
3865	2579	8	Dfp.java	copySign	THIS	Dfp	0	RET	s.$.sign >= 0
3865	2579	8	Dfp.java	copySign	THIS	Dfp	0	RET	s.$.sign < 0
3865	2579	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign >= 0
3865	2579	8	Dfp.java	copySign	s	Dfp	0	RET	$.sign >= 0
3865	2579	8	Dfp.java	copySign	s	Dfp	0	RET	$.sign < 0
3866	2590	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign >= 0
3866	2590	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign < 0
3866	2590	8	Dfp.java	copySign	sb	long	0	RET	$ >= 0
3866	2590	8	Dfp.java	copySign	sb	long	0	RET	$ < 0
3867	2745	8	Dfp.java	atan2	THIS	Dfp	1	RET	x.$.sign >= 0
3867	2745	8	Dfp.java	atan2	x	Dfp	1	RET	$.sign >= 0
3868	2810	8	Dfp.java	linearCombination	THIS	Dfp	0	DimensionMismatchException	a.$.length != b.$.length
3868	2810	8	Dfp.java	linearCombination	a	Dfp[]	0	DimensionMismatchException	$.length != b.length
3868	2810	8	Dfp.java	linearCombination	b	Dfp[]	0	DimensionMismatchException	a.length != $.length
12090	2814	8	Dfp.java	linearCombination	THIS	Dfp	0	NIL-FOR	i < a.$.length
12090	2814	8	Dfp.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
12090	2814	8	Dfp.java	linearCombination	a	Dfp[]	0	NIL-FOR	i < $.length
3869	2825	8	Dfp.java	linearCombination	THIS	Dfp	0	DimensionMismatchException	a.$.length != b.$.length
3869	2825	8	Dfp.java	linearCombination	a	double[]	0	DimensionMismatchException	$.length != b.length
3869	2825	8	Dfp.java	linearCombination	b	Dfp[]	0	DimensionMismatchException	a.length != $.length
12091	2829	8	Dfp.java	linearCombination	THIS	Dfp	0	NIL-FOR	i < a.$.length
12091	2829	8	Dfp.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
12091	2829	8	Dfp.java	linearCombination	a	double[]	0	NIL-FOR	i < $.length
3636	131	8	DfpDec.java	newInstance	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != d.getField().getRadixDigits()
3636	131	8	DfpDec.java	newInstance	d	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
3637	168	8	DfpDec.java	round	msb	int	0	RET	$ == 0
12039	175	8	DfpDec.java	round	msb	int	0	NIL-WHILE	lsbthreshold > $
12039	175	8	DfpDec.java	round	lsbthreshold	int	0	NIL-WHILE	$ > msb
12040	186	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsbshift % 4
12040	186	8	DfpDec.java	round	lsbshift	int	0	NIL-FOR	i < $ % 4
3638	192	8	DfpDec.java	round	THIS	DfpDec	0	RET	digits == 4 * $.mant.$.length - 3
3638	192	8	DfpDec.java	round	lsbthreshold	int	0	RET	$ <= 1
3638	192	8	DfpDec.java	round	digits	int	0	RET	$ == 4 * mant.length - 3
3639	198	8	DfpDec.java	round	lsbthreshold	int	1	DEF	$ == 1
12041	208	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsd
12041	208	8	DfpDec.java	round	lsd	int	0	NIL-FOR	i < $
3640	255	8	DfpDec.java	round	inc	boolean	0	DEF	$
12042	258	12	DfpDec.java	round	THIS	DfpDec	0	NIL-FOR	i < $.mant.$.length
12042	258	12	DfpDec.java	round	i	int	0	NIL-FOR	$ < mant.length
3641	264	12	DfpDec.java	round	rh	int	0	DEF	$ != 0
3642	271	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp < MIN_EXP
3643	277	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp > MAX_EXP
3644	283	8	DfpDec.java	round	discarded	int	0	RET	$ != 0
3644	283	8	DfpDec.java	round	n	int	0	RET	$ != 0
3645	298	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != x.getField().getRadixDigits()
3645	298	8	DfpDec.java	nextAfter	x	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
3646	310	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan(x)
3646	310	8	DfpDec.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
3647	314	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.equals(x)
3647	314	8	DfpDec.java	nextAfter	x	Dfp	0	RET	equals($)
3648	318	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan($.getZero())
3649	322	8	DfpDec.java	nextAfter	up	boolean	1	DEF	$
3650	326	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
3651	330	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
3651	330	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
3652	339	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	$.equals(inc)
3652	339	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
3653	345	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
3654	349	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
3654	349	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
3655	356	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.classify() != INFINITE
3655	356	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
3656	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero()) == false
3656	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	result.equals($.getZero())
3656	361	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
3870	200	8	DfpField.java	DfpField	computeConstants	boolean	1	DEF	$
12092	537	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
12092	537	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
12092	537	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
3871	540	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3871	540	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '1'
3871	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
3871	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '1'
3872	544	8	DfpField.java	split	i	int	0	DEF	buf[$] == '.'
3872	544	8	DfpField.java	split	buf	char[]	0	DEF	$[i] == '.'
3873	549	8	DfpField.java	split	THIS	DfpField	0	DEF	sig == ($.radixDigits / 2) * 4
3873	549	8	DfpField.java	split	sig	int	0	DEF	$ == (radixDigits / 2) * 4
3874	554	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
3874	554	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3874	554	8	DfpField.java	split	leading	boolean	0	DEF	$
3874	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
3874	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
12093	561	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
12093	561	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
12093	561	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
3875	563	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
3875	563	8	DfpField.java	split	i	int	0	DEF	$ < sp
3875	563	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3875	563	8	DfpField.java	split	sp	int	0	DEF	i < $
3875	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
3875	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
3876	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String.length() < highPrecisionDecimalDigits - 3
3876	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String == null
3876	578	8	DfpField.java	computeStringConstants	highPrecisionDecimalDigits	int	0	DEF	sqr2String.length() < $ - 3
12094	623	8	DfpField.java	computePi	i	int	0	NIL-FOR	$ < 20
3877	637	12	DfpField.java	computePi	ykM1	Dfp	0	DEF	yk.equals($)
3877	637	12	DfpField.java	computePi	yk	Dfp	0	DEF	$.equals(ykM1)
12095	659	8	DfpField.java	computeExp	i	int	0	NIL-FOR	$ < 10000
3878	664	12	DfpField.java	computeExp	y	Dfp	0	DEF	$.equals(py)
3878	664	12	DfpField.java	computeExp	py	Dfp	0	DEF	y.equals($)
12096	742	8	DfpField.java	computeLn	i	int	0	NIL-FOR	$ < 10000
3879	748	12	DfpField.java	computeLn	y	Dfp	0	DEF	$.equals(py)
3879	748	12	DfpField.java	computeLn	py	Dfp	0	DEF	y.equals($)
12101	54	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
12101	54	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
12101	54	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
3897	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3897	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '1'
3897	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3897	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '1'
3898	61	12	DfpMath.java	split	i	int	0	DEF	buf[$] == '.'
3898	61	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] == '.'
3899	66	12	DfpMath.java	split	sig	int	0	DEF	$ == (field.getRadixDigits() / 2) * 4
3899	66	12	DfpMath.java	split	field	DfpField	0	DEF	sig == ($.getRadixDigits() / 2) * 4
3900	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3900	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
3900	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3900	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
3900	71	12	DfpMath.java	split	leading	boolean	0	DEF	$
12102	78	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
12102	78	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
12102	78	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
3901	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
3901	80	12	DfpMath.java	split	i	int	0	DEF	$ < sp
3901	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3901	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
3901	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3901	80	12	DfpMath.java	split	sp	int	0	DEF	i < $
3902	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].classify() == Dfp.INFINITE
3902	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].equals($[1])
3903	162	8	DfpMath.java	splitPow	a	int	0	RET	$ == 0
3904	167	8	DfpMath.java	splitPow	a	int	0	DEF	$ < 0
12103	174	8	DfpMath.java	splitPow	a	int	0	NIL-DOWHILE	$ >= 1
3905	183	16	DfpMath.java	splitPow	trial	int	0	DEF	$ > a
3905	183	16	DfpMath.java	splitPow	a	int	0	DEF	trial > $
3906	198	8	DfpMath.java	splitPow	invert	boolean	0	DEF	$
3907	217	8	DfpMath.java	pow	a	int	0	RET	$ == 0
3908	222	8	DfpMath.java	pow	a	int	0	DEF	$ < 0
12104	228	8	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$ >= 1
12105	234	12	DfpMath.java	pow	trial	int	0	NIL-DOWHILE	a>$
12105	234	12	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$>trial
3909	249	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3910	270	8	DfpMath.java	exp	ia	int	0	RET	$ > 2147483646
3911	275	8	DfpMath.java	exp	ia	int	0	RET	$ < -2147483646
12106	297	8	DfpMath.java	expInternal	i	int	0	NIL-FOR	$ < 90
3912	301	12	DfpMath.java	expInternal	y	Dfp	0	DEF	$.equals(py)
3912	301	12	DfpMath.java	expInternal	py	Dfp	0	DEF	y.equals($)
3913	324	8	DfpMath.java	log	a	Dfp	0	RET	$.isNaN()
3913	324	8	DfpMath.java	log	a	Dfp	0	RET	$.equals($.getZero())
3913	324	8	DfpMath.java	log	a	Dfp	0	RET	$.lessThan($.getZero())
3914	330	8	DfpMath.java	log	a	Dfp	0	RET	$.classify() == Dfp.INFINITE
12107	340	8	DfpMath.java	log	ix	int	0	NIL-WHILE	$ > 2
12108	353	8	DfpMath.java	log	spx	Dfp[]	0	NIL-WHILE	$[0].add($[1]).greaterThan(spy[0])
12108	353	8	DfpMath.java	log	spy	Dfp[]	0	NIL-WHILE	spx[0].add(spx[1]).greaterThan($[0])
12109	447	8	DfpMath.java	logInternal	i	int	0	NIL-FOR	$ < 10000
3915	453	12	DfpMath.java	logInternal	y	Dfp	0	DEF	$.equals(py)
3915	453	12	DfpMath.java	logInternal	py	Dfp	0	DEF	y.equals($)
3916	508	8	DfpMath.java	pow	x	Dfp	0	RET	$.getField().getRadixDigits() != y.getField().getRadixDigits()
3916	508	8	DfpMath.java	pow	y	Dfp	0	RET	x.getField().getRadixDigits() != $.getField().getRadixDigits()
3917	522	8	DfpMath.java	pow	zero	Dfp	0	RET	y.equals($)
3917	522	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(zero)
3918	526	8	DfpMath.java	pow	one	Dfp	0	RET	y.equals($)
3918	526	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(one)
3919	527	12	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
3920	535	8	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
3920	535	8	DfpMath.java	pow	y	Dfp	0	RET	$.isNaN()
3921	542	8	DfpMath.java	pow	zero	Dfp	0	RET	x.equals($)
3921	542	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(zero)
3922	543	12	DfpMath.java	pow	zero	Dfp	1	RET	Dfp.copysign(one, x).greaterThan($)
3922	543	12	DfpMath.java	pow	one	Dfp	1	RET	Dfp.copysign($, x).greaterThan(zero)
3922	543	12	DfpMath.java	pow	x	Dfp	1	RET	Dfp.copysign(one, $).greaterThan(zero)
3923	545	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3923	545	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3924	552	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3924	552	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3924	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3924	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3924	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3925	554	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3925	554	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3926	561	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3926	561	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3927	570	8	DfpMath.java	pow	zero	Dfp	0	DEF	x.lessThan($)
3927	570	8	DfpMath.java	pow	x	Dfp	0	DEF	$.lessThan(zero)
3928	576	8	DfpMath.java	pow	one	Dfp	0	RET	x.greaterThan($)
3928	576	8	DfpMath.java	pow	x	Dfp	0	RET	$.greaterThan(one)
3928	576	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3929	577	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3929	577	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3930	584	8	DfpMath.java	pow	one	Dfp	0	RET	x.lessThan($)
3930	584	8	DfpMath.java	pow	x	Dfp	0	RET	$.lessThan(one)
3930	584	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3931	585	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3931	585	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3932	592	8	DfpMath.java	pow	one	Dfp	0	RET	x.equals($)
3932	592	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(one)
3932	592	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3933	597	8	DfpMath.java	pow	x	Dfp	0	RET	$.classify() == Dfp.INFINITE
3934	599	12	DfpMath.java	pow	invert	boolean	1	RET	$
3935	601	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3935	601	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3935	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3935	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3935	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3936	603	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3936	603	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3937	610	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3937	610	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3938	618	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3938	618	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3939	626	8	DfpMath.java	pow	invert	boolean	0	RET	$
3939	626	8	DfpMath.java	pow	y	Dfp	0	RET	$.rint().equals($)
3940	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.lessThan($.newInstance(100000000))
3940	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.greaterThan($.newInstance(-100000000))
3940	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.lessThan(x.newInstance(100000000))
3940	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.greaterThan(x.newInstance(-100000000))
3941	640	12	DfpMath.java	pow	v	Dfp	1	DEF	$.unequal(zero)
3941	640	12	DfpMath.java	pow	zero	Dfp	1	DEF	v.unequal($)
3942	656	8	DfpMath.java	pow	zero	Dfp	0	DEF	y.remainder(two).equals($)
3942	656	8	DfpMath.java	pow	two	Dfp	0	DEF	y.remainder($).equals(zero)
3942	656	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3942	656	8	DfpMath.java	pow	y	Dfp	0	DEF	$.rint().equals($)
3942	656	8	DfpMath.java	pow	y	Dfp	0	DEF	$.remainder(two).equals(zero)
12110	679	8	DfpMath.java	sinInternal	i	int	0	NIL-FOR	$ < 90
3943	685	12	DfpMath.java	sinInternal	y	Dfp	0	DEF	$.equals(py)
3943	685	12	DfpMath.java	sinInternal	py	Dfp	0	DEF	y.equals($)
12111	712	8	DfpMath.java	cosInternal	i	int	0	NIL-FOR	$ < 90
3944	719	12	DfpMath.java	cosInternal	y	Dfp	0	DEF	$.equals(py)
3944	719	12	DfpMath.java	cosInternal	py	Dfp	0	DEF	y.equals($)
3945	743	8	DfpMath.java	sin	zero	Dfp	0	DEF	x.lessThan($)
3945	743	8	DfpMath.java	sin	x	Dfp	0	DEF	$.lessThan(zero)
3946	752	8	DfpMath.java	sin	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3946	752	8	DfpMath.java	sin	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3947	757	8	DfpMath.java	sin	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3947	757	8	DfpMath.java	sin	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3948	772	8	DfpMath.java	sin	neg	boolean	0	DEF	$
3949	794	8	DfpMath.java	cos	zero	Dfp	0	DEF	x.lessThan($)
3949	794	8	DfpMath.java	cos	x	Dfp	0	DEF	$.lessThan(zero)
3950	802	8	DfpMath.java	cos	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3950	802	8	DfpMath.java	cos	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3951	808	8	DfpMath.java	cos	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3951	808	8	DfpMath.java	cos	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3952	822	8	DfpMath.java	cos	neg	boolean	0	DEF	$
12112	848	8	DfpMath.java	atanInternal	i	int	0	NIL-FOR	$ < 90
3953	853	12	DfpMath.java	atanInternal	y	Dfp	0	DEF	$.equals(py)
3953	853	12	DfpMath.java	atanInternal	py	Dfp	0	DEF	y.equals($)
3954	888	8	DfpMath.java	atan	zero	Dfp	0	DEF	x.lessThan($)
3954	888	8	DfpMath.java	atan	x	Dfp	0	DEF	$.lessThan(zero)
3955	893	8	DfpMath.java	atan	one	Dfp	0	DEF	x.greaterThan($)
3955	893	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(one)
3956	898	8	DfpMath.java	atan	ty	Dfp	0	DEF	x.greaterThan($)
3956	898	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(ty)
3957	921	8	DfpMath.java	atan	sub	boolean	0	DEF	$
3958	925	8	DfpMath.java	atan	recp	boolean	0	DEF	$
3959	929	8	DfpMath.java	atan	neg	boolean	0	DEF	$
3960	953	8	DfpMath.java	acos	a	Dfp	0	DEF	$.lessThan($.getZero())
3961	961	8	DfpMath.java	acos	negative	boolean	0	DEF	$
1440	97	8	DiagonalMatrix.java	createMatrix	rowDimension	int	0	DimensionMismatchException	$ != columnDimension
1440	97	8	DiagonalMatrix.java	createMatrix	columnDimension	int	0	DimensionMismatchException	rowDimension != $
10311	125	8	DiagonalMatrix.java	add	i	int	0	NIL-FOR	$ < dim
10311	125	8	DiagonalMatrix.java	add	dim	int	0	NIL-FOR	i < $
10312	146	8	DiagonalMatrix.java	subtract	i	int	0	NIL-FOR	$ < dim
10312	146	8	DiagonalMatrix.java	subtract	dim	int	0	NIL-FOR	i < $
10313	167	8	DiagonalMatrix.java	multiply	i	int	0	NIL-FOR	$ < dim
10313	167	8	DiagonalMatrix.java	multiply	dim	int	0	NIL-FOR	i < $
1441	185	8	DiagonalMatrix.java	multiply	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
10314	192	12	DiagonalMatrix.java	multiply	r	int	0	NIL-FOR	$ < nRows
10314	192	12	DiagonalMatrix.java	multiply	nRows	int	0	NIL-FOR	r < $
10315	193	16	DiagonalMatrix.java	multiply	c	int	0	NIL-FOR	$ < nCols
10315	193	16	DiagonalMatrix.java	multiply	nCols	int	0	NIL-FOR	c < $
10316	207	8	DiagonalMatrix.java	getData	i	int	0	NIL-FOR	$ < dim
10316	207	8	DiagonalMatrix.java	getData	dim	int	0	NIL-FOR	i < $
1442	237	8	DiagonalMatrix.java	setEntry	row	int	1	DEF	$ == column
1442	237	8	DiagonalMatrix.java	setEntry	column	int	1	DEF	row == $
1443	253	8	DiagonalMatrix.java	addToEntry	row	int	1	DEF	$ == column
1443	253	8	DiagonalMatrix.java	addToEntry	column	int	1	DEF	row == $
1444	268	8	DiagonalMatrix.java	multiplyEntry	row	int	0	DEF	$ == column
1444	268	8	DiagonalMatrix.java	multiplyEntry	column	int	0	DEF	row == $
1445	304	8	DiagonalMatrix.java	preMultiply	v	RealVector	1	DEF	$ instanceof ArrayRealVector
1446	317	8	DiagonalMatrix.java	ensureZero	value	double	0	NumberIsTooLargeException	Precision.equals(0.0, $, 1)
12154	110	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
12154	110	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
12155	111	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
12155	111	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
12155	111	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
11950	144	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < $.mainSetDimension
11950	144	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
3462	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
3462	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
3463	172	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
3464	174	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
11916	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
11916	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3465	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	1	DEF	$.previousState != null
3465	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
11917	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
11917	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
11918	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
11918	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
11949	258	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < $.mainSetDimension
11949	258	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
3516	279	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
3536	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
3536	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
11970	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
11970	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
11971	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
11971	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
11972	294	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
11972	294	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
11973	299	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
11973	299	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
3537	320	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
3538	322	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
11974	324	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
11975	333	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
11975	333	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
11976	351	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < D.$.length
11976	351	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < D.length
3539	373	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	1	DEF	$.previousState != null
3539	373	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
11977	374	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
11977	374	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
11978	388	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
11978	388	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3540	409	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
11979	419	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
11979	419	6	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
11980	428	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
11980	428	6	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
11981	438	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
11981	438	6	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
11982	465	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
11982	465	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
11983	488	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
11983	488	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
11838	56	8	DoublePoint.java	DoublePoint	THIS	DoublePoint	0	NIL-FOR	i < point.$.length
11838	56	8	DoublePoint.java	DoublePoint	i	int	0	NIL-FOR	$ < point.length
11838	56	8	DoublePoint.java	DoublePoint	point	int[]	0	NIL-FOR	i < $.length
3340	69	8	DoublePoint.java	equals	other	Object	0	RET	$ instanceof DoublePoint
11825	38	8	EarthMoversDistance.java	compute	THIS	EarthMoversDistance	0	NIL-FOR	i < a.$.length
11825	38	8	EarthMoversDistance.java	compute	i	int	0	NIL-FOR	$ < a.length
11825	38	8	EarthMoversDistance.java	compute	a	double[]	0	NIL-FOR	i < $.length
1487	121	8	EigenDecomposition.java	EigenDecomposition	THIS	EigenDecomposition	1	DEF	$.isSymmetric
10399	164	8	EigenDecomposition.java	EigenDecomposition	i	int	0	NIL-FOR	$ < size
10399	164	8	EigenDecomposition.java	EigenDecomposition	size	int	0	NIL-FOR	i < $
1488	199	8	EigenDecomposition.java	getV	THIS	EigenDecomposition	0	DEF	$.cachedV == null
10400	202	12	EigenDecomposition.java	getV	k	int	0	NIL-FOR	$ < m
10400	202	12	EigenDecomposition.java	getV	m	int	0	NIL-FOR	k < $
1489	223	8	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	$.cachedD == null
10401	227	12	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
10401	227	12	EigenDecomposition.java	getD	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1490	228	16	EigenDecomposition.java	getD	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) > 0
1490	228	16	EigenDecomposition.java	getD	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) > 0
1491	230	23	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0
1491	230	23	EigenDecomposition.java	getD	i	int	0	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0
1492	250	8	EigenDecomposition.java	getVT	THIS	EigenDecomposition	0	DEF	$.cachedVt == null
10402	253	12	EigenDecomposition.java	getVT	k	int	0	NIL-FOR	$ < m
10402	253	12	EigenDecomposition.java	getVT	m	int	0	NIL-FOR	k < $
10403	272	8	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
10403	272	8	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1493	273	12	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	RET	Precision.equals($.imagEigenvalues[i], 0.0, EPSILON)
1493	273	12	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	RET	Precision.equals(imagEigenvalues[$], 0.0, EPSILON)
1494	375	8	EigenDecomposition.java	getSquareRoot	THIS	EigenDecomposition	0	MathUnsupportedOperationException	$.isSymmetric
10404	380	8	EigenDecomposition.java	getSquareRoot	THIS	EigenDecomposition	0	NIL-FOR	i < $.realEigenvalues.$.length
10404	380	8	EigenDecomposition.java	getSquareRoot	i	int	0	NIL-FOR	$ < realEigenvalues.length
1495	382	12	EigenDecomposition.java	getSquareRoot	eigen	double	0	MathUnsupportedOperationException	$ <= 0
1496	406	8	EigenDecomposition.java	getSolver	THIS	EigenDecomposition	0	MathUnsupportedOperationException	$.hasComplexEigenvalues()
10405	578	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n - 1
10405	578	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $ - 1
10406	587	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
10406	587	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1497	588	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1497	588	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1497	588	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1498	591	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) > maxAbsoluteValue
1498	591	12	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) > maxAbsoluteValue
1498	591	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) > $
1499	596	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0
10407	597	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
10407	597	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1500	598	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue
1500	598	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) <= Precision.EPSILON * maxAbsoluteValue
1500	598	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * $
1501	601	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) <= Precision.EPSILON * maxAbsoluteValue
1501	601	16	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) <= Precision.EPSILON * maxAbsoluteValue
1501	601	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) <= Precision.EPSILON * $
10408	607	8	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
10408	607	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
10409	610	12	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-DOWHILE	$ != j
10409	610	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-DOWHILE	m != $
10410	611	16	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-FOR	$ < n - 1
10410	611	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	m < $ - 1
1502	614	20	EigenDecomposition.java	findEigenVectors	delta	double	0	DEF	FastMath.abs(e[m]) + $ == $
1502	614	20	EigenDecomposition.java	findEigenVectors	m	int	0	DEF	FastMath.abs(e[$]) + delta == delta
1502	614	20	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[m]) + delta == delta
1503	618	16	EigenDecomposition.java	findEigenVectors	m	int	0	MaxCountExceededException	$ != j
1503	618	16	EigenDecomposition.java	findEigenVectors	j	int	0	MaxCountExceededException	m != $
1504	619	20	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	MaxCountExceededException	its == $.maxIter
1504	619	20	EigenDecomposition.java	findEigenVectors	its	int	0	MaxCountExceededException	$ == maxIter
1505	626	20	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	$ < 0.0
10411	635	20	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ >= j
10411	635	20	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	i >= $
1506	638	24	EigenDecomposition.java	findEigenVectors	p	double	1	DEF	FastMath.abs($) >= FastMath.abs(q)
1506	638	24	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	FastMath.abs(p) >= FastMath.abs($)
1507	651	24	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	e[$ + 1] == 0.0
1507	651	24	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	$[i + 1] == 0.0
10412	661	24	EigenDecomposition.java	findEigenVectors	ia	int	0	NIL-FOR	$ < n
10412	661	24	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	ia < $
1508	667	20	EigenDecomposition.java	findEigenVectors	t	double	0	DEF	$ == 0.0
1508	667	20	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	$ >= j
1508	667	20	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	i >= $
10413	678	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
10413	678	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
10414	681	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
10414	681	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
1509	682	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.realEigenvalues[j] > p
1509	682	16	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	realEigenvalues[$] > p
1509	682	16	EigenDecomposition.java	findEigenVectors	p	double	0	DEF	realEigenvalues[j] > $
1510	687	12	EigenDecomposition.java	findEigenVectors	k	int	0	DEF	$ != i
1510	687	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	k != $
10415	690	16	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
10415	690	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
10416	700	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
10416	700	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1511	701	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1511	701	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1511	701	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1512	706	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0.0
10417	707	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
10417	707	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1513	708	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue
1513	708	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) < Precision.EPSILON * maxAbsoluteValue
1513	708	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * $
10418	715	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
10418	715	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
10419	716	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
10419	716	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
10420	736	8	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	0	NIL-FOR	i < $.realEigenvalues.$.length
10420	736	8	EigenDecomposition.java	transformToSchur	i	int	0	NIL-FOR	$ < realEigenvalues.length
1514	737	12	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	1	DEF	i == ($.realEigenvalues.$.length - 1)
1514	737	12	EigenDecomposition.java	transformToSchur	i	int	1	DEF	$ == (realEigenvalues.length - 1)
1514	737	12	EigenDecomposition.java	transformToSchur	i	int	1	DEF	Precision.equals(matT[$ + 1][$], 0.0, EPSILON)
1514	737	12	EigenDecomposition.java	transformToSchur	matT	double[][]	1	DEF	Precision.equals($[i + 1][i], 0.0, EPSILON)
10421	783	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
10421	783	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
10422	784	11	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
10422	784	11	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
1515	790	8	EigenDecomposition.java	findEigenVectorsFromSchur	norm	double	0	MathArithmeticException	Precision.equals($, 0.0, EPSILON)
10423	800	8	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	$ >= 0
1516	804	12	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	Precision.equals($, 0.0)
10424	808	16	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
10425	811	20	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
10425	811	20	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1517	814	20	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0.0
1517	814	20	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
1518	819	24	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.equals($.imagEigenvalues[i], 0.0)
1518	819	24	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$], 0.0)
1519	820	28	EigenDecomposition.java	findEigenVectorsFromSchur	w	double	1	DEF	$ != 0.0
1520	833	28	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > FastMath.abs(z)
1520	833	28	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > FastMath.abs($)
1521	842	24	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
10426	843	28	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
10426	843	28	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1522	849	19	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	0	DEF	$ < 0.0
1523	854	16	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	1	DEF	FastMath.abs(matrixT[$][$ - 1]) > FastMath.abs(matrixT[$ - 1][$])
1523	854	16	EigenDecomposition.java	findEigenVectorsFromSchur	matrixT	double[][]	1	DEF	FastMath.abs($[idx][idx - 1]) > FastMath.abs($[idx - 1][idx])
10427	867	16	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
10428	870	20	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
10428	870	20	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1524	876	20	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0.0
1524	876	20	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
1525	882	24	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.equals($.imagEigenvalues[i], 0.0)
1525	882	24	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$], 0.0)
1526	893	28	EigenDecomposition.java	findEigenVectorsFromSchur	vr	double	0	DEF	Precision.equals($, 0.0)
1526	893	28	EigenDecomposition.java	findEigenVectorsFromSchur	vi	double	0	DEF	Precision.equals($, 0.0)
1527	903	28	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > (FastMath.abs(z) + FastMath.abs(q))
1527	903	28	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs($))
1527	903	28	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > (FastMath.abs($) + FastMath.abs(q))
1528	919	24	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
10429	920	28	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
10429	920	28	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
10430	931	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
10430	931	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
1529	932	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	DEF	$ < 0 | $ > n - 1
1529	932	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	DEF	i < 0 | i > $ - 1
10431	933	16	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
10431	933	16	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
10432	940	8	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ >= 0
10433	941	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ <= n - 1
10433	941	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i <= $ - 1
10434	943	16	EigenDecomposition.java	findEigenVectorsFromSchur	k	int	0	NIL-FOR	$ <= FastMath.min(j, n - 1)
10434	943	16	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	k <= FastMath.min($, n - 1)
10434	943	16	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	k <= FastMath.min(j, $ - 1)
10435	952	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
10435	952	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
10436	953	12	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
10436	953	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
11801	93	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$ < oldChromosomes.size()
11801	93	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i < $.size()
3251	106	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ < 0
3251	106	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ > 1
11961	223	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
11962	229	6	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
3526	231	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
3526	231	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3527	236	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3528	238	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance == null
11963	239	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
11963	239	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
11963	239	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
11964	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
11964	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
11964	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
3529	253	8	EmbeddedRungeKuttaIntegrator.java	integrate	forward	boolean	1	DEF	$
3530	254	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize >= t
3530	254	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize >= $
3531	258	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize <= t
3531	258	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize <= $
11965	264	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
11965	264	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
11966	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
11966	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
11966	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
11967	268	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
11967	268	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
11968	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
11968	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
11968	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
11969	281	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
11969	281	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
3532	289	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
3533	306	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.isLastStep
3534	311	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
3535	326	10	EmbeddedRungeKuttaIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
3172	262	12	EmpiricalDistribution.java	load	THIS	EmpiricalDistribution	0	ZeroException	$.sampleStats.getN() == 0
3173	434	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	DEF	$.binStats.isEmpty()
11762	437	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
11762	437	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
11763	449	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount-1
11763	449	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
3174	477	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	MathIllegalStateException	$.loaded
11764	485	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
11764	485	8	EmpiricalDistribution.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
3175	486	11	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	RET	x <= $.upperBounds[i]
3175	486	11	EmpiricalDistribution.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
3175	486	11	EmpiricalDistribution.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
3176	488	15	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
3177	489	19	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
11765	547	8	EmpiricalDistribution.java	getUpperBounds	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount - 1
11765	547	8	EmpiricalDistribution.java	getUpperBounds	i	int	0	NIL-FOR	$ < binCount - 1
3178	617	8	EmpiricalDistribution.java	density	THIS	EmpiricalDistribution	0	RET	x > $.max
3178	617	8	EmpiricalDistribution.java	density	THIS	EmpiricalDistribution	0	RET	x < $.min
3178	617	8	EmpiricalDistribution.java	density	x	double	0	RET	$ > max
3178	617	8	EmpiricalDistribution.java	density	x	double	0	RET	$ < min
3179	639	8	EmpiricalDistribution.java	cumulativeProbability	THIS	EmpiricalDistribution	1	RET	x < $.min
3179	639	8	EmpiricalDistribution.java	cumulativeProbability	x	double	1	RET	$ < min
3180	641	15	EmpiricalDistribution.java	cumulativeProbability	THIS	EmpiricalDistribution	0	RET	x >= $.max
3180	641	15	EmpiricalDistribution.java	cumulativeProbability	x	double	0	RET	$ >= max
3181	678	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
3181	678	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
3182	682	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
3183	686	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
11766	691	8	EmpiricalDistribution.java	inverseCumulativeProbability	THIS	EmpiricalDistribution	0	NIL-WHILE	$.cumBinP(i) < p
11766	691	8	EmpiricalDistribution.java	inverseCumulativeProbability	i	int	0	NIL-WHILE	cumBinP($) < p
11766	691	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumBinP(i) < $
3184	703	8	EmpiricalDistribution.java	inverseCumulativeProbability	pCrit	double	0	RET	$ <= 0
10011	110	8	EnumeratedDistribution.java	EnumeratedDistribution	i	int	0	NIL-FOR	$ < pmf.size()
10011	110	8	EnumeratedDistribution.java	EnumeratedDistribution	pmf	List<Pair<T,Double>>	0	NIL-FOR	i < $.size()
1108	114	12	EnumeratedDistribution.java	EnumeratedDistribution	p	double	0	NotPositiveException	$ < 0
1109	117	12	EnumeratedDistribution.java	EnumeratedDistribution	p	double	0	NotFiniteNumberException	Double.isInfinite($)
1110	120	12	EnumeratedDistribution.java	EnumeratedDistribution	p	double	0	NotANumberException	Double.isNaN($)
10012	153	8	EnumeratedDistribution.java	probability	THIS	EnumeratedDistribution	0	NIL-FOR	i < $.probabilities.$.length
10012	153	8	EnumeratedDistribution.java	probability	i	int	0	NIL-FOR	$ < probabilities.length
1111	154	12	EnumeratedDistribution.java	probability	THIS	EnumeratedDistribution	0	DEF	x.equals($.singletons.get(i))
1111	154	12	EnumeratedDistribution.java	probability	THIS	EnumeratedDistribution	0	DEF	$.singletons.get(i) == null
1111	154	12	EnumeratedDistribution.java	probability	i	int	0	DEF	x.equals(singletons.get($))
1111	154	12	EnumeratedDistribution.java	probability	i	int	0	DEF	singletons.get($) == null
1111	154	12	EnumeratedDistribution.java	probability	x	T	0	DEF	$.equals(singletons.get(i))
1111	154	12	EnumeratedDistribution.java	probability	x	T	0	DEF	$ == null
1111	154	12	EnumeratedDistribution.java	probability	x	T	0	DEF	$ != null
10013	176	8	EnumeratedDistribution.java	getPmf	THIS	EnumeratedDistribution	0	NIL-FOR	i < $.probabilities.$.length
10013	176	8	EnumeratedDistribution.java	getPmf	i	int	0	NIL-FOR	$ < probabilities.length
10014	192	8	EnumeratedDistribution.java	sample	THIS	EnumeratedDistribution	0	NIL-FOR	i < $.probabilities.$.length
10014	192	8	EnumeratedDistribution.java	sample	i	int	0	NIL-FOR	$ < probabilities.length
1112	194	12	EnumeratedDistribution.java	sample	randomValue	double	0	RET	$ < sum
1112	194	12	EnumeratedDistribution.java	sample	sum	double	0	RET	randomValue < $
1113	214	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
10015	221	8	EnumeratedDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
10015	221	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1114	243	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
1115	247	8	EnumeratedDistribution.java	sample	array	T[]	0	NullArgumentException	$ == null
1116	252	8	EnumeratedDistribution.java	sample	THIS	EnumeratedDistribution	1	DEF	array.$.length < sampleSize
1116	252	8	EnumeratedDistribution.java	sample	sampleSize	int	1	DEF	array.length < $
1116	252	8	EnumeratedDistribution.java	sample	array	T[]	1	DEF	$.length < sampleSize
10016	260	8	EnumeratedDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
10016	260	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1121	90	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	THIS	EnumeratedIntegerDistribution	0	DimensionMismatchException	singletons.$.length != probabilities.$.length
1121	90	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	singletons	int[]	0	DimensionMismatchException	$.length != probabilities.length
1121	90	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	probabilities	double[]	0	DimensionMismatchException	singletons.length != $.length
10017	96	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	THIS	EnumeratedIntegerDistribution	0	NIL-FOR	i < singletons.$.length
10017	96	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	i	int	0	NIL-FOR	$ < singletons.length
10017	96	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	singletons	int[]	0	NIL-FOR	i < $.length
1122	117	12	EnumeratedIntegerDistribution.java	cumulativeProbability	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getKey() <= x
1122	117	12	EnumeratedIntegerDistribution.java	cumulativeProbability	x	int	0	DEF	sample.getKey() <= $
1123	167	12	EnumeratedIntegerDistribution.java	getSupportLowerBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getValue() > 0
1123	167	12	EnumeratedIntegerDistribution.java	getSupportLowerBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getKey() < min
1123	167	12	EnumeratedIntegerDistribution.java	getSupportLowerBound	min	int	0	DEF	sample.getKey() < $
1124	185	12	EnumeratedIntegerDistribution.java	getSupportUpperBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getValue() > 0
1124	185	12	EnumeratedIntegerDistribution.java	getSupportUpperBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getKey() > max
1124	185	12	EnumeratedIntegerDistribution.java	getSupportUpperBound	max	int	0	DEF	sample.getKey() > $
1241	90	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	THIS	EnumeratedRealDistribution	0	DimensionMismatchException	singletons.$.length != probabilities.$.length
1241	90	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	singletons	double[]	0	DimensionMismatchException	$.length != probabilities.length
1241	90	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	probabilities	double[]	0	DimensionMismatchException	singletons.length != $.length
10039	96	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	THIS	EnumeratedRealDistribution	0	NIL-FOR	i < singletons.$.length
10039	96	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	i	int	0	NIL-FOR	$ < singletons.length
10039	96	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	singletons	double[]	0	NIL-FOR	i < $.length
1242	131	12	EnumeratedRealDistribution.java	cumulativeProbability	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getKey() <= x
1242	131	12	EnumeratedRealDistribution.java	cumulativeProbability	x	double	0	DEF	sample.getKey() <= $
1243	181	12	EnumeratedRealDistribution.java	getSupportLowerBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getValue() > 0
1243	181	12	EnumeratedRealDistribution.java	getSupportLowerBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getKey() < min
1243	181	12	EnumeratedRealDistribution.java	getSupportLowerBound	min	double	0	DEF	sample.getKey() < $
1244	199	12	EnumeratedRealDistribution.java	getSupportUpperBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getKey() > max
1244	199	12	EnumeratedRealDistribution.java	getSupportUpperBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getValue() > 0
1244	199	12	EnumeratedRealDistribution.java	getSupportUpperBound	max	double	0	DEF	sample.getKey() > $
3582	77	8	EquationsMapper.java	extractEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
3582	77	8	EquationsMapper.java	extractEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
3583	92	8	EquationsMapper.java	insertEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
3583	92	8	EquationsMapper.java	insertEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
3347	67	8	Erf.java	erf	x	double	0	RET	FastMath.abs($) > 40
3348	98	8	Erf.java	erfc	x	double	0	RET	FastMath.abs($) > 40
3349	116	8	Erf.java	erf	x1	double	0	RET	$ > x2
3349	116	8	Erf.java	erf	x2	double	0	RET	x1 > $
3350	152	8	Erf.java	erfInv	w	double	1	DEF	$ < 6.25
3351	177	15	Erf.java	erfInv	w	double	1	DEF	$ < 16.0
3352	198	15	Erf.java	erfInv	w	double	1	DEF	Double.isInfinite($)
11313	56	12	EuclideanDoublePoint.java	centroidOf	THIS	EuclideanDoublePoint	0	NIL-FOR	i < centroid.$.length
11313	56	12	EuclideanDoublePoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
11313	56	12	EuclideanDoublePoint.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
11314	60	8	EuclideanDoublePoint.java	centroidOf	THIS	EuclideanDoublePoint	0	NIL-FOR	i < centroid.$.length
11314	60	8	EuclideanDoublePoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
11314	60	8	EuclideanDoublePoint.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
2484	74	8	EuclideanDoublePoint.java	equals	other	Object	0	RET	$ instanceof EuclideanDoublePoint
11325	68	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
11325	68	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
11325	68	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
11326	72	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
11326	72	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
11326	72	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
2518	81	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
3568	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	1	DEF	$.previousState != null
3568	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
12007	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
12007	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
12008	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
12008	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3584	110	8	EventFilter.java	g	THIS	EventFilter	1	RET	$.forward
3585	112	12	EventFilter.java	g	THIS	EventFilter	1	RET	$.extremeT < t
3585	112	12	EventFilter.java	g	t	double	1	RET	extremeT < $
3586	118	16	EventFilter.java	g	previous	Transformer	0	DEF	next != $
3586	118	16	EventFilter.java	g	next	Transformer	0	DEF	$ != previous
12030	140	16	EventFilter.java	g	i	int	0	NIL-FOR	$ > 0
3587	141	20	EventFilter.java	g	THIS	EventFilter	0	RET	$.updates[i] <= t
3587	141	20	EventFilter.java	g	i	int	0	RET	updates[$] <= t
3587	141	20	EventFilter.java	g	t	double	0	RET	updates[i] <= $
3588	151	12	EventFilter.java	g	THIS	EventFilter	1	RET	t < $.extremeT
3588	151	12	EventFilter.java	g	t	double	1	RET	$ < extremeT
3589	157	16	EventFilter.java	g	previous	Transformer	0	DEF	next != $
3589	157	16	EventFilter.java	g	next	Transformer	0	DEF	$ != previous
12031	179	16	EventFilter.java	g	THIS	EventFilter	0	NIL-FOR	i < $.updates.$.length - 1
12031	179	16	EventFilter.java	g	i	int	0	NIL-FOR	$ < updates.length - 1
3590	180	20	EventFilter.java	g	THIS	EventFilter	0	RET	t <= $.updates[i]
3590	180	20	EventFilter.java	g	i	int	0	RET	t <= updates[$]
3590	180	20	EventFilter.java	g	t	double	0	RET	$ <= updates[i]
3591	173	8	EventState.java	reinitializeBegin	THIS	EventState	0	DEF	$.g0 == 0
3592	232	12	EventState.java	evaluateStep	THIS	EventState	0	RET	FastMath.abs(dt) < $.convergence
3592	232	12	EventState.java	evaluateStep	dt	double	0	RET	FastMath.abs($) < convergence
12032	252	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
12032	252	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
3593	260	16	EventState.java	evaluateStep	THIS	EventState	1	RET	$.g0Positive ^ (gb >= 0)
3593	260	16	EventState.java	evaluateStep	gb	double	1	RET	g0Positive ^ ($ >= 0)
3594	268	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	$.solver instanceof BracketedUnivariateSolver<?>
3595	289	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - $.previousEventTime) <= $.convergence
3595	289	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Double.isNaN($.previousEventTime)
3595	289	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - ta) <= $.convergence
3595	289	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - previousEventTime) <= convergence
3595	289	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - ta) <= convergence
3595	289	20	EventState.java	evaluateStep	ta	double	1	DEF	FastMath.abs(root - $) <= convergence
3596	297	27	EventState.java	evaluateStep	THIS	EventState	1	RET	FastMath.abs($.previousEventTime - root) > $.convergence
3596	297	27	EventState.java	evaluateStep	THIS	EventState	1	RET	Double.isNaN($.previousEventTime)
3596	297	27	EventState.java	evaluateStep	root	double	1	RET	FastMath.abs(previousEventTime - $) > convergence
3597	348	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	FastMath.abs($.pendingEventTime - t) <= $.convergence
3597	348	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
3597	348	8	EventState.java	stepAccepted	t	double	1	DEF	FastMath.abs(pendingEventTime - $) <= convergence
3598	376	8	EventState.java	reset	THIS	EventState	0	RET	FastMath.abs($.pendingEventTime - t) <= $.convergence
3598	376	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
3598	376	8	EventState.java	reset	t	double	0	RET	FastMath.abs(pendingEventTime - $) <= convergence
3599	380	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.$.Action.RESET_STATE
11861	174	8	ExceptionContext.java	buildMessage	i	int	0	NIL-FOR	$ < len
11861	174	8	ExceptionContext.java	buildMessage	len	int	0	NIL-FOR	i < $
3405	180	12	ExceptionContext.java	buildMessage	count	int	0	DEF	++$ < len
3405	180	12	ExceptionContext.java	buildMessage	len	int	0	DEF	++count < $
11862	228	8	ExceptionContext.java	serializeMessages	i	int	0	NIL-FOR	$ < len
11862	228	8	ExceptionContext.java	serializeMessages	len	int	0	NIL-FOR	i < $
11863	236	12	ExceptionContext.java	serializeMessages	j	int	0	NIL-FOR	$ < aLen
11863	236	12	ExceptionContext.java	serializeMessages	aLen	int	0	NIL-FOR	j < $
3406	237	16	ExceptionContext.java	serializeMessages	j	int	1	DEF	args[$] instanceof Serializable
3406	237	16	ExceptionContext.java	serializeMessages	args	Object[]	1	DEF	$[j] instanceof Serializable
11864	263	8	ExceptionContext.java	deSerializeMessages	i	int	0	NIL-FOR	$ < len
11864	263	8	ExceptionContext.java	deSerializeMessages	len	int	0	NIL-FOR	i < $
11865	270	12	ExceptionContext.java	deSerializeMessages	j	int	0	NIL-FOR	$ < aLen
11865	270	12	ExceptionContext.java	deSerializeMessages	aLen	int	0	NIL-FOR	j < $
3407	293	12	ExceptionContext.java	serializeContext	value	Object	1	DEF	$ instanceof Serializable
11866	316	8	ExceptionContext.java	deSerializeContext	i	int	0	NIL-FOR	$ < len
11866	316	8	ExceptionContext.java	deSerializeContext	len	int	0	NIL-FOR	i < $
3631	97	8	ExpandableStatefulODE.java	getTotalDimension	THIS	ExpandableStatefulODE	1	RET	$.components.isEmpty()
3632	140	8	ExpandableStatefulODE.java	addSecondaryEquations	THIS	ExpandableStatefulODE	1	DEF	$.components.isEmpty()
12038	169	8	ExpandableStatefulODE.java	getSecondaryMappers	THIS	ExpandableStatefulODE	0	NIL-FOR	i < mappers.$.length
12038	169	8	ExpandableStatefulODE.java	getSecondaryMappers	i	int	0	NIL-FOR	$ < mappers.length
12038	169	8	ExpandableStatefulODE.java	getSecondaryMappers	mappers	EquationsMapper[]	0	NIL-FOR	i < $.length
3633	197	8	ExpandableStatefulODE.java	setPrimaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	primaryState.$.length != $.primaryState.length
3633	197	8	ExpandableStatefulODE.java	setPrimaryState	primaryState	double[]	0	DimensionMismatchException	$.length != this.primaryState.length
3634	234	8	ExpandableStatefulODE.java	setSecondaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	secondaryState.$.length != localArray.$.length
3634	234	8	ExpandableStatefulODE.java	setSecondaryState	localArray	double[]	0	DimensionMismatchException	secondaryState.length != $.length
3634	234	8	ExpandableStatefulODE.java	setSecondaryState	secondaryState	double[]	0	DimensionMismatchException	$.length != localArray.length
3635	270	8	ExpandableStatefulODE.java	setCompleteState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	completeState.$.length != $.getTotalDimension()
3635	270	8	ExpandableStatefulODE.java	setCompleteState	completeState	double[]	0	DimensionMismatchException	$.length != getTotalDimension()
1153	130	8	ExponentialDistribution.java	ExponentialDistribution	mean	double	0	NotStrictlyPositiveException	$ <= 0
1154	148	8	ExponentialDistribution.java	density	x	double	0	RET	$ < 0
1155	166	8	ExponentialDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
1156	184	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
1156	184	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
1157	186	15	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
10019	213	8	ExponentialDistribution.java	sample	u	double	0	NIL-WHILE	$ < 0.5
1158	222	8	ExponentialDistribution.java	sample	u	double	0	RET	$ <= EXPONENTIAL_SA_QI[0]
10020	232	8	ExponentialDistribution.java	sample	u	double	0	NIL-DOWHILE	$ > EXPONENTIAL_SA_QI[i]
10020	232	8	ExponentialDistribution.java	sample	i	int	0	NIL-DOWHILE	u > EXPONENTIAL_SA_QI[$]
1159	236	12	ExponentialDistribution.java	sample	u2	double	0	DEF	$ < umin
1159	236	12	ExponentialDistribution.java	sample	umin	double	0	DEF	u2 < $
1213	110	8	FDistribution.java	FDistribution	numeratorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1214	114	8	FDistribution.java	FDistribution	denominatorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1215	154	8	FDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1216	203	8	FDistribution.java	getNumericalMean	denominatorDF	double	0	RET	$ > 2
1217	224	8	FDistribution.java	getNumericalVariance	THIS	FDistribution	0	DEF	$.numericalVarianceIsCalculated
1218	239	8	FDistribution.java	calculateNumericalVariance	denominatorDF	double	0	RET	$ > 4
3408	93	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	type == $.TransformType.FORWARD
3408	93	8	FastCosineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
3409	94	12	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
3410	102	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	1	DEF	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
3411	142	8	FastCosineTransformer.java	fct	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
3412	147	8	FastCosineTransformer.java	fct	n	int	0	RET	$ == 1
11867	159	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
11867	159	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
11868	174	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
11868	174	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
11881	135	8	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	NIL-FOR	$ < n
11881	135	8	FastFourierTransformer.java	bitReversalShuffle2	n	int	0	NIL-FOR	i < $
3424	136	12	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	DEF	$ < j
3424	136	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	DEF	i < $
11882	148	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ <= j
11882	148	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ > 0
11882	148	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	NIL-WHILE	k <= $
3425	173	16	FastFourierTransformer.java	normalizeTransformedData	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
3425	173	16	FastFourierTransformer.java	normalizeTransformedData	type	TransformType	0	DEF	$ == TransformType.INVERSE
11883	175	20	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
11883	175	20	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
11884	183	16	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
11884	183	16	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
3426	218	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataRI.$.length != 2
3426	218	8	FastFourierTransformer.java	transformInPlace	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
3427	223	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataR.$.length != dataI.$.length
3427	223	8	FastFourierTransformer.java	transformInPlace	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
3427	223	8	FastFourierTransformer.java	transformInPlace	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
3428	228	8	FastFourierTransformer.java	transformInPlace	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
3429	234	8	FastFourierTransformer.java	transformInPlace	n	int	1	RET	$ == 1
3430	236	15	FastFourierTransformer.java	transformInPlace	n	int	0	RET	$ == 2
3431	256	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	1	DEF	type == $.TransformType.INVERSE
3431	256	8	FastFourierTransformer.java	transformInPlace	type	TransformType	1	DEF	$ == TransformType.INVERSE
11885	257	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
11885	257	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
11886	286	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
11886	286	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
11887	318	8	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-WHILE	lastN0 < $
11887	318	8	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-WHILE	$ < n
3432	323	12	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
3432	323	12	FastFourierTransformer.java	transformInPlace	type	TransformType	0	DEF	$ == TransformType.INVERSE
11888	328	12	FastFourierTransformer.java	transformInPlace	destEvenStartIndex	int	0	NIL-FOR	$ < n
11888	328	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	destEvenStartIndex < $
11889	334	16	FastFourierTransformer.java	transformInPlace	r	int	0	NIL-FOR	$ < lastN0
11889	334	16	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-FOR	r < $
11890	442	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
11890	442	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
11890	442	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
3433	464	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
3433	464	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
3433	464	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
11891	466	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
11891	466	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
11891	466	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
11892	474	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
11892	474	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
11892	474	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
3434	481	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
3434	481	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
3434	481	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
11893	487	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
11893	487	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
11893	487	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
11893	487	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
3416	52	8	FastHadamardTransformer.java	transform	THIS	FastHadamardTransformer	0	RET	type == $.TransformType.FORWARD
3416	52	8	FastHadamardTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
3417	234	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
11873	248	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
11873	248	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
11874	256	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
11874	256	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
11875	261	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
11875	261	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
3418	285	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
11876	299	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
11876	299	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
11877	307	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
11877	307	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
11878	312	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
11878	312	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
267	371	8	FastMath.java	doubleHighPart	d	double	0	RET	$ < Precision.SAFE_MIN
267	371	8	FastMath.java	doubleHighPart	d	double	0	RET	$ > -Precision.SAFE_MIN
268	393	6	FastMath.java	cosh	x	double	0	RET	$ != $
269	402	6	FastMath.java	cosh	x	double	1	RET	$ > 20
270	403	10	FastMath.java	cosh	x	double	1	RET	$ >= LOG_MAX_VALUE
271	410	13	FastMath.java	cosh	x	double	0	RET	$ < -20
272	411	10	FastMath.java	cosh	x	double	1	RET	$ <= -LOG_MAX_VALUE
273	421	6	FastMath.java	cosh	x	double	0	DEF	$ < 0.0
274	463	6	FastMath.java	sinh	x	double	0	RET	$ != $
275	472	6	FastMath.java	sinh	x	double	1	RET	$ > 20
276	473	10	FastMath.java	sinh	x	double	1	RET	$ >= LOG_MAX_VALUE
277	480	13	FastMath.java	sinh	x	double	0	RET	$ < -20
278	481	10	FastMath.java	sinh	x	double	1	RET	$ <= -LOG_MAX_VALUE
279	490	6	FastMath.java	sinh	x	double	0	RET	$ == 0
280	494	6	FastMath.java	sinh	x	double	0	DEF	$ < 0.0
281	501	6	FastMath.java	sinh	x	double	1	DEF	$ > 0.25
282	575	6	FastMath.java	sinh	negate	boolean	0	DEF	$
283	589	6	FastMath.java	tanh	x	double	0	RET	$ != $
284	599	6	FastMath.java	tanh	x	double	0	RET	$ > 20.0
285	603	6	FastMath.java	tanh	x	double	0	RET	$ < -20
286	607	6	FastMath.java	tanh	x	double	0	RET	$ == 0
287	611	6	FastMath.java	tanh	x	double	0	DEF	$ < 0.0
288	617	6	FastMath.java	tanh	x	double	1	DEF	$ >= 0.5
289	699	6	FastMath.java	tanh	negate	boolean	0	DEF	$
290	720	8	FastMath.java	asinh	a	double	0	DEF	$ < 0
291	726	8	FastMath.java	asinh	a	double	1	DEF	$ > 0.167
292	730	12	FastMath.java	asinh	a	double	1	DEF	$ > 0.097
293	732	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.036
294	734	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.0036
295	750	8	FastMath.java	atanh	a	double	0	DEF	$ < 0
296	756	8	FastMath.java	atanh	a	double	1	DEF	$ > 0.15
297	760	12	FastMath.java	atanh	a	double	1	DEF	$ > 0.087
298	762	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.031
299	764	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.003
300	856	8	FastMath.java	exp	x	double	1	RET	$ < 0.0
301	859	12	FastMath.java	exp	intVal	int	0	RET	$ > 746
302	860	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
303	867	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
304	870	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
305	877	12	FastMath.java	exp	intVal	int	0	RET	$ == 709
306	880	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
307	896	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
308	897	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
309	949	8	FastMath.java	exp	extra	double	1	DEF	$ != 0.0
310	955	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
311	978	8	FastMath.java	expm1	x	double	0	RET	$ != $
311	978	8	FastMath.java	expm1	x	double	0	RET	$ == 0.0
312	982	8	FastMath.java	expm1	x	double	0	RET	$ <= -1.0
312	982	8	FastMath.java	expm1	x	double	0	RET	$ >= 1.0
313	987	12	FastMath.java	expm1	x	double	1	RET	$ > 0.0
314	1002	8	FastMath.java	expm1	x	double	0	DEF	$ < 0.0
315	1078	8	FastMath.java	expm1	negative	boolean	0	DEF	$
316	1111	8	FastMath.java	expm1	hiPrecOut	double	0	DEF	$ != null
317	1136	8	FastMath.java	log	x	double	0	RET	$==0
318	1142	8	FastMath.java	log	bits	long	0	RET	($ & 0x8000000000000000L) != 0
318	1142	8	FastMath.java	log	x	double	0	RET	$ != $
318	1142	8	FastMath.java	log	x	double	0	RET	$ != 0.0
319	1143	12	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
320	1151	8	FastMath.java	log	x	double	0	RET	$ == Double.POSITIVE_INFINITY
321	1152	12	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
322	1162	8	FastMath.java	log	bits	long	0	RET	($ & 0x7ff0000000000000L) == 0
323	1164	12	FastMath.java	log	x	double	0	RET	$ == 0
324	1166	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
9937	1175	12	FastMath.java	log	bits	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
325	1182	8	FastMath.java	log	exp	int	0	RET	$ == -1
325	1182	8	FastMath.java	log	exp	int	0	RET	$ == 0
325	1182	8	FastMath.java	log	x	double	0	RET	$ < 1.01
325	1182	8	FastMath.java	log	x	double	0	RET	$ > 0.99
325	1182	8	FastMath.java	log	hiPrec	double[]	0	RET	$ == null
9938	1199	12	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
326	1246	8	FastMath.java	log	hiPrec	double[]	1	DEF	$ != null
9939	1265	12	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
327	1349	8	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
328	1364	8	FastMath.java	log1p	x	double	0	RET	$ == -1
329	1368	8	FastMath.java	log1p	x	double	0	RET	$ == Double.POSITIVE_INFINITY
330	1372	8	FastMath.java	log1p	x	double	1	RET	$ > 1e-6
330	1372	8	FastMath.java	log1p	x	double	1	RET	$ < -1e-6
331	1379	12	FastMath.java	log1p	lores	double	0	RET	Double.isInfinite($)
332	1403	8	FastMath.java	log10	lores	double	0	RET	Double.isInfinite($)
333	1447	8	FastMath.java	pow	y	double	0	RET	$ == 0.0
334	1451	8	FastMath.java	pow	x	double	0	RET	$ != $
335	1456	8	FastMath.java	pow	x	double	0	RET	$ == 0
336	1458	12	FastMath.java	pow	bits	long	0	RET	($ & 0x8000000000000000L) != 0
337	1462	16	FastMath.java	pow	yi	long	0	RET	y == $
337	1462	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
337	1462	16	FastMath.java	pow	y	double	0	RET	$ == yi
337	1462	16	FastMath.java	pow	y	double	0	RET	$ < 0
338	1466	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
338	1466	16	FastMath.java	pow	yi	long	0	RET	y == $
338	1466	16	FastMath.java	pow	y	double	0	RET	$ > 0
338	1466	16	FastMath.java	pow	y	double	0	RET	$ == yi
339	1471	12	FastMath.java	pow	y	double	0	RET	$ < 0
340	1474	12	FastMath.java	pow	y	double	0	RET	$ > 0
341	1481	8	FastMath.java	pow	x	double	0	RET	$ == Double.POSITIVE_INFINITY
342	1482	12	FastMath.java	pow	y	double	0	RET	$ != $
343	1485	12	FastMath.java	pow	y	double	1	RET	$ < 0.0
344	1492	8	FastMath.java	pow	y	double	0	RET	$ == Double.POSITIVE_INFINITY
345	1493	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
346	1497	12	FastMath.java	pow	x	double	1	RET	$ * $ > 1.0
347	1504	8	FastMath.java	pow	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
348	1505	12	FastMath.java	pow	y	double	0	RET	$ != $
349	1509	12	FastMath.java	pow	y	double	0	RET	$ < 0
350	1511	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
350	1511	16	FastMath.java	pow	yi	long	0	RET	y == $
350	1511	16	FastMath.java	pow	y	double	0	RET	$ == yi
351	1518	12	FastMath.java	pow	y	double	0	RET	$ > 0
352	1520	16	FastMath.java	pow	yi	long	0	RET	y == $
352	1520	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
352	1520	16	FastMath.java	pow	y	double	0	RET	$ == yi
353	1528	8	FastMath.java	pow	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
354	1530	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
355	1534	12	FastMath.java	pow	x	double	1	RET	$ * $ < 1.0
356	1542	8	FastMath.java	pow	x	double	0	RET	$ < 0
357	1544	12	FastMath.java	pow	THIS	FastMath	0	RET	y <= -$.TWO_POWER_53
357	1544	12	FastMath.java	pow	THIS	FastMath	0	RET	y >= $.TWO_POWER_53
357	1544	12	FastMath.java	pow	y	double	0	RET	$ <= -TWO_POWER_53
357	1544	12	FastMath.java	pow	y	double	0	RET	$ >= TWO_POWER_53
358	1548	12	FastMath.java	pow	y	double	1	RET	$ == (long) $
359	1559	8	FastMath.java	pow	y	double	1	DEF	$ < 8e298
359	1559	8	FastMath.java	pow	y	double	1	DEF	$ > -8e298
360	1572	8	FastMath.java	pow	lores	double	0	RET	Double.isInfinite($)
361	1615	8	FastMath.java	pow	e	int	1	RET	$ == 0
362	1617	15	FastMath.java	pow	e	int	0	DEF	$ < 0
9940	1638	8	FastMath.java	pow	e	int	0	NIL-WHILE	$ != 0
363	1640	12	FastMath.java	pow	e	int	0	DEF	($ & 0x1) != 0
364	1821	8	FastMath.java	sinQ	xb	double	0	DEF	$ != 0.0
365	1951	8	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
366	1984	8	FastMath.java	tanQ	xb	double	0	DEF	$ != 0.0
367	1988	12	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
368	2030	8	FastMath.java	reducePayneHanek	shift	int	1	DEF	$ != 0
369	2061	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
369	2061	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
369	2061	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
369	2061	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
369	2061	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
370	2075	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
370	2075	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
370	2075	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
370	2075	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
370	2075	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
371	2095	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
371	2095	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
371	2095	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
371	2095	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
371	2095	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
372	2147	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
372	2147	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
372	2147	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
372	2147	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
372	2147	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
373	2161	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
373	2161	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
373	2161	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
373	2161	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
373	2161	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
374	2181	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
374	2181	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
374	2181	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
374	2181	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
374	2181	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
375	2203	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
375	2203	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
375	2203	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
375	2203	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
375	2203	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
376	2235	8	FastMath.java	sin	x	double	0	DEF	$ < 0
377	2241	8	FastMath.java	sin	xa	double	0	RET	$ == 0.0
378	2243	12	FastMath.java	sin	bits	long	0	RET	$ < 0
379	2249	8	FastMath.java	sin	xa	double	0	RET	$ != $
379	2249	8	FastMath.java	sin	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
380	2254	8	FastMath.java	sin	xa	double	1	DEF	$ > 3294198.0
381	2263	15	FastMath.java	sin	xa	double	0	DEF	$ > 1.5707963267948966
382	2270	8	FastMath.java	sin	negative	boolean	0	DEF	$
383	2299	8	FastMath.java	cos	x	double	0	DEF	$ < 0
384	2303	8	FastMath.java	cos	xa	double	0	RET	$ != $
384	2303	8	FastMath.java	cos	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
385	2309	8	FastMath.java	cos	xa	double	1	DEF	$ > 3294198.0
386	2318	15	FastMath.java	cos	xa	double	0	DEF	$ > 1.5707963267948966
387	2354	8	FastMath.java	tan	x	double	0	DEF	$ < 0
388	2360	8	FastMath.java	tan	xa	double	0	RET	$ == 0.0
389	2362	12	FastMath.java	tan	bits	long	0	RET	$ < 0
390	2368	8	FastMath.java	tan	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
390	2368	8	FastMath.java	tan	xa	double	0	RET	$ != $
391	2374	8	FastMath.java	tan	xa	double	1	DEF	$ > 3294198.0
392	2383	15	FastMath.java	tan	xa	double	0	DEF	$ > 1.5707963267948966
393	2390	8	FastMath.java	tan	xa	double	0	DEF	$ > 1.5
394	2406	8	FastMath.java	tan	quadrant	int	1	DEF	($ & 1) == 0
395	2412	8	FastMath.java	tan	negative	boolean	0	DEF	$
396	2438	8	FastMath.java	atan	xa	double	0	RET	$ == 0.0
397	2442	8	FastMath.java	atan	xa	double	0	DEF	$ < 0
398	2449	8	FastMath.java	atan	xa	double	0	RET	$ > 1.633123935319537E16
399	2454	8	FastMath.java	atan	xa	double	1	DEF	$ < 1
400	2476	8	FastMath.java	atan	idx	int	1	DEF	$ == 0
401	2553	8	FastMath.java	atan	leftPlane	boolean	0	DEF	$
402	2567	8	FastMath.java	atan	negate	boolean	0	DEF	$ ^ leftPlane
402	2567	8	FastMath.java	atan	leftPlane	boolean	0	DEF	negate ^ $
403	2581	8	FastMath.java	atan2	y	double	0	RET	$ != $
403	2581	8	FastMath.java	atan2	x	double	0	RET	$ != $
404	2585	8	FastMath.java	atan2	y	double	0	RET	$ == 0
405	2590	12	FastMath.java	atan2	invx	double	0	RET	$ == 0
406	2591	16	FastMath.java	atan2	x	double	1	RET	$ > 0
407	2598	12	FastMath.java	atan2	invx	double	1	RET	$ < 0
407	2598	12	FastMath.java	atan2	x	double	1	RET	$ < 0
408	2599	16	FastMath.java	atan2	invy	double	1	RET	$ < 0
408	2599	16	FastMath.java	atan2	y	double	1	RET	$ < 0
409	2611	8	FastMath.java	atan2	y	double	0	RET	$ == Double.POSITIVE_INFINITY
410	2612	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
411	2616	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
412	2623	8	FastMath.java	atan2	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
413	2624	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
414	2628	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
415	2635	8	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
416	2636	12	FastMath.java	atan2	y	double	0	RET	$ > 0
416	2636	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
417	2640	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
417	2640	12	FastMath.java	atan2	y	double	0	RET	$ < 0
418	2645	8	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
419	2647	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0.0
419	2647	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
420	2651	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
420	2651	12	FastMath.java	atan2	y	double	0	RET	$ < 0
421	2658	8	FastMath.java	atan2	x	double	0	RET	$ == 0
422	2659	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
422	2659	12	FastMath.java	atan2	y	double	0	RET	$ > 0
423	2663	12	FastMath.java	atan2	y	double	0	RET	$ < 0
423	2663	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
424	2670	8	FastMath.java	atan2	r	double	0	RET	Double.isInfinite($)
425	2687	8	FastMath.java	atan2	ra	double	0	DEF	$ == 0
426	2702	6	FastMath.java	asin	x	double	0	RET	$ != $
427	2706	6	FastMath.java	asin	x	double	0	RET	$ > 1.0
427	2706	6	FastMath.java	asin	x	double	0	RET	$ < -1.0
428	2710	6	FastMath.java	asin	x	double	0	RET	$ == 1.0
429	2714	6	FastMath.java	asin	x	double	0	RET	$ == -1.0
430	2718	6	FastMath.java	asin	x	double	0	RET	$ == 0.0
431	2778	6	FastMath.java	acos	x	double	0	RET	$ != $
432	2782	6	FastMath.java	acos	x	double	0	RET	$ > 1.0
432	2782	6	FastMath.java	acos	x	double	0	RET	$ < -1.0
433	2786	6	FastMath.java	acos	x	double	0	RET	$ == -1.0
434	2790	6	FastMath.java	acos	x	double	0	RET	$ == 1.0
435	2794	6	FastMath.java	acos	x	double	0	RET	$ == 0
436	2838	6	FastMath.java	acos	r	double	0	RET	Double.isInfinite($)
437	2865	6	FastMath.java	cbrt	exponent	int	0	RET	$ == -1023
438	2866	10	FastMath.java	cbrt	x	double	0	RET	$ == 0
439	2877	6	FastMath.java	cbrt	exponent	int	0	RET	$ == 1024
440	2932	6	FastMath.java	cbrt	subnormal	boolean	0	DEF	$
441	2946	8	FastMath.java	toRadians	x	double	0	RET	$ == 0.0
441	2946	8	FastMath.java	toRadians	x	double	0	RET	Double.isInfinite($)
442	2958	8	FastMath.java	toRadians	result	double	0	DEF	$ == 0
443	2971	8	FastMath.java	toDegrees	x	double	0	RET	Double.isInfinite($)
443	2971	8	FastMath.java	toDegrees	x	double	0	RET	$ == 0.0
444	3033	8	FastMath.java	ulp	x	double	0	RET	Double.isInfinite($)
445	3045	8	FastMath.java	ulp	x	float	0	RET	Float.isInfinite($)
446	3060	8	FastMath.java	scalb	n	int	0	RET	$ < 1024
446	3060	8	FastMath.java	scalb	n	int	0	RET	$ > -1023
447	3065	8	FastMath.java	scalb	d	double	0	RET	Double.isNaN($)
447	3065	8	FastMath.java	scalb	d	double	0	RET	$ == 0
447	3065	8	FastMath.java	scalb	d	double	0	RET	Double.isInfinite($)
448	3068	8	FastMath.java	scalb	n	int	0	RET	$ < -2098
449	3071	8	FastMath.java	scalb	n	int	0	RET	$ > 2097
450	3084	8	FastMath.java	scalb	n	int	1	RET	$ < 0
451	3086	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
452	3089	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -53
453	3098	16	FastMath.java	scalb	mostSignificantLostBit	long	0	DEF	$ != 0
454	3110	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
9941	3113	16	FastMath.java	scalb	mantissa	long	0	NIL-WHILE	($ >>> 52) != 1
455	3120	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
456	3126	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
457	3144	8	FastMath.java	scalb	n	int	0	RET	$ > -127
457	3144	8	FastMath.java	scalb	n	int	0	RET	$ < 128
458	3149	8	FastMath.java	scalb	f	float	0	RET	Float.isInfinite($)
458	3149	8	FastMath.java	scalb	f	float	0	RET	Float.isNaN($)
458	3149	8	FastMath.java	scalb	f	float	0	RET	$ == 0f
459	3152	8	FastMath.java	scalb	n	int	0	RET	$ < -277
460	3155	8	FastMath.java	scalb	n	int	0	RET	$ > 276
461	3168	8	FastMath.java	scalb	n	int	1	RET	$ < 0
462	3170	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
463	3173	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -24
464	3182	16	FastMath.java	scalb	mostSignificantLostBit	int	0	DEF	$ != 0
465	3194	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
9942	3197	16	FastMath.java	scalb	mantissa	int	0	NIL-WHILE	($ >>> 23) != 1
466	3204	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
467	3210	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
468	3253	8	FastMath.java	nextAfter	d	double	1	RET	Double.isNaN($)
468	3253	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
469	3255	15	FastMath.java	nextAfter	d	double	1	RET	$ == direction
469	3255	15	FastMath.java	nextAfter	direction	double	1	RET	d == $
470	3257	15	FastMath.java	nextAfter	d	double	1	RET	Double.isInfinite($)
471	3259	15	FastMath.java	nextAfter	d	double	0	RET	$ == 0
472	3267	8	FastMath.java	nextAfter	sign	long	1	RET	(direction < d) ^ ($ == 0L)
472	3267	8	FastMath.java	nextAfter	d	double	1	RET	(direction < $) ^ (sign == 0L)
472	3267	8	FastMath.java	nextAfter	direction	double	1	RET	($ < d) ^ (sign == 0L)
473	3309	8	FastMath.java	nextAfter	f	float	1	RET	Double.isNaN($)
473	3309	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
474	3311	15	FastMath.java	nextAfter	f	float	1	RET	$ == direction
474	3311	15	FastMath.java	nextAfter	direction	double	1	RET	f == $
475	3313	15	FastMath.java	nextAfter	f	float	1	RET	Float.isInfinite($)
476	3315	15	FastMath.java	nextAfter	f	float	0	RET	$ == 0f
477	3323	8	FastMath.java	nextAfter	sign	int	1	RET	(direction < f) ^ ($ == 0)
477	3323	8	FastMath.java	nextAfter	f	float	1	RET	(direction < $) ^ (sign == 0)
477	3323	8	FastMath.java	nextAfter	direction	double	1	RET	($ < f) ^ (sign == 0)
478	3338	8	FastMath.java	floor	x	double	0	RET	$ != $
479	3342	8	FastMath.java	floor	THIS	FastMath	0	RET	x >= $.TWO_POWER_52
479	3342	8	FastMath.java	floor	THIS	FastMath	0	RET	x <= -$.TWO_POWER_52
479	3342	8	FastMath.java	floor	x	double	0	RET	$ >= TWO_POWER_52
479	3342	8	FastMath.java	floor	x	double	0	RET	$ <= -TWO_POWER_52
480	3347	8	FastMath.java	floor	y	long	0	DEF	$ != x
480	3347	8	FastMath.java	floor	x	double	0	DEF	$ < 0
480	3347	8	FastMath.java	floor	x	double	0	DEF	y != $
481	3351	8	FastMath.java	floor	y	long	0	RET	$ == 0
482	3365	8	FastMath.java	ceil	x	double	0	RET	$ != $
483	3370	8	FastMath.java	ceil	y	double	0	RET	$ == x
483	3370	8	FastMath.java	ceil	x	double	0	RET	y == $
484	3376	8	FastMath.java	ceil	y	double	0	RET	$ == 0
485	3391	8	FastMath.java	rint	d	double	0	RET	$ > 0.5
486	3392	12	FastMath.java	rint	y	double	0	RET	$ == -1.0
487	3397	8	FastMath.java	rint	d	double	0	RET	$ < 0.5
488	3446	8	FastMath.java	min	a	float	0	RET	$ > b
488	3446	8	FastMath.java	min	b	float	0	RET	a > $
489	3449	8	FastMath.java	min	a	float	0	RET	$ < b
489	3449	8	FastMath.java	min	b	float	0	RET	a < $
490	3453	8	FastMath.java	min	a	float	0	RET	$ != b
490	3453	8	FastMath.java	min	b	float	0	RET	a != $
491	3459	8	FastMath.java	min	bits	int	0	RET	$ == 0x80000000
492	3471	8	FastMath.java	min	a	double	0	RET	$ > b
492	3471	8	FastMath.java	min	b	double	0	RET	a > $
493	3474	8	FastMath.java	min	a	double	0	RET	$ < b
493	3474	8	FastMath.java	min	b	double	0	RET	a < $
494	3478	8	FastMath.java	min	a	double	0	RET	$ != b
494	3478	8	FastMath.java	min	b	double	0	RET	a != $
495	3484	8	FastMath.java	min	bits	long	0	RET	$ == 0x8000000000000000L
496	3514	8	FastMath.java	max	a	float	0	RET	$ > b
496	3514	8	FastMath.java	max	b	float	0	RET	a > $
497	3517	8	FastMath.java	max	a	float	0	RET	$ < b
497	3517	8	FastMath.java	max	b	float	0	RET	a < $
498	3521	8	FastMath.java	max	a	float	0	RET	$ != b
498	3521	8	FastMath.java	max	b	float	0	RET	a != $
499	3527	8	FastMath.java	max	bits	int	0	RET	$ == 0x80000000
500	3539	8	FastMath.java	max	a	double	0	RET	$ > b
500	3539	8	FastMath.java	max	b	double	0	RET	a > $
501	3542	8	FastMath.java	max	a	double	0	RET	$ < b
501	3542	8	FastMath.java	max	b	double	0	RET	a < $
502	3546	8	FastMath.java	max	a	double	0	RET	$ != b
502	3546	8	FastMath.java	max	b	double	0	RET	a != $
503	3552	8	FastMath.java	max	bits	long	0	RET	$ == 0x8000000000000000L
504	3573	8	FastMath.java	hypot	x	double	1	RET	Double.isInfinite($)
504	3573	8	FastMath.java	hypot	y	double	1	RET	Double.isInfinite($)
505	3575	15	FastMath.java	hypot	x	double	1	RET	Double.isNaN($)
505	3575	15	FastMath.java	hypot	y	double	1	RET	Double.isNaN($)
506	3581	12	FastMath.java	hypot	expX	int	1	RET	$ > expY + 27
506	3581	12	FastMath.java	hypot	expY	int	1	RET	expX > $ + 27
507	3584	19	FastMath.java	hypot	expX	int	1	RET	expY > $ + 27
507	3584	19	FastMath.java	hypot	expY	int	1	RET	$ > expX + 27
508	3646	8	FastMath.java	copySign	m	long	0	RET	($^s) >= 0
508	3646	8	FastMath.java	copySign	s	long	0	RET	(m^$) >= 0
509	3667	8	FastMath.java	copySign	m	int	0	RET	($^s) >= 0
509	3667	8	FastMath.java	copySign	s	int	0	RET	(m^$) >= 0
9912	108	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 7
9913	121	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
145	128	12	FastMathCalc.java	buildSinCosTables	i	int	1	DEF	($ & 1) == 0
9914	177	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
9915	215	8	FastMathCalc.java	slowCos	i	int	0	NIL-FOR	$ >= 0
146	219	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 1) != 0
147	226	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 2) != 0
148	235	8	FastMathCalc.java	slowCos	result	double	0	DEF	$ != null
9916	259	8	FastMathCalc.java	slowSin	i	int	0	NIL-FOR	$ >= 0
149	263	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 1) == 0
150	270	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 2) != 0
151	279	8	FastMathCalc.java	slowSin	result	double	0	DEF	$ != null
9917	303	8	FastMathCalc.java	slowexp	i	int	0	NIL-FOR	$ >= 0
152	316	8	FastMathCalc.java	slowexp	result	double	0	DEF	$ != null
153	330	8	FastMathCalc.java	split	d	double	1	DEF	$ < 8e298
153	330	8	FastMathCalc.java	split	d	double	1	DEF	$ > -8e298
154	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ > -8e298
154	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ < 8e298
155	407	8	FastMathCalc.java	splitReciprocal	in	double	0	DEF	$[0] == 0.0
156	415	8	FastMathCalc.java	splitReciprocal	result	double	0	DEF	$[1] != $[1]
9918	422	8	FastMathCalc.java	splitReciprocal	i	int	0	NIL-FOR	$ < 2
9919	510	8	FastMathCalc.java	expint	p	int	0	NIL-WHILE	$ > 0
157	511	12	FastMathCalc.java	expint	p	int	0	DEF	($ & 1) != 0
158	522	8	FastMathCalc.java	expint	result	double	0	DEF	$ != null
9920	578	8	FastMathCalc.java	slowLog	i	int	0	NIL-FOR	$ >= 0
159	639	8	FastMathCalc.java	format	d	double	1	RET	$ != $
160	654	8	FastMathCalc.java	checkLen	expectedLen	int	0	DimensionMismatchException	$ != actual
160	654	8	FastMathCalc.java	checkLen	actual	int	0	DimensionMismatchException	expectedLen != $
3419	97	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	$.normalization == $.DstNormalization.ORTHOGONAL_DST_I
3420	101	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	type == $.TransformType.FORWARD
3420	101	8	FastSineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
3421	141	8	FastSineTransformer.java	fst	THIS	FastSineTransformer	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo(f.$.length)
3421	141	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($.length)
3422	146	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	$[0] != 0.0
3423	152	8	FastSineTransformer.java	fst	n	int	0	RET	$ == 1
11879	161	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
11879	161	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
11880	174	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
11880	174	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
12170	97	8	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	NIL-FOR	i < value.$.length
12170	97	8	FieldHermiteInterpolator.java	addSamplePoint	i	int	0	NIL-FOR	$ < value.length
12170	97	8	FieldHermiteInterpolator.java	addSamplePoint	value	T[]	0	NIL-FOR	i < $.length
4037	100	12	FieldHermiteInterpolator.java	addSamplePoint	i	int	0	DEF	$ > 1
12171	103	16	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	NIL-FOR	j < y.$.length
12171	103	16	FieldHermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < y.length
12171	103	16	FieldHermiteInterpolator.java	addSamplePoint	y	T[]	0	NIL-FOR	j < $.length
12172	112	12	FieldHermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < n
12172	112	12	FieldHermiteInterpolator.java	addSamplePoint	n	int	0	NIL-FOR	j < $
4038	114	16	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	ZeroException	x.equals($.abscissae.get(n - (j + 1)))
4038	114	16	FieldHermiteInterpolator.java	addSamplePoint	j	int	0	ZeroException	x.equals(abscissae.get(n - ($ + 1)))
4038	114	16	FieldHermiteInterpolator.java	addSamplePoint	n	int	0	ZeroException	x.equals(abscissae.get($ - (j + 1)))
4038	114	16	FieldHermiteInterpolator.java	addSamplePoint	x	T	0	ZeroException	$.equals(abscissae.get(n - (j + 1)))
12173	118	16	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	NIL-FOR	k < y.$.length
12173	118	16	FieldHermiteInterpolator.java	addSamplePoint	k	int	0	NIL-FOR	$ < y.length
12173	118	16	FieldHermiteInterpolator.java	addSamplePoint	y	T[]	0	NIL-FOR	k < $.length
4039	144	8	FieldHermiteInterpolator.java	value	THIS	FieldHermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
12174	150	8	FieldHermiteInterpolator.java	value	THIS	FieldHermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
12174	150	8	FieldHermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
12175	152	12	FieldHermiteInterpolator.java	value	THIS	FieldHermiteInterpolator	0	NIL-FOR	k < value.$.length
12175	152	12	FieldHermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
12175	152	12	FieldHermiteInterpolator.java	value	value	T[]	0	NIL-FOR	k < $.length
4040	175	8	FieldHermiteInterpolator.java	derivatives	THIS	FieldHermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
12176	183	8	FieldHermiteInterpolator.java	derivatives	i	int	0	NIL-FOR	$ < order
12176	183	8	FieldHermiteInterpolator.java	derivatives	order	int	0	NIL-FOR	i < $
12177	191	8	FieldHermiteInterpolator.java	derivatives	THIS	FieldHermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
12177	191	8	FieldHermiteInterpolator.java	derivatives	i	int	0	NIL-FOR	$ < topDiagonal.size()
12178	194	12	FieldHermiteInterpolator.java	derivatives	j	int	0	NIL-FOR	$ >= 0
12179	195	16	FieldHermiteInterpolator.java	derivatives	THIS	FieldHermiteInterpolator	0	NIL-FOR	k < derivatives[j].length
12179	195	16	FieldHermiteInterpolator.java	derivatives	k	int	0	NIL-FOR	$ < derivatives[j].length
12179	195	16	FieldHermiteInterpolator.java	derivatives	j	int	0	NIL-FOR	k < derivatives[$].length
12179	195	16	FieldHermiteInterpolator.java	derivatives	derivatives	T[][]	0	NIL-FOR	k < $[j].length
4041	200	16	FieldHermiteInterpolator.java	derivatives	j	int	0	DEF	$ > 0
1680	86	8	FieldLUDecomposition.java	FieldLUDecomposition	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
10628	100	8	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
10628	100	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
10629	107	8	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	$ < m
10629	107	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	col < $
10630	112	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < col
10630	112	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	row < $
10631	115	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < row
10631	115	16	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	i < $
10632	123	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
10632	123	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
10633	126	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < col
10633	126	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	i < $
1681	131	16	FieldLUDecomposition.java	FieldLUDecomposition	THIS	FieldLUDecomposition	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
1681	131	16	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
1681	131	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
1682	138	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	RET	$ >= m
1682	138	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	RET	nonZero >= $
1683	144	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	$ != col
1683	144	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	nonZero != $
10634	146	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < m
10634	146	16	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	i < $
10635	159	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
10635	159	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
1684	173	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.singular
1684	173	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.cachedL == null
10636	176	12	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
10636	176	12	FieldLUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
10637	178	16	FieldLUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
10637	178	16	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1685	193	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.cachedU == null
1685	193	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.singular
10638	196	12	FieldLUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
10638	196	12	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
10639	198	16	FieldLUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
10639	198	16	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1686	216	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.singular
1686	216	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.cachedP == null
10640	219	12	FieldLUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
10640	219	12	FieldLUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1687	240	8	FieldLUDecomposition.java	getDeterminant	THIS	FieldLUDecomposition	1	RET	$.singular
10641	245	12	FieldLUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
10641	245	12	FieldLUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
670	78	8	FieldRotation.java	FieldRotation	needsNormalization	boolean	1	DEF	$
671	120	8	FieldRotation.java	FieldRotation	norm	T	0	MathIllegalArgumentException	$.getReal() == 0
672	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m[0].length != 3
672	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m.$.length != 3
672	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m[2].length != 3
672	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m[1].length != 3
672	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$[0].length != 3
672	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$.length != 3
672	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$[2].length != 3
672	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$[1].length != 3
673	184	8	FieldRotation.java	FieldRotation	det	T	0	NotARotationMatrixException	$.getReal() < 0.0
674	268	8	FieldRotation.java	FieldRotation	normProduct	T	0	MathArithmeticException	$.getReal() == 0
675	274	8	FieldRotation.java	FieldRotation	normProduct	T	1	DEF	dot.getReal() < ((2.0e-15 - 1.0) * $.getReal())
675	274	8	FieldRotation.java	FieldRotation	dot	T	1	DEF	$.getReal() < ((2.0e-15 - 1.0) * normProduct.getReal())
676	346	8	FieldRotation.java	mat2quat	s	T	1	DEF	$.getReal() > -0.19
677	355	12	FieldRotation.java	mat2quat	s	T	1	DEF	$.getReal() > -0.19
678	364	16	FieldRotation.java	mat2quat	s	T	1	DEF	$.getReal() > -0.19
679	432	8	FieldRotation.java	getAxis	squaredSine	T	1	RET	$.getReal() == 0
680	435	15	FieldRotation.java	getAxis	THIS	FieldRotation	0	RET	$.q0.getReal() < 0
681	448	8	FieldRotation.java	getAngle	THIS	FieldRotation	1	RET	$.q0.getReal() > 0.1
681	448	8	FieldRotation.java	getAngle	THIS	FieldRotation	1	RET	$.q0.getReal() < -0.1
682	450	15	FieldRotation.java	getAngle	THIS	FieldRotation	0	RET	$.q0.getReal() < 0
683	494	8	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
684	503	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
684	503	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
685	510	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
686	519	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
686	519	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
687	526	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
688	535	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
688	535	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
689	542	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
690	551	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
690	551	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
691	558	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
692	567	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
692	567	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
693	574	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
694	583	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
694	583	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
695	590	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
696	599	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
696	599	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
697	606	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
698	615	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
698	615	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
699	622	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
700	631	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
700	631	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
701	638	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
702	647	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
702	647	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
703	654	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
704	663	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
704	663	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
705	679	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
705	679	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
9967	1090	8	FieldRotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
706	1131	12	FieldRotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
706	1131	12	FieldRotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
706	1131	12	FieldRotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
780	73	8	FieldVector3D.java	FieldVector3D	THIS	FieldVector3D	0	DimensionMismatchException	v.$.length != 3
780	73	8	FieldVector3D.java	FieldVector3D	v	T[]	0	DimensionMismatchException	$.length != 3
781	376	8	FieldVector3D.java	getNormInf	xAbs	T	1	RET	$.getReal() <= yAbs.getReal()
781	376	8	FieldVector3D.java	getNormInf	yAbs	T	1	RET	xAbs.getReal() <= $.getReal()
782	377	12	FieldVector3D.java	getNormInf	yAbs	T	1	RET	$.getReal() <= zAbs.getReal()
782	377	12	FieldVector3D.java	getNormInf	zAbs	T	1	RET	yAbs.getReal() <= $.getReal()
783	383	12	FieldVector3D.java	getNormInf	xAbs	T	1	RET	$.getReal() <= zAbs.getReal()
783	383	12	FieldVector3D.java	getNormInf	zAbs	T	1	RET	xAbs.getReal() <= $.getReal()
784	525	8	FieldVector3D.java	normalize	s	T	0	MathArithmeticException	$.getReal() == 0
785	549	8	FieldVector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
786	553	8	FieldVector3D.java	orthogonal	THIS	FieldVector3D	1	RET	FastMath.abs($.x.getReal()) <= threshold
786	553	8	FieldVector3D.java	orthogonal	threshold	double	1	RET	FastMath.abs(x.getReal()) <= $
787	556	15	FieldVector3D.java	orthogonal	THIS	FieldVector3D	1	RET	FastMath.abs($.y.getReal()) <= threshold
787	556	15	FieldVector3D.java	orthogonal	threshold	double	1	RET	FastMath.abs(y.getReal()) <= $
788	582	8	FieldVector3D.java	angle	normProduct	T	0	MathArithmeticException	$.getReal() == 0
789	588	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() > threshold
789	588	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() < -threshold
789	588	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() > $
789	588	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() < -$
790	591	12	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() >= 0
791	618	8	FieldVector3D.java	angle	normProduct	T	0	MathArithmeticException	$.getReal() == 0
792	624	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() < -threshold
792	624	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() > threshold
792	624	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() < -$
792	624	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() > $
793	627	12	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() >= 0
794	718	8	FieldVector3D.java	equals	THIS	FieldVector3D	0	RET	$ == other
794	718	8	FieldVector3D.java	equals	other	Object	0	RET	this == $
795	722	8	FieldVector3D.java	equals	other	Object	0	RET	$ instanceof FieldVector3D
796	725	12	FieldVector3D.java	equals	rhs	FieldVector3D<T>	0	RET	$.isNaN()
797	744	8	FieldVector3D.java	hashCode	THIS	FieldVector3D	0	RET	$.isNaN()
798	865	8	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dy.getReal()
798	865	8	FieldVector3D.java	distanceInf	dy	T	1	RET	dx.getReal() <= $.getReal()
799	866	12	FieldVector3D.java	distanceInf	dy	T	1	RET	$.getReal() <= dz.getReal()
799	866	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dy.getReal() <= $.getReal()
800	872	12	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dz.getReal()
800	872	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dx.getReal() <= $.getReal()
801	891	8	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dy.getReal()
801	891	8	FieldVector3D.java	distanceInf	dy	T	1	RET	dx.getReal() <= $.getReal()
802	892	12	FieldVector3D.java	distanceInf	dy	T	1	RET	$.getReal() <= dz.getReal()
802	892	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dy.getReal() <= $.getReal()
803	898	12	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dz.getReal()
803	898	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dx.getReal() <= $.getReal()
4255	145	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	nbPoints	int	0	NumberIsTooSmallException	$ <= 1
4256	150	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	stepSize	double	0	NotPositiveException	$ <= 0
4257	156	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	THIS	FiniteDifferencesDifferentiator	0	NumberIsTooLargeException	2 * $.halfSampleSpan >= tUpper - tLower
4257	156	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	tLower	double	0	NumberIsTooLargeException	2 * halfSampleSpan >= tUpper - $
4257	156	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	tUpper	double	0	NumberIsTooLargeException	2 * halfSampleSpan >= $ - tLower
12302	201	8	FiniteDifferencesDifferentiator.java	evaluate	THIS	FiniteDifferencesDifferentiator	0	NIL-FOR	i < $.nbPoints
12302	201	8	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	$ < nbPoints
12303	205	12	FiniteDifferencesDifferentiator.java	evaluate	j	int	0	NIL-FOR	$ <= i
12303	205	12	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	j <= $
12304	221	8	FiniteDifferencesDifferentiator.java	evaluate	THIS	FiniteDifferencesDifferentiator	0	NIL-FOR	i < $.nbPoints
12304	221	8	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	$ < nbPoints
4258	222	12	FiniteDifferencesDifferentiator.java	evaluate	i	int	1	DEF	$ == 0
2347	103	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
3298	58	8	FixedElapsedTime.java	FixedElapsedTime	maxTime	long	0	NumberIsTooSmallException	$ < 0
3299	72	8	FixedElapsedTime.java	isSatisfied	THIS	FixedElapsedTime	0	DEF	$.endTime < 0
3284	43	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	NumberIsTooSmallException	$ <= 0
3285	57	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
2325	89	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
1032	184	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(a0) > $
1032	184	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	FastMath.abs($) > overflow
1033	189	8	Fraction.java	Fraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
1033	189	8	Fraction.java	Fraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
1033	189	8	Fraction.java	Fraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
9990	205	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
1034	212	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(p2) > $
1034	212	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(q2) > $
1034	212	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	FastMath.abs($) > overflow
1034	212	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	FastMath.abs($) > overflow
1035	219	12	Fraction.java	Fraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
1035	219	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
1035	219	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
1035	219	12	Fraction.java	Fraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
1035	219	12	Fraction.java	Fraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
1035	219	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
1035	219	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
1036	231	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
1036	231	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
1037	235	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
1037	235	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
1038	262	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == 0
1039	266	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ < 0
1040	267	12	Fraction.java	Fraction	num	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
1040	267	12	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
1041	277	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
1042	283	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
1043	297	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
1044	338	8	Fraction.java	equals	THIS	Fraction	0	RET	$ == other
1044	338	8	Fraction.java	equals	other	Object	0	RET	this == $
1045	341	8	Fraction.java	equals	other	Object	0	RET	$ instanceof Fraction
1046	411	8	Fraction.java	negate	THIS	Fraction	0	MathArithmeticException	$.numerator==Integer.MIN_VALUE
1047	482	8	Fraction.java	addSub	fraction	Fraction	0	NullArgumentException	$ == null
1048	486	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
1049	489	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
1049	489	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
1050	495	8	Fraction.java	addSub	d1	int	0	RET	$==1
1051	519	8	Fraction.java	addSub	w	BigInteger	0	MathArithmeticException	$.bitLength() > 31
1052	539	8	Fraction.java	multiply	fraction	Fraction	0	NullArgumentException	$ == null
1053	542	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
1053	542	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
1053	542	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
1054	574	8	Fraction.java	divide	fraction	Fraction	0	NullArgumentException	$ == null
1055	577	8	Fraction.java	divide	THIS	Fraction	0	MathArithmeticException	fraction.$.numerator == 0
1055	577	8	Fraction.java	divide	fraction	Fraction	0	MathArithmeticException	$.numerator == 0
1056	617	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ == 0
1057	621	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
1058	625	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
1058	625	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
1059	628	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ < 0
1060	629	12	Fraction.java	getReducedFraction	numerator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
1060	629	12	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
1061	656	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
1062	658	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
1016	177	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
1017	179	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
1018	199	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1019	221	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
1020	254	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
11363	99	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2551	141	8	Frequency.java	incrementValue	v	Comparable<?>	0	DEF	$ instanceof Integer
2552	146	12	Frequency.java	incrementValue	count	Long	1	DEF	$ == null
11364	237	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
2553	251	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
2554	257	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
2555	319	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
2556	370	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
2557	373	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
2558	377	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
2559	384	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
2560	391	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
2560	391	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
2560	391	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
2561	395	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
2561	395	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
2561	395	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
11365	400	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2562	402	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
2562	402	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
2562	402	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
2563	462	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
2564	519	12	Frequency.java	getMode	frequency	long	0	DEF	$ > mostPopular
2564	519	12	Frequency.java	getMode	mostPopular	long	0	DEF	frequency > $
2565	527	12	Frequency.java	getMode	frequency	long	0	DEF	$ == mostPopular
2565	527	12	Frequency.java	getMode	mostPopular	long	0	DEF	frequency == $
11366	549	8	Frequency.java	merge	iter	Iterator<Entry<Comparable<?>,Long>>	0	NIL-WHILE	$.hasNext()
2566	615	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
2566	615	8	Frequency.java	equals	obj	Object	0	RET	this == $
2567	618	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
2568	622	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
2569	623	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
2569	623	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
2570	626	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
2570	626	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
4188	429	8	FunctionUtils.java	sample	n	int	0	NotStrictlyPositiveException	$ <= 0
4189	434	8	FunctionUtils.java	sample	min	double	0	NumberIsTooLargeException	$ >= max
4189	434	8	FunctionUtils.java	sample	max	double	0	NumberIsTooLargeException	min >= $
12232	440	8	FunctionUtils.java	sample	i	int	0	NIL-FOR	$ < n
12232	440	8	FunctionUtils.java	sample	n	int	0	NIL-FOR	i < $
3341	146	8	FuzzyKMeansClusterer.java	FuzzyKMeansClusterer	fuzziness	double	0	NumberIsTooSmallException	$ <= 1.0d
3342	211	8	FuzzyKMeansClusterer.java	getMembershipMatrix	THIS	FuzzyKMeansClusterer	0	MathIllegalStateException	$.membershipMatrix == null
3343	242	8	FuzzyKMeansClusterer.java	getObjectiveFunctionValue	THIS	FuzzyKMeansClusterer	0	MathIllegalStateException	$.points == null
3343	242	8	FuzzyKMeansClusterer.java	getObjectiveFunctionValue	THIS	FuzzyKMeansClusterer	0	MathIllegalStateException	$.clusters == null
3344	278	8	FuzzyKMeansClusterer.java	cluster	THIS	FuzzyKMeansClusterer	0	NumberIsTooSmallException	size < $.k
3344	278	8	FuzzyKMeansClusterer.java	cluster	size	int	0	NumberIsTooSmallException	$ < k
3345	289	8	FuzzyKMeansClusterer.java	cluster	size	int	0	RET	$ == 0
11839	297	8	FuzzyKMeansClusterer.java	cluster	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.k
11839	297	8	FuzzyKMeansClusterer.java	cluster	i	int	0	NIL-FOR	$ < k
11840	305	8	FuzzyKMeansClusterer.java	cluster	THIS	FuzzyKMeansClusterer	0	NIL-DOWHILE	difference > $.epsilon
11840	305	8	FuzzyKMeansClusterer.java	cluster	iteration	int	0	NIL-DOWHILE	++$ < max
11840	305	8	FuzzyKMeansClusterer.java	cluster	max	int	0	NIL-DOWHILE	++iteration < $
11840	305	8	FuzzyKMeansClusterer.java	cluster	difference	double	0	NIL-DOWHILE	$ > epsilon
11841	329	16	FuzzyKMeansClusterer.java	updateClusterCenters	THIS	FuzzyKMeansClusterer	0	NIL-FOR	idx < arr.$.length
11841	329	16	FuzzyKMeansClusterer.java	updateClusterCenters	idx	int	0	NIL-FOR	$ < arr.length
11841	329	16	FuzzyKMeansClusterer.java	updateClusterCenters	arr	double[]	0	NIL-FOR	idx < $.length
11842	348	8	FuzzyKMeansClusterer.java	updateMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
11842	348	8	FuzzyKMeansClusterer.java	updateMembershipMatrix	i	int	0	NIL-FOR	$ < points.size()
11843	352	12	FuzzyKMeansClusterer.java	updateMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	j < $.clusters.size()
11843	352	12	FuzzyKMeansClusterer.java	updateMembershipMatrix	j	int	0	NIL-FOR	$ < clusters.size()
3346	363	16	FuzzyKMeansClusterer.java	updateMembershipMatrix	THIS	FuzzyKMeansClusterer	0	DEF	$.membershipMatrix[i][j] > maxMembership
3346	363	16	FuzzyKMeansClusterer.java	updateMembershipMatrix	j	int	0	DEF	membershipMatrix[i][$] > maxMembership
3346	363	16	FuzzyKMeansClusterer.java	updateMembershipMatrix	maxMembership	double	0	DEF	membershipMatrix[i][j] > $
3346	363	16	FuzzyKMeansClusterer.java	updateMembershipMatrix	i	int	0	DEF	membershipMatrix[$][j] > maxMembership
11844	376	8	FuzzyKMeansClusterer.java	initializeMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
11844	376	8	FuzzyKMeansClusterer.java	initializeMembershipMatrix	i	int	0	NIL-FOR	$ < points.size()
11845	377	12	FuzzyKMeansClusterer.java	initializeMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	j < $.k
11845	377	12	FuzzyKMeansClusterer.java	initializeMembershipMatrix	j	int	0	NIL-FOR	$ < k
11846	393	8	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
11846	393	8	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	i	int	0	NIL-FOR	$ < points.size()
11847	394	12	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	THIS	FuzzyKMeansClusterer	0	NIL-FOR	j < $.clusters.size()
11847	394	12	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	j	int	0	NIL-FOR	$ < clusters.size()
11848	408	8	FuzzyKMeansClusterer.java	saveMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
11848	408	8	FuzzyKMeansClusterer.java	saveMembershipMatrix	i	int	0	NIL-FOR	$ < points.size()
2580	80	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
2472	81	8	GTest.java	g	THIS	GTest	0	DimensionMismatchException	expected.$.length < 2
2472	81	8	GTest.java	g	expected	double[]	0	DimensionMismatchException	$.length < 2
2473	84	8	GTest.java	g	THIS	GTest	0	DimensionMismatchException	expected.$.length != observed.$.length
2473	84	8	GTest.java	g	expected	double[]	0	DimensionMismatchException	$.length != observed.length
2473	84	8	GTest.java	g	observed	long[]	0	DimensionMismatchException	expected.length != $.length
11304	92	8	GTest.java	g	THIS	GTest	0	NIL-FOR	i < observed.$.length
11304	92	8	GTest.java	g	i	int	0	NIL-FOR	$ < observed.length
11304	92	8	GTest.java	g	observed	long[]	0	NIL-FOR	i < $.length
2474	98	8	GTest.java	g	sumExpected	double	0	DEF	Math.abs($ - sumObserved) > 10E-6
2474	98	8	GTest.java	g	sumObserved	double	0	DEF	Math.abs(sumExpected - $) > 10E-6
11305	103	8	GTest.java	g	THIS	GTest	0	NIL-FOR	i < observed.$.length
11305	103	8	GTest.java	g	i	int	0	NIL-FOR	$ < observed.length
11305	103	8	GTest.java	g	observed	long[]	0	NIL-FOR	i < $.length
2475	242	8	GTest.java	gTest	alpha	double	0	OutOfRangeException	$ > 0.5
2475	242	8	GTest.java	gTest	alpha	double	0	OutOfRangeException	$ <= 0
11306	264	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
11306	264	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
11306	264	8	GTest.java	entropy	k	long[][]	0	NIL-FOR	i < $.length
11307	265	12	GTest.java	entropy	THIS	GTest	0	NIL-FOR	j < k[i].length
11307	265	12	GTest.java	entropy	j	int	0	NIL-FOR	$ < k[i].length
11307	265	12	GTest.java	entropy	i	int	0	NIL-FOR	j < k[$].length
11307	265	12	GTest.java	entropy	k	long[][]	0	NIL-FOR	j < $[i].length
11308	269	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
11308	269	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
11308	269	8	GTest.java	entropy	k	long[][]	0	NIL-FOR	i < $.length
11309	270	12	GTest.java	entropy	THIS	GTest	0	NIL-FOR	j < k[i].length
11309	270	12	GTest.java	entropy	j	int	0	NIL-FOR	$ < k[i].length
11309	270	12	GTest.java	entropy	i	int	0	NIL-FOR	j < k[$].length
11309	270	12	GTest.java	entropy	k	long[][]	0	NIL-FOR	j < $[i].length
2476	271	16	GTest.java	entropy	j	int	0	DEF	k[i][$] != 0
2476	271	16	GTest.java	entropy	i	int	0	DEF	k[$][j] != 0
2476	271	16	GTest.java	entropy	k	long[][]	0	DEF	$[i][j] != 0
11310	294	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
11310	294	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
11310	294	8	GTest.java	entropy	k	long[]	0	NIL-FOR	i < $.length
11311	297	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
11311	297	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
11311	297	8	GTest.java	entropy	k	long[]	0	NIL-FOR	i < $.length
2477	298	12	GTest.java	entropy	i	int	0	DEF	k[$] != 0
2477	298	12	GTest.java	entropy	k	long[]	0	DEF	$[i] != 0
2478	352	8	GTest.java	gDataSetsComparison	THIS	GTest	0	DimensionMismatchException	observed1.$.length < 2
2478	352	8	GTest.java	gDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
2479	355	8	GTest.java	gDataSetsComparison	THIS	GTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
2479	355	8	GTest.java	gDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
2479	355	8	GTest.java	gDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
11312	371	8	GTest.java	gDataSetsComparison	THIS	GTest	0	NIL-FOR	i < observed1.$.length
11312	371	8	GTest.java	gDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
11312	371	8	GTest.java	gDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2480	372	12	GTest.java	gDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
2480	372	12	GTest.java	gDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
2480	372	12	GTest.java	gDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
2480	372	12	GTest.java	gDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
2481	383	8	GTest.java	gDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
2481	383	8	GTest.java	gDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
2482	426	8	GTest.java	rootLogLikelihoodRatio	k11	long	0	DEF	(double) $ / ($ + k12) < (double) k21 / (k21 + k22)
2482	426	8	GTest.java	rootLogLikelihoodRatio	k12	long	0	DEF	(double) k11 / (k11 + $) < (double) k21 / (k21 + k22)
2482	426	8	GTest.java	rootLogLikelihoodRatio	k21	long	0	DEF	(double) k11 / (k11 + k12) < (double) $ / ($ + k22)
2482	426	8	GTest.java	rootLogLikelihoodRatio	k22	long	0	DEF	(double) k11 / (k11 + k12) < (double) k21 / (k21 + $)
2483	531	8	GTest.java	gTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
2483	531	8	GTest.java	gTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
3376	247	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
3376	247	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
3377	249	15	Gamma.java	logGamma	x	double	1	RET	$ < 0.5
3378	251	15	Gamma.java	logGamma	x	double	1	RET	$ <= 2.5
3379	253	15	Gamma.java	logGamma	x	double	1	RET	$ <= 8.0
11856	256	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ <= n
11856	256	12	Gamma.java	logGamma	n	int	0	NIL-FOR	i <= $
3380	316	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
3380	316	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
3380	316	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
3380	316	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
3381	318	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
3382	320	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x >= $ + 1
3382	320	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ >= a + 1
11857	329	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
11857	329	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	FastMath.abs($/sum) > epsilon
11857	329	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	$ < Double.POSITIVE_INFINITY
11857	329	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	FastMath.abs(an/$) > epsilon
11857	329	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	FastMath.abs(an/sum) > $
11857	329	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
3383	339	12	Gamma.java	regularizedGammaP	n	double	1	MaxCountExceededException	$ >= maxIterations
3383	339	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxCountExceededException	n >= $
3384	341	19	Gamma.java	regularizedGammaP	sum	double	1	DEF	Double.isInfinite($)
3385	394	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
3385	394	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
3385	394	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
3385	394	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
3386	396	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
3387	398	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $ + 1.0
3387	398	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a + 1.0
3388	446	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
3388	446	8	Gamma.java	digamma	x	double	0	RET	$ > 0
3389	452	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
3390	476	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
3390	476	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
3391	480	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
11858	514	8	Gamma.java	lanczos	i	int	0	NIL-FOR	$ > 0
3392	534	8	Gamma.java	invGamma1pm1	x	double	0	NumberIsTooSmallException	$ < -0.5
3393	537	8	Gamma.java	invGamma1pm1	x	double	0	NumberIsTooLargeException	$ > 1.5
3394	543	8	Gamma.java	invGamma1pm1	t	double	1	DEF	$ < 0.0
3395	569	12	Gamma.java	invGamma1pm1	x	double	1	DEF	$ > 0.5
3396	604	12	Gamma.java	invGamma1pm1	x	double	1	DEF	$ > 0.5
3397	628	8	Gamma.java	logGamma1p	x	double	0	NumberIsTooSmallException	$ < -0.5
3398	631	8	Gamma.java	logGamma1p	x	double	0	NumberIsTooLargeException	$ > 1.5
3399	650	8	Gamma.java	gamma	x	double	0	RET	$ <= 0.0
3399	650	8	Gamma.java	gamma	x	double	0	RET	$ == FastMath.rint($)
3400	656	8	Gamma.java	gamma	absX	double	1	DEF	$ <= 20.0
3401	657	12	Gamma.java	gamma	x	double	1	DEF	$ >= 1.0
11859	668	16	Gamma.java	gamma	t	double	0	NIL-WHILE	$ > 2.5
11860	683	16	Gamma.java	gamma	t	double	0	NIL-WHILE	$ < -0.5
3402	694	12	Gamma.java	gamma	x	double	1	DEF	$ > 0.0
1264	134	8	GammaDistribution.java	GammaDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1265	137	8	GammaDistribution.java	GammaDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1266	238	8	GammaDistribution.java	density	x	double	0	RET	$ < 0
1267	242	8	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	FastMath.log(y) >= $.maxLogY
1267	242	8	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	y <= $.minY
1267	242	8	GammaDistribution.java	density	y	double	0	RET	FastMath.log($) >= maxLogY
1267	242	8	GammaDistribution.java	density	y	double	0	RET	$ <= minY
1268	276	8	GammaDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1269	374	8	GammaDistribution.java	sample	THIS	GammaDistribution	0	RET	$.shape < 1
1270	383	16	GammaDistribution.java	sample	p	double	1	RET	$ <= 1
1271	389	20	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.exp(-$)
1271	389	20	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.exp(-x)
1272	401	20	GammaDistribution.java	sample	THIS	GammaDistribution	1	DEF	u2 > FastMath.pow(x, $.shape - 1)
1272	401	20	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.pow($, shape - 1)
1272	401	20	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.pow(x, shape - 1)
1273	420	12	GammaDistribution.java	sample	v	double	0	DEF	$ <= 0
1274	428	12	GammaDistribution.java	sample	x2	double	0	RET	u < 1 - 0.0331 * $ * $
1274	428	12	GammaDistribution.java	sample	u	double	0	RET	$ < 1 - 0.0331 * x2 * x2
1275	432	12	GammaDistribution.java	sample	v	double	0	RET	FastMath.log(u) < 0.5 * x2 + d * (1 - $ + FastMath.log($))
1275	432	12	GammaDistribution.java	sample	x2	double	0	RET	FastMath.log(u) < 0.5 * $ + d * (1 - v + FastMath.log(v))
1275	432	12	GammaDistribution.java	sample	u	double	0	RET	FastMath.log($) < 0.5 * x2 + d * (1 - v + FastMath.log(v))
1275	432	12	GammaDistribution.java	sample	d	double	0	RET	FastMath.log(u) < 0.5 * x2 + $ * (1 - v + FastMath.log(v))
4328	53	8	GaussIntegrator.java	GaussIntegrator	THIS	GaussIntegrator	0	DimensionMismatchException	points.$.length != weights.$.length
4328	53	8	GaussIntegrator.java	GaussIntegrator	points	double[]	0	DimensionMismatchException	$.length != weights.length
4328	53	8	GaussIntegrator.java	GaussIntegrator	weights	double[]	0	DimensionMismatchException	points.length != $.length
12359	92	8	GaussIntegrator.java	integrate	THIS	GaussIntegrator	0	NIL-FOR	i < $.points.$.length
12359	92	8	GaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < points.length
12371	163	8	GaussIntegratorFactory.java	transform	THIS	GaussIntegratorFactory	0	NIL-FOR	i < points.$.length
12371	163	8	GaussIntegratorFactory.java	transform	i	int	0	NIL-FOR	$ < points.length
12371	163	8	GaussIntegratorFactory.java	transform	points	double[]	0	NIL-FOR	i < $.length
1346	110	8	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	NullArgumentException	$ == null
1347	118	8	GaussNewtonOptimizer.java	doOptimize	nR	int	0	DimensionMismatchException	weightMatrix.getRowDimension() != $
1347	118	8	GaussNewtonOptimizer.java	doOptimize	weightMatrix	RealMatrix	0	DimensionMismatchException	$.getRowDimension() != nR
1348	121	8	GaussNewtonOptimizer.java	doOptimize	nR	int	0	DimensionMismatchException	weightMatrix.getColumnDimension() != $
1348	121	8	GaussNewtonOptimizer.java	doOptimize	weightMatrix	RealMatrix	0	DimensionMismatchException	$.getColumnDimension() != nR
10119	127	8	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
10119	127	8	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
10120	136	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
10121	150	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
10121	150	12	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
10122	158	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
10122	158	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
10123	163	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
10123	163	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
10124	166	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < nC
10124	166	20	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	l < $
1349	173	12	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	$ != null
1350	175	16	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	RET	$
10125	188	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nC
10125	188	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	i < $
3158	91	8	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	NullArgumentException	$ == null
11740	101	8	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
11740	101	8	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
11741	110	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
11742	124	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
11742	124	12	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
11743	132	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
11743	132	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
11744	137	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
11744	137	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
11745	140	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < nC
11745	140	20	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	l < $
3159	147	12	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	$ != null
3160	149	16	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	RET	$
11746	163	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nC
11746	163	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	i < $
3161	179	8	GaussNewtonOptimizer.java	checkParameters	THIS	GaussNewtonOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3161	179	8	GaussNewtonOptimizer.java	checkParameters	THIS	GaussNewtonOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
2011	110	8	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	NullArgumentException	$ == null
11033	120	8	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
11033	120	8	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
11034	130	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
11035	144	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
11035	144	12	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
11036	152	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
11036	152	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
11037	157	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
11037	157	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
11038	160	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < nC
11038	160	20	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	l < $
11039	174	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nC
11039	174	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	i < $
2012	182	12	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	$ != null
2013	184	16	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	RET	$
4071	63	8	Gaussian.java	Gaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
4072	229	8	Gaussian.java	value	coeff	double	1	DEF	$ <= Precision.SAFE_MIN
12215	233	12	Gaussian.java	value	THIS	Gaussian	0	NIL-FOR	n < f.$.length
12215	233	12	Gaussian.java	value	n	int	0	NIL-FOR	$ < f.length
12215	233	12	Gaussian.java	value	f	double[]	0	NIL-FOR	n < $.length
12216	238	16	Gaussian.java	value	k	int	0	NIL-FOR	$ >= 0
4073	240	20	Gaussian.java	value	k	int	1	DEF	$ > 2
4074	242	27	Gaussian.java	value	k	int	0	DEF	$ == 2
4075	246	16	Gaussian.java	value	n	int	0	DEF	($ & 0x1) == 1
3279	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ < 0
3279	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ > 1
3280	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ > 1
3280	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ < 0
11810	120	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
11810	120	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
11811	154	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
3281	159	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
3281	159	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
3282	165	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
3282	165	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
3283	175	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
1224	60	8	GeometricDistribution.java	GeometricDistribution	p	double	0	OutOfRangeException	$ > 1
1224	60	8	GeometricDistribution.java	GeometricDistribution	p	double	0	OutOfRangeException	$ <= 0
1225	79	8	GeometricDistribution.java	probability	x	int	1	DEF	$ < 0
1226	91	8	GeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
2345	114	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
2346	208	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	MathIllegalStateException	$.getN() > 0
3525	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	1	DEF	$.previousState != null
3525	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
11959	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
11959	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
11960	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
11960	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
12316	46	8	GradientFunction.java	value	THIS	GradientFunction	0	NIL-FOR	i < point.$.length
12316	46	8	GradientFunction.java	value	i	int	0	NIL-FOR	$ < point.length
12316	46	8	GradientFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
12317	56	8	GradientFunction.java	value	THIS	GradientFunction	0	NIL-FOR	i < point.$.length
12317	56	8	GradientFunction.java	value	i	int	0	NIL-FOR	$ < point.length
12317	56	8	GradientFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
3098	95	12	GradientMultivariateOptimizer.java	parseOptimizationData	THIS	GradientMultivariateOptimizer	0	DEF	$.data instanceof ObjectiveFunctionGradient
3466	228	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ > 0.9999
3466	228	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ < 0.0001
3467	263	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ < 0.0001
3467	263	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ > 0.9999
3468	269	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ < 0.0001
3468	269	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ > 0.9999
3469	275	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ < 0.0001
3469	275	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ > 0.9999
3470	281	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ > 999.9
3470	281	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ < 1.0001
3471	315	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ <= 6
3471	315	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ % 2 != 0
3472	319	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ < 0.0001
3472	319	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ > 0.9999
3473	325	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ > 0.9999
3473	325	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ < 0.0001
3474	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
3474	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
3474	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
11919	377	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
11919	377	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
11920	384	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
11920	384	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
11921	389	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
11921	389	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
11922	391	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
11922	391	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
3475	414	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ <= 0
3475	414	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ >= 7
3476	428	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
11923	429	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
11923	429	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
11923	429	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
11924	434	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
11924	434	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
11924	434	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
11925	470	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
11925	470	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
11925	470	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
11926	477	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
11926	477	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
3477	479	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
3477	479	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
11927	485	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
11927	485	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
11927	485	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
3478	494	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
3478	494	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
3478	494	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
3478	494	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
3478	494	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
11928	496	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
11928	496	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
11928	496	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
11929	501	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
11929	501	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
11929	501	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
3479	505	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * FastMath.max(1.0e-15, $)
3479	505	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * FastMath.max(1.0e-15, initialNorm)
11930	513	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
11930	513	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
11930	513	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
11931	532	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
11931	532	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
11932	533	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
11932	533	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
11932	533	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
11933	541	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
11933	541	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
11933	541	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
11934	567	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
11934	567	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
11935	573	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
11935	573	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
11936	580	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
11936	580	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
11936	580	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
3480	586	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
3480	586	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
11937	624	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-DOWHILE	$.isLastStep
3481	629	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
3482	634	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
3483	638	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3484	650	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
3484	650	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
3484	650	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
3484	650	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
3484	650	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
3484	650	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
11938	659	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
3485	664	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3485	664	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
3485	664	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3485	664	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
3485	664	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
3485	664	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3485	664	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
3485	664	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3485	664	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3485	664	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3486	677	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
11939	686	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < $.mainSetDimension
11939	686	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < mainSetDimension
3487	692	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
3487	692	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
3487	692	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
3487	692	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
3488	713	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3488	713	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
3489	716	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
3490	725	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
3490	725	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
3491	731	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
3491	731	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3491	731	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3492	743	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
3493	751	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
3493	751	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
3494	756	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
3494	756	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3494	756	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3495	767	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
3496	769	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
3496	769	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3496	769	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3497	780	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.isLastStep
3497	780	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
3497	780	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3498	792	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
3499	799	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
11940	802	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
11940	802	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
11941	808	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
11941	808	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
11942	814	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
11942	814	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
11942	814	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
11943	817	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
11943	817	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
11943	817	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
11944	820	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
11944	820	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
11944	820	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
11945	825	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
11945	825	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
11945	825	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
11946	830	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
11946	830	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
11947	831	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
11947	831	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
11948	832	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
11948	832	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
11948	832	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
3500	840	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
3501	847	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
3502	852	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
3503	862	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
3504	875	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
3505	877	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
3506	880	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
3506	880	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
3507	882	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
3507	882	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3508	884	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
3508	884	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
3509	889	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
3509	889	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
3509	889	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
3510	893	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
3510	893	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
3510	893	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
3511	898	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
3512	905	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
3512	905	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
3513	908	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
3513	908	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
3513	908	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
3513	908	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
3514	927	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
3515	933	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
3541	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynomials == null
3541	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials == null
11984	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynomials.$.length
11984	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynomials.length
3542	192	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
3543	199	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials != null
11985	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
11985	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
11985	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
11986	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
11986	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
11986	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
3544	212	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
11987	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
11987	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
11988	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
11988	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
3545	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials.$.length <= (mu + 4)
3545	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials == null
3545	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynomials.length <= ($ + 4)
11989	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
11989	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
3546	264	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
3547	272	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
3548	276	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
3549	280	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
11990	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
11990	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
3550	304	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
11991	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < scale.$.length
11991	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < scale.length
11991	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	scale	double[]	0	NIL-FOR	i < $.length
11992	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
11992	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
3551	339	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
11993	342	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
3552	353	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
11994	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
11994	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
11995	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
11995	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
11996	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
11996	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
11997	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
11997	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
3170	110	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	THIS	HaltonSequenceGenerator	0	OutOfRangeException	dimension > bases.$.length
3170	110	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	dimension	int	0	OutOfRangeException	$ < 1
3170	110	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	dimension	int	0	OutOfRangeException	$ > bases.length
3170	110	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	bases	int[]	0	OutOfRangeException	dimension > $.length
3171	114	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	THIS	HaltonSequenceGenerator	0	DimensionMismatchException	weights.$.length != bases.$.length
3171	114	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	bases	int[]	0	DimensionMismatchException	weights.length != $.length
3171	114	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	weights	int[]	0	DimensionMismatchException	$ != null
3171	114	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	weights	int[]	0	DimensionMismatchException	$.length != bases.length
11760	127	8	HaltonSequenceGenerator.java	nextVector	THIS	HaltonSequenceGenerator	0	NIL-FOR	i < $.dimension
11760	127	8	HaltonSequenceGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
11761	132	12	HaltonSequenceGenerator.java	nextVector	index	int	0	NIL-WHILE	$ > 0
4076	172	8	HarmonicOscillator.java	value	THIS	HarmonicOscillator	0	DEF	f.$.length > 1
4076	172	8	HarmonicOscillator.java	value	f	double[]	0	DEF	$.length > 1
12217	175	12	HarmonicOscillator.java	value	THIS	HarmonicOscillator	0	NIL-FOR	i < f.$.length
12217	175	12	HarmonicOscillator.java	value	i	int	0	NIL-FOR	$ < f.length
12217	175	12	HarmonicOscillator.java	value	f	double[]	0	NIL-FOR	i < $.length
12131	90	8	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	i < value.$.length
12131	90	8	HermiteInterpolator.java	addSamplePoint	i	int	0	NIL-FOR	$ < value.length
12131	90	8	HermiteInterpolator.java	addSamplePoint	value	double[]	0	NIL-FOR	i < $.length
3999	93	12	HermiteInterpolator.java	addSamplePoint	i	int	0	DEF	$ > 1
12132	95	16	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	j < y.$.length
12132	95	16	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < y.length
12132	95	16	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	j < $.length
12133	104	12	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < n
12133	104	12	HermiteInterpolator.java	addSamplePoint	n	int	0	NIL-FOR	j < $
4000	107	16	HermiteInterpolator.java	addSamplePoint	inv	double	0	ZeroException	Double.isInfinite($)
12134	110	16	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	k < y.$.length
12134	110	16	HermiteInterpolator.java	addSamplePoint	k	int	0	NIL-FOR	$ < y.length
12134	110	16	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	k < $.length
12135	139	8	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < polynomials.$.length
12135	139	8	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < polynomials.length
12135	139	8	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	i < $.length
12136	145	8	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
12136	145	8	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < topDiagonal.size()
12137	147	12	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	k < polynomials.$.length
12137	147	12	HermiteInterpolator.java	getPolynomials	k	int	0	NIL-FOR	$ < polynomials.length
12137	147	12	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	k < $.length
12138	176	8	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
12138	176	8	HermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
12139	178	12	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	k < value.$.length
12139	178	12	HermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
12139	178	12	HermiteInterpolator.java	value	value	double[]	0	NIL-FOR	k < $.length
12140	209	8	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
12140	209	8	HermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
12141	211	12	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	k < value.$.length
12141	211	12	HermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
12141	211	12	HermiteInterpolator.java	value	value	DerivativeStructure[]	0	NIL-FOR	k < $.length
4001	227	8	HermiteInterpolator.java	checkInterpolation	THIS	HermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
4329	66	8	HermiteRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
12360	87	8	HermiteRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
12360	87	8	HermiteRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
12361	101	12	HermiteRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
12361	101	12	HermiteRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
12362	122	12	HermiteRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
12363	126	16	HermiteRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
12363	126	16	HermiteRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4330	136	16	HermiteRuleFactory.java	computeRule	done	boolean	0	DEF	$
4331	137	20	HermiteRuleFactory.java	computeRule	ha	double	1	DEF	$ * hc < 0
4331	137	20	HermiteRuleFactory.java	computeRule	hc	double	1	DEF	ha * $ < 0
4332	164	8	HermiteRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 != 0
12364	166	12	HermiteRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
12364	166	12	HermiteRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
1447	61	8	HessenbergTransformer.java	HessenbergTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1448	84	8	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.cachedP == null
10317	89	12	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ < n
10317	89	12	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	i < $
10318	90	16	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ < n
10318	90	16	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	j < $
10319	95	12	HessenbergTransformer.java	getP	m	int	0	NIL-FOR	$ >= 1
1449	96	16	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.householderVectors[m][m - 1] != 0.0
1449	96	16	HessenbergTransformer.java	getP	m	int	0	DEF	householderVectors[$][$ - 1] != 0.0
10320	97	20	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
10320	97	20	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
10321	101	20	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ <= high
10321	101	20	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	j <= $
10322	104	24	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
10322	104	24	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
10323	111	24	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
10323	111	24	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
1450	130	8	HessenbergTransformer.java	getPT	THIS	HessenbergTransformer	0	DEF	$.cachedPt == null
1451	144	8	HessenbergTransformer.java	getH	THIS	HessenbergTransformer	0	DEF	$.cachedH == null
10324	147	12	HessenbergTransformer.java	getH	i	int	0	NIL-FOR	$ < m
10324	147	12	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	i < $
1452	148	16	HessenbergTransformer.java	getH	i	int	0	DEF	$ > 0
10325	154	16	HessenbergTransformer.java	getH	j	int	0	NIL-FOR	$ < m
10325	154	16	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	j < $
10326	184	8	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	$ <= high - 1
10326	184	8	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	m <= $ - 1
10327	187	12	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
10327	187	12	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
1453	191	12	HessenbergTransformer.java	transform	scale	double	0	DEF	Precision.equals($, 0)
10328	194	16	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
10328	194	16	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
10329	206	16	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ < n
10329	206	16	HessenbergTransformer.java	transform	n	int	0	NIL-FOR	j < $
10330	208	20	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
10330	208	20	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
10331	212	20	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
10331	212	20	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
10332	217	16	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
10332	217	16	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
10333	219	20	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ >= m
10333	219	20	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	j >= $
10334	223	20	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ <= high
10334	223	20	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	j <= $
12027	117	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < $.mainSetDimension
12027	117	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
12028	119	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < STATIC_E.$.length
12028	119	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < STATIC_E.length
3572	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	1	DEF	$.previousState != null
3572	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
12025	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
12025	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
12026	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
12026	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1134	86	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NotStrictlyPositiveException	$ <= 0
1135	90	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NotPositiveException	$ < 0
1136	94	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NotPositiveException	$ < 0
1137	99	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	numberOfSuccesses > $
1137	99	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NumberIsTooLargeException	$ > populationSize
1138	103	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	sampleSize > $
1138	103	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NumberIsTooLargeException	$ > populationSize
1139	118	8	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
1139	118	8	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
1140	120	15	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
1140	120	15	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
1141	199	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x > $[1]
1141	199	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x < $[0]
1141	199	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ > domain[1]
1141	199	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ < domain[0]
1142	228	8	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x <= $[0]
1142	228	8	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ <= domain[0]
1143	230	15	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
1143	230	15	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
10018	254	8	HypergeometricDistribution.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
10018	254	8	HypergeometricDistribution.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
1144	279	8	HypergeometricDistribution.java	getNumericalVariance	THIS	HypergeometricDistribution	0	DEF	$.numericalVarianceIsCalculated
3165	121	8	ISAACRandom.java	setSeed	seed	int[]	0	RET	$ == null
3166	128	8	ISAACRandom.java	setSeed	seedLen	int	0	DEF	$ < rslLen
3166	128	8	ISAACRandom.java	setSeed	rslLen	int	0	DEF	seedLen < $
11751	129	12	ISAACRandom.java	setSeed	j	int	0	NIL-FOR	$ < rslLen
11751	129	12	ISAACRandom.java	setSeed	rslLen	int	0	NIL-FOR	j < $
3167	140	8	ISAACRandom.java	next	THIS	ISAACRandom	0	DEF	$.count < 0
11752	152	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacI < H_SIZE
11753	156	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacJ < H_SIZE
11754	193	8	ISAACRandom.java	initState	THIS	ISAACRandom	0	NIL-FOR	j < $.arr.$.length
11754	193	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < arr.length
11755	196	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < 4
11756	200	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
11757	213	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
194	81	8	Incrementor.java	Incrementor	cb	MaxCountExceededCallback	0	NullArgumentException	$ == null
9932	136	8	Incrementor.java	incrementCount	i	int	0	NIL-FOR	$ < value
9932	136	8	Incrementor.java	incrementCount	value	int	0	NIL-FOR	i < $
195	155	8	Incrementor.java	incrementCount	THIS	Incrementor	0	DEF	++$.count > $.maximalCount
806	121	8	Interval.java	checkPoint	THIS	Interval	1	RET	point < $.lower - tolerance
806	121	8	Interval.java	checkPoint	THIS	Interval	1	RET	point > $.upper + tolerance
806	121	8	Interval.java	checkPoint	point	double	1	RET	$ < lower - tolerance
806	121	8	Interval.java	checkPoint	point	double	1	RET	$ > upper + tolerance
806	121	8	Interval.java	checkPoint	tolerance	double	1	RET	point < lower - $
806	121	8	Interval.java	checkPoint	tolerance	double	1	RET	point > upper + $
807	123	15	Interval.java	checkPoint	THIS	Interval	1	RET	point > $.lower + tolerance
807	123	15	Interval.java	checkPoint	THIS	Interval	1	RET	point < $.upper - tolerance
807	123	15	Interval.java	checkPoint	point	double	1	RET	$ > lower + tolerance
807	123	15	Interval.java	checkPoint	point	double	1	RET	$ < upper - tolerance
807	123	15	Interval.java	checkPoint	tolerance	double	1	RET	point > lower + $
807	123	15	Interval.java	checkPoint	tolerance	double	1	RET	point < upper - $
813	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	$ < 0
813	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	Double.isInfinite($)
814	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
814	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
815	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
815	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
816	139	8	IntervalsSet.java	computeGeometricalProperties	THIS	IntervalsSet	1	DEF	$.getTree(false).getCut() == null
817	150	12	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	Double.isInfinite($)
818	152	19	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	$ >= Precision.SAFE_MIN
9972	169	8	IntervalsSet.java	getInf	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
9973	186	8	IntervalsSet.java	getSup	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
819	224	8	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	1	DEF	$.getCut() == null
820	225	12	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	0	DEF	(Boolean) $.getAttribute()
821	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(low, loc) == $.Location.INSIDE
821	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(high, loc) == $.Location.INSIDE
821	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(low, $) == Location.INSIDE
821	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(high, $) == Location.INSIDE
821	241	12	IntervalsSet.java	recurseList	low	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
821	241	12	IntervalsSet.java	recurseList	high	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
4341	76	8	IterativeLegendreGaussIntegrator.java	IterativeLegendreGaussIntegrator	n	int	0	NotStrictlyPositiveException	$ <= 0
4342	137	12	IterativeLegendreGaussIntegrator.java	doIntegrate	THIS	IterativeLegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
4342	137	12	IterativeLegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
4342	137	12	IterativeLegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
12372	173	8	IterativeLegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
12372	173	8	IterativeLegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
1409	81	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != $.getColumnDimension()
1410	85	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	b.getDimension() != $.getRowDimension()
1410	85	8	IterativeLinearSolver.java	checkParameters	b	RealVector	0	DimensionMismatchException	$.getDimension() != a.getRowDimension()
1411	89	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	x0.getDimension() != $.getColumnDimension()
1411	89	8	IterativeLinearSolver.java	checkParameters	x0	RealVector	0	DimensionMismatchException	$.getDimension() != a.getColumnDimension()
1378	63	8	JacobiPreconditioner.java	create	n	int	0	NonSquareOperatorException	a.getRowDimension() != $
1378	63	8	JacobiPreconditioner.java	create	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != n
1379	67	8	JacobiPreconditioner.java	create	a	RealLinearOperator	1	DEF	$ instanceof AbstractRealMatrix
10248	69	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
10248	69	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
10249	74	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
10249	74	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
12233	48	8	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	i < point.$.length
12233	48	8	JacobianFunction.java	value	i	int	0	NIL-FOR	$ < point.length
12233	48	8	JacobianFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
12234	58	8	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	i < dsY.$.length
12234	58	8	JacobianFunction.java	value	i	int	0	NIL-FOR	$ < dsY.length
12234	58	8	JacobianFunction.java	value	dsY	DerivativeStructure[]	0	NIL-FOR	i < $.length
12235	59	12	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	j < point.$.length
12235	59	12	JacobianFunction.java	value	j	int	0	NIL-FOR	$ < point.length
12235	59	12	JacobianFunction.java	value	point	double[]	0	NIL-FOR	j < $.length
3600	133	8	JacobianMatrices.java	JacobianMatrices	parameters	String	1	DEF	$ == null
12033	138	12	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < parameters.$.length
12033	138	12	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < parameters.length
12033	138	12	JacobianMatrices.java	JacobianMatrices	parameters	String	0	NIL-FOR	i < $.length
12034	150	8	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
12034	150	8	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < stateDim
3601	171	8	JacobianMatrices.java	registerVariationalEquations	ode	FirstOrderDifferentialEquations	0	MismatchedEquations	expandable.getPrimary() != $
3601	171	8	JacobianMatrices.java	registerVariationalEquations	expandable	ExpandableStatefulODE	0	MismatchedEquations	$.getPrimary() != ode
3602	217	12	JacobianMatrices.java	setParameterStep	THIS	JacobianMatrices	0	RET	parameter.equals($.param.getParameterName())
3602	217	12	JacobianMatrices.java	setParameterStep	parameter	String	0	RET	$.equals(param.getParameterName())
3603	250	8	JacobianMatrices.java	setInitialMainStateJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
3604	275	12	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	RET	pName.equals($.param.getParameterName())
3604	275	12	JacobianMatrices.java	setInitialParameterJacobian	pName	String	0	RET	$.equals(param.getParameterName())
3605	277	16	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
12035	298	8	JacobianMatrices.java	getCurrentMainSetJacobian	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
12035	298	8	JacobianMatrices.java	getCurrentMainSetJacobian	i	int	0	NIL-FOR	$ < stateDim
3606	316	12	JacobianMatrices.java	getCurrentParameterJacobian	THIS	JacobianMatrices	0	RET	$.param.getParameterName().equals(pName)
3606	316	12	JacobianMatrices.java	getCurrentParameterJacobian	pName	String	0	RET	param.getParameterName().equals($)
3607	333	8	JacobianMatrices.java	checkDimension	arrayDimension	int	0	DimensionMismatchException	$ != expected
3607	333	8	JacobianMatrices.java	checkDimension	expected	int	0	DimensionMismatchException	arrayDimension != $
3162	109	12	JacobianMultivariateVectorOptimizer.java	parseOptimizationData	THIS	JacobianMultivariateVectorOptimizer	0	DEF	$.data instanceof ModelFunctionJacobian
3318	204	8	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	NumberIsTooSmallException	points.size() < $.k
3318	204	8	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
11828	218	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
11828	218	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
3319	223	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
3320	248	12	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
3320	248	12	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
3321	270	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
3321	270	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
3321	270	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
11829	320	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
11829	320	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
3322	321	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
3322	321	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
11830	327	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	THIS	KMeansPlusPlusClusterer	0	NIL-WHILE	resultSet.size() < $.k
11830	327	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<CentroidCluster<T>>	0	NIL-WHILE	$.size() < k
11831	333	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
11831	333	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
3323	334	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
3323	334	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
11832	349	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
11832	349	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
3324	350	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
3324	350	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
3325	352	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
3325	352	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
3326	362	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
11833	363	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
3327	364	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
3327	364	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
3328	372	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
3329	381	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	THIS	KMeansPlusPlusClusterer	0	DEF	resultSet.size() < $.k
3329	381	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<CentroidCluster<T>>	0	DEF	$.size() < k
11834	384	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
11834	384	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
3330	386	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
3330	386	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
3331	389	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
3331	389	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
3331	389	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
3332	420	12	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
3333	431	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
3333	431	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
3334	440	8	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
3335	468	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
3335	468	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
3336	476	8	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
11835	503	12	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
11835	503	12	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
3337	505	16	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
3337	505	16	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
3338	515	8	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster<T>	0	ConvergenceException	$ == null
3339	536	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
3339	536	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
11836	556	12	KMeansPlusPlusClusterer.java	centroidOf	THIS	KMeansPlusPlusClusterer	0	NIL-FOR	i < centroid.$.length
11836	556	12	KMeansPlusPlusClusterer.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
11836	556	12	KMeansPlusPlusClusterer.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
11837	560	8	KMeansPlusPlusClusterer.java	centroidOf	THIS	KMeansPlusPlusClusterer	0	NIL-FOR	i < centroid.$.length
11837	560	8	KMeansPlusPlusClusterer.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
11837	560	8	KMeansPlusPlusClusterer.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
11316	113	8	KMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
11316	113	8	KMeansPlusPlusClusterer.java	cluster	numTrials	int	0	NIL-FOR	i < $
2494	121	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2495	134	12	KMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
2495	134	12	KMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
2496	168	8	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
2496	168	8	KMeansPlusPlusClusterer.java	cluster	k	int	0	NumberIsTooSmallException	points.size() < $
11317	182	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
11317	182	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
2497	187	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
2498	212	12	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
2498	212	12	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
2499	235	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
2499	235	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
2499	235	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
11318	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
11318	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2500	290	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
2500	290	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
11319	296	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
11319	296	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
11320	302	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
11320	302	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2501	303	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2501	303	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
11321	318	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
11321	318	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2502	319	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2502	319	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2503	321	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
2503	321	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
2504	331	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
11322	332	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
2505	333	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2505	333	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2506	341	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
2507	350	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	DEF	$.size() < k
2507	350	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	DEF	resultSet.size() < $
11323	353	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
11323	353	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
2508	355	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
2508	355	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
2509	358	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
2509	358	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
2509	358	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
2510	389	12	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2511	400	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
2511	400	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
2512	409	8	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
2513	436	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
2513	436	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
2514	444	8	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
11324	471	12	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
11324	471	12	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
2515	473	16	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
2515	473	16	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
2516	483	8	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster<T>	0	ConvergenceException	$ == null
2517	506	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
2517	506	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
0	136	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getControlMatrix() == null
1	156	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialStateEstimate() == null
2	162	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	DimensionMismatchException	$.transitionMatrix.getColumnDimension() != $.stateEstimation.getDimension()
3	169	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialErrorCovariance() == null
4	178	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	NonSquareMatrixException	$.transitionMatrix.isSquare()
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix != null
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() != 1
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() > 0
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() != $.transitionMatrix.getRowDimension()
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() > 0
6	199	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.measurementMatrix.getColumnDimension() != $.transitionMatrix.getRowDimension()
7	207	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	measNoise.getRowDimension() != $.measurementMatrix.getRowDimension()
7	207	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != measurementMatrix.getRowDimension()
7	207	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
8	298	8	KalmanFilter.java	predict	THIS	KalmanFilter	0	DimensionMismatchException	u.getDimension() != $.controlMatrix.getColumnDimension()
8	298	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$.getDimension() != controlMatrix.getColumnDimension()
8	298	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$ != null
9	309	8	KalmanFilter.java	predict	u	RealVector	0	DEF	$ != null
10	354	8	KalmanFilter.java	correct	THIS	KalmanFilter	0	DimensionMismatchException	z.getDimension() != $.measurementMatrix.getRowDimension()
10	354	8	KalmanFilter.java	correct	z	RealVector	0	DimensionMismatchException	$.getDimension() != measurementMatrix.getRowDimension()
1276	86	8	KolmogorovSmirnovDistribution.java	KolmogorovSmirnovDistribution	n	int	0	NotStrictlyPositiveException	$ <= 0
1277	154	8	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	d <= $
1277	154	8	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninvhalf
1278	158	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	d <= $
1278	158	15	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	$ < d
1278	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	ninvhalf < $
1278	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninv
10048	164	12	KolmogorovSmirnovDistribution.java	cdf	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
10048	164	12	KolmogorovSmirnovDistribution.java	cdf	i	int	0	NIL-FOR	$ <= n
1279	170	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	1 - $ <= d
1279	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	1 - ninv <= $
1279	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ < 1
1280	174	15	KolmogorovSmirnovDistribution.java	cdf	d	double	0	RET	1 <= $
10049	203	8	KolmogorovSmirnovDistribution.java	exactK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
10049	203	8	KolmogorovSmirnovDistribution.java	exactK	i	int	0	NIL-FOR	$ <= n
10050	238	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ < m
10050	238	8	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	i < $
10051	239	12	KolmogorovSmirnovDistribution.java	roundedK	j	int	0	NIL-FOR	$ < m
10051	239	12	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	j < $
10052	248	8	KolmogorovSmirnovDistribution.java	roundedK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
10052	248	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ <= n
1281	274	8	KolmogorovSmirnovDistribution.java	createH	hDouble	double	0	NumberIsTooLargeException	$ >= 1
10053	295	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
10053	295	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
10054	296	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < m
10054	296	12	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	j < $
1282	297	16	KolmogorovSmirnovDistribution.java	createH	j	int	1	DEF	i - $ + 1 < 0
1282	297	16	KolmogorovSmirnovDistribution.java	createH	i	int	1	DEF	$ - j + 1 < 0
10055	311	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
10055	311	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
10056	318	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
10056	318	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
1283	328	8	KolmogorovSmirnovDistribution.java	createH	h	BigFraction	0	DEF	$.compareTo(BigFraction.ONE_HALF) == 1
10057	343	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
10057	343	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
10058	344	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < i + 1
10058	344	12	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	j < $ + 1
1284	345	16	KolmogorovSmirnovDistribution.java	createH	j	int	0	DEF	i - $ + 1 > 0
1284	345	16	KolmogorovSmirnovDistribution.java	createH	i	int	0	DEF	$ - j + 1 > 0
10059	346	20	KolmogorovSmirnovDistribution.java	createH	g	int	0	NIL-FOR	$ <= i - j + 1
10059	346	20	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	g <= i - $ + 1
10059	346	20	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	g <= $ - j + 1
2340	101	8	Kurtosis.java	increment	THIS	Kurtosis	0	DEF	$.incMoment
2341	112	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
2342	114	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
2342	114	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
2343	132	8	Kurtosis.java	clear	THIS	Kurtosis	0	DEF	$.incMoment
2344	167	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
2344	167	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2344	167	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
2344	167	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
2344	167	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
11275	178	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11275	178	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11275	178	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1351	87	8	LUDecomposition.java	LUDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
10126	100	8	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
10126	100	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
10127	107	8	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	$ < m
10127	107	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	col < $
10128	110	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < col
10128	110	12	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	row < $
10129	113	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < row
10129	113	16	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	i < $
10130	122	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
10130	122	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
10131	125	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < col
10131	125	16	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	i < $
1352	131	16	LUDecomposition.java	LUDecomposition	sum	double	0	DEF	FastMath.abs($) > largest
1352	131	16	LUDecomposition.java	LUDecomposition	largest	double	0	DEF	FastMath.abs(sum) > $
1353	138	12	LUDecomposition.java	LUDecomposition	THIS	LUDecomposition	0	RET	FastMath.abs($.lu[max][col]) < singularityThreshold
1353	138	12	LUDecomposition.java	LUDecomposition	max	int	0	RET	FastMath.abs(lu[$][col]) < singularityThreshold
1353	138	12	LUDecomposition.java	LUDecomposition	col	int	0	RET	FastMath.abs(lu[max][$]) < singularityThreshold
1353	138	12	LUDecomposition.java	LUDecomposition	singularityThreshold	double	0	RET	FastMath.abs(lu[max][col]) < $
1354	144	12	LUDecomposition.java	LUDecomposition	max	int	0	DEF	$ != col
1354	144	12	LUDecomposition.java	LUDecomposition	col	int	0	DEF	max != $
10132	148	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < m
10132	148	16	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	i < $
10133	161	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
10133	161	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
1355	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.cachedL == null
1355	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.singular
10134	176	12	LUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
10134	176	12	LUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
10135	178	16	LUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
10135	178	16	LUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1356	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.cachedU == null
1356	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.singular
10136	196	12	LUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
10136	196	12	LUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
10137	198	16	LUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
10137	198	16	LUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1357	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.singular
1357	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.cachedP == null
10138	219	12	LUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
10138	219	12	LUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1358	240	8	LUDecomposition.java	getDeterminant	THIS	LUDecomposition	1	RET	$.singular
10139	245	12	LUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
10139	245	12	LUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
4167	105	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
4167	105	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4168	111	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
4168	111	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4169	116	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
4169	116	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
4170	122	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
4170	122	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4171	127	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
4171	127	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
4172	161	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	1	RET	$.complexSolver.isRoot(lo, hi, z)
4172	161	8	LaguerreSolver.java	laguerre	z	Complex	1	RET	complexSolver.isRoot(lo, hi, $)
4172	161	8	LaguerreSolver.java	laguerre	lo	double	1	RET	complexSolver.isRoot($, hi, z)
4172	161	8	LaguerreSolver.java	laguerre	hi	double	1	RET	complexSolver.isRoot(lo, $, z)
12231	167	12	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
12231	167	12	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < root.length
12231	167	12	LaguerreSolver.java	laguerre	root	Complex[]	0	NIL-FOR	i < $.length
4173	168	16	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	DEF	$.complexSolver.isRoot(lo, hi, root[i])
4173	168	16	LaguerreSolver.java	laguerre	i	int	0	DEF	complexSolver.isRoot(lo, hi, root[$])
4173	168	16	LaguerreSolver.java	laguerre	root	Complex[]	0	DEF	complexSolver.isRoot(lo, hi, $[i])
4173	168	16	LaguerreSolver.java	laguerre	lo	double	0	DEF	complexSolver.isRoot($, hi, root[i])
4173	168	16	LaguerreSolver.java	laguerre	hi	double	0	DEF	complexSolver.isRoot(lo, $, root[i])
2854	114	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
2854	114	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
2854	114	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
2855	148	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
2855	148	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
2855	148	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
2856	161	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
2856	161	8	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
11470	164	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
11470	164	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
11470	164	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
2857	170	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
11471	171	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
11471	171	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
11471	171	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
2858	175	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
1962	114	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
1962	114	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
1962	114	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
1963	144	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
1963	144	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
1963	144	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
1964	157	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
1964	157	8	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
10965	160	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
10965	160	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
10965	160	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1965	166	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
10966	167	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
10966	167	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
10966	167	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1966	171	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
4350	224	12	LegendreGaussIntegrator.java	doIntegrate	THIS	LegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
4350	224	12	LegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
4350	224	12	LegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
12374	255	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
12374	255	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
12375	256	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
12375	256	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
4322	68	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
12353	85	8	LegendreHighPrecisionRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
12353	85	8	LegendreHighPrecisionRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
12354	98	12	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
12354	98	12	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
12355	136	12	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
12356	142	16	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
12356	142	16	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4323	159	16	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	DEF	$
4324	160	20	LegendreHighPrecisionRuleFactory.java	computeRule	pa	BigDecimal	1	DEF	$.signum() * pc.signum() <= 0
4324	160	20	LegendreHighPrecisionRuleFactory.java	computeRule	pc	BigDecimal	1	DEF	pa.signum() * $.signum() <= 0
4325	192	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 != 0
12357	194	12	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
12357	194	12	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4333	39	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
12365	56	8	LegendreRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
12365	56	8	LegendreRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
12366	69	12	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
12366	69	12	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
12367	89	12	LegendreRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
12368	93	16	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
12368	93	16	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4334	100	16	LegendreRuleFactory.java	computeRule	done	boolean	0	DEF	$
4335	101	20	LegendreRuleFactory.java	computeRule	pa	double	1	DEF	$ * pc <= 0
4335	101	20	LegendreRuleFactory.java	computeRule	pc	double	1	DEF	pa * $ <= 0
4336	127	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 != 0
12369	129	12	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
12369	129	12	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
10065	341	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
10065	341	12	LevenbergMarquardtOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
10066	350	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
10066	350	12	LevenbergMarquardtOptimizer.java	doOptimize	solvedCols	int	0	NIL-FOR	k < $
1311	355	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
10067	359	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
10067	359	16	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
1312	361	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1313	376	12	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	$ != 0
10068	377	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
10068	377	16	LevenbergMarquardtOptimizer.java	doOptimize	solvedCols	int	0	NIL-FOR	j < $
1314	380	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
10069	382	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
10069	382	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1315	389	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1315	389	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
10070	395	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
10070	395	12	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
10071	400	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
10072	403	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
10072	403	16	LevenbergMarquardtOptimizer.java	doOptimize	solvedCols	int	0	NIL-FOR	j < $
10073	422	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
10073	422	16	LevenbergMarquardtOptimizer.java	doOptimize	solvedCols	int	0	NIL-FOR	j < $
1316	431	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1317	443	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost < $
1317	443	16	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ < previousCost
10074	450	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
10074	450	16	LevenbergMarquardtOptimizer.java	doOptimize	solvedCols	int	0	NIL-FOR	j < $
10075	454	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
10075	454	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
10076	459	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
10076	459	16	LevenbergMarquardtOptimizer.java	doOptimize	solvedCols	int	0	NIL-FOR	j < $
1318	472	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1319	475	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1319	475	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost >= $
1319	475	24	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ >= previousCost
1320	480	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1320	480	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1321	486	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
10077	490	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
10077	490	20	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
1322	497	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	checker.converged($.getIterations(), previous, current)
1322	497	20	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(getIterations(), $, current)
1322	497	20	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(getIterations(), previous, $)
1322	497	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$ != null
1322	497	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$.converged(getIterations(), previous, current)
10078	503	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
10078	503	20	LevenbergMarquardtOptimizer.java	doOptimize	solvedCols	int	0	NIL-FOR	j < $
1323	518	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1323	518	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1323	518	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
1323	518	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
1323	518	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1323	518	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1323	518	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1323	518	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1324	526	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= TWO_EPS
1324	526	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= TWO_EPS
1324	526	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
1325	531	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= TWO_EPS * xNorm
1325	531	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= TWO_EPS * $
1326	534	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= TWO_EPS
10079	622	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
10079	622	8	LevenbergMarquardtOptimizer.java	determineLMParameter	rank	int	0	NIL-FOR	j < $
10080	625	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < nC
10080	625	8	LevenbergMarquardtOptimizer.java	determineLMParameter	nC	int	0	NIL-FOR	j < $
10081	628	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
10082	631	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
10082	631	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
10083	640	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
10083	640	8	LevenbergMarquardtOptimizer.java	determineLMParameter	solvedCols	int	0	NIL-FOR	j < $
1327	648	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1327	648	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1328	658	8	LevenbergMarquardtOptimizer.java	determineLMParameter	rank	int	0	DEF	$ == solvedCols
1328	658	8	LevenbergMarquardtOptimizer.java	determineLMParameter	solvedCols	int	0	DEF	rank == $
10084	659	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
10084	659	12	LevenbergMarquardtOptimizer.java	determineLMParameter	solvedCols	int	0	NIL-FOR	j < $
10085	664	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
10085	664	12	LevenbergMarquardtOptimizer.java	determineLMParameter	solvedCols	int	0	NIL-FOR	j < $
10086	667	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
10086	667	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
10087	679	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
10087	679	8	LevenbergMarquardtOptimizer.java	determineLMParameter	solvedCols	int	0	NIL-FOR	j < $
10088	682	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
10088	682	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1329	690	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1330	697	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
10089	701	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1331	704	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
10090	708	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
10090	708	12	LevenbergMarquardtOptimizer.java	determineLMParameter	solvedCols	int	0	NIL-FOR	j < $
10091	715	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
10091	715	12	LevenbergMarquardtOptimizer.java	determineLMParameter	solvedCols	int	0	NIL-FOR	j < $
1332	727	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1332	727	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1332	727	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
1332	727	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1332	727	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1332	727	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
10092	735	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
10092	735	12	LevenbergMarquardtOptimizer.java	determineLMParameter	solvedCols	int	0	NIL-FOR	j < $
10093	739	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
10093	739	12	LevenbergMarquardtOptimizer.java	determineLMParameter	solvedCols	int	0	NIL-FOR	j < $
10094	743	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
10094	743	16	LevenbergMarquardtOptimizer.java	determineLMParameter	solvedCols	int	0	NIL-FOR	i < $
10095	748	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
10095	748	12	LevenbergMarquardtOptimizer.java	determineLMParameter	solvedCols	int	0	NIL-FOR	j < $
1333	755	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1334	757	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
10096	801	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
10096	801	8	LevenbergMarquardtOptimizer.java	determineLMDirection	solvedCols	int	0	NIL-FOR	j < $
10097	803	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
10097	803	12	LevenbergMarquardtOptimizer.java	determineLMDirection	solvedCols	int	0	NIL-FOR	i < $
10098	811	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
10098	811	8	LevenbergMarquardtOptimizer.java	determineLMDirection	solvedCols	int	0	NIL-FOR	j < $
1335	817	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
10099	826	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
10099	826	12	LevenbergMarquardtOptimizer.java	determineLMDirection	solvedCols	int	0	NIL-FOR	k < $
1336	831	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1336	831	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1337	836	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
1337	836	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
1337	836	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
10100	854	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
10100	854	20	LevenbergMarquardtOptimizer.java	determineLMDirection	solvedCols	int	0	NIL-FOR	i < $
10101	872	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
10101	872	8	LevenbergMarquardtOptimizer.java	determineLMDirection	solvedCols	int	0	NIL-FOR	j < $
1338	873	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1338	873	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1338	873	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1338	873	12	LevenbergMarquardtOptimizer.java	determineLMDirection	solvedCols	int	0	DEF	nSing == $
1339	876	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1339	876	12	LevenbergMarquardtOptimizer.java	determineLMDirection	solvedCols	int	0	DEF	nSing < $
1340	880	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
10102	881	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
10103	884	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
10103	884	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
10104	892	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
10104	892	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
10105	938	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
10105	938	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
10106	941	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nR
10106	941	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	i < $
10107	949	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
10107	949	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
10108	954	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nC
10108	954	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	i < $
10109	956	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
10109	956	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
1341	960	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
1341	960	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
1342	964	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1342	964	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1343	969	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
1343	969	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
10110	987	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
10111	989	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
10111	989	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
10112	993	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
10112	993	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
10113	1017	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < nC
10113	1017	8	LevenbergMarquardtOptimizer.java	qTy	nC	int	0	NIL-FOR	k < $
10114	1020	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
10114	1020	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
10115	1024	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
10115	1024	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
11686	339	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
11686	339	12	LevenbergMarquardtOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
11687	348	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
11687	348	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
3121	353	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
11688	357	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
11688	357	16	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
3122	359	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
3123	374	12	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	$ != 0
11689	375	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11689	375	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3124	378	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
11690	380	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
11690	380	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
3125	387	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
3125	387	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
11691	394	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
11691	394	12	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
11692	399	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
11693	402	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11693	402	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
11694	419	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11694	419	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3126	428	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
3127	440	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost < $
3127	440	16	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ < previousCost
11695	447	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11695	447	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
11696	451	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
11696	451	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
11697	456	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11697	456	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3128	469	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
3129	472	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
3129	472	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost >= $
3129	472	24	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ >= previousCost
3130	477	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
3130	477	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
3131	483	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
11698	487	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
11698	487	20	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
3132	494	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	checker.converged($.getIterations(), previous, current)
3132	494	20	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(getIterations(), $, current)
3132	494	20	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(getIterations(), previous, $)
3132	494	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$ != null
3132	494	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$.converged(getIterations(), previous, current)
11699	501	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11699	501	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3133	516	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
3133	516	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
3133	516	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
3133	516	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
3133	516	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
3133	516	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
3133	516	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
3133	516	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
3134	525	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= TWO_EPS
3134	525	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= TWO_EPS
3134	525	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
3135	530	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= TWO_EPS * xNorm
3135	530	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= TWO_EPS * $
3136	533	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= TWO_EPS
11700	569	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
11700	569	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
11701	572	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < nC
11701	572	8	LevenbergMarquardtOptimizer.java	determineLMParameter	nC	int	0	NIL-FOR	j < $
11702	575	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
11703	578	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
11703	578	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
11704	587	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11704	587	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
3137	595	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
3137	595	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
3138	605	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
11705	606	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11705	606	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
11706	611	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11706	611	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
11707	614	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
11707	614	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
11708	626	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11708	626	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
11709	629	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
11709	629	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
3139	637	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
3140	644	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
11710	648	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
3141	651	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
11711	655	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11711	655	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
11712	662	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11712	662	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
3142	674	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
3142	674	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
3142	674	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
3142	674	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
3142	674	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
3142	674	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
11713	680	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11713	680	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
11714	684	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11714	684	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
11715	688	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
11715	688	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
11716	693	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11716	693	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
3143	700	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
3144	702	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
11717	737	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11717	737	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
11718	739	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
11718	739	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
11719	747	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11719	747	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
3145	753	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
11720	762	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
11720	762	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
3146	767	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
3146	767	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
3147	772	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
3147	772	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
3147	772	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
11721	790	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
11721	790	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
11722	808	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11722	808	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
3148	809	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
3148	809	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
3148	809	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
3148	809	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
3149	812	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
3149	812	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
3150	816	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
11723	817	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
11724	820	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
11724	820	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
11725	828	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
11725	828	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
11726	866	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
11726	866	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
11727	869	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nR
11727	869	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	i < $
11728	877	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
11728	877	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
11729	882	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nC
11729	882	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	i < $
11730	884	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
11730	884	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
3151	888	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
3151	888	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
3152	892	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
3152	892	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
3153	897	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
3153	897	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
11731	916	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
11732	918	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
11732	918	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
11733	922	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
11733	922	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
11734	939	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < nC
11734	939	8	LevenbergMarquardtOptimizer.java	qTy	nC	int	0	NIL-FOR	k < $
11735	942	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
11735	942	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
11736	946	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
11736	946	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
3154	957	8	LevenbergMarquardtOptimizer.java	checkParameters	THIS	LevenbergMarquardtOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
3154	957	8	LevenbergMarquardtOptimizer.java	checkParameters	THIS	LevenbergMarquardtOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
10967	326	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
10967	326	12	LevenbergMarquardtOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
10968	335	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
10968	335	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
1967	340	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
10969	344	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
10969	344	16	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
1968	346	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1969	361	12	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	$ != 0
10970	362	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10970	362	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1970	365	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
10971	367	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
10971	367	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1971	374	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1971	374	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
10972	383	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
10972	383	12	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
10973	388	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
10974	391	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10974	391	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
10975	408	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10975	408	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1972	417	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1973	429	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost < $
1973	429	16	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ < previousCost
10976	436	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10976	436	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
10977	440	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
10977	440	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
10978	445	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10978	445	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1974	458	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1975	461	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1975	461	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost >= $
1975	461	24	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ >= previousCost
1976	466	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1976	466	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1977	472	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
10979	476	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
10979	476	20	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
1978	483	20	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(iter, $, current)
1978	483	20	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(iter, previous, $)
1978	483	20	LevenbergMarquardtOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1978	483	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$ != null
1978	483	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$.converged(iter, previous, current)
10980	492	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10980	492	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1979	507	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
1979	507	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1979	507	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1979	507	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
1979	507	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1979	507	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1979	507	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1979	507	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1980	519	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= 2.2204e-16
1980	519	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= 2.2204e-16
1980	519	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
1981	522	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= 2.2204e-16 * xNorm
1981	522	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= 2.2204e-16 * $
1982	525	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= 2.2204e-16
10981	561	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
10981	561	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
10982	564	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < nC
10982	564	8	LevenbergMarquardtOptimizer.java	determineLMParameter	nC	int	0	NIL-FOR	j < $
10983	567	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
10984	570	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
10984	570	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
10985	579	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10985	579	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1983	587	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1983	587	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1984	597	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
10986	598	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10986	598	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
10987	603	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10987	603	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
10988	606	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
10988	606	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
10989	618	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10989	618	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
10990	621	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
10990	621	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1985	629	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1986	637	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
10991	641	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1987	644	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
10992	648	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10992	648	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
10993	655	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10993	655	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1988	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1988	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1988	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1988	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
1988	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1988	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
10994	673	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10994	673	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
10995	677	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10995	677	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
10996	681	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
10996	681	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
10997	686	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10997	686	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1989	693	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1990	695	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
10998	730	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
10998	730	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
10999	732	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
10999	732	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
11000	740	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11000	740	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1991	746	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
11001	755	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
11001	755	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1992	760	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1992	760	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1993	765	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
1993	765	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
1993	765	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
11002	783	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
11002	783	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
11003	801	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
11003	801	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1994	802	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1994	802	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1994	802	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1994	802	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1995	805	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1995	805	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1996	809	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
11004	810	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
11005	813	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
11005	813	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
11006	821	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
11006	821	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
11007	859	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
11007	859	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
11008	862	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nR
11008	862	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	i < $
11009	870	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
11009	870	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
11010	875	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nC
11010	875	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	i < $
11011	877	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
11011	877	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
1997	881	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
1997	881	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
1998	885	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1998	885	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1999	890	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
1999	890	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
11012	909	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
11013	911	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
11013	911	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
11014	915	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
11014	915	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
11015	932	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < nC
11015	932	8	LevenbergMarquardtOptimizer.java	qTy	nC	int	0	NIL-FOR	k < $
11016	935	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
11016	935	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
11017	939	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
11017	939	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
1210	73	8	LevyDistribution.java	density	THIS	LevyDistribution	0	RET	x < $.mu
1210	73	8	LevyDistribution.java	density	x	double	0	RET	$ < mu
1211	91	8	LevyDistribution.java	cumulativeProbability	THIS	LevyDistribution	0	RET	x < $.mu
1211	91	8	LevyDistribution.java	cumulativeProbability	x	double	0	RET	$ < mu
1212	100	8	LevyDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1212	100	8	LevyDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
711	76	8	Line.java	reset	norm2	double	0	MathIllegalArgumentException	$ == 0.0
712	177	8	Line.java	distance	n	double	0	RET	$ < Precision.SAFE_MIN
713	197	8	Line.java	closestPoint	n	double	0	RET	$ < Precision.EPSILON
824	132	8	Line.java	reset	d	double	1	DEF	$ == 0.0
825	159	8	Line.java	revertSelf	THIS	Line	1	DEF	$.angle < FastMath.PI
826	199	8	Line.java	intersection	d	double	0	RET	FastMath.abs($) < 1.0e-10
11440	124	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
11440	124	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
11440	124	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
2784	188	8	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
2784	188	8	LinearConstraint.java	equals	other	Object	0	RET	this == $
2785	191	8	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
10941	130	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
10941	130	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
10941	130	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
1914	192	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
1914	192	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
1915	196	6	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
3964	50	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3964	50	8	LinearInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3964	50	8	LinearInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3965	54	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	NumberIsTooSmallException	x.$.length < 2
3965	54	8	LinearInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 2
12117	66	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
12117	66	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
12118	72	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
12118	72	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
2800	111	8	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
2800	111	8	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
2801	114	8	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
1931	109	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
1931	109	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
1932	113	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
2802	118	12	LinearOptimizer.java	parseOptimizationData	THIS	LinearOptimizer	0	DEF	$.data instanceof LinearObjectiveFunction
2803	122	12	LinearOptimizer.java	parseOptimizationData	THIS	LinearOptimizer	0	DEF	$.data instanceof LinearConstraintSet
2804	126	12	LinearOptimizer.java	parseOptimizationData	THIS	LinearOptimizer	0	DEF	$.data instanceof NonNegativeConstraint
3269	69	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
3270	72	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ <= 0
3271	75	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
3271	75	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NumberIsTooLargeException	chromosomes.size() > $
3272	99	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
3273	102	8	ListPopulation.java	setChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	chromosomes.size() > $.populationLimit
3273	102	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
3274	118	8	ListPopulation.java	addChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() + chromosomeColl.size() > $.populationLimit
3274	118	8	ListPopulation.java	addChromosomes	chromosomeColl	Collection<Chromosome>	0	NumberIsTooLargeException	chromosomes.size() + $.size() > populationLimit
3275	150	8	ListPopulation.java	addChromosome	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() >= $.populationLimit
3276	165	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
3276	165	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
3277	189	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NotPositiveException	$ <= 0
3278	192	8	ListPopulation.java	setPopulationLimit	THIS	ListPopulation	0	NumberIsTooSmallException	populationLimit < $.chromosomes.size()
3278	192	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NumberIsTooSmallException	$ < chromosomes.size()
4046	151	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ > 1
4046	151	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ < 0
4047	156	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	NotPositiveException	$ < 0
4048	221	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
4048	221	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
4048	221	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
4049	227	8	LoessInterpolator.java	smooth	n	int	0	NoDataException	$ == 0
4050	237	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
4051	241	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
4052	247	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	NumberIsTooSmallException	$ < 2
12198	264	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
12198	264	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
12199	267	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
12199	267	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
4053	272	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
4054	282	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
4054	282	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
4054	282	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
4054	282	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
12200	301	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
12200	301	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
4055	320	16	LoessInterpolator.java	smooth	THIS	LoessInterpolator	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < $.accuracy
4055	320	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
4055	320	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
4056	334	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
4056	334	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
4057	347	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	FastMath.abs(medianResidual) < $.accuracy
4057	347	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	FastMath.abs($) < accuracy
12201	351	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
12201	351	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
4058	353	16	LoessInterpolator.java	smooth	arg	double	1	DEF	$ >= 1
4059	388	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
4059	388	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
4059	388	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
4060	422	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	nextRight < xval.$.length
4060	422	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[nextRight] - xval[i] < xval[i] - xval[$]
4060	422	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	$ < xval.length
4060	422	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	xval[$] - xval[i] < xval[i] - xval[left]
4060	422	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	nextRight < $.length
4060	422	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[nextRight] - $[i] < $[i] - $[left]
4060	422	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[nextRight] - xval[$] < xval[$] - xval[left]
12202	439	8	LoessInterpolator.java	nextNonzero	THIS	LoessInterpolator	0	NIL-WHILE	j < weights.$.length
12202	439	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	weights[$] == 0
12202	439	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	$ < weights.length
12202	439	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	$[j] == 0
12202	439	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	j < $.length
4061	455	8	LoessInterpolator.java	tricube	absX	double	0	RET	$ >= 1.0
12203	470	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
12203	470	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
12203	470	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
1298	132	8	LogNormalDistribution.java	LogNormalDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1299	171	8	LogNormalDistribution.java	density	x	double	0	RET	$ <= 0
1300	195	8	LogNormalDistribution.java	cumulativeProbability	x	double	0	RET	$ <= 0
1301	199	8	LogNormalDistribution.java	cumulativeProbability	THIS	LogNormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.shape
1301	199	8	LogNormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * shape
1302	221	8	LogNormalDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1302	221	8	LogNormalDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
1303	225	8	LogNormalDistribution.java	probability	x0	double	0	RET	$ <= 0
1303	225	8	LogNormalDistribution.java	probability	x1	double	0	RET	$ <= 0
4082	72	8	Logistic.java	Logistic	n	double	0	NotStrictlyPositiveException	$ <= 0
4067	162	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
4067	162	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
4067	162	8	Logit.java	value	lo	double	0	OutOfRangeException	x < $
4067	162	8	Logit.java	value	hi	double	0	OutOfRangeException	x > $
4068	175	8	Logit.java	value	THIS	Logit	0	OutOfRangeException	x < $.lo
4068	175	8	Logit.java	value	THIS	Logit	0	OutOfRangeException	x > $.hi
4068	175	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
4068	175	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
4069	183	8	Logit.java	value	f	double[]	1	DEF	Double.isInfinite($[0])
4070	185	12	Logit.java	value	THIS	Logit	0	DEF	f.$.length > 1
4070	185	12	Logit.java	value	f	double[]	0	DEF	$.length > 1
12213	193	12	Logit.java	value	THIS	Logit	0	NIL-FOR	i < f.$.length
12213	193	12	Logit.java	value	i	int	0	NIL-FOR	$ < f.length
12213	193	12	Logit.java	value	f	double[]	0	NIL-FOR	i < $.length
12214	204	12	Logit.java	value	THIS	Logit	0	NIL-FOR	i < f.$.length
12214	204	12	Logit.java	value	i	int	0	NIL-FOR	$ < f.length
12214	204	12	Logit.java	value	f	double[]	0	NIL-FOR	i < $.length
2446	74	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2446	74	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2447	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	y.$.length == 0
2447	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	x.$.length == 0
2447	78	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2447	78	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
11295	140	8	MannWhitneyUTest.java	mannWhitneyU	THIS	MannWhitneyUTest	0	NIL-FOR	i < x.$.length
11295	140	8	MannWhitneyUTest.java	mannWhitneyU	i	int	0	NIL-FOR	$ < x.length
11295	140	8	MannWhitneyUTest.java	mannWhitneyU	x	double[]	0	NIL-FOR	i < $.length
9873	90	8	MathArrays.java	scale	THIS	MathArrays	0	NIL-FOR	i < arr.$.length
9873	90	8	MathArrays.java	scale	i	int	0	NIL-FOR	$ < arr.length
9873	90	8	MathArrays.java	scale	arr	double[]	0	NIL-FOR	i < $.length
9874	106	8	MathArrays.java	scaleInPlace	THIS	MathArrays	0	NIL-FOR	i < arr.$.length
9874	106	8	MathArrays.java	scaleInPlace	i	int	0	NIL-FOR	$ < arr.length
9874	106	8	MathArrays.java	scaleInPlace	arr	double[]	0	NIL-FOR	i < $.length
82	123	8	MathArrays.java	ebeAdd	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
82	123	8	MathArrays.java	ebeAdd	a	double[]	0	DimensionMismatchException	$.length != b.length
82	123	8	MathArrays.java	ebeAdd	b	double[]	0	DimensionMismatchException	a.length != $.length
9875	128	8	MathArrays.java	ebeAdd	THIS	MathArrays	0	NIL-FOR	i < a.$.length
9875	128	8	MathArrays.java	ebeAdd	i	int	0	NIL-FOR	$ < a.length
9875	128	8	MathArrays.java	ebeAdd	a	double[]	0	NIL-FOR	i < $.length
83	145	8	MathArrays.java	ebeSubtract	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
83	145	8	MathArrays.java	ebeSubtract	a	double[]	0	DimensionMismatchException	$.length != b.length
83	145	8	MathArrays.java	ebeSubtract	b	double[]	0	DimensionMismatchException	a.length != $.length
9876	150	8	MathArrays.java	ebeSubtract	THIS	MathArrays	0	NIL-FOR	i < a.$.length
9876	150	8	MathArrays.java	ebeSubtract	i	int	0	NIL-FOR	$ < a.length
9876	150	8	MathArrays.java	ebeSubtract	a	double[]	0	NIL-FOR	i < $.length
84	167	8	MathArrays.java	ebeMultiply	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
84	167	8	MathArrays.java	ebeMultiply	a	double[]	0	DimensionMismatchException	$.length != b.length
84	167	8	MathArrays.java	ebeMultiply	b	double[]	0	DimensionMismatchException	a.length != $.length
9877	172	8	MathArrays.java	ebeMultiply	THIS	MathArrays	0	NIL-FOR	i < a.$.length
9877	172	8	MathArrays.java	ebeMultiply	i	int	0	NIL-FOR	$ < a.length
9877	172	8	MathArrays.java	ebeMultiply	a	double[]	0	NIL-FOR	i < $.length
85	189	8	MathArrays.java	ebeDivide	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
85	189	8	MathArrays.java	ebeDivide	a	double[]	0	DimensionMismatchException	$.length != b.length
85	189	8	MathArrays.java	ebeDivide	b	double[]	0	DimensionMismatchException	a.length != $.length
9878	194	8	MathArrays.java	ebeDivide	THIS	MathArrays	0	NIL-FOR	i < a.$.length
9878	194	8	MathArrays.java	ebeDivide	i	int	0	NIL-FOR	$ < a.length
9878	194	8	MathArrays.java	ebeDivide	a	double[]	0	NIL-FOR	i < $.length
9879	209	8	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
9879	209	8	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
9879	209	8	MathArrays.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
9880	224	6	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
9880	224	6	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
9880	224	6	MathArrays.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
9881	239	8	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
9881	239	8	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
9881	239	8	MathArrays.java	distance	p1	double[]	0	NIL-FOR	i < $.length
9882	255	6	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
9882	255	6	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
9882	255	6	MathArrays.java	distance	p1	int[]	0	NIL-FOR	i < $.length
9883	271	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
9883	271	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
9883	271	8	MathArrays.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
9884	286	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
9884	286	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
9884	286	8	MathArrays.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
9885	316	8	MathArrays.java	isMonotonic	i	int	0	NIL-FOR	$ < max
9885	316	8	MathArrays.java	isMonotonic	max	int	0	NIL-FOR	i < $
86	321	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
87	322	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
88	326	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
89	333	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
90	334	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
91	338	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
9886	384	8	MathArrays.java	checkOrder	max	int	0	NIL-FOR	index < $
9886	384	8	MathArrays.java	checkOrder	index	int	0	NIL-FOR	$ < max
92	387	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
93	388	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] <= $
93	388	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] <= previous
93	388	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] <= previous
94	392	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] < $
94	392	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] < previous
94	392	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] < previous
95	398	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
96	399	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] >= $
96	399	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] >= previous
96	399	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] >= previous
97	403	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] > $
97	403	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] > previous
97	403	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] > previous
98	416	8	MathArrays.java	checkOrder	max	int	0	RET	index == $
98	416	8	MathArrays.java	checkOrder	index	int	0	RET	$ == max
99	422	8	MathArrays.java	checkOrder	abort	boolean	1	NonMonotonicSequenceException	$
9887	465	8	MathArrays.java	checkRectangular	THIS	MathArrays	0	NIL-FOR	i < in.$.length
9887	465	8	MathArrays.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
9887	465	8	MathArrays.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
100	466	12	MathArrays.java	checkRectangular	THIS	MathArrays	0	DimensionMismatchException	in[i].length != in[0].length
100	466	12	MathArrays.java	checkRectangular	i	int	0	DimensionMismatchException	in[$].length != in[0].length
100	466	12	MathArrays.java	checkRectangular	in	long[][]	0	DimensionMismatchException	$[i].length != $[0].length
9888	484	8	MathArrays.java	checkPositive	THIS	MathArrays	0	NIL-FOR	i < in.$.length
9888	484	8	MathArrays.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
9888	484	8	MathArrays.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
101	485	12	MathArrays.java	checkPositive	i	int	0	NotStrictlyPositiveException	in[$] <= 0
101	485	12	MathArrays.java	checkPositive	in	double[]	0	NotStrictlyPositiveException	$[i] <= 0
9889	500	8	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	i < in.$.length
9889	500	8	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
9889	500	8	MathArrays.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
102	501	12	MathArrays.java	checkNonNegative	i	int	0	NotPositiveException	in[$] < 0
102	501	12	MathArrays.java	checkNonNegative	in	long[]	0	NotPositiveException	$[i] < 0
9890	516	8	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	i < in.$.length
9890	516	8	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
9890	516	8	MathArrays.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
9891	517	12	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	j < in[i].length
9891	517	12	MathArrays.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
9891	517	12	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
9891	517	12	MathArrays.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
103	518	16	MathArrays.java	checkNonNegative	j	int	0	NotPositiveException	in[i][$] < 0
103	518	16	MathArrays.java	checkNonNegative	i	int	0	NotPositiveException	in[$][j] < 0
103	518	16	MathArrays.java	checkNonNegative	in	long[][]	0	NotPositiveException	$[i][j] < 0
9892	595	8	MathArrays.java	safeNorm	THIS	MathArrays	0	NIL-FOR	i < v.$.length
9892	595	8	MathArrays.java	safeNorm	i	int	0	NIL-FOR	$ < v.length
9892	595	8	MathArrays.java	safeNorm	v	double[]	0	NIL-FOR	i < $.length
104	597	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ < rdwarf
104	597	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > agiant
104	597	12	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs < $
104	597	12	MathArrays.java	safeNorm	agiant	double	1	DEF	xabs > $
105	598	16	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > rdwarf
105	598	16	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs > $
106	599	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x1max
106	599	20	MathArrays.java	safeNorm	x1max	double	1	DEF	xabs > $
107	608	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x3max
107	608	20	MathArrays.java	safeNorm	x3max	double	1	DEF	xabs > $
108	613	24	MathArrays.java	safeNorm	xabs	double	0	DEF	$ != 0
109	624	8	MathArrays.java	safeNorm	s1	double	1	DEF	$ != 0
110	627	12	MathArrays.java	safeNorm	s2	double	1	DEF	$ == 0
111	630	16	MathArrays.java	safeNorm	s2	double	1	DEF	$ >= x3max
111	630	16	MathArrays.java	safeNorm	x3max	double	1	DEF	s2 >= $
112	685	8	MathArrays.java	sortInPlace	x	double[]	0	NullArgumentException	$ == null
9893	692	8	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
9893	692	8	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
113	694	12	MathArrays.java	sortInPlace	y	double[]	0	NullArgumentException	$ == null
114	697	12	MathArrays.java	sortInPlace	THIS	MathArrays	0	DimensionMismatchException	y.$.length != len
114	697	12	MathArrays.java	sortInPlace	y	double[]	0	DimensionMismatchException	$.length != len
114	697	12	MathArrays.java	sortInPlace	len	int	0	DimensionMismatchException	y.length != $
9894	705	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
9894	705	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
9895	731	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
9895	731	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
9896	739	8	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
9896	739	8	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
9897	744	12	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
9897	744	12	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
115	820	8	MathArrays.java	linearCombination	THIS	MathArrays	0	DimensionMismatchException	len != b.$.length
115	820	8	MathArrays.java	linearCombination	len	int	0	DimensionMismatchException	$ != b.length
115	820	8	MathArrays.java	linearCombination	b	double[]	0	DimensionMismatchException	len != $.length
116	824	8	MathArrays.java	linearCombination	len	int	0	RET	$ == 1
9898	832	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
9898	832	8	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
9899	858	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < lenMinusOne
9899	858	8	MathArrays.java	linearCombination	lenMinusOne	int	0	NIL-FOR	i < $
117	868	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
9900	872	12	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
9900	872	12	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
118	948	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
119	1045	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
120	1164	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
121	1184	8	MathArrays.java	equals	x	float[]	0	RET	$ == null
121	1184	8	MathArrays.java	equals	y	float[]	0	RET	$ == null
122	1187	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
122	1187	8	MathArrays.java	equals	x	float[]	0	RET	$.length != y.length
122	1187	8	MathArrays.java	equals	y	float[]	0	RET	x.length != $.length
9901	1190	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
9901	1190	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
9901	1190	8	MathArrays.java	equals	x	float[]	0	NIL-FOR	i < $.length
123	1191	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
123	1191	12	MathArrays.java	equals	x	float[]	0	RET	Precision.equals($[i], y[i])
123	1191	12	MathArrays.java	equals	y	float[]	0	RET	Precision.equals(x[i], $[i])
124	1210	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$ == null
124	1210	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	$ == null
125	1213	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
125	1213	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$.length != y.length
125	1213	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	x.length != $.length
9902	1216	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
9902	1216	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
9902	1216	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	NIL-FOR	i < $.length
126	1217	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
126	1217	12	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
126	1217	12	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
127	1235	8	MathArrays.java	equals	x	double[]	0	RET	$ == null
127	1235	8	MathArrays.java	equals	y	double[]	0	RET	$ == null
128	1238	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
128	1238	8	MathArrays.java	equals	x	double[]	0	RET	$.length != y.length
128	1238	8	MathArrays.java	equals	y	double[]	0	RET	x.length != $.length
9903	1241	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
9903	1241	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
9903	1241	8	MathArrays.java	equals	x	double[]	0	NIL-FOR	i < $.length
129	1242	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
129	1242	12	MathArrays.java	equals	x	double[]	0	RET	Precision.equals($[i], y[i])
129	1242	12	MathArrays.java	equals	y	double[]	0	RET	Precision.equals(x[i], $[i])
130	1261	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$ == null
130	1261	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	$ == null
131	1264	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
131	1264	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$.length != y.length
131	1264	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	x.length != $.length
9904	1267	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
9904	1267	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
9904	1267	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	NIL-FOR	i < $.length
132	1268	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
132	1268	12	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
132	1268	12	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
133	1299	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isInfinite($)
134	1302	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isNaN($)
9905	1308	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
9905	1308	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
135	1309	13	MathArrays.java	normalizeArray	i	int	0	MathIllegalArgumentException	Double.isInfinite(values[$])
135	1309	13	MathArrays.java	normalizeArray	values	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
136	1312	13	MathArrays.java	normalizeArray	i	int	0	DEF	Double.isNaN(values[$])
136	1312	13	MathArrays.java	normalizeArray	values	double[]	0	DEF	Double.isNaN($[i])
137	1316	9	MathArrays.java	normalizeArray	sum	double	0	MathArithmeticException	$ == 0
9906	1319	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
9906	1319	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
138	1320	13	MathArrays.java	normalizeArray	i	int	1	DEF	Double.isNaN(values[$])
138	1320	13	MathArrays.java	normalizeArray	values	double[]	1	DEF	Double.isNaN($[i])
139	1361	9	MathArrays.java	buildArray	columns	int	1	DEF	$ < 0
9907	1369	13	MathArrays.java	buildArray	i	int	0	NIL-FOR	$ < rows
9907	1369	13	MathArrays.java	buildArray	rows	int	0	NIL-FOR	i < $
140	1407	9	MathArrays.java	convolve	xLen	int	0	NoDataException	$ == 0
140	1407	9	MathArrays.java	convolve	hLen	int	0	NoDataException	$ == 0
9908	1416	9	MathArrays.java	convolve	n	int	0	NIL-FOR	$ < totalLength
9908	1416	9	MathArrays.java	convolve	totalLength	int	0	NIL-FOR	n < $
9909	1420	13	MathArrays.java	convolve	k	int	0	NIL-WHILE	$ < hLen
9909	1420	13	MathArrays.java	convolve	j	int	0	NIL-WHILE	$ >= 0
9909	1420	13	MathArrays.java	convolve	hLen	int	0	NIL-WHILE	k < $
9910	1479	12	MathArrays.java	shuffle	i	int	0	NIL-FOR	$ >= start
9910	1479	12	MathArrays.java	shuffle	start	int	0	NIL-FOR	i >= $
141	1481	16	MathArrays.java	shuffle	i	int	1	DEF	$ == start
141	1481	16	MathArrays.java	shuffle	start	int	1	DEF	i == $
9911	1494	12	MathArrays.java	shuffle	i	int	0	NIL-FOR	$ <= start
9911	1494	12	MathArrays.java	shuffle	start	int	0	NIL-FOR	i <= $
142	1496	16	MathArrays.java	shuffle	i	int	1	DEF	$ == start
142	1496	16	MathArrays.java	shuffle	start	int	1	DEF	i == $
517	129	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ < 0
517	129	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ >= 0
517	129	8	MathUtils.java	copySign	sign	byte	1	RET	$ < 0
517	129	8	MathUtils.java	copySign	sign	byte	1	RET	$ >= 0
518	132	15	MathUtils.java	copySign	magnitude	byte	1	MathArithmeticException	$ == Byte.MIN_VALUE
518	132	15	MathUtils.java	copySign	sign	byte	1	MathArithmeticException	$ >= 0
519	152	8	MathUtils.java	copySign	magnitude	short	1	RET	$ < 0
519	152	8	MathUtils.java	copySign	magnitude	short	1	RET	$ >= 0
519	152	8	MathUtils.java	copySign	sign	short	1	RET	$ < 0
519	152	8	MathUtils.java	copySign	sign	short	1	RET	$ >= 0
520	155	15	MathUtils.java	copySign	magnitude	short	1	MathArithmeticException	$ == Short.MIN_VALUE
520	155	15	MathUtils.java	copySign	sign	short	1	MathArithmeticException	$ >= 0
521	175	8	MathUtils.java	copySign	magnitude	int	1	RET	$ >= 0
521	175	8	MathUtils.java	copySign	magnitude	int	1	RET	$ < 0
521	175	8	MathUtils.java	copySign	sign	int	1	RET	$ >= 0
521	175	8	MathUtils.java	copySign	sign	int	1	RET	$ < 0
522	178	15	MathUtils.java	copySign	magnitude	int	1	MathArithmeticException	$ == Integer.MIN_VALUE
522	178	15	MathUtils.java	copySign	sign	int	1	MathArithmeticException	$ >= 0
523	198	8	MathUtils.java	copySign	magnitude	long	1	RET	$ < 0
523	198	8	MathUtils.java	copySign	magnitude	long	1	RET	$ >= 0
523	198	8	MathUtils.java	copySign	sign	long	1	RET	$ >= 0
523	198	8	MathUtils.java	copySign	sign	long	1	RET	$ < 0
524	201	15	MathUtils.java	copySign	magnitude	long	1	MathArithmeticException	$ == Long.MIN_VALUE
524	201	15	MathUtils.java	copySign	sign	long	1	MathArithmeticException	$ >= 0
525	217	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
525	217	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
9945	231	8	MathUtils.java	checkFinite	THIS	MathUtils	0	NIL-FOR	i < val.$.length
9945	231	8	MathUtils.java	checkFinite	i	int	0	NIL-FOR	$ < val.length
9945	231	8	MathUtils.java	checkFinite	val	double[]	0	NIL-FOR	i < $.length
526	233	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
526	233	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
527	251	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
528	264	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
1635	130	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$[0] == null
1635	130	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$ == null
1636	159	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$ == null
1636	159	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$[0] == null
10605	177	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
10605	177	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
10606	198	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
10606	198	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
10607	216	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
10607	216	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
10607	216	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
10608	235	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
10608	235	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
10608	235	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
1637	251	8	MatrixUtils.java	createRealVector	data	double[]	0	NullArgumentException	$ == null
1638	269	8	MatrixUtils.java	createFieldVector	data	T[]	0	NullArgumentException	$ == null
1639	272	8	MatrixUtils.java	createFieldVector	THIS	MatrixUtils	0	ZeroException	data.$.length == 0
1639	272	8	MatrixUtils.java	createFieldVector	data	T[]	0	ZeroException	$.length == 0
1640	289	8	MatrixUtils.java	createRowRealMatrix	rowData	double[]	0	NullArgumentException	$ == null
10609	294	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
10609	294	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
1641	313	8	MatrixUtils.java	createRowFieldMatrix	rowData	T[]	0	NullArgumentException	$ == null
1642	317	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
10610	321	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
10610	321	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
1643	338	8	MatrixUtils.java	createColumnRealMatrix	columnData	double[]	0	NullArgumentException	$ == null
10611	343	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
10611	343	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
1644	362	8	MatrixUtils.java	createColumnFieldMatrix	columnData	T[]	0	NullArgumentException	$ == null
1645	366	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NoDataException	$ == 0
10612	370	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
10612	370	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
1646	391	8	MatrixUtils.java	isSymmetricInternal	rows	int	0	NonSquareMatrixException:RET	$ != matrix.getColumnDimension()
1646	391	8	MatrixUtils.java	isSymmetricInternal	matrix	RealMatrix	0	NonSquareMatrixException:RET	rows != $.getColumnDimension()
1647	392	12	MatrixUtils.java	isSymmetricInternal	raiseException	boolean	1	NonSquareMatrixException	$
10613	398	8	MatrixUtils.java	isSymmetricInternal	i	int	0	NIL-FOR	$ < rows
10613	398	8	MatrixUtils.java	isSymmetricInternal	rows	int	0	NIL-FOR	i < $
10614	399	12	MatrixUtils.java	isSymmetricInternal	j	int	0	NIL-FOR	$ < rows
10614	399	12	MatrixUtils.java	isSymmetricInternal	rows	int	0	NIL-FOR	j < $
1648	402	16	MatrixUtils.java	isSymmetricInternal	mij	double	0	NonSymmetricMatrixException:RET	FastMath.abs($ - mji) > FastMath.max(FastMath.abs($), FastMath.abs(mji)) * relativeTolerance
1648	402	16	MatrixUtils.java	isSymmetricInternal	mji	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - $) > FastMath.max(FastMath.abs(mij), FastMath.abs($)) * relativeTolerance
1648	402	16	MatrixUtils.java	isSymmetricInternal	relativeTolerance	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - mji) > FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * $
1649	404	20	MatrixUtils.java	isSymmetricInternal	raiseException	boolean	1	NonSymmetricMatrixException	$
1650	467	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1650	467	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1650	467	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= m.getRowDimension()
1651	483	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1651	483	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1651	483	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= m.getColumnDimension()
1652	508	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1652	508	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1653	515	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1653	515	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1654	540	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1655	543	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1656	546	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedRows.$.length == 0
1656	546	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1657	549	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedColumns.$.length == 0
1657	549	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1658	571	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1658	571	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1658	571	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1658	571	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1659	588	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1659	588	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1659	588	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1659	588	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1660	606	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DimensionMismatchException	$.getColumnDimension() != right.getRowDimension()
1660	606	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DimensionMismatchException	left.getColumnDimension() != $.getRowDimension()
10615	745	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
10615	745	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
10616	776	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
10616	776	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
10617	848	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
10617	848	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
10618	849	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
10618	849	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
10619	882	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
10619	882	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
10620	884	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
10620	884	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1661	930	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$.getRowDimension() != b.getDimension()
1661	930	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$ == null
1661	930	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	DimensionMismatchException	$ == null
1661	930	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	DimensionMismatchException	rm.getRowDimension() != $.getDimension()
1662	935	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
10621	940	8	MatrixUtils.java	solveLowerTriangularSystem	i	int	0	NIL-FOR	$ < rows
10621	940	8	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	i < $
1663	942	12	MatrixUtils.java	solveLowerTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
10622	947	12	MatrixUtils.java	solveLowerTriangularSystem	j	int	0	NIL-FOR	$< rows
10622	947	12	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	j< $
1664	975	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$ == null
1664	975	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$.getRowDimension() != b.getDimension()
1664	975	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	DimensionMismatchException	$ == null
1664	975	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	DimensionMismatchException	rm.getRowDimension() != $.getDimension()
1665	980	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
10623	985	8	MatrixUtils.java	solveUpperTriangularSystem	i	int	0	NIL-FOR	$ >-1
1666	987	12	MatrixUtils.java	solveUpperTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
10624	992	12	MatrixUtils.java	solveUpperTriangularSystem	j	int	0	NIL-FOR	$>-1
1667	1013	8	MatrixUtils.java	blockInverse	n	int	0	NonSquareMatrixException	m.getColumnDimension() != $
1667	1013	8	MatrixUtils.java	blockInverse	m	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != n
1668	1027	8	MatrixUtils.java	blockInverse	aSolver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
1669	1034	8	MatrixUtils.java	blockInverse	dSolver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
1670	1042	8	MatrixUtils.java	blockInverse	tmp1Solver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
1671	1050	8	MatrixUtils.java	blockInverse	tmp2Solver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
2390	78	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
2390	78	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
2390	78	8	Max.java	increment	d	double	0	DEF	$ > value
2391	134	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
2391	134	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2391	134	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
2391	134	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
11281	136	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11281	136	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11281	136	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2392	137	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2392	137	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
2834	36	8	MaxEval.java	MaxEval	max	int	0	NotStrictlyPositiveException	$ <= 0
2835	36	8	MaxIter.java	MaxIter	max	int	0	NotStrictlyPositiveException	$ <= 0
2321	114	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
2322	124	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
2323	163	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
2323	163	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
2323	163	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
2323	163	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
11267	172	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11267	172	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11267	172	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2324	211	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, weights, begin, length)
2324	211	8	Mean.java	evaluate	values	double[]	0	RET	test($, weights, begin, length)
2324	211	8	Mean.java	evaluate	weights	double[]	0	RET	test(values, $, begin, length)
2324	211	8	Mean.java	evaluate	begin	int	0	RET	test(values, weights, $, length)
2324	211	8	Mean.java	evaluate	length	int	0	RET	test(values, weights, begin, $)
11268	220	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11268	220	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11268	220	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
11772	147	8	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
3202	167	8	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
11773	176	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
3203	182	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
3204	186	12	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
3204	186	12	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
3204	186	12	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
11774	191	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
3205	197	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
3206	233	8	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
11775	235	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
11776	241	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
4002	154	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$ == null
4002	154	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	NullArgumentException	$ == null
4003	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NoDataException	xval.$.length == 0
4003	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NoDataException	$.length == 0
4004	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xval.$.length != yval.$.length
4004	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DimensionMismatchException	$.length != yval.length
4004	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	DimensionMismatchException	xval.length != $.length
4005	164	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$[0] == null
12142	173	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NIL-FOR	i < xval.$.length
12142	173	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < xval.length
12142	173	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NIL-FOR	i < $.length
4006	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	NullArgumentException	$ == null
4007	178	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xvalI.$.length != $.dimension
4007	178	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	DimensionMismatchException	$.length != dimension
12143	188	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < microsphereElements
12143	188	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	microsphereElements	int	0	NIL-FOR	i < $
4008	213	12	MicrosphereInterpolatingFunction.java	value	diffNorm	double	0	RET	FastMath.abs($) < FastMath.ulp(1d)
4009	232	12	MicrosphereInterpolatingFunction.java	value	sd	Entry<RealVector,Double>	0	DEF	$ != null
4034	77	8	MicrosphereInterpolator.java	MicrosphereInterpolator	exponent	int	0	NotPositiveException	$ < 0
4035	80	8	MicrosphereInterpolator.java	MicrosphereInterpolator	elements	int	0	NotStrictlyPositiveException	$ <= 0
4313	63	8	MidPointIntegrator.java	MidPointIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > MIDPOINT_MAX_ITERATIONS_COUNT
4314	85	8	MidPointIntegrator.java	MidPointIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > MIDPOINT_MAX_ITERATIONS_COUNT
12352	133	8	MidPointIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
12352	133	8	MidPointIntegrator.java	stage	np	long	0	NIL-FOR	i < $
4315	157	12	MidPointIntegrator.java	doIntegrate	THIS	MidPointIntegrator	0	RET	i >= $.getMinimalIterationCount()
4315	157	12	MidPointIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
4316	161	16	MidPointIntegrator.java	doIntegrate	THIS	MidPointIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4316	161	16	MidPointIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4316	161	16	MidPointIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4316	161	16	MidPointIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
3553	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	1	DEF	$.previousState != null
3553	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
11998	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
11998	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
11999	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
11999	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2581	102	8	MillerUpdatingRegression.java	MillerUpdatingRegression	numberOfVariables	int	0	ModelSpecificationException	$ < 1
2582	105	8	MillerUpdatingRegression.java	MillerUpdatingRegression	includeConstant	boolean	1	DEF	$
11372	122	8	MillerUpdatingRegression.java	MillerUpdatingRegression	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
11372	122	8	MillerUpdatingRegression.java	MillerUpdatingRegression	i	int	0	NIL-FOR	$ < this.nvars
2583	125	8	MillerUpdatingRegression.java	MillerUpdatingRegression	errorTolerance	double	1	DEF	$ > 0
2584	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != $.nvars
2584	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length + 1 != $.nvars
2584	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2584	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2584	170	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length != nvars
2584	170	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length + 1 != nvars
2585	175	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
2586	195	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != y.$.length
2586	195	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2586	195	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2586	195	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
2586	195	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2587	201	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length == 0
2587	201	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length == 0
2588	205	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x[0].length + 1 > x.$.length
2588	205	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$[0].length + 1 > $.length
11373	210	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
11373	210	8	MillerUpdatingRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
11373	210	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
11374	242	8	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
11374	242	8	MillerUpdatingRegression.java	include	i	int	0	NIL-FOR	$ < x.length
11374	242	8	MillerUpdatingRegression.java	include	x	double[]	0	NIL-FOR	i < $.length
2589	243	12	MillerUpdatingRegression.java	include	w	double	0	RET	$ == 0.0
2590	248	12	MillerUpdatingRegression.java	include	xi	double	0	DEF	$ == 0.0
2591	255	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2592	258	16	MillerUpdatingRegression.java	include	tmp	double	0	DEF	FastMath.abs($) > Precision.EPSILON
11375	266	12	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	k < $.nvars
11375	266	12	MillerUpdatingRegression.java	include	k	int	0	NIL-FOR	$ < nvars
2593	269	16	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2594	278	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2595	297	8	MillerUpdatingRegression.java	smartAdd	_a	double	1	RET	$ > _b
2595	297	8	MillerUpdatingRegression.java	smartAdd	_b	double	1	RET	_a > $
2596	299	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_b > $
2596	299	12	MillerUpdatingRegression.java	smartAdd	_b	double	0	RET	$ > eps
2597	305	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_a > $
2597	305	12	MillerUpdatingRegression.java	smartAdd	_a	double	0	RET	$ > eps
11376	326	8	MillerUpdatingRegression.java	clear	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
11376	326	8	MillerUpdatingRegression.java	clear	i	int	0	NIL-FOR	$ < nvars
11377	344	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
11377	344	8	MillerUpdatingRegression.java	tolset	i	int	0	NIL-FOR	$ < nvars
11378	348	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
11378	348	8	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	$ < nvars
11379	351	12	MillerUpdatingRegression.java	tolset	row	int	0	NIL-FOR	$ < col
11379	351	12	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	row < $
2598	373	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ < 1
2599	376	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	ModelSpecificationException	nreq > $.nvars
2599	376	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ > this.nvars
2600	380	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.tol_set
11380	385	8	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ > -1
2601	386	12	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[i]) < $.tol[i]
2601	386	12	MillerUpdatingRegression.java	regcf	i	int	1	DEF	Math.sqrt(d[$]) < tol[$]
11381	393	16	MillerUpdatingRegression.java	regcf	j	int	0	NIL-FOR	$ < nreq
11381	393	16	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	j < $
2602	399	8	MillerUpdatingRegression.java	regcf	rankProblem	boolean	0	DEF	$
11382	400	12	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ < nreq
11382	400	12	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	i < $
2603	401	16	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2603	401	16	MillerUpdatingRegression.java	regcf	i	int	0	DEF	this.lindep[$]
11383	415	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
11383	415	8	MillerUpdatingRegression.java	singcheck	i	int	0	NIL-FOR	$ < nvars
11384	418	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
11384	418	8	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	$ < nvars
11385	424	12	MillerUpdatingRegression.java	singcheck	row	int	0	NIL-FOR	$ < col - 1
11385	424	12	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	row < $ - 1
2604	425	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	Math.abs($.r[pos]) * $.work_sing[row] < temp
2604	425	16	MillerUpdatingRegression.java	singcheck	row	int	0	DEF	Math.abs(r[pos]) * work_sing[$] < temp
2604	425	16	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	Math.abs(r[pos]) * work_sing[row] < $
2604	425	16	MillerUpdatingRegression.java	singcheck	pos	int	0	DEF	Math.abs(r[$]) * work_sing[row] < temp
2605	434	12	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	$.work_sing[col] < temp
2605	434	12	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	work_sing[col] < $
2605	434	12	MillerUpdatingRegression.java	singcheck	col	int	0	DEF	work_sing[$] < temp
2606	436	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	1	DEF	col < $.nvars - 1
2606	436	16	MillerUpdatingRegression.java	singcheck	col	int	1	DEF	$ < nvars - 1
11386	439	20	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	_xi < $.nvars
11386	439	20	MillerUpdatingRegression.java	singcheck	_xi	int	0	NIL-FOR	$ < nvars
11387	467	8	MillerUpdatingRegression.java	ss	i	int	0	NIL-FOR	$ > 0
2607	493	8	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	RET	$.nobs <= nreq
2607	493	8	MillerUpdatingRegression.java	cov	nreq	int	0	RET	this.nobs <= $
11388	497	8	MillerUpdatingRegression.java	cov	i	int	0	NIL-FOR	$ < nreq
11388	497	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	i < $
2608	498	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2608	498	12	MillerUpdatingRegression.java	cov	i	int	0	DEF	this.lindep[$]
11389	511	8	MillerUpdatingRegression.java	cov	row	int	0	NIL-FOR	$ < nreq
11389	511	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	row < $
2609	513	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[row]
2609	513	12	MillerUpdatingRegression.java	cov	row	int	0	DEF	this.lindep[$]
11390	514	16	MillerUpdatingRegression.java	cov	col	int	0	NIL-FOR	$ < nreq
11390	514	16	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	col < $
2610	515	20	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	1	DEF	$.lindep[col]
2610	515	20	MillerUpdatingRegression.java	cov	col	int	1	DEF	this.lindep[$]
2611	517	24	MillerUpdatingRegression.java	cov	col	int	1	DEF	row == $
2611	517	24	MillerUpdatingRegression.java	cov	row	int	1	DEF	$ == col
11391	522	24	MillerUpdatingRegression.java	cov	k	int	0	NIL-FOR	$ < nreq
11391	522	24	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	k < $
2612	523	28	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2612	523	28	MillerUpdatingRegression.java	cov	k	int	0	DEF	this.lindep[$]
11392	553	8	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	$ > 0
2613	554	12	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	1	DEF	$.lindep[row]
2613	554	12	MillerUpdatingRegression.java	inverse	row	int	1	DEF	this.lindep[$]
11393	556	16	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	$ > row
11393	556	16	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	col > $
11394	560	20	MillerUpdatingRegression.java	inverse	k	int	0	NIL-FOR	$ < col - 1
11394	560	20	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	k < $ - 1
2614	562	24	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2614	562	24	MillerUpdatingRegression.java	inverse	k	int	0	DEF	this.lindep[$]
2615	622	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	RET	in >= $.nvars
2615	622	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ >= nvars
2615	622	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ < -1
2616	627	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	DEF	$.d[in] > 0.0
2616	627	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	DEF	d[$] > 0.0
11395	630	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
11395	630	8	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	$ < nvars
11396	633	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col
11396	633	12	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	row < $
2617	637	12	MillerUpdatingRegression.java	getPartialCorrelations	sumxx	double	1	DEF	$ > 0.0
11397	644	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	row < $.nvars
11397	644	8	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < nvars
2618	647	8	MillerUpdatingRegression.java	getPartialCorrelations	sumyy	double	0	DEF	$ > 0.0
11398	651	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col1 < $.nvars
11398	651	8	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	$ < nvars
11399	655	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col1
11399	655	12	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	row < $
11400	657	16	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
11400	657	16	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
11401	665	12	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
11401	665	12	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
2619	703	8	MillerUpdatingRegression.java	vmove	from	int	0	RET	$ == to
2619	703	8	MillerUpdatingRegression.java	vmove	to	int	0	RET	from == $
2620	706	8	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	$.rss_set
2621	710	8	MillerUpdatingRegression.java	vmove	from	int	1	DEF	$ < to
2621	710	8	MillerUpdatingRegression.java	vmove	to	int	1	DEF	from < $
11402	722	8	MillerUpdatingRegression.java	vmove	count	int	0	NIL-WHILE	idx < $
11402	722	8	MillerUpdatingRegression.java	vmove	idx	int	0	NIL-WHILE	$ < count
2622	730	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d1 > $.epsilon
2622	730	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 > $.epsilon
2622	730	12	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	$ > this.epsilon
2622	730	12	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ > this.epsilon
2623	732	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	Math.abs(X) * Math.sqrt(d1) < $.tol[mp1]
2623	732	16	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	Math.abs(X) * Math.sqrt($) < tol[mp1]
2623	732	16	MillerUpdatingRegression.java	vmove	mp1	int	0	DEF	Math.abs(X) * Math.sqrt(d1) < tol[$]
2624	735	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	Math.abs(X) < $.epsilon
2624	735	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	d1 < $.epsilon
2624	735	16	MillerUpdatingRegression.java	vmove	d1	double	1	DEF	$ < this.epsilon
11403	739	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
11403	739	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2625	751	23	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 < $.epsilon
2625	751	23	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ < this.epsilon
11404	754	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	_i < m1 + $.nvars - m - 1
11404	754	20	MillerUpdatingRegression.java	vmove	_i	int	0	NIL-FOR	$ < m1 + nvars - m - 1
11404	754	20	MillerUpdatingRegression.java	vmove	m1	int	0	NIL-FOR	_i < $ + nvars - m - 1
11404	754	20	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	_i < m1 + nvars - $ - 1
2626	761	16	MillerUpdatingRegression.java	vmove	bSkipTo40	boolean	0	DEF	$
11405	769	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
11405	769	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2627	781	12	MillerUpdatingRegression.java	vmove	m	int	0	DEF	$ > 0
11406	783	16	MillerUpdatingRegression.java	vmove	row	int	0	NIL-FOR	$ < m
11406	783	16	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	row < $
2628	824	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length > $.nvars + 1 - pos1
2628	824	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length < 1
2628	824	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length > nvars + 1 - pos1
2628	824	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length < 1
2628	824	8	MillerUpdatingRegression.java	reorderRegressors	pos1	int	0	RET	list.length > nvars + 1 - $
11407	829	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-WHILE	i < $.nvars
11407	829	8	MillerUpdatingRegression.java	reorderRegressors	i	int	0	NIL-WHILE	$ < nvars
11408	831	12	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-FOR	j < list.$.length
11408	831	12	MillerUpdatingRegression.java	reorderRegressors	j	int	0	NIL-FOR	$ < list.length
11408	831	12	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	NIL-FOR	j < $.length
2629	832	16	MillerUpdatingRegression.java	reorderRegressors	j	int	0	RET	l == list[$]
2629	832	16	MillerUpdatingRegression.java	reorderRegressors	next	int	0	RET	i > $
2629	832	16	MillerUpdatingRegression.java	reorderRegressors	i	int	0	RET	$ > next
2629	832	16	MillerUpdatingRegression.java	reorderRegressors	l	int	0	RET	$ == list[j]
2629	832	16	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	l == $[j]
2630	835	20	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	1	RET	next >= list.$.length + pos1
2630	835	20	MillerUpdatingRegression.java	reorderRegressors	next	int	1	RET	$ >= list.length + pos1
2630	835	20	MillerUpdatingRegression.java	reorderRegressors	list	int[]	1	RET	next >= $.length + pos1
2630	835	20	MillerUpdatingRegression.java	reorderRegressors	pos1	int	1	RET	next >= list.length + $
2631	858	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	RET	row_data.$.length > $.nvars
2631	858	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row_data	double[]	0	RET	$.length > nvars
2632	862	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
11409	870	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	NIL-FOR	col < xrow.$.length
11409	870	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	$ < xrow.length
11409	870	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	xrow	double[]	0	NIL-FOR	col < $.length
2633	871	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[col]) < $.tol[col]
2633	871	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	1	DEF	Math.sqrt(d[$]) < tol[$]
11410	876	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row	int	0	NIL-FOR	$ < col
11410	876	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	row < $
2634	920	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= numberOfRegressors
2634	920	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	this.nobs <= $
2635	925	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	numberOfRegressors > $.nvars
2635	925	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	$ > this.nvars
11411	940	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
11411	940	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2636	941	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2636	941	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
11412	947	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < numberOfRegressors
11412	947	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	i < $
2637	948	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != i
2637	948	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != $
2638	953	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
11413	962	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
11413	962	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < nvars
11414	963	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < numberOfRegressors
11414	963	16	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	j < $
2639	964	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == i
2639	964	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == i
2639	964	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == $
11415	975	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
11415	975	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
11415	975	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
11416	977	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
11416	977	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2640	979	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2640	979	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2641	1006	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	variablesToInclude.$.length > $.nvars
2641	1006	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > this.nvars
2642	1010	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= $.nvars
11417	1017	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
11417	1017	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
11417	1017	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2643	1018	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	i >= $.nvars
2643	1018	12	MillerUpdatingRegression.java	regress	i	int	0	ModelSpecificationException	$ >= this.nvars
2644	1022	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	$ > 0
2644	1022	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] == variablesToInclude[$ - 1]
2644	1022	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] == $[i - 1]
2645	1028	8	MillerUpdatingRegression.java	regress	iExclude	int	1	DEF	$ > 0
11418	1031	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
11418	1031	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
11418	1031	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2646	1032	16	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] > -1
2646	1032	16	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] > -1
11419	1052	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
11419	1052	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2647	1053	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2647	1053	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
11420	1059	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
11420	1059	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.nvars
2648	1060	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != series[i]
2648	1060	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != series[$]
2648	1060	12	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[i] != $[i]
2649	1065	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
11421	1072	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < series.$.length
11421	1072	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < series.length
11421	1072	12	MillerUpdatingRegression.java	regress	series	int[]	0	NIL-FOR	i < $.length
11422	1073	16	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	j < $.vorder.length
11422	1073	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < this.vorder.length
2650	1074	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == series[i]
2650	1074	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == series[i]
2650	1074	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == series[$]
2650	1074	20	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[j] == $[i]
11423	1085	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
11423	1085	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
11423	1085	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
11424	1087	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
11424	1087	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2651	1089	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2651	1089	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2387	78	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
2387	78	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
2387	78	8	Min.java	increment	d	double	0	DEF	$ < value
2388	134	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
2388	134	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2388	134	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
2388	134	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
11280	136	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11280	136	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11280	136	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2389	137	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2389	137	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
10021	88	8	MixtureMultivariateNormalDistribution.java	createComponents	THIS	MixtureMultivariateNormalDistribution	0	NIL-FOR	i < weights.$.length
10021	88	8	MixtureMultivariateNormalDistribution.java	createComponents	i	int	0	NIL-FOR	$ < weights.length
10021	88	8	MixtureMultivariateNormalDistribution.java	createComponents	weights	double[]	0	NIL-FOR	i < $.length
10040	72	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	i	int	0	NIL-FOR	$ < numComp
10040	72	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	numComp	int	0	NIL-FOR	i < $
1245	74	12	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	comp	Pair<Double,T>	0	DimensionMismatchException	$.getSecond().getDimension() != dim
1245	74	12	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	dim	int	0	DimensionMismatchException	comp.getSecond().getDimension() != $
1246	77	12	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	comp	Pair<Double,T>	0	NotPositiveException	$.getFirst() < 0
1247	84	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	weightSum	double	0	MathArithmeticException	Double.isInfinite($)
10041	91	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	i	int	0	NIL-FOR	$ < numComp
10041	91	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	numComp	int	0	NIL-FOR	i < $
10042	101	8	MixtureMultivariateRealDistribution.java	density	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
10042	101	8	MixtureMultivariateRealDistribution.java	density	i	int	0	NIL-FOR	$ < weight.length
10043	117	8	MixtureMultivariateRealDistribution.java	sample	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
10043	117	8	MixtureMultivariateRealDistribution.java	sample	i	int	0	NIL-FOR	$ < weight.length
1248	119	12	MixtureMultivariateRealDistribution.java	sample	randomValue	double	0	DEF	$ <= sum
1248	119	12	MixtureMultivariateRealDistribution.java	sample	sum	double	0	DEF	randomValue <= $
1249	126	8	MixtureMultivariateRealDistribution.java	sample	vals	double[]	0	DEF	$ == null
10044	143	8	MixtureMultivariateRealDistribution.java	reseedRandomGenerator	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.distribution.size()
10044	143	8	MixtureMultivariateRealDistribution.java	reseedRandomGenerator	i	int	0	NIL-FOR	$ < distribution.size()
10045	158	8	MixtureMultivariateRealDistribution.java	getComponents	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
10045	158	8	MixtureMultivariateRealDistribution.java	getComponents	i	int	0	NIL-FOR	$ < weight.length
4153	98	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMin) < $
4153	98	8	MullerSolver.java	doSolve	fMin	double	0	RET	FastMath.abs($) < functionValueAccuracy
4154	102	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMax) < $
4154	102	8	MullerSolver.java	doSolve	fMax	double	0	RET	FastMath.abs($) < functionValueAccuracy
4155	106	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fInitial) < $
4155	106	8	MullerSolver.java	doSolve	fInitial	double	0	RET	FastMath.abs($) < functionValueAccuracy
4156	112	8	MullerSolver.java	doSolve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial)
4156	112	8	MullerSolver.java	doSolve	min	double	1	RET	isBracketing($, initial)
4156	112	8	MullerSolver.java	doSolve	initial	double	1	RET	isBracketing(min, $)
4157	169	12	MullerSolver.java	solve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
4157	169	12	MullerSolver.java	solve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4157	169	12	MullerSolver.java	solve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
4157	169	12	MullerSolver.java	solve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
4157	169	12	MullerSolver.java	solve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
4158	182	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
4159	192	16	MullerSolver.java	solve	ym	double	1	DEF	FastMath.signum(y0) + FastMath.signum($) == 0.0
4159	192	16	MullerSolver.java	solve	y0	double	1	DEF	FastMath.signum($) + FastMath.signum(ym) == 0.0
4147	103	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y0) < $
4147	103	8	MullerSolver2.java	doSolve	y0	double	0	RET	FastMath.abs($) < functionValueAccuracy
4148	108	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y1) < $
4148	108	8	MullerSolver2.java	doSolve	y1	double	0	RET	FastMath.abs($) < functionValueAccuracy
4149	112	8	MullerSolver2.java	doSolve	y0	double	0	NoBracketingException	$ * y1 > 0
4149	112	8	MullerSolver2.java	doSolve	y1	double	0	NoBracketingException	y0 * $ > 0
4150	129	12	MullerSolver2.java	doSolve	delta	double	1	DEF	$ >= 0.0
4151	138	12	MullerSolver2.java	doSolve	denominator	double	1	DEF	$ != 0
12230	142	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x2
12230	142	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x1
12230	142	16	MullerSolver2.java	doSolve	x1	double	0	NIL-WHILE	x == $
12230	142	16	MullerSolver2.java	doSolve	x2	double	0	NIL-WHILE	x == $
4152	154	12	MullerSolver2.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
4152	154	12	MullerSolver2.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4152	154	12	MullerSolver2.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
4152	154	12	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
4152	154	12	MullerSolver2.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
2873	163	8	MultiDirectionalSimplex.java	iterate	best	PointValuePair	0	RET	comparator.compare(reflected, $) < 0
2873	163	8	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare($, best) < 0
2873	163	8	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(reflected, best) < 0
2874	168	12	MultiDirectionalSimplex.java	iterate	expanded	PointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
2874	168	12	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	DEF	comparator.compare($, expanded) <= 0
2874	168	12	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
11483	202	8	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
11483	202	8	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
11484	205	12	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
11484	205	12	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
2037	166	8	MultiDirectionalSimplex.java	iterate	best	PointValuePair	0	RET	comparator.compare(reflected, $) < 0
2037	166	8	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare($, best) < 0
2037	166	8	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(reflected, best) < 0
2038	171	12	MultiDirectionalSimplex.java	iterate	expanded	PointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
2038	171	12	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	DEF	comparator.compare($, expanded) <= 0
2038	171	12	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
11052	205	8	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
11052	205	8	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
11053	208	12	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
11053	208	12	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
11827	89	8	MultiKMeansPlusPlusClusterer.java	cluster	THIS	MultiKMeansPlusPlusClusterer	0	NIL-FOR	i < $.numTrials
11827	89	8	MultiKMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
3316	97	16	MultiKMeansPlusPlusClusterer.java	cluster	THIS	MultiKMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
3317	110	12	MultiKMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
3317	110	12	MultiKMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
2777	81	8	MultiStartUnivariateOptimizer.java	MultiStartUnivariateOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
2778	119	8	MultiStartUnivariateOptimizer.java	getOptima	THIS	MultiStartUnivariateOptimizer	0	MathIllegalStateException	$.optima == null
11438	147	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	NIL-FOR	i < $.optimData.$.length
11438	147	8	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < optimData.length
2779	148	12	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	DEF	$.optimData[i] instanceof MaxEval
2779	148	12	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof MaxEval
2780	153	12	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	DEF	$.optimData[i] instanceof SearchInterval
2780	153	12	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof SearchInterval
2781	159	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	MathIllegalStateException	$.maxEvalIndex == -1
2782	162	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	MathIllegalStateException	$.searchIntervalIndex == -1
11439	176	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	NIL-FOR	i < $.starts
11439	176	8	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < starts
2783	199	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	DEF	$.optima[0] == null
9867	173	8	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
9867	173	8	MultidimensionalCounter.java	MultidimensionalCounter	i	int	0	NIL-FOR	$ < last
9868	175	12	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	j < $.dimension
9868	175	12	MultidimensionalCounter.java	MultidimensionalCounter	j	int	0	NIL-FOR	$ < dimension
78	183	8	MultidimensionalCounter.java	MultidimensionalCounter	tS	int	0	NotStrictlyPositiveException	$ <= 0
79	217	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.totalSize
79	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ >= totalSize
79	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ < 0
9869	225	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
9869	225	8	MultidimensionalCounter.java	getCounts	i	int	0	NIL-FOR	$ < last
9870	228	12	MultidimensionalCounter.java	getCounts	count	int	0	NIL-WHILE	$ <= index
9870	228	12	MultidimensionalCounter.java	getCounts	index	int	0	NIL-WHILE	count <= $
80	255	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	DimensionMismatchException	c.$.length != $.dimension
80	255	8	MultidimensionalCounter.java	getCount	c	int	0	DimensionMismatchException	$.length != dimension
9871	259	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
9871	259	8	MultidimensionalCounter.java	getCount	i	int	0	NIL-FOR	$ < dimension
81	261	12	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.size[i]
81	261	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ < 0
81	261	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ >= size[i]
81	261	12	MultidimensionalCounter.java	getCount	i	int	0	OutOfRangeException	index >= size[$]
9872	293	8	MultidimensionalCounter.java	toString	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
9872	293	8	MultidimensionalCounter.java	toString	i	int	0	NIL-FOR	$ < dimension
3629	120	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	NumberIsTooSmallException	$ < 2
3630	232	12	MultistepIntegrator.java	start	THIS	MultistepIntegrator	1	DEF	$.starter instanceof AbstractIntegrator
3105	104	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
3105	104	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
3105	104	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
11674	107	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < lower.$.length
11674	107	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < lower.length
11674	107	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NIL-FOR	i < $.length
3106	109	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
3106	109	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
3106	109	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
11675	116	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
11675	116	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < mappers.length
3107	117	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(lower[$])
3107	117	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	1	DEF	Double.isInfinite($[i])
3108	118	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
3108	118	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
3109	126	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
3109	126	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
11676	146	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
11676	146	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	i	int	0	NIL-FOR	$ < mappers.length
11677	162	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
11677	162	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	i	int	0	NIL-FOR	$ < mappers.length
2276	105	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2276	105	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2276	105	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
11247	108	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < lower.$.length
11247	108	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < lower.length
11247	108	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NIL-FOR	i < $.length
2277	110	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2277	110	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2277	110	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
11248	117	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
11248	117	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < mappers.length
2278	118	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(lower[$])
2278	118	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	1	DEF	Double.isInfinite($[i])
2279	119	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2279	119	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
2280	127	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2280	127	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
11249	147	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
11249	147	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	i	int	0	NIL-FOR	$ < mappers.length
11250	163	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
11250	163	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	i	int	0	NIL-FOR	$ < mappers.length
3099	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
3099	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
3099	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
3100	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != scale.$.length
3100	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != scale.length
3100	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	scale	double[]	0	DimensionMismatchException	lower.length != $.length
11671	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < lower.$.length
11671	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NIL-FOR	$ < lower.length
11671	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NIL-FOR	i < $.length
3101	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
3101	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
3101	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
11672	164	8	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < $.scale.$.length
11672	164	8	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	NIL-FOR	$ < scale.length
3102	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] > $.upper[i]
3102	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] < $.lower[i]
3102	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] > upper[$]
3102	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] < lower[$]
3102	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] > upper[i]
3102	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] < lower[i]
11673	168	16	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	j < $.scale.$.length
11673	168	16	MultivariateFunctionPenaltyAdapter.java	value	j	int	0	NIL-FOR	$ < scale.length
3103	170	20	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] < $.lower[j]
3103	170	20	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] < lower[$]
3103	170	20	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] < lower[j]
3104	172	27	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] > $.upper[j]
3104	172	27	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] > upper[$]
3104	172	27	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] > upper[j]
2270	133	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2270	133	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2270	133	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
2271	136	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != scale.$.length
2271	136	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != scale.length
2271	136	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	scale	double[]	0	DimensionMismatchException	lower.length != $.length
11244	139	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < lower.$.length
11244	139	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NIL-FOR	$ < lower.length
11244	139	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NIL-FOR	i < $.length
2272	141	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2272	141	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2272	141	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
11245	166	8	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < $.scale.$.length
11245	166	8	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	NIL-FOR	$ < scale.length
2273	167	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] < $.lower[i]
2273	167	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] > $.upper[i]
2273	167	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] < lower[$]
2273	167	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] > upper[$]
2273	167	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] < lower[i]
2273	167	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] > upper[i]
11246	170	16	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	j < $.scale.$.length
11246	170	16	MultivariateFunctionPenaltyAdapter.java	value	j	int	0	NIL-FOR	$ < scale.length
2274	172	20	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] < $.lower[j]
2274	172	20	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] < lower[$]
2274	172	20	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] < lower[j]
2275	174	27	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] > $.upper[j]
2275	174	27	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] > upper[$]
2275	174	27	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] > upper[j]
1104	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	covariances.$.length != dim
1104	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	DimensionMismatchException	covariances.length != $
1104	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covariances	double[][]	0	DimensionMismatchException	$.length != dim
10001	111	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NIL-FOR	$ < dim
10001	111	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	i < $
1105	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	dim != covariances[i].length
1105	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	DimensionMismatchException	dim != covariances[$].length
1105	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	DimensionMismatchException	$ != covariances[i].length
1105	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covariances	double[][]	0	DimensionMismatchException	dim != $[i].length
10002	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < covMatEigenvalues.$.length
10002	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NIL-FOR	$ < covMatEigenvalues.length
10002	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covMatEigenvalues	double[]	0	NIL-FOR	i < $.length
1106	133	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NonPositiveDefiniteMatrixException	covMatEigenvalues[$] < 0
1106	133	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covMatEigenvalues	double[]	0	NonPositiveDefiniteMatrixException	$[i] < 0
10003	140	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	v	int	0	NIL-FOR	$ < dim
10003	140	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	v < $
10004	148	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	row	int	0	NIL-FOR	$ < dim
10004	148	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	row < $
10005	150	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	col	int	0	NIL-FOR	$ < dim
10005	150	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	col < $
1107	179	8	MultivariateNormalDistribution.java	density	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	vals.$.length != dim
1107	179	8	MultivariateNormalDistribution.java	density	dim	int	0	DimensionMismatchException	vals.length != $
1107	179	8	MultivariateNormalDistribution.java	density	vals	double[]	0	DimensionMismatchException	$.length != dim
10006	198	8	MultivariateNormalDistribution.java	getStandardDeviations	i	int	0	NIL-FOR	$ < dim
10006	198	8	MultivariateNormalDistribution.java	getStandardDeviations	dim	int	0	NIL-FOR	i < $
10007	210	8	MultivariateNormalDistribution.java	sample	i	int	0	NIL-FOR	$ < dim
10007	210	8	MultivariateNormalDistribution.java	sample	dim	int	0	NIL-FOR	i < $
10008	216	8	MultivariateNormalDistribution.java	sample	i	int	0	NIL-FOR	$ < dim
10008	216	8	MultivariateNormalDistribution.java	sample	dim	int	0	NIL-FOR	i < $
10009	231	8	MultivariateNormalDistribution.java	getExponentTerm	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < centered.$.length
10009	231	8	MultivariateNormalDistribution.java	getExponentTerm	i	int	0	NIL-FOR	$ < centered.length
10009	231	8	MultivariateNormalDistribution.java	getExponentTerm	centered	double[]	0	NIL-FOR	i < $.length
10010	236	8	MultivariateNormalDistribution.java	getExponentTerm	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < preMultiplied.$.length
10010	236	8	MultivariateNormalDistribution.java	getExponentTerm	i	int	0	NIL-FOR	$ < preMultiplied.length
10010	236	8	MultivariateNormalDistribution.java	getExponentTerm	preMultiplied	double[]	0	NIL-FOR	i < $.length
1185	89	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	NotStrictlyPositiveException	data.$.length < 1
1185	89	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	NotStrictlyPositiveException	$.length < 1
10022	95	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	NIL-FOR	i < data.$.length
10022	95	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	i	int	0	NIL-FOR	$ < data.length
10022	95	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	NIL-FOR	i < $.length
1186	96	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	DimensionMismatchException	data[i].length != data[0].length
1186	96	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	i	int	0	DimensionMismatchException	data[$].length != data[0].length
1186	96	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	DimensionMismatchException	$[i].length != $[0].length
1187	101	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	NumberIsTooSmallException	data[i].length < 2
1187	101	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	i	int	0	NumberIsTooSmallException	data[$].length < 2
1187	101	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	NumberIsTooSmallException	$[i].length < 2
1188	137	8	MultivariateNormalMixtureExpectationMaximization.java	fit	maxIterations	int	0	NotStrictlyPositiveException	$ < 1
1189	141	8	MultivariateNormalMixtureExpectationMaximization.java	fit	threshold	double	0	NotStrictlyPositiveException	$ < Double.MIN_VALUE
1190	155	8	MultivariateNormalMixtureExpectationMaximization.java	fit	numCols	int	0	DimensionMismatchException	numMeanColumns != $
1190	155	8	MultivariateNormalMixtureExpectationMaximization.java	fit	numMeanColumns	int	0	DimensionMismatchException	$ != numCols
10023	167	8	MultivariateNormalMixtureExpectationMaximization.java	fit	THIS	MultivariateNormalMixtureExpectationMaximization	0	NIL-WHILE	Math.abs(previousLogLikelihood - $.logLikelihood) > threshold
10023	167	8	MultivariateNormalMixtureExpectationMaximization.java	fit	numIterations	int	0	NIL-WHILE	$++ <= maxIterations
10023	167	8	MultivariateNormalMixtureExpectationMaximization.java	fit	previousLogLikelihood	double	0	NIL-WHILE	Math.abs($ - logLikelihood) > threshold
10023	167	8	MultivariateNormalMixtureExpectationMaximization.java	fit	maxIterations	int	0	NIL-WHILE	numIterations++ <= $
10023	167	8	MultivariateNormalMixtureExpectationMaximization.java	fit	threshold	double	0	NIL-WHILE	Math.abs(previousLogLikelihood - logLikelihood) > $
10024	181	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
10024	181	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
10025	198	12	MultivariateNormalMixtureExpectationMaximization.java	fit	i	int	0	NIL-FOR	$ < n
10025	198	12	MultivariateNormalMixtureExpectationMaximization.java	fit	n	int	0	NIL-FOR	i < $
10026	202	16	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
10026	202	16	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
10027	206	20	MultivariateNormalMixtureExpectationMaximization.java	fit	col	int	0	NIL-FOR	$ < numCols
10027	206	20	MultivariateNormalMixtureExpectationMaximization.java	fit	numCols	int	0	NIL-FOR	col < $
10028	219	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
10028	219	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
10029	221	16	MultivariateNormalMixtureExpectationMaximization.java	fit	col	int	0	NIL-FOR	$ < numCols
10029	221	16	MultivariateNormalMixtureExpectationMaximization.java	fit	numCols	int	0	NIL-FOR	col < $
10030	228	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
10030	228	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
10031	231	12	MultivariateNormalMixtureExpectationMaximization.java	fit	i	int	0	NIL-FOR	$ < n
10031	231	12	MultivariateNormalMixtureExpectationMaximization.java	fit	n	int	0	NIL-FOR	i < $
10032	232	16	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
10032	232	16	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
10033	243	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
10033	243	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
1191	254	8	MultivariateNormalMixtureExpectationMaximization.java	fit	THIS	MultivariateNormalMixtureExpectationMaximization	0	ConvergenceException	Math.abs(previousLogLikelihood - $.logLikelihood) > threshold
1191	254	8	MultivariateNormalMixtureExpectationMaximization.java	fit	previousLogLikelihood	double	0	ConvergenceException	Math.abs($ - logLikelihood) > threshold
1191	254	8	MultivariateNormalMixtureExpectationMaximization.java	fit	threshold	double	0	ConvergenceException	Math.abs(previousLogLikelihood - logLikelihood) > $
1192	305	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	THIS	MultivariateNormalMixtureExpectationMaximization	0	NotStrictlyPositiveException	data.$.length < 2
1192	305	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	data	double[][]	0	NotStrictlyPositiveException	$.length < 2
1193	308	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numComponents	int	0	NumberIsTooSmallException	$ < 2
1194	311	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	THIS	MultivariateNormalMixtureExpectationMaximization	0	NumberIsTooLargeException	numComponents > data.$.length
1194	311	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	data	double[][]	0	NumberIsTooLargeException	numComponents > $.length
1194	311	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numComponents	int	0	NumberIsTooLargeException	$ > data.length
10034	320	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	i	int	0	NIL-FOR	$ < numRows
10034	320	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numRows	int	0	NIL-FOR	i < $
10035	333	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	binIndex	int	0	NIL-FOR	$ < numComponents
10035	333	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numComponents	int	0	NIL-FOR	binIndex < $
10036	350	12	MultivariateNormalMixtureExpectationMaximization.java	estimate	i	int	0	NIL-FOR	$ < maxIndex
10036	350	12	MultivariateNormalMixtureExpectationMaximization.java	estimate	maxIndex	int	0	NIL-FOR	i < $
10037	351	16	MultivariateNormalMixtureExpectationMaximization.java	estimate	j	int	0	NIL-FOR	$ < numCols
10037	351	16	MultivariateNormalMixtureExpectationMaximization.java	estimate	numCols	int	0	NIL-FOR	j < $
3096	86	12	MultivariateOptimizer.java	parseOptimizationData	THIS	MultivariateOptimizer	0	DEF	$.data instanceof GoalType
3097	90	12	MultivariateOptimizer.java	parseOptimizationData	THIS	MultivariateOptimizer	0	DEF	$.data instanceof ObjectiveFunction
11251	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
11251	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
11252	150	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
11252	150	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
11253	187	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
11253	187	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
11253	187	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
2282	246	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
2283	248	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
11254	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
11254	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
11255	336	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
11255	336	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
11255	336	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
2284	337	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
11256	350	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
11256	350	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
2285	370	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
2285	370	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
2286	373	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
2287	620	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	MathIllegalStateException	$.n > 0
2288	632	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
2288	632	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
3117	137	12	MultivariateVectorOptimizer.java	parseOptimizationData	THIS	MultivariateVectorOptimizer	0	DEF	$.data instanceof ModelFunction
3118	141	12	MultivariateVectorOptimizer.java	parseOptimizationData	THIS	MultivariateVectorOptimizer	0	DEF	$.data instanceof Target
3119	145	12	MultivariateVectorOptimizer.java	parseOptimizationData	THIS	MultivariateVectorOptimizer	0	DEF	$.data instanceof Weight
3120	162	8	MultivariateVectorOptimizer.java	checkParameters	THIS	MultivariateVectorOptimizer	0	DimensionMismatchException	$.target.$.length != $.weightMatrix.getColumnDimension()
3252	68	8	NPointCrossover.java	NPointCrossover	crossoverPoints	int	0	NotStrictlyPositiveException	$ <= 0
3253	111	8	NPointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3253	111	8	NPointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3254	131	8	NPointCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3254	131	8	NPointCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
3255	134	8	NPointCrossover.java	mate	THIS	NPointCrossover	0	NumberIsTooLargeException	$.crossoverPoints >= length
3255	134	8	NPointCrossover.java	mate	length	int	0	NumberIsTooLargeException	crossoverPoints >= $
11802	152	8	NPointCrossover.java	mate	THIS	NPointCrossover	0	NIL-FOR	i < $.crossoverPoints
11802	152	8	NPointCrossover.java	mate	i	int	0	NIL-FOR	$ < crossoverPoints
11803	157	12	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < crossoverIndex
11803	157	12	NPointCrossover.java	mate	crossoverIndex	int	0	NIL-FOR	j < $
11804	171	8	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < length
11804	171	8	NPointCrossover.java	mate	length	int	0	NIL-FOR	j < $
11352	196	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
11352	196	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
11352	196	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
2540	217	16	NaturalRanking.java	rank	nanPositions	List<Integer>	0	NotANumberException	$.size() > 0
11353	235	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
11353	235	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
11353	235	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2541	236	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
2541	236	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
2542	239	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2543	250	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2544	253	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
2545	267	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
2545	267	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
11354	272	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
11354	272	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
11354	272	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2546	273	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
2546	273	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
11355	275	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
11355	275	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
11355	275	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
11356	297	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
11356	297	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
11356	297	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2547	298	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2547	298	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
11357	312	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
11357	312	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
11357	312	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2548	313	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
2548	313	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
11358	355	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
11359	366	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
11360	384	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
2549	396	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
11361	400	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
11362	414	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
11362	414	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
11362	414	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2550	415	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2550	415	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
11661	200	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
11661	200	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
11662	202	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
11662	202	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
11663	207	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
11663	207	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
11664	213	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
11664	213	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3085	219	8	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare($, reflected) <= 0
3085	219	8	NelderMeadSimplex.java	iterate	secondBest	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
3085	219	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(best, $) <= 0
3085	219	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, secondBest) < 0
3085	219	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(best, reflected) <= 0
3085	219	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
3086	223	15	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
3086	223	15	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, best) < 0
3086	223	15	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, best) < 0
11665	226	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
11665	226	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3087	232	12	NelderMeadSimplex.java	iterate	expanded	PointValuePair	1	DEF	comparator.compare($, reflected) < 0
3087	232	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(expanded, $) < 0
3087	232	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
3088	240	12	NelderMeadSimplex.java	iterate	worst	PointValuePair	1	RET	comparator.compare(reflected, $) < 0
3088	240	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	RET	comparator.compare($, worst) < 0
3088	240	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	RET	$.compare(reflected, worst) < 0
11666	243	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
11666	243	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3089	248	16	NelderMeadSimplex.java	iterate	outContracted	PointValuePair	0	RET	comparator.compare($, reflected) <= 0
3089	248	16	NelderMeadSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
3089	248	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
11667	256	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
11667	256	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3090	262	16	NelderMeadSimplex.java	iterate	inContracted	PointValuePair	0	RET	comparator.compare($, worst) < 0
3090	262	16	NelderMeadSimplex.java	iterate	worst	PointValuePair	0	RET	comparator.compare(inContracted, $) < 0
3090	262	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(inContracted, worst) < 0
11668	271	12	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
11668	271	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
11669	273	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
11669	273	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
11230	203	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
11230	203	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
11231	205	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
11231	205	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
11232	210	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
11232	210	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
11233	216	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
11233	216	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2249	222	8	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare($, reflected) <= 0
2249	222	8	NelderMeadSimplex.java	iterate	secondBest	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
2249	222	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(best, $) <= 0
2249	222	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, secondBest) < 0
2249	222	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(best, reflected) <= 0
2249	222	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
2250	226	15	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
2250	226	15	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, best) < 0
2250	226	15	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, best) < 0
11234	229	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
11234	229	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2251	235	12	NelderMeadSimplex.java	iterate	expanded	PointValuePair	1	DEF	comparator.compare($, reflected) < 0
2251	235	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(expanded, $) < 0
2251	235	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
2252	243	12	NelderMeadSimplex.java	iterate	worst	PointValuePair	1	RET	comparator.compare(reflected, $) < 0
2252	243	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	RET	comparator.compare($, worst) < 0
2252	243	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	RET	$.compare(reflected, worst) < 0
11235	246	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
11235	246	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2253	251	16	NelderMeadSimplex.java	iterate	outContracted	PointValuePair	0	RET	comparator.compare($, reflected) <= 0
2253	251	16	NelderMeadSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
2253	251	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
11236	259	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
11236	259	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2254	265	16	NelderMeadSimplex.java	iterate	inContracted	PointValuePair	0	RET	comparator.compare($, worst) < 0
2254	265	16	NelderMeadSimplex.java	iterate	worst	PointValuePair	0	RET	comparator.compare(inContracted, $) < 0
2254	265	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(inContracted, worst) < 0
11237	274	12	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
11237	274	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
11238	276	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
11238	276	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
862	78	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	MathIllegalArgumentException	$[0] == null
9980	88	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	0	NIL-FOR	i < loop.$.length
9980	88	8	NestedLoops.java	NestedLoops	i	int	0	NIL-FOR	$ < loop.length
9980	88	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	NIL-FOR	i < $.length
863	99	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	1	DEF	Double.isInfinite($.polygon.getSize())
864	126	12	NestedLoops.java	add	THIS	NestedLoops	0	RET	$.child.$.polygon.contains(node.$.polygon)
864	126	12	NestedLoops.java	add	node	NestedLoops	0	RET	child.polygon.contains($.polygon)
9981	133	8	NestedLoops.java	add	iterator	Iterator<NestedLoops>	0	NIL-FOR	$.hasNext()
865	135	12	NestedLoops.java	add	THIS	NestedLoops	0	DEF	node.$.polygon.contains(child.$.polygon)
865	135	12	NestedLoops.java	add	child	NestedLoops	0	DEF	node.polygon.contains($.polygon)
865	135	12	NestedLoops.java	add	node	NestedLoops	0	DEF	$.polygon.contains(child.polygon)
866	144	12	NestedLoops.java	add	THIS	NestedLoops	0	MathIllegalArgumentException	factory.intersection(node.$.polygon, $.child.$.polygon).isEmpty()
866	144	12	NestedLoops.java	add	factory	RegionFactory<Euclidean2D>	0	MathIllegalArgumentException	$.intersection(node.polygon, child.polygon).isEmpty()
866	144	12	NestedLoops.java	add	node	NestedLoops	0	MathIllegalArgumentException	factory.intersection($.polygon, child.polygon).isEmpty()
867	170	8	NestedLoops.java	setClockWise	THIS	NestedLoops	0	DEF	$.originalIsClockwise ^ clockwise
867	170	8	NestedLoops.java	setClockWise	clockwise	boolean	0	DEF	originalIsClockwise ^ $
9982	174	12	NestedLoops.java	setClockWise	min	int	0	NIL-WHILE	++$ < --max
9982	174	12	NestedLoops.java	setClockWise	max	int	0	NIL-WHILE	++min < --$
4118	86	12	NewtonRaphsonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
4118	86	12	NewtonRaphsonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
4118	86	12	NewtonRaphsonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
4119	86	12	NewtonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
4119	86	12	NewtonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
4119	86	12	NewtonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
3110	198	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
3110	198	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
11678	199	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11678	199	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
11679	209	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11679	209	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3111	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	RET	checker.converged($.getIterations(), previous, current)
3111	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	checker.converged(getIterations(), $, current)
3111	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	$ != null
3111	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	RET	$.converged(getIterations(), previous, current)
3111	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	current	PointValuePair	0	RET	checker.converged(getIterations(), previous, $)
11680	236	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < point.$.length
11680	236	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
11680	236	12	NonLinearConjugateGradientOptimizer.java	doOptimize	point	double[]	0	NIL-FOR	i < $.length
3112	241	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
3112	241	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
11681	242	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11681	242	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
11682	251	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11682	251	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
11683	262	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
11683	262	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
11683	262	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
3113	274	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.getIterations() % n == 0
3113	274	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
3113	274	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	getIterations() % $ == 0
11684	280	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11684	280	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3114	305	12	NonLinearConjugateGradientOptimizer.java	parseOptimizationData	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.data instanceof BracketingStep
11685	329	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
3115	332	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
3115	332	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
3116	399	8	NonLinearConjugateGradientOptimizer.java	checkParameters	THIS	NonLinearConjugateGradientOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3116	399	8	NonLinearConjugateGradientOptimizer.java	checkParameters	THIS	NonLinearConjugateGradientOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
2004	141	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
2005	156	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
2005	156	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
11025	157	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11025	157	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
11026	167	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11026	167	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2006	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	$ != null
2006	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	checker.converged(iter, $, current)
2006	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	RET	$.converged(iter, previous, current)
2006	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	current	PointValuePair	0	RET	checker.converged(iter, previous, $)
2006	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
11027	195	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
11027	195	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
2007	200	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
2007	200	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
11028	201	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11028	201	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
11029	210	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11029	210	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2008	215	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
11030	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
11030	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
11030	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
2009	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
2009	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	iter % $ == 0
2009	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	1	DEF	$ % n == 0
11031	233	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11031	233	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
11032	253	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
2010	256	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
2010	256	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
3451	86	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
3451	86	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
3452	89	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
3452	89	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
3453	92	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
3453	92	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
11901	151	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
11901	151	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
11902	157	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
11902	157	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
11902	157	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
11903	160	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
11903	160	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
11903	160	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
11904	201	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
11905	205	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
11905	205	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
11905	205	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
11906	212	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
11906	212	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
3454	234	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
11907	238	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
11907	238	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
3455	243	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
3456	268	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
11908	270	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
11908	270	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
3457	278	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
3458	284	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
3458	284	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
1117	107	8	NormalDistribution.java	NormalDistribution	sd	double	0	NotStrictlyPositiveException	$ <= 0
1118	150	8	NormalDistribution.java	cumulativeProbability	THIS	NormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.standardDeviation
1118	150	8	NormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * standardDeviation
1119	161	8	NormalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1119	161	8	NormalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1120	183	8	NormalDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1120	183	8	NormalDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
11425	112	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
11425	112	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
11426	113	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
11426	113	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
2652	114	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
2652	114	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
2652	114	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
2652	114	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
2653	143	8	OLSMultipleLinearRegression.java	calculateTotalSumOfSquares	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2654	198	8	OLSMultipleLinearRegression.java	calculateAdjustedRSquared	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
3301	82	8	OnePointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3301	82	8	OnePointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3302	100	8	OnePointCrossover.java	crossover	length	int	0	DimensionMismatchException	$ != second.getLength()
3302	100	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
11820	115	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
11820	115	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
11821	120	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
11821	120	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
2448	251	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ <= 0
2448	251	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ > 0.5
2449	279	8	OneWayAnova.java	anovaStats	allowOneElementData	boolean	0	DimensionMismatchException	$
2450	281	12	OneWayAnova.java	anovaStats	categoryData	Collection<SummaryStatistics>	0	DimensionMismatchException	$.size() < 2
2451	288	16	OneWayAnova.java	anovaStats	THIS	OneWayAnova	0	DimensionMismatchException	$.array.getN() <= 1
244	150	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
245	155	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
245	155	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
246	179	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
246	179	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
246	179	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
247	183	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
247	183	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
9933	188	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
9933	188	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
248	191	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
248	191	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
248	191	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
249	209	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
249	209	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
249	209	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
250	213	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
250	213	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
9934	218	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
9934	218	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
251	221	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
251	221	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
251	221	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
252	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
252	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
253	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
253	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
253	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
253	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
253	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
254	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
254	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
255	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
255	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
255	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
255	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
255	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
256	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
256	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
257	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
257	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
258	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
258	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
259	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
259	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
259	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
259	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
259	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
260	353	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
260	353	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
260	353	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
261	357	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
261	357	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
9935	362	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
9935	362	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
262	365	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
262	365	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
262	365	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
263	410	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
264	418	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
265	420	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
9936	444	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
9936	444	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
266	445	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
266	445	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
532	163	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
533	168	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
533	168	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
534	192	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
534	192	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
534	192	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
535	196	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
535	196	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
9946	201	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
9946	201	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
536	204	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
536	204	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
536	204	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
537	222	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
537	222	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
537	222	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
538	226	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
538	226	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
9947	231	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
9947	231	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
539	234	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
539	234	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
539	234	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
540	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
540	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
541	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
541	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
541	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
541	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
541	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
542	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
542	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
543	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
543	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
543	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
543	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
543	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
544	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
544	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
545	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
545	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
546	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
546	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
547	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
547	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
547	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
547	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
547	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
548	366	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
548	366	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
548	366	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
549	370	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
549	370	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
9948	375	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
9948	375	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
550	378	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
550	378	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
550	378	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
551	423	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
552	431	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
553	433	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
9949	457	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
9949	457	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
554	458	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
554	458	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
1855	66	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lRow	long	0	NumberIsTooLargeException	$ * lCol >= Integer.MAX_VALUE
1855	66	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lCol	long	0	NumberIsTooLargeException	lRow * $ >= Integer.MAX_VALUE
10931	123	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
10932	158	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
10933	186	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
10934	192	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
10934	192	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
10935	218	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
10936	224	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
10936	224	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
1856	226	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
1856	226	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
1856	226	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
1857	230	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
1858	262	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
1859	277	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
1860	292	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
10856	144	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
10856	144	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
10856	144	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
1790	146	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1790	146	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
10857	173	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
10857	173	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
10857	173	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
1791	175	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1791	175	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
10858	201	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
10858	201	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
1792	203	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1792	203	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
1793	235	8	OpenMapRealVector.java	add	v	RealVector	1	RET	$ instanceof OpenMapRealVector
10859	257	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1794	260	12	OpenMapRealVector.java	add	key	int	1	DEF	randomAccess.containsKey($)
1794	260	12	OpenMapRealVector.java	add	randomAccess	OpenIntToDoubleHashMap	1	DEF	$.containsKey(key)
10860	277	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1795	287	8	OpenMapRealVector.java	append	v	RealVector	1	RET	$ instanceof OpenMapRealVector
10861	291	12	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < v.getDimension()
10861	291	12	OpenMapRealVector.java	append	v	RealVector	0	NIL-FOR	i < $.getDimension()
10862	350	8	OpenMapRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < n
10862	350	8	OpenMapRealVector.java	ebeDivide	n	int	0	NIL-FOR	i < $
10863	363	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
1796	374	8	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isInfinite()
1796	374	8	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isNaN()
10864	376	12	OpenMapRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < n
10864	376	12	OpenMapRealVector.java	ebeMultiply	n	int	0	NIL-FOR	i < $
1797	378	16	OpenMapRealVector.java	ebeMultiply	y	double	1	DEF	Double.isNaN($)
1798	380	23	OpenMapRealVector.java	ebeMultiply	y	double	0	DEF	Double.isInfinite($)
1799	394	8	OpenMapRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
10865	401	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1800	404	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
1800	404	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
1800	404	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
1800	404	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
10866	429	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
10867	437	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1801	440	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1801	440	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
1802	452	8	OpenMapRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
10868	481	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
10869	487	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1803	490	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1803	490	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
1804	503	8	OpenMapRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
10870	522	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1805	525	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
1805	525	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
10871	530	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1806	533	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1806	533	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
1806	533	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
1806	533	12	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
1807	545	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
10872	557	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
1808	560	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
1809	563	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
10873	574	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
1810	576	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
10874	592	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
10874	592	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
1811	603	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isDefaultValue(value)
1811	603	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isDefaultValue($)
1812	605	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
1812	605	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
10875	616	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.getDimension()
10875	616	8	OpenMapRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < $.getDimension()
10876	624	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
10876	624	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
10877	641	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1813	644	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
1813	644	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1814	658	8	OpenMapRealVector.java	subtract	v	RealVector	1	RET	$ instanceof OpenMapRealVector
1815	677	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	MathArithmeticException	$.isDefaultValue(norm)
1815	677	8	OpenMapRealVector.java	unitize	norm	double	0	MathArithmeticException	isDefaultValue($)
10878	681	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
10879	692	8	OpenMapRealVector.java	toArray	iter	Iterator	0	NIL-WHILE	$.hasNext()
10880	714	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1816	730	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
1816	730	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
1817	733	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
1818	737	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
1818	737	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
1819	740	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
1819	740	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
10881	745	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1820	748	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
1820	748	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
10882	753	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1821	756	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
1821	756	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
1821	756	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
3303	74	8	OrderedCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3303	74	8	OrderedCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3304	92	8	OrderedCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3304	92	8	OrderedCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
11822	110	8	OrderedCrossover.java	mate	a	int	0	NIL-DOWHILE	$ == b
11822	110	8	OrderedCrossover.java	mate	b	int	0	NIL-DOWHILE	a == $
11823	124	8	OrderedCrossover.java	mate	i	int	0	NIL-FOR	$ <= length
11823	124	8	OrderedCrossover.java	mate	length	int	0	NIL-FOR	i <= $
3305	132	12	OrderedCrossover.java	mate	item2	T	0	DEF	child1Set.contains($)
3305	132	12	OrderedCrossover.java	mate	child1Set	Set<T>	0	DEF	$.contains(item2)
3306	138	12	OrderedCrossover.java	mate	item1	T	0	DEF	child2Set.contains($)
3306	138	12	OrderedCrossover.java	mate	child2Set	Set<T>	0	DEF	$.contains(item1)
9955	139	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	NIL-FOR	i < components.$.length
9955	139	8	OrderedTuple.java	OrderedTuple	i	int	0	NIL-FOR	$ < components.length
9955	139	8	OrderedTuple.java	OrderedTuple	components	double	0	NIL-FOR	i < $.length
570	140	12	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isInfinite(components[$])
570	140	12	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isInfinite($[i])
571	141	16	OrderedTuple.java	OrderedTuple	i	int	1	DEF	components[$] < 0
571	141	16	OrderedTuple.java	OrderedTuple	components	double	1	DEF	$[i] < 0
572	146	19	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isNaN(components[$])
572	146	19	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isNaN($[i])
573	151	16	OrderedTuple.java	OrderedTuple	m	long	0	DEF	$ != 0
574	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.negInf
574	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.posInf
575	166	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	1	DEF	$.lsb <= msb
575	166	8	OrderedTuple.java	OrderedTuple	msb	int	1	DEF	lsb <= $
576	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding != null
576	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding[0] == 0x0L
576	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding.$.length == 1
9956	202	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	eIndex < $.encoding.$.length
9956	202	8	OrderedTuple.java	encode	eIndex	int	0	NIL-FOR	$ < encoding.length
9957	203	12	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	vIndex < $.components.$.length
9957	203	12	OrderedTuple.java	encode	vIndex	int	0	NIL-FOR	$ < components.length
577	204	16	OrderedTuple.java	encode	THIS	OrderedTuple	0	DEF	$.getBit(vIndex, k) != 0
577	204	16	OrderedTuple.java	encode	vIndex	int	0	DEF	getBit($, k) != 0
577	204	16	OrderedTuple.java	encode	k	int	0	DEF	getBit(vIndex, $) != 0
578	207	16	OrderedTuple.java	encode	shift	int	0	DEF	$-- == 0
579	248	8	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.components.$.length == ot.$.components.$.length
579	248	8	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	components.length == $.components.length
580	249	12	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.nan
581	251	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.nan
581	251	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.nan
582	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.negInf
582	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.posInf
582	253	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.posInf
583	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.negInf
583	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.posInf
583	255	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.negInf
584	259	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	DEF	$.offset < ot.$.offset
584	259	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	DEF	offset < $.offset
585	261	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	DEF	$.offset > ot.$.offset
585	261	23	OrderedTuple.java	compareTo	ot	OrderedTuple	0	DEF	offset > $.offset
9958	266	16	OrderedTuple.java	compareTo	i	int	0	NIL-FOR	$ < limit
9958	266	16	OrderedTuple.java	compareTo	limit	int	0	NIL-FOR	i < $
586	267	20	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding[i] < ot.$.encoding[i]
586	267	20	OrderedTuple.java	compareTo	i	int	1	RET	encoding[$] < ot.encoding[$]
586	267	20	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding[i] < $.encoding[i]
587	269	27	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.encoding[i] > ot.$.encoding[i]
587	269	27	OrderedTuple.java	compareTo	i	int	0	RET	encoding[$] > ot.encoding[$]
587	269	27	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	encoding[i] > $.encoding[i]
588	274	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length < ot.$.encoding.$.length
588	274	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length < $.encoding.length
589	276	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length > ot.$.encoding.$.length
589	276	23	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length > $.encoding.length
590	292	8	OrderedTuple.java	equals	THIS	OrderedTuple	1	RET	$ == other
590	292	8	OrderedTuple.java	equals	other	Object	1	RET	this == $
591	294	15	OrderedTuple.java	equals	other	Object	1	RET	$ instanceof OrderedTuple
9959	369	8	OrderedTuple.java	computeMSB	scale	int	0	NIL-WHILE	$ != 0
592	370	12	OrderedTuple.java	computeMSB	ll	long	0	DEF	($ & mask) != $
592	370	12	OrderedTuple.java	computeMSB	mask	long	0	DEF	(ll & $) != ll
9960	395	8	OrderedTuple.java	computeLSB	scale	int	0	NIL-WHILE	$ != 0
593	396	12	OrderedTuple.java	computeLSB	ll	long	0	DEF	($ & mask) == $
593	396	12	OrderedTuple.java	computeLSB	mask	long	0	DEF	(ll & $) == ll
594	417	8	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k > $.offset
594	417	8	OrderedTuple.java	getBit	e	int	1	RET	k < $
594	417	8	OrderedTuple.java	getBit	k	int	1	RET	$ > offset
594	417	8	OrderedTuple.java	getBit	k	int	1	RET	$ < e
595	419	15	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k == $.offset
595	419	15	OrderedTuple.java	getBit	k	int	1	RET	$ == offset
596	421	15	OrderedTuple.java	getBit	e	int	1	RET	k > ($ + 52)
596	421	15	OrderedTuple.java	getBit	k	int	1	RET	$ > (e + 52)
9969	72	8	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	NIL-FOR	i < outline.$.length
9969	72	8	OutlineExtractor.java	getOutline	i	int	0	NIL-FOR	$ < outline.length
9969	72	8	OutlineExtractor.java	getOutline	outline	Vector2D[][]	0	NIL-FOR	i < $.length
9970	76	12	OutlineExtractor.java	getOutline	end	int	0	NIL-WHILE	j < $
9970	76	12	OutlineExtractor.java	getOutline	j	int	0	NIL-WHILE	$ < end
767	77	16	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	1	DEF	$.pointIsBetween(rawLoop, end, j)
767	77	16	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	1	DEF	pointIsBetween($, end, j)
767	77	16	OutlineExtractor.java	getOutline	end	int	1	DEF	pointIsBetween(rawLoop, $, j)
767	77	16	OutlineExtractor.java	getOutline	j	int	1	DEF	pointIsBetween(rawLoop, end, $)
9971	79	20	OutlineExtractor.java	getOutline	k	int	0	NIL-FOR	$ < (end - 1)
9971	79	20	OutlineExtractor.java	getOutline	end	int	0	NIL-FOR	k < ($ - 1)
768	88	12	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	DEF	end != rawLoop.$.length
768	88	12	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	0	DEF	end != $.length
768	88	12	OutlineExtractor.java	getOutline	end	int	0	DEF	$ != rawLoop.length
143	106	8	Pair.java	equals	THIS	Pair	0	RET	$ == o
143	106	8	Pair.java	equals	o	Object	0	RET	this == $
144	109	8	Pair.java	equals	o	Object	1	RET	$ instanceof Pair
3435	60	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	name	String	0	DEF	pode.isSupported($)
3435	60	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	pode	ParameterizedODE	0	DEF	$.isSupported(name)
3436	82	8	ParameterJacobianWrapper.java	computeParameterJacobian	THIS	ParameterJacobianWrapper	1	DEF	$.pode.isSupported(paramName)
3436	82	8	ParameterJacobianWrapper.java	computeParameterJacobian	paramName	String	1	DEF	pode.isSupported($)
11894	90	12	ParameterJacobianWrapper.java	computeParameterJacobian	i	int	0	NIL-FOR	$ < n
11894	90	12	ParameterJacobianWrapper.java	computeParameterJacobian	n	int	0	NIL-FOR	i < $
3581	75	8	ParameterizedWrapper.java	getParameter	THIS	ParameterizedWrapper	0	UnknownParameterException	$.isSupported(name)
3581	75	8	ParameterizedWrapper.java	getParameter	name	String	0	UnknownParameterException	isSupported($)
1250	116	8	ParetoDistribution.java	ParetoDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1251	120	8	ParetoDistribution.java	ParetoDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1252	158	8	ParetoDistribution.java	density	THIS	ParetoDistribution	0	RET	x < $.scale
1252	158	8	ParetoDistribution.java	density	x	double	0	RET	$ < scale
1253	174	8	ParetoDistribution.java	cumulativeProbability	THIS	ParetoDistribution	0	RET	x <= $.scale
1253	174	8	ParetoDistribution.java	cumulativeProbability	x	double	0	RET	$ <= scale
1254	208	8	ParetoDistribution.java	getNumericalMean	THIS	ParetoDistribution	0	RET	$.shape <= 1
1255	224	8	ParetoDistribution.java	getNumericalVariance	THIS	ParetoDistribution	0	RET	$.shape <= 2
1166	105	8	PascalDistribution.java	PascalDistribution	r	int	0	NotStrictlyPositiveException	$ <= 0
1167	109	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ < 0
1167	109	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ > 1
1168	138	8	PascalDistribution.java	probability	x	int	1	DEF	$ < 0
1169	152	8	PascalDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
2523	95	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	NullArgumentException	$ == null
11335	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
11335	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
11336	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
11336	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
11337	167	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
11337	167	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
11338	168	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
11338	168	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
2524	169	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
2524	169	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
11339	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
11339	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
11340	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
11340	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
2525	229	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2525	229	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2525	229	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2526	231	15	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2526	231	15	PearsonsCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
11341	235	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
11341	235	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
11341	235	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
11342	256	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
11342	256	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
11343	259	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
11343	259	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
2527	279	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2527	279	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
2393	136	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2394	149	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2395	269	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ > 100
2395	269	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ <= 0
2396	273	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
2397	276	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
2398	286	8	Percentile.java	evaluate	THIS	Percentile	1	DEF	values == $.getDataRef()
2398	286	8	Percentile.java	evaluate	values	double[]	1	DEF	$ == getDataRef()
2399	296	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
2400	299	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
2400	299	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
11282	324	8	Percentile.java	select	begin	int	0	NIL-WHILE	end - $ > MIN_SELECT_SIZE
11282	324	8	Percentile.java	select	end	int	0	NIL-WHILE	$ - begin > MIN_SELECT_SIZE
2401	327	12	Percentile.java	select	THIS	Percentile	1	DEF	node < pivotsHeap.$.length
2401	327	12	Percentile.java	select	node	int	1	DEF	$ < pivotsHeap.length
2401	327	12	Percentile.java	select	node	int	1	DEF	pivotsHeap[$] >= 0
2401	327	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	node < $.length
2401	327	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	$[node] >= 0
2402	334	16	Percentile.java	select	THIS	Percentile	0	DEF	node < pivotsHeap.$.length
2402	334	16	Percentile.java	select	node	int	0	DEF	$ < pivotsHeap.length
2402	334	16	Percentile.java	select	pivotsHeap	int[]	0	DEF	node < $.length
2403	339	12	Percentile.java	select	pivot	int	1	RET	k == $
2403	339	12	Percentile.java	select	k	int	1	RET	$ == pivot
2404	342	19	Percentile.java	select	pivot	int	1	DEF	k < $
2404	342	19	Percentile.java	select	k	int	1	DEF	$ < pivot
2405	376	8	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wMiddle
2405	376	8	Percentile.java	medianOf3	wMiddle	double	1	RET	wBegin < $
2406	377	12	Percentile.java	medianOf3	wMiddle	double	1	RET	$ < wEnd
2406	377	12	Percentile.java	medianOf3	wEnd	double	1	RET	wMiddle < $
2407	383	12	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wEnd
2407	383	12	Percentile.java	medianOf3	wEnd	double	1	RET	wBegin < $
11283	412	8	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
11283	412	8	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
11284	413	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[j] > $
11284	413	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
11284	413	12	Percentile.java	partition	j	int	0	NIL-WHILE	work[$] > value
11284	413	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
11284	413	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[j] > value
11285	416	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[i] < $
11285	416	12	Percentile.java	partition	i	int	0	NIL-WHILE	work[$] < value
11285	416	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
11285	416	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
11285	416	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[i] < value
2408	420	12	Percentile.java	partition	i	int	0	DEF	$ < j
2408	420	12	Percentile.java	partition	j	int	0	DEF	i < $
2409	427	8	Percentile.java	partition	value	double	0	DEF	work[i] > $
2409	427	8	Percentile.java	partition	i	int	0	DEF	$ >= end
2409	427	8	Percentile.java	partition	i	int	0	DEF	work[$] > value
2409	427	8	Percentile.java	partition	work	double[]	0	DEF	$[i] > value
2409	427	8	Percentile.java	partition	end	int	0	DEF	i >= $
11286	443	8	Percentile.java	insertionSort	j	int	0	NIL-FOR	$ < end
11286	443	8	Percentile.java	insertionSort	end	int	0	NIL-FOR	j < $
11287	446	12	Percentile.java	insertionSort	saved	double	0	NIL-WHILE	$ < work[i]
11287	446	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	saved < work[$]
11287	446	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	$ >= begin
11287	446	12	Percentile.java	insertionSort	work	double[]	0	NIL-WHILE	saved < $[i]
11287	446	12	Percentile.java	insertionSort	begin	int	0	NIL-WHILE	i >= $
2410	473	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ <= 0
2410	473	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ > 100
2411	504	8	Percentile.java	copy	THIS	Percentile	0	DEF	source.$.cachedPivots != null
2411	504	8	Percentile.java	copy	source	Percentile	0	DEF	$.cachedPivots != null
707	140	8	Plane.java	setNormal	norm	double	0	MathArithmeticException	$ < 1.0e-10
708	310	8	Plane.java	intersection	dot	double	0	RET	FastMath.abs($) < 1.0e-10
709	325	8	Plane.java	intersection	direction	Vector3D	0	RET	$.getNorm() < 1.0e-10
710	362	8	Plane.java	intersection	determinant	double	0	RET	FastMath.abs($) < 1.0e-10
1227	112	8	PoissonDistribution.java	PoissonDistribution	p	double	0	NotStrictlyPositiveException	$ <= 0
1228	165	8	PoissonDistribution.java	probability	x	int	1	DEF	$ < 0
1228	165	8	PoissonDistribution.java	probability	x	int	1	DEF	$ == Integer.MAX_VALUE
1229	167	15	PoissonDistribution.java	probability	x	int	1	DEF	$ == 0
1230	179	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ < 0
1231	182	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
1232	292	8	PoissonDistribution.java	nextPoisson	pivot	double	1	RET	meanPoisson < $
1232	292	8	PoissonDistribution.java	nextPoisson	meanPoisson	double	1	RET	$ < pivot
10038	298	12	PoissonDistribution.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * meanPoisson
10038	298	12	PoissonDistribution.java	nextPoisson	meanPoisson	double	0	NIL-WHILE	n < 1000 * $
1233	301	16	PoissonDistribution.java	nextPoisson	p	double	1	DEF	r >= $
1233	301	16	PoissonDistribution.java	nextPoisson	r	double	1	DEF	$ >= p
1234	333	16	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ <= p1
1234	333	16	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u <= $
1235	336	20	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	x < -$
1235	336	20	PoissonDistribution.java	nextPoisson	delta	double	0	DEF	x > $
1235	336	20	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ < -lambda
1235	336	20	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ > delta
1236	343	20	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
1236	343	20	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u > $ + p2
1236	343	20	PoissonDistribution.java	nextPoisson	p2	double	1	DEF	u > p1 + $
1237	354	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < -t
1237	354	16	PoissonDistribution.java	nextPoisson	a	int	0	DEF	$ == 0
1237	354	16	PoissonDistribution.java	nextPoisson	t	double	0	DEF	v < -$
1238	360	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < qa
1238	360	16	PoissonDistribution.java	nextPoisson	qa	double	0	DEF	v < $
1239	364	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ > qr
1239	364	16	PoissonDistribution.java	nextPoisson	qr	double	0	DEF	v > $
1240	367	16	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - CombinatoricsUtils.factorialLog((int) (y + $)) + logLambdaFactorial
1240	367	16	PoissonDistribution.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - CombinatoricsUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1240	367	16	PoissonDistribution.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - CombinatoricsUtils.factorialLog((int) (y + lambda)) + $
1240	367	16	PoissonDistribution.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - CombinatoricsUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
1240	367	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - CombinatoricsUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1084	46	8	PollardRho.java	primeFactors	n	int	0	RET	1 == $
1085	50	8	PollardRho.java	primeFactors	n	int	0	RET	SmallPrimes.millerRabinPrimeTest($)
9995	81	12	PollardRho.java	rhoBrent	i	int	0	NIL-FOR	$ < r
9995	81	12	PollardRho.java	rhoBrent	r	int	0	NIL-FOR	i < $
9996	86	12	PollardRho.java	rhoBrent	k	int	0	NIL-DOWHILE	$ < r
9996	86	12	PollardRho.java	rhoBrent	r	int	0	NIL-DOWHILE	k < $
9997	89	16	PollardRho.java	rhoBrent	i	int	0	NIL-FOR	$ < bound
9997	89	16	PollardRho.java	rhoBrent	bound	int	0	NIL-FOR	i < $
1086	93	20	PollardRho.java	rhoBrent	divisor	long	0	DEF	0 == $
1087	102	20	PollardRho.java	rhoBrent	q	int	0	RET	0 == $
1088	107	16	PollardRho.java	rhoBrent	out	int	0	RET	1 != $
1089	136	8	PollardRho.java	gcdPositive	a	int	1	RET	$ == 0
1090	138	15	PollardRho.java	gcdPositive	b	int	0	RET	$ == 0
9998	153	8	PollardRho.java	gcdPositive	a	int	0	NIL-WHILE	$ != b
9998	153	8	PollardRho.java	gcdPositive	b	int	0	NIL-WHILE	a != $
832	177	8	PolygonsSet.java	verticesToTree	n	int	0	RET	$ == 0
9974	184	8	PolygonsSet.java	verticesToTree	i	int	0	NIL-FOR	$ < n
9974	184	8	PolygonsSet.java	verticesToTree	n	int	0	NIL-FOR	i < $
9975	190	8	PolygonsSet.java	verticesToTree	i	int	0	NIL-FOR	$ < n
9975	190	8	PolygonsSet.java	verticesToTree	n	int	0	NIL-FOR	i < $
833	200	12	PolygonsSet.java	verticesToTree	line	Line	0	DEF	$ == null
834	209	16	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	FastMath.abs(line.getOffset($.vertex.getLocation())) <= hyperplaneThickness
834	209	16	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	$.vertex != start
834	209	16	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	$.vertex != end
834	209	16	PolygonsSet.java	verticesToTree	start	Vertex	0	DEF	vertex != $
834	209	16	PolygonsSet.java	verticesToTree	end	Vertex	0	DEF	vertex != $
834	209	16	PolygonsSet.java	verticesToTree	line	Line	0	DEF	FastMath.abs($.getOffset(vertex.getLocation())) <= hyperplaneThickness
834	209	16	PolygonsSet.java	verticesToTree	hyperplaneThickness	double	0	DEF	FastMath.abs(line.getOffset(vertex.getLocation())) <= $
9976	240	8	PolygonsSet.java	insertEdges	index	int	0	NIL-WHILE	$ < edges.size()
9976	240	8	PolygonsSet.java	insertEdges	inserted	Edge	0	NIL-WHILE	$ == null
9976	240	8	PolygonsSet.java	insertEdges	edges	List<Edge>	0	NIL-WHILE	index < $.size()
835	242	12	PolygonsSet.java	insertEdges	inserted	Edge	1	DEF	$.getNode() == null
836	243	16	PolygonsSet.java	insertEdges	inserted	Edge	1	DEF	node.insertCut($.getLine())
836	243	16	PolygonsSet.java	insertEdges	node	BSPTree<Euclidean2D>	1	DEF	$.insertCut(inserted.getLine())
837	253	8	PolygonsSet.java	insertEdges	inserted	Edge	0	RET	$ == null
838	257	12	PolygonsSet.java	insertEdges	parent	BSPTree<Euclidean2D>	1	DEF	$ == null
838	257	12	PolygonsSet.java	insertEdges	parent	BSPTree<Euclidean2D>	1	DEF	node == $.getMinus()
838	257	12	PolygonsSet.java	insertEdges	node	BSPTree<Euclidean2D>	1	DEF	$ == parent.getMinus()
839	270	12	PolygonsSet.java	insertEdges	THIS	PolygonsSet	0	DEF	$.edge != inserted
839	270	12	PolygonsSet.java	insertEdges	inserted	Edge	0	DEF	edge != $
840	279	24	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.MINUS
840	279	24	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.MINUS
841	289	24	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.PLUS
841	289	24	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.PLUS
842	299	24	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.PLUS
842	299	24	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.PLUS
843	301	31	PolygonsSet.java	insertEdges	THIS	PolygonsSet	0	DEF	endSide == $.Side.MINUS
843	301	31	PolygonsSet.java	insertEdges	endSide	Side	0	DEF	$ == Side.MINUS
844	310	8	PolygonsSet.java	insertEdges	plusList	List<Edge>	1	DEF	$.isEmpty()
845	315	8	PolygonsSet.java	insertEdges	minusList	List<Edge>	1	DEF	$.isEmpty()
846	525	8	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	v.$.length == 0
846	525	8	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$.length == 0
847	527	12	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree<Euclidean2D>	1	DEF	$.getCut() == null
847	527	12	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree<Euclidean2D>	1	DEF	(Boolean) $.getAttribute()
848	535	15	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$[0][0] == null
849	561	12	PolygonsSet.java	computeGeometricalProperties	sum	double	1	DEF	$ < 0
850	598	8	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	$.vertices == null
851	599	12	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.getTree(false).getCut() == null
9977	611	16	PolygonsSet.java	getVertices	sorted	AVLTree<ComparableSegment>	0	NIL-WHILE	$.isEmpty()
852	614	20	PolygonsSet.java	getVertices	loop	List<ComparableSegment>	0	DEF	$ != null
853	624	20	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.size() < 2
854	632	27	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.get(0).getStart() == null
855	638	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == 0
856	646	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j < (array.$.length - 1)
856	646	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j < ($.length - 1)
856	646	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ < (array.length - 1)
857	651	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j == (array.$.length - 1)
857	651	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j == ($.length - 1)
857	651	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == (array.length - 1)
9978	697	8	PolygonsSet.java	followLoop	globalStart	Vector2D	0	NIL-WHILE	$.distance(end) > 1.0e-10
9978	697	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	globalStart.distance($) > 1.0e-10
9978	697	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	$ != null
9978	697	8	PolygonsSet.java	followLoop	open	boolean	0	NIL-WHILE	$
9979	705	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$.getElement().compareTo(upperRight) <= 0
9979	705	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$ != null
9979	705	12	PolygonsSet.java	followLoop	upperRight	ComparableSegment	0	NIL-FOR	n.getElement().compareTo($) <= 0
858	710	16	PolygonsSet.java	followLoop	distance	double	0	DEF	$ < selectedDistance
858	710	16	PolygonsSet.java	followLoop	selectedDistance	double	0	DEF	distance < $
859	717	12	PolygonsSet.java	followLoop	selectedDistance	double	0	RET	$ > 1.0e-10
860	730	8	PolygonsSet.java	followLoop	loop	ArrayList<ComparableSegment>	0	RET	$.size() == 2
860	730	8	PolygonsSet.java	followLoop	open	boolean	0	RET	$
861	735	8	PolygonsSet.java	followLoop	end	Vector2D	0	MathInternalError	$ == null
861	735	8	PolygonsSet.java	followLoop	open	boolean	0	MathInternalError	$
769	137	8	PolyhedronsSet.java	computeGeometricalProperties	THIS	PolyhedronsSet	1	DEF	$.getSize() < 0
770	235	8	PolyhedronsSet.java	recurseFirstIntersection	cut	SubHyperplane<Euclidean3D>	0	RET	$ == null
771	247	8	PolyhedronsSet.java	recurseFirstIntersection	offset	double	1	DEF	$ < 0
772	255	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
773	258	12	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
774	265	8	PolyhedronsSet.java	recurseFirstIntersection	crossed	SubHyperplane<Euclidean3D>	0	RET	$ != null
775	269	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
776	272	12	PolyhedronsSet.java	recurseFirstIntersection	hit3D	Vector3D	0	RET	$ != null
777	274	16	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
778	297	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
778	297	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
778	297	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
778	297	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusOutside() != null
779	301	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
779	301	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
779	301	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusInside() != null
779	301	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
4290	72	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NoDataException	$ == 0
12328	75	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	$ > 1
12328	75	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	c[$ - 1] == 0
12328	75	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[n - 1] == 0
4291	132	8	PolynomialFunction.java	evaluate	n	int	0	NoDataException	$ == 0
12329	136	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >= 0
4292	152	8	PolynomialFunction.java	value	n	int	0	NoDataException	$ == 0
12330	157	8	PolynomialFunction.java	value	j	int	0	NIL-FOR	$ >= 0
12331	176	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
12331	176	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
12332	201	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
12332	201	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
4293	204	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
4293	204	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
12333	205	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
12333	205	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
12334	223	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
12334	223	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
12335	238	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
12335	238	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
12335	238	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
12336	240	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < FastMath.min($.coefficients.$.length, i + 1)
12336	240	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < FastMath.min(coefficients.length, i + 1)
12336	240	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < FastMath.min(coefficients.length, $ + 1)
4294	262	8	PolynomialFunction.java	differentiate	n	int	0	NoDataException	$ == 0
4295	265	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
12337	269	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
4296	311	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
4297	312	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
12338	319	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
12338	319	8	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
4298	320	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
4298	320	12	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
4299	321	16	PolynomialFunction.java	toString	s	StringBuilder	1	DEF	$.length() > 0
4300	322	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
4300	322	20	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
4301	328	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
4301	328	20	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
4302	334	16	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
4303	340	16	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
4304	358	8	PolynomialFunction.java	toString	c	String	1	RET	$.endsWith(".0")
4305	377	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
4305	377	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
4306	380	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
4307	384	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
4307	384	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
4282	80	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.verifyInterpolationArray(x, y, false)
4282	80	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	x	double	0	DEF	verifyInterpolationArray($, y, false)
4282	80	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	y	double	0	DEF	verifyInterpolationArray(x, $, false)
4283	149	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
4284	175	8	PolynomialFunctionLagrangeForm.java	evaluate	THIS	PolynomialFunctionLagrangeForm	0	RET	$.verifyInterpolationArray(x, y, false)
4284	175	8	PolynomialFunctionLagrangeForm.java	evaluate	x	double	0	RET	verifyInterpolationArray($, y, false)
4284	175	8	PolynomialFunctionLagrangeForm.java	evaluate	y	double	0	RET	verifyInterpolationArray(x, $, false)
12319	213	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
12319	213	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
4285	219	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	dist	double	0	DEF	$ < min_dist
4285	219	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	min_dist	double	0	DEF	dist < $
12320	228	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
12320	228	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
12321	229	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	j	int	0	NIL-FOR	$ < n-i
12321	229	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	j < n-$
12321	229	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	j < $-i
4286	239	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	1	DEF	nearest < 0.5*(n-$+1)
4286	239	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	nearest	int	1	DEF	$ < 0.5*(n-i+1)
4286	239	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	1	DEF	nearest < 0.5*($-i+1)
12322	259	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
12322	259	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
12323	266	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
12323	266	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
12324	267	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
12325	275	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
12325	275	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
12326	278	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
12326	278	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
4287	279	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
4287	279	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
12327	289	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
4288	318	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DimensionMismatchException	x.$.length != y.$.length
4288	318	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DimensionMismatchException	$.length != y.length
4288	318	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DimensionMismatchException	x.length != $.length
4289	321	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	NumberIsTooSmallException	x.$.length < 2
4289	321	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	NumberIsTooSmallException	$.length < 2
12347	109	8	PolynomialFunctionNewtonForm.java	value	i	int	0	NIL-FOR	$ >= 0
4310	160	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
12348	188	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
12349	203	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
12349	203	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
12350	208	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
12351	209	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
4311	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	c.$.length == 0
4311	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	a.$.length == 0
4311	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	NoDataException	$.length == 0
4311	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	NoDataException	$.length == 0
4312	240	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DimensionMismatchException	a.$.length != c.$.length + 1
4312	240	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DimensionMismatchException	$.length != c.length + 1
4312	240	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DimensionMismatchException	a.length != $.length + 1
4272	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NullArgumentException	$ == null
4272	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	NullArgumentException	$ == null
4273	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	NumberIsTooSmallException	knots.$.length < 2
4273	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NumberIsTooSmallException	$.length < 2
4274	113	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DimensionMismatchException	knots.$.length - 1 != polynomials.$.length
4274	113	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DimensionMismatchException	$.length - 1 != polynomials.length
4274	113	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DimensionMismatchException	knots.length - 1 != $.length
4275	137	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v > $.knots[$.n]
4275	137	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v < $.knots[0]
4275	137	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ > knots[n]
4275	137	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ < knots[0]
4276	141	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
4277	147	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
4277	147	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
12318	169	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
12318	169	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
4278	181	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	t0 > $.knots[$.n]
4278	181	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	t0 < $.knots[0]
4278	181	8	PolynomialSplineFunction.java	value	t0	double	0	OutOfRangeException	$ > knots[n]
4278	181	8	PolynomialSplineFunction.java	value	t0	double	0	OutOfRangeException	$ < knots[0]
4279	185	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
4280	191	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
4280	191	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
4281	240	8	PolynomialSplineFunction.java	isValidPoint	THIS	PolynomialSplineFunction	1	RET	x < $.knots[0]
4281	240	8	PolynomialSplineFunction.java	isValidPoint	THIS	PolynomialSplineFunction	1	RET	x > $.knots[$.n]
4281	240	8	PolynomialSplineFunction.java	isValidPoint	x	double	1	RET	$ < knots[0]
4281	240	8	PolynomialSplineFunction.java	isValidPoint	x	double	1	RET	$ > knots[n]
4308	219	8	PolynomialsUtils.java	createJacobiPolynomial	key	JacobiKey	0	DEF	JACOBI_COEFFICIENTS.containsKey($)
12339	329	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
12339	329	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
12340	330	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ <= i
12340	330	12	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	j <= $
12341	336	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
12341	336	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
12342	342	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < d
12342	342	8	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	i < $
12343	343	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ < d
12343	343	12	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	j < $
4309	365	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
4309	365	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
12344	381	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
12344	381	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
12345	401	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
12345	401	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
12346	417	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
12346	417	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
3076	124	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
3077	127	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
11657	181	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11657	181	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
11658	200	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11658	200	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3078	211	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
3078	211	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
3078	211	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
3079	224	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
3079	224	12	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	DEF	$ != null
3080	227	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
3081	228	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
3081	228	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
11659	237	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11659	237	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3082	245	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
3082	245	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
3083	252	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
11660	283	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
11660	283	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
3084	373	8	PowellOptimizer.java	checkParameters	THIS	PowellOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3084	373	8	PowellOptimizer.java	checkParameters	THIS	PowellOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
2241	114	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
2242	117	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
11226	170	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11226	170	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
11227	190	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11227	190	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2243	201	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
2243	201	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
2243	201	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
2244	214	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
2244	214	12	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	DEF	$ != null
2245	217	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
2246	218	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
2246	218	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
11228	227	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
11228	227	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2247	235	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
2247	235	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
2248	242	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
11229	273	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
11229	273	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
226	96	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, eps)
226	96	8	Precision.java	compareTo	x	double	1	RET	equals($, y, eps)
226	96	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, eps)
226	96	8	Precision.java	compareTo	eps	double	1	RET	equals(x, y, $)
227	98	15	Precision.java	compareTo	x	double	0	RET	$ < y
227	98	15	Precision.java	compareTo	y	double	0	RET	x < $
228	122	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, maxUlps)
228	122	8	Precision.java	compareTo	x	double	1	RET	equals($, y, maxUlps)
228	122	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, maxUlps)
228	122	8	Precision.java	compareTo	maxUlps	int	1	RET	equals(x, y, $)
229	124	15	Precision.java	compareTo	x	double	0	RET	$ < y
229	124	15	Precision.java	compareTo	y	double	0	RET	x < $
230	207	8	Precision.java	equals	xInt	int	0	DEF	$ < 0
231	210	8	Precision.java	equals	yInt	int	0	DEF	$ < 0
232	288	8	Precision.java	equalsWithRelativeTolerance	THIS	Precision	0	RET	$.equals(x, y, 1)
232	288	8	Precision.java	equalsWithRelativeTolerance	x	double	0	RET	equals($, y, 1)
232	288	8	Precision.java	equalsWithRelativeTolerance	y	double	0	RET	equals(x, $, 1)
233	335	8	Precision.java	equals	xInt	long	0	DEF	$ < 0
234	338	8	Precision.java	equals	yInt	long	0	DEF	$ < 0
235	400	12	Precision.java	round	x	double	1	RET	Double.isInfinite($)
236	460	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
237	470	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
238	479	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
239	488	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
240	490	19	Precision.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
241	494	16	Precision.java	roundUnscaled	unscaled	double	1	DEF	FastMath.floor($) / 2.0 == FastMath.floor(Math .floor($) / 2.0)
242	506	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
243	514	12	Precision.java	roundUnscaled	unscaled	double	0	MathArithmeticException	$ != FastMath.floor($)
1530	144	8	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$ != null
1531	145	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	NonSquareOperatorException	$.getColumnDimension() != $.getRowDimension()
1532	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	m.getRowDimension() != $.getRowDimension()
1532	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$.getRowDimension() != a.getRowDimension()
1063	55	8	Primes.java	isPrime	n	int	0	RET	$ < 2
1064	60	12	Primes.java	isPrime	THIS	Primes	0	RET	0 == (n % $.p)
1064	60	12	Primes.java	isPrime	n	int	0	RET	0 == ($ % p)
1065	75	8	Primes.java	nextPrime	n	int	0	MathIllegalArgumentException	$ < 0
1066	78	8	Primes.java	nextPrime	n	int	0	RET	$ == 2
1067	82	8	Primes.java	nextPrime	n	int	0	RET	$ == 1
1068	86	8	Primes.java	nextPrime	THIS	Primes	0	RET	$.isPrime(n)
1068	86	8	Primes.java	nextPrime	n	int	0	RET	isPrime($)
1069	93	8	Primes.java	nextPrime	rem	int	1	DEF	0 == $
1070	95	15	Primes.java	nextPrime	rem	int	0	DEF	1 == $
1071	100	12	Primes.java	nextPrime	THIS	Primes	0	RET	$.isPrime(n)
1071	100	12	Primes.java	nextPrime	n	int	0	RET	isPrime($)
1072	104	12	Primes.java	nextPrime	THIS	Primes	0	RET	$.isPrime(n)
1072	104	12	Primes.java	nextPrime	n	int	0	RET	isPrime($)
1073	120	8	Primes.java	primeFactors	n	int	0	MathIllegalArgumentException	$ < 2
2299	125	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length, true)
2299	125	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2299	125	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2299	125	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
11262	127	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11262	127	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11262	127	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2300	165	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, weights, begin, length, true)
2300	165	8	Product.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
2300	165	8	Product.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
2300	165	8	Product.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
2300	165	8	Product.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
11263	167	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11263	167	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11263	167	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1021	100	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
1022	103	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
1023	138	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
1024	149	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
1025	162	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
1026	170	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
1027	201	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
1028	209	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
1029	216	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
1030	220	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
1031	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
1004	101	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
1005	138	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
1006	149	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
1007	162	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
1008	170	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
1009	201	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
1010	209	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
1011	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
10462	112	8	QRDecomposition.java	decompose	THIS	QRDecomposition	0	NIL-FOR	minor < FastMath.min($.qrt.$.length, $.qrt[0].length)
10462	112	8	QRDecomposition.java	decompose	minor	int	0	NIL-FOR	$ < FastMath.min(qrt.length, qrt[0].length)
10463	134	8	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	row < qrtMinor.$.length
10463	134	8	QRDecomposition.java	performHouseholderReflection	row	int	0	NIL-FOR	$ < qrtMinor.length
10463	134	8	QRDecomposition.java	performHouseholderReflection	qrtMinor	double[]	0	NIL-FOR	row < $.length
1552	141	8	QRDecomposition.java	performHouseholderReflection	a	double	0	DEF	$ != 0.0
10464	165	12	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	col < $.qrt.$.length
10464	165	12	QRDecomposition.java	performHouseholderReflection	col	int	0	NIL-FOR	$ < qrt.length
10465	168	16	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	row < qrtCol.$.length
10465	168	16	QRDecomposition.java	performHouseholderReflection	row	int	0	NIL-FOR	$ < qrtCol.length
10465	168	16	QRDecomposition.java	performHouseholderReflection	qrtCol	double[]	0	NIL-FOR	row < $.length
10466	174	16	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	row < qrtCol.$.length
10466	174	16	QRDecomposition.java	performHouseholderReflection	row	int	0	NIL-FOR	$ < qrtCol.length
10466	174	16	QRDecomposition.java	performHouseholderReflection	qrtCol	double[]	0	NIL-FOR	row < $.length
1553	189	8	QRDecomposition.java	getR	THIS	QRDecomposition	0	DEF	$.cachedR == null
10467	196	12	QRDecomposition.java	getR	row	int	0	NIL-FOR	$ >= 0
10468	198	16	QRDecomposition.java	getR	col	int	0	NIL-FOR	$ < n
10468	198	16	QRDecomposition.java	getR	n	int	0	NIL-FOR	col < $
1554	215	8	QRDecomposition.java	getQ	THIS	QRDecomposition	0	DEF	$.cachedQ == null
1555	227	8	QRDecomposition.java	getQT	THIS	QRDecomposition	0	DEF	$.cachedQT == null
10469	239	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= FastMath.min(m, n)
10469	239	12	QRDecomposition.java	getQT	n	int	0	NIL-FOR	minor >= FastMath.min(m, $)
10469	239	12	QRDecomposition.java	getQT	m	int	0	NIL-FOR	minor >= FastMath.min($, n)
10470	243	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= 0
1556	246	16	QRDecomposition.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
1556	246	16	QRDecomposition.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
10471	247	20	QRDecomposition.java	getQT	col	int	0	NIL-FOR	$ < m
10471	247	20	QRDecomposition.java	getQT	m	int	0	NIL-FOR	col < $
10472	249	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
10472	249	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
10473	254	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
10473	254	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
1557	275	8	QRDecomposition.java	getH	THIS	QRDecomposition	0	DEF	$.cachedH == null
10474	280	12	QRDecomposition.java	getH	i	int	0	NIL-FOR	$ < m
10474	280	12	QRDecomposition.java	getH	m	int	0	NIL-FOR	i < $
10475	281	16	QRDecomposition.java	getH	j	int	0	NIL-FOR	$ < FastMath.min(i + 1, n)
10475	281	16	QRDecomposition.java	getH	i	int	0	NIL-FOR	j < FastMath.min($ + 1, n)
10475	281	16	QRDecomposition.java	getH	n	int	0	NIL-FOR	j < FastMath.min(i + 1, $)
953	90	8	Quaternion.java	Quaternion	THIS	Quaternion	0	DimensionMismatchException	v.$.length != 3
953	90	8	Quaternion.java	Quaternion	v	double[]	0	DimensionMismatchException	$.length != 3
954	254	8	Quaternion.java	normalize	norm	double	0	ZeroException	$ < Precision.SAFE_MIN
955	269	8	Quaternion.java	equals	THIS	Quaternion	0	RET	$ == other
955	269	8	Quaternion.java	equals	other	Object	0	RET	this == $
956	272	8	Quaternion.java	equals	other	Object	0	RET	$ instanceof Quaternion
957	343	8	Quaternion.java	getPositivePolarForm	THIS	Quaternion	1	RET	$.getQ0() < 0
958	365	8	Quaternion.java	getInverse	squareNorm	double	0	ZeroException	$ < Precision.SAFE_MIN
10250	89	8	RRQRDecomposition.java	decompose	THIS	RRQRDecomposition	0	NIL-FOR	i < $.p.$.length
10250	89	8	RRQRDecomposition.java	decompose	i	int	0	NIL-FOR	$ < p.length
10251	105	8	RRQRDecomposition.java	performHouseholderReflection	THIS	RRQRDecomposition	0	NIL-FOR	i < qrt.$.length
10251	105	8	RRQRDecomposition.java	performHouseholderReflection	i	int	0	NIL-FOR	$ < qrt.length
10251	105	8	RRQRDecomposition.java	performHouseholderReflection	qrt	double[][]	0	NIL-FOR	i < $.length
10252	107	12	RRQRDecomposition.java	performHouseholderReflection	THIS	RRQRDecomposition	0	NIL-FOR	j < qrt[i].length
10252	107	12	RRQRDecomposition.java	performHouseholderReflection	j	int	0	NIL-FOR	$ < qrt[i].length
10252	107	12	RRQRDecomposition.java	performHouseholderReflection	i	int	0	NIL-FOR	j < qrt[$].length
10252	107	12	RRQRDecomposition.java	performHouseholderReflection	qrt	double[][]	0	NIL-FOR	j < $[i].length
1380	110	12	RRQRDecomposition.java	performHouseholderReflection	l2NormSquared	double	0	DEF	$ > l2NormSquaredMax
1380	110	12	RRQRDecomposition.java	performHouseholderReflection	l2NormSquaredMax	double	0	DEF	l2NormSquared > $
1381	116	8	RRQRDecomposition.java	performHouseholderReflection	l2NormSquaredMaxIndex	int	0	DEF	$ != minor
1381	116	8	RRQRDecomposition.java	performHouseholderReflection	minor	int	0	DEF	l2NormSquaredMaxIndex != $
1382	138	8	RRQRDecomposition.java	getP	THIS	RRQRDecomposition	0	DEF	$.cachedP == null
10253	141	12	RRQRDecomposition.java	getP	i	int	0	NIL-FOR	$ < n
10253	141	12	RRQRDecomposition.java	getP	n	int	0	NIL-FOR	i < $
10254	174	8	RRQRDecomposition.java	getRank	rows	int	0	NIL-WHILE	rank < FastMath.min($, columns)
10254	174	8	RRQRDecomposition.java	getRank	columns	int	0	NIL-WHILE	rank < FastMath.min(rows, $)
10254	174	8	RRQRDecomposition.java	getRank	rank	int	0	NIL-WHILE	$ < FastMath.min(rows, columns)
1383	176	12	RRQRDecomposition.java	getRank	thisNorm	double	0	DEF	($ / lastNorm) * rNorm < dropThreshold
1383	176	12	RRQRDecomposition.java	getRank	thisNorm	double	0	DEF	$ == 0
1383	176	12	RRQRDecomposition.java	getRank	lastNorm	double	0	DEF	(thisNorm / $) * rNorm < dropThreshold
1383	176	12	RRQRDecomposition.java	getRank	rNorm	double	0	DEF	(thisNorm / lastNorm) * $ < dropThreshold
1383	176	12	RRQRDecomposition.java	getRank	dropThreshold	double	0	DEF	(thisNorm / lastNorm) * rNorm < $
3199	178	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
3200	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
3201	193	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
3211	163	8	RandomDataGenerator.java	nextHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
11781	178	8	RandomDataGenerator.java	nextHexString	THIS	RandomDataGenerator	0	NIL-FOR	i < randomBytes.$.length
11781	178	8	RandomDataGenerator.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
11781	178	8	RandomDataGenerator.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
3212	189	12	RandomDataGenerator.java	nextHexString	hex	String	0	DEF	$.length() == 1
3213	204	8	RandomDataGenerator.java	nextLong	lower	long	0	NumberIsTooLargeException	$ >= upper
3213	204	8	RandomDataGenerator.java	nextLong	upper	long	0	NumberIsTooLargeException	lower >= $
3214	209	8	RandomDataGenerator.java	nextLong	max	long	1	RET	$ <= 0
3215	215	16	RandomDataGenerator.java	nextLong	r	long	0	RET	$ <= upper
3215	215	16	RandomDataGenerator.java	nextLong	r	long	0	RET	$ >= lower
3215	215	16	RandomDataGenerator.java	nextLong	lower	long	0	RET	r >= $
3215	215	16	RandomDataGenerator.java	nextLong	upper	long	0	RET	r <= $
3216	219	15	RandomDataGenerator.java	nextLong	max	long	1	RET	$ < Integer.MAX_VALUE
3217	241	8	RandomDataGenerator.java	nextLong	n	long	0	RET	$ > 0
11782	245	12	RandomDataGenerator.java	nextLong	bits	long	0	NIL-DOWHILE	$ - val + (n - 1) < 0
11782	245	12	RandomDataGenerator.java	nextLong	val	long	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
11782	245	12	RandomDataGenerator.java	nextLong	n	long	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
3218	277	8	RandomDataGenerator.java	nextSecureHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
11783	296	8	RandomDataGenerator.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
11783	296	8	RandomDataGenerator.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
11784	305	12	RandomDataGenerator.java	nextSecureHexString	THIS	RandomDataGenerator	0	NIL-FOR	i < hash.$.length
11784	305	12	RandomDataGenerator.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
11784	305	12	RandomDataGenerator.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
3219	316	16	RandomDataGenerator.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
3220	332	8	RandomDataGenerator.java	nextSecureLong	lower	long	0	NumberIsTooLargeException	$ >= upper
3220	332	8	RandomDataGenerator.java	nextSecureLong	upper	long	0	NumberIsTooLargeException	lower >= $
3221	338	8	RandomDataGenerator.java	nextSecureLong	max	long	1	RET	$ <= 0
3222	343	16	RandomDataGenerator.java	nextSecureLong	r	long	0	RET	$ >= lower
3222	343	16	RandomDataGenerator.java	nextSecureLong	r	long	0	RET	$ <= upper
3222	343	16	RandomDataGenerator.java	nextSecureLong	lower	long	0	RET	r >= $
3222	343	16	RandomDataGenerator.java	nextSecureLong	upper	long	0	RET	r <= $
3223	347	15	RandomDataGenerator.java	nextSecureLong	max	long	1	RET	$ < Integer.MAX_VALUE
3224	378	8	RandomDataGenerator.java	nextGaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
3225	593	8	RandomDataGenerator.java	nextUniform	lower	double	0	NumberIsTooLargeException	$ >= upper
3225	593	8	RandomDataGenerator.java	nextUniform	upper	double	0	NumberIsTooLargeException	lower >= $
3226	598	8	RandomDataGenerator.java	nextUniform	lower	double	0	NotFiniteNumberException	Double.isInfinite($)
3227	601	8	RandomDataGenerator.java	nextUniform	upper	double	0	NotFiniteNumberException	Double.isInfinite($)
3228	605	8	RandomDataGenerator.java	nextUniform	lower	double	0	NotANumberException	Double.isNaN($)
3228	605	8	RandomDataGenerator.java	nextUniform	upper	double	0	NotANumberException	Double.isNaN($)
11785	613	8	RandomDataGenerator.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
11785	613	8	RandomDataGenerator.java	nextUniform	lowerInclusive	boolean	0	NIL-WHILE	$
3229	632	8	RandomDataGenerator.java	nextPermutation	n	int	0	NumberIsTooLargeException	k > $
3229	632	8	RandomDataGenerator.java	nextPermutation	k	int	0	NumberIsTooLargeException	$ > n
3230	636	8	RandomDataGenerator.java	nextPermutation	k	int	0	NotStrictlyPositiveException	$ <= 0
3231	657	8	RandomDataGenerator.java	nextSample	len	int	0	NumberIsTooLargeException	k > $
3231	657	8	RandomDataGenerator.java	nextSample	k	int	0	NumberIsTooLargeException	$ > len
3232	661	8	RandomDataGenerator.java	nextSample	k	int	0	NotStrictlyPositiveException	$ <= 0
11786	668	8	RandomDataGenerator.java	nextSample	i	int	0	NIL-FOR	$ < k
11786	668	8	RandomDataGenerator.java	nextSample	k	int	0	NIL-FOR	i < $
3233	752	8	RandomDataGenerator.java	getRandomGenerator	THIS	RandomDataGenerator	0	DEF	$.rand == null
3234	777	8	RandomDataGenerator.java	getSecRan	THIS	RandomDataGenerator	0	DEF	$.secRand == null
11787	792	8	RandomDataGenerator.java	getNatural	i	int	0	NIL-FOR	$ < n
11787	792	8	RandomDataGenerator.java	getNatural	n	int	0	NIL-FOR	i < $
3290	121	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	representation.size() != $
3290	121	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	DimensionMismatchException	$.size() != l
3291	124	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	sortedRepr.size() != $
3291	124	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	DimensionMismatchException	$.size() != l
11814	133	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
11814	133	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
3292	151	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
3293	156	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
3293	156	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
11815	165	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
11815	165	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
3294	166	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
3294	166	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
3294	166	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
3295	182	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
3295	182	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
11816	199	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
11816	199	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
11817	214	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
11817	214	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
3296	262	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	DimensionMismatchException	$.size() != permutedData.size()
3296	262	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	DimensionMismatchException	originalData.size() != $.size()
11818	270	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
11818	270	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
3297	272	12	RandomKey.java	inducedPermutation	index	int	0	MathIllegalArgumentException	$ == -1
11819	294	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
11819	294	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
3265	40	8	RandomKeyMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof RandomKey<?>
10255	256	8	RealMatrixFormat.java	format	i	int	0	NIL-FOR	$ < rows
10255	256	8	RealMatrixFormat.java	format	rows	int	0	NIL-FOR	i < $
10256	258	12	RealMatrixFormat.java	format	j	int	0	NIL-FOR	$ < matrix.getColumnDimension()
10256	258	12	RealMatrixFormat.java	format	matrix	RealMatrix	0	NIL-FOR	j < $.getColumnDimension()
1384	259	16	RealMatrixFormat.java	format	j	int	0	DEF	$ > 0
1385	265	12	RealMatrixFormat.java	format	i	int	0	DEF	$ < rows - 1
1385	265	12	RealMatrixFormat.java	format	rows	int	0	DEF	i < $ - 1
1386	287	8	RealMatrixFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1387	314	8	RealMatrixFormat.java	parse	trimmedPrefix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1387	314	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1387	314	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
10257	321	8	RealMatrixFormat.java	parse	loop	boolean	0	NIL-FOR	$
1388	323	12	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	RET	$.isEmpty()
1389	325	16	RealMatrixFormat.java	parse	trimmedColumnSeparator	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1389	325	16	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedColumnSeparator, pos)
1389	325	16	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, $)
1390	326	20	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	$.length() != 0
1390	326	20	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	CompositeFormat.parseFixedstring(source, $, pos)
1390	326	20	RealMatrixFormat.java	parse	source	String	1	RET	CompositeFormat.parseFixedstring($, trimmedRowSuffix, pos)
1390	326	20	RealMatrixFormat.java	parse	pos	ParsePosition	1	RET	CompositeFormat.parseFixedstring(source, trimmedRowSuffix, $)
1391	331	24	RealMatrixFormat.java	parse	trimmedRowSeparator	String	1	DEF	CompositeFormat.parseFixedstring(source, $, pos)
1391	331	24	RealMatrixFormat.java	parse	source	String	1	DEF	CompositeFormat.parseFixedstring($, trimmedRowSeparator, pos)
1391	331	24	RealMatrixFormat.java	parse	pos	ParsePosition	1	DEF	CompositeFormat.parseFixedstring(source, trimmedRowSeparator, $)
1392	342	16	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	$.length() != 0
1392	342	16	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1392	342	16	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedRowPrefix, pos)
1392	342	16	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedRowPrefix, $)
1393	348	12	RealMatrixFormat.java	parse	loop	boolean	0	RET	$
1394	351	16	RealMatrixFormat.java	parse	component	Number	1	DEF	$ != null
1395	354	20	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	DEF	$.isEmpty()
1396	367	8	RealMatrixFormat.java	parse	rowComponents	List<Number>	0	DEF	$.isEmpty()
1397	373	8	RealMatrixFormat.java	parse	trimmedSuffix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1397	373	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1397	373	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
1398	378	8	RealMatrixFormat.java	parse	matrix	List<List<Number>>	0	RET	$.isEmpty()
10258	388	12	RealMatrixFormat.java	parse	THIS	RealMatrixFormat	0	NIL-FOR	i < $.rowList.size()
10258	388	12	RealMatrixFormat.java	parse	i	int	0	NIL-FOR	$ < rowList.size()
1829	178	8	RealVector.java	checkVectorDimensions	d	int	0	DimensionMismatchException	$ != n
1829	178	8	RealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	d != $
1830	190	8	RealVector.java	checkIndex	THIS	RealVector	0	OutOfRangeException	index >= $.getDimension()
1830	190	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1830	190	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1831	209	8	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	start >= $
1831	209	8	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ < 0
1831	209	8	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ >= dim
1832	213	8	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	end >= $
1832	213	8	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ >= dim
1832	213	8	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ < 0
1833	217	8	RealVector.java	checkIndices	start	int	0	NumberIsTooSmallException	end < $
1833	217	8	RealVector.java	checkIndices	end	int	0	NumberIsTooSmallException	$ < start
10883	237	8	RealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
10884	258	8	RealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1834	285	8	RealVector.java	mapAddToSelf	d	double	0	RET	$ != 0
10885	310	8	RealVector.java	dotProduct	i	int	0	NIL-FOR	$ < n
10885	310	8	RealVector.java	dotProduct	n	int	0	NIL-FOR	i < $
1835	332	8	RealVector.java	cosine	norm	double	0	MathArithmeticException	$ == 0
1835	332	8	RealVector.java	cosine	vNorm	double	0	MathArithmeticException	$ == 0
10886	399	8	RealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
10887	420	8	RealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
10888	441	8	RealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
10889	461	8	RealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
10890	484	8	RealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
10891	510	8	RealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
10892	527	8	RealVector.java	getMinIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1836	529	12	RealVector.java	getMinIndex	entry	Entry	0	DEF	$.getValue() <= minValue
1836	529	12	RealVector.java	getMinIndex	minValue	double	0	DEF	entry.getValue() <= $
10893	558	8	RealVector.java	getMaxIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1837	560	12	RealVector.java	getMaxIndex	entry	Entry	0	DEF	$.getValue() >= maxValue
1837	560	12	RealVector.java	getMaxIndex	maxValue	double	0	DEF	entry.getValue() >= $
1838	656	8	RealVector.java	outerProduct	v	RealVector	1	DEF	$ instanceof SparseRealVector
10894	661	8	RealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
10894	661	8	RealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
10895	662	12	RealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
10895	662	12	RealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1839	682	8	RealVector.java	projection	norm2	double	0	MathArithmeticException	$ == 0.0
10896	695	8	RealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
10897	711	8	RealVector.java	toArray	i	int	0	NIL-FOR	$ < dim
10897	711	8	RealVector.java	toArray	dim	int	0	NIL-FOR	i < $
1840	726	8	RealVector.java	unitVector	norm	double	0	MathArithmeticException	$ == 0
1841	740	8	RealVector.java	unitize	norm	double	0	MathArithmeticException	$ == 0
10898	845	8	RealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
10899	885	8	RealVector.java	combineToSelf	THIS	RealVector	0	NIL-FOR	i < $.getDimension()
10899	885	8	RealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < getDimension()
10900	906	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
10900	906	8	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
10901	930	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
10901	930	8	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
10902	986	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
10902	986	8	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
10903	1010	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
10903	1010	8	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
10625	202	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
10625	202	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
1672	203	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
1673	226	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1674	246	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
1674	246	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1674	246	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
10626	252	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
1675	254	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
1676	256	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
1676	256	16	RealVectorFormat.java	parse	source	String	0	DEF	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
1676	256	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
1677	261	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
1678	264	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
1679	278	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
1679	278	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1679	278	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
10627	284	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
10627	284	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
10627	284	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
10771	90	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
10771	90	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
10772	95	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	loop	boolean	0	NIL-FOR	$
10773	99	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
10773	99	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1736	102	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ii	int	0	DEF	c[$][$] > c[isr][isr]
1736	102	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	isr	int	0	DEF	c[ii][ii] > c[$][$]
1736	102	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	DEF	$[ii][ii] > $[isr][isr]
1737	109	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	swapR	int	0	DEF	$ != r
1737	109	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	DEF	swapR != $
1738	120	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ir	int	1	NonPositiveDefiniteMatrixException	c[$][$] <= small
1738	120	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	1	NonPositiveDefiniteMatrixException	$[ir][ir] <= small
1738	120	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	1	NonPositiveDefiniteMatrixException	c[ir][ir] <= $
1739	122	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NonPositiveDefiniteMatrixException	$ == 0
10774	127	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
10774	127	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1740	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1740	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	NonPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1740	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	index	int[]	0	NonPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1740	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	0	NonPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
10775	146	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
10775	146	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
10776	151	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < i
10776	151	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	j < $
10777	167	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
10777	167	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
10778	168	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < r
10778	168	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NIL-FOR	j < $
655	44	8	RegionFactory.java	buildConvex	THIS	RegionFactory	0	RET	hyperplanes.$.length == 0
655	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$ == null
655	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$.length == 0
656	55	12	RegionFactory.java	buildConvex	THIS	RegionFactory	0	DEF	node.insertCut($.hyperplane)
656	55	12	RegionFactory.java	buildConvex	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
657	137	8	RegionFactory.java	recurseComplement	node	BSPTree<S>	0	RET	$.getCut() == null
658	143	8	RegionFactory.java	recurseComplement	attribute	BoundaryAttribute<S>	0	DEF	$ != null
2671	100	8	RegressionResults.java	RegressionResults	copyData	boolean	1	DEF	$
11431	103	12	RegressionResults.java	RegressionResults	THIS	RegressionResults	0	NIL-FOR	i < varcov.$.length
11431	103	12	RegressionResults.java	RegressionResults	i	int	0	NIL-FOR	$ < varcov.length
11431	103	12	RegressionResults.java	RegressionResults	varcov	double[][]	0	NIL-FOR	i < $.length
2672	117	8	RegressionResults.java	RegressionResults	rank	int	0	DEF	$ > 0
2673	129	8	RegressionResults.java	RegressionResults	containsConstant	boolean	1	DEF	$
2674	151	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2675	154	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2675	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ < 0
2675	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2676	171	8	RegressionResults.java	getParameterEstimates	THIS	RegressionResults	0	RET	$.parameters == null
2677	188	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2678	191	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2678	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2678	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ < 0
2679	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	Double.isNaN($)
2679	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	$ > Double.MIN_VALUE
2680	213	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	RET	$.parameters == null
11432	217	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	NIL-FOR	i < $.parameters.length
11432	217	8	RegressionResults.java	getStdErrorOfEstimates	i	int	0	NIL-FOR	$ < this.parameters.length
2681	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	Double.isNaN($)
2681	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	$ > Double.MIN_VALUE
2682	241	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2683	244	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	i >= $.parameters.length
2683	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ >= this.parameters.length
2683	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ < 0
2684	247	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	j >= $.parameters.length
2684	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ < 0
2684	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ >= this.parameters.length
2685	262	8	RegressionResults.java	getNumberOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2686	401	8	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.isSymmetricVCD
2687	402	12	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.varCovData.length > 1
2688	404	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ == j
2688	404	16	RegressionResults.java	getVcvElement	j	int	1	RET	i == $
2689	406	23	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	i >= $.varCovData[j].length
2689	406	23	RegressionResults.java	getVcvElement	i	int	1	RET	$ >= varCovData[j].length
2689	406	23	RegressionResults.java	getVcvElement	j	int	1	RET	i >= varCovData[$].length
2690	412	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ > j
2690	412	16	RegressionResults.java	getVcvElement	j	int	1	RET	i > $
196	402	8	ResizableDoubleArray.java	ResizableDoubleArray	initialCapacity	int	0	NotStrictlyPositiveException	$ <= 0
197	415	8	ResizableDoubleArray.java	ResizableDoubleArray	data	double	0	DEF	$ != null
198	442	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.internalArray.$.length <= $.startIndex + $.numElements
199	482	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
200	492	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
201	510	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	MathIllegalStateException	$.numElements < 1
202	557	8	ResizableDoubleArray.java	checkContractExpand	contraction	double	0	DEF	$ < expansion
202	557	8	ResizableDoubleArray.java	checkContractExpand	expansion	double	0	DEF	contraction < $
203	564	8	ResizableDoubleArray.java	checkContractExpand	contraction	double	0	DEF	$ <= 1
204	571	8	ResizableDoubleArray.java	checkContractExpand	expansion	double	0	DEF	$ <= 1
205	657	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	MathIllegalArgumentException	i > $.numElements
205	657	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ > numElements
206	661	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ < 0
207	668	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
208	672	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
209	693	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == $.ExpansionMode.MULTIPLICATIVE
210	762	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	ArrayIndexOutOfBoundsException	index >= $.numElements
210	762	8	ResizableDoubleArray.java	getElement	index	int	1	ArrayIndexOutOfBoundsException	$ >= numElements
211	764	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
212	963	8	ResizableDoubleArray.java	setElement	index	int	0	ArrayIndexOutOfBoundsException	$ < 0
213	966	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
213	966	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
214	969	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
214	969	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
215	1007	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != MULTIPLICATIVE_MODE
215	1007	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != ADDITIVE_MODE
216	1014	12	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	1	DEF	$ == MULTIPLICATIVE_MODE
217	1016	19	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ == ADDITIVE_MODE
218	1058	8	ResizableDoubleArray.java	setNumElements	i	int	0	MathIllegalArgumentException	$ < 0
219	1067	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	newSize > $.internalArray.$.length
219	1067	8	ResizableDoubleArray.java	setNumElements	newSize	int	0	DEF	$ > internalArray.length
220	1082	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == $.ExpansionMode.MULTIPLICATIVE
221	1165	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
221	1165	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
222	1168	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
223	1180	16	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
4139	82	8	RiddersSolver.java	doSolve	y1	double	0	RET	$ == 0
4140	85	8	RiddersSolver.java	doSolve	y2	double	0	RET	$ == 0
4141	99	12	RiddersSolver.java	doSolve	y3	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4141	99	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y3) <= $
4142	110	12	RiddersSolver.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
4142	110	12	RiddersSolver.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
4142	110	12	RiddersSolver.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
4143	113	12	RiddersSolver.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4143	113	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
4144	119	12	RiddersSolver.java	doSolve	correction	double	1	DEF	$ > 0.0
4145	120	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y1) + FastMath.signum($) == 0.0
4145	120	16	RiddersSolver.java	doSolve	y1	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
4146	130	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y2) + FastMath.signum($) == 0.0
4146	130	16	RiddersSolver.java	doSolve	y2	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
4351	64	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
4352	86	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
12376	124	12	RombergIntegrator.java	doIntegrate	j	int	0	NIL-FOR	$ <= i
12376	124	12	RombergIntegrator.java	doIntegrate	i	int	0	NIL-FOR	j <= $
4353	131	12	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	i >= $.getMinimalIterationCount()
4353	131	12	RombergIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
4354	134	16	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4354	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4354	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4354	134	16	RombergIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
875	91	8	RootsOfUnity.java	isCounterClockWise	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
876	119	8	RootsOfUnity.java	computeRoots	n	int	0	ZeroException	$ == 0
877	129	8	RootsOfUnity.java	computeRoots	THIS	RootsOfUnity	0	RET	absN == $.omegaCount
877	129	8	RootsOfUnity.java	computeRoots	absN	int	0	RET	$ == omegaCount
9984	143	8	RootsOfUnity.java	computeRoots	i	int	0	NIL-FOR	$ < absN
9984	143	8	RootsOfUnity.java	computeRoots	absN	int	0	NIL-FOR	i < $
878	165	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
879	169	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
879	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ >= omegaCount
879	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ < 0
880	192	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
881	196	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
881	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ < 0
881	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ >= omegaCount
714	138	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
715	178	4	Rotation.java	Rotation	norm	double	0	MathIllegalArgumentException	$ == 0
716	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
716	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
716	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
716	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
716	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
716	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
716	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
716	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
717	240	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
718	331	4	Rotation.java	Rotation	normProduct	double	0	MathArithmeticException	$ == 0
719	337	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
719	337	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
720	409	6	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
721	418	10	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
722	427	14	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
723	495	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
724	497	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
725	510	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
725	510	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
726	512	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
727	556	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
728	565	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
728	565	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
729	574	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
730	583	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
730	583	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
731	592	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
732	601	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
732	601	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
733	610	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
734	619	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
734	619	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
735	628	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
736	637	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
736	637	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
737	646	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
738	655	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
738	655	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
739	664	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
740	673	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
740	673	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
741	682	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
742	691	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
742	691	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
743	700	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
744	709	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
744	709	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
745	718	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
746	727	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
746	727	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
747	736	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
748	745	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
748	745	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
749	763	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
749	763	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
9968	961	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
750	1002	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
750	1002	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
750	1002	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
12009	108	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
12009	108	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
12010	127	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
12011	135	6	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
12011	135	6	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
12012	137	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
12012	137	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
12012	137	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
12013	139	14	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
12013	139	14	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
12014	150	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
12014	150	6	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
12014	150	6	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
12015	152	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
12015	152	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
3569	164	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	$.isLastStep
3570	172	10	RungeKuttaIntegrator.java	integrate	nextIsLast	boolean	0	DEF	$
3459	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
3459	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
11909	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
11909	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
11909	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
11910	157	4	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
11910	157	4	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
11911	163	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
11911	163	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
11912	164	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
11912	164	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
3460	183	4	RungeKuttaStepInterpolator.java	readExternal	n	int	1	DEF	$ < 0
11913	187	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
11913	187	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
11914	194	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
11914	194	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
11915	196	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
11915	196	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
3461	203	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
1257	109	8	SaddlePointExpansion.java	getStirlingError	z	double	1	DEF	$ < 15.0
1258	111	12	SaddlePointExpansion.java	getStirlingError	z2	double	1	DEF	FastMath.floor($) == $
1259	147	8	SaddlePointExpansion.java	getDeviancePart	x	double	1	DEF	FastMath.abs($ - mu) < 0.1 * ($ + mu)
1259	147	8	SaddlePointExpansion.java	getDeviancePart	mu	double	1	DEF	FastMath.abs(x - $) < 0.1 * (x + $)
10047	155	12	SaddlePointExpansion.java	getDeviancePart	s1	double	0	NIL-WHILE	$ != s
10047	155	12	SaddlePointExpansion.java	getDeviancePart	s	double	0	NIL-WHILE	s1 != $
1260	180	8	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == 0
1261	181	12	SaddlePointExpansion.java	logBinomialProbability	p	double	1	DEF	$ < 0.1
1262	186	15	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == n
1262	186	15	SaddlePointExpansion.java	logBinomialProbability	n	int	1	DEF	x == $
1263	187	12	SaddlePointExpansion.java	logBinomialProbability	q	double	1	DEF	$ < 0.1
1688	70	8	SchurTransformer.java	SchurTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1689	93	8	SchurTransformer.java	getP	THIS	SchurTransformer	0	DEF	$.cachedP == null
1690	106	8	SchurTransformer.java	getPT	THIS	SchurTransformer	0	DEF	$.cachedPt == null
1691	120	8	SchurTransformer.java	getT	THIS	SchurTransformer	0	DEF	$.cachedT == null
10642	144	8	SchurTransformer.java	transform	iu	int	0	NIL-WHILE	$ >= 0
1692	150	12	SchurTransformer.java	transform	il	int	1	DEF	$ == iu
1692	150	12	SchurTransformer.java	transform	iu	int	1	DEF	il == $
1693	155	19	SchurTransformer.java	transform	il	int	1	DEF	$ == iu - 1
1693	155	19	SchurTransformer.java	transform	iu	int	1	DEF	il == $ - 1
1694	162	16	SchurTransformer.java	transform	q	double	0	DEF	$ >= 0
1695	164	20	SchurTransformer.java	transform	p	double	1	DEF	$ >= 0
10643	178	20	SchurTransformer.java	transform	j	int	0	NIL-FOR	$ < n
10643	178	20	SchurTransformer.java	transform	n	int	0	NIL-FOR	j < $
10644	185	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= iu
10644	185	20	SchurTransformer.java	transform	iu	int	0	NIL-FOR	i <= $
10645	192	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= n - 1
10645	192	20	SchurTransformer.java	transform	n	int	0	NIL-FOR	i <= $ - 1
1696	205	16	SchurTransformer.java	transform	iteration	int	0	MaxCountExceededException	++$ > MAX_ITERATIONS
10646	226	8	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	i < $.matrixT.$.length
10646	226	8	SchurTransformer.java	getNorm	i	int	0	NIL-FOR	$ < matrixT.length
10647	228	12	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	j < $.matrixT.$.length
10647	228	12	SchurTransformer.java	getNorm	j	int	0	NIL-FOR	$ < matrixT.length
10648	244	8	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	NIL-WHILE	$ > 0
1697	246	12	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	$ == 0.0
1698	249	12	SchurTransformer.java	findSmallSubDiagonalElement	THIS	SchurTransformer	0	DEF	FastMath.abs($.matrixT[l][l - 1]) < $.epsilon * s
1698	249	12	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	FastMath.abs(matrixT[l][l - 1]) < epsilon * $
1698	249	12	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	DEF	FastMath.abs(matrixT[$][$ - 1]) < epsilon * s
1699	269	8	SchurTransformer.java	computeShift	l	int	0	DEF	$ < idx
1699	269	8	SchurTransformer.java	computeShift	idx	int	0	DEF	l < $
1700	275	8	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 10
10649	277	12	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
10649	277	12	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
1701	287	8	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 30
1702	290	12	SchurTransformer.java	computeShift	s	double	0	DEF	$ > 0.0
1703	292	16	SchurTransformer.java	computeShift	THIS	SchurTransformer	0	DEF	shift.$.y < shift.$.x
1703	292	16	SchurTransformer.java	computeShift	shift	ShiftInfo	0	DEF	$.y < $.x
10650	296	16	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
10650	296	16	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
10651	317	8	SchurTransformer.java	initQRStep	im	int	0	NIL-WHILE	$ >= il
10651	317	8	SchurTransformer.java	initQRStep	il	int	0	NIL-WHILE	im >= $
1704	325	12	SchurTransformer.java	initQRStep	im	int	0	DEF	$ == il
1704	325	12	SchurTransformer.java	initQRStep	il	int	0	DEF	im == $
1705	334	12	SchurTransformer.java	initQRStep	THIS	SchurTransformer	0	DEF	lhs < $.epsilon * rhs
1705	334	12	SchurTransformer.java	initQRStep	lhs	double	0	DEF	$ < epsilon * rhs
1705	334	12	SchurTransformer.java	initQRStep	rhs	double	0	DEF	lhs < epsilon * $
10652	360	8	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	$ <= iu - 1
10652	360	8	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	k <= $ - 1
1706	362	12	SchurTransformer.java	performDoubleQRStep	k	int	0	DEF	$ != im
1706	362	12	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	k != $
1707	367	16	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	Precision.equals(shift.$.x, 0.0, $.epsilon)
1707	367	16	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	Precision.equals($.x, 0.0, epsilon)
1708	373	12	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	shift.$.x == 0.0
1708	373	12	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	$.x == 0.0
1709	377	12	SchurTransformer.java	performDoubleQRStep	p	double	0	DEF	$ < 0.0
1710	380	12	SchurTransformer.java	performDoubleQRStep	s	double	0	DEF	$ != 0.0
1711	381	16	SchurTransformer.java	performDoubleQRStep	k	int	1	DEF	$ != im
1711	381	16	SchurTransformer.java	performDoubleQRStep	im	int	1	DEF	k != $
1712	383	23	SchurTransformer.java	performDoubleQRStep	il	int	0	DEF	$ != im
1712	383	23	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	il != $
10653	394	16	SchurTransformer.java	performDoubleQRStep	j	int	0	NIL-FOR	$ < n
10653	394	16	SchurTransformer.java	performDoubleQRStep	n	int	0	NIL-FOR	j < $
1713	396	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
10654	405	16	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= FastMath.min(iu, k + 3)
10654	405	16	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	i <= FastMath.min(iu, $ + 3)
10654	405	16	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	i <= FastMath.min($, k + 3)
1714	407	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
10655	417	16	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= high
10655	417	16	SchurTransformer.java	performDoubleQRStep	high	int	0	NIL-FOR	i <= $
1715	419	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
10656	430	8	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= iu
10656	430	8	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	i <= $
1716	432	12	SchurTransformer.java	performDoubleQRStep	i	int	0	DEF	$ > im + 2
1716	432	12	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	i > $ + 2
2751	49	8	SearchInterval.java	SearchInterval	lo	double	0	NumberIsTooLargeException	$ >= hi
2751	49	8	SearchInterval.java	SearchInterval	hi	double	0	NumberIsTooLargeException	lo >= $
2752	52	8	SearchInterval.java	SearchInterval	lo	double	0	OutOfRangeException	init < $
2752	52	8	SearchInterval.java	SearchInterval	hi	double	0	OutOfRangeException	init > $
2752	52	8	SearchInterval.java	SearchInterval	init	double	0	OutOfRangeException	$ < lo
2752	52	8	SearchInterval.java	SearchInterval	init	double	0	OutOfRangeException	$ > hi
4160	87	8	SecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
4161	90	8	SecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
4162	111	12	SecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
4163	124	12	SecantSolver.java	doSolve	f1	double	0	RET	FastMath.abs($) <= ftol
4163	124	12	SecantSolver.java	doSolve	ftol	double	0	RET	FastMath.abs(f1) <= $
4164	130	12	SecantSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
4164	130	12	SecantSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
4164	130	12	SecantSolver.java	doSolve	atol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
4164	130	12	SecantSolver.java	doSolve	rtol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
2339	82	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
831	97	8	Segment.java	distance	r	double	1	RET	$ < 0
831	97	8	Segment.java	distance	r	double	1	RET	$ > 1
2349	268	8	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 0
2349	268	8	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 0
2350	271	12	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 1
2350	271	12	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 1
11276	278	16	SemiVariance.java	evaluate	i	int	0	NIL-FOR	$ < length
11276	278	16	SemiVariance.java	evaluate	length	int	0	NIL-FOR	i < $
2351	279	20	SemiVariance.java	evaluate	i	int	0	DEF	(values[$] > cutoff) == booleanDirection
2351	279	20	SemiVariance.java	evaluate	booleanDirection	boolean	0	DEF	(values[i] > cutoff) == $
2351	279	20	SemiVariance.java	evaluate	values	double[]	0	DEF	($[i] > cutoff) == booleanDirection
2351	279	20	SemiVariance.java	evaluate	cutoff	double	0	DEF	(values[i] > $) == booleanDirection
2352	285	16	SemiVariance.java	evaluate	corrected	boolean	1	RET	$
4083	173	8	Sigmoid.java	value	exp	double	1	DEF	Double.isInfinite($)
12222	191	12	Sigmoid.java	value	THIS	Sigmoid	0	NIL-FOR	n < f.$.length
12222	191	12	Sigmoid.java	value	n	int	0	NIL-FOR	$ < f.length
12222	191	12	Sigmoid.java	value	f	double[]	0	NIL-FOR	n < $.length
12223	196	16	Sigmoid.java	value	k	int	0	NIL-FOR	$ >= 0
4084	198	20	Sigmoid.java	value	k	int	1	DEF	$ > 1
2828	90	8	SimplePointChecker.java	SimplePointChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2829	116	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	iteration >= $.maxIterationCount
2829	116	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2829	116	8	SimplePointChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
11462	122	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	NIL-FOR	i < p.$.length
11462	122	8	SimplePointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
11462	122	8	SimplePointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
2830	127	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > size * $.getRelativeThreshold()
2830	127	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > $.getAbsoluteThreshold()
2830	127	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
2830	127	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
2830	127	12	SimplePointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
1956	102	8	SimplePointChecker.java	SimplePointChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1957	128	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1957	128	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	iteration >= $.maxIterationCount
1957	128	8	SimplePointChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
10963	134	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	NIL-FOR	i < p.$.length
10963	134	8	SimplePointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
10963	134	8	SimplePointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1958	139	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > size * $.getRelativeThreshold()
1958	139	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > $.getAbsoluteThreshold()
1958	139	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1958	139	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1958	139	12	SimplePointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
2691	133	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
2692	137	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2693	149	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2694	173	8	SimpleRegression.java	append	THIS	SimpleRegression	1	DEF	$.n == 0
2695	180	12	SimpleRegression.java	append	THIS	SimpleRegression	1	DEF	$.hasIntercept
2696	215	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
2697	216	12	SimpleRegression.java	removeData	THIS	SimpleRegression	1	DEF	$.hasIntercept
11433	259	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
11433	259	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
11433	259	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
2698	260	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	ModelSpecificationException	data[i].length < 2
2698	260	12	SimpleRegression.java	addData	i	int	0	ModelSpecificationException	data[$].length < 2
2698	260	12	SimpleRegression.java	addData	data	double[][]	0	ModelSpecificationException	$[i].length < 2
2699	278	8	SimpleRegression.java	addObservation	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length == 0
2699	278	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$ == null
2699	278	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length == 0
2700	295	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length != y.$.length
2700	295	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2700	295	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2700	295	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2700	295	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
11434	302	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
11434	302	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
11434	302	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
2701	303	12	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	DEF	x[i].length == 0
2701	303	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$] == null
2701	303	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$].length == 0
2701	303	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i] == null
2701	303	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i].length == 0
2702	307	8	SimpleRegression.java	addObservations	obsOk	boolean	0	ModelSpecificationException	$
11435	312	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
11435	312	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
11435	312	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
11436	331	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
11436	331	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
11436	331	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
11436	331	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
2703	376	8	SimpleRegression.java	predict	THIS	SimpleRegression	0	RET	$.hasIntercept
2704	432	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
2705	435	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	FastMath.abs($.sumXX) < 10 * Double.MIN_VALUE
2706	485	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2707	499	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2708	545	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
2709	568	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
2710	606	8	SimpleRegression.java	getInterceptStdErr	THIS	SimpleRegression	0	RET	$.hasIntercept
2711	687	8	SimpleRegression.java	getSlopeConfidenceInterval	THIS	SimpleRegression	0	RET	$.n < 3
2712	690	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ >= 1
2712	690	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ <= 0
2713	723	8	SimpleRegression.java	getSignificance	THIS	SimpleRegression	0	RET	$.n < 3
2714	743	6	SimpleRegression.java	getIntercept	THIS	SimpleRegression	0	RET	$.hasIntercept
2715	772	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	NoDataException:RET	$.hasIntercept
2716	773	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 3
2717	776	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	FastMath.abs( $.sumXX ) > Precision.SAFE_MIN
2718	799	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 2
2719	802	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	Double.isNaN($.sumXX)
2720	827	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	MathIllegalArgumentException	variablesToInclude.$.length == 0
2720	827	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$ == null
2720	827	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$.length == 0
2721	830	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 1
2721	830	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 2
2721	830	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	$.hasIntercept
2721	830	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 1
2721	830	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 2
2722	836	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	$.hasIntercept
2723	837	12	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	variablesToInclude.$.length == 2
2723	837	12	SimpleRegression.java	regress	variablesToInclude	int[]	1	OutOfRangeException:RET	$.length == 2
2724	838	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	ModelSpecificationException	$[0] == 1
2725	840	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2726	843	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[1] != 1
2727	848	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 1
2727	848	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2728	853	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	RET	$[0] == 0
2729	861	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	RET	$[0] == 1
2730	867	20	SimpleRegression.java	regress	_sxx	double	1	RET	Double.isNaN($)
2731	883	12	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2749	91	8	SimpleUnivariateValueChecker.java	SimpleUnivariateValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2750	117	8	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	iteration >= $.maxIterationCount
2750	117	8	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2750	117	8	SimpleUnivariateValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
1883	103	8	SimpleUnivariateValueChecker.java	SimpleUnivariateValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1884	129	8	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1884	129	8	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	iteration >= $.maxIterationCount
1884	129	8	SimpleUnivariateValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
2734	89	8	SimpleValueChecker.java	SimpleValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2735	115	8	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	iteration >= $.maxIterationCount
2735	115	8	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2735	115	8	SimpleValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
1865	100	8	SimpleValueChecker.java	SimpleValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1866	126	8	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1866	126	8	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	iteration >= $.maxIterationCount
1866	126	8	SimpleValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
2831	91	8	SimpleVectorValueChecker.java	SimpleVectorValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2832	117	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2832	117	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	iteration >= $.maxIterationCount
2832	117	8	SimpleVectorValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
11463	123	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	NIL-FOR	i < p.$.length
11463	123	8	SimpleVectorValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
11463	123	8	SimpleVectorValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
2833	128	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > $.getAbsoluteThreshold()
2833	128	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > size * $.getRelativeThreshold()
2833	128	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
2833	128	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
2833	128	12	SimpleVectorValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
1959	102	8	SimpleVectorValueChecker.java	SimpleVectorValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1960	128	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1960	128	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	iteration >= $.maxIterationCount
1960	128	8	SimpleVectorValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
10964	134	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	NIL-FOR	i < p.$.length
10964	134	8	SimpleVectorValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
10964	134	8	SimpleVectorValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1961	139	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > $.getAbsoluteThreshold()
1961	139	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > size * $.getRelativeThreshold()
1961	139	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1961	139	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1961	139	12	SimpleVectorValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
3091	158	12	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	RET	$.getIterations() > 0
11670	160	16	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
11670	160	16	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
3092	165	16	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
3093	197	12	SimplexOptimizer.java	parseOptimizationData	THIS	SimplexOptimizer	0	DEF	$.data instanceof AbstractSimplex
3094	213	8	SimplexOptimizer.java	checkParameters	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
3095	216	8	SimplexOptimizer.java	checkParameters	THIS	SimplexOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3095	216	8	SimplexOptimizer.java	checkParameters	THIS	SimplexOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
2266	173	12	SimplexOptimizer.java	parseOptimizationData	THIS	SimplexOptimizer	0	DEF	$.data instanceof AbstractSimplex
2267	183	8	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
2268	215	12	SimplexOptimizer.java	doOptimize	iteration	int	0	RET	$ > 0
11243	217	16	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
11243	217	16	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
2269	222	16	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
11441	126	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
11441	126	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
2786	130	12	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	$ < minValue
2786	130	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	entry < $
11442	149	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
11442	149	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
2787	153	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	Precision.compareTo(entry, 0d, $.maxUlps) > 0
2787	153	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	Precision.compareTo($, 0d, maxUlps) > 0
2788	158	16	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
2789	160	23	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
2790	168	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
2791	170	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
2792	174	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
11443	176	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
11443	176	20	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
2793	179	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
2793	179	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	Precision.equals(entry, 1d, $.maxUlps)
2793	179	24	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
2793	179	24	SimplexSolver.java	getPivotRow	entry	double	0	RET	Precision.equals($, 1d, maxUlps)
2793	179	24	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
2794	195	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.getEvaluations() < $.getMaxEvaluations() / 2
11444	201	20	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	NIL-FOR	$.row.equals(minRow)
11444	201	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < varEnd
11444	201	20	SimplexSolver.java	getPivotRow	minRow	Integer	0	NIL-FOR	row.equals($)
11444	201	20	SimplexSolver.java	getPivotRow	varEnd	int	0	NIL-FOR	i < $
2795	203	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	basicRow.equals($.row)
2795	203	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$.equals(row)
2795	203	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$ != null
2795	203	24	SimplexSolver.java	getPivotRow	i	int	0	DEF	$ < minIndex
2795	203	24	SimplexSolver.java	getPivotRow	minIndex	int	0	DEF	i < $
2796	230	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
11445	239	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
11445	239	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
2797	240	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
2797	240	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
2798	261	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
11446	265	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
2799	270	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, $.epsilon)
2799	270	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	Precision.equals($.getEntry(0, $.getRhsOffset()), 0d, epsilon)
11447	293	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
10942	75	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
10942	75	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
1916	79	12	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	$ < minValue
1916	79	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	entry < $
10943	97	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
10943	97	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1917	101	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	Precision.compareTo(entry, 0d, $.maxUlps) > 0
1917	101	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	Precision.compareTo($, 0d, maxUlps) > 0
1918	106	16	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
1919	108	23	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
1920	116	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
1921	118	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
1922	122	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
10944	124	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
10944	124	20	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
1923	127	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	Precision.equals(entry, 1d, $.maxUlps)
1923	127	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
1923	127	24	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
1923	127	24	SimplexSolver.java	getPivotRow	entry	double	0	RET	Precision.equals($, 1d, maxUlps)
1923	127	24	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
1924	143	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.getIterations() < $.getMaxIterations() / 2
10945	149	20	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	NIL-FOR	$.row.equals(minRow)
10945	149	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < varEnd
10945	149	20	SimplexSolver.java	getPivotRow	minRow	Integer	0	NIL-FOR	row.equals($)
10945	149	20	SimplexSolver.java	getPivotRow	varEnd	int	0	NIL-FOR	i < $
1925	151	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	basicRow.equals($.row)
1925	151	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$ != null
1925	151	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$.equals(row)
1925	151	24	SimplexSolver.java	getPivotRow	i	int	0	DEF	$ < minIndex
1925	151	24	SimplexSolver.java	getPivotRow	minIndex	int	0	DEF	i < $
1926	176	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
10946	185	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
10946	185	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1927	186	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
1927	186	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
1928	204	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
10947	208	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1929	213	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, $.epsilon)
1929	213	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	Precision.equals($.getEntry(0, $.getRhsOffset()), 0d, epsilon)
10948	233	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
2805	179	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
11448	183	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
11448	183	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
2806	186	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
11449	189	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
11449	189	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
11450	192	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
11450	192	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
2807	212	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
2808	223	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
11451	231	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
11451	231	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
2809	239	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
2810	248	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
2810	248	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
2811	250	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
2811	250	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
2812	255	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
2812	255	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
2812	255	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
2812	255	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
2813	285	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
2814	310	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
2814	310	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
11452	337	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
11452	337	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
2815	339	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	Precision.equals(entry, 1d, $.maxUlps)
2815	339	12	SimplexTableau.java	getBasicRow	entry	double	1	DEF	Precision.equals($, 1d, maxUlps)
2815	339	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
2816	341	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	Precision.equals(entry, 0d, $.maxUlps)
2816	341	19	SimplexTableau.java	getBasicRow	entry	double	0	RET	Precision.equals($, 0d, maxUlps)
2817	353	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
11453	361	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
11453	361	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
2818	363	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	Precision.compareTo(entry, 0d, $.epsilon) > 0
2818	363	12	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	Precision.compareTo($, 0d, epsilon) > 0
11454	369	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
11454	369	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
2819	371	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
2819	371	12	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
11455	377	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
11455	377	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
11456	379	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
11456	379	12	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
2820	380	16	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
2820	380	16	SimplexTableau.java	dropPhase1Objective	columnsToDrop	Set<Integer>	0	DEF	$.contains(j)
11457	388	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
11458	409	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
11458	409	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
2821	411	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	Precision.compareTo(entry, 0d, $.epsilon) < 0
2821	411	12	SimplexTableau.java	isOptimal	entry	double	0	RET	Precision.compareTo($, 0d, epsilon) < 0
11459	429	8	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
11459	429	8	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
11459	429	8	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
2822	431	12	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
2823	436	12	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ == 0
2823	436	12	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ != null
2824	441	19	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
2824	441	19	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
11460	465	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
11460	465	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
11461	482	8	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth()
11461	482	8	SimplexTableau.java	subtractRow	i	int	0	NIL-FOR	$ < getWidth()
2825	485	12	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	DEF	FastMath.abs(result) < $.cutOff
2825	485	12	SimplexTableau.java	subtractRow	result	double	0	DEF	FastMath.abs($) < cutOff
2826	602	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
2826	602	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
2827	606	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
1933	159	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
10949	163	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
10949	163	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
1934	166	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
10950	169	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
10950	169	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
10951	172	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
10951	172	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1935	192	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
1936	203	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
10952	211	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
10952	211	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
1937	219	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
1938	228	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
1938	228	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
1939	230	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1939	230	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1940	235	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
1940	235	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1940	235	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
1940	235	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1941	265	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
1942	290	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
1942	290	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
10953	317	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
10953	317	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
1943	319	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	Precision.equals(entry, 1d, $.maxUlps)
1943	319	12	SimplexTableau.java	getBasicRow	entry	double	1	DEF	Precision.equals($, 1d, maxUlps)
1943	319	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
1944	321	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	Precision.equals(entry, 0d, $.maxUlps)
1944	321	19	SimplexTableau.java	getBasicRow	entry	double	0	RET	Precision.equals($, 0d, maxUlps)
1945	333	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
10954	341	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
10954	341	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
1946	343	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	Precision.compareTo(entry, 0d, $.epsilon) > 0
1946	343	12	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	Precision.compareTo($, 0d, epsilon) > 0
10955	349	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
10955	349	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1947	351	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
1947	351	12	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
10956	357	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
10956	357	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
10957	359	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
10957	359	12	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
1948	360	16	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
1948	360	16	SimplexTableau.java	dropPhase1Objective	columnsToDrop	Set<Integer>	0	DEF	$.contains(j)
10958	368	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
10959	389	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
10959	389	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
1949	391	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	Precision.compareTo(entry, 0d, $.epsilon) < 0
1949	391	12	SimplexTableau.java	isOptimal	entry	double	0	RET	Precision.compareTo($, 0d, epsilon) < 0
10960	409	6	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
10960	409	6	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
10960	409	6	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
1950	411	10	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
1951	416	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ != null
1951	416	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ == 0
1952	421	17	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
1952	421	17	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
10961	445	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
10961	445	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
10962	462	8	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth()
10962	462	8	SimplexTableau.java	subtractRow	i	int	0	NIL-FOR	$ < getWidth()
1953	465	12	SimplexTableau.java	subtractRow	result	double	0	DEF	FastMath.abs($) < CUTOFF_THRESHOLD
1954	582	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
1954	582	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
1955	586	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
4317	63	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
4318	85	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
4319	105	8	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.getMinimalIterationCount() == 1
4320	116	12	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.iterations.getCount() >= $.getMinimalIterationCount()
4321	120	16	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4321	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4321	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4321	120	16	SimpsonIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
4077	88	8	Sinc.java	value	scaledX	double	1	RET	FastMath.abs($) <= SHORTCUT
4078	117	8	Sinc.java	value	scaledX	double	1	DEF	FastMath.abs($) <= SHORTCUT
12218	119	12	Sinc.java	value	THIS	Sinc	0	NIL-FOR	i < f.$.length
12218	119	12	Sinc.java	value	i	int	0	NIL-FOR	$ < f.length
12218	119	12	Sinc.java	value	f	double[]	0	NIL-FOR	i < $.length
4079	121	16	Sinc.java	value	i	int	1	DEF	($ & 0x1) == 0
12219	154	12	Sinc.java	value	THIS	Sinc	0	NIL-FOR	n < f.$.length
12219	154	12	Sinc.java	value	n	int	0	NIL-FOR	$ < f.length
12219	154	12	Sinc.java	value	f	double[]	0	NIL-FOR	n < $.length
4080	161	16	Sinc.java	value	n	int	1	DEF	($ & 0x1) == 0
12220	173	16	Sinc.java	value	k	int	0	NIL-FOR	$ > 1
4081	194	8	Sinc.java	value	THIS	Sinc	0	DEF	$.normalized
12221	196	12	Sinc.java	value	THIS	Sinc	0	NIL-FOR	i < f.$.length
12221	196	12	Sinc.java	value	i	int	0	NIL-FOR	$ < f.length
12221	196	12	Sinc.java	value	f	double[]	0	NIL-FOR	i < $.length
1754	92	8	SingularValueDecomposition.java	SingularValueDecomposition	matrix	RealMatrix	1	DEF	$.getRowDimension() < $.getColumnDimension()
10811	113	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ < FastMath.max(nct, nrt)
10811	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	NIL-FOR	k < FastMath.max($, nrt)
10811	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	NIL-FOR	k < FastMath.max(nct, $)
1755	114	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1755	114	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
10812	119	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10812	119	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1756	122	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1756	122	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1757	123	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	A[$][$] < 0
10813	126	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10813	126	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
10814	133	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
10814	133	12	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
1758	134	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1758	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1758	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1758	134	16	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
10815	138	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10815	138	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
10816	142	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10816	142	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1759	150	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1759	150	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
10817	153	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10817	153	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1760	157	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1760	157	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
10818	162	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
10818	162	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1761	165	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1761	165	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1762	166	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$ + 1] < 0
1762	166	20	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k + 1] < 0
10819	169	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
10819	169	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1763	175	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k + 1 < $.m
1763	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1763	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ + 1 < m
1763	175	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
10820	178	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10820	178	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
10821	181	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
10821	181	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
10822	182	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10822	182	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
10823	186	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
10823	186	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
10824	188	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10824	188	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
10825	196	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
10825	196	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1764	203	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	nct < $.n
1764	203	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	$ < n
1765	206	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.m < p
1765	206	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	m < $
1766	209	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	$ + 1 < p
1766	209	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	nrt + 1 < $
10826	215	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
10826	215	8	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
10827	216	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10827	216	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
10828	221	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1767	222	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.singularValues[k] != 0
1767	222	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	singularValues[$] != 0
10829	223	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
10829	223	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
10830	225	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10830	225	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
10831	229	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10831	229	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
10832	233	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10832	233	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
10833	237	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < k - 1
10833	237	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	i < $ - 1
10834	241	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10834	241	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
10835	249	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1768	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1768	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1768	250	12	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1768	250	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
10836	252	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
10836	252	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
10837	254	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
10837	254	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
10838	258	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
10838	258	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
10839	263	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
10839	263	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
10840	272	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-WHILE	$ > 0
10841	284	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1769	295	16	SingularValueDecomposition.java	SingularValueDecomposition	threshold	double	0	DEF	FastMath.abs(e[k]) > $
1769	295	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	FastMath.abs(e[$]) > threshold
1769	295	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	FastMath.abs($[k]) > threshold
1770	302	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	$ == p - 2
1770	302	12	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	k == $ - 2
10842	306	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	NIL-FOR	$ >= k
10842	306	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	ks >= $
1771	307	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	$ == k
1771	307	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	ks == $
1772	312	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	FastMath.abs($.singularValues[ks]) <= TINY + EPS * t
1772	312	20	SingularValueDecomposition.java	SingularValueDecomposition	t	double	0	DEF	FastMath.abs(singularValues[ks]) <= TINY + EPS * $
1772	312	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	FastMath.abs(singularValues[$]) <= TINY + EPS * t
1773	317	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == k
1773	317	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	ks == $
1774	319	23	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == p - 1
1774	319	23	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	ks == $ - 1
10843	333	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ >= k
10843	333	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	j >= $
1775	338	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1775	338	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
10844	343	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
10844	343	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
10845	355	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p
10845	355	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $
10846	363	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10846	363	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1776	388	20	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ != 0
1776	388	20	SingularValueDecomposition.java	SingularValueDecomposition	c	double	0	DEF	$ != 0
1777	391	24	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ < 0
10847	399	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p - 1
10847	399	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $ - 1
1778	403	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1778	403	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
10848	411	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
10848	411	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1779	424	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	j < $.m - 1
1779	424	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ < m - 1
10849	425	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10849	425	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1780	439	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] <= 0
1780	439	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] <= 0
10850	442	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ <= pp
10850	442	24	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-FOR	i <= $
10851	447	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-WHILE	$ < pp
10851	447	20	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-WHILE	k < $
1781	448	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] >= $.singularValues[k + 1]
1781	448	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] >= singularValues[$ + 1]
1782	454	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.n - 1
1782	454	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < n - 1
10852	455	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
10852	455	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1783	461	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.m - 1
1783	461	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < m - 1
10853	462	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
10853	462	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1784	481	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.transposed
1785	509	8	SingularValueDecomposition.java	getUT	THIS	SingularValueDecomposition	0	DEF	$.cachedUt == null
1786	523	8	SingularValueDecomposition.java	getS	THIS	SingularValueDecomposition	0	DEF	$.cachedS == null
1787	558	8	SingularValueDecomposition.java	getVT	THIS	SingularValueDecomposition	0	DEF	$.cachedVt == null
10854	580	8	SingularValueDecomposition.java	getCovariance	THIS	SingularValueDecomposition	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
10854	580	8	SingularValueDecomposition.java	getCovariance	p	int	0	NIL-WHILE	dimension < $
10854	580	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	$ < p
10854	580	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
10854	580	8	SingularValueDecomposition.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
1788	585	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NumberIsTooLargeException	$ == 0
10855	644	8	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.singularValues.$.length
10855	644	8	SingularValueDecomposition.java	getRank	i	int	0	NIL-FOR	$ < singularValues.length
1789	645	12	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	DEF	$.singularValues[i] > $.tol
1789	645	12	SingularValueDecomposition.java	getRank	i	int	0	DEF	singularValues[$] > tol
2326	96	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
2327	111	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
2328	115	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
2329	136	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
2330	164	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
2330	164	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2330	164	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
2330	164	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
2330	164	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
11269	174	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11269	174	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11269	174	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
11270	182	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11270	182	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11270	182	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
9991	85	12	SmallPrimes.java	smallTrialDivision	THIS	SmallPrimes	0	NIL-WHILE	0 == n % $.p
9991	85	12	SmallPrimes.java	smallTrialDivision	n	int	0	NIL-WHILE	0 == $ % p
9992	103	8	SmallPrimes.java	boundedTrialDivision	f	int	0	NIL-WHILE	$ <= maxFactor
9992	103	8	SmallPrimes.java	boundedTrialDivision	maxFactor	int	0	NIL-WHILE	f <= $
1074	104	12	SmallPrimes.java	boundedTrialDivision	f	int	0	DEF	0 == n % $
1074	104	12	SmallPrimes.java	boundedTrialDivision	n	int	0	DEF	0 == $ % f
1075	110	12	SmallPrimes.java	boundedTrialDivision	f	int	0	DEF	0 == n % $
1075	110	12	SmallPrimes.java	boundedTrialDivision	n	int	0	DEF	0 == $ % f
1076	117	8	SmallPrimes.java	boundedTrialDivision	n	int	0	DEF	$ != 1
1077	131	8	SmallPrimes.java	trialDivision	n	int	0	RET	1 == $
1078	155	8	SmallPrimes.java	millerRabinPrimeTest	n	int	0	DEF	$ >= 2047
1079	158	8	SmallPrimes.java	millerRabinPrimeTest	n	int	0	DEF	$ >= 1373653
1080	161	8	SmallPrimes.java	millerRabinPrimeTest	n	int	0	DEF	$ >= 25326001
9993	167	8	SmallPrimes.java	millerRabinPrimeTest	i	int	0	NIL-FOR	$ < t
9993	167	8	SmallPrimes.java	millerRabinPrimeTest	t	int	0	NIL-FOR	i < $
1081	171	12	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	1 != $
1081	171	12	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	$ != nMinus1
1081	171	12	SmallPrimes.java	millerRabinPrimeTest	nMinus1	int	0	RET	y != $
9994	173	16	SmallPrimes.java	millerRabinPrimeTest	j	int	0	NIL-WHILE	$ <= s - 1
9994	173	16	SmallPrimes.java	millerRabinPrimeTest	y	int	0	NIL-WHILE	nMinus1 != $
9994	173	16	SmallPrimes.java	millerRabinPrimeTest	nMinus1	int	0	NIL-WHILE	$ != y
9994	173	16	SmallPrimes.java	millerRabinPrimeTest	s	int	0	NIL-WHILE	j <= $ - 1
1082	176	20	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	1 == $
1083	181	16	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	nMinus1 != $
1083	181	16	SmallPrimes.java	millerRabinPrimeTest	nMinus1	int	0	RET	$ != y
4062	75	8	SmoothingPolynomialBicubicSplineInterpolator.java	SmoothingPolynomialBicubicSplineInterpolator	xDegree	int	0	NotPositiveException	$ < 0
4063	78	8	SmoothingPolynomialBicubicSplineInterpolator.java	SmoothingPolynomialBicubicSplineInterpolator	yDegree	int	0	NotPositiveException	$ < 0
4064	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
4064	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
4064	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
4064	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
4064	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
4064	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
4065	104	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
4065	104	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
4065	104	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
12204	111	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12204	111	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
4066	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
4066	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
4066	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
4066	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
12205	123	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
12205	123	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
12206	125	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12206	125	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
12207	137	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
12207	137	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
12208	139	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12208	139	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
12209	147	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12209	147	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
12210	149	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
12210	149	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
12211	161	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12211	161	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
12212	163	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
12212	163	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
3236	93	8	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	OutOfRangeException	$ < 1
3236	93	8	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	OutOfRangeException	$ > MAX_DIMENSION
3237	99	8	SobolSequenceGenerator.java	SobolSequenceGenerator	is	InputStream	0	MathInternalError	$ == null
3238	160	8	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	NotStrictlyPositiveException	$ < 1
3239	172	8	SobolSequenceGenerator.java	SobolSequenceGenerator	lastDimension	int	0	OutOfRangeException	$ < dimension
3239	172	8	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	OutOfRangeException	lastDimension < $
11789	191	8	SobolSequenceGenerator.java	initFromStream	i	int	0	NIL-FOR	$ <= BITS
11790	206	12	SobolSequenceGenerator.java	initFromStream	line	String	0	NIL-WHILE	($ = reader.readLine()) != null
11790	206	12	SobolSequenceGenerator.java	initFromStream	reader	BufferedReader	0	NIL-WHILE	(line = $.readLine()) != null
3240	210	20	SobolSequenceGenerator.java	initFromStream	THIS	SobolSequenceGenerator	0	DEF	dim <= $.dimension
3240	210	20	SobolSequenceGenerator.java	initFromStream	dim	int	0	DEF	$ <= dimension
3240	210	20	SobolSequenceGenerator.java	initFromStream	dim	int	0	DEF	$ >= 2
11791	214	24	SobolSequenceGenerator.java	initFromStream	i	int	0	NIL-FOR	$ <= s
11791	214	24	SobolSequenceGenerator.java	initFromStream	s	int	0	NIL-FOR	i <= $
3241	220	20	SobolSequenceGenerator.java	initFromStream	THIS	SobolSequenceGenerator	0	RET	dim > $.dimension
3241	220	20	SobolSequenceGenerator.java	initFromStream	dim	int	0	RET	$ > dimension
11792	246	8	SobolSequenceGenerator.java	initDirectionVector	i	int	0	NIL-FOR	$ <= s
11792	246	8	SobolSequenceGenerator.java	initDirectionVector	s	int	0	NIL-FOR	i <= $
11793	249	8	SobolSequenceGenerator.java	initDirectionVector	i	int	0	NIL-FOR	$ <= BITS
11794	251	12	SobolSequenceGenerator.java	initDirectionVector	k	int	0	NIL-FOR	$ <= s - 1
11794	251	12	SobolSequenceGenerator.java	initDirectionVector	s	int	0	NIL-FOR	k <= $ - 1
3242	260	8	SobolSequenceGenerator.java	nextVector	THIS	SobolSequenceGenerator	0	RET	$.count == 0
11795	268	8	SobolSequenceGenerator.java	nextVector	value	int	0	NIL-WHILE	($ & 1) == 1
11796	273	8	SobolSequenceGenerator.java	nextVector	THIS	SobolSequenceGenerator	0	NIL-FOR	i < $.dimension
11796	273	8	SobolSequenceGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
3243	291	8	SobolSequenceGenerator.java	skipTo	index	int	1	DEF	$ == 0
11797	297	12	SobolSequenceGenerator.java	skipTo	THIS	SobolSequenceGenerator	0	NIL-FOR	j < $.dimension
11797	297	12	SobolSequenceGenerator.java	skipTo	j	int	0	NIL-FOR	$ < dimension
11798	299	16	SobolSequenceGenerator.java	skipTo	k	int	0	NIL-FOR	$ <= BITS
3244	301	20	SobolSequenceGenerator.java	skipTo	shift	long	0	DEF	$ == 0
10335	97	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rows
10335	97	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rows
10336	98	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columns
10336	98	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columns
1454	111	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1454	111	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
1455	157	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1455	157	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
1456	170	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1456	170	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
10437	120	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
10437	120	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
10437	120	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
10438	159	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1533	163	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1533	163	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
10439	182	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1534	191	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
10440	196	12	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < n
10440	196	12	SparseFieldVector.java	append	n	int	0	NIL-FOR	i < $
10441	223	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
10442	236	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
10443	249	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
1535	285	8	SparseFieldVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
10444	293	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1536	296	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
1536	296	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
1536	296	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
1536	296	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
10445	310	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
10445	310	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
10446	326	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
10447	340	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
10447	340	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
10448	354	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
10449	380	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
10450	383	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
1537	393	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
10451	399	12	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
10452	403	16	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < n
10452	403	16	SparseFieldVector.java	outerProduct	n	int	0	NIL-FOR	col < $
10453	423	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
10453	423	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
10454	443	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < n
10454	443	8	SparseFieldVector.java	setSubVector	n	int	0	NIL-FOR	i < $
10455	460	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1538	463	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1538	463	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1539	475	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
10456	481	12	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < n
10456	481	12	SparseFieldVector.java	subtract	n	int	0	NIL-FOR	i < $
1540	482	16	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
1540	482	16	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
10457	496	8	SparseFieldVector.java	toArray	iter	Iterator	0	NIL-WHILE	$.hasNext()
1541	510	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	OutOfRangeException	index >= $.getDimension()
1541	510	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1541	510	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1542	523	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DimensionMismatchException	$.getDimension() != n
1542	523	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	getDimension() != $
1543	530	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
10458	537	12	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < n
10458	537	12	SparseFieldVector.java	add	n	int	0	NIL-FOR	i < $
10459	552	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1544	565	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
1544	565	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
1545	569	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector<?>
1546	576	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
1547	577	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
1547	577	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
1548	580	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
1548	580	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
1549	583	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
1549	583	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
10460	588	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1550	591	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
1550	591	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
10461	596	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1551	599	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
1551	599	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
1551	599	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
2531	165	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2531	165	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2531	165	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2532	167	15	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2532	167	15	SpearmansCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
2533	173	12	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	0	DEF	$.rankingAlgorithm instanceof NaturalRanking
2533	173	12	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	0	DEF	$.NaNStrategy.REMOVED == ((NaturalRanking) $.rankingAlgorithm).getNanStrategy()
2534	197	8	SpearmansCorrelation.java	rankTransform	THIS	SpearmansCorrelation	0	DEF	$.rankingAlgorithm instanceof NaturalRanking
2534	197	8	SpearmansCorrelation.java	rankTransform	THIS	SpearmansCorrelation	0	DEF	((NaturalRanking) $.rankingAlgorithm).getNanStrategy() == $.NaNStrategy.REMOVED
11347	200	12	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
11347	200	12	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
2535	205	12	SpearmansCorrelation.java	rankTransform	nanPositions	Set<Integer>	0	DEF	$.isEmpty()
11348	208	16	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < transformed.getColumnDimension()
11348	208	16	SpearmansCorrelation.java	rankTransform	transformed	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
2536	214	8	SpearmansCorrelation.java	rankTransform	transformed	RealMatrix	0	DEF	$ == null
11349	218	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < transformed.getColumnDimension()
11349	218	8	SpearmansCorrelation.java	rankTransform	transformed	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
11350	233	8	SpearmansCorrelation.java	getNaNPositions	THIS	SpearmansCorrelation	0	NIL-FOR	i < input.$.length
11350	233	8	SpearmansCorrelation.java	getNaNPositions	i	int	0	NIL-FOR	$ < input.length
11350	233	8	SpearmansCorrelation.java	getNaNPositions	input	double[]	0	NIL-FOR	i < $.length
2537	234	12	SpearmansCorrelation.java	getNaNPositions	i	int	0	DEF	Double.isNaN(input[$])
2537	234	12	SpearmansCorrelation.java	getNaNPositions	input	double[]	0	DEF	Double.isNaN($[i])
2538	249	8	SpearmansCorrelation.java	removeValues	indices	Set<Integer>	0	RET	$.isEmpty()
11351	253	8	SpearmansCorrelation.java	removeValues	THIS	SpearmansCorrelation	0	NIL-FOR	i < input.$.length
11351	253	8	SpearmansCorrelation.java	removeValues	i	int	0	NIL-FOR	$ < input.length
11351	253	8	SpearmansCorrelation.java	removeValues	input	double[]	0	NIL-FOR	i < $.length
2539	254	12	SpearmansCorrelation.java	removeValues	i	int	0	DEF	indices.contains($)
2539	254	12	SpearmansCorrelation.java	removeValues	indices	Set<Integer>	0	DEF	$.contains(i)
751	246	8	SphericalCoordinates.java	computeJacobian	THIS	SphericalCoordinates	0	DEF	$.jacobian == null
752	280	8	SphericalCoordinates.java	computeHessians	THIS	SphericalCoordinates	0	DEF	$.rHessian == null
3962	70	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3962	70	8	SplineInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3962	70	8	SplineInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3963	74	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	NumberIsTooSmallException	x.$.length < 3
3963	74	8	SplineInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 3
12113	86	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
12113	86	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
12114	95	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
12114	95	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
12115	110	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
12116	118	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
12116	118	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
3190	61	8	StableRandomGenerator.java	StableRandomGenerator	generator	RandomGenerator	0	NullArgumentException	$ == null
3191	65	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ <= 2d
3191	65	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ > 0d
3192	70	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ >= -1d
3192	70	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ <= 1d
3193	78	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	1	DEF	$ < 2d
3193	78	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	1	DEF	$ != 0d
3194	96	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	RET	$.alpha == 2d
3195	103	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.beta == 0d
3196	105	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.alpha == 1d
3197	117	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	FastMath.abs($.alpha - 1d) > 1e-8
3198	128	16	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	DEF	$.alpha != 1d
2571	707	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2571	707	8	StatUtils.java	sumDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2571	707	8	StatUtils.java	sumDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2572	710	8	StatUtils.java	sumDifference	n	int	0	NoDataException	$ <= 0
11367	714	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
11367	714	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
2573	756	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2573	756	8	StatUtils.java	varianceDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2573	756	8	StatUtils.java	varianceDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2574	759	8	StatUtils.java	varianceDifference	n	int	0	NumberIsTooSmallException	$ < 2
11368	762	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
11368	762	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
11369	781	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
11369	781	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
11369	781	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
11370	792	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
11370	792	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
11370	792	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
2575	818	8	StatUtils.java	mode	sample	double[]	0	NullArgumentException	$ == null
2576	846	8	StatUtils.java	mode	sample	double[]	0	NullArgumentException	$ == null
2577	850	8	StatUtils.java	mode	begin	int	0	NotPositiveException	$ < 0
2578	854	8	StatUtils.java	mode	length	int	0	NotPositiveException	$ < 0
11371	872	8	StatUtils.java	getMode	i	int	0	NIL-FOR	$ < begin + length
11371	872	8	StatUtils.java	getMode	begin	int	0	NIL-FOR	i < $ + length
11371	872	8	StatUtils.java	getMode	length	int	0	NIL-FOR	i < begin + $
2579	874	12	StatUtils.java	getMode	value	double	0	DEF	Double.isNaN($)
2428	134	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
2428	134	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
2429	137	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
4085	65	8	StepFunction.java	StepFunction	x	double[]	0	NullArgumentException	$ == null
4085	65	8	StepFunction.java	StepFunction	y	double[]	0	NullArgumentException	$ == null
4086	69	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	y.$.length == 0
4086	69	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	x.$.length == 0
4086	69	8	StepFunction.java	StepFunction	x	double[]	0	NoDataException	$.length == 0
4086	69	8	StepFunction.java	StepFunction	y	double[]	0	NoDataException	$.length == 0
4087	73	8	StepFunction.java	StepFunction	THIS	StepFunction	0	DimensionMismatchException	y.$.length != x.$.length
4087	73	8	StepFunction.java	StepFunction	x	double[]	0	DimensionMismatchException	y.length != $.length
4087	73	8	StepFunction.java	StepFunction	y	double[]	0	DimensionMismatchException	$.length != x.length
4088	87	8	StepFunction.java	value	index	int	1	DEF	$ < -1
4089	90	15	StepFunction.java	value	index	int	1	DEF	$ >= 0
3445	206	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
3446	215	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
3447	224	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.mode == $.StepNormalizerMode.MULTIPLES
3447	224	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	Precision.equals(nextTime, $.lastTime, 1)
3447	224	8	StepNormalizer.java	handleStep	nextTime	double	0	DEF	Precision.equals($, lastTime, 1)
11900	231	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
3448	243	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
3449	250	12	StepNormalizer.java	handleStep	addLast	boolean	0	DEF	$
3450	278	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.bounds.firstIncluded()
3450	278	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.firstTime == $.lastTime
2521	128	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	0	NumberIsTooSmallException	$.n < 2
2522	132	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	1	RET	$.biasCorrected
11327	82	8	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
11327	82	8	StorelessCovariance.java	initializeMatrix	i	int	0	NIL-FOR	$ < dimension
11328	83	12	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
11328	83	12	StorelessCovariance.java	initializeMatrix	j	int	0	NIL-FOR	$ < dimension
2519	151	8	StorelessCovariance.java	increment	THIS	StorelessCovariance	0	DimensionMismatchException	length != $.dimension
2519	151	8	StorelessCovariance.java	increment	length	int	0	DimensionMismatchException	$ != dimension
11329	157	8	StorelessCovariance.java	increment	i	int	0	NIL-FOR	$ < length
11329	157	8	StorelessCovariance.java	increment	length	int	0	NIL-FOR	i < $
11330	158	12	StorelessCovariance.java	increment	j	int	0	NIL-FOR	$ < length
11330	158	12	StorelessCovariance.java	increment	length	int	0	NIL-FOR	j < $
2520	175	8	StorelessCovariance.java	append	THIS	StorelessCovariance	0	DimensionMismatchException	sc.$.dimension != $.dimension
2520	175	8	StorelessCovariance.java	append	sc	StorelessCovariance	0	DimensionMismatchException	$.dimension != dimension
11331	181	8	StorelessCovariance.java	append	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
11331	181	8	StorelessCovariance.java	append	i	int	0	NIL-FOR	$ < dimension
11332	182	12	StorelessCovariance.java	append	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
11332	182	12	StorelessCovariance.java	append	j	int	0	NIL-FOR	$ < dimension
11333	207	8	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
11333	207	8	StorelessCovariance.java	getData	i	int	0	NIL-FOR	$ < dimension
11334	208	12	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
11334	208	12	StorelessCovariance.java	getData	j	int	0	NIL-FOR	$ < dimension
753	114	8	SubLine.java	intersection	v1D	Vector3D	0	RET	$ == null
754	124	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
827	118	8	SubLine.java	intersection	v2D	Vector2D	0	RET	$ == null
828	128	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
829	162	8	SubLine.java	side	crossing	Vector2D	0	RET	$ == null
830	183	8	SubLine.java	split	crossing	Vector2D	0	RET	$ == null
664	60	8	SubPlane.java	side	inter	Line	0	RET	$ == null
665	77	8	SubPlane.java	side	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
665	77	8	SubPlane.java	side	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
666	103	8	SubPlane.java	split	inter	Line	0	RET	$ == null
667	115	8	SubPlane.java	split	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
667	115	8	SubPlane.java	split	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
2296	124	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length, true)
2296	124	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2296	124	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2296	124	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
11259	126	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11259	126	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11259	126	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2297	163	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, weights, begin, length, true)
2297	163	8	Sum.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
2297	163	8	Sum.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
2297	163	8	Sum.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
2297	163	8	Sum.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
11260	165	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11260	165	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11260	165	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2298	135	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length, true)
2298	135	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2298	135	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2298	135	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
11261	137	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11261	137	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11261	137	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2295	123	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length, true)
2295	123	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2295	123	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2295	123	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
11258	125	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11258	125	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11258	125	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2366	159	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2367	162	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2368	165	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl != $.geoMean
2369	218	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
2370	219	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
2371	354	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2372	357	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2373	371	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
2373	371	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
2374	374	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
2375	645	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	MathIllegalStateException	$.n > 0
2376	684	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getVarianceImpl() instanceof Variance
2377	689	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.meanImpl instanceof Mean
2377	689	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.meanImpl instanceof Mean
2378	694	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
2379	702	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
2379	702	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
2380	707	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
2380	707	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
2381	712	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
2381	712	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
2382	717	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
2382	717	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
2383	722	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
2383	722	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
2384	727	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
2384	727	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
2385	732	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
2385	732	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
2386	737	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
2386	737	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
1407	1168	8	SymmLQ.java	solveInPlace	state	State	0	RET	$.bEqualsNullVector()
1408	1177	8	SymmLQ.java	solveInPlace	earlyStop	boolean	0	DEF	$
10273	1178	12	SymmLQ.java	solveInPlace	state	State	0	NIL-DOWHILE	$.hasConverged()
4326	72	8	SymmetricGaussIntegrator.java	integrate	ruleLength	int	0	RET	$ == 1
12358	79	8	SymmetricGaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < iMax
12358	79	8	SymmetricGaussIntegrator.java	integrate	iMax	int	0	NIL-FOR	i < $
4327	93	8	SymmetricGaussIntegrator.java	integrate	ruleLength	int	0	DEF	$ % 2 != 0
1160	91	8	TDistribution.java	TDistribution	degreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1161	122	8	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ == 0
1162	130	12	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
1163	158	8	TDistribution.java	getNumericalMean	df	double	0	RET	$ > 1
1164	179	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 2
1165	183	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ <= 2
1165	183	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 1
2452	1133	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ > 0.5
2452	1133	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ <= 0
2453	1150	8	TTest.java	checkSampleData	data	double[]	0	NullArgumentException	$ == null
2454	1153	8	TTest.java	checkSampleData	THIS	TTest	0	NumberIsTooSmallException	data.$.length < 2
2454	1153	8	TTest.java	checkSampleData	data	double[]	0	NumberIsTooSmallException	$.length < 2
2455	1171	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NullArgumentException	$ == null
2456	1174	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NumberIsTooSmallException	$.getN() < 2
2348	90	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
3554	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	1	DEF	$.previousState != null
3554	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
12000	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
12000	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
12001	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
12001	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3260	72	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	MathIllegalArgumentException	population.getPopulationSize() < $.arity
3260	72	8	TournamentSelection.java	tournament	population	ListPopulation	0	MathIllegalArgumentException	$.getPopulationSize() < this.arity
11808	86	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
11808	86	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
11869	62	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
11869	62	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
11869	62	8	TransformUtils.java	scaleArray	f	double[]	0	NIL-FOR	i < $.length
11870	78	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
11870	78	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
11870	78	8	TransformUtils.java	scaleArray	f	Complex[]	0	NIL-FOR	i < $.length
11871	102	8	TransformUtils.java	createRealImaginaryArray	THIS	TransformUtils	0	NIL-FOR	i < dataC.$.length
11871	102	8	TransformUtils.java	createRealImaginaryArray	i	int	0	NIL-FOR	$ < dataC.length
11871	102	8	TransformUtils.java	createRealImaginaryArray	dataC	Complex[]	0	NIL-FOR	i < $.length
3413	127	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataRI.$.length != 2
3413	127	8	TransformUtils.java	createComplexArray	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
3414	132	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataR.$.length != dataI.$.length
3414	132	8	TransformUtils.java	createComplexArray	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
3414	132	8	TransformUtils.java	createComplexArray	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
11872	138	8	TransformUtils.java	createComplexArray	i	int	0	NIL-FOR	$ < n
11872	138	8	TransformUtils.java	createComplexArray	n	int	0	NIL-FOR	i < $
3415	157	8	TransformUtils.java	exactLog2	index	int	0	MathIllegalArgumentException	$ < 0
71	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
71	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
72	148	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
73	159	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
73	159	8	TransformerMap.java	equals	other	Object	0	RET	this == $
74	162	8	TransformerMap.java	equals	other	Object	0	RET	$ instanceof TransformerMap
75	164	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
75	164	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
76	167	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
76	167	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
77	171	16	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
77	171	16	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
4343	66	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
4344	88	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
4345	120	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
12373	135	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
12373	135	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
4346	155	12	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	i >= $.getMinimalIterationCount()
4346	155	12	TrapezoidIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
4347	159	16	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4347	159	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4347	159	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4347	159	16	TrapezoidIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
1399	63	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1400	86	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
1401	98	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
10259	103	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
1402	106	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
1402	106	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
10260	110	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
10260	110	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
10261	113	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
10261	113	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
10262	115	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
10262	115	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
10263	120	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
10263	120	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
1403	139	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
10264	142	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
10264	142	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
1404	144	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
1405	147	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1405	147	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
10265	195	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
10265	195	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
10266	201	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
10266	201	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1406	207	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
10267	218	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
10267	218	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
10268	222	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
10268	222	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
10269	232	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
10269	232	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
10270	238	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
10270	238	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
10271	244	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
10271	244	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
10272	246	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
10272	246	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1170	82	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooLargeException	$ >= b
1170	82	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	a >= $
1171	87	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooSmallException	c < $
1171	87	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooSmallException	$ < a
1172	91	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooLargeException	$ > b
1172	91	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	c > $
1173	142	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.a
1173	142	8	TriangularDistribution.java	density	x	double	0	RET	$ < a
1174	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.c
1174	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.a <= x
1174	145	8	TriangularDistribution.java	density	x	double	0	RET	$ < c
1174	145	8	TriangularDistribution.java	density	x	double	0	RET	a <= $
1175	150	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x == $.c
1175	150	8	TriangularDistribution.java	density	x	double	0	RET	$ == c
1176	153	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.c < x
1176	153	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x <= $.b
1176	153	8	TriangularDistribution.java	density	x	double	0	RET	c < $
1176	153	8	TriangularDistribution.java	density	x	double	0	RET	$ <= b
1177	175	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.a
1177	175	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < a
1178	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.a <= x
1178	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.c
1178	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	a <= $
1178	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < c
1179	183	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x == $.c
1179	183	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ == c
1180	186	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.c < x
1180	186	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x <= $.b
1180	186	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	c < $
1180	186	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ <= b
1181	262	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1
1181	262	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0
1182	265	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
1183	268	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1184	271	8	TriangularDistribution.java	inverseCumulativeProbability	THIS	TriangularDistribution	0	RET	p < ($.c - $.a) / ($.b - $.a)
1184	271	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ < (c - a) / (b - a)
3966	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3966	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3966	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	z.$.length == 0
3966	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3966	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3966	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	z	double[]	0	NoDataException	$.length == 0
3966	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$.length == 0
3966	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$[0].length == 0
3967	158	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3967	158	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3967	158	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	xLen != $.length
3968	161	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3968	161	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3968	161	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	xLen != $.length
3969	164	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3969	164	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3969	164	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3970	167	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdZ.$.length
3970	167	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdZ.length
3970	167	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3971	170	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3971	170	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3971	170	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3972	173	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdZ.$.length
3972	173	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdZ.length
3972	173	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3973	176	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdYdZ.$.length
3973	176	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdYdZ.length
3973	176	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3974	179	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d3FdXdYdZ.$.length
3974	179	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d3FdXdYdZ.length
3974	179	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
12119	196	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
12119	196	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3975	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3975	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3975	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3975	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3976	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3976	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3976	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3976	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3977	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3977	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3977	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3977	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3978	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i].length != yLen
3978	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$].length != yLen
3978	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdZ[i].length != $
3978	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3979	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3979	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3979	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3979	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3980	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i].length != yLen
3980	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$].length != yLen
3980	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdZ[i].length != $
3980	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3981	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i].length != yLen
3981	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$].length != yLen
3981	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdYdZ[i].length != $
3981	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3982	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i].length != yLen
3982	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$].length != yLen
3982	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d3FdXdYdZ[i].length != $
3982	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
12120	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
12120	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3983	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i][j].length != zLen
3983	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	f[i][$].length != zLen
3983	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$][j].length != zLen
3983	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	f[i][j].length != $
3983	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3984	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i][j].length != zLen
3984	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdX[i][$].length != zLen
3984	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$][j].length != zLen
3984	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdX[i][j].length != $
3984	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3985	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i][j].length != zLen
3985	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdY[i][$].length != zLen
3985	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$][j].length != zLen
3985	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdY[i][j].length != $
3985	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3986	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i][j].length != zLen
3986	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdZ[i][$].length != zLen
3986	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$][j].length != zLen
3986	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdZ[i][j].length != $
3986	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3987	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i][j].length != zLen
3987	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdY[i][$].length != zLen
3987	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$][j].length != zLen
3987	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdY[i][j].length != $
3987	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3988	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i][j].length != zLen
3988	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdZ[i][$].length != zLen
3988	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$][j].length != zLen
3988	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdZ[i][j].length != $
3988	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3989	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i][j].length != zLen
3989	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdYdZ[i][$].length != zLen
3989	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$][j].length != zLen
3989	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdYdZ[i][j].length != $
3989	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3990	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != zLen
3990	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d3FdXdYdZ[i][$].length != zLen
3990	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$][j].length != zLen
3990	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != $
3990	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
12121	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	k	int	0	NIL-FOR	$ < lastK
12121	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastK	int	0	NIL-FOR	k < $
3991	309	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
3992	313	8	TricubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
3993	317	8	TricubicSplineInterpolatingFunction.java	value	k	int	0	OutOfRangeException	$ == -1
3994	335	8	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
3994	335	8	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
12122	340	8	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
12122	340	8	TricubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
3995	341	12	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
3995	341	12	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
3995	341	12	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
12123	401	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < sz
12123	401	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	i < $
12124	404	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < sz
12124	404	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	j < $
12125	430	8	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	i	int	0	NIL-FOR	$ < N
12126	431	12	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	j	int	0	NIL-FOR	$ < N
12127	432	16	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	k	int	0	NIL-FOR	$ < N
3996	449	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3996	449	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3997	452	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
3997	452	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
3998	455	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ > 1
3998	455	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ < 0
12128	472	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	NIL-FOR	$ < N
12129	473	12	TricubicSplineInterpolatingFunction.java	value	j	int	0	NIL-FOR	$ < N
12130	474	16	TricubicSplineInterpolatingFunction.java	value	k	int	0	NIL-FOR	$ < N
4042	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	zval.$.length == 0
4042	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	yval.$.length == 0
4042	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	xval.$.length == 0
4042	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	fval.$.length == 0
4042	42	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
4042	42	8	TricubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
4042	42	8	TricubicSplineInterpolator.java	interpolate	zval	double[]	0	NoDataException	$.length == 0
4042	42	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	NoDataException	$.length == 0
4043	45	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
4043	45	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
4043	45	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	xval.length != $.length
12180	62	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12180	62	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
4044	63	12	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
4044	63	12	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
4044	63	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
4044	63	12	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i].length != yLen
12181	67	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
12181	67	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
4045	68	16	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i][j].length != zLen
4045	68	16	TricubicSplineInterpolator.java	interpolate	j	int	0	DimensionMismatchException	fval[i][$].length != zLen
4045	68	16	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$][j].length != zLen
4045	68	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	DimensionMismatchException	fval[i][j].length != $
4045	68	16	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
12182	72	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
12182	72	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
12183	85	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12183	85	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
12184	92	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
12184	92	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
12185	99	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
12185	99	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
12186	107	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
12186	107	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
12187	109	12	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12187	109	12	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
12188	111	16	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
12188	111	16	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
12189	123	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12189	123	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
12190	125	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
12190	125	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
12191	127	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
12191	127	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
12192	137	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
12192	137	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
12193	139	12	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
12193	139	12	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
12194	141	16	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12194	141	16	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
12195	150	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
12195	150	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
12196	153	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
12196	153	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
12197	156	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
12197	156	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
3235	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != standardDeviation.$.length
3235	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != standardDeviation.length
3235	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DimensionMismatchException	mean.length != $.length
11788	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
11788	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
11788	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
3261	64	8	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ > 1.0d
3261	64	8	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ < 0.0d
3262	90	8	UniformCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3262	90	8	UniformCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3263	107	8	UniformCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3263	107	8	UniformCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
11809	120	8	UniformCrossover.java	mate	index	int	0	NIL-FOR	$ < length
11809	120	8	UniformCrossover.java	mate	length	int	0	NIL-FOR	index < $
3264	122	12	UniformCrossover.java	mate	THIS	UniformCrossover	1	DEF	random.nextDouble() < $.ratio
3264	122	12	UniformCrossover.java	mate	random	RandomGenerator	1	DEF	$.nextDouble() < ratio
1195	71	8	UniformIntegerDistribution.java	UniformIntegerDistribution	lower	int	0	NumberIsTooLargeException	$ >= upper
1195	71	8	UniformIntegerDistribution.java	UniformIntegerDistribution	upper	int	0	NumberIsTooLargeException	lower >= $
1196	82	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1196	82	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1196	82	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ > upper
1196	82	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ < lower
1197	90	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1197	90	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ < lower
1198	93	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1198	93	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ > upper
1199	159	8	UniformIntegerDistribution.java	sample	max	int	1	RET	$ <= 0
1200	165	16	UniformIntegerDistribution.java	sample	THIS	UniformIntegerDistribution	0	RET	r >= $.lower
1200	165	16	UniformIntegerDistribution.java	sample	THIS	UniformIntegerDistribution	0	RET	r <= $.upper
1200	165	16	UniformIntegerDistribution.java	sample	r	int	0	RET	$ >= lower
1200	165	16	UniformIntegerDistribution.java	sample	r	int	0	RET	$ <= upper
1201	120	8	UniformRealDistribution.java	UniformRealDistribution	lower	double	0	NumberIsTooLargeException	$ >= upper
1201	120	8	UniformRealDistribution.java	UniformRealDistribution	upper	double	0	NumberIsTooLargeException	lower >= $
1202	132	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x < $.lower
1202	132	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x > $.upper
1202	132	8	UniformRealDistribution.java	density	x	double	0	RET	$ < lower
1202	132	8	UniformRealDistribution.java	density	x	double	0	RET	$ > upper
1203	140	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x <= $.lower
1203	140	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ <= lower
1204	143	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x >= $.upper
1204	143	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ >= upper
1205	152	8	UniformRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1205	152	8	UniformRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
11767	68	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
11767	68	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
11768	75	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
11768	75	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
1909	77	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	optimizer	BaseUnivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1909	77	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	generator	RandomGenerator	0	NullArgumentException	$ == null
1910	81	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1911	135	8	UnivariateMultiStartOptimizer.java	getOptima	THIS	UnivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
10940	158	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
10940	158	8	UnivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1912	174	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
2736	101	12	UnivariateOptimizer.java	parseOptimizationData	THIS	UnivariateOptimizer	0	DEF	$.data instanceof SearchInterval
2737	108	12	UnivariateOptimizer.java	parseOptimizationData	THIS	UnivariateOptimizer	0	DEF	$.data instanceof UnivariateObjectiveFunction
2738	112	12	UnivariateOptimizer.java	parseOptimizationData	THIS	UnivariateOptimizer	0	DEF	$.data instanceof GoalType
4036	88	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NumberIsTooSmallException	xval.$.length < $.extend
4036	88	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NumberIsTooSmallException	$.length < extend
12168	98	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < xval.$.length
12168	98	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xval.length
12168	98	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NIL-FOR	i < $.length
12169	105	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < $.extend
12169	105	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < extend
4101	53	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
4102	78	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
4103	107	8	UnivariateSolverUtils.java	forceSide	THIS	UnivariateSolverUtils	0	RET	allowedSolution == $.AllowedSolution.ANY_SIDE
4103	107	8	UnivariateSolverUtils.java	forceSide	allowedSolution	AllowedSolution	0	RET	$ == AllowedSolution.ANY_SIDE
12224	120	8	UnivariateSolverUtils.java	forceSide	remainingEval	int	0	NIL-WHILE	$ > 0
4104	122	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ >= 0
4104	122	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ <= 0
4104	122	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ <= 0
4104	122	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ >= 0
4105	130	12	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ < fHi
4105	130	12	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo < $
4106	132	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ >= 0
4107	137	19	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ > fHi
4107	137	19	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo > $
4108	139	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ <= 0
4109	151	12	UnivariateSolverUtils.java	forceSide	changeLo	boolean	0	DEF	$
4110	158	12	UnivariateSolverUtils.java	forceSide	changeHi	boolean	0	DEF	$
4111	260	8	UnivariateSolverUtils.java	bracket	function	UnivariateFunction	0	NullArgumentException	$ == null
4112	263	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NotStrictlyPositiveException	$ <= 0
12225	274	8	UnivariateSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
12225	274	8	UnivariateSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
12225	274	8	UnivariateSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
12225	274	8	UnivariateSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
12225	274	8	UnivariateSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
12225	274	8	UnivariateSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
12225	274	8	UnivariateSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
12225	274	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
4113	284	8	UnivariateSolverUtils.java	bracket	fa	double	0	NoBracketingException	$ * fb > 0.0
4113	284	8	UnivariateSolverUtils.java	bracket	fb	double	0	NoBracketingException	fa * $ > 0.0
4114	321	8	UnivariateSolverUtils.java	isBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
4115	353	8	UnivariateSolverUtils.java	verifyInterval	lower	double	0	NumberIsTooLargeException	$ >= upper
4115	353	8	UnivariateSolverUtils.java	verifyInterval	upper	double	0	NumberIsTooLargeException	lower >= $
4116	392	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
4117	396	8	UnivariateSolverUtils.java	verifyBracketing	THIS	UnivariateSolverUtils	0	NoBracketingException	$.isBracketing(function, lower, upper)
4117	396	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NoBracketingException	isBracketing($, lower, upper)
4117	396	8	UnivariateSolverUtils.java	verifyBracketing	lower	double	0	NoBracketingException	isBracketing(function, $, upper)
4117	396	8	UnivariateSolverUtils.java	verifyBracketing	upper	double	0	NoBracketingException	isBracketing(function, lower, $)
11799	160	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
11799	160	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
11799	160	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
11800	178	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
11800	178	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
3245	292	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
3246	309	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
3247	384	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution == null
3247	384	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution.getBinStats().size() == 0
3248	412	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
3249	415	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
3249	415	8	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
3250	419	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
3250	419	12	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
2301	171	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
2302	181	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
2303	183	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
2304	186	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
2305	206	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
2306	229	8	Variance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2307	261	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
2307	261	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2307	261	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
2307	261	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
2308	263	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2309	265	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
2310	321	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights,begin, length)
2310	321	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights,begin, length)
2310	321	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $,begin, length)
2310	321	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights,$, length)
2310	321	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights,begin, $)
2311	323	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2312	325	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
2313	408	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
2313	408	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2313	408	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
2313	408	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
2314	409	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2315	411	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
11264	415	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11264	415	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11264	415	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2316	421	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
2317	511	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights, begin, length)
2317	511	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
2317	511	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
2317	511	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
2317	511	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
2318	512	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2319	514	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
11265	518	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11265	518	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11265	518	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
11266	525	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
11266	525	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
11266	525	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2320	529	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
808	188	8	Vector1D.java	normalize	s	double	0	MathArithmeticException	$ == 0
809	305	8	Vector1D.java	equals	THIS	Vector1D	0	RET	$ == other
809	305	8	Vector1D.java	equals	other	Object	0	RET	this == $
810	309	8	Vector1D.java	equals	other	Object	0	RET	$ instanceof Vector1D
811	311	12	Vector1D.java	equals	rhs	Vector1D	0	RET	$.isNaN()
812	329	8	Vector1D.java	hashCode	THIS	Vector1D	0	RET	$.isNaN()
804	118	8	Vector1DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
805	130	8	Vector1DFormat.java	parse	coordinates	double[]	0	RET	$ == null
868	80	8	Vector2D.java	Vector2D	THIS	Vector2D	0	DimensionMismatchException	v.$.length != 2
868	80	8	Vector2D.java	Vector2D	v	double[]	0	DimensionMismatchException	$.length != 2
869	226	8	Vector2D.java	normalize	s	double	0	MathArithmeticException	$ == 0
870	347	8	Vector2D.java	equals	THIS	Vector2D	0	RET	$ == other
870	347	8	Vector2D.java	equals	other	Object	0	RET	this == $
871	351	8	Vector2D.java	equals	other	Object	0	RET	$ instanceof Vector2D
872	353	12	Vector2D.java	equals	rhs	Vector2D	0	RET	$.isNaN()
873	371	8	Vector2D.java	hashCode	THIS	Vector2D	0	RET	$.isNaN()
822	121	8	Vector2DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
823	133	8	Vector2DFormat.java	parse	coordinates	double[]	0	RET	$ == null
755	108	8	Vector3D.java	Vector3D	THIS	Vector3D	0	DimensionMismatchException	v.$.length != 3
755	108	8	Vector3D.java	Vector3D	v	double[]	0	DimensionMismatchException	$.length != 3
756	298	8	Vector3D.java	normalize	s	double	0	MathArithmeticException	$ == 0
757	322	8	Vector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
758	326	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	FastMath.abs($.x) <= threshold
758	326	8	Vector3D.java	orthogonal	threshold	double	1	RET	FastMath.abs(x) <= $
759	329	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	FastMath.abs($.y) <= threshold
759	329	15	Vector3D.java	orthogonal	threshold	double	0	RET	FastMath.abs(y) <= $
760	352	8	Vector3D.java	angle	normProduct	double	0	MathArithmeticException	$ == 0
761	358	8	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
761	358	8	Vector3D.java	angle	dot	double	0	RET	$ > threshold
761	358	8	Vector3D.java	angle	threshold	double	0	RET	dot < -$
761	358	8	Vector3D.java	angle	threshold	double	0	RET	dot > $
762	361	12	Vector3D.java	angle	dot	double	0	RET	$ >= 0
763	414	8	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
763	414	8	Vector3D.java	equals	other	Object	0	RET	this == $
764	418	8	Vector3D.java	equals	other	Object	0	RET	$ instanceof Vector3D
765	420	12	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
766	438	8	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
668	133	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
669	150	8	Vector3DFormat.java	parse	coordinates	double[]	0	RET	$ == null
9965	205	8	VectorFormat.java	format	THIS	VectorFormat	0	NIL-FOR	i < coordinates.$.length
9965	205	8	VectorFormat.java	format	i	int	0	NIL-FOR	$ < coordinates.length
9965	205	8	VectorFormat.java	format	coordinates	double	0	NIL-FOR	i < $.length
659	206	12	VectorFormat.java	format	i	int	0	DEF	$ > 0
660	250	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
660	250	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
660	250	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
9966	254	8	VectorFormat.java	parseCoordinates	i	int	0	NIL-FOR	$ < dimension
9966	254	8	VectorFormat.java	parseCoordinates	dimension	int	0	NIL-FOR	i < $
661	260	12	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
661	260	12	VectorFormat.java	parseCoordinates	i	int	0	RET	$ > 0
661	260	12	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
661	260	12	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
662	269	12	VectorFormat.java	parseCoordinates	c	Number	0	RET	$ == null
663	283	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
663	283	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
663	283	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
2331	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
2331	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
11271	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
11271	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
11271	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
11272	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
11272	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
2332	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
11273	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
11273	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
11274	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
11274	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
2333	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
2333	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
2334	139	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
2335	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
2335	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
2336	146	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
2336	146	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
2337	149	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
2337	149	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
2338	152	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
2338	152	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
11277	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
11277	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
2353	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
2353	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
11278	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
11278	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
11278	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
11279	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
11279	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
11279	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
2354	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
2354	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
2355	96	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
2356	100	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
2356	100	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
1125	114	8	WeibullDistribution.java	WeibullDistribution	alpha	double	0	NotStrictlyPositiveException	$ <= 0
1126	118	8	WeibullDistribution.java	WeibullDistribution	beta	double	0	NotStrictlyPositiveException	$ <= 0
1127	147	8	WeibullDistribution.java	density	x	double	0	RET	$ < 0
1128	167	8	WeibullDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
1129	184	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
1129	184	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
1130	186	15	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1131	188	16	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
1132	215	8	WeibullDistribution.java	getNumericalMean	THIS	WeibullDistribution	0	DEF	$.numericalMeanIsCalculated
1133	241	8	WeibullDistribution.java	getNumericalVariance	THIS	WeibullDistribution	0	DEF	$.numericalVarianceIsCalculated
3163	56	8	Weight.java	Weight	weight	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
2281	53	8	Weight.java	Weight	weight	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
2436	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2436	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2437	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	x.$.length == 0
2437	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	y.$.length == 0
2437	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2437	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
2438	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	DimensionMismatchException	y.$.length != x.$.length
2438	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	DimensionMismatchException	y.length != $.length
2438	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	DimensionMismatchException	$.length != x.length
11290	102	8	WilcoxonSignedRankTest.java	calculateDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < x.$.length
11290	102	8	WilcoxonSignedRankTest.java	calculateDifferences	i	int	0	NIL-FOR	$ < x.length
11290	102	8	WilcoxonSignedRankTest.java	calculateDifferences	x	double[]	0	NIL-FOR	i < $.length
2439	120	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NullArgumentException	$ == null
2440	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NoDataException	z.$.length == 0
2440	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NoDataException	$.length == 0
11291	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
11291	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	i	int	0	NIL-FOR	$ < z.length
11291	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NIL-FOR	i < $.length
11292	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
11292	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	NIL-FOR	$ < z.length
11292	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	NIL-FOR	i < $.length
2441	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	DEF	z[$] > 0
2441	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	DEF	$[i] > 0
11293	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	NIL-FOR	$ < m
11293	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	m	int	0	NIL-FOR	i < $
11294	219	12	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	NIL-FOR	$ < N
2442	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	DEF	((i >> $) & 1) == 1
2442	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	DEF	(($ >> j) & 1) == 1
2443	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	rankSum	int	0	DEF	$ >= Wmax
2443	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	Wmax	double	0	DEF	rankSum >= $
2444	314	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	0	NumberIsTooLargeException	$
2445	318	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	1	RET	$
1304	77	8	ZipfDistribution.java	ZipfDistribution	numberOfElements	int	0	NotStrictlyPositiveException	$ <= 0
1305	81	8	ZipfDistribution.java	ZipfDistribution	exponent	double	0	NotStrictlyPositiveException	$ <= 0
1306	110	8	ZipfDistribution.java	probability	THIS	ZipfDistribution	0	RET	x > $.numberOfElements
1306	110	8	ZipfDistribution.java	probability	x	int	0	RET	$ > numberOfElements
1306	110	8	ZipfDistribution.java	probability	x	int	0	RET	$ <= 0
1307	119	8	ZipfDistribution.java	cumulativeProbability	x	int	1	RET	$ <= 0
1308	121	15	ZipfDistribution.java	cumulativeProbability	THIS	ZipfDistribution	0	RET	x >= $.numberOfElements
1308	121	15	ZipfDistribution.java	cumulativeProbability	x	int	0	RET	$ >= numberOfElements
1309	139	8	ZipfDistribution.java	getNumericalMean	THIS	ZipfDistribution	0	DEF	$.numericalMeanIsCalculated
1310	173	8	ZipfDistribution.java	getNumericalVariance	THIS	ZipfDistribution	0	DEF	$.numericalVarianceIsCalculated
10064	207	8	ZipfDistribution.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
