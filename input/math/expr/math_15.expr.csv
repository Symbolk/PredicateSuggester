id	line	column	filename	methodname	varname	vartype	else	return	right
548	62	8	AVLTree.java	insert	element	T	0	DEF	$ != null
549	63	12	AVLTree.java	insert	THIS	AVLTree	1	DEF	$.top == null
550	82	8	AVLTree.java	delete	element	T	0	RET	$ != null
19034	83	12	AVLTree.java	delete	node	Node	0	NIL-FOR	$ != null
551	86	16	AVLTree.java	delete	THIS	AVLTree	1	RET	node.$.element == element
551	86	16	AVLTree.java	delete	node	Node	1	RET	$.element == element
551	86	16	AVLTree.java	delete	element	T	1	RET	node.element == $
552	89	23	AVLTree.java	delete	THIS	AVLTree	0	RET	node.$.element.compareTo(element) > 0
552	89	23	AVLTree.java	delete	node	Node	0	RET	$.element.compareTo(element) > 0
552	89	23	AVLTree.java	delete	element	T	0	RET	node.element.compareTo($) > 0
19035	153	8	AVLTree.java	getNotSmaller	node	Node	0	NIL-FOR	$ != null
553	154	12	AVLTree.java	getNotSmaller	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) < 0
553	154	12	AVLTree.java	getNotSmaller	node	Node	1	RET	$.element.compareTo(reference) < 0
553	154	12	AVLTree.java	getNotSmaller	reference	T	1	RET	node.element.compareTo($) < 0
554	155	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.right == null
554	155	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.right == null
555	161	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.left == null
555	161	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.left == null
19036	184	8	AVLTree.java	getNotLarger	node	Node	0	NIL-FOR	$ != null
556	185	12	AVLTree.java	getNotLarger	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) > 0
556	185	12	AVLTree.java	getNotLarger	node	Node	1	RET	$.element.compareTo(reference) > 0
556	185	12	AVLTree.java	getNotLarger	reference	T	1	RET	node.element.compareTo($) > 0
557	186	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.left == null
557	186	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.left == null
558	192	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.right == null
558	192	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.right == null
1376	78	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ <= 0
1377	82	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ <= 0
1378	100	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NullArgumentException	$ == null
1379	103	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1379	103	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$.length == 0
1380	106	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d[0].length == 0
1380	106	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$[0].length == 0
1381	122	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1381	122	8	AbstractFieldMatrix.java	extractField	d	T[]	0	NoDataException	$.length == 0
1382	143	8	AbstractFieldMatrix.java	buildArray	columns	int	0	RET	$ < 0
19488	149	8	AbstractFieldMatrix.java	buildArray	THIS	AbstractFieldMatrix	0	NIL-FOR	i < array.$.length
19488	149	8	AbstractFieldMatrix.java	buildArray	i	int	0	NIL-FOR	$ < array.length
19488	149	8	AbstractFieldMatrix.java	buildArray	array	T[][]	0	NIL-FOR	i < $.length
19489	194	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
19489	194	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
19490	195	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
19490	195	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
19491	212	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
19491	212	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
19492	213	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
19492	213	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
19493	227	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
19493	227	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
19494	228	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
19494	228	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
19495	241	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
19495	241	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
19496	242	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
19496	242	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
19497	260	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
19497	260	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
19498	261	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
19498	261	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
19499	263	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
19499	263	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1383	282	8	AbstractFieldMatrix.java	power	p	int	0	NotPositiveException	$ < 0
1384	286	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NonSquareMatrixException	$.isSquare()
1385	290	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 0
1386	294	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 1
19500	311	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
19500	311	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
19500	311	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1387	312	12	AbstractFieldMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1387	312	12	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
19501	323	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
19501	323	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
19501	323	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
19502	342	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
19502	342	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
19502	342	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
19503	344	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
19503	344	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
19503	344	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
19504	360	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
19504	360	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
19505	361	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
19505	361	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1388	405	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1388	405	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1388	405	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1388	405	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1388	405	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1388	405	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1389	446	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1389	446	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1389	446	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1389	446	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1389	446	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
1389	446	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
19506	455	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
19506	455	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
19506	455	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
19507	457	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
19507	457	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
19507	457	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1390	469	8	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	NullArgumentException	$ == null
1391	473	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1392	478	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
19508	482	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
19508	482	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1393	483	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1393	483	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1393	483	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1393	483	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[r].length != nCols
19509	493	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
19509	493	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
19510	494	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
19510	494	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
19511	505	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
19511	505	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1394	518	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1394	518	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1394	518	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
19512	524	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
19512	524	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
19513	537	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
19513	537	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1395	550	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1395	550	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1395	550	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
19514	556	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
19514	556	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1396	573	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1396	573	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nCols
19515	577	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
19515	577	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1397	595	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1397	595	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nRows
19516	599	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
19516	599	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
19517	610	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
19517	610	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1398	623	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1398	623	8	AbstractFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1398	623	8	AbstractFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
19518	626	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
19518	626	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
19519	637	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
19519	637	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1399	650	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1399	650	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1399	650	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
19520	653	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
19520	653	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1400	701	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1400	701	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
19521	705	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
19521	705	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1401	716	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1401	716	8	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1401	716	8	AbstractFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
19522	721	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
19522	721	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
19523	723	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
19523	723	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1402	740	12	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1402	740	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nCols
19524	745	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
19524	745	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
19525	747	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
19525	747	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1403	762	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1403	762	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1403	762	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
19526	767	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
19526	767	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
19527	769	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
19527	769	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1404	786	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1404	786	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nRows
19528	791	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
19528	791	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
19529	793	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
19529	793	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
19530	808	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
19530	808	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
19531	809	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
19531	809	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
19532	823	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
19532	823	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
19533	824	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
19533	824	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
19534	839	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
19534	839	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
19535	840	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
19535	840	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
19536	857	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
19536	857	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
19537	858	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
19537	858	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
19538	870	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
19538	870	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
19539	871	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
19539	871	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
19540	885	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
19540	885	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
19541	886	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
19541	886	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
19542	901	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
19542	901	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
19543	902	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
19543	902	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
19544	919	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
19544	919	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
19545	920	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
19545	920	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
19546	966	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
19546	966	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1405	967	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
19547	971	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
19547	971	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1406	972	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
1407	994	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
1407	994	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
1408	997	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix<?> == false
1409	1003	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getColumnDimension() != nCols
1409	1003	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getRowDimension() != nRows
1409	1003	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1409	1003	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
19548	1006	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
19548	1006	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
19549	1007	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
19549	1007	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1410	1008	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
1410	1008	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
1410	1008	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
1410	1008	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
19550	1028	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
19550	1028	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
19551	1029	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
19551	1029	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1411	1043	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1411	1043	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= getRowDimension()
1411	1043	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1412	1057	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1412	1057	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= getColumnDimension()
1412	1057	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1413	1080	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1413	1080	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1414	1087	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1414	1087	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1415	1105	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1415	1105	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1416	1109	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedRows.$.length == 0
1416	1109	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedColumns.$.length == 0
1416	1109	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1416	1109	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1417	1131	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1417	1131	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1417	1131	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1417	1131	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1418	1147	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1418	1147	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1418	1147	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1418	1147	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1419	1163	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DimensionMismatchException	$.getColumnDimension() != m.getRowDimension()
1419	1163	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DimensionMismatchException	getColumnDimension() != $.getRowDimension()
937	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	NullArgumentException	$ == null
938	132	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	NullArgumentException	$ == null
939	162	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
939	162	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
19070	164	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
19070	164	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
19070	164	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
940	169	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
940	169	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
988	75	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	NumberIsTooLargeException	x1 < $
988	75	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	NumberIsTooLargeException	$ < x0
989	94	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
989	94	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
990	99	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
991	102	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	1	RET	$ == Integer.MIN_VALUE
992	103	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	THIS	AbstractIntegerDistribution	0	RET	$.checkedCumulativeProbability(lower) >= p
992	103	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	RET	checkedCumulativeProbability($) >= p
992	103	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	checkedCumulativeProbability(lower) >= $
993	112	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
994	122	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	0	DEF	$
995	125	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ > lower
995	125	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	DEF	tmp > $
996	130	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ < upper
996	130	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	upper	int	0	DEF	tmp < $
19072	151	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	NIL-WHILE	$ + 1 < upper
19072	151	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	NIL-WHILE	lower + 1 < $
997	153	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ < lower
997	153	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ > upper
997	153	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	DEF	xm < $
997	153	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	DEF	xm > $
998	163	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	pm	double	1	DEF	$ >= p
998	163	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	p	double	1	DEF	pm >= $
999	196	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
19073	201	8	AbstractIntegerDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
19073	201	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1000	222	8	AbstractIntegerDistribution.java	checkedCumulativeProbability	result	double	0	MathInternalError	Double.isNaN($)
2876	215	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y0.$.length != equations.getDimension()
2876	215	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y0.length != $.getDimension()
2876	215	8	AbstractIntegrator.java	integrate	y0	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
2877	218	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y.$.length != equations.getDimension()
2877	218	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y.length != $.getDimension()
2877	218	8	AbstractIntegrator.java	integrate	y	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
2878	304	12	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.statesInitialized
2879	323	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.state.evaluateStep(interpolator)
2879	323	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	state.evaluateStep($)
20649	329	12	AbstractIntegrator.java	acceptStep	occuringEvents	SortedSet<EventState>	0	NIL-WHILE	$.isEmpty()
2880	352	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	RET	$.isLastStep
2881	361	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	RET	$.reset(eventT, eventY)
2881	361	16	AbstractIntegrator.java	acceptStep	eventT	double	0	RET	currentEvent.reset($, eventY)
2881	361	16	AbstractIntegrator.java	acceptStep	eventY	double[]	0	RET	currentEvent.reset(eventT, $)
2882	379	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	DEF	$.evaluateStep(interpolator)
2882	379	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	currentEvent.evaluateStep($)
2883	416	8	AbstractIntegrator.java	sanityChecks	threshold	double	0	NumberIsTooSmallException	dt <= $
2883	416	8	AbstractIntegrator.java	sanityChecks	dt	double	0	NumberIsTooSmallException	$ <= threshold
19994	169	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	i	int	0	NIL-FOR	$ < nC
19994	169	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nC	int	0	NIL-FOR	i < $
1822	174	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	dsValue.$.length != nR
1822	174	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	dsValue	DerivativeStructure[]	0	DimensionMismatchException	$.length != nR
1822	174	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nR	int	0	DimensionMismatchException	dsValue.length != $
19995	178	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	i	int	0	NIL-FOR	$ < nR
19995	178	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nR	int	0	NIL-FOR	i < $
19996	180	12	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	j	int	0	NIL-FOR	$ < nC
19996	180	12	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nC	int	0	NIL-FOR	j < $
1823	367	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NumberIsTooSmallException	$.rows <= $.cols
19997	374	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
19997	374	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
19997	374	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
19998	399	8	AbstractLeastSquaresOptimizer.java	computeSigma	i	int	0	NIL-FOR	$ < nC
19998	399	8	AbstractLeastSquaresOptimizer.java	computeSigma	nC	int	0	NIL-FOR	i < $
1824	535	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	objectiveValue.$.length != target.$.length
1824	535	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	DimensionMismatchException	objectiveValue.length != $.length
1824	535	8	AbstractLeastSquaresOptimizer.java	computeResiduals	objectiveValue	double[]	0	DimensionMismatchException	$.length != target.length
19999	541	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < target.$.length
19999	541	8	AbstractLeastSquaresOptimizer.java	computeResiduals	i	int	0	NIL-FOR	$ < target.length
19999	541	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	NIL-FOR	i < $.length
1749	129	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxCountExceededException	++$.iterations > $.maxIterations
2469	116	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	NullArgumentException	$ == null
2470	119	8	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	data.$.length != nobs * (nvars + 1)
2470	119	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DimensionMismatchException	$.length != nobs * (nvars + 1)
2470	119	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DimensionMismatchException	data.length != $ * (nvars + 1)
2470	119	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DimensionMismatchException	data.length != nobs * ($ + 1)
2471	122	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NumberIsTooSmallException	$ <= nvars
2471	122	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NumberIsTooSmallException	nobs <= $
20398	129	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
20398	129	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
2472	131	12	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	$.noIntercept
20399	134	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < cols
20399	134	12	AbstractMultipleLinearRegression.java	newSampleData	cols	int	0	NIL-FOR	j < $
2473	150	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NullArgumentException	$ == null
2474	153	8	AbstractMultipleLinearRegression.java	newYSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	y.$.length == 0
2474	153	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NoDataException	$.length == 0
2475	185	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NullArgumentException	$ == null
2476	188	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2476	188	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NoDataException	$.length == 0
2477	191	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	$.noIntercept
20400	196	12	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NIL-FOR	i < x.$.length
20400	196	12	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	NIL-FOR	$ < x.length
20400	196	12	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NIL-FOR	i < $.length
2478	197	16	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x[i].length != nVars
2478	197	16	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	DimensionMismatchException	x[$].length != nVars
2478	197	16	AbstractMultipleLinearRegression.java	newXSampleData	nVars	int	0	DimensionMismatchException	x[i].length != $
2478	197	16	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DimensionMismatchException	$[i].length != nVars
2479	226	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NullArgumentException	$ == null
2479	226	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	NullArgumentException	$ == null
2480	229	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != y.$.length
2480	229	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DimensionMismatchException	$.length != y.length
2480	229	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DimensionMismatchException	x.length != $.length
2481	232	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2481	232	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NoDataException	$.length == 0
2482	235	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	MathIllegalArgumentException	x[0].length + 1 > x.$.length
2482	235	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	MathIllegalArgumentException	$[0].length + 1 > $.length
2483	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != covariance.$.length
2483	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DimensionMismatchException	$.length != covariance.length
2483	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DimensionMismatchException	x.length != $.length
2484	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length != covariance[0].length
2484	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length > 0
2484	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length != $[0].length
2484	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length > 0
20401	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
20401	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
1110	61	8	AbstractMultivariateRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
19094	66	8	AbstractMultivariateRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
19094	66	8	AbstractMultivariateRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
2923	59	12	AbstractParameterizable.java	isSupported	THIS	AbstractParameterizable	0	RET	$.supportedName.equals(name)
2923	59	12	AbstractParameterizable.java	isSupported	name	String	0	RET	supportedName.equals($)
2924	73	8	AbstractParameterizable.java	complainIfNotSupported	THIS	AbstractParameterizable	0	UnknownParameterException	$.isSupported(name)
2924	73	8	AbstractParameterizable.java	complainIfNotSupported	name	String	0	UnknownParameterException	isSupported($)
20428	108	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
20428	108	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
20428	108	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
20429	110	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
2556	111	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
2557	115	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
2557	115	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
2557	115	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
2558	157	8	AbstractRandomGenerator.java	nextInt	n	int	0	NotStrictlyPositiveException	$ <= 0
2559	253	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
20430	261	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
2560	266	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
1139	106	8	AbstractRealDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1139	106	8	AbstractRealDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
1140	151	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1140	151	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1141	156	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
1142	161	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
1143	171	8	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	DEF	$ == Double.NEGATIVE_INFINITY
1144	172	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
19108	176	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(lowerBound) >= p
19108	176	16	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	cumulativeProbability($) >= p
19108	176	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(lowerBound) >= $
1145	182	8	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	DEF	$ == Double.POSITIVE_INFINITY
1146	183	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
19109	187	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(upperBound) < p
19109	187	16	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	cumulativeProbability($) < p
19109	187	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(upperBound) < $
1147	205	8	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.isSupportConnected()
1148	208	12	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	x - dx >= $.getSupportLowerBound()
1148	208	12	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	x - $ >= getSupportLowerBound()
1148	208	12	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	$ - dx >= getSupportLowerBound()
1149	210	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.cumulativeProbability(x - dx) == px
1149	210	16	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	0	RET	cumulativeProbability(x - dx) == $
1149	210	16	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	cumulativeProbability(x - $) == px
1149	210	16	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	cumulativeProbability($ - dx) == px
19110	212	20	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	NIL-WHILE	upperBound - lowerBound > $
19110	212	20	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	upperBound - $ > dx
19110	212	20	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	$ - lowerBound > dx
1150	214	24	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	1	DEF	$.cumulativeProbability(midPoint) < px
1150	214	24	AbstractRealDistribution.java	inverseCumulativeProbability	midPoint	double	1	DEF	cumulativeProbability($) < px
1150	214	24	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	1	DEF	cumulativeProbability(midPoint) < $
1151	263	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
19111	268	8	AbstractRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
19111	268	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1260	68	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ < 1
1261	71	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ < 1
19313	84	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
19313	84	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
19314	85	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
19314	85	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
19315	101	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
19315	101	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
19316	102	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
19316	102	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
19317	115	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
19317	115	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
19318	116	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
19318	116	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
19319	129	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
19319	129	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
19320	130	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
19320	130	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
19321	147	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
19321	147	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
19322	148	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
19322	148	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
19323	150	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
19323	150	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1262	169	8	AbstractRealMatrix.java	power	p	int	0	NotPositiveException	$ < 0
1263	173	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NonSquareMatrixException	$.isSquare()
1264	177	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 0
1265	181	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 1
19324	198	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
19324	198	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
19324	198	8	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1266	199	12	AbstractRealMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1266	199	12	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
1267	204	16	AbstractRealMatrix.java	power	maxI	int	0	DEF	$ == -1
19325	213	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ <= maxI
19325	213	8	AbstractRealMatrix.java	power	maxI	int	0	NIL-FOR	i <= $
19326	230	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
19326	230	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
19326	230	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
19327	232	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
19327	232	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
19327	232	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
19328	312	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
19328	312	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
19329	313	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
19329	313	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1268	351	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1268	351	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1268	351	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1268	351	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1268	351	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1268	351	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1269	388	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1269	388	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1269	388	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1269	388	8	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1269	388	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
1269	388	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
19330	394	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
19330	394	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
19330	394	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
19331	396	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
19331	396	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
19331	396	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1270	408	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1271	413	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
19332	417	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
19332	417	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1272	418	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1272	418	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1272	418	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1272	418	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[r].length != nCols
19333	428	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
19333	428	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
19334	429	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
19334	429	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
19335	440	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
19335	440	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1273	452	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1273	452	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1273	452	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
19336	458	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
19336	458	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
19337	469	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
19337	469	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1274	481	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1274	481	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1274	481	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
19338	487	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
19338	487	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1275	503	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1275	503	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nCols
19339	507	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
19339	507	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1276	523	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1276	523	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nRows
19340	527	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
19340	527	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
19341	537	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
19341	537	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1277	549	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1277	549	8	AbstractRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1277	549	8	AbstractRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
19342	552	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
19342	552	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
19343	562	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
19343	562	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1278	574	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1278	574	8	AbstractRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1278	574	8	AbstractRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
19344	577	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
19344	577	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1279	639	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1279	639	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
19345	643	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
19345	643	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1280	654	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1280	654	8	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1280	654	8	AbstractRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
19346	659	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
19346	659	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
19347	661	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
19347	661	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1281	679	12	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1281	679	12	AbstractRealMatrix.java	operate	v	RealVector	0	DimensionMismatchException	$.getDimension() != nCols
19348	684	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
19348	684	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
19349	686	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
19349	686	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1282	701	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1282	701	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1282	701	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
19350	706	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
19350	706	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
19351	708	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
19351	708	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1283	725	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1283	725	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DimensionMismatchException	$.getDimension() != nRows
19352	730	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
19352	730	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
19353	732	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
19353	732	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
19354	747	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
19354	747	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
19355	748	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
19355	748	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
19356	762	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
19356	762	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
19357	763	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
19357	763	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
19358	778	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
19358	778	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
19359	779	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
19359	779	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
19360	796	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
19360	796	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
19361	797	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
19361	797	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
19362	809	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
19362	809	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
19363	810	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
19363	810	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
19364	824	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
19364	824	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
19365	825	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
19365	825	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
19366	840	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
19366	840	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
19367	841	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
19367	841	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
19368	858	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
19368	858	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
19369	859	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
19369	859	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
1284	918	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
1284	918	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
1285	921	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
1286	927	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
1286	927	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
1286	927	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1286	927	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
19370	930	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
19370	930	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
19371	931	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
19371	931	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1287	932	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
1287	932	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
1287	932	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
1287	932	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
19372	952	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
19372	952	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
19373	953	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
19373	953	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
586	92	8	AbstractRegion.java	AbstractRegion	boundary	Collection<SubHyperplane<S>>	1	DEF	$.size() == 0
587	143	8	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	1	DEF	hyperplanes.$.length == 0
587	143	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$.length == 0
587	143	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$ == null
588	154	16	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	0	DEF	node.insertCut($.hyperplane)
588	154	16	AbstractRegion.java	AbstractRegion	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
19043	181	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
19043	181	8	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	NIL-WHILE	$ == null
589	183	12	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	DEF	node.insertCut($.copySelf())
589	183	12	AbstractRegion.java	insertCuts	node	BSPTree<S>	0	DEF	$.insertCut(inserted.copySelf())
590	188	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	RET	$.hasNext()
19044	195	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
591	237	8	AbstractRegion.java	isEmpty	node	BSPTree<S>	0	RET	$.getCut() == null
592	266	8	AbstractRegion.java	checkPoint	cell	BSPTree<S>	0	RET	$.getCut() == null
593	280	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getAttribute() == null
593	280	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getCut() != null
593	280	8	AbstractRegion.java	getTree	includeBoundaryAttributes	boolean	0	DEF	$
594	412	8	AbstractRegion.java	getSize	THIS	AbstractRegion	0	DEF	$.barycenter == null
595	427	8	AbstractRegion.java	getBarycenter	THIS	AbstractRegion	0	DEF	$.barycenter == null
596	471	8	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	RET	$.getCut() == null
597	472	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getAttribute()
598	484	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
598	484	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
598	484	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
599	485	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
599	485	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
600	489	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
600	489	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
601	493	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
601	493	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
602	499	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
602	499	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
602	499	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
603	500	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
603	500	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
604	504	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
604	504	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
605	508	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
605	508	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
606	520	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
606	520	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
607	526	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())
607	526	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().getHyperplane().sameOrientationAs($.getHyperplane())
608	527	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
608	527	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
609	530	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
609	530	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
610	534	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
610	534	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
611	537	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
611	537	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
612	602	8	AbstractRegion.java	recurseIntersection	node	BSPTree<S>	0	RET	$.getCut() == null
613	616	12	AbstractRegion.java	recurseIntersection	plus	SubHyperplane<S>	1	RET	$ == null
614	618	19	AbstractRegion.java	recurseIntersection	minus	SubHyperplane<S>	1	RET	$ == null
615	652	8	AbstractRegion.java	recurseTransform	node	BSPTree<S>	0	RET	$.getCut() == null
616	659	8	AbstractRegion.java	recurseTransform	attribute	BoundaryAttribute<S>	0	DEF	$ != null
1836	98	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
1837	101	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
1837	101	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
20015	109	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
20015	109	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
20016	111	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
20016	111	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
1838	112	16	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
1838	112	16	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
1839	133	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
1839	133	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
20017	145	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
20017	145	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
20017	145	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
1840	149	12	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
1840	149	12	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
20018	152	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
20018	152	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
20019	155	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
20019	155	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1841	156	20	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
1841	156	20	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
1841	156	20	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
1842	161	16	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
1843	168	12	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
20020	170	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
20020	170	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1844	217	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
1844	217	8	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
20021	226	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
20021	226	8	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
20022	229	12	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
20022	229	12	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
20023	247	8	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
20023	247	8	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
1845	250	12	AbstractSimplex.java	evaluate	vertex	PointValuePair	0	DEF	Double.isNaN($.getValue())
20024	268	8	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
20024	268	8	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
1846	269	12	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
1846	269	12	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
1846	269	12	AbstractSimplex.java	replaceWorstPoint	pointValuePair	PointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
1846	269	12	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<PointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
1847	296	8	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1847	296	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
1847	296	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1848	311	8	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1848	311	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
1848	311	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1849	325	8	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
1849	325	8	AbstractSimplex.java	setPoints	points	PointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
20025	341	8	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
20025	341	8	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
2740	181	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState == null
2740	181	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState == null
20515	194	6	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.interpolatedSecondaryState.$.length
20515	194	6	AbstractStepInterpolator.java	AbstractStepInterpolator	i	int	0	NIL-FOR	$ < interpolatedSecondaryState.length
2741	213	6	AbstractStepInterpolator.java	allocateInterpolatedArrays	dimension	int	1	DEF	$ < 0
2742	225	10	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	1	DEF	$.secondaryMappers == null
20516	231	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
20516	231	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	i	int	0	NIL-FOR	$ < secondaryMappers.length
2743	407	6	AbstractStepInterpolator.java	evaluateCompleteInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
2744	489	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
2745	520	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
2746	537	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
20517	538	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
20517	538	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
20518	582	4	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
20518	582	4	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < secondaryMappers.length
2747	587	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
20519	591	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
20519	591	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
2117	61	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2118	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
2118	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2118	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
2118	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
2119	131	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	NullArgumentException	$ == null
2120	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
2120	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
2120	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
2120	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
20233	152	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
20233	152	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
2121	167	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
2121	167	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
2122	170	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
642	126	8	AbstractSubHyperplane.java	recurseTransform	node	BSPTree<T>	0	RET	$.getCut() == null
643	133	8	AbstractSubHyperplane.java	recurseTransform	attribute	BoundaryAttribute<T>	0	DEF	$ != null
2241	85	8	AbstractUnivariateStatistic.java	setData	values	double[]	0	NullArgumentException	$ == null
2242	89	8	AbstractUnivariateStatistic.java	setData	begin	int	0	NotPositiveException	$ < 0
2243	93	8	AbstractUnivariateStatistic.java	setData	length	int	0	NotPositiveException	$ < 0
2244	97	8	AbstractUnivariateStatistic.java	setData	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
2244	97	8	AbstractUnivariateStatistic.java	setData	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
2244	97	8	AbstractUnivariateStatistic.java	setData	begin	int	0	NumberIsTooLargeException	$ + length > values.length
2244	97	8	AbstractUnivariateStatistic.java	setData	length	int	0	NumberIsTooLargeException	begin + $ > values.length
2245	186	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
2246	190	8	AbstractUnivariateStatistic.java	test	begin	int	0	NotPositiveException	$ < 0
2247	194	8	AbstractUnivariateStatistic.java	test	length	int	0	NotPositiveException	$ < 0
2248	198	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
2248	198	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
2248	198	8	AbstractUnivariateStatistic.java	test	begin	int	0	NumberIsTooLargeException	$ + length > values.length
2248	198	8	AbstractUnivariateStatistic.java	test	length	int	0	NumberIsTooLargeException	begin + $ > values.length
2249	203	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
2249	203	8	AbstractUnivariateStatistic.java	test	allowEmpty	boolean	0	RET	$
2250	284	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
2250	284	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	NullArgumentException	$ == null
2251	288	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DimensionMismatchException	weights.$.length != values.$.length
2251	288	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DimensionMismatchException	weights.length != $.length
2251	288	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DimensionMismatchException	$.length != values.length
20264	293	8	AbstractUnivariateStatistic.java	test	i	int	0	NIL-FOR	$ < begin + length
20264	293	8	AbstractUnivariateStatistic.java	test	begin	int	0	NIL-FOR	i < $ + length
20264	293	8	AbstractUnivariateStatistic.java	test	length	int	0	NIL-FOR	i < begin + $
2252	294	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isNaN(weights[$])
2252	294	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isNaN($[i])
2253	297	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isInfinite(weights[$])
2253	297	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
2254	300	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	weights[$] < 0
2254	300	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	$[i] < 0
2255	303	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] > 0.0
2255	303	12	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
2255	303	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] > 0.0
2256	308	8	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	MathIllegalArgumentException	$
20419	111	8	AbstractWell.java	AbstractWell	j	int	0	NIL-FOR	$ < r
20419	111	8	AbstractWell.java	AbstractWell	r	int	0	NIL-FOR	j < $
2548	154	8	AbstractWell.java	setSeed	seed	int[]	0	RET	$ == null
2549	161	8	AbstractWell.java	setSeed	THIS	AbstractWell	0	DEF	seed.$.length < $.v.$.length
2549	161	8	AbstractWell.java	setSeed	seed	int[]	0	DEF	$.length < v.length
20420	162	12	AbstractWell.java	setSeed	THIS	AbstractWell	0	NIL-FOR	i < $.v.$.length
20420	162	12	AbstractWell.java	setSeed	i	int	0	NIL-FOR	$ < v.length
20575	226	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-DOWHILE	$.isLastStep
20576	229	12	AdamsBashforthIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
20577	235	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.mainSetDimension
20577	235	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < mainSetDimension
2824	245	16	AdamsBashforthIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
20578	265	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
20578	265	12	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
20578	265	12	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2825	279	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.isLastStep
2826	284	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.resetOccurred
2827	300	16	AdamsBashforthIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
20571	243	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-DOWHILE	$.isLastStep
20572	246	12	AdamsMoultonIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
20573	259	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
20573	259	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
20573	259	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2820	268	16	AdamsMoultonIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
20574	282	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
20574	282	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
20574	282	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2821	297	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.isLastStep
2822	302	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.resetOccurred
2823	319	16	AdamsMoultonIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
20636	167	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
20637	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
20637	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
2874	193	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
20638	227	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
20638	227	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
20638	227	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
20639	232	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
20639	232	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
20639	232	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
20640	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < y.$.length
20640	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < y.length
20640	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	y	double[][]	0	NIL-FOR	i < $.length
20641	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < aI.$.length
20641	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < aI.length
20641	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	aI	double[]	0	NIL-FOR	j < $.length
20642	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < yI.$.length
20642	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < yI.length
20642	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	yI	double[]	0	NIL-FOR	j < $.length
20643	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
20643	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
20643	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
20644	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
20644	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
20644	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
2859	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
2859	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
2859	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
2859	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
2860	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance != null
2860	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance.$.length != $.mainSetDimension
2861	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance != null
2861	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance.$.length != $.mainSetDimension
2862	253	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
20624	263	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
20624	263	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
20624	263	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2863	272	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
20625	277	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
20625	277	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
20625	277	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
20626	284	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
20626	284	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
20626	284	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2864	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
2864	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
2865	301	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
2865	301	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
2866	304	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
2867	325	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	NumberIsTooSmallException	FastMath.abs(h) < $.minStep
2867	325	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	NumberIsTooSmallException	FastMath.abs($) < minStep
2868	326	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
2869	334	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
2869	334	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
2870	336	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
2870	336	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
2259	307	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
2260	311	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
20265	321	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
2261	323	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
2261	323	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
2261	323	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
2262	326	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
2262	326	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
2262	326	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
2263	338	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
2264	340	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
2706	43	8	ArgUtils.java	flatten	array	Object[]	0	DEF	$ != null
2707	45	16	ArgUtils.java	flatten	THIS	ArgUtils	1	DEF	$.o instanceof Object[]
11	67	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
11	67	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
12	116	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	$ == k
12	116	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	n == $
12	116	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
13	119	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
13	119	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
13	119	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
14	123	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
14	123	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
15	133	8	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
18953	136	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
18953	136	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
16	140	15	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
18954	144	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
18954	144	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
18955	160	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
18955	160	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
17	197	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
17	197	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
17	197	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
18	200	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
18	200	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
18	200	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
19	203	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
19	203	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
20	206	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
18956	211	8	ArithmeticUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
18956	211	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
21	242	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
21	242	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
21	242	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
22	245	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
22	245	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
22	245	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
23	253	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
24	261	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
25	265	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
25	265	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
18957	275	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
18957	275	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
18958	280	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
18958	280	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
26	312	8	ArithmeticUtils.java	factorial	n	int	0	NotPositiveException	$ < 0
27	316	8	ArithmeticUtils.java	factorial	n	int	0	MathArithmeticException	$ > 20
28	336	8	ArithmeticUtils.java	factorialDouble	n	int	0	NotPositiveException	$ < 0
29	340	8	ArithmeticUtils.java	factorialDouble	n	int	0	RET	$ < 21
30	354	8	ArithmeticUtils.java	factorialLog	n	int	0	NotPositiveException	$ < 0
31	358	8	ArithmeticUtils.java	factorialLog	n	int	0	RET	$ < 21
18959	362	8	ArithmeticUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
18959	362	8	ArithmeticUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
32	401	8	ArithmeticUtils.java	gcd	a	int	0	MathArithmeticException:RET	$ == 0
32	401	8	ArithmeticUtils.java	gcd	b	int	0	MathArithmeticException:RET	$ == 0
33	403	12	ArithmeticUtils.java	gcd	a	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
33	403	12	ArithmeticUtils.java	gcd	b	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
34	414	8	ArithmeticUtils.java	gcd	a	int	0	DEF	$ < 0
35	415	12	ArithmeticUtils.java	gcd	a	int	1	DEF	Integer.MIN_VALUE == $
36	422	8	ArithmeticUtils.java	gcd	b	int	0	DEF	$ < 0
37	423	12	ArithmeticUtils.java	gcd	b	int	1	DEF	Integer.MIN_VALUE == $
38	430	8	ArithmeticUtils.java	gcd	useLong	boolean	0	MathArithmeticException:RET	$
39	431	12	ArithmeticUtils.java	gcd	al	long	0	MathArithmeticException	$ == bl
39	431	12	ArithmeticUtils.java	gcd	bl	long	0	MathArithmeticException	al == $
40	438	12	ArithmeticUtils.java	gcd	al	long	0	MathArithmeticException:RET	$ == 0
41	439	16	ArithmeticUtils.java	gcd	bl	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
42	477	8	ArithmeticUtils.java	gcdPositive	a	int	1	RET	$ == 0
43	480	13	ArithmeticUtils.java	gcdPositive	b	int	0	RET	$ == 0
18960	497	8	ArithmeticUtils.java	gcdPositive	a	int	0	NIL-WHILE	$ != b
18960	497	8	ArithmeticUtils.java	gcdPositive	b	int	0	NIL-WHILE	a != $
44	542	8	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException:RET	$ == 0
44	542	8	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException:RET	$ == 0
45	543	12	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException	$ == Long.MIN_VALUE
45	543	12	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException	$ == Long.MIN_VALUE
46	554	8	ArithmeticUtils.java	gcd	u	long	0	DEF	$ > 0
47	557	8	ArithmeticUtils.java	gcd	v	long	0	DEF	$ > 0
18961	562	8	ArithmeticUtils.java	gcd	u	long	0	NIL-WHILE	($ & 1) == 0
18961	562	8	ArithmeticUtils.java	gcd	v	long	0	NIL-WHILE	($ & 1) == 0
18961	562	8	ArithmeticUtils.java	gcd	k	int	0	NIL-WHILE	$ < 63
48	568	8	ArithmeticUtils.java	gcd	k	int	0	MathArithmeticException	$ == 63
18962	577	8	ArithmeticUtils.java	gcd	t	long	0	NIL-DOWHILE	$ != 0
18963	580	12	ArithmeticUtils.java	gcd	t	long	0	NIL-WHILE	($ & 1) == 0
49	584	12	ArithmeticUtils.java	gcd	t	long	1	DEF	$ > 0
50	620	8	ArithmeticUtils.java	lcm	a	int	0	RET	$ == 0
50	620	8	ArithmeticUtils.java	lcm	b	int	0	RET	$ == 0
51	624	8	ArithmeticUtils.java	lcm	lcm	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
52	654	8	ArithmeticUtils.java	lcm	a	long	0	RET	$ == 0
52	654	8	ArithmeticUtils.java	lcm	b	long	0	RET	$ == 0
53	658	8	ArithmeticUtils.java	lcm	lcm	long	0	MathArithmeticException	$ == Long.MIN_VALUE
54	677	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
54	677	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
55	695	8	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ > b
55	695	8	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a > $
56	699	12	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ < 0
57	700	16	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ < 0
58	702	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
58	702	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
59	707	23	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ > 0
60	709	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
60	709	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
61	719	19	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ > 0
62	724	16	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
62	724	16	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
63	749	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
63	749	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
64	767	8	ArithmeticUtils.java	subAndCheck	b	long	1	MathArithmeticException	$ == Long.MIN_VALUE
65	768	12	ArithmeticUtils.java	subAndCheck	a	long	1	DEF	$ < 0
66	789	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
18964	795	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
67	796	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
68	815	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
18965	821	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
69	822	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
70	841	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
18966	847	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
71	848	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
72	867	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
18967	873	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
73	874	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
74	893	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
75	909	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
18968	915	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
76	916	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
77	936	8	ArithmeticUtils.java	pow	e	BigInteger	0	NotPositiveException	$.compareTo(BigInteger.ZERO) < 0
18969	942	8	ArithmeticUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
78	943	12	ArithmeticUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
79	973	8	ArithmeticUtils.java	stirlingS2	k	int	0	NotPositiveException	$ < 0
80	976	8	ArithmeticUtils.java	stirlingS2	n	int	0	NumberIsTooLargeException	k > $
80	976	8	ArithmeticUtils.java	stirlingS2	k	int	0	NumberIsTooLargeException	$ > n
81	982	8	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	0	DEF	$ == null
18970	991	12	ArithmeticUtils.java	stirlingS2	THIS	ArithmeticUtils	0	NIL-FOR	i < stirlingS2.$.length
18970	991	12	ArithmeticUtils.java	stirlingS2	i	int	0	NIL-FOR	$ < stirlingS2.length
18970	991	12	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	0	NIL-FOR	i < $.length
18971	996	16	ArithmeticUtils.java	stirlingS2	j	int	0	NIL-FOR	$ < i
18971	996	16	ArithmeticUtils.java	stirlingS2	i	int	0	NIL-FOR	j < $
82	1006	8	ArithmeticUtils.java	stirlingS2	THIS	ArithmeticUtils	1	RET	n < stirlingS2.$.length
82	1006	8	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	1	RET	n < $.length
82	1006	8	ArithmeticUtils.java	stirlingS2	n	int	1	RET	$ < stirlingS2.length
83	1011	12	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 0
84	1013	19	ArithmeticUtils.java	stirlingS2	n	int	1	RET	k == $
84	1013	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == n
84	1013	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 1
85	1015	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 2
86	1017	19	ArithmeticUtils.java	stirlingS2	n	int	1	RET	k == $ - 1
86	1017	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == n - 1
18972	1023	16	ArithmeticUtils.java	stirlingS2	j	int	0	NIL-FOR	$ <= k
18972	1023	16	ArithmeticUtils.java	stirlingS2	k	int	0	NIL-FOR	j <= $
87	1026	20	ArithmeticUtils.java	stirlingS2	sum	long	0	MathArithmeticException	$ < 0
88	1051	8	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ > b
88	1051	8	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a > $
89	1057	12	ArithmeticUtils.java	addAndCheck	a	long	1	MathArithmeticException	$ < 0
90	1058	16	ArithmeticUtils.java	addAndCheck	b	long	1	MathArithmeticException	$ < 0
91	1060	20	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
91	1060	20	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
92	1074	16	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
92	1074	16	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
93	1093	8	ArithmeticUtils.java	checkBinomial	n	int	0	NumberIsTooLargeException	$ < k
93	1093	8	ArithmeticUtils.java	checkBinomial	k	int	0	NumberIsTooLargeException	n < $
94	1097	8	ArithmeticUtils.java	checkBinomial	n	int	0	NotPositiveException	$ < 0
1359	156	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
1360	161	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NoDataException	$ == 0
1361	165	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
19451	168	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
19451	168	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
1362	169	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	d[r].length != nCols
1362	169	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1362	169	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1362	169	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DimensionMismatchException	$[r].length != nCols
19452	201	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
19452	201	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
19453	236	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
19453	236	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
19454	240	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
19454	240	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
19455	264	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
19455	264	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
19456	268	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
19456	268	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
19457	294	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
19457	294	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
19458	297	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
19458	297	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
19459	299	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
19459	299	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1363	332	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DimensionMismatchException	$.data == null
1364	333	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1365	336	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1366	340	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1367	345	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
19460	349	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
19460	349	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1368	350	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1368	350	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1368	350	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1368	350	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[i].length != nCols
1369	418	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1369	418	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1369	418	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
19461	422	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
19461	422	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
19462	425	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
19462	425	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1370	438	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1370	438	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1370	438	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
19463	443	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
19463	443	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
19464	445	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
19464	445	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
19465	460	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
19465	460	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
19466	462	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
19466	462	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
19467	475	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
19467	475	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
19468	477	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
19468	477	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
19469	493	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
19469	493	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
19470	495	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
19470	495	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
19471	511	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
19471	511	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
19472	513	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
19472	513	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
19473	526	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
19473	526	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
19474	527	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
19474	527	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
19475	541	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
19475	541	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
19476	542	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
19476	542	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
19477	558	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
19477	558	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
19478	559	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
19478	559	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
19479	576	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
19479	576	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
19480	577	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
19480	577	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
19481	593	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
19481	593	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1539	102	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
1540	105	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullArgumentException	$ == null
1541	109	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NoDataException	$ == 0
1542	113	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	NoDataException	$ == 0
19755	116	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
19755	116	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
1543	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	d[r].length != nCols
1543	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1543	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1543	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DimensionMismatchException	$[r].length != nCols
19756	135	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
19756	135	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
19757	170	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
19757	170	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
19758	174	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
19758	174	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
19759	197	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
19759	197	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
19760	201	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
19760	201	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
19761	231	8	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
19761	231	8	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
19762	234	12	Array2DRowRealMatrix.java	multiply	mRow	int	0	NIL-FOR	$ < nSum
19762	234	12	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	mRow < $
19763	238	12	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
19763	238	12	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
19764	241	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
19764	241	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1544	272	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DimensionMismatchException	$.data == null
1545	273	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1546	276	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1547	281	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1548	286	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
19765	290	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
19765	290	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1549	291	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1549	291	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1549	291	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1549	291	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[i].length != nCols
1550	354	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1550	354	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1550	354	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
19766	358	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
19766	358	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
19767	361	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
19767	361	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1551	375	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1551	375	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1551	375	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
19768	380	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
19768	380	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
19769	382	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
19769	382	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
19770	398	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
19770	398	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
19771	400	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
19771	400	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
19772	413	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
19772	413	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
19773	415	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
19773	415	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
19774	431	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
19774	431	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
19775	433	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
19775	433	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
19776	449	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
19776	449	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
19777	451	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
19777	451	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
19778	464	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
19778	464	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
19779	465	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
19779	465	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
19780	479	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
19780	479	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
19781	480	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
19781	480	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
19782	496	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
19782	496	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
19783	497	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
19783	497	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
19784	514	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
19784	514	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
19785	515	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
19785	515	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
19786	531	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
19786	531	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1642	101	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1643	122	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1644	152	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1645	155	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	d.$.length == 0
1645	155	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	ZeroException	$.length == 0
1646	179	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1647	198	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1648	201	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1648	201	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1648	201	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1648	201	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1649	222	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1650	225	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1650	225	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1650	225	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1650	225	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1651	241	8	ArrayFieldVector.java	ArrayFieldVector	v	FieldVector<T>	0	NullArgumentException	$ == null
19880	246	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19880	246	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
1652	259	8	ArrayFieldVector.java	ArrayFieldVector	v	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1653	276	8	ArrayFieldVector.java	ArrayFieldVector	v	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1654	293	8	ArrayFieldVector.java	ArrayFieldVector	v1	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1654	293	8	ArrayFieldVector.java	ArrayFieldVector	v2	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1655	312	8	ArrayFieldVector.java	ArrayFieldVector	v1	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1655	312	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	NullArgumentException	$ == null
1656	331	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	NullArgumentException	$ == null
1656	331	8	ArrayFieldVector.java	ArrayFieldVector	v2	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1657	357	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	NullArgumentException	$ == null
1657	357	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	NullArgumentException	$ == null
1658	360	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1658	360	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1658	360	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
1659	382	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	NullArgumentException	$ == null
1659	382	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	NullArgumentException	$ == null
1660	385	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1660	385	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1660	385	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
19881	423	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19881	423	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
19882	441	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19882	441	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
19883	455	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19883	455	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
19884	473	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19884	473	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
19885	482	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19885	482	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
19886	490	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19886	490	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
19887	499	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19887	499	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
19888	507	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19888	507	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
19889	516	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19889	516	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
19890	524	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19890	524	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
1661	533	8	ArrayFieldVector.java	mapDivide	d	T	0	NullArgumentException	$ == null
19891	537	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19891	537	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
1662	546	8	ArrayFieldVector.java	mapDivideToSelf	d	T	0	NullArgumentException	$ == null
19892	549	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19892	549	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
19893	559	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19893	559	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
19894	572	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19894	572	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
19895	590	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19895	590	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
19896	608	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19896	608	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
19897	622	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19897	622	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
19898	645	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19898	645	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
19899	677	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19899	677	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
19900	695	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19900	695	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
19901	727	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
19901	727	12	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
19902	728	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
19902	728	16	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
19903	745	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
19903	745	8	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
19904	746	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
19904	746	12	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1663	792	8	ArrayFieldVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
19905	820	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
19905	820	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
19905	820	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
1664	876	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DimensionMismatchException	$.data.$.length != n
1664	876	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1665	890	8	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
1665	890	8	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
1666	893	8	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
1667	900	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
1667	900	12	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
19906	904	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
19906	904	12	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1668	905	16	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
1668	905	16	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
1668	905	16	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
1669	937	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	OutOfRangeException	index >= $.getDimension()
1669	937	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1669	937	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1222	105	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1223	123	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1224	126	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1224	126	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NumberIsTooLargeException	$.length < pos + size
1224	126	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1224	126	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
19256	140	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
19256	140	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
19256	140	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
1225	157	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NullArgumentException	$ == null
1226	160	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1226	160	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NumberIsTooLargeException	$.length < pos + size
1226	160	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1226	160	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
19257	164	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
19257	164	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
19257	164	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
1227	176	8	ArrayRealVector.java	ArrayRealVector	v	RealVector	0	NullArgumentException	$ == null
19258	180	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19258	180	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
19259	227	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l2
19259	227	8	ArrayRealVector.java	ArrayRealVector	l2	int	0	NIL-FOR	i < $
19260	241	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l1
19260	241	8	ArrayRealVector.java	ArrayRealVector	l1	int	0	NIL-FOR	i < $
1228	296	8	ArrayRealVector.java	add	v	RealVector	1	RET	$ instanceof ArrayRealVector
19261	302	12	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < dim
19261	302	12	ArrayRealVector.java	add	dim	int	0	NIL-FOR	i < $
19262	310	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1229	322	8	ArrayRealVector.java	subtract	v	RealVector	1	RET	$ instanceof ArrayRealVector
19263	328	12	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < dim
19263	328	12	ArrayRealVector.java	subtract	dim	int	0	NIL-FOR	i < $
19264	336	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
19265	353	8	ArrayRealVector.java	mapToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19265	353	8	ArrayRealVector.java	mapToSelf	i	int	0	NIL-FOR	$ < data.length
19266	362	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19266	362	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
19267	371	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19267	371	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
19268	380	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19268	380	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
19269	389	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19269	389	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
1230	399	8	ArrayRealVector.java	ebeMultiply	v	RealVector	1	RET	$ instanceof ArrayRealVector
19270	405	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < dim
19270	405	12	ArrayRealVector.java	ebeMultiply	dim	int	0	NIL-FOR	i < $
19271	412	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19271	412	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
1231	423	8	ArrayRealVector.java	ebeDivide	v	RealVector	1	RET	$ instanceof ArrayRealVector
19272	429	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < dim
19272	429	12	ArrayRealVector.java	ebeDivide	dim	int	0	NIL-FOR	i < $
19273	436	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19273	436	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
1232	456	8	ArrayRealVector.java	dotProduct	v	RealVector	0	RET	$ instanceof ArrayRealVector
19274	460	12	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19274	460	12	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
1233	501	8	ArrayRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
19275	505	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19275	505	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
19276	513	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19276	513	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
1234	525	8	ArrayRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof ArrayRealVector
19277	529	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19277	529	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
19278	537	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19278	537	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
1235	549	8	ArrayRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
19279	553	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19279	553	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
19280	561	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19280	561	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
1236	572	8	ArrayRealVector.java	outerProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
19281	577	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
19281	577	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
19282	578	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
19282	578	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
19283	587	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
19283	587	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
19284	588	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
19284	588	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1237	646	8	ArrayRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
1238	685	8	ArrayRealVector.java	setSubVector	v	RealVector	1	DEF	$ instanceof ArrayRealVector
19285	689	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
19285	689	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
19285	689	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
1239	758	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DimensionMismatchException	$.data.$.length != n
1239	758	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1240	772	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
1241	788	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
1242	793	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
1243	804	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
1243	804	8	ArrayRealVector.java	equals	other	Object	0	RET	this == $
1244	808	8	ArrayRealVector.java	equals	other	Object	0	RET	$ instanceof RealVector
1245	813	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
1245	813	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
1246	817	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
19286	821	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19286	821	8	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1247	822	12	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
1247	822	12	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
1247	822	12	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
1248	834	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
1249	851	8	ArrayRealVector.java	combineToSelf	y	RealVector	1	DEF	$ instanceof ArrayRealVector
19287	854	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
19287	854	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
19288	859	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
19288	859	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
19289	870	8	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19289	870	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
19290	883	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
19290	883	8	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
19291	915	8	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
19291	915	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
19292	928	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
19292	928	8	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
20077	300	8	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
20077	300	8	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
1902	304	12	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= -$.initialTrustRegionRadius
1902	304	12	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= -initialTrustRegionRadius
1903	305	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= ZERO
1903	305	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= ZERO
1904	316	19	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(j) <= $.initialTrustRegionRadius
1904	316	19	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	upperDifference.getEntry($) <= initialTrustRegionRadius
1905	317	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.upperDifference.getEntry(j) <= ZERO
1905	317	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	upperDifference.getEntry($) <= ZERO
20078	411	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20078	411	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1906	448	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex != kbase
1906	448	12	BOBYQAOptimizer.java	bobyqb	kbase	int	0	DEF	trustRegionCenterInterpolationPointIndex != $
20079	450	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
20079	450	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
20080	451	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
20080	451	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1907	452	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
1907	452	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
1908	459	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() > npt
1908	459	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	getEvaluations() > $
20081	460	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20081	460	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20082	462	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
20082	462	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
20083	466	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20083	466	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1909	499	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
1909	499	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
1910	504	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
1910	504	16	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
1911	518	16	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
1911	518	16	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
1911	518	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
1911	518	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
20084	523	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
20084	523	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1912	525	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.lowerDifference.getEntry(j)
1912	525	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
1913	528	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.upperDifference.getEntry(j)
1913	528	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
1914	531	20	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
1914	531	20	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
20085	533	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20085	533	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1915	539	24	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
1915	539	24	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
1916	558	12	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
1916	558	12	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
20086	563	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20086	563	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20087	566	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20087	566	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
20088	572	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20088	572	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
20089	576	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
20089	576	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
20090	587	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
20090	587	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
20091	590	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20091	590	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20092	595	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
20092	595	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
20093	597	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20093	597	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20094	601	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20094	601	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20095	607	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20095	607	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
20096	610	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
20096	610	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
20097	622	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
20097	622	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
20098	624	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20098	624	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20099	628	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
20099	628	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
20100	637	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20100	637	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1917	646	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
20101	678	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20101	678	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
20102	689	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20102	689	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20103	693	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
20103	693	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
20104	703	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
20104	703	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
20105	705	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20105	705	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20106	709	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20106	709	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20107	716	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
20107	716	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
20108	721	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20108	721	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20109	726	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20109	726	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1918	745	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
1919	749	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
1919	749	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
1919	749	16	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
20110	750	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20110	750	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
20111	768	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20111	768	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1920	769	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
1920	769	20	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
20112	773	20	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
20112	773	20	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
20113	782	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
20113	782	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1921	791	20	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
1921	791	20	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
1921	791	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
20114	812	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20114	812	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1922	820	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.lowerDifference.getEntry(i)
1922	820	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
1923	823	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.upperDifference.getEntry(i)
1923	823	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
1924	830	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
1925	832	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
20115	843	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
20115	843	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
20116	845	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
20116	845	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1926	847	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
1926	847	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
20117	854	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20117	854	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1927	864	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
1927	864	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
1928	870	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
1929	871	16	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
1930	876	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
1931	879	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
1932	886	16	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
1932	886	16	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
1933	892	16	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
1933	892	16	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
20118	899	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20118	899	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20119	901	24	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
20119	901	24	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
20120	910	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
20120	910	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1934	919	24	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
1934	919	24	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
1934	919	24	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
1935	930	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
1935	930	20	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
20121	945	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20121	945	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
20122	947	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
20122	947	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
20123	952	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
20123	952	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
20124	954	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20124	954	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20125	963	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20125	963	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
20126	967	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20126	967	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20127	969	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
20127	969	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
20128	973	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
20128	973	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
20129	977	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20129	977	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
20130	981	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20130	981	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1936	987	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
1936	987	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
20131	991	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
20131	991	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
20132	996	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
20132	996	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1937	997	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
1937	997	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
20133	1004	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20133	1004	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20134	1006	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
20134	1006	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
20135	1010	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20135	1010	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1938	1020	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
20136	1021	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20136	1021	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20137	1025	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
20137	1025	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
20138	1027	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20138	1027	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20139	1030	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20139	1030	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20140	1034	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20140	1034	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20141	1036	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
20141	1036	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
20142	1044	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20142	1044	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
20143	1046	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20143	1046	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1939	1050	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
1939	1050	20	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
1940	1058	27	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
1940	1058	27	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
1941	1079	16	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
1941	1079	16	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
1942	1082	16	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
20144	1083	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
20144	1083	20	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
1943	1084	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
1943	1084	24	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
1944	1087	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
1944	1087	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
1945	1090	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
1945	1090	24	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
1946	1102	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
1947	1105	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
1947	1105	12	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
1947	1105	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
20145	1122	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
20145	1122	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
20146	1124	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
20146	1124	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1948	1129	16	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
1948	1129	16	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
1949	1141	12	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
1950	1143	16	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1951	1146	20	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
1951	1146	20	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
1952	1158	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1953	1161	12	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
1954	1164	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta, dnorm) > $
1954	1164	12	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($, dnorm) > rho
1954	1164	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta, $) > rho
1955	1173	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
1955	1173	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
1956	1176	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
1957	1178	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
1958	1192	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1959	1198	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
1959	1198	12	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= $
20147	1199	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
20147	1199	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1960	1207	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
1960	1207	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
1961	1210	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
1961	1210	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
20148	1273	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
20148	1273	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
20149	1276	8	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
20149	1276	8	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
20150	1278	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
20150	1278	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
20151	1287	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
20151	1287	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
20152	1290	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
20152	1290	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
20153	1292	12	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
20153	1292	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
20154	1296	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
20154	1296	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
20155	1312	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
20155	1312	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
1962	1313	12	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
1962	1313	12	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
20156	1318	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
20156	1318	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
20157	1331	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
20157	1331	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1963	1333	16	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
1964	1334	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1964	1334	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1964	1334	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1964	1334	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1965	1338	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1965	1338	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1965	1338	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1965	1338	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1966	1344	23	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
1967	1345	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1967	1345	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1967	1345	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1967	1345	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1968	1349	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1968	1349	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1968	1349	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1968	1349	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1969	1364	12	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
1969	1364	12	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
1970	1368	16	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
1970	1368	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
1971	1376	16	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
1971	1376	16	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
1972	1378	20	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
1972	1378	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
1973	1390	16	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
1973	1390	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
1974	1395	16	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
1975	1396	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
1976	1409	12	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
1976	1409	12	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
20158	1419	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
20158	1419	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1977	1424	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
1978	1427	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
20159	1442	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
20159	1442	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1979	1445	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.min($.trustRegionCenterOffset.getEntry(i) - $.lowerDifference.getEntry(i), glagValue) > ZERO
1979	1445	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.max($.trustRegionCenterOffset.getEntry(i) - $.upperDifference.getEntry(i), glagValue) < ZERO
1979	1445	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
1979	1445	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
1979	1445	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
1979	1445	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
1980	1452	12	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
1981	1458	12	BOBYQAOptimizer.java	altmov	tmp1	double	0	DEF	$ > ZERO
20160	1461	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
20160	1461	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1982	1462	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
1982	1462	20	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
1982	1462	20	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
1983	1464	24	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 <= $.lowerDifference.getEntry(i)
1983	1464	24	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= lowerDifference.getEntry(i)
1983	1464	24	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= lowerDifference.getEntry($)
1984	1469	31	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 >= $.upperDifference.getEntry(i)
1984	1469	31	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= upperDifference.getEntry(i)
1984	1469	31	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= upperDifference.getEntry($)
20161	1487	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
20161	1487	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1985	1489	16	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
1985	1489	16	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
1985	1489	16	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
1986	1494	23	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
1986	1494	23	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
1987	1496	23	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
20162	1510	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
20162	1510	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
20163	1512	16	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
20163	1512	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
1988	1517	12	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
1989	1520	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
1989	1520	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
1989	1520	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
1989	1520	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
20164	1523	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
20164	1523	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1990	1541	12	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
20165	1542	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
20165	1542	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1991	1552	8	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
1991	1552	8	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
20166	1553	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
20166	1553	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
20167	1599	8	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
20167	1599	8	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
20168	1601	12	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
20168	1601	12	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
20169	1604	12	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
20169	1604	12	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
20170	1608	8	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
20170	1608	8	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
20171	1611	8	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
20171	1611	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
20172	1613	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
20172	1613	12	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
20173	1625	8	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
20173	1625	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
1992	1632	12	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= 2 * n
1992	1632	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= 2 * $
1993	1633	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= n
1993	1633	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ >= 1
1993	1633	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= $
1994	1636	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfmm) == ZERO
1994	1636	20	BOBYQAOptimizer.java	prelim	nfmm	int	0	DEF	upperDifference.getEntry($) == ZERO
1995	1641	23	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	$ > n
1995	1641	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	nfm > $
1996	1644	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.lowerDifference.getEntry(nfxm) == ZERO
1996	1644	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	lowerDifference.getEntry($) == ZERO
1997	1648	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfxm) == ZERO
1997	1648	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	upperDifference.getEntry($) == ZERO
1998	1658	16	BOBYQAOptimizer.java	prelim	n	int	0	DEF	ipt > $
1998	1658	16	BOBYQAOptimizer.java	prelim	ipt	int	0	DEF	$ > n
20174	1673	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
20174	1673	12	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
1999	1677	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.lowerDifference.getEntry(j)
1999	1677	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == lowerDifference.getEntry($)
1999	1677	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == lowerDifference.getEntry(j)
2000	1680	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.upperDifference.getEntry(j)
2000	1680	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == upperDifference.getEntry($)
2000	1680	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == upperDifference.getEntry(j)
2001	1690	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
2002	1693	19	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex)
2002	1693	19	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
2003	1703	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= 2 * n + 1
2003	1703	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= 2 * $ + 1
2004	1704	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ >= 2
2004	1704	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= n + 1
2004	1704	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= $ + 1
2005	1707	20	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	npt < $ + n
2005	1707	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	npt < numEval + $
2005	1707	20	BOBYQAOptimizer.java	prelim	npt	int	0	DEF	$ < numEval + n
2006	1714	23	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
2006	1714	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
2007	1720	20	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
2007	1720	20	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
2008	1721	24	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry(nfm - n)
2008	1721	24	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fAtInterpolationPoints.getEntry($ - n)
2008	1721	24	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(nfm - n)
2008	1721	24	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fAtInterpolationPoints.getEntry(nfm - $)
2009	1724	28	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
2009	1724	28	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
20175	1851	8	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
20175	1851	8	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2010	1853	12	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) <= $.lowerDifference.getEntry(i)
2010	1853	12	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	trustRegionCenterOffset.getEntry($) <= lowerDifference.getEntry($)
2011	1854	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) >= ZERO
2011	1854	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) >= ZERO
2012	1857	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) >= $.upperDifference.getEntry(i)
2012	1857	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	trustRegionCenterOffset.getEntry($) >= upperDifference.getEntry($)
2013	1858	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) <= ZERO
2013	1858	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) <= ZERO
2014	1862	12	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
2014	1862	12	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
20176	1888	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
20176	1888	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2015	1889	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
2015	1889	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
2016	1891	23	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
2017	1900	12	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
2018	1903	12	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
2019	1907	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
2019	1907	12	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
2019	1907	12	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
20177	1923	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
20177	1923	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2020	1924	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2020	1924	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2021	1932	12	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
2022	1936	12	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
2023	1942	12	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
20178	1951	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
20178	1951	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2024	1952	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
2024	1952	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
2025	1954	20	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
2025	1954	20	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
2026	1959	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
2026	1959	20	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
2027	1969	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
2028	1972	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
2028	1972	16	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2029	1974	20	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
20179	1980	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
20179	1980	16	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2030	1982	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2030	1982	20	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2031	1997	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
2032	2000	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
2032	2000	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
2033	2006	16	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
2034	2015	12	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
2034	2015	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
2035	2016	16	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
2035	2016	16	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
2036	2019	16	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
2036	2019	16	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
2037	2037	12	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
2037	2037	12	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
20180	2043	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
20180	2043	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2038	2044	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2038	2044	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2039	2066	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
2039	2066	12	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
20181	2070	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
20181	2070	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2040	2071	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2040	2071	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
20182	2086	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
20182	2086	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2041	2087	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2041	2087	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2042	2090	20	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
2043	2094	27	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
2044	2107	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2045	2109	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
2045	2109	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
2045	2109	24	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
2046	2118	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2047	2120	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
2047	2120	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
2047	2120	24	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
20183	2138	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
20183	2138	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2048	2139	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2048	2139	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
20184	2154	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
20184	2154	12	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
2049	2159	16	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
2049	2159	16	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
2050	2163	23	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
2050	2163	23	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
2051	2172	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
2052	2175	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
2052	2175	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
2053	2183	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
20185	2193	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
20185	2193	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2054	2195	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2054	2195	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2055	2205	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
2055	2205	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
2055	2205	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
2056	2214	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
2056	2214	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
20186	2221	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
20186	2221	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2057	2227	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
2057	2227	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
2058	2230	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
2058	2230	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
20187	2247	12	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
20187	2247	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
20188	2249	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
20188	2249	16	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
2059	2250	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
2059	2250	20	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
20189	2258	12	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
20189	2258	12	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
2060	2259	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.modelSecondDerivativesParameters.getEntry(k) != ZERO
2060	2259	16	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	modelSecondDerivativesParameters.getEntry($) != ZERO
20190	2260	20	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
20190	2260	20	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2061	2265	12	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
2062	2268	12	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
2062	2268	12	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
20191	2271	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
20191	2271	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
20192	2312	8	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
20192	2312	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
20193	2313	12	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
20193	2313	12	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
20194	2322	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
20194	2322	8	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
2063	2324	12	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
2063	2324	12	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
20195	2332	16	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
20195	2332	16	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
20196	2344	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
20196	2344	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
20197	2356	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
20197	2356	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
20198	2363	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
20198	2363	8	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
20199	2368	12	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
20199	2368	12	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
2064	2371	16	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
2064	2371	16	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
2065	2392	8	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
2066	2397	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
2066	2397	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
2066	2397	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
2066	2397	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
20200	2410	8	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
20200	2410	8	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
2067	2414	8	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
2067	2414	8	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
619	150	8	BSPTree.java	insertCut	THIS	BSPTree	0	DEF	$.cut != null
620	156	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$.isEmpty()
620	156	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$ == null
621	181	8	BSPTree.java	copySelf	THIS	BSPTree	0	RET	$.cut == null
622	242	8	BSPTree.java	visit	THIS	BSPTree	1	DEF	$.cut == null
19045	293	8	BSPTree.java	fitToCell	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
19045	293	8	BSPTree.java	fitToCell	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
623	294	12	BSPTree.java	fitToCell	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
623	294	12	BSPTree.java	fitToCell	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
624	312	8	BSPTree.java	getCell	THIS	BSPTree	0	RET	$.cut == null
625	319	8	BSPTree.java	getCell	offset	double	1	RET	FastMath.abs($) < 1.0e-10
626	321	15	BSPTree.java	getCell	offset	double	1	RET	$ <= 0
627	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.cut != null
627	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.cut == null
627	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute == null
627	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.attribute == null
627	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute.equals($.minus.$.attribute)
627	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.cut == null
627	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute != null
628	385	8	BSPTree.java	merge	THIS	BSPTree	1	RET	$.cut == null
629	388	15	BSPTree.java	merge	THIS	BSPTree	1	RET	tree.$.cut == null
629	388	15	BSPTree.java	merge	tree	BSPTree<S>	1	RET	$.cut == null
630	394	12	BSPTree.java	merge	parentTree	BSPTree<S>	0	DEF	$ != null
631	396	16	BSPTree.java	merge	isPlusChild	boolean	1	DEF	$
632	407	12	BSPTree.java	merge	THIS	BSPTree	0	DEF	merged.$.cut != null
632	407	12	BSPTree.java	merge	merged	BSPTree<S>	0	DEF	$.cut != null
633	489	8	BSPTree.java	split	THIS	BSPTree	0	RET	$.cut == null
634	500	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
634	500	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
635	516	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
635	516	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
636	568	8	BSPTree.java	insertInTree	parentTree	BSPTree<S>	0	DEF	$ != null
637	569	12	BSPTree.java	insertInTree	isPlusChild	boolean	1	DEF	$
638	577	8	BSPTree.java	insertInTree	THIS	BSPTree	0	DEF	$.cut != null
19046	580	12	BSPTree.java	insertInTree	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
19046	580	12	BSPTree.java	insertInTree	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
639	587	16	BSPTree.java	insertInTree	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
639	587	16	BSPTree.java	insertInTree	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
640	614	8	BSPTree.java	chopOffMinus	THIS	BSPTree	0	DEF	$.cut != null
641	628	8	BSPTree.java	chopOffPlus	THIS	BSPTree	0	DEF	$.cut != null
2083	219	12	BaseAbstractMultivariateOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.data instanceof InitialGuess
2084	223	12	BaseAbstractMultivariateOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.data instanceof SimpleBounds
2085	270	8	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooLargeException	$.start != null
2086	272	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooSmallException	$.lowerBound != null
2087	273	16	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DimensionMismatchException	$.lowerBound.$.length != dim
2087	273	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	lowerBound.length != $
20214	276	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
20214	276	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2088	279	20	BaseAbstractMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooSmallException	$ < lo
2088	279	20	BaseAbstractMultivariateOptimizer.java	checkParameters	lo	double	0	NumberIsTooSmallException	v < $
2089	284	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooLargeException	$.upperBound != null
2090	285	16	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DimensionMismatchException	$.upperBound.$.length != dim
2090	285	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	upperBound.length != $
20215	288	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
20215	288	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2091	291	20	BaseAbstractMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooLargeException	$ > hi
2091	291	20	BaseAbstractMultivariateOptimizer.java	checkParameters	hi	double	0	NumberIsTooLargeException	v > $
2092	299	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.lowerBound == null
20216	301	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
20216	301	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2093	305	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.upperBound == null
20217	307	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
20217	307	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
1850	181	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	f	FUNC	0	NullArgumentException	$ == null
1851	184	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	t	double[]	0	NullArgumentException	$ == null
1852	187	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	w	double[]	0	NullArgumentException	$ == null
1853	190	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	startPoint	double[]	0	NullArgumentException	$ == null
1854	193	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	t.$.length != w.$.length
1854	193	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	t	double[]	0	DimensionMismatchException	$.length != w.length
1854	193	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	w	double[]	0	DimensionMismatchException	t.length != $.length
20026	321	8	BaseAbstractMultivariateVectorOptimizer.java	setUp	i	int	0	NIL-FOR	$ < dim
20026	321	8	BaseAbstractMultivariateVectorOptimizer.java	setUp	dim	int	0	NIL-FOR	i < $
1855	341	12	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof Target
1856	345	12	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof Weight
1857	349	12	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof InitialGuess
1858	363	8	BaseAbstractMultivariateVectorOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	$.target.$.length != $.weightMatrix.getColumnDimension()
3615	120	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NotStrictlyPositiveException	$ <= 0
3616	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NumberIsTooSmallException	maximalIterationCount <= $
3616	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	maximalIterationCount	int	0	NumberIsTooSmallException	$ <= minimalIterationCount
1687	117	8	BaseAbstractUnivariateOptimizer.java	optimize	f	UnivariateFunction	0	NullArgumentException	$ == null
1688	120	8	BaseAbstractUnivariateOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
1676	73	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	optimizer	BaseMultivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1676	73	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1677	77	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1678	113	8	BaseMultivariateMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
19913	146	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
19913	146	8	BaseMultivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1679	162	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
1683	73	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	optimizer	BaseMultivariateVectorOptimizer<FUNC>	0	NullArgumentException	$ == null
1683	73	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1684	77	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1685	114	8	BaseMultivariateVectorMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateVectorMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
19914	147	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	NIL-FOR	i < $.starts
19914	147	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1686	166	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	DEF	$.optima[0] == null
3606	57	8	BaseRuleFactory.java	getRule	cached	Pair<double[],double[]>	0	DEF	$ == null
3607	86	8	BaseRuleFactory.java	getRuleInternal	rule	Pair<T[],T[]>	0	RET	$ == null
3608	102	8	BaseRuleFactory.java	addRule	THIS	BaseRuleFactory	0	DimensionMismatchException	rule.getFirst().length != rule.getSecond().length
3608	102	8	BaseRuleFactory.java	addRule	rule	Pair<T[],T[]>	0	DimensionMismatchException	$.getFirst().length != $.getSecond().length
20963	134	8	BaseRuleFactory.java	convertToDouble	i	int	0	NIL-FOR	$ < len
20963	134	8	BaseRuleFactory.java	convertToDouble	len	int	0	NIL-FOR	i < $
3375	147	8	BaseSecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
3376	150	8	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
3377	175	12	BaseSecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
3378	180	12	BaseSecantSolver.java	doSolve	fx	double	1	DEF	f1 * $ < 0
3378	180	12	BaseSecantSolver.java	doSolve	f1	double	1	DEF	$ * fx < 0
3379	197	20	BaseSecantSolver.java	doSolve	x	double	0	ConvergenceException	$ == x1
3379	197	20	BaseSecantSolver.java	doSolve	x1	double	0	ConvergenceException	x == $
3380	213	12	BaseSecantSolver.java	doSolve	f1	double	0	MathInternalError:RET	FastMath.abs($) <= ftol
3380	213	12	BaseSecantSolver.java	doSolve	ftol	double	0	MathInternalError:RET	FastMath.abs(f1) <= $
3381	218	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
3382	223	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
3383	228	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ <= 0
3384	233	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ >= 0
3385	244	12	BaseSecantSolver.java	doSolve	x0	double	0	MathInternalError:RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
3385	244	12	BaseSecantSolver.java	doSolve	x1	double	0	MathInternalError:RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
3385	244	12	BaseSecantSolver.java	doSolve	atol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
3385	244	12	BaseSecantSolver.java	doSolve	rtol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
2667	187	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
2667	187	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
2667	187	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
2667	187	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
2667	187	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
2667	187	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
2667	187	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
2668	195	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
2668	195	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
2668	195	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
2669	262	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
2669	262	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
2669	262	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
2669	262	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
2670	287	8	Beta.java	bcorr	p	double	0	NumberIsTooSmallException	$ < 10.0
2671	290	8	Beta.java	bcorr	q	double	0	NumberIsTooSmallException	$ < 10.0
20473	305	8	Beta.java	bcorr	THIS	Beta	0	NIL-FOR	i < s.$.length
20473	305	8	Beta.java	bcorr	i	int	0	NIL-FOR	$ < s.length
20473	305	8	Beta.java	bcorr	s	double[]	0	NIL-FOR	i < $.length
20474	314	8	Beta.java	bcorr	i	int	0	NIL-FOR	$ >= 0
20475	324	8	Beta.java	bcorr	i	int	0	NIL-FOR	$ >= 0
1028	120	8	BetaDistribution.java	recomputeZ	THIS	BetaDistribution	0	DEF	Double.isNaN($.z)
1029	128	8	BetaDistribution.java	density	x	double	1	RET	$ < 0
1029	128	8	BetaDistribution.java	density	x	double	1	RET	$ > 1
1030	130	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 0
1031	131	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.alpha < 1
1032	135	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 1
1033	136	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.beta < 1
1034	149	8	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ <= 0
1035	151	15	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ >= 1
1420	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
1420	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
1421	90	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
19552	100	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
19552	100	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
19553	105	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
19553	105	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
1422	108	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
1422	108	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
1422	108	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
19554	109	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
19554	109	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
19555	111	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
19555	111	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
19556	116	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
19556	116	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
1423	122	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
1424	139	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
19557	144	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
19557	144	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
1425	146	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
1425	146	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
1426	147	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
1427	151	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1427	151	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
1428	171	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
19558	181	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
19558	181	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
19559	186	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
19559	186	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
1429	189	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
1429	189	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
19560	190	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
19560	190	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
19561	192	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
19561	192	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
19562	197	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
19562	197	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
1430	203	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
19563	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
19563	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
19564	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
19564	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1431	272	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
19565	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
19565	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
19566	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
19566	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
19567	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
19567	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1432	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
1432	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
19568	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
19568	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
1433	297	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
19569	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
19569	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
19570	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
19570	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
19571	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
19571	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
19572	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
19572	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
19573	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
19573	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1434	336	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
19574	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
19574	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
19575	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
19575	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
19576	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
19576	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1435	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
1435	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
19577	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
19577	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
1436	361	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
19578	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
19578	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
19579	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
19579	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
19580	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
19580	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
3303	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3303	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3303	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3303	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3303	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$.length == 0
3303	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$[0].length == 0
3304	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3304	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3304	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	xLen != $.length
3305	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3305	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3305	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	xLen != $.length
3306	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3306	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3306	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	xLen != $.length
3307	116	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3307	116	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3307	116	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	xLen != $.length
20772	130	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
20772	130	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3308	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3308	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3308	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3308	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	$[i].length != yLen
3309	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3309	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3309	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3309	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	$[i].length != yLen
3310	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3310	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3310	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3310	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
3311	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3311	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3311	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3311	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
20773	144	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
20773	144	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3312	164	8	BicubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
3313	168	8	BicubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
3314	254	8	BicubicSplineInterpolatingFunction.java	partialDerivative	THIS	BicubicSplineInterpolatingFunction	0	DEF	$.partialDerivatives == null
3315	259	8	BicubicSplineInterpolatingFunction.java	partialDerivative	i	int	0	OutOfRangeException	$ == -1
3316	263	8	BicubicSplineInterpolatingFunction.java	partialDerivative	j	int	0	OutOfRangeException	$ == -1
20774	281	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < lastI
20774	281	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastI	int	0	NIL-FOR	i < $
20775	282	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < lastJ
20775	282	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastJ	int	0	NIL-FOR	j < $
3317	301	8	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
3317	301	8	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
20776	306	8	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
20776	306	8	BicubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
3318	307	12	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
3318	307	12	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
3318	307	12	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
20777	347	8	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < 16
20778	350	12	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < 16
20779	395	8	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	i	int	0	NIL-FOR	$ < N
20780	396	12	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	j	int	0	NIL-FOR	$ < N
3319	406	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3319	406	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3320	409	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
3320	409	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
20781	434	8	BicubicSplineInterpolatingFunction.java	apply	i	int	0	NIL-FOR	$ < N
20782	435	12	BicubicSplineInterpolatingFunction.java	apply	j	int	0	NIL-FOR	$ < N
3321	447	8	BicubicSplineInterpolatingFunction.java	partialDerivativeX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeX == null
3322	457	8	BicubicSplineInterpolatingFunction.java	partialDerivativeY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeY == null
3323	467	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXX == null
3324	477	8	BicubicSplineInterpolatingFunction.java	partialDerivativeYY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeYY == null
3325	487	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXY == null
20783	504	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < N
20784	505	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < N
3300	43	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3300	43	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3300	43	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3300	43	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3300	43	8	BicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3300	43	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3301	46	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3301	46	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3301	46	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
20760	61	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20760	61	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3302	62	12	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3302	62	12	BicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3302	62	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3302	62	12	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
20761	66	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
20761	66	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
20762	76	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
20762	76	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
20763	83	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20763	83	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
20764	89	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
20764	89	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
20765	91	12	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20765	91	12	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
20766	98	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20766	98	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
20767	100	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
20767	100	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
20768	107	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20768	107	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
20769	110	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
20769	110	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
884	123	8	BigFraction.java	BigFraction	den	BigInteger	0	ZeroException	BigInteger.ZERO.equals($)
885	126	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
886	133	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
887	139	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
888	173	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isNaN($)
889	176	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isInfinite($)
890	185	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
891	189	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
19067	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
19067	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
892	198	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
893	275	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
893	275	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
894	281	8	BigFraction.java	BigFraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
894	281	8	BigFraction.java	BigFraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
894	281	8	BigFraction.java	BigFraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
19068	297	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
895	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
895	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
895	303	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
895	303	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
896	308	12	BigFraction.java	BigFraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
896	308	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
896	308	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
896	308	12	BigFraction.java	BigFraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
896	308	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
896	308	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
896	308	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
897	322	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
897	322	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
898	326	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
898	326	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
899	433	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
900	508	8	BigFraction.java	add	fraction	BigFraction	0	NullArgumentException	$ == null
901	511	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
902	518	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
902	518	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
903	612	8	BigFraction.java	divide	bg	BigInteger	0	NullArgumentException	$ == null
904	615	8	BigFraction.java	divide	bg	BigInteger	0	MathArithmeticException	BigInteger.ZERO.equals($)
905	661	8	BigFraction.java	divide	fraction	BigFraction	0	NullArgumentException	$ == null
906	664	8	BigFraction.java	divide	THIS	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals(fraction.$.numerator)
906	664	8	BigFraction.java	divide	fraction	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals($.numerator)
907	683	8	BigFraction.java	doubleValue	result	double	0	DEF	Double.isNaN($)
908	713	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
908	713	8	BigFraction.java	equals	other	Object	1	DEF	this == $
909	715	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
910	736	8	BigFraction.java	floatValue	result	float	0	DEF	Double.isNaN($)
911	865	8	BigFraction.java	multiply	bg	BigInteger	0	NullArgumentException	$ == null
912	910	8	BigFraction.java	multiply	fraction	BigFraction	0	NullArgumentException	$ == null
913	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
913	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	fraction.$.numerator.equals(BigInteger.ZERO)
913	913	8	BigFraction.java	multiply	fraction	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
914	957	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
915	974	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
916	993	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
917	1052	8	BigFraction.java	subtract	bg	BigInteger	0	NullArgumentException	$ == null
918	1095	8	BigFraction.java	subtract	fraction	BigFraction	0	NullArgumentException	$ == null
919	1098	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
920	1104	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
920	1104	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
921	1127	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
922	1129	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
923	169	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
924	171	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
925	173	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
926	194	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
927	216	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
928	249	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
19069	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
19069	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
19069	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
19069	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
213	306	8	BigReal.java	equals	THIS	BigReal	0	RET	$ == other
213	306	8	BigReal.java	equals	other	Object	0	RET	this == $
214	310	8	BigReal.java	equals	other	Object	0	RET	$ instanceof BigReal
2643	56	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
2643	56	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
20461	71	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
20461	71	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
2644	80	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
2645	85	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
2645	85	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
20462	89	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
20462	89	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
2646	90	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
2646	90	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
2646	90	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
2657	41	8	BinaryMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof BinaryChromosome
1086	70	8	BinomialDistribution.java	BinomialDistribution	trials	int	0	NotPositiveException	$ < 0
1087	74	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ > 1
1087	74	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ < 0
1088	103	8	BinomialDistribution.java	probability	THIS	BinomialDistribution	1	DEF	x > $.numberOfTrials
1088	103	8	BinomialDistribution.java	probability	x	int	1	DEF	$ < 0
1088	103	8	BinomialDistribution.java	probability	x	int	1	DEF	$ > numberOfTrials
1089	116	8	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
1090	118	15	BinomialDistribution.java	cumulativeProbability	THIS	BinomialDistribution	1	DEF	x >= $.numberOfTrials
1090	118	15	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= numberOfTrials
3450	78	12	BisectionSolver.java	doSolve	fm	double	1	DEF	$ * fmin > 0
3450	78	12	BisectionSolver.java	doSolve	fmin	double	1	DEF	fm * $ > 0
3451	86	12	BisectionSolver.java	doSolve	min	double	0	RET	FastMath.abs(max - $) <= absoluteAccuracy
3451	86	12	BisectionSolver.java	doSolve	max	double	0	RET	FastMath.abs($ - min) <= absoluteAccuracy
3451	86	12	BisectionSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(max - min) <= $
20436	68	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
20436	68	8	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
20437	77	8	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
20437	77	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
20437	77	8	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
2578	99	8	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
2579	138	8	BitsStreamGenerator.java	nextInt	n	int	0	RET	$ > 0
2580	139	12	BitsStreamGenerator.java	nextInt	n	int	0	RET	($ & -$) == $
20438	144	12	BitsStreamGenerator.java	nextInt	bits	int	0	NIL-DOWHILE	$ - val + (n - 1) < 0
20438	144	12	BitsStreamGenerator.java	nextInt	val	int	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
20438	144	12	BitsStreamGenerator.java	nextInt	n	int	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
1173	160	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
19127	169	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
19127	169	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
19128	171	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
19128	171	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1174	172	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1174	172	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1174	172	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1174	172	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1174	172	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1175	176	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
19129	216	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
19129	216	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
19129	216	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
1176	218	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1176	218	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
19130	227	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
19130	227	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
19131	231	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
19131	231	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
19132	242	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
19132	242	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
19133	276	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
19133	276	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
19134	280	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
19134	280	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
19135	309	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
19135	309	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
19136	331	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
19136	331	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
19136	331	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
19137	332	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
19137	332	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
19137	332	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
19138	342	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
19138	342	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
19139	343	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
19139	343	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
19140	376	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
19140	376	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
19140	376	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
19141	380	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
19141	380	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
19141	380	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
19142	403	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
19142	403	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
19142	403	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
19143	404	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
19143	404	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
19143	404	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
19144	414	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
19144	414	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
19145	415	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
19145	415	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
19146	446	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
19146	446	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
19146	446	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
19147	450	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
19147	450	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
19147	450	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
19148	464	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
19148	464	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
19148	464	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
19149	467	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
19149	467	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
19149	467	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
19150	482	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
19150	482	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
19150	482	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
19151	485	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
19151	485	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
19151	485	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
19152	509	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
19152	509	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
19152	509	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
19153	514	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
19153	514	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
19153	514	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
19154	523	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
19154	523	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
19155	528	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
19155	528	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
19156	531	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
19156	531	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
19157	534	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
19157	534	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
19158	572	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
19158	572	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
19158	572	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
19159	577	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
19159	577	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
19159	577	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
19160	587	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
19160	587	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
19161	592	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
19161	592	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
19162	595	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
19162	595	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
19163	599	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
19163	599	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
19164	608	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
19164	608	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
19165	633	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
19165	633	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
19166	638	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
19166	638	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
19167	642	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
19167	642	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
19168	676	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
19168	676	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
19168	676	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
19169	679	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
19169	679	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
19169	679	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
1177	690	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1178	692	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1179	724	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
19170	774	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
19170	774	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1180	790	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1181	797	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1181	797	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
19171	809	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
19171	809	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
19172	815	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
19172	815	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
19173	824	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
19173	824	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
19174	847	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
19174	847	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1182	851	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1182	851	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1183	891	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1183	891	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1183	891	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
19175	904	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
19175	904	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1184	908	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1184	908	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
19176	934	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
19176	934	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
19177	937	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
19177	937	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1185	938	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
1185	938	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1185	938	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
1186	975	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1186	975	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1186	975	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
19178	989	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
19178	989	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
19179	992	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
19179	992	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1187	993	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
1187	993	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1187	993	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
19180	1013	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
19180	1013	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
19181	1046	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
19181	1046	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
19182	1049	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
19182	1049	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
19183	1078	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
19183	1078	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1188	1094	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1188	1094	8	BlockFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1188	1094	8	BlockFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
19184	1102	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
19184	1102	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
19185	1121	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
19185	1121	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
19186	1124	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
19186	1124	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1189	1138	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1189	1138	8	BlockFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1189	1138	8	BlockFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
19187	1147	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
19187	1147	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
19188	1150	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
19188	1150	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
19189	1227	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
19189	1227	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
19190	1228	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
19190	1228	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
19191	1238	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
19191	1238	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
19192	1241	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
19192	1241	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1190	1272	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.columns
1190	1272	8	BlockFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != columns
19193	1279	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
19193	1279	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
19194	1282	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
19194	1282	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
19195	1287	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
19195	1287	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
19196	1290	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
19196	1290	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
19197	1299	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
19197	1299	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1191	1314	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.rows
1191	1314	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != rows
19198	1321	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
19198	1321	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
19199	1328	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
19199	1328	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
19200	1332	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
19200	1332	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
19201	1336	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
19201	1336	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
19202	1345	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
19202	1345	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
19203	1361	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
19203	1361	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
19204	1364	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
19204	1364	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
19205	1365	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
19205	1365	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
19206	1371	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
19206	1371	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
19207	1385	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
19207	1385	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
19208	1388	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
19208	1388	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
19209	1389	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
19209	1389	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
19210	1395	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
19210	1395	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
19211	1413	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
19211	1413	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
19212	1417	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
19212	1417	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
19213	1418	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
19213	1418	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
19214	1425	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
19214	1425	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
19215	1443	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
19215	1443	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
19216	1447	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
19216	1447	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
19217	1448	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
19217	1448	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
19218	1455	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
19218	1455	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
19219	1470	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
19219	1470	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
19220	1473	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
19220	1473	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
19221	1478	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
19221	1478	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
19222	1479	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
19222	1479	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
19223	1495	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
19223	1495	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
19224	1498	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
19224	1498	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
19225	1503	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
19225	1503	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
19226	1504	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
19226	1504	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
19227	1523	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
19227	1523	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
19228	1527	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
19228	1527	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
19229	1533	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
19229	1533	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
19230	1535	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
19230	1535	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
19231	1553	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
19231	1553	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
19232	1557	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
19232	1557	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
19233	1563	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
19233	1563	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
19234	1565	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
19234	1565	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
1515	157	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
19633	166	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19633	166	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
19634	168	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19634	168	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1516	169	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1516	169	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1516	169	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1516	169	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1516	169	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1517	173	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
19635	209	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
19635	209	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
19635	209	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
1518	211	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1518	211	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
19636	219	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
19636	219	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
19637	223	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
19637	223	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
19638	234	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
19638	234	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
19639	263	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
19639	263	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
19640	267	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
19640	267	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
19641	294	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
19641	294	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
19642	315	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
19642	315	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
19642	315	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19643	316	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
19643	316	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
19643	316	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19644	326	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
19644	326	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
19645	327	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
19645	327	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
19646	357	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
19646	357	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
19646	357	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
19647	361	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
19647	361	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
19647	361	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
19648	383	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
19648	383	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
19648	383	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19649	384	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
19649	384	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
19649	384	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19650	394	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
19650	394	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
19651	395	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
19651	395	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
19652	425	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
19652	425	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
19652	425	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
19653	429	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
19653	429	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
19653	429	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
19654	444	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
19654	444	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
19654	444	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
19655	447	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
19655	447	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
19655	447	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
19656	461	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
19656	461	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
19656	461	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
19657	464	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
19657	464	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
19657	464	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
19658	486	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
19658	486	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
19658	486	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19659	490	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
19659	490	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
19659	490	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19660	498	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
19660	498	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
19661	503	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
19661	503	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
19662	506	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
19662	506	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
19663	509	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
19663	509	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
19664	543	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
19664	543	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
19664	543	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19665	548	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
19665	548	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
19665	548	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19666	558	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
19666	558	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
19667	563	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
19667	563	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
19668	566	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
19668	566	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
19669	570	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
19669	570	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
19670	578	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
19670	578	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
19671	601	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19671	601	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
19672	606	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
19672	606	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
19673	610	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
19673	610	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
19674	628	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19674	628	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
19675	631	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19675	631	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
19676	634	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
19676	634	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
19677	636	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
19677	636	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
19678	642	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
19678	642	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
19679	653	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
19679	653	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
19680	682	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
19680	682	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
19680	682	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19681	685	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
19681	685	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
19681	685	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
1519	696	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1520	698	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1521	730	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
19682	780	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
19682	780	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1522	796	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1523	803	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1523	803	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
19683	815	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
19683	815	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
19684	821	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
19684	821	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
19685	830	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
19685	830	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
19686	853	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19686	853	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1524	857	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1524	857	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1525	897	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1525	897	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1525	897	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
19687	910	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19687	910	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1526	914	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1526	914	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
19688	940	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19688	940	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
19689	943	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
19689	943	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1527	944	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
1527	944	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1527	944	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
1528	981	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1528	981	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1528	981	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
19690	995	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19690	995	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
19691	998	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
19691	998	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1529	999	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
1529	999	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1529	999	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
19692	1019	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19692	1019	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
19693	1052	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19693	1052	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
19694	1055	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
19694	1055	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
19695	1084	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19695	1084	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1530	1100	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1530	1100	8	BlockRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1530	1100	8	BlockRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
19696	1108	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19696	1108	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
19697	1127	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19697	1127	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
19698	1130	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
19698	1130	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1531	1144	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1531	1144	8	BlockRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1531	1144	8	BlockRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
19699	1153	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19699	1153	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
19700	1156	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
19700	1156	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
19701	1221	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
19701	1221	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
19702	1222	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
19702	1222	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
19703	1231	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
19703	1231	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
19704	1234	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
19704	1234	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1532	1264	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.columns
1532	1264	8	BlockRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != columns
19705	1270	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19705	1270	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
19706	1273	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19706	1273	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
19707	1278	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
19707	1278	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
19708	1281	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
19708	1281	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
19709	1289	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
19709	1289	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1533	1304	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.rows
1533	1304	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != rows
19710	1310	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19710	1310	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
19711	1317	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19711	1317	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
19712	1321	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
19712	1321	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
19713	1325	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
19713	1325	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
19714	1333	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
19714	1333	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
19715	1349	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19715	1349	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
19716	1352	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
19716	1352	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
19717	1353	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19717	1353	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
19718	1359	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
19718	1359	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
19719	1373	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19719	1373	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
19720	1376	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
19720	1376	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
19721	1377	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19721	1377	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
19722	1383	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
19722	1383	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
19723	1401	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
19723	1401	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
19724	1405	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
19724	1405	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
19725	1406	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
19725	1406	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
19726	1413	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
19726	1413	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
19727	1431	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
19727	1431	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
19728	1435	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
19728	1435	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
19729	1436	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
19729	1436	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
19730	1443	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
19730	1443	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
19731	1458	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19731	1458	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
19732	1461	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19732	1461	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
19733	1466	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
19733	1466	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
19734	1467	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
19734	1467	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
19735	1483	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
19735	1483	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
19736	1486	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
19736	1486	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
19737	1491	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
19737	1491	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
19738	1492	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
19738	1492	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
19739	1512	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
19739	1512	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
19740	1516	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
19740	1516	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
19741	1522	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
19741	1522	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
19742	1524	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
19742	1524	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
19743	1543	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
19743	1543	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
19744	1547	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
19744	1547	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
19745	1553	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
19745	1553	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
19746	1555	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
19746	1555	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
617	47	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusOutside() != null
618	50	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusInside() != null
1689	91	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
1690	94	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
1691	118	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
1691	118	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
1691	118	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
19915	134	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
19915	134	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
19915	134	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
1692	145	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
1692	145	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
1692	145	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
1693	147	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
1693	147	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
1693	147	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
1694	155	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
1694	155	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
1694	155	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
1695	164	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
1695	164	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
1695	164	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
1696	167	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
1696	167	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
1696	167	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
1697	169	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
1697	169	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
1697	169	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
1698	199	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
3405	85	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3406	105	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3407	127	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3408	159	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[1], 0.0, 1)
3409	166	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[0], 0.0, 1)
3410	173	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[0] * $[1] < 0
3411	183	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[2], 0.0, 1)
3412	188	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[1] * $[2] < 0
3413	217	12	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	MathInternalError:RET	FastMath.max(absYA, absYB) < $.getFunctionValueAccuracy()
3413	217	12	BracketingNthOrderBrentSolver.java	doSolve	xTol	double	0	MathInternalError:RET	(xB - xA) <= $
3413	217	12	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	MathInternalError:RET	(xB - $) <= xTol
3413	217	12	BracketingNthOrderBrentSolver.java	doSolve	absYA	double	0	MathInternalError:RET	FastMath.max($, absYB) < getFunctionValueAccuracy()
3413	217	12	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	MathInternalError:RET	($ - xA) <= xTol
3413	217	12	BracketingNthOrderBrentSolver.java	doSolve	absYB	double	0	MathInternalError:RET	FastMath.max(absYA, $) < getFunctionValueAccuracy()
3414	237	12	BracketingNthOrderBrentSolver.java	doSolve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
3415	243	19	BracketingNthOrderBrentSolver.java	doSolve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
20833	258	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	NIL-DOWHILE	Double.isNaN($)
20833	258	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	0	NIL-DOWHILE	end - $ > 1
20833	258	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	0	NIL-DOWHILE	$ - start > 1
3416	264	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ < xB
3416	264	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ > xA
3416	264	16	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	DEF	nextX > $
3416	264	16	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	DEF	nextX < $
3417	270	20	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
3417	270	20	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
3417	270	20	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	1	DEF	$ - start >= end - $
3418	285	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	Double.isNaN($)
3419	294	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	0	RET	Precision.equals($, 0.0, 1)
3420	300	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	end - $ != nbPoints
3420	300	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	$ - start != nbPoints
3420	300	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	$ > 2
3420	300	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	end - start != $
3421	309	20	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	nbPoints == x.$.length
3421	309	20	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	nbPoints == $.length
3421	309	20	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	0	DEF	$ == x.length
3422	315	16	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
3422	315	16	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
3422	315	16	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
3423	333	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	1	DEF	$ * yA <= 0
3423	333	12	BracketingNthOrderBrentSolver.java	doSolve	yA	double	1	DEF	nextY * $ <= 0
20834	375	8	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	$ < end - 1
20834	375	8	BracketingNthOrderBrentSolver.java	guessX	end	int	0	NIL-FOR	i < $ - 1
20835	377	12	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ > i
20835	377	12	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	j > $
20836	384	8	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ >= start
20836	384	8	BracketingNthOrderBrentSolver.java	guessX	start	int	0	NIL-FOR	j >= $
3169	78	8	BracketingNthOrderBrentSolverDFP.java	BracketingNthOrderBrentSolverDFP	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3170	202	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[1].isZero()
3171	210	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[0].isZero()
3172	217	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[0].multiply($[1]).negativeOrNull()
3173	228	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[2].isZero()
3174	233	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[1].multiply($[2]).negativeOrNull()
3175	266	12	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	MathInternalError:RET	maxY.lessThan($.functionValueAccuracy)
3175	266	12	BracketingNthOrderBrentSolverDFP.java	solve	maxY	Dfp	0	MathInternalError:RET	$.lessThan(functionValueAccuracy)
3175	266	12	BracketingNthOrderBrentSolverDFP.java	solve	xTol	Dfp	0	MathInternalError:RET	xB.subtract(xA).subtract($).negativeOrNull()
3175	266	12	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	MathInternalError:RET	xB.subtract($).subtract(xTol).negativeOrNull()
3175	266	12	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	MathInternalError:RET	$.subtract(xA).subtract(xTol).negativeOrNull()
3176	287	12	BracketingNthOrderBrentSolverDFP.java	solve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
3177	290	19	BracketingNthOrderBrentSolverDFP.java	solve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
20713	302	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	NIL-DOWHILE	$.isNaN()
20713	302	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	0	NIL-DOWHILE	end - $ > 1
20713	302	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	0	NIL-DOWHILE	$ - start > 1
3178	308	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.lessThan(xB)
3178	308	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.greaterThan(xA)
3178	308	16	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	DEF	nextX.greaterThan($)
3178	308	16	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	DEF	nextX.lessThan($)
3179	314	20	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
3179	314	20	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
3179	314	20	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	1	DEF	$ - start >= end - $
3180	329	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.isNaN()
3181	339	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	0	RET	$.isZero()
3182	345	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	end - $ != nbPoints
3182	345	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	$ - start != nbPoints
3182	345	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	end - start != $
3182	345	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	$ > 2
3183	354	20	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	nbPoints == x.$.length
3183	354	20	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	nbPoints == $.length
3183	354	20	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	0	DEF	$ == x.length
3184	360	16	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
3184	360	16	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
3184	360	16	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
3185	378	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	1	DEF	$.multiply(yA).negativeOrNull()
3185	378	12	BracketingNthOrderBrentSolverDFP.java	solve	yA	Dfp	1	DEF	nextY.multiply($).negativeOrNull()
20714	420	8	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	$ < end - 1
20714	420	8	BracketingNthOrderBrentSolverDFP.java	guessX	end	int	0	NIL-FOR	i < $ - 1
20715	422	12	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ > i
20715	422	12	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	j > $
20716	429	8	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ >= start
20716	429	8	BracketingNthOrderBrentSolverDFP.java	guessX	start	int	0	NIL-FOR	j >= $
1702	83	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1703	86	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
1704	127	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
1704	127	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
1705	141	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1706	161	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
1707	167	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
1707	167	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
1708	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
1709	182	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
1709	182	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
1709	182	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
1709	182	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
1709	182	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
1709	182	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
1709	182	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
1709	182	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
1709	182	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
1709	182	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
1709	182	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
1710	190	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
1710	190	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
1710	190	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
1710	190	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
1710	190	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
1710	190	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
1711	191	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
1711	191	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
1712	199	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1712	199	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1713	208	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1713	208	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1714	217	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
1714	217	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
1715	218	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
1716	228	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1717	241	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$ != null
1718	242	20	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$.converged(iter, previous, current)
1718	242	20	BrentOptimizer.java	doOptimize	previous	UnivariatePointValuePair	0	RET	checker.converged(iter, $, current)
1718	242	20	BrentOptimizer.java	doOptimize	current	UnivariatePointValuePair	0	RET	checker.converged(iter, previous, $)
1718	242	20	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1719	248	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
1719	248	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
1720	249	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1720	249	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1721	261	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1721	261	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1722	266	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
1722	266	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	Precision.equals(w, $)
1722	266	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	Precision.equals($, x)
1722	266	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
1723	272	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
1723	272	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	Precision.equals(v, $)
1723	272	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, w)
1723	272	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, x)
1723	272	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	Precision.equals(v, $)
1723	272	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
1724	304	8	BrentOptimizer.java	best	a	UnivariatePointValuePair	0	RET	$ == null
1725	307	8	BrentOptimizer.java	best	b	UnivariatePointValuePair	0	RET	$ == null
1726	311	8	BrentOptimizer.java	best	isMinim	boolean	1	RET	$
3459	97	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
3459	97	8	BrentSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3460	103	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
3460	103	8	BrentSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3461	108	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
3461	108	8	BrentSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
3462	114	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
3462	114	8	BrentSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3463	119	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
3463	119	8	BrentSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
3464	157	12	BrentSolver.java	brent	fb	double	0	DEF	FastMath.abs(fc) < FastMath.abs($)
3464	157	12	BrentSolver.java	brent	fc	double	0	DEF	FastMath.abs($) < FastMath.abs(fb)
3465	169	12	BrentSolver.java	brent	tol	double	0	RET	FastMath.abs(m) <= $
3465	169	12	BrentSolver.java	brent	m	double	0	RET	FastMath.abs($) <= tol
3465	169	12	BrentSolver.java	brent	fb	double	0	RET	Precision.equals($, 0)
3466	173	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(e) < $
3466	173	12	BrentSolver.java	brent	fa	double	1	DEF	FastMath.abs($) <= FastMath.abs(fb)
3466	173	12	BrentSolver.java	brent	fb	double	1	DEF	FastMath.abs(fa) <= FastMath.abs($)
3466	173	12	BrentSolver.java	brent	e	double	1	DEF	FastMath.abs($) < tol
3467	185	16	BrentSolver.java	brent	a	double	1	DEF	$ == c
3467	185	16	BrentSolver.java	brent	c	double	1	DEF	a == $
3468	196	16	BrentSolver.java	brent	p	double	1	DEF	$ > 0
3469	203	16	BrentSolver.java	brent	s	double	1	DEF	p >= FastMath.abs(0.5 * $ * q)
3469	203	16	BrentSolver.java	brent	p	double	1	DEF	$ >= 1.5 * m * q - FastMath.abs(tol * q)
3469	203	16	BrentSolver.java	brent	p	double	1	DEF	$ >= FastMath.abs(0.5 * s * q)
3469	203	16	BrentSolver.java	brent	q	double	1	DEF	p >= 1.5 * m * $ - FastMath.abs(tol * $)
3469	203	16	BrentSolver.java	brent	q	double	1	DEF	p >= FastMath.abs(0.5 * s * $)
3469	203	16	BrentSolver.java	brent	tol	double	1	DEF	p >= 1.5 * m * q - FastMath.abs($ * q)
3469	203	16	BrentSolver.java	brent	m	double	1	DEF	p >= 1.5 * $ * q - FastMath.abs(tol * q)
3470	217	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(d) > $
3470	217	12	BrentSolver.java	brent	d	double	1	DEF	FastMath.abs($) > tol
3471	219	19	BrentSolver.java	brent	m	double	1	DEF	$ > 0
3472	225	12	BrentSolver.java	brent	fb	double	0	DEF	$ <= 0
3472	225	12	BrentSolver.java	brent	fb	double	0	DEF	$ > 0
3472	225	12	BrentSolver.java	brent	fc	double	0	DEF	$ <= 0
3472	225	12	BrentSolver.java	brent	fc	double	0	DEF	$ > 0
20029	511	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
20030	517	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
20030	517	12	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
20031	519	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount + 1
20031	519	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount + 1
1861	520	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1862	527	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
1862	527	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
1862	527	20	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
1862	527	20	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
1863	550	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1864	559	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
1864	559	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
1865	564	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1865	564	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
1866	566	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, optimum, lastResult)
1866	566	20	CMAESOptimizer.java	doOptimize	optimum	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1866	566	20	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, optimum, $)
1867	573	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopFitness != 0
1868	574	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopFitness : -$.stopFitness)
1868	574	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopFitness : -stopFitness)
20032	580	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
20032	580	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1869	581	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > $.stopTolX
1869	581	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * Math.max(Math.abs(pcCol[$]), sqrtDiagC[$]) > stopTolX
1869	581	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * Math.max(Math.abs(pcCol[i]), $[i]) > stopTolX
1869	581	16	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma * Math.max(Math.abs($[i]), sqrtDiagC[i]) > stopTolX
1870	584	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension - 1
1870	584	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension - 1
20033	588	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
20033	588	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1871	589	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * sqrtDiagC[i] > $.stopTolUpX
1871	589	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * sqrtDiagC[$] > stopTolUpX
1871	589	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * $[i] > stopTolUpX
1872	595	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < $.stopTolFun
1872	595	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1872	595	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
1872	595	12	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
1872	595	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
1872	595	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
1873	600	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
1873	600	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst-historyBest < $.stopTolHistFun
1873	600	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst-$ < stopTolHistFun
1873	600	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$-historyBest < stopTolHistFun
1874	605	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD)/$.min($.diagD) > 1e7
1875	609	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1876	613	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, current, lastResult)
1876	613	16	CMAESOptimizer.java	doOptimize	current	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1876	613	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, current, $)
1876	613	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
1877	620	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1+$.lambda/4.)]]
1877	620	12	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1+lambda/4.)]]
1877	620	12	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1+lambda/4.)]]
1877	620	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1+lambda/4.)]]
1878	623	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1878	623	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
1878	623	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
1878	623	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
1879	630	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
1880	654	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof Sigma
1881	658	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof PopulationSize
1882	673	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
1883	674	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	DimensionMismatchException	$.inputSigma.$.length != init.$.length
1883	674	12	CMAESOptimizer.java	checkParameters	init	double[]	0	DimensionMismatchException	inputSigma.length != $.length
20034	677	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
20034	677	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
20034	677	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
1884	678	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NotPositiveException	$.inputSigma[i] < 0
1884	678	16	CMAESOptimizer.java	checkParameters	i	int	0	NotPositiveException	inputSigma[$] < 0
1885	682	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > uB[i] - lB[i]
1885	682	16	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > uB[$] - lB[$]
1885	682	16	CMAESOptimizer.java	checkParameters	lB	double[]	0	OutOfRangeException	inputSigma[i] > uB[i] - $[i]
1885	682	16	CMAESOptimizer.java	checkParameters	uB	double[]	0	OutOfRangeException	inputSigma[i] > $[i] - lB[i]
1886	695	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	DEF	$.lambda <= 0
20035	702	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
20035	702	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
20035	702	8	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
20036	722	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
20036	722	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
20037	759	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
20037	759	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
1887	781	8	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
1888	806	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
1888	806	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
1889	831	8	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
1890	839	12	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
1891	862	16	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
1891	862	16	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
1892	894	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
1892	894	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1
1892	894	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
1892	894	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
1893	903	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
20038	904	16	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
20038	904	16	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
1894	905	20	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i, 0) < 0
1894	905	20	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($, 0) < 0
1895	913	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
20039	931	8	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
20040	945	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
20040	945	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
20040	945	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
20041	950	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
20041	950	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
20041	950	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
20042	1110	8	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
20042	1110	8	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
20043	1111	12	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
20043	1111	12	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
20044	1124	8	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
20044	1124	8	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
20045	1125	12	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
20045	1125	12	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
20046	1138	8	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
20046	1138	8	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
20047	1139	12	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
20047	1139	12	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
20048	1154	8	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
20048	1154	8	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
20049	1155	12	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
20049	1155	12	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
20050	1169	8	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
20050	1169	8	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
20051	1170	12	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
20051	1170	12	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
20052	1184	8	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
20052	1184	8	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
20053	1185	12	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
20053	1185	12	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
20053	1185	12	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
20054	1199	8	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
20054	1199	8	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
20055	1200	12	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
20055	1200	12	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
20056	1213	8	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
20056	1213	8	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
20057	1215	12	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
20057	1215	12	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
1896	1229	8	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
20058	1231	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
20058	1231	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
20059	1237	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
20059	1237	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
20060	1254	8	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
20060	1254	8	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
20061	1266	8	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
20061	1266	8	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
20062	1280	8	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
20062	1280	8	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
1897	1281	12	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
1897	1281	12	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
20063	1307	8	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
20063	1307	8	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
20063	1307	8	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
20064	1308	12	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
20064	1308	12	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
20064	1308	12	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
20065	1325	8	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
20065	1325	8	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
20066	1338	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
20066	1338	8	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
20067	1339	12	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
20067	1339	12	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
1898	1341	16	CMAESOptimizer.java	max	e	double	0	DEF	max < $
1898	1341	16	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
20068	1355	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
20068	1355	8	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
20069	1356	12	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
20069	1356	12	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
1899	1358	16	CMAESOptimizer.java	min	e	double	0	DEF	min > $
1899	1358	16	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
20070	1372	8	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
20070	1372	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
20070	1372	8	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
1900	1373	12	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
1900	1373	12	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
1900	1373	12	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
20071	1386	8	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
20071	1386	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
20071	1386	8	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
1901	1387	12	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
1901	1387	12	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
1901	1387	12	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
20072	1400	8	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
20072	1400	8	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
20072	1400	8	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
20073	1412	8	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
20073	1412	8	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
20073	1412	8	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
20074	1424	8	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
20074	1424	8	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
20075	1437	8	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
20075	1437	8	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
20076	1438	12	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
20076	1438	12	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
1076	100	8	CauchyDistribution.java	CauchyDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1077	146	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0
1077	146	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1
1078	148	15	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1079	150	16	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
2286	85	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length < 2
2286	85	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length < 2
2287	88	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length != observed.$.length
2287	88	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length != observed.length
2287	88	8	ChiSquareTest.java	chiSquare	observed	long[]	0	DimensionMismatchException	expected.length != $.length
20273	96	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
20273	96	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
20273	96	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2288	102	8	ChiSquareTest.java	chiSquare	sumExpected	double	0	DEF	FastMath.abs($ - sumObserved) > 10E-6
2288	102	8	ChiSquareTest.java	chiSquare	sumObserved	double	0	DEF	FastMath.abs(sumExpected - $) > 10E-6
20274	107	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
20274	107	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
20274	107	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2289	108	12	ChiSquareTest.java	chiSquare	rescale	boolean	1	DEF	$
2290	208	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
2290	208	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
20275	256	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
20275	256	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
20276	257	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
20276	257	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
20277	267	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
20277	267	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
20278	268	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
20278	268	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
2291	363	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
2291	363	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
2292	414	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length < 2
2292	414	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
2293	417	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
2293	417	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
2293	417	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
20279	430	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
20279	430	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
20279	430	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2294	435	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
2294	435	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
2295	440	8	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
20280	448	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
20280	448	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
20280	448	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2296	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
2296	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
2296	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
2296	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
2297	454	16	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
2298	566	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
2298	566	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
2299	588	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in.$.length < 2
2299	588	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$.length < 2
2300	592	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in[0].length < 2
2300	592	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$[0].length < 2
1371	107	8	CholeskyDecomposition.java	CholeskyDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
19482	118	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
19482	118	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
19483	122	12	CholeskyDecomposition.java	CholeskyDecomposition	j	int	0	NIL-FOR	$ < order
19483	122	12	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	j < $
1372	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lIJ	double	0	NonSymmetricMatrixException	FastMath.abs($ - lJI) > maxDelta
1372	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lJI	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - $) > maxDelta
1372	128	16	CholeskyDecomposition.java	CholeskyDecomposition	maxDelta	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - lJI) > $
19484	136	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
19484	136	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
1373	141	12	CholeskyDecomposition.java	CholeskyDecomposition	ltI	double[]	0	NonPositiveDefiniteMatrixException	$[i] <= absolutePositivityThreshold
1373	141	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	ltI[$] <= absolutePositivityThreshold
1373	141	12	CholeskyDecomposition.java	CholeskyDecomposition	absolutePositivityThreshold	double	0	NonPositiveDefiniteMatrixException	ltI[i] <= $
19485	148	12	CholeskyDecomposition.java	CholeskyDecomposition	q	int	0	NIL-FOR	$ > i
19485	148	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	q > $
19486	151	16	CholeskyDecomposition.java	CholeskyDecomposition	p	int	0	NIL-FOR	$ < order
19486	151	16	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	p < $
1374	164	8	CholeskyDecomposition.java	getL	THIS	CholeskyDecomposition	0	DEF	$.cachedL == null
1375	177	8	CholeskyDecomposition.java	getLT	THIS	CholeskyDecomposition	0	DEF	$.cachedLT == null
19487	191	8	CholeskyDecomposition.java	getDeterminant	THIS	CholeskyDecomposition	0	NIL-FOR	i < $.lTData.$.length
19487	191	8	CholeskyDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
2623	43	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == NO_FITNESS
2624	85	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
2625	100	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
2858	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	1	DEF	$.previousState != null
2858	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
20622	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20622	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
20623	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20623	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
823	116	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN
824	119	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
825	122	8	Complex.java	abs	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
826	123	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
827	129	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
828	158	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
828	158	8	Complex.java	add	THIS	Complex	0	RET	addend.$.isNaN
828	158	8	Complex.java	add	addend	Complex	0	RET	$.isNaN
829	175	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
829	175	8	Complex.java	add	addend	double	0	RET	Double.isNaN($)
830	197	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN
831	249	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
831	249	8	Complex.java	divide	THIS	Complex	0	RET	divisor.$.isNaN
831	249	8	Complex.java	divide	divisor	Complex	0	RET	$.isNaN
832	255	8	Complex.java	divide	c	double	0	RET	$ == 0.0
832	255	8	Complex.java	divide	d	double	0	RET	$ == 0.0
833	259	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
833	259	8	Complex.java	divide	divisor	Complex	0	RET	$.isInfinite()
834	263	8	Complex.java	divide	c	double	1	RET	FastMath.abs($) < FastMath.abs(d)
834	263	8	Complex.java	divide	d	double	1	RET	FastMath.abs(c) < FastMath.abs($)
835	285	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
835	285	8	Complex.java	divide	divisor	double	0	RET	Double.isNaN($)
836	288	8	Complex.java	divide	divisor	double	0	RET	$ == 0d
837	291	8	Complex.java	divide	divisor	double	0	RET	Double.isInfinite($)
838	300	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isNaN
839	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.imaginary == 0.0
839	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.real == 0.0
840	308	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isInfinite
841	312	8	Complex.java	reciprocal	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
842	340	8	Complex.java	equals	THIS	Complex	0	RET	$ == other
842	340	8	Complex.java	equals	other	Object	0	RET	this == $
843	343	8	Complex.java	equals	other	Object	0	RET	$ instanceof Complex
844	345	12	Complex.java	equals	THIS	Complex	1	RET	c.$.isNaN
844	345	12	Complex.java	equals	c	Complex	1	RET	$.isNaN
845	363	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN
846	439	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
846	439	8	Complex.java	multiply	THIS	Complex	0	RET	factor.$.isNaN
846	439	8	Complex.java	multiply	factor	Complex	0	RET	$.isNaN
847	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.imaginary)
847	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.real)
847	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
847	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
847	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.imaginary)
847	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.real)
848	462	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
849	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
849	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
850	481	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
850	481	8	Complex.java	multiply	factor	double	0	RET	Double.isNaN($)
851	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
851	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
851	484	8	Complex.java	multiply	factor	double	0	RET	Double.isInfinite($)
852	501	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN
853	529	8	Complex.java	subtract	THIS	Complex	0	RET	subtrahend.$.isNaN
853	529	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
853	529	8	Complex.java	subtract	subtrahend	Complex	0	RET	$.isNaN
854	546	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
854	546	8	Complex.java	subtract	subtrahend	double	0	RET	Double.isNaN($)
855	569	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN
856	593	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN
857	617	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN
858	658	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN
859	698	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN
860	739	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN
861	784	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN
862	862	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN
863	902	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN
864	945	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN
865	949	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
865	949	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
866	954	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
867	1016	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN
867	1016	8	Complex.java	tan	THIS	Complex	0	RET	Double.isInfinite($.real)
868	1019	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary > 20.0
869	1022	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary < -20.0
870	1067	8	Complex.java	tanh	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
870	1067	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN
871	1070	8	Complex.java	tanh	THIS	Complex	0	RET	$.real > 20.0
872	1073	8	Complex.java	tanh	THIS	Complex	0	RET	$.real < -20.0
873	1131	8	Complex.java	nthRoot	n	int	0	NotPositiveException	$ <= 0
874	1138	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN
875	1142	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
19066	1154	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
19066	1154	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
876	1188	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
876	1188	8	Complex.java	valueOf	imaginaryPart	double	0	RET	Double.isNaN($)
877	1202	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
807	67	8	ComplexFormat.java	ComplexFormat	format	NumberFormat	0	NullArgumentException	$ == null
808	85	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
809	88	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
810	146	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NullArgumentException	$ == null
811	149	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NoDataException	$.length() == 0
812	152	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
813	155	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
814	214	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
815	219	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
815	219	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
816	245	8	ComplexFormat.java	formatImaginary	toAppendTo	StringBuffer	0	DEF	$.toString().equals("1")
817	272	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
818	274	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
819	354	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
820	377	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
821	413	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
822	421	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	CompositeFormat.parseFixedstring(source, $.getImaginaryCharacter(), pos)
822	421	8	ComplexFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, getImaginaryCharacter(), pos)
822	421	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), $)
799	63	8	ComplexUtils.java	polar2Complex	r	double	0	MathIllegalArgumentException	$ < 0
19064	81	8	ComplexUtils.java	convertToComplex	THIS	ComplexUtils	0	NIL-FOR	i < real.$.length
19064	81	8	ComplexUtils.java	convertToComplex	i	int	0	NIL-FOR	$ < real.length
19064	81	8	ComplexUtils.java	convertToComplex	real	double[]	0	NIL-FOR	i < $.length
501	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
501	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
19027	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
19027	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
19027	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
502	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
502	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
503	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
503	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
504	122	12	CompositeFormat.java	parseNumber	sb	StringBuilder	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
504	122	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
504	122	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
504	122	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
505	148	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
505	148	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
19028	153	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
19028	153	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
19028	153	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
506	155	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
507	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
507	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
507	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
507	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
507	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
507	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
507	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
507	177	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
508	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
508	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
1621	176	8	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	1	DEF	$ == null
1622	185	8	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1622	185	8	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
1623	195	12	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	0	DEF	$ != null
1624	199	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1624	199	12	ConjugateGradient.java	solveInPlace	rhoNext	double	0	DEF	$ <= 0.
1625	207	12	ConjugateGradient.java	solveInPlace	manager	IterationManager	1	DEF	$.getIterations() == 2
1626	214	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1626	214	12	ConjugateGradient.java	solveInPlace	pq	double	0	DEF	$ <= 0.
1627	230	12	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1627	230	12	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
95	129	8	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(hPrev, 0.0, $)
95	129	8	ContinuedFraction.java	evaluate	hPrev	double	0	DEF	Precision.equals($, 0.0, small)
18973	138	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
18973	138	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
96	143	12	ContinuedFraction.java	evaluate	dN	double	0	DEF	Precision.equals($, 0.0, small)
96	143	12	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(dN, 0.0, $)
97	147	12	ContinuedFraction.java	evaluate	cN	double	0	DEF	Precision.equals($, 0.0, small)
97	147	12	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(cN, 0.0, $)
98	155	12	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isInfinite($)
99	159	12	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isNaN($)
100	164	12	ContinuedFraction.java	evaluate	deltaN	double	0	DEF	FastMath.abs($ - 1.0) < epsilon
100	164	12	ContinuedFraction.java	evaluate	epsilon	double	0	DEF	FastMath.abs(deltaN - 1.0) < $
101	174	8	ContinuedFraction.java	evaluate	n	int	0	MaxCountExceededException	$ >= maxIterations
101	174	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxCountExceededException	n >= $
2904	133	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
2904	133	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
2905	137	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
2906	142	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DimensionMismatchException	$.getInterpolatedState().length != model.getInterpolatedState().length
2906	142	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DimensionMismatchException	getInterpolatedState().length != $.getInterpolatedState().length
2907	147	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	MathIllegalArgumentException	$.forward ^ model.$.forward
2907	147	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	MathIllegalArgumentException	forward ^ $.forward
2908	156	6	ContinuousOutputModel.java	append	step	double	0	MathIllegalArgumentException	FastMath.abs(gap) > 1.0e-3 * FastMath.abs($)
2908	156	6	ContinuousOutputModel.java	append	gap	double	0	MathIllegalArgumentException	FastMath.abs($) > 1.0e-3 * FastMath.abs(step)
2909	192	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
2910	199	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
2911	257	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
2911	257	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
2911	257	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
2912	262	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
2912	262	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
2912	262	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
20654	269	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
20654	269	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
2913	274	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
2914	277	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
2915	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs($ - tMin) < 1e-6
2915	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs(tMax - $) < 1e-6
2915	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	FastMath.abs(tMed - $) < 1e-6
2915	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	FastMath.abs($ - tMed) < 1e-6
2916	314	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
2916	314	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
2917	316	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
2917	316	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
20655	324	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
20655	324	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
20655	324	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
20655	324	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
2918	349	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
2919	350	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
2919	350	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
2920	352	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
2920	352	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
2921	358	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
2921	358	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
2922	360	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
2922	360	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
2544	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
2544	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
2544	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
20408	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
20408	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
20409	168	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.normalized.$.length
20409	168	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < normalized.length
20410	174	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
20410	174	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
20410	174	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
20411	176	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.root.getColumnDimension()
20411	176	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < root.getColumnDimension()
20319	167	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
20319	167	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
20320	168	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
20320	168	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
2356	234	8	Covariance.java	covariance	THIS	Covariance	1	MathIllegalArgumentException	length != yArray.$.length
2356	234	8	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ != yArray.length
2356	234	8	Covariance.java	covariance	yArray	double[]	1	MathIllegalArgumentException	length != $.length
2357	237	15	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ < 2
20321	243	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
20321	243	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
2358	279	8	Covariance.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2358	279	8	Covariance.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
1731	185	8	CurveFitter.java	fit	THIS	CurveFitter	1	DEF	$.optimizer == null
2613	106	8	CycleCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2613	106	8	CycleCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2614	124	8	CycleCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
2614	124	8	CycleCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
20454	144	8	CycleCrossover.java	mate	length	int	0	NIL-WHILE	visitedIndices.size() < $
20454	144	8	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.size() < length
20455	150	12	CycleCrossover.java	mate	indices	List<Integer>	0	NIL-WHILE	idx != $.get(0)
20455	150	12	CycleCrossover.java	mate	idx	int	0	NIL-WHILE	$ != indices.get(0)
2615	160	12	CycleCrossover.java	mate	cycle	int	0	DEF	$++ % 2 != 0
20456	171	12	CycleCrossover.java	mate	length	int	0	NIL-WHILE	visitedIndices.size() < $
20456	171	12	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.contains(idx)
20456	171	12	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.size() < length
20456	171	12	CycleCrossover.java	mate	idx	int	0	NIL-WHILE	visitedIndices.contains($)
2616	173	16	CycleCrossover.java	mate	length	int	0	DEF	idx >= $
2616	173	16	CycleCrossover.java	mate	idx	int	0	DEF	$ >= length
2314	86	8	DBSCANClusterer.java	DBSCANClusterer	eps	double	0	NotPositiveException	$ < 0.0d
2315	89	8	DBSCANClusterer.java	DBSCANClusterer	minPts	int	0	NotPositiveException	$ < 0
2316	134	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	0	DEF	visited.get($.point) != null
2316	134	12	DBSCANClusterer.java	cluster	visited	Map<Clusterable<T>,PointStatus>	0	DEF	$.get(point) != null
2317	138	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	1	DEF	neighbors.size() >= $.minPts
2317	138	12	DBSCANClusterer.java	cluster	neighbors	List<T>	1	DEF	$.size() >= minPts
20292	170	8	DBSCANClusterer.java	expandCluster	seeds	List<T>	0	NIL-WHILE	index < $.size()
20292	170	8	DBSCANClusterer.java	expandCluster	index	int	0	NIL-WHILE	$ < seeds.size()
2318	174	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ == null
2319	176	16	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	currentNeighbors.size() >= $.minPts
2319	176	16	DBSCANClusterer.java	expandCluster	currentNeighbors	List<T>	0	DEF	$.size() >= minPts
2320	181	12	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	pStatus != $.PointStatus.PART_OF_CLUSTER
2320	181	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ != PointStatus.PART_OF_CLUSTER
2321	201	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	$.neighbor.distanceFrom(point) <= $.eps
2321	201	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	point != $.neighbor
2321	201	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	neighbor.distanceFrom($) <= eps
2321	201	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	$ != neighbor
2322	218	12	DBSCANClusterer.java	merge	THIS	DBSCANClusterer	0	DEF	oneSet.contains($.item)
2322	218	12	DBSCANClusterer.java	merge	oneSet	Set<T>	0	DEF	$.contains(item)
3475	189	8	DSCompiler.java	getCompiler	THIS	DSCompiler	0	RET	cache.$.length > parameters
3475	189	8	DSCompiler.java	getCompiler	THIS	DSCompiler	0	RET	cache[parameters].length > order
3475	189	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$ != null
3475	189	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$.length > parameters
3475	189	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$[parameters].length > order
3475	189	8	DSCompiler.java	getCompiler	parameters	int	0	RET	cache.length > $
3475	189	8	DSCompiler.java	getCompiler	parameters	int	0	RET	cache[$].length > order
3475	189	8	DSCompiler.java	getCompiler	order	int	0	RET	cache[parameters].length > $
3476	190	12	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$[parameters][order] != null
3476	190	12	DSCompiler.java	getCompiler	parameters	int	0	RET	cache[$][order] != null
3476	190	12	DSCompiler.java	getCompiler	order	int	0	RET	cache[parameters][$] != null
3477	201	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	DEF	$ != null
20843	203	12	DSCompiler.java	getCompiler	THIS	DSCompiler	0	NIL-FOR	i < cache.$.length
20843	203	12	DSCompiler.java	getCompiler	i	int	0	NIL-FOR	$ < cache.length
20843	203	12	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	NIL-FOR	i < $.length
20844	209	8	DSCompiler.java	getCompiler	diag	int	0	NIL-FOR	$ <= parameters + order
20844	209	8	DSCompiler.java	getCompiler	parameters	int	0	NIL-FOR	diag <= $ + order
20844	209	8	DSCompiler.java	getCompiler	order	int	0	NIL-FOR	diag <= parameters + $
20845	210	12	DSCompiler.java	getCompiler	o	int	0	NIL-FOR	$ <= FastMath.min(order, diag)
20845	210	12	DSCompiler.java	getCompiler	diag	int	0	NIL-FOR	o <= FastMath.min(order, $)
20845	210	12	DSCompiler.java	getCompiler	order	int	0	NIL-FOR	o <= FastMath.min($, diag)
3478	212	16	DSCompiler.java	getCompiler	p	int	0	DEF	newCache[$][o] == null
3478	212	16	DSCompiler.java	getCompiler	o	int	0	DEF	newCache[p][$] == null
3478	212	16	DSCompiler.java	getCompiler	newCache	DSCompiler[][]	0	DEF	$[p][o] == null
3479	239	8	DSCompiler.java	compileSizes	parameters	int	1	DEF	$ == 0
20846	244	12	DSCompiler.java	compileSizes	i	int	0	NIL-FOR	$ < order
20846	244	12	DSCompiler.java	compileSizes	order	int	0	NIL-FOR	i < $
3480	264	8	DSCompiler.java	compileDerivativesIndirection	parameters	int	0	RET	$ == 0
3480	264	8	DSCompiler.java	compileDerivativesIndirection	order	int	0	RET	$ == 0
20847	273	8	DSCompiler.java	compileDerivativesIndirection	i	int	0	NIL-FOR	$ < vSize
20847	273	8	DSCompiler.java	compileDerivativesIndirection	vSize	int	0	NIL-FOR	i < $
20848	281	8	DSCompiler.java	compileDerivativesIndirection	i	int	0	NIL-FOR	$ < dSize
20848	281	8	DSCompiler.java	compileDerivativesIndirection	dSize	int	0	NIL-FOR	i < $
3481	312	8	DSCompiler.java	compileLowerIndirection	parameters	int	0	RET	$ == 0
3481	312	8	DSCompiler.java	compileLowerIndirection	order	int	0	RET	$ <= 1
20849	321	8	DSCompiler.java	compileLowerIndirection	i	int	0	NIL-FOR	$ < dSize
20849	321	8	DSCompiler.java	compileLowerIndirection	dSize	int	0	NIL-FOR	i < $
3482	347	8	DSCompiler.java	compileMultiplicationIndirection	parameters	int	0	RET	$ == 0
3482	347	8	DSCompiler.java	compileMultiplicationIndirection	order	int	0	RET	$ == 0
20850	358	8	DSCompiler.java	compileMultiplicationIndirection	i	int	0	NIL-FOR	$ < dSize
20850	358	8	DSCompiler.java	compileMultiplicationIndirection	dSize	int	0	NIL-FOR	i < $
20851	361	12	DSCompiler.java	compileMultiplicationIndirection	THIS	DSCompiler	0	NIL-FOR	j < dRow.$.length
20851	361	12	DSCompiler.java	compileMultiplicationIndirection	j	int	0	NIL-FOR	$ < dRow.length
20851	361	12	DSCompiler.java	compileMultiplicationIndirection	dRow	int[][]	0	NIL-FOR	j < $.length
20852	368	12	DSCompiler.java	compileMultiplicationIndirection	j	int	0	NIL-FOR	$ < row.size()
20852	368	12	DSCompiler.java	compileMultiplicationIndirection	row	List<int[]>	0	NIL-FOR	j < $.size()
3483	370	16	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[0] > 0
20853	371	20	DSCompiler.java	compileMultiplicationIndirection	k	int	0	NIL-FOR	$ < row.size()
20853	371	20	DSCompiler.java	compileMultiplicationIndirection	row	List<int[]>	0	NIL-FOR	k < $.size()
3484	373	24	DSCompiler.java	compileMultiplicationIndirection	termK	int[]	0	DEF	termJ[2] == $[2]
3484	373	24	DSCompiler.java	compileMultiplicationIndirection	termK	int[]	0	DEF	termJ[1] == $[1]
3484	373	24	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[2] == termK[2]
3484	373	24	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[1] == termK[1]
3485	414	8	DSCompiler.java	compileCompositionIndirection	parameters	int	0	RET	$ == 0
3485	414	8	DSCompiler.java	compileCompositionIndirection	order	int	0	RET	$ == 0
20854	429	8	DSCompiler.java	compileCompositionIndirection	i	int	0	NIL-FOR	$ < dSize
20854	429	8	DSCompiler.java	compileCompositionIndirection	dSize	int	0	NIL-FOR	i < $
20855	442	16	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	j < $.term.$.length
20855	442	16	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < term.length
20856	453	16	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	l < $.term.$.length
20856	453	16	DSCompiler.java	compileCompositionIndirection	l	int	0	NIL-FOR	$ < term.length
20857	457	20	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	j < $.term.$.length
20857	457	20	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < term.length
3486	463	24	DSCompiler.java	compileCompositionIndirection	j	int	0	DEF	$ == l
3486	463	24	DSCompiler.java	compileCompositionIndirection	l	int	0	DEF	j == $
20858	478	12	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < row.size()
20858	478	12	DSCompiler.java	compileCompositionIndirection	row	List<int[]>	0	NIL-FOR	j < $.size()
3487	480	16	DSCompiler.java	compileCompositionIndirection	termJ	int[]	0	DEF	$[0] > 0
20859	481	20	DSCompiler.java	compileCompositionIndirection	k	int	0	NIL-FOR	$ < row.size()
20859	481	20	DSCompiler.java	compileCompositionIndirection	row	List<int[]>	0	NIL-FOR	k < $.size()
20860	484	24	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	l < termJ.$.length
20860	484	24	DSCompiler.java	compileCompositionIndirection	l	int	0	NIL-FOR	$ < termJ.length
20860	484	24	DSCompiler.java	compileCompositionIndirection	equals	boolean	0	NIL-FOR	$
20860	484	24	DSCompiler.java	compileCompositionIndirection	termJ	int[]	0	NIL-FOR	l < $.length
3488	487	24	DSCompiler.java	compileCompositionIndirection	equals	boolean	0	DEF	$
3489	542	8	DSCompiler.java	getPartialDerivativeIndex	THIS	DSCompiler	0	DimensionMismatchException	orders.$.length != $.getFreeParameters()
3489	542	8	DSCompiler.java	getPartialDerivativeIndex	orders	int	0	DimensionMismatchException	$.length != getFreeParameters()
20861	569	8	DSCompiler.java	getPartialDerivativeIndex	i	int	0	NIL-FOR	$ >= 0
3490	576	12	DSCompiler.java	getPartialDerivativeIndex	ordersSum	int	0	NumberIsTooLargeException	$ > order
3490	576	12	DSCompiler.java	getPartialDerivativeIndex	order	int	0	NumberIsTooLargeException	ordersSum > $
20862	580	12	DSCompiler.java	getPartialDerivativeIndex	derivativeOrder	int	0	NIL-WHILE	$-- > 0
20863	664	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
20863	664	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
20864	689	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
20864	689	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
20865	720	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
20865	720	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
20866	741	8	DSCompiler.java	add	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
20866	741	8	DSCompiler.java	add	i	int	0	NIL-FOR	$ < getSize()
20867	757	8	DSCompiler.java	subtract	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
20867	757	8	DSCompiler.java	subtract	i	int	0	NIL-FOR	$ < getSize()
20868	775	8	DSCompiler.java	multiply	THIS	DSCompiler	0	NIL-FOR	i < $.multIndirection.$.length
20868	775	8	DSCompiler.java	multiply	i	int	0	NIL-FOR	$ < multIndirection.length
20869	778	12	DSCompiler.java	multiply	THIS	DSCompiler	0	NIL-FOR	j < mappingI.$.length
20869	778	12	DSCompiler.java	multiply	j	int	0	NIL-FOR	$ < mappingI.length
20869	778	12	DSCompiler.java	multiply	mappingI	int[][]	0	NIL-FOR	j < $.length
20870	826	8	DSCompiler.java	remainder	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
20870	826	8	DSCompiler.java	remainder	i	int	0	NIL-FOR	$ < getSize()
20871	848	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ > 0
20872	854	8	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
20872	854	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
3491	876	8	DSCompiler.java	pow	n	int	0	RET	$ == 0
3492	887	8	DSCompiler.java	pow	n	int	1	DEF	$ > 0
20873	891	12	DSCompiler.java	pow	i	int	0	NIL-FOR	$ > 0
20874	900	12	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
20874	900	12	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
20875	907	8	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
20875	907	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
3493	953	8	DSCompiler.java	rootN	n	int	1	DEF	$ == 2
3494	956	15	DSCompiler.java	rootN	n	int	1	DEF	$ == 3
20876	965	8	DSCompiler.java	rootN	THIS	DSCompiler	0	NIL-FOR	i <= $.order
20876	965	8	DSCompiler.java	rootN	i	int	0	NIL-FOR	$ <= order
3495	1030	8	DSCompiler.java	log	THIS	DSCompiler	0	DEF	$.order > 0
20877	1033	12	DSCompiler.java	log	THIS	DSCompiler	0	NIL-FOR	i <= $.order
20877	1033	12	DSCompiler.java	log	i	int	0	NIL-FOR	$ <= order
3496	1057	8	DSCompiler.java	log1p	THIS	DSCompiler	0	DEF	$.order > 0
20878	1060	12	DSCompiler.java	log1p	THIS	DSCompiler	0	NIL-FOR	i <= $.order
20878	1060	12	DSCompiler.java	log1p	i	int	0	NIL-FOR	$ <= order
3497	1084	8	DSCompiler.java	log10	THIS	DSCompiler	0	DEF	$.order > 0
20879	1087	12	DSCompiler.java	log10	THIS	DSCompiler	0	NIL-FOR	i <= $.order
20879	1087	12	DSCompiler.java	log10	i	int	0	NIL-FOR	$ <= order
3498	1112	8	DSCompiler.java	cos	THIS	DSCompiler	0	DEF	$.order > 0
20880	1114	12	DSCompiler.java	cos	THIS	DSCompiler	0	NIL-FOR	i <= $.order
20880	1114	12	DSCompiler.java	cos	i	int	0	NIL-FOR	$ <= order
3499	1138	8	DSCompiler.java	sin	THIS	DSCompiler	0	DEF	$.order > 0
20881	1140	12	DSCompiler.java	sin	THIS	DSCompiler	0	NIL-FOR	i <= $.order
20881	1140	12	DSCompiler.java	sin	i	int	0	NIL-FOR	$ <= order
3500	1166	8	DSCompiler.java	tan	THIS	DSCompiler	0	DEF	$.order > 0
20882	1178	12	DSCompiler.java	tan	THIS	DSCompiler	0	NIL-FOR	n <= $.order
20882	1178	12	DSCompiler.java	tan	n	int	0	NIL-FOR	$ <= order
20883	1183	16	DSCompiler.java	tan	k	int	0	NIL-FOR	$ >= 0
3501	1185	20	DSCompiler.java	tan	k	int	1	DEF	$ > 2
3502	1187	27	DSCompiler.java	tan	k	int	0	DEF	$ == 2
3503	1191	16	DSCompiler.java	tan	n	int	0	DEF	($ & 0x1) == 0
3504	1220	8	DSCompiler.java	acos	THIS	DSCompiler	0	DEF	$.order > 0
20884	1234	12	DSCompiler.java	acos	THIS	DSCompiler	0	NIL-FOR	n <= $.order
20884	1234	12	DSCompiler.java	acos	n	int	0	NIL-FOR	$ <= order
20885	1239	16	DSCompiler.java	acos	k	int	0	NIL-FOR	$ >= 0
3505	1241	20	DSCompiler.java	acos	k	int	1	DEF	$ > 2
3506	1243	27	DSCompiler.java	acos	k	int	0	DEF	$ == 2
3507	1247	16	DSCompiler.java	acos	n	int	0	DEF	($ & 0x1) == 0
3508	1277	8	DSCompiler.java	asin	THIS	DSCompiler	0	DEF	$.order > 0
20886	1291	12	DSCompiler.java	asin	THIS	DSCompiler	0	NIL-FOR	n <= $.order
20886	1291	12	DSCompiler.java	asin	n	int	0	NIL-FOR	$ <= order
20887	1296	16	DSCompiler.java	asin	k	int	0	NIL-FOR	$ >= 0
3509	1298	20	DSCompiler.java	asin	k	int	1	DEF	$ > 2
3510	1300	27	DSCompiler.java	asin	k	int	0	DEF	$ == 2
3511	1304	16	DSCompiler.java	asin	n	int	0	DEF	($ & 0x1) == 0
3512	1334	8	DSCompiler.java	atan	THIS	DSCompiler	0	DEF	$.order > 0
20888	1348	12	DSCompiler.java	atan	THIS	DSCompiler	0	NIL-FOR	n <= $.order
20888	1348	12	DSCompiler.java	atan	n	int	0	NIL-FOR	$ <= order
20889	1353	16	DSCompiler.java	atan	k	int	0	NIL-FOR	$ >= 0
3513	1355	20	DSCompiler.java	atan	k	int	1	DEF	$ > 2
3514	1357	27	DSCompiler.java	atan	k	int	0	DEF	$ == 2
3515	1361	16	DSCompiler.java	atan	n	int	0	DEF	($ & 0x1) == 0
3516	1398	8	DSCompiler.java	atan2	x	double[]	1	DEF	$[xOffset] >= 0
3516	1398	8	DSCompiler.java	atan2	xOffset	int	1	DEF	x[$] >= 0
20890	1404	12	DSCompiler.java	atan2	THIS	DSCompiler	0	NIL-FOR	i < tmp2.$.length
20890	1404	12	DSCompiler.java	atan2	i	int	0	NIL-FOR	$ < tmp2.length
20890	1404	12	DSCompiler.java	atan2	tmp2	double[]	0	NIL-FOR	i < $.length
20891	1416	12	DSCompiler.java	atan2	THIS	DSCompiler	0	NIL-FOR	i < tmp2.$.length
20891	1416	12	DSCompiler.java	atan2	i	int	0	NIL-FOR	$ < tmp2.length
20891	1416	12	DSCompiler.java	atan2	tmp2	double[]	0	NIL-FOR	i < $.length
3517	1438	8	DSCompiler.java	cosh	THIS	DSCompiler	0	DEF	$.order > 0
20892	1440	12	DSCompiler.java	cosh	THIS	DSCompiler	0	NIL-FOR	i <= $.order
20892	1440	12	DSCompiler.java	cosh	i	int	0	NIL-FOR	$ <= order
3518	1464	8	DSCompiler.java	sinh	THIS	DSCompiler	0	DEF	$.order > 0
20893	1466	12	DSCompiler.java	sinh	THIS	DSCompiler	0	NIL-FOR	i <= $.order
20893	1466	12	DSCompiler.java	sinh	i	int	0	NIL-FOR	$ <= order
3519	1492	8	DSCompiler.java	tanh	THIS	DSCompiler	0	DEF	$.order > 0
20894	1504	12	DSCompiler.java	tanh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
20894	1504	12	DSCompiler.java	tanh	n	int	0	NIL-FOR	$ <= order
20895	1509	16	DSCompiler.java	tanh	k	int	0	NIL-FOR	$ >= 0
3520	1511	20	DSCompiler.java	tanh	k	int	1	DEF	$ > 2
3521	1513	27	DSCompiler.java	tanh	k	int	0	DEF	$ == 2
3522	1517	16	DSCompiler.java	tanh	n	int	0	DEF	($ & 0x1) == 0
3523	1546	8	DSCompiler.java	acosh	THIS	DSCompiler	0	DEF	$.order > 0
20896	1560	12	DSCompiler.java	acosh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
20896	1560	12	DSCompiler.java	acosh	n	int	0	NIL-FOR	$ <= order
20897	1565	16	DSCompiler.java	acosh	k	int	0	NIL-FOR	$ >= 0
3524	1567	20	DSCompiler.java	acosh	k	int	1	DEF	$ > 2
3525	1569	27	DSCompiler.java	acosh	k	int	0	DEF	$ == 2
3526	1573	16	DSCompiler.java	acosh	n	int	0	DEF	($ & 0x1) == 0
3527	1603	8	DSCompiler.java	asinh	THIS	DSCompiler	0	DEF	$.order > 0
20898	1617	12	DSCompiler.java	asinh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
20898	1617	12	DSCompiler.java	asinh	n	int	0	NIL-FOR	$ <= order
20899	1622	16	DSCompiler.java	asinh	k	int	0	NIL-FOR	$ >= 0
3528	1624	20	DSCompiler.java	asinh	k	int	1	DEF	$ > 2
3529	1626	27	DSCompiler.java	asinh	k	int	0	DEF	$ == 2
3530	1630	16	DSCompiler.java	asinh	n	int	0	DEF	($ & 0x1) == 0
3531	1660	8	DSCompiler.java	atanh	THIS	DSCompiler	0	DEF	$.order > 0
20900	1674	12	DSCompiler.java	atanh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
20900	1674	12	DSCompiler.java	atanh	n	int	0	NIL-FOR	$ <= order
20901	1679	16	DSCompiler.java	atanh	k	int	0	NIL-FOR	$ >= 0
3532	1681	20	DSCompiler.java	atanh	k	int	1	DEF	$ > 2
3533	1683	27	DSCompiler.java	atanh	k	int	0	DEF	$ == 2
3534	1687	16	DSCompiler.java	atanh	n	int	0	DEF	($ & 0x1) == 0
20902	1714	8	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	i < $.compIndirection.$.length
20902	1714	8	DSCompiler.java	compose	i	int	0	NIL-FOR	$ < compIndirection.length
20903	1717	12	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	j < mappingI.$.length
20903	1717	12	DSCompiler.java	compose	j	int	0	NIL-FOR	$ < mappingI.length
20903	1717	12	DSCompiler.java	compose	mappingI	int[][]	0	NIL-FOR	j < $.length
20904	1720	16	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	k < mappingIJ.$.length
20904	1720	16	DSCompiler.java	compose	k	int	0	NIL-FOR	$ < mappingIJ.length
20904	1720	16	DSCompiler.java	compose	mappingIJ	int[]	0	NIL-FOR	k < $.length
20905	1737	8	DSCompiler.java	taylor	i	int	0	NIL-FOR	$ >= 0
20906	1740	12	DSCompiler.java	taylor	THIS	DSCompiler	0	NIL-FOR	k < orders.$.length
20906	1740	12	DSCompiler.java	taylor	k	int	0	NIL-FOR	$ < orders.length
20906	1740	12	DSCompiler.java	taylor	orders	int[]	0	NIL-FOR	k < $.length
3535	1741	16	DSCompiler.java	taylor	k	int	0	DEF	orders[$] > 0
3535	1741	16	DSCompiler.java	taylor	orders	int[]	0	DEF	$[k] > 0
3536	1756	8	DSCompiler.java	checkCompatibility	THIS	DSCompiler	0	DimensionMismatchException	$.parameters != compiler.$.parameters
3536	1756	8	DSCompiler.java	checkCompatibility	compiler	DSCompiler	0	DimensionMismatchException	parameters != $.parameters
3537	1759	8	DSCompiler.java	checkCompatibility	THIS	DSCompiler	0	DimensionMismatchException	$.order != compiler.$.order
3537	1759	8	DSCompiler.java	checkCompatibility	compiler	DSCompiler	0	DimensionMismatchException	order != $.order
547	246	8	Decimal64.java	equals	obj	Object	0	RET	$ instanceof Decimal64
1641	114	8	DefaultIterativeLinearSolverEvent.java	getResidual	THIS	DefaultIterativeLinearSolverEvent	0	RET	$.r != null
521	50	8	DefaultTransformer.java	transform	o	Object	0	NullArgumentException	$ == null
522	54	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
523	69	8	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
523	69	8	DefaultTransformer.java	equals	other	Object	0	RET	this == $
3540	113	8	DerivativeStructure.java	DerivativeStructure	parameters	int	0	NumberIsTooLargeException	index >= $
3540	113	8	DerivativeStructure.java	DerivativeStructure	index	int	0	NumberIsTooLargeException	$ >= parameters
3541	117	8	DerivativeStructure.java	DerivativeStructure	order	int	0	DEF	$ > 0
3542	198	8	DerivativeStructure.java	DerivativeStructure	THIS	DerivativeStructure	0	DimensionMismatchException	derivatives.$.length != $.data.$.length
3542	198	8	DerivativeStructure.java	DerivativeStructure	derivatives	double	0	DimensionMismatchException	$.length != data.length
20910	312	8	DerivativeStructure.java	multiply	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
20910	312	8	DerivativeStructure.java	multiply	i	int	0	NIL-FOR	$ < ds.data.length
20910	312	8	DerivativeStructure.java	multiply	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
20911	337	8	DerivativeStructure.java	divide	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
20911	337	8	DerivativeStructure.java	divide	i	int	0	NIL-FOR	$ < ds.data.length
20911	337	8	DerivativeStructure.java	divide	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
20912	384	8	DerivativeStructure.java	negate	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
20912	384	8	DerivativeStructure.java	negate	i	int	0	NIL-FOR	$ < ds.data.length
20912	384	8	DerivativeStructure.java	negate	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
3543	394	8	DerivativeStructure.java	abs	THIS	DerivativeStructure	1	RET	Double.doubleToLongBits($.data[0]) < 0
3544	456	8	DerivativeStructure.java	copySign	m	long	0	RET	$ >= 0
3544	456	8	DerivativeStructure.java	copySign	m	long	0	RET	$ < 0
3544	456	8	DerivativeStructure.java	copySign	s	long	0	RET	$ >= 0
3544	456	8	DerivativeStructure.java	copySign	s	long	0	RET	$ < 0
20913	481	8	DerivativeStructure.java	scalb	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
20913	481	8	DerivativeStructure.java	scalb	i	int	0	NIL-FOR	$ < ds.data.length
20913	481	8	DerivativeStructure.java	scalb	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
3545	507	8	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isInfinite(y.$.data[0])
3545	507	8	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isInfinite(x.$.data[0])
3545	507	8	DerivativeStructure.java	hypot	x	DerivativeStructure	1	RET	Double.isInfinite($.data[0])
3545	507	8	DerivativeStructure.java	hypot	y	DerivativeStructure	1	RET	Double.isInfinite($.data[0])
3546	511	15	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isNaN(y.$.data[0])
3546	511	15	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isNaN(x.$.data[0])
3546	511	15	DerivativeStructure.java	hypot	x	DerivativeStructure	1	RET	Double.isNaN($.data[0])
3546	511	15	DerivativeStructure.java	hypot	y	DerivativeStructure	1	RET	Double.isNaN($.data[0])
3547	519	12	DerivativeStructure.java	hypot	expX	int	1	RET	$ > expY + 27
3547	519	12	DerivativeStructure.java	hypot	expY	int	1	RET	expX > $ + 27
3548	522	19	DerivativeStructure.java	hypot	expX	int	1	RET	expY > $ + 27
3548	522	19	DerivativeStructure.java	hypot	expY	int	1	RET	$ > expX + 27
3549	555	8	DerivativeStructure.java	compose	THIS	DerivativeStructure	0	DimensionMismatchException	f.$.length != $.getOrder() + 1
3549	555	8	DerivativeStructure.java	compose	f	double	0	DimensionMismatchException	$.length != getOrder() + 1
20914	821	8	DerivativeStructure.java	toDegrees	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
20914	821	8	DerivativeStructure.java	toDegrees	i	int	0	NIL-FOR	$ < ds.data.length
20914	821	8	DerivativeStructure.java	toDegrees	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
20915	832	8	DerivativeStructure.java	toRadians	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
20915	832	8	DerivativeStructure.java	toRadians	i	int	0	NIL-FOR	$ < ds.data.length
20915	832	8	DerivativeStructure.java	toRadians	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
2185	140	8	DescriptiveStatistics.java	DescriptiveStatistics	initialDoubleArray	double[]	0	DEF	$ != null
2186	165	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
2187	166	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
2188	168	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
2189	252	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
2190	253	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
2191	356	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ < 1
2192	357	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ != INFINITE_WINDOW
2193	368	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
2193	368	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
2193	368	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
2194	429	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
2952	217	8	Dfp.java	Dfp	x	long	0	DEF	$ == Long.MIN_VALUE
2953	225	8	Dfp.java	Dfp	x	long	1	DEF	$ < 0
20661	233	8	Dfp.java	Dfp	x	long	0	NIL-WHILE	$ != 0
2954	240	8	Dfp.java	Dfp	isLongMin	boolean	0	DEF	$
20662	243	12	Dfp.java	Dfp	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
20662	243	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < mant.length - 1
2955	244	16	Dfp.java	Dfp	THIS	Dfp	0	DEF	$.mant[i] != 0
2955	244	16	Dfp.java	Dfp	i	int	0	DEF	mant[$] != 0
2956	269	8	Dfp.java	Dfp	exponent	int	0	RET	$ == -1023
2957	271	12	Dfp.java	Dfp	x	double	0	RET	$ == 0
2958	273	16	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
20663	282	12	Dfp.java	Dfp	mantissa	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
2959	289	8	Dfp.java	Dfp	exponent	int	0	RET	$ == 1024
2960	291	12	Dfp.java	Dfp	x	double	1	DEF	$ != $
2961	294	19	Dfp.java	Dfp	x	double	1	DEF	$ < 0
2962	308	8	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
2963	349	8	Dfp.java	Dfp	s	String	0	RET	$.equals(POS_INFINITY_STRING)
2964	355	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NEG_INFINITY_STRING)
2965	361	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NAN_STRING)
2966	369	8	Dfp.java	Dfp	p	int	0	DEF	$ == -1
2967	375	8	Dfp.java	Dfp	p	int	1	DEF	$ != -1
20664	381	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$<fpexp.length()
20664	381	12	Dfp.java	Dfp	fpexp	String	0	NIL-FOR	i<$.length()
2968	383	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) == '-'
2968	383	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) == '-'
2969	388	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) >= '0'
2969	388	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) <= '9'
2969	388	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) >= '0'
2969	388	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) <= '9'
2970	393	12	Dfp.java	Dfp	negative	boolean	0	DEF	$
2971	402	8	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.indexOf("-") != -1
2972	412	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) >= '1'
2972	412	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) <= '9'
2972	412	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) >= '1'
2972	412	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) <= '9'
2973	416	12	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2973	416	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '0'
2973	416	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '0'
2974	420	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
2974	420	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
2975	426	12	Dfp.java	Dfp	p	int	0	DEF	$ == fpdecimal.length()
2975	426	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == $.length()
2976	439	12	Dfp.java	Dfp	p	int	0	DEF	$ == (fpdecimal.length())
2976	439	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == ($.length())
2977	444	12	Dfp.java	Dfp	THIS	Dfp	0	DEF	q == $.mant.$.length*rsize+offset+1
2977	444	12	Dfp.java	Dfp	rsize	int	0	DEF	q == mant.length*$+offset+1
2977	444	12	Dfp.java	Dfp	offset	int	0	DEF	q == mant.length*rsize+$+1
2977	444	12	Dfp.java	Dfp	q	int	0	DEF	$ == mant.length*rsize+offset+1
2978	448	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
2978	448	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
2979	455	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) > '9'
2979	455	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) < '0'
2979	455	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) > '9'
2979	455	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) < '0'
2980	468	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2980	468	8	Dfp.java	Dfp	offset	int	0	DEF	q != $
2980	468	8	Dfp.java	Dfp	q	int	0	DEF	$ != offset
2981	471	16	Dfp.java	Dfp	offset	int	0	DEF	q == $
2981	471	16	Dfp.java	Dfp	q	int	0	DEF	$ == offset
2982	474	16	Dfp.java	Dfp	striped	char[]	1	DEF	$[q] == '0'
2982	474	16	Dfp.java	Dfp	q	int	1	DEF	striped[$] == '0'
2983	483	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2983	483	8	Dfp.java	Dfp	significantDigits	int	0	DEF	$ == 0
2984	488	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
20665	496	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	$ > q
20665	496	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	p > $
2985	497	12	Dfp.java	Dfp	striped	char[]	0	DEF	$[p] != '0'
2985	497	12	Dfp.java	Dfp	p	int	0	DEF	striped[$] != '0'
20666	509	8	Dfp.java	Dfp	THIS	Dfp	0	NIL-WHILE	(p - q) < ($.mant.$.length * rsize)
20666	509	8	Dfp.java	Dfp	rsize	int	0	NIL-WHILE	(p - q) < (mant.length * $)
20666	509	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	($ - q) < (mant.length * rsize)
20666	509	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	(p - $) < (mant.length * rsize)
20667	510	12	Dfp.java	Dfp	rsize	int	0	NIL-FOR	i < $
20667	510	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < rsize
20668	517	8	Dfp.java	Dfp	i	int	0	NIL-FOR	$ >= 0
2986	528	8	Dfp.java	Dfp	THIS	Dfp	0	DEF	q < striped.$.length
2986	528	8	Dfp.java	Dfp	striped	char[]	0	DEF	q < $.length
2986	528	8	Dfp.java	Dfp	q	int	0	DEF	$ < striped.length
2987	597	8	Dfp.java	newInstance	THIS	Dfp	0	RET	$.field.getRadixDigits() != d.$.field.getRadixDigits()
2987	597	8	Dfp.java	newInstance	d	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
20669	669	8	Dfp.java	shiftLeft	i	int	0	NIL-FOR	$ > 0
20670	681	8	Dfp.java	shiftRight	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
20670	681	8	Dfp.java	shiftRight	i	int	0	NIL-FOR	$ < mant.length - 1
2988	703	8	Dfp.java	align	adiff	int	0	DEF	$ < 0
2989	707	8	Dfp.java	align	diff	int	0	RET	$ == 0
2990	711	8	Dfp.java	align	THIS	Dfp	0	RET	adiff > ($.mant.$.length + 1)
2990	711	8	Dfp.java	align	adiff	int	0	RET	$ > (mant.length + 1)
20671	722	8	Dfp.java	align	i	int	0	NIL-FOR	$ < adiff
20671	722	8	Dfp.java	align	adiff	int	0	NIL-FOR	i < $
2991	723	12	Dfp.java	align	diff	int	1	DEF	$ < 0
2992	728	16	Dfp.java	align	lostdigit	int	0	DEF	$ != 0
2993	740	8	Dfp.java	align	inexact	boolean	0	DEF	$
2994	756	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2994	756	8	Dfp.java	lessThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2995	765	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.isNaN()
2995	765	8	Dfp.java	lessThan	x	Dfp	0	RET	$.isNaN()
2996	781	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2996	781	8	Dfp.java	greaterThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2997	790	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.isNaN()
2997	790	8	Dfp.java	greaterThan	x	Dfp	0	RET	$.isNaN()
2998	804	8	Dfp.java	negativeOrNull	THIS	Dfp	0	RET	$.isNaN()
2999	819	8	Dfp.java	strictlyNegative	THIS	Dfp	0	RET	$.isNaN()
3000	834	8	Dfp.java	positiveOrNull	THIS	Dfp	0	RET	$.isNaN()
3001	849	8	Dfp.java	strictlyPositive	THIS	Dfp	0	RET	$.isNaN()
3002	887	8	Dfp.java	isZero	THIS	Dfp	0	RET	$.isNaN()
3003	904	8	Dfp.java	equals	other	Object	0	RET	$ instanceof Dfp
3004	906	12	Dfp.java	equals	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3004	906	12	Dfp.java	equals	THIS	Dfp	0	RET	$.isNaN()
3004	906	12	Dfp.java	equals	x	Dfp	0	RET	$.isNaN()
3004	906	12	Dfp.java	equals	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3005	931	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3005	931	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.isNaN()
3005	931	8	Dfp.java	unequal	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3005	931	8	Dfp.java	unequal	x	Dfp	0	RET	$.isNaN()
3006	946	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
3006	946	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length - 1] == 0
3006	946	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[a.$.mant.$.length - 1] == 0
3006	946	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
3006	946	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
3006	946	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
3006	946	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
3006	946	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
3007	951	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.sign != b.$.sign
3007	951	8	Dfp.java	compare	a	Dfp	0	RET	$.sign != b.sign
3007	951	8	Dfp.java	compare	b	Dfp	0	RET	a.sign != $.sign
3008	952	12	Dfp.java	compare	THIS	Dfp	1	RET	a.$.sign == -1
3008	952	12	Dfp.java	compare	a	Dfp	1	RET	$.sign == -1
3009	960	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
3009	960	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
3009	960	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
3009	960	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
3010	964	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
3010	964	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
3010	964	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
3010	964	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
3011	968	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
3011	968	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
3011	968	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
3011	968	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
3012	973	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length-1] != 0
3012	973	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[b.$.mant.$.length-1] != 0
3012	973	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[b.mant.length-1] != 0
3012	973	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length-1] != 0
3012	973	8	Dfp.java	compare	b	Dfp	0	RET	a.mant[$.mant.length-1] != 0
3013	974	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp < b.$.exp
3013	974	12	Dfp.java	compare	a	Dfp	0	RET	$.exp < b.exp
3013	974	12	Dfp.java	compare	b	Dfp	0	RET	a.exp < $.exp
3014	978	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp > b.$.exp
3014	978	12	Dfp.java	compare	a	Dfp	0	RET	$.exp > b.exp
3014	978	12	Dfp.java	compare	b	Dfp	0	RET	a.exp > $.exp
20672	984	8	Dfp.java	compare	i	int	0	NIL-FOR	$ >= 0
3015	985	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] > b.$.mant[i]
3015	985	12	Dfp.java	compare	i	int	0	RET	a.mant[$] > b.mant[$]
3015	985	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] > b.mant[i]
3015	985	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] > $.mant[i]
3016	989	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] < b.$.mant[i]
3016	989	12	Dfp.java	compare	i	int	0	RET	a.mant[$] < b.mant[$]
3016	989	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] < b.mant[i]
3016	989	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] < $.mant[i]
3017	1032	8	Dfp.java	remainder	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3017	1032	8	Dfp.java	remainder	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3018	1047	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.isNaN()
3019	1051	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.nans == INFINITE
3020	1055	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3021	1062	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp < 0
3022	1073	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp >= $.mant.$.length
20673	1081	8	Dfp.java	trunc	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length-result.$.exp
20673	1081	8	Dfp.java	trunc	i	int	0	NIL-FOR	$ < mant.length-result.exp
20673	1081	8	Dfp.java	trunc	result	Dfp	0	NIL-FOR	i < mant.length-$.exp
3023	1086	8	Dfp.java	trunc	changed	boolean	0	RET	$
3024	1089	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == -1
3024	1089	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == -1
3025	1096	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == 1
3025	1096	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == 1
3026	1107	20	Dfp.java	trunc	half	Dfp	0	DEF	a.greaterThan($)
3026	1107	20	Dfp.java	trunc	a	Dfp	0	DEF	$.greaterThan(half)
3027	1114	20	Dfp.java	trunc	THIS	Dfp	0	DEF	(result.$.mant[$.mant.$.length-result.$.exp]&1) != 0
3027	1114	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.exp > 0
3027	1114	20	Dfp.java	trunc	half	Dfp	0	DEF	a.equals($)
3027	1114	20	Dfp.java	trunc	a	Dfp	0	DEF	$.equals(half)
3027	1114	20	Dfp.java	trunc	result	Dfp	0	DEF	($.mant[mant.length-$.exp]&1) != 0
3027	1114	20	Dfp.java	trunc	result	Dfp	0	DEF	$.exp > 0
3028	1140	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.greaterThan($.newInstance(2147483647))
3028	1140	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.greaterThan(newInstance(2147483647))
3029	1144	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.lessThan($.newInstance(-2147483648))
3029	1144	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.lessThan(newInstance(-2147483648))
20674	1148	8	Dfp.java	intValue	THIS	Dfp	0	NIL-FOR	i >= $.mant.$.length - rounded.$.exp
20674	1148	8	Dfp.java	intValue	i	int	0	NIL-FOR	$ >= mant.length - rounded.exp
20674	1148	8	Dfp.java	intValue	rounded	Dfp	0	NIL-FOR	i >= mant.length - $.exp
3030	1152	8	Dfp.java	intValue	THIS	Dfp	0	DEF	rounded.$.sign == -1
3030	1152	8	Dfp.java	intValue	rounded	Dfp	0	DEF	$.sign == -1
3031	1182	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 1000
3032	1185	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 100
3033	1188	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 10
3034	1201	8	Dfp.java	power10	e	int	1	DEF	$ >= 0
20675	1232	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
20675	1232	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
20676	1238	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
20676	1238	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
3035	1254	8	Dfp.java	add	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3035	1254	8	Dfp.java	add	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3036	1262	8	Dfp.java	add	THIS	Dfp	0	RET	$.nans != FINITE
3036	1262	8	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans != FINITE
3036	1262	8	Dfp.java	add	x	Dfp	0	RET	$.nans != FINITE
3037	1263	12	Dfp.java	add	THIS	Dfp	0	RET	$.isNaN()
3038	1267	12	Dfp.java	add	x	Dfp	0	RET	$.isNaN()
3039	1271	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == FINITE
3039	1271	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
3039	1271	12	Dfp.java	add	x	Dfp	0	RET	$.nans == FINITE
3040	1275	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
3040	1275	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == FINITE
3040	1275	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
3041	1279	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign == x.$.sign
3041	1279	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
3041	1279	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
3041	1279	12	Dfp.java	add	x	Dfp	0	RET	sign == $.sign
3041	1279	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
3042	1283	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
3042	1283	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign != x.$.sign
3042	1283	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
3042	1283	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
3042	1283	12	Dfp.java	add	x	Dfp	0	RET	sign != $.sign
3043	1308	8	Dfp.java	add	THIS	Dfp	0	DEF	$.compare(a, b) > 0
3043	1308	8	Dfp.java	add	a	Dfp	0	DEF	compare($, b) > 0
3043	1308	8	Dfp.java	add	b	Dfp	0	DEF	compare(a, $) > 0
3044	1315	8	Dfp.java	add	THIS	Dfp	0	DEF	b.$.mant[$.mant.$.length-1] == 0
3044	1315	8	Dfp.java	add	b	Dfp	0	DEF	$.mant[mant.length-1] == 0
3045	1319	8	Dfp.java	add	THIS	Dfp	0	DEF	a.$.mant[$.mant.$.length-1] == 0
3045	1319	8	Dfp.java	add	a	Dfp	0	DEF	$.mant[mant.length-1] == 0
3046	1326	8	Dfp.java	add	THIS	Dfp	1	DEF	a.$.exp < b.$.exp
3046	1326	8	Dfp.java	add	a	Dfp	1	DEF	$.exp < b.exp
3046	1326	8	Dfp.java	add	b	Dfp	1	DEF	a.exp < $.exp
3047	1333	8	Dfp.java	add	asign	byte	0	DEF	$ != bsign
3047	1333	8	Dfp.java	add	bsign	byte	0	DEF	asign != $
3048	1334	12	Dfp.java	add	asign	byte	1	DEF	$ == rsign
3048	1334	12	Dfp.java	add	rsign	byte	1	DEF	asign == $
20677	1343	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
20677	1343	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
3049	1354	8	Dfp.java	add	asign	byte	0	DEF	$ == bsign
3049	1354	8	Dfp.java	add	bsign	byte	0	DEF	asign == $
3049	1354	8	Dfp.java	add	rh	int	0	DEF	$ != 0
3050	1359	12	Dfp.java	add	excp	int	0	DEF	$ != 0
20678	1365	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
20678	1365	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
3051	1366	12	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] != 0
3051	1366	12	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] != 0
3052	1370	12	Dfp.java	add	i	int	0	DEF	$ == 0
3053	1378	8	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3053	1378	8	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3054	1381	12	Dfp.java	add	asign	byte	0	DEF	$ != bsign
3054	1381	12	Dfp.java	add	bsign	byte	0	DEF	asign != $
3055	1389	8	Dfp.java	add	excp	int	0	DEF	$ != 0
3056	1454	8	Dfp.java	round	inc	boolean	0	DEF	$
20679	1457	12	Dfp.java	round	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
20679	1457	12	Dfp.java	round	i	int	0	NIL-FOR	$ < mant.length
3057	1463	12	Dfp.java	round	rh	int	0	DEF	$ != 0
3058	1470	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp < MIN_EXP
3059	1476	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp > MAX_EXP
3060	1482	8	Dfp.java	round	n	int	0	RET	$ != 0
3061	1499	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3061	1499	8	Dfp.java	multiply	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3062	1509	8	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans != FINITE
3062	1509	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
3062	1509	8	Dfp.java	multiply	x	Dfp	0	RET	$.nans != FINITE
3063	1510	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
3064	1514	12	Dfp.java	multiply	x	Dfp	0	RET	$.isNaN()
3065	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
3065	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
3065	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] != 0
3065	1518	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
3065	1518	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] != 0
3066	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
3066	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] != 0
3066	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
3066	1524	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
3067	1530	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
3067	1530	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
3067	1530	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
3068	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
3068	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] == 0
3068	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
3068	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3068	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
3068	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
3068	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
3068	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] == 0
3068	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
20680	1548	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
20680	1548	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
20681	1550	12	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	j<$.mant.$.length
20681	1550	12	Dfp.java	multiply	j	int	0	NIL-FOR	$<mant.length
20682	1562	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ >= 0
3069	1563	12	Dfp.java	multiply	i	int	0	DEF	product[$] != 0
3069	1563	12	Dfp.java	multiply	product	int[]	0	DEF	$[i] != 0
20683	1570	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
20683	1570	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
3070	1578	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3070	1578	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3071	1584	8	Dfp.java	multiply	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
3071	1584	8	Dfp.java	multiply	md	int	1	DEF	$ > (mant.length-1)
3072	1590	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
3073	1603	8	Dfp.java	multiply	x	int	1	RET	$ >= 0
3073	1603	8	Dfp.java	multiply	x	int	1	RET	$ < RADIX
3074	1619	8	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans != FINITE
3075	1620	12	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.isNaN()
3076	1624	12	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans == INFINITE
3076	1624	12	Dfp.java	multiplyFast	x	int	0	RET	$ != 0
3077	1629	12	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans == INFINITE
3077	1629	12	Dfp.java	multiplyFast	x	int	0	RET	$ == 0
3078	1639	8	Dfp.java	multiplyFast	x	int	0	RET	$ < 0
3078	1639	8	Dfp.java	multiplyFast	x	int	0	RET	$ >= RADIX
20684	1648	8	Dfp.java	multiplyFast	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
20684	1648	8	Dfp.java	multiplyFast	i	int	0	NIL-FOR	$ < mant.length
3079	1655	8	Dfp.java	multiplyFast	rh	int	0	DEF	$ != 0
3080	1661	8	Dfp.java	multiplyFast	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3080	1661	8	Dfp.java	multiplyFast	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3081	1666	8	Dfp.java	multiplyFast	excp	int	0	DEF	$ != 0
3082	1690	8	Dfp.java	divide	THIS	Dfp	0	RET	$.field.getRadixDigits() != divisor.$.field.getRadixDigits()
3082	1690	8	Dfp.java	divide	divisor	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3083	1700	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
3083	1700	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans != FINITE
3083	1700	8	Dfp.java	divide	divisor	Dfp	0	RET	$.nans != FINITE
3084	1701	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
3085	1705	12	Dfp.java	divide	divisor	Dfp	0	RET	$.isNaN()
3086	1709	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == FINITE
3086	1709	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3086	1709	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == FINITE
3087	1715	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
3087	1715	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == FINITE
3087	1715	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
3088	1721	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
3088	1721	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3088	1721	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
3089	1731	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.mant[$.mant.$.length-1] == 0
3089	1731	8	Dfp.java	divide	divisor	Dfp	0	RET	$.mant[mant.length-1] == 0
20685	1754	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
20685	1754	8	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
20686	1762	8	Dfp.java	divide	qd	int	0	NIL-FOR	$ >= 0
20687	1771	12	Dfp.java	divide	trialgood	boolean	0	NIL-WHILE	$
20688	1777	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
20688	1777	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
20689	1786	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
20689	1786	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
3090	1793	16	Dfp.java	divide	rh	int	0	DEF	$ == 0
3091	1803	16	Dfp.java	divide	minadj	int	0	DEF	$ >= 2
20690	1811	16	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3092	1812	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] > remainder[i]
3092	1812	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] > remainder[$]
3092	1812	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] > $[i]
3092	1812	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] > remainder[i]
3093	1815	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] < remainder[i]
3093	1815	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] < remainder[$]
3093	1815	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] < $[i]
3093	1815	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] < remainder[i]
3094	1820	16	Dfp.java	divide	THIS	Dfp	0	DEF	remainder[$.mant.$.length] != 0
3094	1820	16	Dfp.java	divide	remainder	int[]	0	DEF	$[mant.length] != 0
3095	1824	16	Dfp.java	divide	trialgood	boolean	0	DEF	$ == false
3096	1831	12	Dfp.java	divide	nsqd	int	0	DEF	$ != 0
3096	1831	12	Dfp.java	divide	trial	int	0	DEF	$ != 0
3097	1835	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd == $.mant.$.length
3097	1835	12	Dfp.java	divide	THIS	Dfp	0	DEF	$.field.getRoundingMode() == DfpField.$.RoundingMode.ROUND_DOWN
3097	1835	12	Dfp.java	divide	nsqd	int	0	DEF	$ == mant.length
3098	1840	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd > $.mant.$.length
3098	1840	12	Dfp.java	divide	nsqd	int	0	DEF	$ > mant.length
20691	1847	12	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
20691	1847	12	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
20692	1854	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3099	1855	12	Dfp.java	divide	i	int	0	DEF	quotient[$] != 0
3099	1855	12	Dfp.java	divide	quotient	int[]	0	DEF	$[i] != 0
20693	1862	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i<$.mant.$.length
20693	1862	8	Dfp.java	divide	i	int	0	NIL-FOR	$<mant.length
3100	1870	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3100	1870	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3101	1874	8	Dfp.java	divide	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
3101	1874	8	Dfp.java	divide	md	int	1	DEF	$ > (mant.length-1)
3102	1880	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
3103	1895	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
3104	1896	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
3105	1900	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3106	1906	8	Dfp.java	divide	divisor	int	0	RET	$ == 0
3107	1916	8	Dfp.java	divide	divisor	int	0	RET	$ < 0
3107	1916	8	Dfp.java	divide	divisor	int	0	RET	$ >= RADIX
20694	1927	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3108	1934	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3108	1934	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3109	1944	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
3110	1963	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3110	1963	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == FINITE
3111	1968	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans != FINITE
3112	1969	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == INFINITE
3112	1969	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == 1
3113	1974	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == QNAN
3114	1978	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == SNAN
3115	1988	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == -1
3116	2002	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp < -1
3116	2002	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp > 1
3116	2002	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp < -1
3116	2002	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp > 1
20695	2028	8	Dfp.java	sqrt	x	Dfp	0	NIL-WHILE	$.unequal(px)
20695	2028	8	Dfp.java	sqrt	px	Dfp	0	NIL-WHILE	x.unequal($)
3117	2037	12	Dfp.java	sqrt	x	Dfp	0	DEF	$.equals(ppx)
3117	2037	12	Dfp.java	sqrt	ppx	Dfp	0	DEF	x.equals($)
3118	2044	12	Dfp.java	sqrt	THIS	Dfp	0	DEF	dx.$.mant[$.mant.$.length-1] == 0
3118	2044	12	Dfp.java	sqrt	dx	Dfp	0	DEF	$.mant[mant.length-1] == 0
3119	2058	8	Dfp.java	toString	THIS	Dfp	0	RET	$.nans != FINITE
3120	2060	12	Dfp.java	toString	THIS	Dfp	1	RET	$.nans == INFINITE
3121	2067	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp > $.mant.$.length
3121	2067	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp < -1
20696	2089	8	Dfp.java	dfp2sci	i	int	0	NIL-FOR	$ >= 0
20697	2097	8	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-FOR	p < rawdigits.$.length
20697	2097	8	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-FOR	p < $.length
20697	2097	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ < rawdigits.length
3122	2098	12	Dfp.java	dfp2sci	rawdigits	char[]	0	DEF	$[p] != '0'
3122	2098	12	Dfp.java	dfp2sci	p	int	0	DEF	rawdigits[$] != '0'
3123	2106	8	Dfp.java	dfp2sci	THIS	Dfp	0	DEF	$.sign == -1
3124	2110	8	Dfp.java	dfp2sci	THIS	Dfp	1	DEF	p != rawdigits.$.length
3124	2110	8	Dfp.java	dfp2sci	rawdigits	char[]	1	DEF	p != $.length
3124	2110	8	Dfp.java	dfp2sci	p	int	1	DEF	$ != rawdigits.length
20698	2115	12	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-WHILE	p<rawdigits.$.length
20698	2115	12	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-WHILE	p<$.length
20698	2115	12	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$<rawdigits.length
3125	2133	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
20699	2138	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ > ae
20699	2138	8	Dfp.java	dfp2sci	ae	int	0	NIL-FOR	p > $
3126	2142	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
20700	2146	8	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$ > 0
3127	2168	8	Dfp.java	dfp2string	e	int	0	DEF	$ <= 0
20701	2174	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ < 0
20702	2182	8	Dfp.java	dfp2string	i	int	0	NIL-FOR	$ >= 0
3128	2187	12	Dfp.java	dfp2string	e	int	0	DEF	--$ == 0
20703	2193	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ > 0
3129	2201	8	Dfp.java	dfp2string	pointInserted	boolean	0	DEF	$
20704	2208	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[q] == '0'
20704	2208	8	Dfp.java	dfp2string	q	int	0	NIL-WHILE	buffer[$] == '0'
3130	2211	8	Dfp.java	dfp2string	buffer	char[]	0	DEF	$[q] == '.'
3130	2211	8	Dfp.java	dfp2string	q	int	0	DEF	buffer[$] == '.'
20705	2216	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[p-1] == '0'
20705	2216	8	Dfp.java	dfp2string	p	int	0	NIL-WHILE	buffer[$-1] == '0'
3131	2221	8	Dfp.java	dfp2string	THIS	Dfp	0	DEF	$.sign < 0
3132	2247	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] != 0
3132	2247	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
3133	2254	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
3133	2254	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] == 0
3134	2260	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
3134	2260	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == QNAN
3135	2265	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == SNAN
3135	2265	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
3136	2272	16	Dfp.java	dotrap	THIS	Dfp	1	DEF	(result.$.exp+$.mant.$.length) < MIN_EXP
3136	2272	16	Dfp.java	dotrap	result	Dfp	1	DEF	($.exp+mant.length) < MIN_EXP
3137	2337	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3137	2337	8	Dfp.java	nextAfter	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3138	2346	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan(x)
3138	2346	8	Dfp.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
3139	2350	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.compare(this, x) == 0
3139	2350	8	Dfp.java	nextAfter	x	Dfp	0	RET	compare(this, $) == 0
3140	2354	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan($.getZero())
3141	2360	8	Dfp.java	nextAfter	up	boolean	1	DEF	$
3142	2365	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
3143	2375	12	Dfp.java	nextAfter	THIS	Dfp	1	DEF	$.equals(inc)
3143	2375	12	Dfp.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
3144	2381	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
3145	2388	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.classify() != INFINITE
3145	2388	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
3146	2393	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero()) == false
3146	2393	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	result.equals($.getZero())
3146	2393	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
3147	2408	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isInfinite()
3148	2409	12	Dfp.java	toDouble	THIS	Dfp	1	RET	$.lessThan($.getZero())
3149	2416	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isNaN()
3150	2423	8	Dfp.java	toDouble	cmp0	int	1	RET	$ == 0
3151	2425	15	Dfp.java	toDouble	cmp0	int	0	DEF	$ < 0
3152	2433	8	Dfp.java	toDouble	exponent	int	0	DEF	$ < 0
20706	2438	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.equals($)
20706	2438	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.lessThan($)
20706	2438	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.equals(y)
20706	2438	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.lessThan(y)
3153	2447	8	Dfp.java	toDouble	exponent	int	0	DEF	$ > -1023
3154	2451	8	Dfp.java	toDouble	exponent	int	0	RET	$ < -1074
3155	2455	8	Dfp.java	toDouble	exponent	int	0	RET	$ > 1023
3156	2465	8	Dfp.java	toDouble	mantissa	long	0	DEF	$ == 4503599627370496L
3157	2472	8	Dfp.java	toDouble	exponent	int	0	DEF	$ <= -1023
20707	2476	8	Dfp.java	toDouble	exponent	int	0	NIL-WHILE	$ < -1023
3158	2484	8	Dfp.java	toDouble	negate	boolean	0	DEF	$
2931	131	8	DfpDec.java	newInstance	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != d.getField().getRadixDigits()
2931	131	8	DfpDec.java	newInstance	d	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2932	168	8	DfpDec.java	round	msb	int	0	RET	$ == 0
20657	175	8	DfpDec.java	round	msb	int	0	NIL-WHILE	lsbthreshold > $
20657	175	8	DfpDec.java	round	lsbthreshold	int	0	NIL-WHILE	$ > msb
20658	186	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsbshift % 4
20658	186	8	DfpDec.java	round	lsbshift	int	0	NIL-FOR	i < $ % 4
2933	192	8	DfpDec.java	round	THIS	DfpDec	0	RET	digits == 4 * $.mant.$.length - 3
2933	192	8	DfpDec.java	round	lsbthreshold	int	0	RET	$ <= 1
2933	192	8	DfpDec.java	round	digits	int	0	RET	$ == 4 * mant.length - 3
2934	198	8	DfpDec.java	round	lsbthreshold	int	1	DEF	$ == 1
20659	208	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsd
20659	208	8	DfpDec.java	round	lsd	int	0	NIL-FOR	i < $
2935	255	8	DfpDec.java	round	inc	boolean	0	DEF	$
20660	258	12	DfpDec.java	round	THIS	DfpDec	0	NIL-FOR	i < $.mant.$.length
20660	258	12	DfpDec.java	round	i	int	0	NIL-FOR	$ < mant.length
2936	264	12	DfpDec.java	round	rh	int	0	DEF	$ != 0
2937	271	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp < MIN_EXP
2938	277	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp > MAX_EXP
2939	283	8	DfpDec.java	round	discarded	int	0	RET	$ != 0
2939	283	8	DfpDec.java	round	n	int	0	RET	$ != 0
2940	298	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != x.getField().getRadixDigits()
2940	298	8	DfpDec.java	nextAfter	x	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2941	310	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan(x)
2941	310	8	DfpDec.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
2942	314	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.equals(x)
2942	314	8	DfpDec.java	nextAfter	x	Dfp	0	RET	equals($)
2943	318	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan($.getZero())
2944	322	8	DfpDec.java	nextAfter	up	boolean	1	DEF	$
2945	326	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2946	330	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2946	330	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2947	339	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	$.equals(inc)
2947	339	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
2948	345	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2949	349	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2949	349	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2950	356	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.classify() != INFINITE
2950	356	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
2951	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero()) == false
2951	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	result.equals($.getZero())
2951	361	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
3159	200	8	DfpField.java	DfpField	computeConstants	boolean	1	DEF	$
20708	537	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
20708	537	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
20708	537	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
3160	540	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3160	540	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '1'
3160	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
3160	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '1'
3161	544	8	DfpField.java	split	i	int	0	DEF	buf[$] == '.'
3161	544	8	DfpField.java	split	buf	char[]	0	DEF	$[i] == '.'
3162	549	8	DfpField.java	split	THIS	DfpField	0	DEF	sig == ($.radixDigits / 2) * 4
3162	549	8	DfpField.java	split	sig	int	0	DEF	$ == (radixDigits / 2) * 4
3163	554	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
3163	554	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3163	554	8	DfpField.java	split	leading	boolean	0	DEF	$
3163	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
3163	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
20709	561	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
20709	561	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
20709	561	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
3164	563	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3164	563	8	DfpField.java	split	i	int	0	DEF	$ < sp
3164	563	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
3164	563	8	DfpField.java	split	sp	int	0	DEF	i < $
3164	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
3164	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
3165	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String.length() < highPrecisionDecimalDigits - 3
3165	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String == null
3165	578	8	DfpField.java	computeStringConstants	highPrecisionDecimalDigits	int	0	DEF	sqr2String.length() < $ - 3
20710	623	8	DfpField.java	computePi	i	int	0	NIL-FOR	$ < 20
3166	637	12	DfpField.java	computePi	ykM1	Dfp	0	DEF	yk.equals($)
3166	637	12	DfpField.java	computePi	yk	Dfp	0	DEF	$.equals(ykM1)
20711	659	8	DfpField.java	computeExp	i	int	0	NIL-FOR	$ < 10000
3167	664	12	DfpField.java	computeExp	y	Dfp	0	DEF	$.equals(py)
3167	664	12	DfpField.java	computeExp	py	Dfp	0	DEF	y.equals($)
20712	742	8	DfpField.java	computeLn	i	int	0	NIL-FOR	$ < 10000
3168	748	12	DfpField.java	computeLn	y	Dfp	0	DEF	$.equals(py)
3168	748	12	DfpField.java	computeLn	py	Dfp	0	DEF	y.equals($)
20717	54	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
20717	54	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
20717	54	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
3186	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3186	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '1'
3186	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3186	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '1'
3187	61	12	DfpMath.java	split	i	int	0	DEF	buf[$] == '.'
3187	61	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] == '.'
3188	66	12	DfpMath.java	split	sig	int	0	DEF	$ == (field.getRadixDigits() / 2) * 4
3188	66	12	DfpMath.java	split	field	DfpField	0	DEF	sig == ($.getRadixDigits() / 2) * 4
3189	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3189	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
3189	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3189	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
3189	71	12	DfpMath.java	split	leading	boolean	0	DEF	$
20718	78	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
20718	78	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
20718	78	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
3190	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
3190	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3190	80	12	DfpMath.java	split	i	int	0	DEF	$ < sp
3190	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
3190	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3190	80	12	DfpMath.java	split	sp	int	0	DEF	i < $
3191	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].equals($[1])
3191	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].classify() == Dfp.INFINITE
3192	162	8	DfpMath.java	splitPow	a	int	0	RET	$ == 0
3193	167	8	DfpMath.java	splitPow	a	int	0	DEF	$ < 0
20719	174	8	DfpMath.java	splitPow	a	int	0	NIL-DOWHILE	$ >= 1
3194	183	16	DfpMath.java	splitPow	trial	int	0	DEF	$ > a
3194	183	16	DfpMath.java	splitPow	a	int	0	DEF	trial > $
3195	198	8	DfpMath.java	splitPow	invert	boolean	0	DEF	$
3196	217	8	DfpMath.java	pow	a	int	0	RET	$ == 0
3197	222	8	DfpMath.java	pow	a	int	0	DEF	$ < 0
20720	228	8	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$ >= 1
20721	234	12	DfpMath.java	pow	trial	int	0	NIL-DOWHILE	a>$
20721	234	12	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$>trial
3198	249	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3199	270	8	DfpMath.java	exp	ia	int	0	RET	$ > 2147483646
3200	275	8	DfpMath.java	exp	ia	int	0	RET	$ < -2147483646
20722	297	8	DfpMath.java	expInternal	i	int	0	NIL-FOR	$ < 90
3201	301	12	DfpMath.java	expInternal	y	Dfp	0	DEF	$.equals(py)
3201	301	12	DfpMath.java	expInternal	py	Dfp	0	DEF	y.equals($)
3202	324	8	DfpMath.java	log	a	Dfp	0	RET	$.lessThan($.getZero())
3202	324	8	DfpMath.java	log	a	Dfp	0	RET	$.isNaN()
3202	324	8	DfpMath.java	log	a	Dfp	0	RET	$.equals($.getZero())
3203	330	8	DfpMath.java	log	a	Dfp	0	RET	$.classify() == Dfp.INFINITE
20723	340	8	DfpMath.java	log	ix	int	0	NIL-WHILE	$ > 2
20724	353	8	DfpMath.java	log	spx	Dfp[]	0	NIL-WHILE	$[0].add($[1]).greaterThan(spy[0])
20724	353	8	DfpMath.java	log	spy	Dfp[]	0	NIL-WHILE	spx[0].add(spx[1]).greaterThan($[0])
20725	447	8	DfpMath.java	logInternal	i	int	0	NIL-FOR	$ < 10000
3204	453	12	DfpMath.java	logInternal	y	Dfp	0	DEF	$.equals(py)
3204	453	12	DfpMath.java	logInternal	py	Dfp	0	DEF	y.equals($)
3205	508	8	DfpMath.java	pow	x	Dfp	0	RET	$.getField().getRadixDigits() != y.getField().getRadixDigits()
3205	508	8	DfpMath.java	pow	y	Dfp	0	RET	x.getField().getRadixDigits() != $.getField().getRadixDigits()
3206	522	8	DfpMath.java	pow	zero	Dfp	0	RET	y.equals($)
3206	522	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(zero)
3207	526	8	DfpMath.java	pow	one	Dfp	0	RET	y.equals($)
3207	526	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(one)
3208	527	12	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
3209	535	8	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
3209	535	8	DfpMath.java	pow	y	Dfp	0	RET	$.isNaN()
3210	542	8	DfpMath.java	pow	zero	Dfp	0	RET	x.equals($)
3210	542	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(zero)
3211	543	12	DfpMath.java	pow	zero	Dfp	1	RET	Dfp.copysign(one, x).greaterThan($)
3211	543	12	DfpMath.java	pow	one	Dfp	1	RET	Dfp.copysign($, x).greaterThan(zero)
3211	543	12	DfpMath.java	pow	x	Dfp	1	RET	Dfp.copysign(one, $).greaterThan(zero)
3212	545	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3212	545	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3213	552	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3213	552	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3213	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3213	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3213	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3214	554	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3214	554	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3215	561	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3215	561	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3216	570	8	DfpMath.java	pow	zero	Dfp	0	DEF	x.lessThan($)
3216	570	8	DfpMath.java	pow	x	Dfp	0	DEF	$.lessThan(zero)
3217	576	8	DfpMath.java	pow	one	Dfp	0	RET	x.greaterThan($)
3217	576	8	DfpMath.java	pow	x	Dfp	0	RET	$.greaterThan(one)
3217	576	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3218	577	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3218	577	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3219	584	8	DfpMath.java	pow	one	Dfp	0	RET	x.lessThan($)
3219	584	8	DfpMath.java	pow	x	Dfp	0	RET	$.lessThan(one)
3219	584	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3220	585	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3220	585	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3221	592	8	DfpMath.java	pow	one	Dfp	0	RET	x.equals($)
3221	592	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(one)
3221	592	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3222	597	8	DfpMath.java	pow	x	Dfp	0	RET	$.classify() == Dfp.INFINITE
3223	599	12	DfpMath.java	pow	invert	boolean	1	RET	$
3224	601	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3224	601	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3224	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3224	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3224	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3225	603	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3225	603	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3226	610	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3226	610	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3227	618	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3227	618	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3228	626	8	DfpMath.java	pow	invert	boolean	0	RET	$
3228	626	8	DfpMath.java	pow	y	Dfp	0	RET	$.rint().equals($)
3229	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.greaterThan($.newInstance(-100000000))
3229	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.lessThan($.newInstance(100000000))
3229	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.greaterThan(x.newInstance(-100000000))
3229	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.lessThan(x.newInstance(100000000))
3230	640	12	DfpMath.java	pow	v	Dfp	1	DEF	$.unequal(zero)
3230	640	12	DfpMath.java	pow	zero	Dfp	1	DEF	v.unequal($)
3231	656	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3232	658	12	DfpMath.java	pow	zero	Dfp	0	DEF	y.remainder(two).equals($)
3232	658	12	DfpMath.java	pow	two	Dfp	0	DEF	y.remainder($).equals(zero)
3232	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.rint().equals($)
3232	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.remainder(two).equals(zero)
20726	681	8	DfpMath.java	sinInternal	i	int	0	NIL-FOR	$ < 90
3233	687	12	DfpMath.java	sinInternal	y	Dfp	0	DEF	$.equals(py)
3233	687	12	DfpMath.java	sinInternal	py	Dfp	0	DEF	y.equals($)
20727	714	8	DfpMath.java	cosInternal	i	int	0	NIL-FOR	$ < 90
3234	721	12	DfpMath.java	cosInternal	y	Dfp	0	DEF	$.equals(py)
3234	721	12	DfpMath.java	cosInternal	py	Dfp	0	DEF	y.equals($)
3235	745	8	DfpMath.java	sin	zero	Dfp	0	DEF	x.lessThan($)
3235	745	8	DfpMath.java	sin	x	Dfp	0	DEF	$.lessThan(zero)
3236	754	8	DfpMath.java	sin	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3236	754	8	DfpMath.java	sin	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3237	759	8	DfpMath.java	sin	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3237	759	8	DfpMath.java	sin	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3238	774	8	DfpMath.java	sin	neg	boolean	0	DEF	$
3239	796	8	DfpMath.java	cos	zero	Dfp	0	DEF	x.lessThan($)
3239	796	8	DfpMath.java	cos	x	Dfp	0	DEF	$.lessThan(zero)
3240	804	8	DfpMath.java	cos	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3240	804	8	DfpMath.java	cos	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3241	810	8	DfpMath.java	cos	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3241	810	8	DfpMath.java	cos	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3242	824	8	DfpMath.java	cos	neg	boolean	0	DEF	$
20728	850	8	DfpMath.java	atanInternal	i	int	0	NIL-FOR	$ < 90
3243	855	12	DfpMath.java	atanInternal	y	Dfp	0	DEF	$.equals(py)
3243	855	12	DfpMath.java	atanInternal	py	Dfp	0	DEF	y.equals($)
3244	890	8	DfpMath.java	atan	zero	Dfp	0	DEF	x.lessThan($)
3244	890	8	DfpMath.java	atan	x	Dfp	0	DEF	$.lessThan(zero)
3245	895	8	DfpMath.java	atan	one	Dfp	0	DEF	x.greaterThan($)
3245	895	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(one)
3246	900	8	DfpMath.java	atan	ty	Dfp	0	DEF	x.greaterThan($)
3246	900	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(ty)
3247	923	8	DfpMath.java	atan	sub	boolean	0	DEF	$
3248	927	8	DfpMath.java	atan	recp	boolean	0	DEF	$
3249	931	8	DfpMath.java	atan	neg	boolean	0	DEF	$
3250	955	8	DfpMath.java	acos	a	Dfp	0	DEF	$.lessThan($.getZero())
3251	963	8	DfpMath.java	acos	negative	boolean	0	DEF	$
20770	110	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
20770	110	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
20771	111	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
20771	111	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
20771	111	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
20570	144	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < $.mainSetDimension
20570	144	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2765	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
2765	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
2766	172	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
2767	174	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
20536	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20536	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2768	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	1	DEF	$.previousState != null
2768	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
20537	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20537	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
20538	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20538	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
20569	258	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < $.mainSetDimension
20569	258	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2819	279	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
2839	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
2839	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
20590	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
20590	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
20591	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
20591	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
20592	294	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
20592	294	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
20593	299	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
20593	299	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
2840	320	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
2841	322	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
20594	324	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
20595	333	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20595	333	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
20596	351	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < D.$.length
20596	351	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < D.length
2842	373	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	1	DEF	$.previousState != null
2842	373	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
20597	374	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20597	374	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
20598	388	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20598	388	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2843	409	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
20599	419	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
20599	419	6	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
20600	428	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
20600	428	6	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
20601	438	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
20601	438	6	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
20602	465	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
20602	465	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
20603	488	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
20603	488	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
1288	120	8	EigenDecomposition.java	EigenDecomposition	THIS	EigenDecomposition	1	DEF	$.isSymmetric
19374	162	8	EigenDecomposition.java	EigenDecomposition	i	int	0	NIL-FOR	$ < size
19374	162	8	EigenDecomposition.java	EigenDecomposition	size	int	0	NIL-FOR	i < $
1289	197	8	EigenDecomposition.java	getV	THIS	EigenDecomposition	0	DEF	$.cachedV == null
19375	200	12	EigenDecomposition.java	getV	k	int	0	NIL-FOR	$ < m
19375	200	12	EigenDecomposition.java	getV	m	int	0	NIL-FOR	k < $
1290	221	8	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	$.cachedD == null
19376	225	12	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
19376	225	12	EigenDecomposition.java	getD	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1291	226	16	EigenDecomposition.java	getD	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) > 0
1291	226	16	EigenDecomposition.java	getD	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) > 0
1292	228	23	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0
1292	228	23	EigenDecomposition.java	getD	i	int	0	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0
1293	248	8	EigenDecomposition.java	getVT	THIS	EigenDecomposition	0	DEF	$.cachedVt == null
19377	251	12	EigenDecomposition.java	getVT	k	int	0	NIL-FOR	$ < m
19377	251	12	EigenDecomposition.java	getVT	m	int	0	NIL-FOR	k < $
19378	270	8	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
19378	270	8	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1294	271	12	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	RET	Precision.equals($.imagEigenvalues[i], 0.0, EPSILON)
1294	271	12	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	RET	Precision.equals(imagEigenvalues[$], 0.0, EPSILON)
1295	372	8	EigenDecomposition.java	getSquareRoot	THIS	EigenDecomposition	0	MathUnsupportedOperationException	$.isSymmetric
19379	377	8	EigenDecomposition.java	getSquareRoot	THIS	EigenDecomposition	0	NIL-FOR	i < $.realEigenvalues.$.length
19379	377	8	EigenDecomposition.java	getSquareRoot	i	int	0	NIL-FOR	$ < realEigenvalues.length
1296	379	12	EigenDecomposition.java	getSquareRoot	eigen	double	0	MathUnsupportedOperationException	$ <= 0
1297	403	8	EigenDecomposition.java	getSolver	THIS	EigenDecomposition	0	MathUnsupportedOperationException	$.hasComplexEigenvalues()
19380	575	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n - 1
19380	575	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $ - 1
19381	584	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
19381	584	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1298	585	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1298	585	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1298	585	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1299	588	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) > maxAbsoluteValue
1299	588	12	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) > maxAbsoluteValue
1299	588	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) > $
1300	593	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0
19382	594	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
19382	594	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1301	595	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue
1301	595	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) <= Precision.EPSILON * maxAbsoluteValue
1301	595	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * $
1302	598	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) <= Precision.EPSILON * maxAbsoluteValue
1302	598	16	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) <= Precision.EPSILON * maxAbsoluteValue
1302	598	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) <= Precision.EPSILON * $
19383	604	8	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
19383	604	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
19384	607	12	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-DOWHILE	$ != j
19384	607	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-DOWHILE	m != $
19385	608	16	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-FOR	$ < n - 1
19385	608	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	m < $ - 1
1303	611	20	EigenDecomposition.java	findEigenVectors	delta	double	0	DEF	FastMath.abs(e[m]) + $ == $
1303	611	20	EigenDecomposition.java	findEigenVectors	m	int	0	DEF	FastMath.abs(e[$]) + delta == delta
1303	611	20	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[m]) + delta == delta
1304	615	16	EigenDecomposition.java	findEigenVectors	m	int	0	MaxCountExceededException	$ != j
1304	615	16	EigenDecomposition.java	findEigenVectors	j	int	0	MaxCountExceededException	m != $
1305	616	20	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	MaxCountExceededException	its == $.maxIter
1305	616	20	EigenDecomposition.java	findEigenVectors	its	int	0	MaxCountExceededException	$ == maxIter
1306	623	20	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	$ < 0.0
19386	632	20	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ >= j
19386	632	20	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	i >= $
1307	635	24	EigenDecomposition.java	findEigenVectors	p	double	1	DEF	FastMath.abs($) >= FastMath.abs(q)
1307	635	24	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	FastMath.abs(p) >= FastMath.abs($)
1308	648	24	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	e[$ + 1] == 0.0
1308	648	24	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	$[i + 1] == 0.0
19387	658	24	EigenDecomposition.java	findEigenVectors	ia	int	0	NIL-FOR	$ < n
19387	658	24	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	ia < $
1309	664	20	EigenDecomposition.java	findEigenVectors	t	double	0	DEF	$ == 0.0
1309	664	20	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	$ >= j
1309	664	20	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	i >= $
19388	675	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
19388	675	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
19389	678	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
19389	678	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
1310	679	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.realEigenvalues[j] > p
1310	679	16	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	realEigenvalues[$] > p
1310	679	16	EigenDecomposition.java	findEigenVectors	p	double	0	DEF	realEigenvalues[j] > $
1311	684	12	EigenDecomposition.java	findEigenVectors	k	int	0	DEF	$ != i
1311	684	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	k != $
19390	687	16	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
19390	687	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
19391	697	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
19391	697	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1312	698	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1312	698	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1312	698	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1313	703	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0.0
19392	704	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
19392	704	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1314	705	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue
1314	705	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) < Precision.EPSILON * maxAbsoluteValue
1314	705	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * $
19393	712	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
19393	712	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
19394	713	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
19394	713	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
19395	733	8	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	0	NIL-FOR	i < $.realEigenvalues.$.length
19395	733	8	EigenDecomposition.java	transformToSchur	i	int	0	NIL-FOR	$ < realEigenvalues.length
1315	734	12	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	1	DEF	i == ($.realEigenvalues.$.length - 1)
1315	734	12	EigenDecomposition.java	transformToSchur	i	int	1	DEF	$ == (realEigenvalues.length - 1)
1315	734	12	EigenDecomposition.java	transformToSchur	i	int	1	DEF	Precision.equals(matT[$ + 1][$], 0.0, EPSILON)
1315	734	12	EigenDecomposition.java	transformToSchur	matT	double[][]	1	DEF	Precision.equals($[i + 1][i], 0.0, EPSILON)
19396	780	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
19396	780	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
19397	781	11	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
19397	781	11	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
1316	787	8	EigenDecomposition.java	findEigenVectorsFromSchur	norm	double	0	MathArithmeticException	Precision.equals($, 0.0, EPSILON)
19398	797	8	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	$ >= 0
1317	801	12	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	Precision.equals($, 0.0)
19399	805	16	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
19400	808	20	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
19400	808	20	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1318	811	20	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0.0
1318	811	20	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
1319	816	24	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.equals($.imagEigenvalues[i], 0.0)
1319	816	24	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$], 0.0)
1320	817	28	EigenDecomposition.java	findEigenVectorsFromSchur	w	double	1	DEF	$ != 0.0
1321	830	28	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > FastMath.abs(z)
1321	830	28	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > FastMath.abs($)
1322	839	24	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
19401	840	28	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
19401	840	28	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1323	846	19	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	0	DEF	$ < 0.0
1324	851	16	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	1	DEF	FastMath.abs(matrixT[$][$ - 1]) > FastMath.abs(matrixT[$ - 1][$])
1324	851	16	EigenDecomposition.java	findEigenVectorsFromSchur	matrixT	double[][]	1	DEF	FastMath.abs($[idx][idx - 1]) > FastMath.abs($[idx - 1][idx])
19402	864	16	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
19403	867	20	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
19403	867	20	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1325	873	20	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0.0
1325	873	20	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
1326	879	24	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.equals($.imagEigenvalues[i], 0.0)
1326	879	24	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$], 0.0)
1327	890	28	EigenDecomposition.java	findEigenVectorsFromSchur	vr	double	0	DEF	Precision.equals($, 0.0)
1327	890	28	EigenDecomposition.java	findEigenVectorsFromSchur	vi	double	0	DEF	Precision.equals($, 0.0)
1328	900	28	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > (FastMath.abs(z) + FastMath.abs(q))
1328	900	28	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs($))
1328	900	28	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > (FastMath.abs($) + FastMath.abs(q))
1329	916	24	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
19404	917	28	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
19404	917	28	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
19405	928	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
19405	928	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
1330	929	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	DEF	$ < 0 | $ > n - 1
1330	929	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	DEF	i < 0 | i > $ - 1
19406	930	16	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
19406	930	16	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
19407	937	8	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ >= 0
19408	938	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ <= n - 1
19408	938	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i <= $ - 1
19409	940	16	EigenDecomposition.java	findEigenVectorsFromSchur	k	int	0	NIL-FOR	$ <= FastMath.min(j, n - 1)
19409	940	16	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	k <= FastMath.min($, n - 1)
19409	940	16	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	k <= FastMath.min(j, $ - 1)
19410	949	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
19410	949	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
19411	950	12	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
19411	950	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
20450	93	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$ < oldChromosomes.size()
20450	93	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i < $.size()
2608	106	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ > 1
2608	106	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ < 0
20581	223	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
20582	229	6	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
2829	231	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2829	231	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2830	236	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2831	238	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance == null
20583	239	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
20583	239	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
20583	239	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
20584	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
20584	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
20584	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
2832	253	8	EmbeddedRungeKuttaIntegrator.java	integrate	forward	boolean	1	DEF	$
2833	254	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize >= t
2833	254	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize >= $
2834	258	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize <= t
2834	258	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize <= $
20585	264	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
20585	264	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
20586	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
20586	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
20586	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
20587	268	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
20587	268	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
20588	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
20588	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
20588	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
20589	281	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
20589	281	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2835	289	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
2836	306	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.isLastStep
2837	311	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2838	326	10	EmbeddedRungeKuttaIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
2550	230	12	EmpiricalDistribution.java	load	THIS	EmpiricalDistribution	0	ZeroException	$.sampleStats.getN() == 0
2551	402	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	DEF	$.binStats.isEmpty()
20421	405	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
20421	405	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
20422	417	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount-1
20422	417	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
2552	445	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	MathIllegalStateException	$.loaded
20423	453	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
20423	453	8	EmpiricalDistribution.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
2553	454	11	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	RET	x <= $.upperBounds[i]
2553	454	11	EmpiricalDistribution.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
2553	454	11	EmpiricalDistribution.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
2554	456	15	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
2555	457	19	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
20424	517	8	EmpiricalDistribution.java	getUpperBounds	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount - 1
20424	517	8	EmpiricalDistribution.java	getUpperBounds	i	int	0	NIL-FOR	$ < binCount - 1
2885	77	8	EquationsMapper.java	extractEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
2885	77	8	EquationsMapper.java	extractEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
2886	92	8	EquationsMapper.java	insertEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
2886	92	8	EquationsMapper.java	insertEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
2664	67	8	Erf.java	erf	x	double	0	RET	FastMath.abs($) > 40
2665	98	8	Erf.java	erfc	x	double	0	RET	FastMath.abs($) > 40
2666	116	8	Erf.java	erf	x1	double	0	RET	$ > x2
2666	116	8	Erf.java	erf	x2	double	0	RET	x1 > $
20290	53	12	EuclideanDoublePoint.java	centroidOf	THIS	EuclideanDoublePoint	0	NIL-FOR	i < centroid.$.length
20290	53	12	EuclideanDoublePoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
20290	53	12	EuclideanDoublePoint.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
20291	57	8	EuclideanDoublePoint.java	centroidOf	THIS	EuclideanDoublePoint	0	NIL-FOR	i < centroid.$.length
20291	57	8	EuclideanDoublePoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
20291	57	8	EuclideanDoublePoint.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
2313	71	8	EuclideanDoublePoint.java	equals	other	Object	0	RET	$ instanceof EuclideanDoublePoint
20302	65	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
20302	65	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
20302	65	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
20303	69	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
20303	69	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
20303	69	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
2347	78	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
2871	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	1	DEF	$.previousState != null
2871	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
20627	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20627	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
20628	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20628	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2887	160	8	EventState.java	reinitializeBegin	THIS	EventState	0	DEF	$.g0 == 0
2888	199	12	EventState.java	evaluateStep	THIS	EventState	0	RET	FastMath.abs(dt) < $.convergence
2888	199	12	EventState.java	evaluateStep	dt	double	0	RET	FastMath.abs($) < convergence
20650	219	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
20650	219	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
2889	227	16	EventState.java	evaluateStep	THIS	EventState	1	RET	$.g0Positive ^ (gb >= 0)
2889	227	16	EventState.java	evaluateStep	gb	double	1	RET	g0Positive ^ ($ >= 0)
2890	235	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	$.solver instanceof BracketedUnivariateSolver<?>
2891	256	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Double.isNaN($.previousEventTime)
2891	256	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - ta) <= $.convergence
2891	256	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - $.previousEventTime) <= $.convergence
2891	256	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - ta) <= convergence
2891	256	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - previousEventTime) <= convergence
2891	256	20	EventState.java	evaluateStep	ta	double	1	DEF	FastMath.abs(root - $) <= convergence
2892	264	27	EventState.java	evaluateStep	THIS	EventState	1	RET	FastMath.abs($.previousEventTime - root) > $.convergence
2892	264	27	EventState.java	evaluateStep	THIS	EventState	1	RET	Double.isNaN($.previousEventTime)
2892	264	27	EventState.java	evaluateStep	root	double	1	RET	FastMath.abs(previousEventTime - $) > convergence
2893	315	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	FastMath.abs($.pendingEventTime - t) <= $.convergence
2893	315	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
2893	315	8	EventState.java	stepAccepted	t	double	1	DEF	FastMath.abs(pendingEventTime - $) <= convergence
2894	343	8	EventState.java	reset	THIS	EventState	0	RET	FastMath.abs($.pendingEventTime - t) <= $.convergence
2894	343	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
2894	343	8	EventState.java	reset	t	double	0	RET	FastMath.abs(pendingEventTime - $) <= convergence
2895	347	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.$.Action.RESET_STATE
20481	174	8	ExceptionContext.java	buildMessage	i	int	0	NIL-FOR	$ < len
20481	174	8	ExceptionContext.java	buildMessage	len	int	0	NIL-FOR	i < $
2708	180	12	ExceptionContext.java	buildMessage	count	int	0	DEF	++$ < len
2708	180	12	ExceptionContext.java	buildMessage	len	int	0	DEF	++count < $
20482	228	8	ExceptionContext.java	serializeMessages	i	int	0	NIL-FOR	$ < len
20482	228	8	ExceptionContext.java	serializeMessages	len	int	0	NIL-FOR	i < $
20483	236	12	ExceptionContext.java	serializeMessages	j	int	0	NIL-FOR	$ < aLen
20483	236	12	ExceptionContext.java	serializeMessages	aLen	int	0	NIL-FOR	j < $
2709	237	16	ExceptionContext.java	serializeMessages	j	int	1	DEF	args[$] instanceof Serializable
2709	237	16	ExceptionContext.java	serializeMessages	args	Object[]	1	DEF	$[j] instanceof Serializable
20484	263	8	ExceptionContext.java	deSerializeMessages	i	int	0	NIL-FOR	$ < len
20484	263	8	ExceptionContext.java	deSerializeMessages	len	int	0	NIL-FOR	i < $
20485	270	12	ExceptionContext.java	deSerializeMessages	j	int	0	NIL-FOR	$ < aLen
20485	270	12	ExceptionContext.java	deSerializeMessages	aLen	int	0	NIL-FOR	j < $
2710	293	12	ExceptionContext.java	serializeContext	value	Object	1	DEF	$ instanceof Serializable
20486	316	8	ExceptionContext.java	deSerializeContext	i	int	0	NIL-FOR	$ < len
20486	316	8	ExceptionContext.java	deSerializeContext	len	int	0	NIL-FOR	i < $
2926	97	8	ExpandableStatefulODE.java	getTotalDimension	THIS	ExpandableStatefulODE	1	RET	$.components.isEmpty()
2927	139	8	ExpandableStatefulODE.java	addSecondaryEquations	THIS	ExpandableStatefulODE	1	DEF	$.components.isEmpty()
20656	168	8	ExpandableStatefulODE.java	getSecondaryMappers	THIS	ExpandableStatefulODE	0	NIL-FOR	i < mappers.$.length
20656	168	8	ExpandableStatefulODE.java	getSecondaryMappers	i	int	0	NIL-FOR	$ < mappers.length
20656	168	8	ExpandableStatefulODE.java	getSecondaryMappers	mappers	EquationsMapper[]	0	NIL-FOR	i < $.length
2928	196	8	ExpandableStatefulODE.java	setPrimaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	primaryState.$.length != $.primaryState.length
2928	196	8	ExpandableStatefulODE.java	setPrimaryState	primaryState	double[]	0	DimensionMismatchException	$.length != this.primaryState.length
2929	233	8	ExpandableStatefulODE.java	setSecondaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	secondaryState.$.length != localArray.$.length
2929	233	8	ExpandableStatefulODE.java	setSecondaryState	localArray	double[]	0	DimensionMismatchException	secondaryState.length != $.length
2929	233	8	ExpandableStatefulODE.java	setSecondaryState	secondaryState	double[]	0	DimensionMismatchException	$.length != localArray.length
2930	269	8	ExpandableStatefulODE.java	setCompleteState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	completeState.$.length != $.getTotalDimension()
2930	269	8	ExpandableStatefulODE.java	setCompleteState	completeState	double[]	0	DimensionMismatchException	$.length != getTotalDimension()
1036	130	8	ExponentialDistribution.java	ExponentialDistribution	mean	double	0	NotStrictlyPositiveException	$ <= 0
1037	148	8	ExponentialDistribution.java	density	x	double	0	RET	$ < 0
1038	166	8	ExponentialDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
1039	184	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
1039	184	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
1040	186	15	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
19085	213	8	ExponentialDistribution.java	sample	u	double	0	NIL-WHILE	$ < 0.5
1041	222	8	ExponentialDistribution.java	sample	u	double	0	RET	$ <= EXPONENTIAL_SA_QI[0]
19086	232	8	ExponentialDistribution.java	sample	u	double	0	NIL-DOWHILE	$ > EXPONENTIAL_SA_QI[i]
19086	232	8	ExponentialDistribution.java	sample	i	int	0	NIL-DOWHILE	u > EXPONENTIAL_SA_QI[$]
1042	236	12	ExponentialDistribution.java	sample	u2	double	0	DEF	$ < umin
1042	236	12	ExponentialDistribution.java	sample	umin	double	0	DEF	u2 < $
1080	110	8	FDistribution.java	FDistribution	numeratorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1081	114	8	FDistribution.java	FDistribution	denominatorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1082	154	8	FDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1083	203	8	FDistribution.java	getNumericalMean	denominatorDF	double	0	RET	$ > 2
1084	224	8	FDistribution.java	getNumericalVariance	THIS	FDistribution	0	DEF	$.numericalVarianceIsCalculated
1085	239	8	FDistribution.java	calculateNumericalVariance	denominatorDF	double	0	RET	$ > 4
2711	93	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	type == $.TransformType.FORWARD
2711	93	8	FastCosineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
2712	94	12	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
2713	102	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	1	DEF	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
2714	142	8	FastCosineTransformer.java	fct	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
2715	147	8	FastCosineTransformer.java	fct	n	int	0	RET	$ == 1
20487	159	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
20487	159	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
20488	174	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
20488	174	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
20501	135	8	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	NIL-FOR	$ < n
20501	135	8	FastFourierTransformer.java	bitReversalShuffle2	n	int	0	NIL-FOR	i < $
2727	136	12	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	DEF	$ < j
2727	136	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	DEF	i < $
20502	148	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ <= j
20502	148	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ > 0
20502	148	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	NIL-WHILE	k <= $
2728	173	16	FastFourierTransformer.java	normalizeTransformedData	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
2728	173	16	FastFourierTransformer.java	normalizeTransformedData	type	TransformType	0	DEF	$ == TransformType.INVERSE
20503	175	20	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
20503	175	20	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
20504	183	16	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
20504	183	16	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
2729	218	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataRI.$.length != 2
2729	218	8	FastFourierTransformer.java	transformInPlace	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
2730	223	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataR.$.length != dataI.$.length
2730	223	8	FastFourierTransformer.java	transformInPlace	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
2730	223	8	FastFourierTransformer.java	transformInPlace	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
2731	228	8	FastFourierTransformer.java	transformInPlace	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
2732	234	8	FastFourierTransformer.java	transformInPlace	n	int	1	RET	$ == 1
2733	236	15	FastFourierTransformer.java	transformInPlace	n	int	0	RET	$ == 2
2734	256	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	1	DEF	type == $.TransformType.INVERSE
2734	256	8	FastFourierTransformer.java	transformInPlace	type	TransformType	1	DEF	$ == TransformType.INVERSE
20505	257	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
20505	257	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
20506	286	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
20506	286	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
20507	318	8	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-WHILE	lastN0 < $
20507	318	8	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-WHILE	$ < n
2735	323	12	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
2735	323	12	FastFourierTransformer.java	transformInPlace	type	TransformType	0	DEF	$ == TransformType.INVERSE
20508	328	12	FastFourierTransformer.java	transformInPlace	destEvenStartIndex	int	0	NIL-FOR	$ < n
20508	328	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	destEvenStartIndex < $
20509	334	16	FastFourierTransformer.java	transformInPlace	r	int	0	NIL-FOR	$ < lastN0
20509	334	16	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-FOR	r < $
20510	442	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
20510	442	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
20510	442	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
2736	464	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
2736	464	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
2736	464	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
20511	466	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
20511	466	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
20511	466	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
20512	474	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
20512	474	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
20512	474	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
2737	481	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
2737	481	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
2737	481	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
20513	487	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
20513	487	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
20513	487	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
20513	487	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
2719	52	8	FastHadamardTransformer.java	transform	THIS	FastHadamardTransformer	0	RET	type == $.TransformType.FORWARD
2719	52	8	FastHadamardTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
2720	234	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
20493	248	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
20493	248	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
20494	256	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
20494	256	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
20495	261	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
20495	261	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
2721	285	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
20496	299	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
20496	299	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
20497	307	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
20497	307	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
20498	312	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
20498	312	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
256	364	8	FastMath.java	doubleHighPart	d	double	0	RET	$ < Precision.SAFE_MIN
256	364	8	FastMath.java	doubleHighPart	d	double	0	RET	$ > -Precision.SAFE_MIN
257	386	6	FastMath.java	cosh	x	double	0	RET	$ != $
258	395	6	FastMath.java	cosh	x	double	1	RET	$ > 20
259	396	10	FastMath.java	cosh	x	double	1	RET	$ >= LOG_MAX_VALUE
260	403	13	FastMath.java	cosh	x	double	0	RET	$ < -20
261	404	10	FastMath.java	cosh	x	double	1	RET	$ <= -LOG_MAX_VALUE
262	414	6	FastMath.java	cosh	x	double	0	DEF	$ < 0.0
263	456	6	FastMath.java	sinh	x	double	0	RET	$ != $
264	465	6	FastMath.java	sinh	x	double	1	RET	$ > 20
265	466	10	FastMath.java	sinh	x	double	1	RET	$ >= LOG_MAX_VALUE
266	473	13	FastMath.java	sinh	x	double	0	RET	$ < -20
267	474	10	FastMath.java	sinh	x	double	1	RET	$ <= -LOG_MAX_VALUE
268	483	6	FastMath.java	sinh	x	double	0	RET	$ == 0
269	487	6	FastMath.java	sinh	x	double	0	DEF	$ < 0.0
270	494	6	FastMath.java	sinh	x	double	1	DEF	$ > 0.25
271	568	6	FastMath.java	sinh	negate	boolean	0	DEF	$
272	582	6	FastMath.java	tanh	x	double	0	RET	$ != $
273	592	6	FastMath.java	tanh	x	double	0	RET	$ > 20.0
274	596	6	FastMath.java	tanh	x	double	0	RET	$ < -20
275	600	6	FastMath.java	tanh	x	double	0	RET	$ == 0
276	604	6	FastMath.java	tanh	x	double	0	DEF	$ < 0.0
277	610	6	FastMath.java	tanh	x	double	1	DEF	$ >= 0.5
278	692	6	FastMath.java	tanh	negate	boolean	0	DEF	$
279	713	8	FastMath.java	asinh	a	double	0	DEF	$ < 0
280	719	8	FastMath.java	asinh	a	double	1	DEF	$ > 0.167
281	723	12	FastMath.java	asinh	a	double	1	DEF	$ > 0.097
282	725	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.036
283	727	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.0036
284	743	8	FastMath.java	atanh	a	double	0	DEF	$ < 0
285	749	8	FastMath.java	atanh	a	double	1	DEF	$ > 0.15
286	753	12	FastMath.java	atanh	a	double	1	DEF	$ > 0.087
287	755	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.031
288	757	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.003
289	849	8	FastMath.java	exp	x	double	1	RET	$ < 0.0
290	852	12	FastMath.java	exp	intVal	int	0	RET	$ > 746
291	853	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
292	860	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
293	863	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
294	870	12	FastMath.java	exp	intVal	int	0	RET	$ == 709
295	873	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
296	889	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
297	890	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
298	942	8	FastMath.java	exp	extra	double	1	DEF	$ != 0.0
299	948	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
300	971	8	FastMath.java	expm1	x	double	0	RET	$ != $
300	971	8	FastMath.java	expm1	x	double	0	RET	$ == 0.0
301	975	8	FastMath.java	expm1	x	double	0	RET	$ <= -1.0
301	975	8	FastMath.java	expm1	x	double	0	RET	$ >= 1.0
302	980	12	FastMath.java	expm1	x	double	1	RET	$ > 0.0
303	995	8	FastMath.java	expm1	x	double	0	DEF	$ < 0.0
304	1071	8	FastMath.java	expm1	negative	boolean	0	DEF	$
305	1104	8	FastMath.java	expm1	hiPrecOut	double	0	DEF	$ != null
306	1129	8	FastMath.java	log	x	double	0	RET	$==0
307	1135	8	FastMath.java	log	bits	long	0	RET	($ & 0x8000000000000000L) != 0
307	1135	8	FastMath.java	log	x	double	0	RET	$ != $
308	1136	12	FastMath.java	log	x	double	0	RET	$ != 0.0
309	1137	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
310	1146	8	FastMath.java	log	x	double	0	RET	$ == Double.POSITIVE_INFINITY
311	1147	12	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
312	1157	8	FastMath.java	log	bits	long	0	RET	($ & 0x7ff0000000000000L) == 0
313	1159	12	FastMath.java	log	x	double	0	RET	$ == 0
314	1161	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
19021	1170	12	FastMath.java	log	bits	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
315	1177	8	FastMath.java	log	exp	int	0	RET	$ == 0
315	1177	8	FastMath.java	log	exp	int	0	RET	$ == -1
316	1178	12	FastMath.java	log	x	double	0	RET	$ > 0.99
316	1178	12	FastMath.java	log	x	double	0	RET	$ < 1.01
316	1178	12	FastMath.java	log	hiPrec	double[]	0	RET	$ == null
19022	1195	16	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
317	1243	8	FastMath.java	log	hiPrec	double[]	1	DEF	$ != null
19023	1262	12	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
318	1346	8	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
319	1361	8	FastMath.java	log1p	x	double	0	RET	$ == -1
320	1365	8	FastMath.java	log1p	x	double	0	RET	$ == Double.POSITIVE_INFINITY
321	1369	8	FastMath.java	log1p	x	double	1	RET	$ < -1e-6
321	1369	8	FastMath.java	log1p	x	double	1	RET	$ > 1e-6
322	1376	12	FastMath.java	log1p	lores	double	0	RET	Double.isInfinite($)
323	1400	8	FastMath.java	log10	lores	double	0	RET	Double.isInfinite($)
324	1444	8	FastMath.java	pow	y	double	0	RET	$ == 0.0
325	1448	8	FastMath.java	pow	x	double	0	RET	$ != $
326	1453	8	FastMath.java	pow	x	double	0	RET	$ == 0
327	1455	12	FastMath.java	pow	bits	long	0	RET	($ & 0x8000000000000000L) != 0
328	1459	16	FastMath.java	pow	yi	long	0	RET	y == $
328	1459	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
328	1459	16	FastMath.java	pow	y	double	0	RET	$ < 0
328	1459	16	FastMath.java	pow	y	double	0	RET	$ == yi
329	1463	16	FastMath.java	pow	yi	long	0	RET	y == $
329	1463	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
329	1463	16	FastMath.java	pow	y	double	0	RET	$ == yi
329	1463	16	FastMath.java	pow	y	double	0	RET	$ > 0
330	1468	12	FastMath.java	pow	y	double	0	RET	$ < 0
331	1471	12	FastMath.java	pow	y	double	0	RET	$ > 0
332	1478	8	FastMath.java	pow	x	double	0	RET	$ == Double.POSITIVE_INFINITY
333	1479	12	FastMath.java	pow	y	double	0	RET	$ != $
334	1482	12	FastMath.java	pow	y	double	1	RET	$ < 0.0
335	1489	8	FastMath.java	pow	y	double	0	RET	$ == Double.POSITIVE_INFINITY
336	1490	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
337	1494	12	FastMath.java	pow	x	double	1	RET	$ * $ > 1.0
338	1501	8	FastMath.java	pow	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
339	1502	12	FastMath.java	pow	y	double	0	RET	$ != $
340	1506	12	FastMath.java	pow	y	double	0	RET	$ < 0
341	1508	16	FastMath.java	pow	yi	long	0	RET	y == $
341	1508	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
341	1508	16	FastMath.java	pow	y	double	0	RET	$ == yi
342	1515	12	FastMath.java	pow	y	double	0	RET	$ > 0
343	1517	16	FastMath.java	pow	yi	long	0	RET	y == $
343	1517	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
343	1517	16	FastMath.java	pow	y	double	0	RET	$ == yi
344	1525	8	FastMath.java	pow	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
345	1527	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
346	1531	12	FastMath.java	pow	x	double	1	RET	$ * $ < 1.0
347	1539	8	FastMath.java	pow	x	double	0	RET	$ < 0
348	1541	12	FastMath.java	pow	THIS	FastMath	0	RET	y >= $.TWO_POWER_52
348	1541	12	FastMath.java	pow	THIS	FastMath	0	RET	y <= -$.TWO_POWER_52
348	1541	12	FastMath.java	pow	y	double	0	RET	$ >= TWO_POWER_52
348	1541	12	FastMath.java	pow	y	double	0	RET	$ <= -TWO_POWER_52
349	1545	12	FastMath.java	pow	y	double	1	RET	$ == (long) $
350	1556	8	FastMath.java	pow	y	double	1	DEF	$ > -8e298
350	1556	8	FastMath.java	pow	y	double	1	DEF	$ < 8e298
351	1569	8	FastMath.java	pow	lores	double	0	RET	Double.isInfinite($)
352	1611	8	FastMath.java	pow	e	int	1	RET	$ == 0
353	1613	15	FastMath.java	pow	e	int	0	DEF	$ < 0
19024	1634	8	FastMath.java	pow	e	int	0	NIL-WHILE	$ != 0
354	1636	12	FastMath.java	pow	e	int	0	DEF	($ & 0x1) != 0
355	1817	8	FastMath.java	sinQ	xb	double	0	DEF	$ != 0.0
356	1947	8	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
357	1980	8	FastMath.java	tanQ	xb	double	0	DEF	$ != 0.0
358	1984	12	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
359	2026	8	FastMath.java	reducePayneHanek	shift	int	1	DEF	$ != 0
360	2057	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
360	2057	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
360	2057	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
360	2057	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
360	2057	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
361	2071	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
361	2071	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
361	2071	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
361	2071	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
361	2071	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
362	2091	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
362	2091	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
362	2091	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
362	2091	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
362	2091	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
363	2143	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
363	2143	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
363	2143	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
363	2143	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
363	2143	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
364	2157	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
364	2157	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
364	2157	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
364	2157	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
364	2157	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
365	2177	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
365	2177	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
365	2177	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
365	2177	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
365	2177	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
366	2199	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
366	2199	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
366	2199	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
366	2199	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
366	2199	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
367	2231	8	FastMath.java	sin	x	double	0	DEF	$ < 0
368	2237	8	FastMath.java	sin	xa	double	0	RET	$ == 0.0
369	2239	12	FastMath.java	sin	bits	long	0	RET	$ < 0
370	2245	8	FastMath.java	sin	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
370	2245	8	FastMath.java	sin	xa	double	0	RET	$ != $
371	2250	8	FastMath.java	sin	xa	double	1	DEF	$ > 3294198.0
372	2259	15	FastMath.java	sin	xa	double	0	DEF	$ > 1.5707963267948966
373	2266	8	FastMath.java	sin	negative	boolean	0	DEF	$
374	2295	8	FastMath.java	cos	x	double	0	DEF	$ < 0
375	2299	8	FastMath.java	cos	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
375	2299	8	FastMath.java	cos	xa	double	0	RET	$ != $
376	2305	8	FastMath.java	cos	xa	double	1	DEF	$ > 3294198.0
377	2314	15	FastMath.java	cos	xa	double	0	DEF	$ > 1.5707963267948966
378	2350	8	FastMath.java	tan	x	double	0	DEF	$ < 0
379	2356	8	FastMath.java	tan	xa	double	0	RET	$ == 0.0
380	2358	12	FastMath.java	tan	bits	long	0	RET	$ < 0
381	2364	8	FastMath.java	tan	xa	double	0	RET	$ != $
381	2364	8	FastMath.java	tan	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
382	2370	8	FastMath.java	tan	xa	double	1	DEF	$ > 3294198.0
383	2379	15	FastMath.java	tan	xa	double	0	DEF	$ > 1.5707963267948966
384	2386	8	FastMath.java	tan	xa	double	0	DEF	$ > 1.5
385	2402	8	FastMath.java	tan	quadrant	int	1	DEF	($ & 1) == 0
386	2408	8	FastMath.java	tan	negative	boolean	0	DEF	$
387	2434	8	FastMath.java	atan	xa	double	0	RET	$ == 0.0
388	2438	8	FastMath.java	atan	xa	double	0	DEF	$ < 0
389	2445	8	FastMath.java	atan	xa	double	0	RET	$ > 1.633123935319537E16
390	2450	8	FastMath.java	atan	xa	double	1	DEF	$ < 1
391	2472	8	FastMath.java	atan	idx	int	1	DEF	$ == 0
392	2550	8	FastMath.java	atan	leftPlane	boolean	0	DEF	$
393	2564	8	FastMath.java	atan	negate	boolean	0	DEF	$ ^ leftPlane
393	2564	8	FastMath.java	atan	leftPlane	boolean	0	DEF	negate ^ $
394	2578	8	FastMath.java	atan2	y	double	0	RET	$ != $
394	2578	8	FastMath.java	atan2	x	double	0	RET	$ != $
395	2582	8	FastMath.java	atan2	y	double	0	RET	$ == 0
396	2587	12	FastMath.java	atan2	invx	double	0	RET	$ == 0
397	2588	16	FastMath.java	atan2	x	double	1	RET	$ > 0
398	2595	12	FastMath.java	atan2	invx	double	1	RET	$ < 0
398	2595	12	FastMath.java	atan2	x	double	1	RET	$ < 0
399	2596	16	FastMath.java	atan2	invy	double	1	RET	$ < 0
399	2596	16	FastMath.java	atan2	y	double	1	RET	$ < 0
400	2608	8	FastMath.java	atan2	y	double	0	RET	$ == Double.POSITIVE_INFINITY
401	2609	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
402	2613	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
403	2620	8	FastMath.java	atan2	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
404	2621	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
405	2625	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
406	2632	8	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
407	2633	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
407	2633	12	FastMath.java	atan2	y	double	0	RET	$ > 0
408	2637	12	FastMath.java	atan2	y	double	0	RET	$ < 0
408	2637	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
409	2642	8	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
410	2644	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
410	2644	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0.0
411	2648	12	FastMath.java	atan2	y	double	0	RET	$ < 0
411	2648	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
412	2655	8	FastMath.java	atan2	x	double	0	RET	$ == 0
413	2656	12	FastMath.java	atan2	y	double	0	RET	$ > 0
413	2656	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
414	2660	12	FastMath.java	atan2	y	double	0	RET	$ < 0
414	2660	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
415	2667	8	FastMath.java	atan2	r	double	0	RET	Double.isInfinite($)
416	2684	8	FastMath.java	atan2	ra	double	0	DEF	$ == 0
417	2699	6	FastMath.java	asin	x	double	0	RET	$ != $
418	2703	6	FastMath.java	asin	x	double	0	RET	$ > 1.0
418	2703	6	FastMath.java	asin	x	double	0	RET	$ < -1.0
419	2707	6	FastMath.java	asin	x	double	0	RET	$ == 1.0
420	2711	6	FastMath.java	asin	x	double	0	RET	$ == -1.0
421	2715	6	FastMath.java	asin	x	double	0	RET	$ == 0.0
422	2775	6	FastMath.java	acos	x	double	0	RET	$ != $
423	2779	6	FastMath.java	acos	x	double	0	RET	$ < -1.0
423	2779	6	FastMath.java	acos	x	double	0	RET	$ > 1.0
424	2783	6	FastMath.java	acos	x	double	0	RET	$ == -1.0
425	2787	6	FastMath.java	acos	x	double	0	RET	$ == 1.0
426	2791	6	FastMath.java	acos	x	double	0	RET	$ == 0
427	2835	6	FastMath.java	acos	r	double	0	RET	Double.isInfinite($)
428	2862	6	FastMath.java	cbrt	exponent	int	0	RET	$ == -1023
429	2863	10	FastMath.java	cbrt	x	double	0	RET	$ == 0
430	2874	6	FastMath.java	cbrt	exponent	int	0	RET	$ == 1024
431	2929	6	FastMath.java	cbrt	subnormal	boolean	0	DEF	$
432	2943	8	FastMath.java	toRadians	x	double	0	RET	$ == 0.0
432	2943	8	FastMath.java	toRadians	x	double	0	RET	Double.isInfinite($)
433	2955	8	FastMath.java	toRadians	result	double	0	DEF	$ == 0
434	2968	8	FastMath.java	toDegrees	x	double	0	RET	Double.isInfinite($)
434	2968	8	FastMath.java	toDegrees	x	double	0	RET	$ == 0.0
435	3024	8	FastMath.java	ulp	x	double	0	RET	Double.isInfinite($)
436	3036	8	FastMath.java	ulp	x	float	0	RET	Float.isInfinite($)
437	3051	8	FastMath.java	scalb	n	int	0	RET	$ < 1024
437	3051	8	FastMath.java	scalb	n	int	0	RET	$ > -1023
438	3056	8	FastMath.java	scalb	d	double	0	RET	Double.isInfinite($)
438	3056	8	FastMath.java	scalb	d	double	0	RET	$ == 0
438	3056	8	FastMath.java	scalb	d	double	0	RET	Double.isNaN($)
439	3059	8	FastMath.java	scalb	n	int	0	RET	$ < -2098
440	3062	8	FastMath.java	scalb	n	int	0	RET	$ > 2097
441	3075	8	FastMath.java	scalb	n	int	1	RET	$ < 0
442	3077	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
443	3080	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -53
444	3089	16	FastMath.java	scalb	mostSignificantLostBit	long	0	DEF	$ != 0
445	3101	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
19025	3104	16	FastMath.java	scalb	mantissa	long	0	NIL-WHILE	($ >>> 52) != 1
446	3111	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
447	3117	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
448	3135	8	FastMath.java	scalb	n	int	0	RET	$ > -127
448	3135	8	FastMath.java	scalb	n	int	0	RET	$ < 128
449	3140	8	FastMath.java	scalb	f	float	0	RET	Float.isInfinite($)
449	3140	8	FastMath.java	scalb	f	float	0	RET	$ == 0f
449	3140	8	FastMath.java	scalb	f	float	0	RET	Float.isNaN($)
450	3143	8	FastMath.java	scalb	n	int	0	RET	$ < -277
451	3146	8	FastMath.java	scalb	n	int	0	RET	$ > 276
452	3159	8	FastMath.java	scalb	n	int	1	RET	$ < 0
453	3161	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
454	3164	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -24
455	3173	16	FastMath.java	scalb	mostSignificantLostBit	int	0	DEF	$ != 0
456	3185	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
19026	3188	16	FastMath.java	scalb	mantissa	int	0	NIL-WHILE	($ >>> 23) != 1
457	3195	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
458	3201	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
459	3244	8	FastMath.java	nextAfter	d	double	1	RET	Double.isNaN($)
459	3244	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
460	3246	15	FastMath.java	nextAfter	d	double	1	RET	$ == direction
460	3246	15	FastMath.java	nextAfter	direction	double	1	RET	d == $
461	3248	15	FastMath.java	nextAfter	d	double	1	RET	Double.isInfinite($)
462	3250	15	FastMath.java	nextAfter	d	double	0	RET	$ == 0
463	3258	8	FastMath.java	nextAfter	sign	long	1	RET	(direction < d) ^ ($ == 0L)
463	3258	8	FastMath.java	nextAfter	d	double	1	RET	(direction < $) ^ (sign == 0L)
463	3258	8	FastMath.java	nextAfter	direction	double	1	RET	($ < d) ^ (sign == 0L)
464	3300	8	FastMath.java	nextAfter	f	float	1	RET	Double.isNaN($)
464	3300	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
465	3302	15	FastMath.java	nextAfter	f	float	1	RET	$ == direction
465	3302	15	FastMath.java	nextAfter	direction	double	1	RET	f == $
466	3304	15	FastMath.java	nextAfter	f	float	1	RET	Float.isInfinite($)
467	3306	15	FastMath.java	nextAfter	f	float	0	RET	$ == 0f
468	3314	8	FastMath.java	nextAfter	sign	int	1	RET	(direction < f) ^ ($ == 0)
468	3314	8	FastMath.java	nextAfter	f	float	1	RET	(direction < $) ^ (sign == 0)
468	3314	8	FastMath.java	nextAfter	direction	double	1	RET	($ < f) ^ (sign == 0)
469	3329	8	FastMath.java	floor	x	double	0	RET	$ != $
470	3333	8	FastMath.java	floor	THIS	FastMath	0	RET	x >= $.TWO_POWER_52
470	3333	8	FastMath.java	floor	THIS	FastMath	0	RET	x <= -$.TWO_POWER_52
470	3333	8	FastMath.java	floor	x	double	0	RET	$ >= TWO_POWER_52
470	3333	8	FastMath.java	floor	x	double	0	RET	$ <= -TWO_POWER_52
471	3338	8	FastMath.java	floor	y	long	0	DEF	$ != x
471	3338	8	FastMath.java	floor	x	double	0	DEF	$ < 0
471	3338	8	FastMath.java	floor	x	double	0	DEF	y != $
472	3342	8	FastMath.java	floor	y	long	0	RET	$ == 0
473	3356	8	FastMath.java	ceil	x	double	0	RET	$ != $
474	3361	8	FastMath.java	ceil	y	double	0	RET	$ == x
474	3361	8	FastMath.java	ceil	x	double	0	RET	y == $
475	3367	8	FastMath.java	ceil	y	double	0	RET	$ == 0
476	3382	8	FastMath.java	rint	d	double	0	RET	$ > 0.5
477	3383	12	FastMath.java	rint	y	double	0	RET	$ == -1.0
478	3388	8	FastMath.java	rint	d	double	0	RET	$ < 0.5
479	3437	8	FastMath.java	min	a	float	0	RET	$ > b
479	3437	8	FastMath.java	min	b	float	0	RET	a > $
480	3440	8	FastMath.java	min	a	float	0	RET	$ < b
480	3440	8	FastMath.java	min	b	float	0	RET	a < $
481	3444	8	FastMath.java	min	a	float	0	RET	$ != b
481	3444	8	FastMath.java	min	b	float	0	RET	a != $
482	3450	8	FastMath.java	min	bits	int	0	RET	$ == 0x80000000
483	3462	8	FastMath.java	min	a	double	0	RET	$ > b
483	3462	8	FastMath.java	min	b	double	0	RET	a > $
484	3465	8	FastMath.java	min	a	double	0	RET	$ < b
484	3465	8	FastMath.java	min	b	double	0	RET	a < $
485	3469	8	FastMath.java	min	a	double	0	RET	$ != b
485	3469	8	FastMath.java	min	b	double	0	RET	a != $
486	3475	8	FastMath.java	min	bits	long	0	RET	$ == 0x8000000000000000L
487	3505	8	FastMath.java	max	a	float	0	RET	$ > b
487	3505	8	FastMath.java	max	b	float	0	RET	a > $
488	3508	8	FastMath.java	max	a	float	0	RET	$ < b
488	3508	8	FastMath.java	max	b	float	0	RET	a < $
489	3512	8	FastMath.java	max	a	float	0	RET	$ != b
489	3512	8	FastMath.java	max	b	float	0	RET	a != $
490	3518	8	FastMath.java	max	bits	int	0	RET	$ == 0x80000000
491	3530	8	FastMath.java	max	a	double	0	RET	$ > b
491	3530	8	FastMath.java	max	b	double	0	RET	a > $
492	3533	8	FastMath.java	max	a	double	0	RET	$ < b
492	3533	8	FastMath.java	max	b	double	0	RET	a < $
493	3537	8	FastMath.java	max	a	double	0	RET	$ != b
493	3537	8	FastMath.java	max	b	double	0	RET	a != $
494	3543	8	FastMath.java	max	bits	long	0	RET	$ == 0x8000000000000000L
495	3564	8	FastMath.java	hypot	x	double	1	RET	Double.isInfinite($)
495	3564	8	FastMath.java	hypot	y	double	1	RET	Double.isInfinite($)
496	3566	15	FastMath.java	hypot	x	double	1	RET	Double.isNaN($)
496	3566	15	FastMath.java	hypot	y	double	1	RET	Double.isNaN($)
497	3572	12	FastMath.java	hypot	expX	int	1	RET	$ > expY + 27
497	3572	12	FastMath.java	hypot	expY	int	1	RET	expX > $ + 27
498	3575	19	FastMath.java	hypot	expX	int	1	RET	expY > $ + 27
498	3575	19	FastMath.java	hypot	expY	int	1	RET	$ > expX + 27
499	3633	8	FastMath.java	copySign	m	long	0	RET	$ >= 0
499	3633	8	FastMath.java	copySign	m	long	0	RET	$ < 0
499	3633	8	FastMath.java	copySign	s	long	0	RET	$ >= 0
499	3633	8	FastMath.java	copySign	s	long	0	RET	$ < 0
500	3650	8	FastMath.java	copySign	m	int	0	RET	$ < 0
500	3650	8	FastMath.java	copySign	m	int	0	RET	$ >= 0
500	3650	8	FastMath.java	copySign	s	int	0	RET	$ < 0
500	3650	8	FastMath.java	copySign	s	int	0	RET	$ >= 0
19007	108	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 7
19008	121	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
167	128	12	FastMathCalc.java	buildSinCosTables	i	int	1	DEF	($ & 1) == 0
19009	177	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
19010	215	8	FastMathCalc.java	slowCos	i	int	0	NIL-FOR	$ >= 0
168	219	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 1) != 0
169	226	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 2) != 0
170	235	8	FastMathCalc.java	slowCos	result	double	0	DEF	$ != null
19011	259	8	FastMathCalc.java	slowSin	i	int	0	NIL-FOR	$ >= 0
171	263	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 1) == 0
172	270	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 2) != 0
173	279	8	FastMathCalc.java	slowSin	result	double	0	DEF	$ != null
19012	303	8	FastMathCalc.java	slowexp	i	int	0	NIL-FOR	$ >= 0
174	316	8	FastMathCalc.java	slowexp	result	double	0	DEF	$ != null
175	330	8	FastMathCalc.java	split	d	double	1	DEF	$ < 8e298
175	330	8	FastMathCalc.java	split	d	double	1	DEF	$ > -8e298
176	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ < 8e298
176	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ > -8e298
177	407	8	FastMathCalc.java	splitReciprocal	in	double	0	DEF	$[0] == 0.0
178	415	8	FastMathCalc.java	splitReciprocal	result	double	0	DEF	$[1] != $[1]
19013	422	8	FastMathCalc.java	splitReciprocal	i	int	0	NIL-FOR	$ < 2
19014	510	8	FastMathCalc.java	expint	p	int	0	NIL-WHILE	$ > 0
179	511	12	FastMathCalc.java	expint	p	int	0	DEF	($ & 1) != 0
180	522	8	FastMathCalc.java	expint	result	double	0	DEF	$ != null
19015	578	8	FastMathCalc.java	slowLog	i	int	0	NIL-FOR	$ >= 0
181	639	8	FastMathCalc.java	format	d	double	1	RET	$ != $
182	654	8	FastMathCalc.java	checkLen	expectedLen	int	0	DimensionMismatchException	$ != actual
182	654	8	FastMathCalc.java	checkLen	actual	int	0	DimensionMismatchException	expectedLen != $
2722	97	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	$.normalization == $.DstNormalization.ORTHOGONAL_DST_I
2723	101	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	type == $.TransformType.FORWARD
2723	101	8	FastSineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
2724	141	8	FastSineTransformer.java	fst	THIS	FastSineTransformer	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo(f.$.length)
2724	141	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($.length)
2725	146	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	$[0] != 0.0
2726	152	8	FastSineTransformer.java	fst	n	int	0	RET	$ == 1
20499	161	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
20499	161	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
20500	174	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
20500	174	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
1478	87	8	FieldLUDecomposition.java	FieldLUDecomposition	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
19604	101	8	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
19604	101	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
19605	108	8	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	$ < m
19605	108	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	col < $
19606	113	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < col
19606	113	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	row < $
19607	116	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < row
19607	116	16	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	i < $
19608	124	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
19608	124	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
19609	127	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < col
19609	127	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	i < $
1479	132	16	FieldLUDecomposition.java	FieldLUDecomposition	THIS	FieldLUDecomposition	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
1479	132	16	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
1479	132	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
1480	139	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	RET	$ >= m
1480	139	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	RET	nonZero >= $
1481	145	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	$ != col
1481	145	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	nonZero != $
19610	147	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < m
19610	147	16	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	i < $
19611	160	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
19611	160	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
1482	174	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.cachedL == null
1482	174	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.singular
19612	177	12	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
19612	177	12	FieldLUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
19613	179	16	FieldLUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
19613	179	16	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1483	194	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.cachedU == null
1483	194	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.singular
19614	197	12	FieldLUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
19614	197	12	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
19615	199	16	FieldLUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
19615	199	16	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1484	217	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.cachedP == null
1484	217	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.singular
19616	220	12	FieldLUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
19616	220	12	FieldLUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1485	241	8	FieldLUDecomposition.java	getDeterminant	THIS	FieldLUDecomposition	1	RET	$.singular
19617	246	12	FieldLUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
19617	246	12	FieldLUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
3538	100	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	nbPoints	int	0	NumberIsTooSmallException	$ <= 1
3539	105	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	stepSize	double	0	NotPositiveException	$ <= 0
20907	143	8	FiniteDifferencesDifferentiator.java	evaluate	THIS	FiniteDifferencesDifferentiator	0	NIL-FOR	i < $.nbPoints
20907	143	8	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	$ < nbPoints
20908	147	12	FiniteDifferencesDifferentiator.java	evaluate	j	int	0	NIL-FOR	$ <= i
20908	147	12	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	j <= $
20909	162	8	FiniteDifferencesDifferentiator.java	evaluate	THIS	FiniteDifferencesDifferentiator	0	NIL-FOR	i < $.nbPoints
20909	162	8	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	$ < nbPoints
2175	103	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
2655	58	8	FixedElapsedTime.java	FixedElapsedTime	maxTime	long	0	NumberIsTooSmallException	$ < 0
2656	72	8	FixedElapsedTime.java	isSatisfied	THIS	FixedElapsedTime	0	DEF	$.endTime < 0
2641	43	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	NumberIsTooSmallException	$ <= 0
2642	57	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
2153	89	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
957	181	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(a0) > $
957	181	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	FastMath.abs($) > overflow
958	187	8	Fraction.java	Fraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
958	187	8	Fraction.java	Fraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
958	187	8	Fraction.java	Fraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
19071	203	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
959	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(q2) > $
959	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(p2) > $
959	209	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	FastMath.abs($) > overflow
959	209	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	FastMath.abs($) > overflow
960	214	12	Fraction.java	Fraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
960	214	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
960	214	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
960	214	12	Fraction.java	Fraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
960	214	12	Fraction.java	Fraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
960	214	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
960	214	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
961	226	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
961	226	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
962	230	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
962	230	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
963	257	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == 0
964	261	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ < 0
965	262	12	Fraction.java	Fraction	num	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
965	262	12	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
966	272	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
967	278	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
968	292	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
969	333	8	Fraction.java	equals	THIS	Fraction	0	RET	$ == other
969	333	8	Fraction.java	equals	other	Object	0	RET	this == $
970	336	8	Fraction.java	equals	other	Object	0	RET	$ instanceof Fraction
971	406	8	Fraction.java	negate	THIS	Fraction	0	MathArithmeticException	$.numerator==Integer.MIN_VALUE
972	477	8	Fraction.java	addSub	fraction	Fraction	0	NullArgumentException	$ == null
973	481	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
974	484	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
974	484	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
975	490	8	Fraction.java	addSub	d1	int	0	RET	$==1
976	514	8	Fraction.java	addSub	w	BigInteger	0	MathArithmeticException	$.bitLength() > 31
977	534	8	Fraction.java	multiply	fraction	Fraction	0	NullArgumentException	$ == null
978	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
978	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
978	537	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
979	569	8	Fraction.java	divide	fraction	Fraction	0	NullArgumentException	$ == null
980	572	8	Fraction.java	divide	THIS	Fraction	0	MathArithmeticException	fraction.$.numerator == 0
980	572	8	Fraction.java	divide	fraction	Fraction	0	MathArithmeticException	$.numerator == 0
981	612	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ == 0
982	616	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
983	620	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
983	620	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
984	623	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ < 0
985	624	12	Fraction.java	getReducedFraction	numerator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
985	624	12	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
986	651	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
987	653	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
941	177	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
942	179	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
943	199	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
944	221	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
945	254	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
20334	88	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2372	129	8	Frequency.java	incrementValue	v	Comparable<?>	0	DEF	$ instanceof Integer
2373	134	12	Frequency.java	incrementValue	count	Long	1	DEF	$ == null
20335	224	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
2374	238	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
2375	244	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
2376	304	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
2377	355	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
2378	358	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
2379	362	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
2380	369	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
2381	376	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
2381	376	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
2381	376	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
2382	380	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
2382	380	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
2382	380	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
20336	385	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2383	387	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
2383	387	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
2383	387	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
2384	447	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
20337	502	8	Frequency.java	merge	iter	Iterator<Entry<Comparable<?>,Long>>	0	NIL-FOR	$.hasNext()
20338	516	8	Frequency.java	merge	iter	Iterator<Frequency>	0	NIL-FOR	$.hasNext()
2385	564	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
2385	564	8	Frequency.java	equals	obj	Object	0	RET	this == $
2386	567	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
2387	571	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
2388	572	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
2388	572	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
2389	575	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
2389	575	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
3473	424	8	FunctionUtils.java	sample	n	int	0	NotStrictlyPositiveException	$ <= 0
3474	429	8	FunctionUtils.java	sample	min	double	0	NumberIsTooLargeException	$ >= max
3474	429	8	FunctionUtils.java	sample	max	double	0	NumberIsTooLargeException	min >= $
20839	435	8	FunctionUtils.java	sample	i	int	0	NIL-FOR	$ < n
20839	435	8	FunctionUtils.java	sample	n	int	0	NIL-FOR	i < $
2394	80	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
2301	81	8	GTest.java	g	THIS	GTest	0	DimensionMismatchException	expected.$.length < 2
2301	81	8	GTest.java	g	expected	double[]	0	DimensionMismatchException	$.length < 2
2302	84	8	GTest.java	g	THIS	GTest	0	DimensionMismatchException	expected.$.length != observed.$.length
2302	84	8	GTest.java	g	expected	double[]	0	DimensionMismatchException	$.length != observed.length
2302	84	8	GTest.java	g	observed	long[]	0	DimensionMismatchException	expected.length != $.length
20281	92	8	GTest.java	g	THIS	GTest	0	NIL-FOR	i < observed.$.length
20281	92	8	GTest.java	g	i	int	0	NIL-FOR	$ < observed.length
20281	92	8	GTest.java	g	observed	long[]	0	NIL-FOR	i < $.length
2303	98	8	GTest.java	g	sumExpected	double	0	DEF	Math.abs($ - sumObserved) > 10E-6
2303	98	8	GTest.java	g	sumObserved	double	0	DEF	Math.abs(sumExpected - $) > 10E-6
20282	103	8	GTest.java	g	THIS	GTest	0	NIL-FOR	i < observed.$.length
20282	103	8	GTest.java	g	i	int	0	NIL-FOR	$ < observed.length
20282	103	8	GTest.java	g	observed	long[]	0	NIL-FOR	i < $.length
2304	242	8	GTest.java	gTest	alpha	double	0	OutOfRangeException	$ > 0.5
2304	242	8	GTest.java	gTest	alpha	double	0	OutOfRangeException	$ <= 0
20283	264	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
20283	264	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
20283	264	8	GTest.java	entropy	k	long[][]	0	NIL-FOR	i < $.length
20284	265	12	GTest.java	entropy	THIS	GTest	0	NIL-FOR	j < k[i].length
20284	265	12	GTest.java	entropy	j	int	0	NIL-FOR	$ < k[i].length
20284	265	12	GTest.java	entropy	i	int	0	NIL-FOR	j < k[$].length
20284	265	12	GTest.java	entropy	k	long[][]	0	NIL-FOR	j < $[i].length
20285	269	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
20285	269	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
20285	269	8	GTest.java	entropy	k	long[][]	0	NIL-FOR	i < $.length
20286	270	12	GTest.java	entropy	THIS	GTest	0	NIL-FOR	j < k[i].length
20286	270	12	GTest.java	entropy	j	int	0	NIL-FOR	$ < k[i].length
20286	270	12	GTest.java	entropy	i	int	0	NIL-FOR	j < k[$].length
20286	270	12	GTest.java	entropy	k	long[][]	0	NIL-FOR	j < $[i].length
2305	271	16	GTest.java	entropy	j	int	0	DEF	k[i][$] != 0
2305	271	16	GTest.java	entropy	i	int	0	DEF	k[$][j] != 0
2305	271	16	GTest.java	entropy	k	long[][]	0	DEF	$[i][j] != 0
20287	294	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
20287	294	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
20287	294	8	GTest.java	entropy	k	long[]	0	NIL-FOR	i < $.length
20288	297	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
20288	297	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
20288	297	8	GTest.java	entropy	k	long[]	0	NIL-FOR	i < $.length
2306	298	12	GTest.java	entropy	i	int	0	DEF	k[$] != 0
2306	298	12	GTest.java	entropy	k	long[]	0	DEF	$[i] != 0
2307	352	8	GTest.java	gDataSetsComparison	THIS	GTest	0	DimensionMismatchException	observed1.$.length < 2
2307	352	8	GTest.java	gDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
2308	355	8	GTest.java	gDataSetsComparison	THIS	GTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
2308	355	8	GTest.java	gDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
2308	355	8	GTest.java	gDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
20289	371	8	GTest.java	gDataSetsComparison	THIS	GTest	0	NIL-FOR	i < observed1.$.length
20289	371	8	GTest.java	gDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
20289	371	8	GTest.java	gDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2309	372	12	GTest.java	gDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
2309	372	12	GTest.java	gDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
2309	372	12	GTest.java	gDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
2309	372	12	GTest.java	gDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
2310	383	8	GTest.java	gDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
2310	383	8	GTest.java	gDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
2311	426	8	GTest.java	rootLogLikelihoodRatio	k11	long	0	DEF	(double) $ / ($ + k12) < (double) k21 / (k21 + k22)
2311	426	8	GTest.java	rootLogLikelihoodRatio	k12	long	0	DEF	(double) k11 / (k11 + $) < (double) k21 / (k21 + k22)
2311	426	8	GTest.java	rootLogLikelihoodRatio	k21	long	0	DEF	(double) k11 / (k11 + k12) < (double) $ / ($ + k22)
2311	426	8	GTest.java	rootLogLikelihoodRatio	k22	long	0	DEF	(double) k11 / (k11 + k12) < (double) k21 / (k21 + $)
2312	531	8	GTest.java	gTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
2312	531	8	GTest.java	gTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
2672	310	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
2672	310	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
2673	312	15	Gamma.java	logGamma	x	double	1	RET	$ < 0.5
2674	314	15	Gamma.java	logGamma	x	double	1	RET	$ <= 2.5
2675	316	15	Gamma.java	logGamma	x	double	1	RET	$ <= 8.0
20476	319	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ <= n
20476	319	12	Gamma.java	logGamma	n	int	0	NIL-FOR	i <= $
2676	379	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
2676	379	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
2676	379	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
2676	379	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
2677	381	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
2678	383	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x >= $ + 1
2678	383	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ >= a + 1
20477	392	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
20477	392	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	FastMath.abs($/sum) > epsilon
20477	392	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	FastMath.abs(an/$) > epsilon
20477	392	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	$ < Double.POSITIVE_INFINITY
20477	392	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	FastMath.abs(an/sum) > $
20477	392	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
2679	402	12	Gamma.java	regularizedGammaP	n	double	1	MaxCountExceededException	$ >= maxIterations
2679	402	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxCountExceededException	n >= $
2680	404	19	Gamma.java	regularizedGammaP	sum	double	1	DEF	Double.isInfinite($)
2681	457	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
2681	457	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
2681	457	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
2681	457	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
2682	459	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
2683	461	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $ + 1.0
2683	461	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a + 1.0
2684	509	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
2684	509	8	Gamma.java	digamma	x	double	0	RET	$ > 0
2685	515	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
2686	539	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
2686	539	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
2687	543	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
20478	576	8	Gamma.java	lanczos	i	int	0	NIL-FOR	$ > 0
2688	595	8	Gamma.java	invGamma1pm1	x	double	0	NumberIsTooSmallException	$ < -0.5
2689	598	8	Gamma.java	invGamma1pm1	x	double	0	NumberIsTooLargeException	$ > 1.5
2690	604	8	Gamma.java	invGamma1pm1	t	double	1	DEF	$ < 0.0
2691	630	12	Gamma.java	invGamma1pm1	x	double	1	DEF	$ > 0.5
2692	665	12	Gamma.java	invGamma1pm1	x	double	1	DEF	$ > 0.5
2693	688	8	Gamma.java	logGamma1p	x	double	0	NumberIsTooSmallException	$ < -0.5
2694	691	8	Gamma.java	logGamma1p	x	double	0	NumberIsTooLargeException	$ > 1.5
2695	709	8	Gamma.java	gamma	x	double	0	RET	$ <= 0.0
2695	709	8	Gamma.java	gamma	x	double	0	RET	$ == FastMath.rint($)
2696	715	8	Gamma.java	gamma	absX	double	1	DEF	$ <= 20.0
2697	716	12	Gamma.java	gamma	x	double	1	DEF	$ >= 1.0
20479	727	16	Gamma.java	gamma	t	double	0	NIL-WHILE	$ > 2.5
20480	742	16	Gamma.java	gamma	t	double	0	NIL-WHILE	$ < -0.5
2698	753	12	Gamma.java	gamma	x	double	1	DEF	$ > 0.0
2699	785	8	Gamma.java	logGammaSum	a	double	0	OutOfRangeException	$ < 1.0
2699	785	8	Gamma.java	logGammaSum	a	double	0	OutOfRangeException	$ > 2.0
2700	788	8	Gamma.java	logGammaSum	b	double	0	OutOfRangeException	$ > 2.0
2700	788	8	Gamma.java	logGammaSum	b	double	0	OutOfRangeException	$ < 1.0
2701	793	8	Gamma.java	logGammaSum	x	double	1	RET	$ <= 0.25
2702	795	15	Gamma.java	logGammaSum	x	double	1	RET	$ <= 1.25
2703	816	8	Gamma.java	logGammaMinusLogGammaSum	a	double	0	NumberIsTooSmallException	$ < 0.0
2704	819	8	Gamma.java	logGammaMinusLogGammaSum	b	double	0	NumberIsTooSmallException	$ < 8.0
2705	829	8	Gamma.java	logGammaMinusLogGammaSum	a	double	1	DEF	$ <= b
2705	829	8	Gamma.java	logGammaMinusLogGammaSum	b	double	1	DEF	a <= $
1118	134	8	GammaDistribution.java	GammaDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1119	137	8	GammaDistribution.java	GammaDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1120	236	8	GammaDistribution.java	density	x	double	0	RET	$ < 0
1121	240	8	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	FastMath.log(y) >= $.maxLogY
1121	240	8	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	y <= $.minY
1121	240	8	GammaDistribution.java	density	y	double	0	RET	FastMath.log($) >= maxLogY
1121	240	8	GammaDistribution.java	density	y	double	0	RET	$ <= minY
1122	274	8	GammaDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1123	372	8	GammaDistribution.java	sample	THIS	GammaDistribution	0	RET	$.shape < 1
1124	381	16	GammaDistribution.java	sample	p	double	1	RET	$ <= 1
1125	387	20	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.exp(-$)
1125	387	20	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.exp(-x)
1126	399	20	GammaDistribution.java	sample	THIS	GammaDistribution	1	DEF	u2 > FastMath.pow(x, $.shape - 1)
1126	399	20	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.pow($, shape - 1)
1126	399	20	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.pow(x, shape - 1)
1127	418	12	GammaDistribution.java	sample	v	double	0	DEF	$ <= 0
1128	426	12	GammaDistribution.java	sample	x2	double	0	RET	u < 1 - 0.0331 * $ * $
1128	426	12	GammaDistribution.java	sample	u	double	0	RET	$ < 1 - 0.0331 * x2 * x2
1129	430	12	GammaDistribution.java	sample	v	double	0	RET	FastMath.log(u) < 0.5 * x2 + d * (1 - $ + FastMath.log($))
1129	430	12	GammaDistribution.java	sample	x2	double	0	RET	FastMath.log(u) < 0.5 * $ + d * (1 - v + FastMath.log(v))
1129	430	12	GammaDistribution.java	sample	u	double	0	RET	FastMath.log($) < 0.5 * x2 + d * (1 - v + FastMath.log(v))
1129	430	12	GammaDistribution.java	sample	d	double	0	RET	FastMath.log(u) < 0.5 * x2 + $ * (1 - v + FastMath.log(v))
3600	52	8	GaussIntegrator.java	GaussIntegrator	THIS	GaussIntegrator	0	DimensionMismatchException	points.$.length != weights.$.length
3600	52	8	GaussIntegrator.java	GaussIntegrator	points	double[]	0	DimensionMismatchException	$.length != weights.length
3600	52	8	GaussIntegrator.java	GaussIntegrator	weights	double[]	0	DimensionMismatchException	points.length != $.length
20957	91	8	GaussIntegrator.java	integrate	THIS	GaussIntegrator	0	NIL-FOR	i < $.points.$.length
20957	91	8	GaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < points.length
20964	126	8	GaussIntegratorFactory.java	transform	THIS	GaussIntegratorFactory	0	NIL-FOR	i < points.$.length
20964	126	8	GaussIntegratorFactory.java	transform	i	int	0	NIL-FOR	$ < points.length
20964	126	8	GaussIntegratorFactory.java	transform	points	double[]	0	NIL-FOR	i < $.length
1833	108	8	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	NullArgumentException	$ == null
20008	118	8	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
20008	118	8	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
20009	128	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
20010	142	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
20010	142	12	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
20011	150	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
20011	150	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
20012	155	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
20012	155	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
20013	158	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < nC
20013	158	20	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	l < $
20014	172	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nC
20014	172	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	i < $
1834	180	12	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	$ != null
1835	182	16	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	RET	$
3356	63	8	Gaussian.java	Gaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
3357	228	8	Gaussian.java	value	coeff	double	1	DEF	$ <= Precision.SAFE_MIN
20822	232	12	Gaussian.java	value	THIS	Gaussian	0	NIL-FOR	n < f.$.length
20822	232	12	Gaussian.java	value	n	int	0	NIL-FOR	$ < f.length
20822	232	12	Gaussian.java	value	f	double[]	0	NIL-FOR	n < $.length
20823	237	16	Gaussian.java	value	k	int	0	NIL-FOR	$ >= 0
3358	239	20	Gaussian.java	value	k	int	1	DEF	$ > 2
3359	241	27	Gaussian.java	value	k	int	0	DEF	$ == 2
3360	245	16	Gaussian.java	value	n	int	0	DEF	($ & 0x1) == 1
2636	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ > 1
2636	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ < 0
2637	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ > 1
2637	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ < 0
20459	120	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
20459	120	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
20460	154	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
2638	159	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
2638	159	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
2639	165	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
2639	165	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
2640	175	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
2173	114	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
2174	208	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	MathIllegalStateException	$.getN() > 0
2828	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	1	DEF	$.previousState != null
2828	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
20579	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20579	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
20580	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20580	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
20916	47	8	GradientFunction.java	value	THIS	GradientFunction	0	NIL-FOR	i < point.$.length
20916	47	8	GradientFunction.java	value	i	int	0	NIL-FOR	$ < point.length
20916	47	8	GradientFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
20917	57	8	GradientFunction.java	value	THIS	GradientFunction	0	NIL-FOR	i < point.$.length
20917	57	8	GradientFunction.java	value	i	int	0	NIL-FOR	$ < point.length
20917	57	8	GradientFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
2769	228	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ < 0.0001
2769	228	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ > 0.9999
2770	263	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ < 0.0001
2770	263	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ > 0.9999
2771	269	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ < 0.0001
2771	269	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ > 0.9999
2772	275	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ < 0.0001
2772	275	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ > 0.9999
2773	281	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ > 999.9
2773	281	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ < 1.0001
2774	315	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ % 2 != 0
2774	315	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ <= 6
2775	319	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ > 0.9999
2775	319	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ < 0.0001
2776	325	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ > 0.9999
2776	325	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ < 0.0001
2777	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
2777	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
2777	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
20539	377	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
20539	377	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
20540	384	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
20540	384	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
20541	389	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
20541	389	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
20542	391	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
20542	391	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
2778	414	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ >= 7
2778	414	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ <= 0
2779	428	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
20543	429	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
20543	429	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
20543	429	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
20544	434	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
20544	434	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
20544	434	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
20545	470	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
20545	470	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
20545	470	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
20546	477	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
20546	477	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
2780	479	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
2780	479	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
20547	485	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
20547	485	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
20547	485	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
2781	494	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
2781	494	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
2781	494	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
2781	494	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
2781	494	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
20548	496	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
20548	496	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
20548	496	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
20549	501	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
20549	501	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
20549	501	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
2782	505	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * FastMath.max(1.0e-15, $)
2782	505	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * FastMath.max(1.0e-15, initialNorm)
20550	513	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
20550	513	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
20550	513	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
20551	532	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
20551	532	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
20552	533	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
20552	533	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
20552	533	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
20553	541	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
20553	541	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
20553	541	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
20554	567	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
20554	567	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
20555	573	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
20555	573	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
20556	580	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
20556	580	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
20556	580	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
2783	586	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2783	586	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
20557	624	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-DOWHILE	$.isLastStep
2784	629	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
2785	634	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
2786	638	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2787	650	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
2787	650	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
2787	650	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2787	650	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2787	650	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
2787	650	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
20558	659	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
2788	664	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2788	664	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
2788	664	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2788	664	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
2788	664	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
2788	664	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2788	664	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
2788	664	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2788	664	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2788	664	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2789	677	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
20559	686	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < $.mainSetDimension
20559	686	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < mainSetDimension
2790	692	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
2790	692	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
2790	692	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
2790	692	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
2791	713	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2791	713	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2792	716	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2793	725	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2793	725	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2794	731	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2794	731	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2794	731	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2795	743	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2796	751	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2796	751	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2797	756	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2797	756	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2797	756	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2798	767	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
2799	769	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2799	769	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2799	769	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2800	780	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.isLastStep
2800	780	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
2800	780	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2801	792	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2802	799	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
20560	802	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
20560	802	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
20561	808	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
20561	808	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
20562	814	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
20562	814	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
20562	814	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
20563	817	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
20563	817	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
20563	817	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
20564	820	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
20564	820	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
20564	820	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
20565	825	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
20565	825	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
20565	825	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
20566	830	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
20566	830	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
20567	831	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
20567	831	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
20568	832	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
20568	832	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
20568	832	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
2803	840	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
2804	847	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
2805	852	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
2806	862	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2807	875	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
2808	877	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2809	880	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
2809	880	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
2810	882	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
2810	882	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2811	884	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
2811	884	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
2812	889	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
2812	889	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
2812	889	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
2813	893	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
2813	893	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
2813	893	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
2814	898	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
2815	905	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
2815	905	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
2816	908	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
2816	908	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
2816	908	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
2816	908	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
2817	927	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2818	933	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
2844	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynomials == null
2844	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials == null
20604	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynomials.$.length
20604	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynomials.length
2845	192	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
2846	199	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials != null
20605	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
20605	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
20605	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
20606	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
20606	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
20606	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
2847	212	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
20607	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
20607	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
20608	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
20608	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
2848	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials.$.length <= (mu + 4)
2848	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials == null
2848	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynomials.length <= ($ + 4)
20609	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
20609	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
2849	264	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
2850	272	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
2851	276	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
2852	280	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
20610	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
20610	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
2853	304	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
20611	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < scale.$.length
20611	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < scale.length
20611	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	scale	double[]	0	NIL-FOR	i < $.length
20612	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
20612	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
2854	339	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
20613	342	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
2855	353	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
20614	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
20614	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
20615	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
20615	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
20616	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
20616	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
20617	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
20617	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
3361	171	8	HarmonicOscillator.java	value	THIS	HarmonicOscillator	0	DEF	f.$.length > 1
3361	171	8	HarmonicOscillator.java	value	f	double[]	0	DEF	$.length > 1
20824	174	12	HarmonicOscillator.java	value	THIS	HarmonicOscillator	0	NIL-FOR	i < f.$.length
20824	174	12	HarmonicOscillator.java	value	i	int	0	NIL-FOR	$ < f.length
20824	174	12	HarmonicOscillator.java	value	f	double[]	0	NIL-FOR	i < $.length
20747	90	8	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	i < value.$.length
20747	90	8	HermiteInterpolator.java	addSamplePoint	i	int	0	NIL-FOR	$ < value.length
20747	90	8	HermiteInterpolator.java	addSamplePoint	value	double[]	0	NIL-FOR	i < $.length
3289	93	12	HermiteInterpolator.java	addSamplePoint	i	int	0	DEF	$ > 1
20748	95	16	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	j < y.$.length
20748	95	16	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < y.length
20748	95	16	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	j < $.length
20749	104	12	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < n
20749	104	12	HermiteInterpolator.java	addSamplePoint	n	int	0	NIL-FOR	j < $
3290	107	16	HermiteInterpolator.java	addSamplePoint	inv	double	0	ZeroException	Double.isInfinite($)
20750	110	16	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	k < y.$.length
20750	110	16	HermiteInterpolator.java	addSamplePoint	k	int	0	NIL-FOR	$ < y.length
20750	110	16	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	k < $.length
20751	139	8	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < polynomials.$.length
20751	139	8	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < polynomials.length
20751	139	8	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	i < $.length
20752	145	8	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
20752	145	8	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < topDiagonal.size()
20753	147	12	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	k < polynomials.$.length
20753	147	12	HermiteInterpolator.java	getPolynomials	k	int	0	NIL-FOR	$ < polynomials.length
20753	147	12	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	k < $.length
20754	176	8	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
20754	176	8	HermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
20755	178	12	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	k < value.$.length
20755	178	12	HermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
20755	178	12	HermiteInterpolator.java	value	value	double[]	0	NIL-FOR	k < $.length
20756	209	8	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
20756	209	8	HermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
20757	211	12	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	k < value.$.length
20757	211	12	HermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
20757	211	12	HermiteInterpolator.java	value	value	DerivativeStructure[]	0	NIL-FOR	k < $.length
3291	227	8	HermiteInterpolator.java	checkInterpolation	THIS	HermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
1250	61	8	HessenbergTransformer.java	HessenbergTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1251	84	8	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.cachedP == null
19293	89	12	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ < n
19293	89	12	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	i < $
19294	90	16	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ < n
19294	90	16	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	j < $
19295	95	12	HessenbergTransformer.java	getP	m	int	0	NIL-FOR	$ >= 1
1252	96	16	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.householderVectors[m][m - 1] != 0.0
1252	96	16	HessenbergTransformer.java	getP	m	int	0	DEF	householderVectors[$][$ - 1] != 0.0
19296	97	20	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
19296	97	20	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
19297	101	20	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ <= high
19297	101	20	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	j <= $
19298	104	24	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
19298	104	24	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
19299	111	24	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
19299	111	24	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
1253	130	8	HessenbergTransformer.java	getPT	THIS	HessenbergTransformer	0	DEF	$.cachedPt == null
1254	144	8	HessenbergTransformer.java	getH	THIS	HessenbergTransformer	0	DEF	$.cachedH == null
19300	147	12	HessenbergTransformer.java	getH	i	int	0	NIL-FOR	$ < m
19300	147	12	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	i < $
1255	148	16	HessenbergTransformer.java	getH	i	int	0	DEF	$ > 0
19301	154	16	HessenbergTransformer.java	getH	j	int	0	NIL-FOR	$ < m
19301	154	16	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	j < $
19302	184	8	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	$ <= high - 1
19302	184	8	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	m <= $ - 1
19303	187	12	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
19303	187	12	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
1256	191	12	HessenbergTransformer.java	transform	scale	double	0	DEF	Precision.equals($, 0)
19304	194	16	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
19304	194	16	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
19305	206	16	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ < n
19305	206	16	HessenbergTransformer.java	transform	n	int	0	NIL-FOR	j < $
19306	208	20	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
19306	208	20	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
19307	212	20	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
19307	212	20	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
19308	217	16	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
19308	217	16	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
19309	219	20	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ >= m
19309	219	20	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	j >= $
19310	223	20	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ <= high
19310	223	20	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	j <= $
20647	117	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < $.mainSetDimension
20647	117	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
20648	119	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < STATIC_E.$.length
20648	119	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < STATIC_E.length
2875	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	1	DEF	$.previousState != null
2875	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
20645	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20645	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
20646	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20646	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1017	86	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NotStrictlyPositiveException	$ <= 0
1018	90	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NotPositiveException	$ < 0
1019	94	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NotPositiveException	$ < 0
1020	99	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	numberOfSuccesses > $
1020	99	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NumberIsTooLargeException	$ > populationSize
1021	103	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	sampleSize > $
1021	103	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NumberIsTooLargeException	$ > populationSize
1022	118	8	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
1022	118	8	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
1023	120	15	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
1023	120	15	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
1024	199	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x < $[0]
1024	199	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x > $[1]
1024	199	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ < domain[0]
1024	199	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ > domain[1]
1025	228	8	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x <= $[0]
1025	228	8	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ <= domain[0]
1026	230	15	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
1026	230	15	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
19084	254	8	HypergeometricDistribution.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
19084	254	8	HypergeometricDistribution.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
1027	279	8	HypergeometricDistribution.java	getNumericalVariance	THIS	HypergeometricDistribution	0	DEF	$.numericalVarianceIsCalculated
2545	121	8	ISAACRandom.java	setSeed	seed	int[]	0	RET	$ == null
2546	128	8	ISAACRandom.java	setSeed	seedLen	int	0	DEF	$ < rslLen
2546	128	8	ISAACRandom.java	setSeed	rslLen	int	0	DEF	seedLen < $
20412	129	12	ISAACRandom.java	setSeed	j	int	0	NIL-FOR	$ < rslLen
20412	129	12	ISAACRandom.java	setSeed	rslLen	int	0	NIL-FOR	j < $
2547	140	8	ISAACRandom.java	next	THIS	ISAACRandom	0	DEF	$.count < 0
20413	152	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacI < H_SIZE
20414	156	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacJ < H_SIZE
20415	193	8	ISAACRandom.java	initState	THIS	ISAACRandom	0	NIL-FOR	j < $.arr.$.length
20415	193	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < arr.length
20416	196	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < 4
20417	200	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
20418	213	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
183	81	8	Incrementor.java	Incrementor	cb	MaxCountExceededCallback	0	NullArgumentException	$ == null
19016	136	8	Incrementor.java	incrementCount	i	int	0	NIL-FOR	$ < value
19016	136	8	Incrementor.java	incrementCount	value	int	0	NIL-FOR	i < $
184	155	8	Incrementor.java	incrementCount	THIS	Incrementor	0	DEF	++$.count > $.maximalCount
732	120	8	Interval.java	checkPoint	THIS	Interval	1	RET	point > $.upper + tolerance
732	120	8	Interval.java	checkPoint	THIS	Interval	1	RET	point < $.lower - tolerance
732	120	8	Interval.java	checkPoint	point	double	1	RET	$ > upper + tolerance
732	120	8	Interval.java	checkPoint	point	double	1	RET	$ < lower - tolerance
732	120	8	Interval.java	checkPoint	tolerance	double	1	RET	point > upper + $
732	120	8	Interval.java	checkPoint	tolerance	double	1	RET	point < lower - $
733	122	15	Interval.java	checkPoint	THIS	Interval	1	RET	point < $.upper - tolerance
733	122	15	Interval.java	checkPoint	THIS	Interval	1	RET	point > $.lower + tolerance
733	122	15	Interval.java	checkPoint	point	double	1	RET	$ < upper - tolerance
733	122	15	Interval.java	checkPoint	point	double	1	RET	$ > lower + tolerance
733	122	15	Interval.java	checkPoint	tolerance	double	1	RET	point < upper - $
733	122	15	Interval.java	checkPoint	tolerance	double	1	RET	point > lower + $
739	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	$ < 0
739	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	Double.isInfinite($)
740	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
740	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
741	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
741	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
742	139	8	IntervalsSet.java	computeGeometricalProperties	THIS	IntervalsSet	1	DEF	$.getTree(false).getCut() == null
743	150	12	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	Double.isInfinite($)
744	152	19	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	$ >= Precision.SAFE_MIN
19053	169	8	IntervalsSet.java	getInf	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
19054	186	8	IntervalsSet.java	getSup	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
745	224	8	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	1	DEF	$.getCut() == null
746	225	12	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	0	DEF	(Boolean) $.getAttribute()
747	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(low, loc) == $.Location.INSIDE
747	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(high, loc) == $.Location.INSIDE
747	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(low, $) == Location.INSIDE
747	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(high, $) == Location.INSIDE
747	241	12	IntervalsSet.java	recurseList	low	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
747	241	12	IntervalsSet.java	recurseList	high	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
3609	120	12	IterativeLegendreGaussIntegrator.java	doIntegrate	THIS	IterativeLegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
3609	120	12	IterativeLegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
3609	120	12	IterativeLegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
20965	155	8	IterativeLegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
20965	155	8	IterativeLegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
1219	81	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != $.getColumnDimension()
1220	85	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	b.getDimension() != $.getRowDimension()
1220	85	8	IterativeLinearSolver.java	checkParameters	b	RealVector	0	DimensionMismatchException	$.getDimension() != a.getRowDimension()
1221	89	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	x0.getDimension() != $.getColumnDimension()
1221	89	8	IterativeLinearSolver.java	checkParameters	x0	RealVector	0	DimensionMismatchException	$.getDimension() != a.getColumnDimension()
1192	62	8	JacobiPreconditioner.java	create	n	int	0	NonSquareOperatorException	a.getRowDimension() != $
1192	62	8	JacobiPreconditioner.java	create	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != n
1193	66	8	JacobiPreconditioner.java	create	a	RealLinearOperator	1	DEF	$ instanceof AbstractRealMatrix
19235	68	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
19235	68	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
19236	73	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
19236	73	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
20840	49	8	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	i < point.$.length
20840	49	8	JacobianFunction.java	value	i	int	0	NIL-FOR	$ < point.length
20840	49	8	JacobianFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
20841	59	8	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	i < dsY.$.length
20841	59	8	JacobianFunction.java	value	i	int	0	NIL-FOR	$ < dsY.length
20841	59	8	JacobianFunction.java	value	dsY	DerivativeStructure[]	0	NIL-FOR	i < $.length
20842	60	12	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	j < point.$.length
20842	60	12	JacobianFunction.java	value	j	int	0	NIL-FOR	$ < point.length
20842	60	12	JacobianFunction.java	value	point	double[]	0	NIL-FOR	j < $.length
2896	133	8	JacobianMatrices.java	JacobianMatrices	parameters	String	1	DEF	$ == null
20651	138	12	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < parameters.$.length
20651	138	12	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < parameters.length
20651	138	12	JacobianMatrices.java	JacobianMatrices	parameters	String	0	NIL-FOR	i < $.length
20652	150	8	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
20652	150	8	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < stateDim
2897	171	8	JacobianMatrices.java	registerVariationalEquations	ode	FirstOrderDifferentialEquations	0	MismatchedEquations	expandable.getPrimary() != $
2897	171	8	JacobianMatrices.java	registerVariationalEquations	expandable	ExpandableStatefulODE	0	MismatchedEquations	$.getPrimary() != ode
2898	217	12	JacobianMatrices.java	setParameterStep	THIS	JacobianMatrices	0	RET	parameter.equals($.param.getParameterName())
2898	217	12	JacobianMatrices.java	setParameterStep	parameter	String	0	RET	$.equals(param.getParameterName())
2899	250	8	JacobianMatrices.java	setInitialMainStateJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
2900	275	12	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	RET	pName.equals($.param.getParameterName())
2900	275	12	JacobianMatrices.java	setInitialParameterJacobian	pName	String	0	RET	$.equals(param.getParameterName())
2901	277	16	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
20653	298	8	JacobianMatrices.java	getCurrentMainSetJacobian	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
20653	298	8	JacobianMatrices.java	getCurrentMainSetJacobian	i	int	0	NIL-FOR	$ < stateDim
2902	316	12	JacobianMatrices.java	getCurrentParameterJacobian	THIS	JacobianMatrices	0	RET	$.param.getParameterName().equals(pName)
2902	316	12	JacobianMatrices.java	getCurrentParameterJacobian	pName	String	0	RET	param.getParameterName().equals($)
2903	333	8	JacobianMatrices.java	checkDimension	arrayDimension	int	0	DimensionMismatchException	$ != expected
2903	333	8	JacobianMatrices.java	checkDimension	expected	int	0	DimensionMismatchException	arrayDimension != $
20293	110	8	KMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
20293	110	8	KMeansPlusPlusClusterer.java	cluster	numTrials	int	0	NIL-FOR	i < $
2323	118	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2324	131	12	KMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
2324	131	12	KMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
2325	165	8	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
2325	165	8	KMeansPlusPlusClusterer.java	cluster	k	int	0	NumberIsTooSmallException	points.size() < $
20294	179	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
20294	179	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
2326	184	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
2327	209	12	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
2327	209	12	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
2328	232	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
2328	232	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
2328	232	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
20295	286	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
20295	286	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2329	287	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
2329	287	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
20296	293	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
20296	293	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
20297	299	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
20297	299	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2330	300	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2330	300	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
20298	315	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
20298	315	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2331	316	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2331	316	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2332	318	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
2332	318	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
2333	328	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
20299	329	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
2334	330	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2334	330	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2335	338	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
2336	347	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	DEF	$.size() < k
2336	347	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	DEF	resultSet.size() < $
20300	350	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
20300	350	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
2337	352	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
2337	352	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
2338	355	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
2338	355	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
2338	355	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
2339	386	12	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2340	397	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
2340	397	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
2341	406	8	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
2342	433	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
2342	433	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
2343	441	8	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
20301	468	12	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
20301	468	12	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
2344	470	16	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
2344	470	16	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
2345	480	8	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster<T>	0	ConvergenceException	$ == null
2346	503	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
2346	503	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
0	136	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getControlMatrix() == null
1	156	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialStateEstimate() == null
2	162	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	DimensionMismatchException	$.transitionMatrix.getColumnDimension() != $.stateEstimation.getDimension()
3	169	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialErrorCovariance() == null
4	178	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	NonSquareMatrixException	$.transitionMatrix.isSquare()
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() > 0
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() > 0
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() != 1
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix != null
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() != $.transitionMatrix.getRowDimension()
6	199	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.measurementMatrix.getColumnDimension() != $.transitionMatrix.getRowDimension()
7	207	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	measNoise.getRowDimension() != $.measurementMatrix.getRowDimension()
7	207	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
7	207	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != measurementMatrix.getRowDimension()
8	298	8	KalmanFilter.java	predict	THIS	KalmanFilter	0	DimensionMismatchException	u.getDimension() != $.controlMatrix.getColumnDimension()
8	298	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$ != null
8	298	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$.getDimension() != controlMatrix.getColumnDimension()
9	309	8	KalmanFilter.java	predict	u	RealVector	0	DEF	$ != null
10	354	8	KalmanFilter.java	correct	THIS	KalmanFilter	0	DimensionMismatchException	z.getDimension() != $.measurementMatrix.getRowDimension()
10	354	8	KalmanFilter.java	correct	z	RealVector	0	DimensionMismatchException	$.getDimension() != measurementMatrix.getRowDimension()
1130	86	8	KolmogorovSmirnovDistribution.java	KolmogorovSmirnovDistribution	n	int	0	NotStrictlyPositiveException	$ <= 0
1131	154	8	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	d <= $
1131	154	8	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninvhalf
1132	158	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	d <= $
1132	158	15	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	$ < d
1132	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	ninvhalf < $
1132	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninv
19096	164	12	KolmogorovSmirnovDistribution.java	cdf	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
19096	164	12	KolmogorovSmirnovDistribution.java	cdf	i	int	0	NIL-FOR	$ <= n
1133	170	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	1 - $ <= d
1133	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ < 1
1133	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	1 - ninv <= $
1134	174	15	KolmogorovSmirnovDistribution.java	cdf	d	double	0	RET	1 <= $
19097	203	8	KolmogorovSmirnovDistribution.java	exactK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
19097	203	8	KolmogorovSmirnovDistribution.java	exactK	i	int	0	NIL-FOR	$ <= n
19098	238	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ < m
19098	238	8	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	i < $
19099	239	12	KolmogorovSmirnovDistribution.java	roundedK	j	int	0	NIL-FOR	$ < m
19099	239	12	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	j < $
19100	248	8	KolmogorovSmirnovDistribution.java	roundedK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
19100	248	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ <= n
1135	274	8	KolmogorovSmirnovDistribution.java	createH	hDouble	double	0	NumberIsTooLargeException	$ >= 1
19101	295	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
19101	295	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
19102	296	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < m
19102	296	12	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	j < $
1136	297	16	KolmogorovSmirnovDistribution.java	createH	j	int	1	DEF	i - $ + 1 < 0
1136	297	16	KolmogorovSmirnovDistribution.java	createH	i	int	1	DEF	$ - j + 1 < 0
19103	311	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
19103	311	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
19104	318	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
19104	318	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
1137	328	8	KolmogorovSmirnovDistribution.java	createH	h	BigFraction	0	DEF	$.compareTo(BigFraction.ONE_HALF) == 1
19105	343	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
19105	343	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
19106	344	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < i + 1
19106	344	12	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	j < $ + 1
1138	345	16	KolmogorovSmirnovDistribution.java	createH	j	int	0	DEF	i - $ + 1 > 0
1138	345	16	KolmogorovSmirnovDistribution.java	createH	i	int	0	DEF	$ - j + 1 > 0
19107	346	20	KolmogorovSmirnovDistribution.java	createH	g	int	0	NIL-FOR	$ <= i - j + 1
19107	346	20	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	g <= i - $ + 1
19107	346	20	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	g <= $ - j + 1
2168	101	8	Kurtosis.java	increment	THIS	Kurtosis	0	DEF	$.incMoment
2169	112	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
2170	114	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
2170	114	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
2171	132	8	Kurtosis.java	clear	THIS	Kurtosis	0	DEF	$.incMoment
2172	167	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
2172	167	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2172	167	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
2172	167	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
2172	167	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
20251	178	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20251	178	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20251	178	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1165	87	8	LUDecomposition.java	LUDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
19113	100	8	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
19113	100	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
19114	107	8	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	$ < m
19114	107	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	col < $
19115	110	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < col
19115	110	12	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	row < $
19116	113	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < row
19116	113	16	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	i < $
19117	122	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
19117	122	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
19118	125	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < col
19118	125	16	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	i < $
1166	131	16	LUDecomposition.java	LUDecomposition	sum	double	0	DEF	FastMath.abs($) > largest
1166	131	16	LUDecomposition.java	LUDecomposition	largest	double	0	DEF	FastMath.abs(sum) > $
1167	138	12	LUDecomposition.java	LUDecomposition	THIS	LUDecomposition	0	RET	FastMath.abs($.lu[max][col]) < singularityThreshold
1167	138	12	LUDecomposition.java	LUDecomposition	max	int	0	RET	FastMath.abs(lu[$][col]) < singularityThreshold
1167	138	12	LUDecomposition.java	LUDecomposition	col	int	0	RET	FastMath.abs(lu[max][$]) < singularityThreshold
1167	138	12	LUDecomposition.java	LUDecomposition	singularityThreshold	double	0	RET	FastMath.abs(lu[max][col]) < $
1168	144	12	LUDecomposition.java	LUDecomposition	max	int	0	DEF	$ != col
1168	144	12	LUDecomposition.java	LUDecomposition	col	int	0	DEF	max != $
19119	148	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < m
19119	148	16	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	i < $
19120	161	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
19120	161	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
1169	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.cachedL == null
1169	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.singular
19121	176	12	LUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
19121	176	12	LUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
19122	178	16	LUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
19122	178	16	LUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1170	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.cachedU == null
1170	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.singular
19123	196	12	LUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
19123	196	12	LUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
19124	198	16	LUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
19124	198	16	LUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1171	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.cachedP == null
1171	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.singular
19125	219	12	LUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
19125	219	12	LUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1172	240	8	LUDecomposition.java	getDeterminant	THIS	LUDecomposition	1	RET	$.singular
19126	245	12	LUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
19126	245	12	LUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
3452	105	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
3452	105	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3453	111	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
3453	111	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3454	116	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
3454	116	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
3455	122	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
3455	122	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3456	127	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
3456	127	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
3457	161	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	1	RET	$.complexSolver.isRoot(lo, hi, z)
3457	161	8	LaguerreSolver.java	laguerre	z	Complex	1	RET	complexSolver.isRoot(lo, hi, $)
3457	161	8	LaguerreSolver.java	laguerre	lo	double	1	RET	complexSolver.isRoot($, hi, z)
3457	161	8	LaguerreSolver.java	laguerre	hi	double	1	RET	complexSolver.isRoot(lo, $, z)
20838	167	12	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
20838	167	12	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < root.length
20838	167	12	LaguerreSolver.java	laguerre	root	Complex[]	0	NIL-FOR	i < $.length
3458	168	16	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	DEF	$.complexSolver.isRoot(lo, hi, root[i])
3458	168	16	LaguerreSolver.java	laguerre	i	int	0	DEF	complexSolver.isRoot(lo, hi, root[$])
3458	168	16	LaguerreSolver.java	laguerre	root	Complex[]	0	DEF	complexSolver.isRoot(lo, hi, $[i])
3458	168	16	LaguerreSolver.java	laguerre	lo	double	0	DEF	complexSolver.isRoot($, hi, root[i])
3458	168	16	LaguerreSolver.java	laguerre	hi	double	0	DEF	complexSolver.isRoot(lo, $, root[i])
1783	112	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
1783	112	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
1783	112	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
1784	142	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
1784	142	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
1784	142	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
1785	155	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
1785	155	8	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
19941	158	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
19941	158	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
19941	158	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1786	164	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
19942	165	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
19942	165	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
19942	165	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1787	169	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
3617	219	12	LegendreGaussIntegrator.java	doIntegrate	THIS	LegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
3617	219	12	LegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
3617	219	12	LegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
20967	250	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
20967	250	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
20968	251	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
20968	251	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
3595	70	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NotStrictlyPositiveException	$ <= 0
3596	75	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
20952	92	8	LegendreHighPrecisionRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
20952	92	8	LegendreHighPrecisionRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
20953	105	12	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
20953	105	12	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
20954	143	12	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
20955	149	16	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
20955	149	16	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
3597	166	16	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	DEF	$
3598	167	20	LegendreHighPrecisionRuleFactory.java	computeRule	pa	BigDecimal	1	DEF	$.signum() * pc.signum() <= 0
3598	167	20	LegendreHighPrecisionRuleFactory.java	computeRule	pc	BigDecimal	1	DEF	pa.signum() * $.signum() <= 0
3599	199	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 != 0
20956	201	12	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
20956	201	12	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
3601	41	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NotStrictlyPositiveException	$ <= 0
3602	46	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
20958	63	8	LegendreRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
20958	63	8	LegendreRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
20959	76	12	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
20959	76	12	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
20960	96	12	LegendreRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
20961	100	16	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
20961	100	16	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
3603	107	16	LegendreRuleFactory.java	computeRule	done	boolean	0	DEF	$
3604	108	20	LegendreRuleFactory.java	computeRule	pa	double	1	DEF	$ * pc <= 0
3604	108	20	LegendreRuleFactory.java	computeRule	pc	double	1	DEF	pa * $ <= 0
3605	134	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 != 0
20962	136	12	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
20962	136	12	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
19943	324	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
19943	324	12	LevenbergMarquardtOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
19944	333	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
19944	333	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
1788	338	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
19945	342	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
19945	342	16	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
1789	344	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1790	359	12	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	$ != 0
19946	360	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19946	360	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1791	363	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
19947	365	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
19947	365	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1792	372	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1792	372	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
19948	379	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
19948	379	12	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
19949	384	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
19950	387	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19950	387	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
19951	404	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19951	404	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1793	413	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1794	425	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost < $
1794	425	16	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ < previousCost
19952	432	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19952	432	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
19953	436	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
19953	436	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
19954	441	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19954	441	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1795	454	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1796	457	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1796	457	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost >= $
1796	457	24	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ >= previousCost
1797	462	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1797	462	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1798	468	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
19955	472	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
19955	472	20	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
1799	479	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$ != null
1800	481	24	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(iter, $, current)
1800	481	24	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(iter, previous, $)
1800	481	24	LevenbergMarquardtOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1800	481	24	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$.converged(iter, previous, current)
19956	489	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19956	489	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1801	504	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1801	504	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1801	504	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
1801	504	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
1801	504	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1801	504	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1801	504	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1801	504	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1802	514	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= 2.2204e-16
1802	514	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= 2.2204e-16
1802	514	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
1803	517	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= 2.2204e-16 * xNorm
1803	517	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= 2.2204e-16 * $
1804	520	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= 2.2204e-16
19957	556	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
19957	556	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
19958	559	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < nC
19958	559	8	LevenbergMarquardtOptimizer.java	determineLMParameter	nC	int	0	NIL-FOR	j < $
19959	562	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
19960	565	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
19960	565	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
19961	574	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19961	574	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1805	582	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1805	582	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1806	592	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
19962	593	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19962	593	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
19963	598	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19963	598	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
19964	601	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
19964	601	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
19965	613	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19965	613	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
19966	616	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
19966	616	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1807	624	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1808	632	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
19967	636	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1809	639	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
19968	643	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19968	643	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
19969	650	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19969	650	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1810	662	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1810	662	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1810	662	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1810	662	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
1810	662	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1810	662	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
19970	668	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19970	668	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
19971	672	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19971	672	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
19972	676	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
19972	676	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
19973	681	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19973	681	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1811	688	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1812	690	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
19974	725	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19974	725	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
19975	727	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
19975	727	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
19976	735	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19976	735	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1813	741	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
19977	750	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
19977	750	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1814	755	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1814	755	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1815	760	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
1815	760	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
1815	760	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
19978	778	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
19978	778	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
19979	796	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
19979	796	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1816	797	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1816	797	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1816	797	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1816	797	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1817	800	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1817	800	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1818	804	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
19980	805	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
19981	808	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
19981	808	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
19982	816	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
19982	816	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
19983	854	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
19983	854	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
19984	857	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nR
19984	857	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	i < $
19985	865	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
19985	865	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
19986	870	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nC
19986	870	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	i < $
19987	872	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
19987	872	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
1819	876	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
1819	876	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
1820	880	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1820	880	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1821	885	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
1821	885	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
19988	904	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
19989	906	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
19989	906	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
19990	910	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
19990	910	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
19991	927	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < nC
19991	927	8	LevenbergMarquardtOptimizer.java	qTy	nC	int	0	NIL-FOR	k < $
19992	930	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
19992	930	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
19993	934	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
19993	934	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
664	76	8	Line.java	reset	norm2	double	0	MathIllegalArgumentException	$ == 0.0
665	175	8	Line.java	distance	n	double	0	RET	$ < Precision.SAFE_MIN
666	195	8	Line.java	closestPoint	n	double	0	RET	$ < Precision.EPSILON
750	132	8	Line.java	reset	d	double	1	DEF	$ == 0.0
751	159	8	Line.java	revertSelf	THIS	Line	1	DEF	$.angle < FastMath.PI
752	199	8	Line.java	intersection	d	double	0	RET	FastMath.abs($) < 1.0e-10
19917	128	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
19917	128	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
19917	128	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
1732	190	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
1732	190	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
1733	194	6	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
3254	50	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3254	50	8	LinearInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3254	50	8	LinearInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3255	54	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	NumberIsTooSmallException	x.$.length < 2
3255	54	8	LinearInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 2
20733	66	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
20733	66	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
20734	72	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
20734	72	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1750	107	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
1750	107	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
1751	111	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
2626	69	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
2627	72	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ <= 0
2628	75	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
2628	75	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NumberIsTooLargeException	chromosomes.size() > $
2629	99	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
2630	102	8	ListPopulation.java	setChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	chromosomes.size() > $.populationLimit
2630	102	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
2631	117	8	ListPopulation.java	addChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() + chromosomeColl.size() > $.populationLimit
2631	117	8	ListPopulation.java	addChromosomes	chromosomeColl	Collection<Chromosome>	0	NumberIsTooLargeException	chromosomes.size() + $.size() > populationLimit
2632	148	8	ListPopulation.java	addChromosome	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() >= $.populationLimit
2633	163	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
2633	163	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
2634	187	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NotPositiveException	$ <= 0
2635	190	8	ListPopulation.java	setPopulationLimit	THIS	ListPopulation	0	NumberIsTooSmallException	populationLimit < $.chromosomes.size()
2635	190	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NumberIsTooSmallException	$ < chromosomes.size()
3333	151	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ > 1
3333	151	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ < 0
3334	156	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	NotPositiveException	$ < 0
3335	221	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
3335	221	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
3335	221	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3336	227	8	LoessInterpolator.java	smooth	n	int	0	NoDataException	$ == 0
3337	237	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
3338	241	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
3339	247	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	NumberIsTooSmallException	$ < 2
20805	264	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
20805	264	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
20806	267	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
20806	267	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
3340	272	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
3341	282	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
3341	282	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
3341	282	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
3341	282	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
20807	301	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
20807	301	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
3342	320	16	LoessInterpolator.java	smooth	THIS	LoessInterpolator	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < $.accuracy
3342	320	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
3342	320	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
3343	334	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
3343	334	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
3344	347	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	FastMath.abs(medianResidual) < $.accuracy
3344	347	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	FastMath.abs($) < accuracy
20808	351	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
20808	351	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
3345	353	16	LoessInterpolator.java	smooth	arg	double	1	DEF	$ >= 1
3346	388	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
3346	388	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
3346	388	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3347	422	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	nextRight < xval.$.length
3347	422	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[nextRight] - xval[i] < xval[i] - xval[$]
3347	422	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	$ < xval.length
3347	422	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	xval[$] - xval[i] < xval[i] - xval[left]
3347	422	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	nextRight < $.length
3347	422	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[nextRight] - $[i] < $[i] - $[left]
3347	422	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[nextRight] - xval[$] < xval[$] - xval[left]
20809	439	8	LoessInterpolator.java	nextNonzero	THIS	LoessInterpolator	0	NIL-WHILE	j < weights.$.length
20809	439	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	weights[$] == 0
20809	439	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	$ < weights.length
20809	439	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	$[j] == 0
20809	439	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	j < $.length
3348	455	8	LoessInterpolator.java	tricube	absX	double	0	RET	$ >= 1.0
20810	470	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
20810	470	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
20810	470	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
1152	131	8	LogNormalDistribution.java	LogNormalDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1153	170	8	LogNormalDistribution.java	density	x	double	0	RET	$ <= 0
1154	194	8	LogNormalDistribution.java	cumulativeProbability	x	double	0	RET	$ <= 0
1155	198	8	LogNormalDistribution.java	cumulativeProbability	THIS	LogNormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.shape
1155	198	8	LogNormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * shape
1156	220	8	LogNormalDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1156	220	8	LogNormalDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
1157	224	8	LogNormalDistribution.java	probability	x0	double	0	RET	$ <= 0
1157	224	8	LogNormalDistribution.java	probability	x1	double	0	RET	$ <= 0
3367	72	8	Logistic.java	Logistic	n	double	0	NotStrictlyPositiveException	$ <= 0
3352	162	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
3352	162	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
3352	162	8	Logit.java	value	lo	double	0	OutOfRangeException	x < $
3352	162	8	Logit.java	value	hi	double	0	OutOfRangeException	x > $
3353	175	8	Logit.java	value	THIS	Logit	0	OutOfRangeException	x > $.hi
3353	175	8	Logit.java	value	THIS	Logit	0	OutOfRangeException	x < $.lo
3353	175	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
3353	175	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
3354	183	8	Logit.java	value	f	double[]	1	DEF	Double.isInfinite($[0])
3355	185	12	Logit.java	value	THIS	Logit	0	DEF	f.$.length > 1
3355	185	12	Logit.java	value	f	double[]	0	DEF	$.length > 1
20820	193	12	Logit.java	value	THIS	Logit	0	NIL-FOR	i < f.$.length
20820	193	12	Logit.java	value	i	int	0	NIL-FOR	$ < f.length
20820	193	12	Logit.java	value	f	double[]	0	NIL-FOR	i < $.length
20821	204	12	Logit.java	value	THIS	Logit	0	NIL-FOR	i < f.$.length
20821	204	12	Logit.java	value	i	int	0	NIL-FOR	$ < f.length
20821	204	12	Logit.java	value	f	double[]	0	NIL-FOR	i < $.length
2275	74	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2275	74	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2276	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	x.$.length == 0
2276	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	y.$.length == 0
2276	78	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2276	78	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
20271	140	8	MannWhitneyUTest.java	mannWhitneyU	THIS	MannWhitneyUTest	0	NIL-FOR	i < x.$.length
20271	140	8	MannWhitneyUTest.java	mannWhitneyU	i	int	0	NIL-FOR	$ < x.length
20271	140	8	MannWhitneyUTest.java	mannWhitneyU	x	double[]	0	NIL-FOR	i < $.length
18980	81	8	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
18980	81	8	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
18980	81	8	MathArrays.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
18981	96	6	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
18981	96	6	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
18981	96	6	MathArrays.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
18982	111	8	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
18982	111	8	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
18982	111	8	MathArrays.java	distance	p1	double[]	0	NIL-FOR	i < $.length
18983	127	6	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
18983	127	6	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
18983	127	6	MathArrays.java	distance	p1	int[]	0	NIL-FOR	i < $.length
18984	143	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
18984	143	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
18984	143	8	MathArrays.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
18985	158	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
18985	158	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
18985	158	8	MathArrays.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
18986	188	8	MathArrays.java	isMonotonic	i	int	0	NIL-FOR	$ < max
18986	188	8	MathArrays.java	isMonotonic	max	int	0	NIL-FOR	i < $
113	193	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
114	194	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
115	198	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
116	205	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
117	206	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
118	210	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
18987	258	8	MathArrays.java	checkOrder	max	int	0	NIL-FOR	index < $
18987	258	8	MathArrays.java	checkOrder	index	int	0	NIL-FOR	$ < max
119	261	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
120	262	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] <= $
120	262	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] <= previous
120	262	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] <= previous
121	266	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] < $
121	266	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] < previous
121	266	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] < previous
122	272	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
123	273	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] >= $
123	273	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] >= previous
123	273	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] >= previous
124	277	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] > $
124	277	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] > previous
124	277	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] > previous
125	290	8	MathArrays.java	checkOrder	max	int	0	RET	index == $
125	290	8	MathArrays.java	checkOrder	index	int	0	RET	$ == max
126	296	8	MathArrays.java	checkOrder	abort	boolean	1	NonMonotonicSequenceException	$
18988	338	8	MathArrays.java	checkRectangular	THIS	MathArrays	0	NIL-FOR	i < in.$.length
18988	338	8	MathArrays.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
18988	338	8	MathArrays.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
127	339	12	MathArrays.java	checkRectangular	THIS	MathArrays	0	DimensionMismatchException	in[i].length != in[0].length
127	339	12	MathArrays.java	checkRectangular	i	int	0	DimensionMismatchException	in[$].length != in[0].length
127	339	12	MathArrays.java	checkRectangular	in	long[][]	0	DimensionMismatchException	$[i].length != $[0].length
18989	356	8	MathArrays.java	checkPositive	THIS	MathArrays	0	NIL-FOR	i < in.$.length
18989	356	8	MathArrays.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
18989	356	8	MathArrays.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
128	357	12	MathArrays.java	checkPositive	i	int	0	NotStrictlyPositiveException	in[$] <= 0
128	357	12	MathArrays.java	checkPositive	in	double[]	0	NotStrictlyPositiveException	$[i] <= 0
18990	371	8	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	i < in.$.length
18990	371	8	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
18990	371	8	MathArrays.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
129	372	12	MathArrays.java	checkNonNegative	i	int	0	NotPositiveException	in[$] < 0
129	372	12	MathArrays.java	checkNonNegative	in	long[]	0	NotPositiveException	$[i] < 0
18991	386	8	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	i < in.$.length
18991	386	8	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
18991	386	8	MathArrays.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
18992	387	12	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	j < in[i].length
18992	387	12	MathArrays.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
18992	387	12	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
18992	387	12	MathArrays.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
130	388	16	MathArrays.java	checkNonNegative	j	int	0	NotPositiveException	in[i][$] < 0
130	388	16	MathArrays.java	checkNonNegative	i	int	0	NotPositiveException	in[$][j] < 0
130	388	16	MathArrays.java	checkNonNegative	in	long[][]	0	NotPositiveException	$[i][j] < 0
18993	465	8	MathArrays.java	safeNorm	THIS	MathArrays	0	NIL-FOR	i < v.$.length
18993	465	8	MathArrays.java	safeNorm	i	int	0	NIL-FOR	$ < v.length
18993	465	8	MathArrays.java	safeNorm	v	double[]	0	NIL-FOR	i < $.length
131	467	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ < rdwarf
131	467	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > agiant
131	467	12	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs < $
131	467	12	MathArrays.java	safeNorm	agiant	double	1	DEF	xabs > $
132	468	16	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > rdwarf
132	468	16	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs > $
133	469	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x1max
133	469	20	MathArrays.java	safeNorm	x1max	double	1	DEF	xabs > $
134	478	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x3max
134	478	20	MathArrays.java	safeNorm	x3max	double	1	DEF	xabs > $
135	483	24	MathArrays.java	safeNorm	xabs	double	0	DEF	$ != 0
136	494	8	MathArrays.java	safeNorm	s1	double	1	DEF	$ != 0
137	497	12	MathArrays.java	safeNorm	s2	double	1	DEF	$ == 0
138	500	16	MathArrays.java	safeNorm	s2	double	1	DEF	$ >= x3max
138	500	16	MathArrays.java	safeNorm	x3max	double	1	DEF	s2 >= $
139	552	8	MathArrays.java	sortInPlace	x	double[]	0	NullArgumentException	$ == null
18994	561	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
18994	561	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
18995	563	12	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
18995	563	12	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
140	565	16	MathArrays.java	sortInPlace	y	double[]	0	NullArgumentException	$ == null
141	568	16	MathArrays.java	sortInPlace	THIS	MathArrays	0	DimensionMismatchException	y.$.length != len
141	568	16	MathArrays.java	sortInPlace	y	double[]	0	DimensionMismatchException	$.length != len
141	568	16	MathArrays.java	sortInPlace	len	int	0	DimensionMismatchException	y.length != $
18996	598	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
18996	598	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
18997	602	12	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
18997	602	12	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
142	678	8	MathArrays.java	linearCombination	THIS	MathArrays	0	DimensionMismatchException	len != b.$.length
142	678	8	MathArrays.java	linearCombination	len	int	0	DimensionMismatchException	$ != b.length
142	678	8	MathArrays.java	linearCombination	b	double[]	0	DimensionMismatchException	len != $.length
18998	685	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
18998	685	8	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
18999	711	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < lenMinusOne
18999	711	8	MathArrays.java	linearCombination	lenMinusOne	int	0	NIL-FOR	i < $
143	721	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
19000	725	12	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
19000	725	12	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
144	801	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
145	898	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
146	1017	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
147	1037	8	MathArrays.java	equals	x	float[]	0	RET	$ == null
147	1037	8	MathArrays.java	equals	y	float[]	0	RET	$ == null
148	1040	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
148	1040	8	MathArrays.java	equals	x	float[]	0	RET	$.length != y.length
148	1040	8	MathArrays.java	equals	y	float[]	0	RET	x.length != $.length
19001	1043	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
19001	1043	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
19001	1043	8	MathArrays.java	equals	x	float[]	0	NIL-FOR	i < $.length
149	1044	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
149	1044	12	MathArrays.java	equals	x	float[]	0	RET	Precision.equals($[i], y[i])
149	1044	12	MathArrays.java	equals	y	float[]	0	RET	Precision.equals(x[i], $[i])
150	1063	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$ == null
150	1063	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	$ == null
151	1066	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
151	1066	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$.length != y.length
151	1066	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	x.length != $.length
19002	1069	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
19002	1069	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
19002	1069	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	NIL-FOR	i < $.length
152	1070	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
152	1070	12	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
152	1070	12	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
153	1088	8	MathArrays.java	equals	x	double[]	0	RET	$ == null
153	1088	8	MathArrays.java	equals	y	double[]	0	RET	$ == null
154	1091	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
154	1091	8	MathArrays.java	equals	x	double[]	0	RET	$.length != y.length
154	1091	8	MathArrays.java	equals	y	double[]	0	RET	x.length != $.length
19003	1094	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
19003	1094	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
19003	1094	8	MathArrays.java	equals	x	double[]	0	NIL-FOR	i < $.length
155	1095	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
155	1095	12	MathArrays.java	equals	x	double[]	0	RET	Precision.equals($[i], y[i])
155	1095	12	MathArrays.java	equals	y	double[]	0	RET	Precision.equals(x[i], $[i])
156	1114	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$ == null
156	1114	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	$ == null
157	1117	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
157	1117	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$.length != y.length
157	1117	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	x.length != $.length
19004	1120	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
19004	1120	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
19004	1120	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	NIL-FOR	i < $.length
158	1121	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
158	1121	12	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
158	1121	12	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
159	1152	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isInfinite($)
160	1155	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isNaN($)
19005	1161	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
19005	1161	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
161	1162	13	MathArrays.java	normalizeArray	i	int	0	MathIllegalArgumentException	Double.isInfinite(values[$])
161	1162	13	MathArrays.java	normalizeArray	values	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
162	1165	13	MathArrays.java	normalizeArray	i	int	0	DEF	Double.isNaN(values[$])
162	1165	13	MathArrays.java	normalizeArray	values	double[]	0	DEF	Double.isNaN($[i])
163	1169	9	MathArrays.java	normalizeArray	sum	double	0	MathArithmeticException	$ == 0
19006	1172	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
19006	1172	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
164	1173	13	MathArrays.java	normalizeArray	i	int	1	DEF	Double.isNaN(values[$])
164	1173	13	MathArrays.java	normalizeArray	values	double[]	1	DEF	Double.isNaN($[i])
509	129	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ >= 0
509	129	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ < 0
509	129	8	MathUtils.java	copySign	sign	byte	1	RET	$ >= 0
509	129	8	MathUtils.java	copySign	sign	byte	1	RET	$ < 0
510	132	15	MathUtils.java	copySign	magnitude	byte	1	MathArithmeticException	$ == Byte.MIN_VALUE
510	132	15	MathUtils.java	copySign	sign	byte	1	MathArithmeticException	$ >= 0
511	152	8	MathUtils.java	copySign	magnitude	short	1	RET	$ < 0
511	152	8	MathUtils.java	copySign	magnitude	short	1	RET	$ >= 0
511	152	8	MathUtils.java	copySign	sign	short	1	RET	$ < 0
511	152	8	MathUtils.java	copySign	sign	short	1	RET	$ >= 0
512	155	15	MathUtils.java	copySign	magnitude	short	1	MathArithmeticException	$ == Short.MIN_VALUE
512	155	15	MathUtils.java	copySign	sign	short	1	MathArithmeticException	$ >= 0
513	175	8	MathUtils.java	copySign	magnitude	int	1	RET	$ >= 0
513	175	8	MathUtils.java	copySign	magnitude	int	1	RET	$ < 0
513	175	8	MathUtils.java	copySign	sign	int	1	RET	$ < 0
513	175	8	MathUtils.java	copySign	sign	int	1	RET	$ >= 0
514	178	15	MathUtils.java	copySign	magnitude	int	1	MathArithmeticException	$ == Integer.MIN_VALUE
514	178	15	MathUtils.java	copySign	sign	int	1	MathArithmeticException	$ >= 0
515	198	8	MathUtils.java	copySign	magnitude	long	1	RET	$ < 0
515	198	8	MathUtils.java	copySign	magnitude	long	1	RET	$ >= 0
515	198	8	MathUtils.java	copySign	sign	long	1	RET	$ >= 0
515	198	8	MathUtils.java	copySign	sign	long	1	RET	$ < 0
516	201	15	MathUtils.java	copySign	magnitude	long	1	MathArithmeticException	$ == Long.MIN_VALUE
516	201	15	MathUtils.java	copySign	sign	long	1	MathArithmeticException	$ >= 0
517	217	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
517	217	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
19029	231	8	MathUtils.java	checkFinite	THIS	MathUtils	0	NIL-FOR	i < val.$.length
19029	231	8	MathUtils.java	checkFinite	i	int	0	NIL-FOR	$ < val.length
19029	231	8	MathUtils.java	checkFinite	val	double[]	0	NIL-FOR	i < $.length
518	233	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
518	233	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
519	251	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
520	264	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
1437	130	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$[0] == null
1437	130	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$ == null
1438	159	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$ == null
1438	159	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$[0] == null
19581	177	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
19581	177	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
19582	199	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
19582	199	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
19583	217	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
19583	217	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
19583	217	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
19584	236	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
19584	236	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
19584	236	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
1439	252	8	MatrixUtils.java	createRealVector	data	double[]	0	NullArgumentException	$ == null
1440	270	8	MatrixUtils.java	createFieldVector	data	T[]	0	NullArgumentException	$ == null
1441	273	8	MatrixUtils.java	createFieldVector	THIS	MatrixUtils	0	ZeroException	data.$.length == 0
1441	273	8	MatrixUtils.java	createFieldVector	data	T[]	0	ZeroException	$.length == 0
1442	290	8	MatrixUtils.java	createRowRealMatrix	rowData	double[]	0	NullArgumentException	$ == null
19585	295	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
19585	295	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
1443	314	8	MatrixUtils.java	createRowFieldMatrix	rowData	T[]	0	NullArgumentException	$ == null
1444	318	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
19586	322	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
19586	322	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
1445	339	8	MatrixUtils.java	createColumnRealMatrix	columnData	double[]	0	NullArgumentException	$ == null
19587	344	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
19587	344	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
1446	363	8	MatrixUtils.java	createColumnFieldMatrix	columnData	T[]	0	NullArgumentException	$ == null
1447	367	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NoDataException	$ == 0
19588	371	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
19588	371	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
1448	392	8	MatrixUtils.java	isSymmetricInternal	rows	int	0	NonSquareMatrixException:RET	$ != matrix.getColumnDimension()
1448	392	8	MatrixUtils.java	isSymmetricInternal	matrix	RealMatrix	0	NonSquareMatrixException:RET	rows != $.getColumnDimension()
1449	393	12	MatrixUtils.java	isSymmetricInternal	raiseException	boolean	1	NonSquareMatrixException	$
19589	399	8	MatrixUtils.java	isSymmetricInternal	i	int	0	NIL-FOR	$ < rows
19589	399	8	MatrixUtils.java	isSymmetricInternal	rows	int	0	NIL-FOR	i < $
19590	400	12	MatrixUtils.java	isSymmetricInternal	j	int	0	NIL-FOR	$ < rows
19590	400	12	MatrixUtils.java	isSymmetricInternal	rows	int	0	NIL-FOR	j < $
1450	403	16	MatrixUtils.java	isSymmetricInternal	mij	double	0	NonSymmetricMatrixException:RET	FastMath.abs($ - mji) > FastMath.max(FastMath.abs($), FastMath.abs(mji)) * relativeTolerance
1450	403	16	MatrixUtils.java	isSymmetricInternal	mji	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - $) > FastMath.max(FastMath.abs(mij), FastMath.abs($)) * relativeTolerance
1450	403	16	MatrixUtils.java	isSymmetricInternal	relativeTolerance	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - mji) > FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * $
1451	405	20	MatrixUtils.java	isSymmetricInternal	raiseException	boolean	1	NonSymmetricMatrixException	$
1452	466	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1452	466	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1452	466	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= m.getRowDimension()
1453	482	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1453	482	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= m.getColumnDimension()
1453	482	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1454	507	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1454	507	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1455	514	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1455	514	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1456	539	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1457	542	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1458	545	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedRows.$.length == 0
1458	545	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1459	548	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedColumns.$.length == 0
1459	548	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1460	570	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1460	570	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1460	570	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1460	570	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1461	587	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1461	587	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1461	587	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1461	587	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1462	605	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DimensionMismatchException	$.getColumnDimension() != right.getRowDimension()
1462	605	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DimensionMismatchException	left.getColumnDimension() != $.getRowDimension()
19591	744	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
19591	744	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
19592	775	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
19592	775	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
19593	847	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
19593	847	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
19594	848	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
19594	848	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
19595	881	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
19595	881	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
19596	883	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
19596	883	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1463	929	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$ == null
1463	929	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$.getRowDimension() != b.getDimension()
1463	929	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	DimensionMismatchException	$ == null
1463	929	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	DimensionMismatchException	rm.getRowDimension() != $.getDimension()
1464	934	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
19597	939	8	MatrixUtils.java	solveLowerTriangularSystem	i	int	0	NIL-FOR	$ < rows
19597	939	8	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	i < $
1465	941	12	MatrixUtils.java	solveLowerTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
19598	946	12	MatrixUtils.java	solveLowerTriangularSystem	j	int	0	NIL-FOR	$< rows
19598	946	12	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	j< $
1466	974	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$.getRowDimension() != b.getDimension()
1466	974	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$ == null
1466	974	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	DimensionMismatchException	rm.getRowDimension() != $.getDimension()
1466	974	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	DimensionMismatchException	$ == null
1467	979	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
19599	984	8	MatrixUtils.java	solveUpperTriangularSystem	i	int	0	NIL-FOR	$ >-1
1468	986	12	MatrixUtils.java	solveUpperTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
19600	991	12	MatrixUtils.java	solveUpperTriangularSystem	j	int	0	NIL-FOR	$>-1
1469	1012	8	MatrixUtils.java	blockInverse	n	int	0	NonSquareMatrixException	m.getColumnDimension() != $
1469	1012	8	MatrixUtils.java	blockInverse	m	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != n
2219	78	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
2219	78	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
2219	78	8	Max.java	increment	d	double	0	DEF	$ > value
2220	134	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
2220	134	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2220	134	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
2220	134	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
20257	136	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20257	136	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20257	136	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2221	137	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2221	137	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
2149	114	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
2150	124	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
2151	163	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
2151	163	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
2151	163	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
2151	163	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
20243	172	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20243	172	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20243	172	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2152	211	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, weights, begin, length)
2152	211	8	Mean.java	evaluate	values	double[]	0	RET	test($, weights, begin, length)
2152	211	8	Mean.java	evaluate	weights	double[]	0	RET	test(values, $, begin, length)
2152	211	8	Mean.java	evaluate	begin	int	0	RET	test(values, weights, $, length)
2152	211	8	Mean.java	evaluate	length	int	0	RET	test(values, weights, begin, $)
20244	220	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20244	220	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20244	220	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
20431	147	8	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
2573	167	8	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
20432	176	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
2574	182	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
2575	186	12	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
2575	186	12	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
2575	186	12	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
20433	191	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
2576	197	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
2577	233	8	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
20434	235	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
20435	241	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
3292	154	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$ == null
3292	154	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	NullArgumentException	$ == null
3293	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NoDataException	xval.$.length == 0
3293	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NoDataException	$.length == 0
3294	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xval.$.length != yval.$.length
3294	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DimensionMismatchException	$.length != yval.length
3294	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3295	164	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$[0] == null
20758	173	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NIL-FOR	i < xval.$.length
20758	173	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < xval.length
20758	173	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NIL-FOR	i < $.length
3296	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	NullArgumentException	$ == null
3297	178	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xvalI.$.length != $.dimension
3297	178	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	DimensionMismatchException	$.length != dimension
20759	188	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < microsphereElements
20759	188	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	microsphereElements	int	0	NIL-FOR	i < $
3298	212	12	MicrosphereInterpolatingFunction.java	value	diffNorm	double	0	RET	FastMath.abs($) < FastMath.ulp(1d)
3299	231	12	MicrosphereInterpolatingFunction.java	value	sd	Entry<RealVector,Double>	0	DEF	$ != null
3326	77	8	MicrosphereInterpolator.java	MicrosphereInterpolator	exponent	int	0	NotPositiveException	$ < 0
3327	80	8	MicrosphereInterpolator.java	MicrosphereInterpolator	elements	int	0	NotStrictlyPositiveException	$ <= 0
2856	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	1	DEF	$.previousState != null
2856	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
20618	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20618	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
20619	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20619	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2395	102	8	MillerUpdatingRegression.java	MillerUpdatingRegression	numberOfVariables	int	0	ModelSpecificationException	$ < 1
2396	105	8	MillerUpdatingRegression.java	MillerUpdatingRegression	includeConstant	boolean	1	DEF	$
20343	122	8	MillerUpdatingRegression.java	MillerUpdatingRegression	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
20343	122	8	MillerUpdatingRegression.java	MillerUpdatingRegression	i	int	0	NIL-FOR	$ < this.nvars
2397	125	8	MillerUpdatingRegression.java	MillerUpdatingRegression	errorTolerance	double	1	DEF	$ > 0
2398	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != $.nvars
2398	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2398	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2398	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length + 1 != $.nvars
2398	170	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length != nvars
2398	170	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length + 1 != nvars
2399	175	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
2400	195	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != y.$.length
2400	195	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2400	195	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2400	195	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
2400	195	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2401	201	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length == 0
2401	201	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length == 0
2402	205	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x[0].length + 1 > x.$.length
2402	205	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$[0].length + 1 > $.length
20344	210	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
20344	210	8	MillerUpdatingRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
20344	210	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
20345	242	8	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
20345	242	8	MillerUpdatingRegression.java	include	i	int	0	NIL-FOR	$ < x.length
20345	242	8	MillerUpdatingRegression.java	include	x	double[]	0	NIL-FOR	i < $.length
2403	243	12	MillerUpdatingRegression.java	include	w	double	0	RET	$ == 0.0
2404	248	12	MillerUpdatingRegression.java	include	xi	double	0	DEF	$ == 0.0
2405	255	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2406	258	16	MillerUpdatingRegression.java	include	tmp	double	0	DEF	FastMath.abs($) > Precision.EPSILON
20346	266	12	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	k < $.nvars
20346	266	12	MillerUpdatingRegression.java	include	k	int	0	NIL-FOR	$ < nvars
2407	269	16	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2408	278	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2409	297	8	MillerUpdatingRegression.java	smartAdd	_a	double	1	RET	$ > _b
2409	297	8	MillerUpdatingRegression.java	smartAdd	_b	double	1	RET	_a > $
2410	299	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_b > $
2410	299	12	MillerUpdatingRegression.java	smartAdd	_b	double	0	RET	$ > eps
2411	305	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_a > $
2411	305	12	MillerUpdatingRegression.java	smartAdd	_a	double	0	RET	$ > eps
20347	326	8	MillerUpdatingRegression.java	clear	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
20347	326	8	MillerUpdatingRegression.java	clear	i	int	0	NIL-FOR	$ < nvars
20348	344	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
20348	344	8	MillerUpdatingRegression.java	tolset	i	int	0	NIL-FOR	$ < nvars
20349	348	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
20349	348	8	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	$ < nvars
20350	351	12	MillerUpdatingRegression.java	tolset	row	int	0	NIL-FOR	$ < col
20350	351	12	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	row < $
2412	373	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ < 1
2413	376	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	ModelSpecificationException	nreq > $.nvars
2413	376	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ > this.nvars
2414	380	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.tol_set
20351	385	8	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ > -1
2415	386	12	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[i]) < $.tol[i]
2415	386	12	MillerUpdatingRegression.java	regcf	i	int	1	DEF	Math.sqrt(d[$]) < tol[$]
20352	393	16	MillerUpdatingRegression.java	regcf	j	int	0	NIL-FOR	$ < nreq
20352	393	16	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	j < $
2416	399	8	MillerUpdatingRegression.java	regcf	rankProblem	boolean	0	DEF	$
20353	400	12	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ < nreq
20353	400	12	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	i < $
2417	401	16	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2417	401	16	MillerUpdatingRegression.java	regcf	i	int	0	DEF	this.lindep[$]
20354	415	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
20354	415	8	MillerUpdatingRegression.java	singcheck	i	int	0	NIL-FOR	$ < nvars
20355	418	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
20355	418	8	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	$ < nvars
20356	424	12	MillerUpdatingRegression.java	singcheck	row	int	0	NIL-FOR	$ < col - 1
20356	424	12	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	row < $ - 1
2418	425	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	Math.abs($.r[pos]) * $.work_sing[row] < temp
2418	425	16	MillerUpdatingRegression.java	singcheck	row	int	0	DEF	Math.abs(r[pos]) * work_sing[$] < temp
2418	425	16	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	Math.abs(r[pos]) * work_sing[row] < $
2418	425	16	MillerUpdatingRegression.java	singcheck	pos	int	0	DEF	Math.abs(r[$]) * work_sing[row] < temp
2419	434	12	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	$.work_sing[col] < temp
2419	434	12	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	work_sing[col] < $
2419	434	12	MillerUpdatingRegression.java	singcheck	col	int	0	DEF	work_sing[$] < temp
2420	436	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	1	DEF	col < $.nvars - 1
2420	436	16	MillerUpdatingRegression.java	singcheck	col	int	1	DEF	$ < nvars - 1
20357	439	20	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	_xi < $.nvars
20357	439	20	MillerUpdatingRegression.java	singcheck	_xi	int	0	NIL-FOR	$ < nvars
20358	467	8	MillerUpdatingRegression.java	ss	i	int	0	NIL-FOR	$ > 0
2421	493	8	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	RET	$.nobs <= nreq
2421	493	8	MillerUpdatingRegression.java	cov	nreq	int	0	RET	this.nobs <= $
20359	497	8	MillerUpdatingRegression.java	cov	i	int	0	NIL-FOR	$ < nreq
20359	497	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	i < $
2422	498	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2422	498	12	MillerUpdatingRegression.java	cov	i	int	0	DEF	this.lindep[$]
20360	511	8	MillerUpdatingRegression.java	cov	row	int	0	NIL-FOR	$ < nreq
20360	511	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	row < $
2423	513	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[row]
2423	513	12	MillerUpdatingRegression.java	cov	row	int	0	DEF	this.lindep[$]
20361	514	16	MillerUpdatingRegression.java	cov	col	int	0	NIL-FOR	$ < nreq
20361	514	16	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	col < $
2424	515	20	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	1	DEF	$.lindep[col]
2424	515	20	MillerUpdatingRegression.java	cov	col	int	1	DEF	this.lindep[$]
2425	517	24	MillerUpdatingRegression.java	cov	col	int	1	DEF	row == $
2425	517	24	MillerUpdatingRegression.java	cov	row	int	1	DEF	$ == col
20362	522	24	MillerUpdatingRegression.java	cov	k	int	0	NIL-FOR	$ < nreq
20362	522	24	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	k < $
2426	523	28	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2426	523	28	MillerUpdatingRegression.java	cov	k	int	0	DEF	this.lindep[$]
20363	553	8	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	$ > 0
2427	554	12	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	1	DEF	$.lindep[row]
2427	554	12	MillerUpdatingRegression.java	inverse	row	int	1	DEF	this.lindep[$]
20364	556	16	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	$ > row
20364	556	16	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	col > $
20365	560	20	MillerUpdatingRegression.java	inverse	k	int	0	NIL-FOR	$ < col - 1
20365	560	20	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	k < $ - 1
2428	562	24	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2428	562	24	MillerUpdatingRegression.java	inverse	k	int	0	DEF	this.lindep[$]
2429	622	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	RET	in >= $.nvars
2429	622	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ < -1
2429	622	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ >= nvars
2430	627	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	DEF	$.d[in] > 0.0
2430	627	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	DEF	d[$] > 0.0
20366	630	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
20366	630	8	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	$ < nvars
20367	633	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col
20367	633	12	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	row < $
2431	637	12	MillerUpdatingRegression.java	getPartialCorrelations	sumxx	double	1	DEF	$ > 0.0
20368	644	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	row < $.nvars
20368	644	8	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < nvars
2432	647	8	MillerUpdatingRegression.java	getPartialCorrelations	sumyy	double	0	DEF	$ > 0.0
20369	651	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col1 < $.nvars
20369	651	8	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	$ < nvars
20370	655	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col1
20370	655	12	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	row < $
20371	657	16	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
20371	657	16	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
20372	665	12	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
20372	665	12	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
2433	703	8	MillerUpdatingRegression.java	vmove	from	int	0	RET	$ == to
2433	703	8	MillerUpdatingRegression.java	vmove	to	int	0	RET	from == $
2434	706	8	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	$.rss_set
2435	710	8	MillerUpdatingRegression.java	vmove	from	int	1	DEF	$ < to
2435	710	8	MillerUpdatingRegression.java	vmove	to	int	1	DEF	from < $
20373	722	8	MillerUpdatingRegression.java	vmove	count	int	0	NIL-WHILE	idx < $
20373	722	8	MillerUpdatingRegression.java	vmove	idx	int	0	NIL-WHILE	$ < count
2436	730	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d1 > $.epsilon
2436	730	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 > $.epsilon
2436	730	12	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	$ > this.epsilon
2436	730	12	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ > this.epsilon
2437	732	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	Math.abs(X) * Math.sqrt(d1) < $.tol[mp1]
2437	732	16	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	Math.abs(X) * Math.sqrt($) < tol[mp1]
2437	732	16	MillerUpdatingRegression.java	vmove	mp1	int	0	DEF	Math.abs(X) * Math.sqrt(d1) < tol[$]
2438	735	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	d1 < $.epsilon
2438	735	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	Math.abs(X) < $.epsilon
2438	735	16	MillerUpdatingRegression.java	vmove	d1	double	1	DEF	$ < this.epsilon
20374	739	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
20374	739	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2439	751	23	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 < $.epsilon
2439	751	23	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ < this.epsilon
20375	754	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	_i < m1 + $.nvars - m - 1
20375	754	20	MillerUpdatingRegression.java	vmove	_i	int	0	NIL-FOR	$ < m1 + nvars - m - 1
20375	754	20	MillerUpdatingRegression.java	vmove	m1	int	0	NIL-FOR	_i < $ + nvars - m - 1
20375	754	20	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	_i < m1 + nvars - $ - 1
2440	761	16	MillerUpdatingRegression.java	vmove	bSkipTo40	boolean	0	DEF	$
20376	769	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
20376	769	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2441	781	12	MillerUpdatingRegression.java	vmove	m	int	0	DEF	$ > 0
20377	783	16	MillerUpdatingRegression.java	vmove	row	int	0	NIL-FOR	$ < m
20377	783	16	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	row < $
2442	824	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length > $.nvars + 1 - pos1
2442	824	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length < 1
2442	824	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length > nvars + 1 - pos1
2442	824	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length < 1
2442	824	8	MillerUpdatingRegression.java	reorderRegressors	pos1	int	0	RET	list.length > nvars + 1 - $
20378	829	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-WHILE	i < $.nvars
20378	829	8	MillerUpdatingRegression.java	reorderRegressors	i	int	0	NIL-WHILE	$ < nvars
20379	831	12	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-FOR	j < list.$.length
20379	831	12	MillerUpdatingRegression.java	reorderRegressors	j	int	0	NIL-FOR	$ < list.length
20379	831	12	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	NIL-FOR	j < $.length
2443	832	16	MillerUpdatingRegression.java	reorderRegressors	j	int	0	RET	l == list[$]
2443	832	16	MillerUpdatingRegression.java	reorderRegressors	next	int	0	RET	i > $
2443	832	16	MillerUpdatingRegression.java	reorderRegressors	i	int	0	RET	$ > next
2443	832	16	MillerUpdatingRegression.java	reorderRegressors	l	int	0	RET	$ == list[j]
2443	832	16	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	l == $[j]
2444	835	20	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	1	RET	next >= list.$.length + pos1
2444	835	20	MillerUpdatingRegression.java	reorderRegressors	next	int	1	RET	$ >= list.length + pos1
2444	835	20	MillerUpdatingRegression.java	reorderRegressors	list	int[]	1	RET	next >= $.length + pos1
2444	835	20	MillerUpdatingRegression.java	reorderRegressors	pos1	int	1	RET	next >= list.length + $
2445	858	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	RET	row_data.$.length > $.nvars
2445	858	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row_data	double[]	0	RET	$.length > nvars
2446	862	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
20380	870	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	NIL-FOR	col < xrow.$.length
20380	870	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	$ < xrow.length
20380	870	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	xrow	double[]	0	NIL-FOR	col < $.length
2447	871	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[col]) < $.tol[col]
2447	871	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	1	DEF	Math.sqrt(d[$]) < tol[$]
20381	876	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row	int	0	NIL-FOR	$ < col
20381	876	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	row < $
2448	920	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= numberOfRegressors
2448	920	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	this.nobs <= $
2449	925	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	numberOfRegressors > $.nvars
2449	925	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	$ > this.nvars
20382	940	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
20382	940	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2450	941	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2450	941	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
20383	947	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < numberOfRegressors
20383	947	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	i < $
2451	948	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != i
2451	948	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != $
2452	953	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
20384	962	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
20384	962	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < nvars
20385	963	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < numberOfRegressors
20385	963	16	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	j < $
2453	964	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == i
2453	964	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == i
2453	964	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == $
20386	975	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
20386	975	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
20386	975	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
20387	977	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
20387	977	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2454	979	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2454	979	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2455	1006	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	variablesToInclude.$.length > $.nvars
2455	1006	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > this.nvars
2456	1010	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= $.nvars
20388	1017	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
20388	1017	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
20388	1017	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2457	1018	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	i >= $.nvars
2457	1018	12	MillerUpdatingRegression.java	regress	i	int	0	ModelSpecificationException	$ >= this.nvars
2458	1022	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] == variablesToInclude[$ - 1]
2458	1022	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	$ > 0
2458	1022	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] == $[i - 1]
2459	1028	8	MillerUpdatingRegression.java	regress	iExclude	int	1	DEF	$ > 0
20389	1031	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
20389	1031	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
20389	1031	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2460	1032	16	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] > -1
2460	1032	16	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] > -1
20390	1052	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
20390	1052	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2461	1053	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2461	1053	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
20391	1059	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
20391	1059	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.nvars
2462	1060	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != series[i]
2462	1060	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != series[$]
2462	1060	12	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[i] != $[i]
2463	1065	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
20392	1072	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < series.$.length
20392	1072	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < series.length
20392	1072	12	MillerUpdatingRegression.java	regress	series	int[]	0	NIL-FOR	i < $.length
20393	1073	16	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	j < $.vorder.length
20393	1073	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < this.vorder.length
2464	1074	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == series[i]
2464	1074	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == series[i]
2464	1074	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == series[$]
2464	1074	20	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[j] == $[i]
20394	1085	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
20394	1085	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
20394	1085	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
20395	1087	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
20395	1087	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2465	1089	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2465	1089	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2216	78	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
2216	78	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
2216	78	8	Min.java	increment	d	double	0	DEF	$ < value
2217	134	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
2217	134	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2217	134	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
2217	134	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
20256	136	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20256	136	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20256	136	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2218	137	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2218	137	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
19088	72	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	i	int	0	NIL-FOR	$ < numComp
19088	72	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	numComp	int	0	NIL-FOR	i < $
1105	74	12	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	comp	Pair<Double,T>	0	DimensionMismatchException	$.getSecond().getDimension() != dim
1105	74	12	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	dim	int	0	DimensionMismatchException	comp.getSecond().getDimension() != $
1106	77	12	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	comp	Pair<Double,T>	0	NotPositiveException	$.getFirst() < 0
1107	84	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	weightSum	double	0	MathArithmeticException	Double.isInfinite($)
19089	91	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	i	int	0	NIL-FOR	$ < numComp
19089	91	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	numComp	int	0	NIL-FOR	i < $
19090	101	8	MixtureMultivariateRealDistribution.java	density	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
19090	101	8	MixtureMultivariateRealDistribution.java	density	i	int	0	NIL-FOR	$ < weight.length
19091	116	8	MixtureMultivariateRealDistribution.java	sample	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
19091	116	8	MixtureMultivariateRealDistribution.java	sample	i	int	0	NIL-FOR	$ < weight.length
1108	118	12	MixtureMultivariateRealDistribution.java	sample	randomValue	double	0	DEF	$ <= sum
1108	118	12	MixtureMultivariateRealDistribution.java	sample	sum	double	0	DEF	randomValue <= $
1109	125	8	MixtureMultivariateRealDistribution.java	sample	vals	double[]	0	DEF	$ == null
19092	141	8	MixtureMultivariateRealDistribution.java	reseedRandomGenerator	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.distribution.size()
19092	141	8	MixtureMultivariateRealDistribution.java	reseedRandomGenerator	i	int	0	NIL-FOR	$ < distribution.size()
19093	156	8	MixtureMultivariateRealDistribution.java	getComponents	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
19093	156	8	MixtureMultivariateRealDistribution.java	getComponents	i	int	0	NIL-FOR	$ < weight.length
3438	98	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMin) < $
3438	98	8	MullerSolver.java	doSolve	fMin	double	0	RET	FastMath.abs($) < functionValueAccuracy
3439	102	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMax) < $
3439	102	8	MullerSolver.java	doSolve	fMax	double	0	RET	FastMath.abs($) < functionValueAccuracy
3440	106	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fInitial) < $
3440	106	8	MullerSolver.java	doSolve	fInitial	double	0	RET	FastMath.abs($) < functionValueAccuracy
3441	112	8	MullerSolver.java	doSolve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial)
3441	112	8	MullerSolver.java	doSolve	min	double	1	RET	isBracketing($, initial)
3441	112	8	MullerSolver.java	doSolve	initial	double	1	RET	isBracketing(min, $)
3442	169	12	MullerSolver.java	solve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3442	169	12	MullerSolver.java	solve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3442	169	12	MullerSolver.java	solve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3442	169	12	MullerSolver.java	solve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3442	169	12	MullerSolver.java	solve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
3443	182	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
3444	192	16	MullerSolver.java	solve	ym	double	1	DEF	FastMath.signum(y0) + FastMath.signum($) == 0.0
3444	192	16	MullerSolver.java	solve	y0	double	1	DEF	FastMath.signum($) + FastMath.signum(ym) == 0.0
3432	103	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y0) < $
3432	103	8	MullerSolver2.java	doSolve	y0	double	0	RET	FastMath.abs($) < functionValueAccuracy
3433	108	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y1) < $
3433	108	8	MullerSolver2.java	doSolve	y1	double	0	RET	FastMath.abs($) < functionValueAccuracy
3434	112	8	MullerSolver2.java	doSolve	y0	double	0	NoBracketingException	$ * y1 > 0
3434	112	8	MullerSolver2.java	doSolve	y1	double	0	NoBracketingException	y0 * $ > 0
3435	129	12	MullerSolver2.java	doSolve	delta	double	1	DEF	$ >= 0.0
3436	138	12	MullerSolver2.java	doSolve	denominator	double	1	DEF	$ != 0
20837	142	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x2
20837	142	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x1
20837	142	16	MullerSolver2.java	doSolve	x1	double	0	NIL-WHILE	x == $
20837	142	16	MullerSolver2.java	doSolve	x2	double	0	NIL-WHILE	x == $
3437	154	12	MullerSolver2.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3437	154	12	MullerSolver2.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3437	154	12	MullerSolver2.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3437	154	12	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3437	154	12	MullerSolver2.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
1859	164	8	MultiDirectionalSimplex.java	iterate	best	PointValuePair	0	RET	comparator.compare(reflected, $) < 0
1859	164	8	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare($, best) < 0
1859	164	8	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(reflected, best) < 0
1860	169	12	MultiDirectionalSimplex.java	iterate	expanded	PointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
1860	169	12	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	DEF	comparator.compare($, expanded) <= 0
1860	169	12	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
20027	203	8	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
20027	203	8	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
20028	206	12	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
20028	206	12	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
18974	173	8	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
18974	173	8	MultidimensionalCounter.java	MultidimensionalCounter	i	int	0	NIL-FOR	$ < last
18975	175	12	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	j < $.dimension
18975	175	12	MultidimensionalCounter.java	MultidimensionalCounter	j	int	0	NIL-FOR	$ < dimension
109	183	8	MultidimensionalCounter.java	MultidimensionalCounter	tS	int	0	NotStrictlyPositiveException	$ <= 0
110	217	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.totalSize
110	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ >= totalSize
110	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ < 0
18976	225	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
18976	225	8	MultidimensionalCounter.java	getCounts	i	int	0	NIL-FOR	$ < last
18977	228	12	MultidimensionalCounter.java	getCounts	count	int	0	NIL-WHILE	$ <= index
18977	228	12	MultidimensionalCounter.java	getCounts	index	int	0	NIL-WHILE	count <= $
111	255	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	DimensionMismatchException	c.$.length != $.dimension
111	255	8	MultidimensionalCounter.java	getCount	c	int	0	DimensionMismatchException	$.length != dimension
18978	259	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
18978	259	8	MultidimensionalCounter.java	getCount	i	int	0	NIL-FOR	$ < dimension
112	261	12	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.size[i]
112	261	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ < 0
112	261	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ >= size[i]
112	261	12	MultidimensionalCounter.java	getCount	i	int	0	OutOfRangeException	index >= size[$]
18979	293	8	MultidimensionalCounter.java	toString	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
18979	293	8	MultidimensionalCounter.java	toString	i	int	0	NIL-FOR	$ < dimension
2925	120	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	NumberIsTooSmallException	$ < 2
2104	103	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2104	103	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2104	103	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
20222	106	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < lower.$.length
20222	106	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < lower.length
20222	106	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NIL-FOR	i < $.length
2105	108	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2105	108	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2105	108	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
20223	115	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
20223	115	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < mappers.length
2106	116	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(lower[$])
2106	116	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	1	DEF	Double.isInfinite($[i])
2107	117	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2107	117	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
2108	125	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2108	125	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
20224	145	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
20224	145	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	i	int	0	NIL-FOR	$ < mappers.length
20225	161	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
20225	161	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	i	int	0	NIL-FOR	$ < mappers.length
2098	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2098	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2098	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
2099	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != scale.$.length
2099	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != scale.length
2099	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	scale	double[]	0	DimensionMismatchException	lower.length != $.length
20219	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < lower.$.length
20219	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NIL-FOR	$ < lower.length
20219	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NIL-FOR	i < $.length
2100	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2100	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2100	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
20220	164	8	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < $.scale.$.length
20220	164	8	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	NIL-FOR	$ < scale.length
2101	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] > $.upper[i]
2101	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] < $.lower[i]
2101	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] > upper[$]
2101	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] < lower[$]
2101	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] > upper[i]
2101	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] < lower[i]
20221	168	16	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	j < $.scale.$.length
20221	168	16	MultivariateFunctionPenaltyAdapter.java	value	j	int	0	NIL-FOR	$ < scale.length
2102	170	20	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] < $.lower[j]
2102	170	20	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] < lower[$]
2102	170	20	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] < lower[j]
2103	172	27	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] > $.upper[j]
2103	172	27	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] > upper[$]
2103	172	27	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] > upper[j]
1001	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	covariances.$.length != dim
1001	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	DimensionMismatchException	covariances.length != $
1001	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covariances	double[][]	0	DimensionMismatchException	$.length != dim
19074	111	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NIL-FOR	$ < dim
19074	111	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	i < $
1002	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	dim != covariances[i].length
1002	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	DimensionMismatchException	dim != covariances[$].length
1002	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	DimensionMismatchException	$ != covariances[i].length
1002	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covariances	double[][]	0	DimensionMismatchException	dim != $[i].length
19075	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < covMatEigenvalues.$.length
19075	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NIL-FOR	$ < covMatEigenvalues.length
19075	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covMatEigenvalues	double[]	0	NIL-FOR	i < $.length
1003	133	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NonPositiveDefiniteMatrixException	covMatEigenvalues[$] < 0
1003	133	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covMatEigenvalues	double[]	0	NonPositiveDefiniteMatrixException	$[i] < 0
19076	140	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	v	int	0	NIL-FOR	$ < dim
19076	140	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	v < $
19077	148	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	row	int	0	NIL-FOR	$ < dim
19077	148	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	row < $
19078	150	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	col	int	0	NIL-FOR	$ < dim
19078	150	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	col < $
1004	179	8	MultivariateNormalDistribution.java	density	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	vals.$.length != dim
1004	179	8	MultivariateNormalDistribution.java	density	dim	int	0	DimensionMismatchException	vals.length != $
1004	179	8	MultivariateNormalDistribution.java	density	vals	double[]	0	DimensionMismatchException	$.length != dim
19079	198	8	MultivariateNormalDistribution.java	getStandardDeviations	i	int	0	NIL-FOR	$ < dim
19079	198	8	MultivariateNormalDistribution.java	getStandardDeviations	dim	int	0	NIL-FOR	i < $
19080	209	8	MultivariateNormalDistribution.java	sample	i	int	0	NIL-FOR	$ < dim
19080	209	8	MultivariateNormalDistribution.java	sample	dim	int	0	NIL-FOR	i < $
19081	215	8	MultivariateNormalDistribution.java	sample	i	int	0	NIL-FOR	$ < dim
19081	215	8	MultivariateNormalDistribution.java	sample	dim	int	0	NIL-FOR	i < $
19082	230	8	MultivariateNormalDistribution.java	getExponentTerm	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < centered.$.length
19082	230	8	MultivariateNormalDistribution.java	getExponentTerm	i	int	0	NIL-FOR	$ < centered.length
19082	230	8	MultivariateNormalDistribution.java	getExponentTerm	centered	double[]	0	NIL-FOR	i < $.length
19083	235	8	MultivariateNormalDistribution.java	getExponentTerm	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < preMultiplied.$.length
19083	235	8	MultivariateNormalDistribution.java	getExponentTerm	i	int	0	NIL-FOR	$ < preMultiplied.length
19083	235	8	MultivariateNormalDistribution.java	getExponentTerm	preMultiplied	double[]	0	NIL-FOR	i < $.length
20227	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
20227	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
20228	150	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
20228	150	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
20229	187	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
20229	187	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
20229	187	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
2110	246	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
2111	248	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
20230	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
20230	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
20231	336	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
20231	336	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
20231	336	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
2112	337	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
20232	350	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
20232	350	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
2113	370	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
2113	370	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
2114	373	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
2115	620	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	MathIllegalStateException	$.n > 0
2116	632	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
2116	632	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
2609	68	8	NPointCrossover.java	NPointCrossover	crossoverPoints	int	0	NotStrictlyPositiveException	$ <= 0
2610	111	8	NPointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2610	111	8	NPointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2611	131	8	NPointCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
2611	131	8	NPointCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
2612	134	8	NPointCrossover.java	mate	THIS	NPointCrossover	0	NumberIsTooLargeException	$.crossoverPoints >= length
2612	134	8	NPointCrossover.java	mate	length	int	0	NumberIsTooLargeException	crossoverPoints >= $
20451	152	8	NPointCrossover.java	mate	THIS	NPointCrossover	0	NIL-FOR	i < $.crossoverPoints
20451	152	8	NPointCrossover.java	mate	i	int	0	NIL-FOR	$ < crossoverPoints
20452	157	12	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < crossoverIndex
20452	157	12	NPointCrossover.java	mate	crossoverIndex	int	0	NIL-FOR	j < $
20453	171	8	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < length
20453	171	8	NPointCrossover.java	mate	length	int	0	NIL-FOR	j < $
20323	197	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
20323	197	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
20323	197	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
2361	218	16	NaturalRanking.java	rank	nanPositions	List<Integer>	0	NotANumberException	$.size() > 0
20324	236	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
20324	236	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
20324	236	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2362	237	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
2362	237	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
2363	240	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2364	251	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2365	254	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
2366	268	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
2366	268	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
20325	273	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
20325	273	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
20325	273	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2367	274	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
2367	274	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
20326	276	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
20326	276	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
20326	276	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
20327	298	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
20327	298	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
20327	298	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2368	299	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2368	299	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
20328	313	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
20328	313	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
20328	313	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2369	314	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
2369	314	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
20329	356	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
20330	367	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
20331	385	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
2370	397	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
20332	401	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
20333	415	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
20333	415	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
20333	415	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2371	416	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2371	416	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
20205	201	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
20205	201	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
20206	203	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
20206	203	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
20207	208	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
20207	208	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
20208	214	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
20208	214	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2077	220	8	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare($, reflected) <= 0
2077	220	8	NelderMeadSimplex.java	iterate	secondBest	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
2077	220	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(best, $) <= 0
2077	220	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, secondBest) < 0
2077	220	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(best, reflected) <= 0
2077	220	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
2078	224	15	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
2078	224	15	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, best) < 0
2078	224	15	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, best) < 0
20209	227	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
20209	227	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2079	233	12	NelderMeadSimplex.java	iterate	expanded	PointValuePair	1	DEF	comparator.compare($, reflected) < 0
2079	233	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(expanded, $) < 0
2079	233	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
2080	241	12	NelderMeadSimplex.java	iterate	worst	PointValuePair	1	RET	comparator.compare(reflected, $) < 0
2080	241	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	RET	comparator.compare($, worst) < 0
2080	241	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	RET	$.compare(reflected, worst) < 0
20210	244	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
20210	244	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2081	249	16	NelderMeadSimplex.java	iterate	outContracted	PointValuePair	0	RET	comparator.compare($, reflected) <= 0
2081	249	16	NelderMeadSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
2081	249	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
20211	257	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
20211	257	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2082	263	16	NelderMeadSimplex.java	iterate	inContracted	PointValuePair	0	RET	comparator.compare($, worst) < 0
2082	263	16	NelderMeadSimplex.java	iterate	worst	PointValuePair	0	RET	comparator.compare(inContracted, $) < 0
2082	263	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(inContracted, worst) < 0
20212	272	12	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
20212	272	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
20213	274	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
20213	274	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
787	78	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	MathIllegalArgumentException	$[0] == null
19061	88	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	0	NIL-FOR	i < loop.$.length
19061	88	8	NestedLoops.java	NestedLoops	i	int	0	NIL-FOR	$ < loop.length
19061	88	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	NIL-FOR	i < $.length
788	99	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	1	DEF	Double.isInfinite($.polygon.getSize())
789	126	12	NestedLoops.java	add	THIS	NestedLoops	0	RET	$.child.$.polygon.contains(node.$.polygon)
789	126	12	NestedLoops.java	add	node	NestedLoops	0	RET	child.polygon.contains($.polygon)
19062	133	8	NestedLoops.java	add	iterator	Iterator<NestedLoops>	0	NIL-FOR	$.hasNext()
790	135	12	NestedLoops.java	add	THIS	NestedLoops	0	DEF	node.$.polygon.contains(child.$.polygon)
790	135	12	NestedLoops.java	add	child	NestedLoops	0	DEF	node.polygon.contains($.polygon)
790	135	12	NestedLoops.java	add	node	NestedLoops	0	DEF	$.polygon.contains(child.polygon)
791	144	12	NestedLoops.java	add	THIS	NestedLoops	0	MathIllegalArgumentException	factory.intersection(node.$.polygon, $.child.$.polygon).isEmpty()
791	144	12	NestedLoops.java	add	factory	RegionFactory<Euclidean2D>	0	MathIllegalArgumentException	$.intersection(node.polygon, child.polygon).isEmpty()
791	144	12	NestedLoops.java	add	node	NestedLoops	0	MathIllegalArgumentException	factory.intersection($.polygon, child.polygon).isEmpty()
792	170	8	NestedLoops.java	setClockWise	THIS	NestedLoops	0	DEF	$.originalIsClockwise ^ clockwise
792	170	8	NestedLoops.java	setClockWise	clockwise	boolean	0	DEF	originalIsClockwise ^ $
19063	174	12	NestedLoops.java	setClockWise	min	int	0	NIL-WHILE	++$ < --max
19063	174	12	NestedLoops.java	setClockWise	max	int	0	NIL-WHILE	++min < --$
3403	86	12	NewtonRaphsonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
3403	86	12	NewtonRaphsonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
3403	86	12	NewtonRaphsonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
3404	86	12	NewtonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
3404	86	12	NewtonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
3404	86	12	NewtonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
1825	139	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
1826	154	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1826	154	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
20000	155	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
20000	155	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
20001	165	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
20001	165	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1827	178	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	$ != null
1828	179	16	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	checker.converged(iter, $, current)
1828	179	16	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	RET	$.converged(iter, previous, current)
1828	179	16	NonLinearConjugateGradientOptimizer.java	doOptimize	current	PointValuePair	0	RET	checker.converged(iter, previous, $)
1828	179	16	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
20002	195	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
20002	195	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
1829	200	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1829	200	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
20003	201	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
20003	201	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
20004	210	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
20004	210	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1830	215	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
20005	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
20005	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
20005	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
1831	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
1831	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	iter % $ == 0
1831	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	1	DEF	$ % n == 0
20006	233	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
20006	233	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
20007	253	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
1832	256	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
1832	256	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
2754	86	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
2754	86	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
2755	89	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
2755	89	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
2756	92	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
2756	92	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
20521	151	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
20521	151	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
20522	157	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
20522	157	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
20522	157	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
20523	160	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
20523	160	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
20523	160	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
20524	201	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
20525	205	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
20525	205	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
20525	205	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
20526	212	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
20526	212	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
2757	234	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
20527	238	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
20527	238	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
2758	243	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
2759	268	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
20528	270	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
20528	270	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
2760	278	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
2761	284	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
2761	284	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
1005	106	8	NormalDistribution.java	NormalDistribution	sd	double	0	NotStrictlyPositiveException	$ <= 0
1006	149	8	NormalDistribution.java	cumulativeProbability	THIS	NormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.standardDeviation
1006	149	8	NormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * standardDeviation
1007	171	8	NormalDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1007	171	8	NormalDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
20396	112	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
20396	112	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
20397	113	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
20397	113	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
2466	114	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
2466	114	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
2466	114	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
2466	114	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
2467	143	8	OLSMultipleLinearRegression.java	calculateTotalSumOfSquares	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2468	198	8	OLSMultipleLinearRegression.java	calculateAdjustedRSquared	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2658	82	8	OnePointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2658	82	8	OnePointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2659	100	8	OnePointCrossover.java	crossover	length	int	0	DimensionMismatchException	$ != second.getLength()
2659	100	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
20469	115	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
20469	115	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
20470	120	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
20470	120	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
2277	173	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ <= 0
2277	173	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ > 0.5
2278	196	8	OneWayAnova.java	anovaStats	categoryData	Collection<double[]>	0	NullArgumentException	$ == null
2279	201	8	OneWayAnova.java	anovaStats	categoryData	Collection<double[]>	0	DimensionMismatchException	$.size() < 2
2280	209	12	OneWayAnova.java	anovaStats	THIS	OneWayAnova	0	DimensionMismatchException	$.array.$.length <= 1
20272	228	12	OneWayAnova.java	anovaStats	THIS	OneWayAnova	0	NIL-FOR	i < $.data.$.length
20272	228	12	OneWayAnova.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
233	150	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
234	155	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
234	155	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
235	179	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
235	179	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
235	179	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
236	183	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
236	183	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
19017	188	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
19017	188	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
237	191	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
237	191	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
237	191	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
238	209	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
238	209	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
238	209	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
239	213	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
239	213	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
19018	218	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
19018	218	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
240	221	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
240	221	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
240	221	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
241	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
241	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
242	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
242	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
242	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
242	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
242	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
243	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
243	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
244	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
244	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
244	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
244	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
244	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
245	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
245	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
246	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
246	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
247	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
247	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
248	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
248	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
248	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
248	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
248	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
249	353	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
249	353	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
249	353	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
250	357	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
250	357	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
19019	362	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
19019	362	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
251	365	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
251	365	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
251	365	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
252	410	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
253	418	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
254	420	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
19020	444	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
19020	444	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
255	445	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
255	445	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
524	163	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
525	168	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
525	168	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
526	192	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
526	192	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
526	192	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
527	196	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
527	196	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
19030	201	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
19030	201	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
528	204	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
528	204	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
528	204	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
529	222	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
529	222	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
529	222	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
530	226	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
530	226	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
19031	231	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
19031	231	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
531	234	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
531	234	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
531	234	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
532	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
532	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
533	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
533	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
533	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
533	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
533	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
534	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
534	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
535	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
535	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
535	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
535	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
535	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
536	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
536	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
537	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
537	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
538	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
538	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
539	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
539	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
539	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
539	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
539	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
540	366	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
540	366	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
540	366	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
541	370	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
541	370	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
19032	375	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
19032	375	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
542	378	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
542	378	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
542	378	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
543	423	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
544	431	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
545	433	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
19033	457	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
19033	457	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
546	458	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
546	458	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
1670	66	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lRow	long	0	NumberIsTooLargeException	$ * lCol >= Integer.MAX_VALUE
1670	66	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lCol	long	0	NumberIsTooLargeException	lRow * $ >= Integer.MAX_VALUE
19907	123	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
19908	158	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
19909	186	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
19910	192	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
19910	192	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
19911	218	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
19912	224	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
19912	224	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
1671	226	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
1671	226	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
1671	226	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
1672	230	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
1673	262	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
1674	277	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
1675	292	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
19832	144	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
19832	144	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
19832	144	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
1588	146	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1588	146	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
19833	173	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
19833	173	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
19833	173	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
1589	175	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1589	175	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
19834	201	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
19834	201	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
1590	203	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1590	203	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
1591	235	8	OpenMapRealVector.java	add	v	RealVector	1	RET	$ instanceof OpenMapRealVector
19835	257	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1592	260	12	OpenMapRealVector.java	add	key	int	1	DEF	randomAccess.containsKey($)
1592	260	12	OpenMapRealVector.java	add	randomAccess	OpenIntToDoubleHashMap	1	DEF	$.containsKey(key)
19836	277	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1593	287	8	OpenMapRealVector.java	append	v	RealVector	1	RET	$ instanceof OpenMapRealVector
19837	291	12	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < v.getDimension()
19837	291	12	OpenMapRealVector.java	append	v	RealVector	0	NIL-FOR	i < $.getDimension()
19838	350	8	OpenMapRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < n
19838	350	8	OpenMapRealVector.java	ebeDivide	n	int	0	NIL-FOR	i < $
19839	363	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
1594	374	8	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isInfinite()
1594	374	8	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isNaN()
19840	376	12	OpenMapRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < n
19840	376	12	OpenMapRealVector.java	ebeMultiply	n	int	0	NIL-FOR	i < $
1595	378	16	OpenMapRealVector.java	ebeMultiply	y	double	1	DEF	Double.isNaN($)
1596	380	23	OpenMapRealVector.java	ebeMultiply	y	double	0	DEF	Double.isInfinite($)
1597	394	8	OpenMapRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
19841	401	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1598	404	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
1598	404	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
1598	404	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
1598	404	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
19842	429	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
19843	437	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1599	440	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1599	440	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
1600	452	8	OpenMapRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
19844	481	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
19845	487	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1601	490	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1601	490	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
1602	503	8	OpenMapRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
19846	522	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1603	525	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
1603	525	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
19847	530	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1604	533	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1604	533	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
1605	534	16	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
1605	534	16	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
1606	547	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
19848	559	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
1607	562	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
1608	565	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
19849	576	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
1609	578	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
19850	594	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
19850	594	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
1610	605	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isDefaultValue(value)
1610	605	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isDefaultValue($)
1611	607	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
1611	607	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
19851	618	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.getDimension()
19851	618	8	OpenMapRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < $.getDimension()
19852	626	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
19852	626	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
19853	643	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1612	646	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
1612	646	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1613	660	8	OpenMapRealVector.java	subtract	v	RealVector	1	RET	$ instanceof OpenMapRealVector
1614	679	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	MathArithmeticException	$.isDefaultValue(norm)
1614	679	8	OpenMapRealVector.java	unitize	norm	double	0	MathArithmeticException	isDefaultValue($)
19854	683	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
19855	694	8	OpenMapRealVector.java	toArray	iter	Iterator	0	NIL-WHILE	$.hasNext()
19856	716	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1615	732	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
1615	732	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
1616	735	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
1617	739	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
1617	739	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
1618	742	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
1618	742	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
19857	747	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1619	750	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
1619	750	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
19858	755	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1620	758	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
1620	758	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
1620	758	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
2660	74	8	OrderedCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2660	74	8	OrderedCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2661	92	8	OrderedCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
2661	92	8	OrderedCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
20471	110	8	OrderedCrossover.java	mate	a	int	0	NIL-DOWHILE	$ == b
20471	110	8	OrderedCrossover.java	mate	b	int	0	NIL-DOWHILE	a == $
20472	124	8	OrderedCrossover.java	mate	i	int	0	NIL-FOR	$ <= length
20472	124	8	OrderedCrossover.java	mate	length	int	0	NIL-FOR	i <= $
2662	132	12	OrderedCrossover.java	mate	item2	T	0	DEF	child1Set.contains($)
2662	132	12	OrderedCrossover.java	mate	child1Set	Set<T>	0	DEF	$.contains(item2)
2663	138	12	OrderedCrossover.java	mate	item1	T	0	DEF	child2Set.contains($)
2663	138	12	OrderedCrossover.java	mate	child2Set	Set<T>	0	DEF	$.contains(item1)
19037	139	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	NIL-FOR	i < components.$.length
19037	139	8	OrderedTuple.java	OrderedTuple	i	int	0	NIL-FOR	$ < components.length
19037	139	8	OrderedTuple.java	OrderedTuple	components	double	0	NIL-FOR	i < $.length
559	140	12	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isInfinite(components[$])
559	140	12	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isInfinite($[i])
560	141	16	OrderedTuple.java	OrderedTuple	i	int	1	DEF	components[$] < 0
560	141	16	OrderedTuple.java	OrderedTuple	components	double	1	DEF	$[i] < 0
561	146	19	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isNaN(components[$])
561	146	19	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isNaN($[i])
562	151	16	OrderedTuple.java	OrderedTuple	m	long	0	DEF	$ != 0
563	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.posInf
563	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.negInf
564	166	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	1	DEF	$.lsb <= msb
564	166	8	OrderedTuple.java	OrderedTuple	msb	int	1	DEF	lsb <= $
565	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding != null
565	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding.$.length == 1
565	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding[0] == 0x0L
19038	202	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	eIndex < $.encoding.$.length
19038	202	8	OrderedTuple.java	encode	eIndex	int	0	NIL-FOR	$ < encoding.length
19039	203	12	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	vIndex < $.components.$.length
19039	203	12	OrderedTuple.java	encode	vIndex	int	0	NIL-FOR	$ < components.length
566	204	16	OrderedTuple.java	encode	THIS	OrderedTuple	0	DEF	$.getBit(vIndex, k) != 0
566	204	16	OrderedTuple.java	encode	vIndex	int	0	DEF	getBit($, k) != 0
566	204	16	OrderedTuple.java	encode	k	int	0	DEF	getBit(vIndex, $) != 0
567	207	16	OrderedTuple.java	encode	shift	int	0	DEF	$-- == 0
568	248	8	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.components.$.length == ot.$.components.$.length
568	248	8	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	components.length == $.components.length
569	249	12	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.nan
570	251	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.nan
570	251	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.nan
571	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.negInf
571	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.posInf
571	253	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.posInf
572	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.posInf
572	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.negInf
572	255	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.negInf
573	259	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	DEF	$.offset < ot.$.offset
573	259	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	DEF	offset < $.offset
574	261	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	DEF	$.offset > ot.$.offset
574	261	23	OrderedTuple.java	compareTo	ot	OrderedTuple	0	DEF	offset > $.offset
19040	266	16	OrderedTuple.java	compareTo	i	int	0	NIL-FOR	$ < limit
19040	266	16	OrderedTuple.java	compareTo	limit	int	0	NIL-FOR	i < $
575	267	20	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding[i] < ot.$.encoding[i]
575	267	20	OrderedTuple.java	compareTo	i	int	1	RET	encoding[$] < ot.encoding[$]
575	267	20	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding[i] < $.encoding[i]
576	269	27	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.encoding[i] > ot.$.encoding[i]
576	269	27	OrderedTuple.java	compareTo	i	int	0	RET	encoding[$] > ot.encoding[$]
576	269	27	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	encoding[i] > $.encoding[i]
577	274	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length < ot.$.encoding.$.length
577	274	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length < $.encoding.length
578	276	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length > ot.$.encoding.$.length
578	276	23	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length > $.encoding.length
579	292	8	OrderedTuple.java	equals	THIS	OrderedTuple	1	RET	$ == other
579	292	8	OrderedTuple.java	equals	other	Object	1	RET	this == $
580	294	15	OrderedTuple.java	equals	other	Object	1	RET	$ instanceof OrderedTuple
19041	369	8	OrderedTuple.java	computeMSB	scale	int	0	NIL-WHILE	$ != 0
581	370	12	OrderedTuple.java	computeMSB	ll	long	0	DEF	($ & mask) != $
581	370	12	OrderedTuple.java	computeMSB	mask	long	0	DEF	(ll & $) != ll
19042	395	8	OrderedTuple.java	computeLSB	scale	int	0	NIL-WHILE	$ != 0
582	396	12	OrderedTuple.java	computeLSB	ll	long	0	DEF	($ & mask) == $
582	396	12	OrderedTuple.java	computeLSB	mask	long	0	DEF	(ll & $) == ll
583	417	8	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k > $.offset
583	417	8	OrderedTuple.java	getBit	e	int	1	RET	k < $
583	417	8	OrderedTuple.java	getBit	k	int	1	RET	$ < e
583	417	8	OrderedTuple.java	getBit	k	int	1	RET	$ > offset
584	419	15	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k == $.offset
584	419	15	OrderedTuple.java	getBit	k	int	1	RET	$ == offset
585	421	15	OrderedTuple.java	getBit	e	int	1	RET	k > ($ + 52)
585	421	15	OrderedTuple.java	getBit	k	int	1	RET	$ > (e + 52)
19050	72	8	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	NIL-FOR	i < outline.$.length
19050	72	8	OutlineExtractor.java	getOutline	i	int	0	NIL-FOR	$ < outline.length
19050	72	8	OutlineExtractor.java	getOutline	outline	Vector2D[][]	0	NIL-FOR	i < $.length
19051	76	12	OutlineExtractor.java	getOutline	end	int	0	NIL-WHILE	j < $
19051	76	12	OutlineExtractor.java	getOutline	j	int	0	NIL-WHILE	$ < end
717	77	16	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	1	DEF	$.pointIsBetween(rawLoop, end, j)
717	77	16	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	1	DEF	pointIsBetween($, end, j)
717	77	16	OutlineExtractor.java	getOutline	end	int	1	DEF	pointIsBetween(rawLoop, $, j)
717	77	16	OutlineExtractor.java	getOutline	j	int	1	DEF	pointIsBetween(rawLoop, end, $)
19052	79	20	OutlineExtractor.java	getOutline	k	int	0	NIL-FOR	$ < (end - 1)
19052	79	20	OutlineExtractor.java	getOutline	end	int	0	NIL-FOR	k < ($ - 1)
718	88	12	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	DEF	end != rawLoop.$.length
718	88	12	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	0	DEF	end != $.length
718	88	12	OutlineExtractor.java	getOutline	end	int	0	DEF	$ != rawLoop.length
165	104	8	Pair.java	equals	THIS	Pair	0	RET	$ == o
165	104	8	Pair.java	equals	o	Object	0	RET	this == $
166	107	8	Pair.java	equals	o	Object	1	RET	$ instanceof Pair
2738	60	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	name	String	0	DEF	pode.isSupported($)
2738	60	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	pode	ParameterizedODE	0	DEF	$.isSupported(name)
2739	82	8	ParameterJacobianWrapper.java	computeParameterJacobian	THIS	ParameterJacobianWrapper	1	DEF	$.pode.isSupported(paramName)
2739	82	8	ParameterJacobianWrapper.java	computeParameterJacobian	paramName	String	1	DEF	pode.isSupported($)
20514	90	12	ParameterJacobianWrapper.java	computeParameterJacobian	i	int	0	NIL-FOR	$ < n
20514	90	12	ParameterJacobianWrapper.java	computeParameterJacobian	n	int	0	NIL-FOR	i < $
2884	75	8	ParameterizedWrapper.java	getParameter	THIS	ParameterizedWrapper	0	UnknownParameterException	$.isSupported(name)
2884	75	8	ParameterizedWrapper.java	getParameter	name	String	0	UnknownParameterException	isSupported($)
1049	105	8	PascalDistribution.java	PascalDistribution	r	int	0	NotStrictlyPositiveException	$ <= 0
1050	109	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ > 1
1050	109	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ < 0
1051	138	8	PascalDistribution.java	probability	x	int	1	DEF	$ < 0
1052	152	8	PascalDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
2351	95	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	NullArgumentException	$ == null
20310	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
20310	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
20311	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
20311	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
20312	167	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
20312	167	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
20313	168	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
20313	168	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
2352	169	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
2352	169	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
20314	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
20314	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
20315	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
20315	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
2353	229	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2353	229	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2353	229	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2354	231	15	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2354	231	15	PearsonsCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
20316	235	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
20316	235	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
20316	235	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
20317	256	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
20317	256	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
20318	259	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
20318	259	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
2355	279	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2355	279	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
2222	136	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2223	149	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2224	269	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ > 100
2224	269	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ <= 0
2225	273	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
2226	276	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
2227	286	8	Percentile.java	evaluate	THIS	Percentile	1	DEF	values == $.getDataRef()
2227	286	8	Percentile.java	evaluate	values	double[]	1	DEF	$ == getDataRef()
2228	296	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
2229	299	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
2229	299	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
20258	324	8	Percentile.java	select	begin	int	0	NIL-WHILE	end - $ > MIN_SELECT_SIZE
20258	324	8	Percentile.java	select	end	int	0	NIL-WHILE	$ - begin > MIN_SELECT_SIZE
2230	327	12	Percentile.java	select	THIS	Percentile	1	DEF	node < pivotsHeap.$.length
2230	327	12	Percentile.java	select	node	int	1	DEF	$ < pivotsHeap.length
2230	327	12	Percentile.java	select	node	int	1	DEF	pivotsHeap[$] >= 0
2230	327	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	node < $.length
2230	327	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	$[node] >= 0
2231	334	16	Percentile.java	select	THIS	Percentile	0	DEF	node < pivotsHeap.$.length
2231	334	16	Percentile.java	select	node	int	0	DEF	$ < pivotsHeap.length
2231	334	16	Percentile.java	select	pivotsHeap	int[]	0	DEF	node < $.length
2232	339	12	Percentile.java	select	pivot	int	1	RET	k == $
2232	339	12	Percentile.java	select	k	int	1	RET	$ == pivot
2233	342	19	Percentile.java	select	pivot	int	1	DEF	k < $
2233	342	19	Percentile.java	select	k	int	1	DEF	$ < pivot
2234	376	8	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wMiddle
2234	376	8	Percentile.java	medianOf3	wMiddle	double	1	RET	wBegin < $
2235	377	12	Percentile.java	medianOf3	wMiddle	double	1	RET	$ < wEnd
2235	377	12	Percentile.java	medianOf3	wEnd	double	1	RET	wMiddle < $
2236	383	12	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wEnd
2236	383	12	Percentile.java	medianOf3	wEnd	double	1	RET	wBegin < $
20259	412	8	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
20259	412	8	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
20260	413	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[j] > $
20260	413	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
20260	413	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
20260	413	12	Percentile.java	partition	j	int	0	NIL-WHILE	work[$] > value
20260	413	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[j] > value
20261	416	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[i] < $
20261	416	12	Percentile.java	partition	i	int	0	NIL-WHILE	work[$] < value
20261	416	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
20261	416	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
20261	416	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[i] < value
2237	420	12	Percentile.java	partition	i	int	0	DEF	$ < j
2237	420	12	Percentile.java	partition	j	int	0	DEF	i < $
2238	427	8	Percentile.java	partition	value	double	0	DEF	work[i] > $
2238	427	8	Percentile.java	partition	i	int	0	DEF	$ >= end
2238	427	8	Percentile.java	partition	i	int	0	DEF	work[$] > value
2238	427	8	Percentile.java	partition	work	double[]	0	DEF	$[i] > value
2238	427	8	Percentile.java	partition	end	int	0	DEF	i >= $
20262	443	8	Percentile.java	insertionSort	j	int	0	NIL-FOR	$ < end
20262	443	8	Percentile.java	insertionSort	end	int	0	NIL-FOR	j < $
20263	446	12	Percentile.java	insertionSort	saved	double	0	NIL-WHILE	$ < work[i]
20263	446	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	$ >= begin
20263	446	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	saved < work[$]
20263	446	12	Percentile.java	insertionSort	work	double[]	0	NIL-WHILE	saved < $[i]
20263	446	12	Percentile.java	insertionSort	begin	int	0	NIL-WHILE	i >= $
2239	473	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ <= 0
2239	473	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ > 100
2240	504	8	Percentile.java	copy	THIS	Percentile	0	DEF	source.$.cachedPivots != null
2240	504	8	Percentile.java	copy	source	Percentile	0	DEF	$.cachedPivots != null
660	140	8	Plane.java	setNormal	norm	double	0	MathArithmeticException	$ < 1.0e-10
661	310	8	Plane.java	intersection	dot	double	0	RET	FastMath.abs($) < 1.0e-10
662	325	8	Plane.java	intersection	direction	Vector3D	0	RET	$.getNorm() < 1.0e-10
663	362	8	Plane.java	intersection	determinant	double	0	RET	FastMath.abs($) < 1.0e-10
1091	112	8	PoissonDistribution.java	PoissonDistribution	p	double	0	NotStrictlyPositiveException	$ <= 0
1092	165	8	PoissonDistribution.java	probability	x	int	1	DEF	$ == Integer.MAX_VALUE
1092	165	8	PoissonDistribution.java	probability	x	int	1	DEF	$ < 0
1093	167	15	PoissonDistribution.java	probability	x	int	1	DEF	$ == 0
1094	179	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ < 0
1095	182	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
1096	292	8	PoissonDistribution.java	nextPoisson	pivot	double	1	RET	meanPoisson < $
1096	292	8	PoissonDistribution.java	nextPoisson	meanPoisson	double	1	RET	$ < pivot
19087	298	12	PoissonDistribution.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * meanPoisson
19087	298	12	PoissonDistribution.java	nextPoisson	meanPoisson	double	0	NIL-WHILE	n < 1000 * $
1097	301	16	PoissonDistribution.java	nextPoisson	p	double	1	DEF	r >= $
1097	301	16	PoissonDistribution.java	nextPoisson	r	double	1	DEF	$ >= p
1098	333	16	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ <= p1
1098	333	16	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u <= $
1099	336	20	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	x < -$
1099	336	20	PoissonDistribution.java	nextPoisson	delta	double	0	DEF	x > $
1099	336	20	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ > delta
1099	336	20	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ < -lambda
1100	343	20	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
1100	343	20	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u > $ + p2
1100	343	20	PoissonDistribution.java	nextPoisson	p2	double	1	DEF	u > p1 + $
1101	354	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < -t
1101	354	16	PoissonDistribution.java	nextPoisson	a	int	0	DEF	$ == 0
1101	354	16	PoissonDistribution.java	nextPoisson	t	double	0	DEF	v < -$
1102	360	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < qa
1102	360	16	PoissonDistribution.java	nextPoisson	qa	double	0	DEF	v < $
1103	364	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ > qr
1103	364	16	PoissonDistribution.java	nextPoisson	qr	double	0	DEF	v > $
1104	367	16	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + $)) + logLambdaFactorial
1104	367	16	PoissonDistribution.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1104	367	16	PoissonDistribution.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + $
1104	367	16	PoissonDistribution.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - ArithmeticUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
1104	367	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
757	176	8	PolygonsSet.java	verticesToTree	n	int	0	RET	$ == 0
19055	183	8	PolygonsSet.java	verticesToTree	i	int	0	NIL-FOR	$ < n
19055	183	8	PolygonsSet.java	verticesToTree	n	int	0	NIL-FOR	i < $
19056	189	8	PolygonsSet.java	verticesToTree	i	int	0	NIL-FOR	$ < n
19056	189	8	PolygonsSet.java	verticesToTree	n	int	0	NIL-FOR	i < $
758	199	12	PolygonsSet.java	verticesToTree	line	Line	0	DEF	$ == null
759	208	16	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	FastMath.abs(line.getOffset($.vertex.getLocation())) <= hyperplaneThickness
759	208	16	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	$.vertex != end
759	208	16	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	$.vertex != start
759	208	16	PolygonsSet.java	verticesToTree	start	Vertex	0	DEF	vertex != $
759	208	16	PolygonsSet.java	verticesToTree	end	Vertex	0	DEF	vertex != $
759	208	16	PolygonsSet.java	verticesToTree	line	Line	0	DEF	FastMath.abs($.getOffset(vertex.getLocation())) <= hyperplaneThickness
759	208	16	PolygonsSet.java	verticesToTree	hyperplaneThickness	double	0	DEF	FastMath.abs(line.getOffset(vertex.getLocation())) <= $
19057	239	8	PolygonsSet.java	insertEdges	index	int	0	NIL-WHILE	$ < edges.size()
19057	239	8	PolygonsSet.java	insertEdges	inserted	Edge	0	NIL-WHILE	$ == null
19057	239	8	PolygonsSet.java	insertEdges	edges	List<Edge>	0	NIL-WHILE	index < $.size()
760	241	12	PolygonsSet.java	insertEdges	inserted	Edge	1	DEF	$.getNode() == null
761	242	16	PolygonsSet.java	insertEdges	inserted	Edge	1	DEF	node.insertCut($.getLine())
761	242	16	PolygonsSet.java	insertEdges	node	BSPTree<Euclidean2D>	1	DEF	$.insertCut(inserted.getLine())
762	252	8	PolygonsSet.java	insertEdges	inserted	Edge	0	RET	$ == null
763	256	12	PolygonsSet.java	insertEdges	parent	BSPTree<Euclidean2D>	1	DEF	$ == null
763	256	12	PolygonsSet.java	insertEdges	parent	BSPTree<Euclidean2D>	1	DEF	node == $.getMinus()
763	256	12	PolygonsSet.java	insertEdges	node	BSPTree<Euclidean2D>	1	DEF	$ == parent.getMinus()
764	269	12	PolygonsSet.java	insertEdges	THIS	PolygonsSet	0	DEF	$.edge != inserted
764	269	12	PolygonsSet.java	insertEdges	inserted	Edge	0	DEF	edge != $
765	278	24	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.MINUS
765	278	24	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.MINUS
766	288	24	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.PLUS
766	288	24	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.PLUS
767	298	24	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.PLUS
767	298	24	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.PLUS
768	300	31	PolygonsSet.java	insertEdges	THIS	PolygonsSet	0	DEF	endSide == $.Side.MINUS
768	300	31	PolygonsSet.java	insertEdges	endSide	Side	0	DEF	$ == Side.MINUS
769	309	8	PolygonsSet.java	insertEdges	plusList	List<Edge>	1	DEF	$.isEmpty()
770	314	8	PolygonsSet.java	insertEdges	minusList	List<Edge>	1	DEF	$.isEmpty()
771	524	8	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	v.$.length == 0
771	524	8	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$.length == 0
772	526	12	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree<Euclidean2D>	1	DEF	(Boolean) $.getAttribute()
772	526	12	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree<Euclidean2D>	1	DEF	$.getCut() == null
773	534	15	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$[0][0] == null
774	560	12	PolygonsSet.java	computeGeometricalProperties	sum	double	1	DEF	$ < 0
775	597	8	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	$.vertices == null
776	598	12	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.getTree(false).getCut() == null
19058	610	16	PolygonsSet.java	getVertices	sorted	AVLTree<ComparableSegment>	0	NIL-WHILE	$.isEmpty()
777	613	20	PolygonsSet.java	getVertices	loop	List<ComparableSegment>	0	DEF	$ != null
778	623	20	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.size() < 2
779	631	27	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.get(0).getStart() == null
780	637	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == 0
781	645	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j < (array.$.length - 1)
781	645	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j < ($.length - 1)
781	645	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ < (array.length - 1)
782	650	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j == (array.$.length - 1)
782	650	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j == ($.length - 1)
782	650	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == (array.length - 1)
19059	696	8	PolygonsSet.java	followLoop	globalStart	Vector2D	0	NIL-WHILE	$.distance(end) > 1.0e-10
19059	696	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	globalStart.distance($) > 1.0e-10
19059	696	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	$ != null
19059	696	8	PolygonsSet.java	followLoop	open	boolean	0	NIL-WHILE	$
19060	704	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$.getElement().compareTo(upperRight) <= 0
19060	704	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$ != null
19060	704	12	PolygonsSet.java	followLoop	upperRight	ComparableSegment	0	NIL-FOR	n.getElement().compareTo($) <= 0
783	709	16	PolygonsSet.java	followLoop	distance	double	0	DEF	$ < selectedDistance
783	709	16	PolygonsSet.java	followLoop	selectedDistance	double	0	DEF	distance < $
784	716	12	PolygonsSet.java	followLoop	selectedDistance	double	0	RET	$ > 1.0e-10
785	729	8	PolygonsSet.java	followLoop	loop	ArrayList<ComparableSegment>	0	RET	$.size() == 2
785	729	8	PolygonsSet.java	followLoop	open	boolean	0	RET	$
786	734	8	PolygonsSet.java	followLoop	end	Vector2D	0	MathInternalError	$ == null
786	734	8	PolygonsSet.java	followLoop	open	boolean	0	MathInternalError	$
719	137	8	PolyhedronsSet.java	computeGeometricalProperties	THIS	PolyhedronsSet	1	DEF	$.getSize() < 0
720	235	8	PolyhedronsSet.java	recurseFirstIntersection	cut	SubHyperplane<Euclidean3D>	0	RET	$ == null
721	247	8	PolyhedronsSet.java	recurseFirstIntersection	offset	double	1	DEF	$ < 0
722	255	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
723	258	12	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
724	265	8	PolyhedronsSet.java	recurseFirstIntersection	crossed	SubHyperplane<Euclidean3D>	0	RET	$ != null
725	269	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
726	272	12	PolyhedronsSet.java	recurseFirstIntersection	hit3D	Vector3D	0	RET	$ != null
727	274	16	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
728	297	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
728	297	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
728	297	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
728	297	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusOutside() != null
729	301	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
729	301	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
729	301	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusInside() != null
729	301	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
3567	72	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NoDataException	$ == 0
20928	75	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	$ > 1
20928	75	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	c[$ - 1] == 0
20928	75	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[n - 1] == 0
3568	132	8	PolynomialFunction.java	evaluate	n	int	0	NoDataException	$ == 0
20929	136	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >= 0
3569	152	8	PolynomialFunction.java	value	n	int	0	NoDataException	$ == 0
20930	157	8	PolynomialFunction.java	value	j	int	0	NIL-FOR	$ >= 0
20931	176	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
20931	176	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
20932	201	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
20932	201	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
3570	204	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
3570	204	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
20933	205	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
20933	205	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
20934	223	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
20934	223	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
20935	238	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
20935	238	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
20935	238	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
20936	240	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < FastMath.min($.coefficients.$.length, i + 1)
20936	240	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < FastMath.min(coefficients.length, i + 1)
20936	240	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < FastMath.min(coefficients.length, $ + 1)
3571	262	8	PolynomialFunction.java	differentiate	n	int	0	NoDataException	$ == 0
3572	265	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
20937	269	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
3573	311	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
3574	312	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
20938	319	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
20938	319	8	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
3575	320	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
3575	320	12	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
3576	321	16	PolynomialFunction.java	toString	s	StringBuilder	1	DEF	$.length() > 0
3577	322	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
3577	322	20	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
3578	328	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
3578	328	20	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
3579	334	16	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
3580	340	16	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
3581	358	8	PolynomialFunction.java	toString	c	String	1	RET	$.endsWith(".0")
3582	377	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
3582	377	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
3583	380	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
3584	384	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
3584	384	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
3559	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.verifyInterpolationArray(x, y, false)
3559	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	x	double	0	DEF	verifyInterpolationArray($, y, false)
3559	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	y	double	0	DEF	verifyInterpolationArray(x, $, false)
3560	147	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
3561	172	8	PolynomialFunctionLagrangeForm.java	evaluate	THIS	PolynomialFunctionLagrangeForm	0	RET	$.verifyInterpolationArray(x, y, false)
3561	172	8	PolynomialFunctionLagrangeForm.java	evaluate	x	double	0	RET	verifyInterpolationArray($, y, false)
3561	172	8	PolynomialFunctionLagrangeForm.java	evaluate	y	double	0	RET	verifyInterpolationArray(x, $, false)
20919	210	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
20919	210	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
3562	216	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	dist	double	0	DEF	$ < min_dist
3562	216	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	min_dist	double	0	DEF	dist < $
20920	225	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
20920	225	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
20921	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	j	int	0	NIL-FOR	$ < n-i
20921	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	j < n-$
20921	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	j < $-i
3563	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	1	DEF	nearest < 0.5*(n-$+1)
3563	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	nearest	int	1	DEF	$ < 0.5*(n-i+1)
3563	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	1	DEF	nearest < 0.5*($-i+1)
20922	256	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
20922	256	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
20923	263	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
20923	263	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
20924	264	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
20925	272	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
20925	272	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
20926	275	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
20926	275	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
3564	276	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
3564	276	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
20927	286	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
3565	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DimensionMismatchException	x.$.length != y.$.length
3565	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DimensionMismatchException	$.length != y.length
3565	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DimensionMismatchException	x.length != $.length
3566	317	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	NumberIsTooSmallException	x.$.length < 2
3566	317	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	NumberIsTooSmallException	$.length < 2
20947	104	8	PolynomialFunctionNewtonForm.java	value	i	int	0	NIL-FOR	$ >= 0
3587	155	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
20948	183	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
20949	198	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
20949	198	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
20950	203	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
20951	204	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
3588	230	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	a.$.length == 0
3588	230	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	c.$.length == 0
3588	230	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	NoDataException	$.length == 0
3588	230	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	NoDataException	$.length == 0
3589	234	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DimensionMismatchException	a.$.length != c.$.length + 1
3589	234	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DimensionMismatchException	$.length != c.length + 1
3589	234	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DimensionMismatchException	a.length != $.length + 1
3550	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NullArgumentException	$ == null
3550	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	NullArgumentException	$ == null
3551	107	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	NumberIsTooSmallException	knots.$.length < 2
3551	107	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NumberIsTooSmallException	$.length < 2
3552	111	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DimensionMismatchException	knots.$.length - 1 != polynomials.$.length
3552	111	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DimensionMismatchException	$.length - 1 != polynomials.length
3552	111	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DimensionMismatchException	knots.length - 1 != $.length
3553	135	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v < $.knots[0]
3553	135	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v > $.knots[$.n]
3553	135	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ < knots[0]
3553	135	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ > knots[n]
3554	139	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
3555	145	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
3555	145	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
20918	167	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
20918	167	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
3556	179	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	t0 < $.knots[0]
3556	179	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	t0 > $.knots[$.n]
3556	179	8	PolynomialSplineFunction.java	value	t0	double	0	OutOfRangeException	$ < knots[0]
3556	179	8	PolynomialSplineFunction.java	value	t0	double	0	OutOfRangeException	$ > knots[n]
3557	183	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
3558	189	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
3558	189	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
3585	219	8	PolynomialsUtils.java	createJacobiPolynomial	key	JacobiKey	0	DEF	JACOBI_COEFFICIENTS.containsKey($)
20939	329	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
20939	329	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
20940	330	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ <= i
20940	330	12	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	j <= $
20941	336	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
20941	336	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
20942	342	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < d
20942	342	8	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	i < $
20943	343	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ < d
20943	343	12	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	j < $
3586	365	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
3586	365	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
20944	381	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
20944	381	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
20945	401	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
20945	401	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
20946	417	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
20946	417	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
2068	112	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
2069	115	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
20201	167	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
20201	167	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
20202	187	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
20202	187	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2070	198	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
2070	198	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
2070	198	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
2071	211	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
2072	212	16	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	DEF	$ != null
2073	216	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
2074	217	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
2074	217	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
20203	226	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
20203	226	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2075	234	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
2075	234	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
2076	241	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
20204	272	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
20204	272	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
215	96	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, eps)
215	96	8	Precision.java	compareTo	x	double	1	RET	equals($, y, eps)
215	96	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, eps)
215	96	8	Precision.java	compareTo	eps	double	1	RET	equals(x, y, $)
216	98	15	Precision.java	compareTo	x	double	0	RET	$ < y
216	98	15	Precision.java	compareTo	y	double	0	RET	x < $
217	122	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, maxUlps)
217	122	8	Precision.java	compareTo	x	double	1	RET	equals($, y, maxUlps)
217	122	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, maxUlps)
217	122	8	Precision.java	compareTo	maxUlps	int	1	RET	equals(x, y, $)
218	124	15	Precision.java	compareTo	x	double	0	RET	$ < y
218	124	15	Precision.java	compareTo	y	double	0	RET	x < $
219	207	8	Precision.java	equals	xInt	int	0	DEF	$ < 0
220	210	8	Precision.java	equals	yInt	int	0	DEF	$ < 0
221	287	8	Precision.java	equalsWithRelativeTolerance	THIS	Precision	0	RET	$.equals(x, y, 1)
221	287	8	Precision.java	equalsWithRelativeTolerance	x	double	0	RET	equals($, y, 1)
221	287	8	Precision.java	equalsWithRelativeTolerance	y	double	0	RET	equals(x, $, 1)
222	334	8	Precision.java	equals	xInt	long	0	DEF	$ < 0
223	337	8	Precision.java	equals	yInt	long	0	DEF	$ < 0
224	399	12	Precision.java	round	x	double	1	RET	Double.isInfinite($)
225	459	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
226	469	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
227	478	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
228	487	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
229	489	19	Precision.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
230	493	16	Precision.java	roundUnscaled	unscaled	double	1	DEF	FastMath.floor($) / 2.0 == FastMath.floor(Math .floor($) / 2.0)
231	505	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
232	513	12	Precision.java	roundUnscaled	unscaled	double	0	MathArithmeticException	$ != FastMath.floor($)
1331	144	8	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$ != null
1332	145	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	NonSquareOperatorException	$.getColumnDimension() != $.getRowDimension()
1333	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	m.getRowDimension() != $.getRowDimension()
1333	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$.getRowDimension() != a.getRowDimension()
2127	125	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length, true)
2127	125	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2127	125	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2127	125	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
20238	127	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20238	127	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20238	127	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2128	165	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, weights, begin, length, true)
2128	165	8	Product.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
2128	165	8	Product.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
2128	165	8	Product.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
2128	165	8	Product.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
20239	167	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20239	167	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20239	167	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
946	100	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
947	103	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
948	138	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
949	149	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
950	162	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
951	170	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
952	201	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
953	209	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
954	216	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
955	220	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
956	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
929	101	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
930	138	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
931	149	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
932	162	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
933	170	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
934	201	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
935	209	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
936	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
19437	108	8	QRDecomposition.java	QRDecomposition	minor	int	0	NIL-FOR	$ < FastMath.min(m, n)
19437	108	8	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	minor < FastMath.min($, n)
19437	108	8	QRDecomposition.java	QRDecomposition	n	int	0	NIL-FOR	minor < FastMath.min(m, $)
19438	120	12	QRDecomposition.java	QRDecomposition	row	int	0	NIL-FOR	$ < m
19438	120	12	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	row < $
1353	127	12	QRDecomposition.java	QRDecomposition	a	double	0	DEF	$ != 0.0
19439	151	16	QRDecomposition.java	QRDecomposition	col	int	0	NIL-FOR	$ < n
19439	151	16	QRDecomposition.java	QRDecomposition	n	int	0	NIL-FOR	col < $
19440	154	20	QRDecomposition.java	QRDecomposition	row	int	0	NIL-FOR	$ < m
19440	154	20	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	row < $
19441	160	20	QRDecomposition.java	QRDecomposition	row	int	0	NIL-FOR	$ < m
19441	160	20	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	row < $
1354	175	8	QRDecomposition.java	getR	THIS	QRDecomposition	0	DEF	$.cachedR == null
19442	182	12	QRDecomposition.java	getR	row	int	0	NIL-FOR	$ >= 0
19443	184	16	QRDecomposition.java	getR	col	int	0	NIL-FOR	$ < n
19443	184	16	QRDecomposition.java	getR	n	int	0	NIL-FOR	col < $
1355	201	8	QRDecomposition.java	getQ	THIS	QRDecomposition	0	DEF	$.cachedQ == null
1356	213	8	QRDecomposition.java	getQT	THIS	QRDecomposition	0	DEF	$.cachedQT == null
19444	225	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= FastMath.min(m, n)
19444	225	12	QRDecomposition.java	getQT	n	int	0	NIL-FOR	minor >= FastMath.min(m, $)
19444	225	12	QRDecomposition.java	getQT	m	int	0	NIL-FOR	minor >= FastMath.min($, n)
19445	229	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= 0
1357	232	16	QRDecomposition.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
1357	232	16	QRDecomposition.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
19446	233	20	QRDecomposition.java	getQT	col	int	0	NIL-FOR	$ < m
19446	233	20	QRDecomposition.java	getQT	m	int	0	NIL-FOR	col < $
19447	235	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
19447	235	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
19448	240	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
19448	240	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
1358	261	8	QRDecomposition.java	getH	THIS	QRDecomposition	0	DEF	$.cachedH == null
19449	266	12	QRDecomposition.java	getH	i	int	0	NIL-FOR	$ < m
19449	266	12	QRDecomposition.java	getH	m	int	0	NIL-FOR	i < $
19450	267	16	QRDecomposition.java	getH	j	int	0	NIL-FOR	$ < FastMath.min(i + 1, n)
19450	267	16	QRDecomposition.java	getH	i	int	0	NIL-FOR	j < FastMath.min($ + 1, n)
19450	267	16	QRDecomposition.java	getH	n	int	0	NIL-FOR	j < FastMath.min(i + 1, $)
878	90	8	Quaternion.java	Quaternion	THIS	Quaternion	0	DimensionMismatchException	v.$.length != 3
878	90	8	Quaternion.java	Quaternion	v	double[]	0	DimensionMismatchException	$.length != 3
879	254	8	Quaternion.java	normalize	norm	double	0	ZeroException	$ < Precision.SAFE_MIN
880	269	8	Quaternion.java	equals	THIS	Quaternion	0	RET	$ == other
880	269	8	Quaternion.java	equals	other	Object	0	RET	this == $
881	272	8	Quaternion.java	equals	other	Object	0	RET	$ instanceof Quaternion
882	343	8	Quaternion.java	getPositivePolarForm	THIS	Quaternion	1	RET	$.getQ0() < 0
883	365	8	Quaternion.java	getInverse	squareNorm	double	0	ZeroException	$ < Precision.SAFE_MIN
2570	178	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2571	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2572	193	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2581	162	8	RandomDataGenerator.java	nextHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
20439	177	8	RandomDataGenerator.java	nextHexString	THIS	RandomDataGenerator	0	NIL-FOR	i < randomBytes.$.length
20439	177	8	RandomDataGenerator.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
20439	177	8	RandomDataGenerator.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
2582	188	12	RandomDataGenerator.java	nextHexString	hex	String	0	DEF	$.length() == 1
2583	198	8	RandomDataGenerator.java	nextInt	lower	int	0	NumberIsTooLargeException	$ >= upper
2583	198	8	RandomDataGenerator.java	nextInt	upper	int	0	NumberIsTooLargeException	lower >= $
2584	209	8	RandomDataGenerator.java	nextLong	lower	long	0	NumberIsTooLargeException	$ >= upper
2584	209	8	RandomDataGenerator.java	nextLong	upper	long	0	NumberIsTooLargeException	lower >= $
2585	236	8	RandomDataGenerator.java	nextSecureHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
20440	255	8	RandomDataGenerator.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
20440	255	8	RandomDataGenerator.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
20441	264	12	RandomDataGenerator.java	nextSecureHexString	THIS	RandomDataGenerator	0	NIL-FOR	i < hash.$.length
20441	264	12	RandomDataGenerator.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
20441	264	12	RandomDataGenerator.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
2586	275	16	RandomDataGenerator.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
2587	286	8	RandomDataGenerator.java	nextSecureInt	lower	int	0	NumberIsTooLargeException	$ >= upper
2587	286	8	RandomDataGenerator.java	nextSecureInt	upper	int	0	NumberIsTooLargeException	lower >= $
2588	298	8	RandomDataGenerator.java	nextSecureLong	lower	long	0	NumberIsTooLargeException	$ >= upper
2588	298	8	RandomDataGenerator.java	nextSecureLong	upper	long	0	NumberIsTooLargeException	lower >= $
2589	330	8	RandomDataGenerator.java	nextGaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
2590	545	8	RandomDataGenerator.java	nextUniform	lower	double	0	NumberIsTooLargeException	$ >= upper
2590	545	8	RandomDataGenerator.java	nextUniform	upper	double	0	NumberIsTooLargeException	lower >= $
2591	550	8	RandomDataGenerator.java	nextUniform	lower	double	0	NotFiniteNumberException	Double.isInfinite($)
2592	553	8	RandomDataGenerator.java	nextUniform	upper	double	0	NotFiniteNumberException	Double.isInfinite($)
2593	557	8	RandomDataGenerator.java	nextUniform	lower	double	0	NotANumberException	Double.isNaN($)
2593	557	8	RandomDataGenerator.java	nextUniform	upper	double	0	NotANumberException	Double.isNaN($)
20442	565	8	RandomDataGenerator.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
20442	565	8	RandomDataGenerator.java	nextUniform	lowerInclusive	boolean	0	NIL-WHILE	$
2594	585	8	RandomDataGenerator.java	nextPermutation	n	int	0	NumberIsTooLargeException	k > $
2594	585	8	RandomDataGenerator.java	nextPermutation	k	int	0	NumberIsTooLargeException	$ > n
2595	589	8	RandomDataGenerator.java	nextPermutation	k	int	0	NotStrictlyPositiveException	$ <= 0
20443	597	8	RandomDataGenerator.java	nextPermutation	i	int	0	NIL-FOR	$ < k
20443	597	8	RandomDataGenerator.java	nextPermutation	k	int	0	NIL-FOR	i < $
2596	620	8	RandomDataGenerator.java	nextSample	len	int	0	NumberIsTooLargeException	k > $
2596	620	8	RandomDataGenerator.java	nextSample	k	int	0	NumberIsTooLargeException	$ > len
2597	624	8	RandomDataGenerator.java	nextSample	k	int	0	NotStrictlyPositiveException	$ <= 0
20444	631	8	RandomDataGenerator.java	nextSample	i	int	0	NIL-FOR	$ < k
20444	631	8	RandomDataGenerator.java	nextSample	k	int	0	NIL-FOR	i < $
2598	714	8	RandomDataGenerator.java	getRan	THIS	RandomDataGenerator	0	DEF	$.rand == null
2599	738	8	RandomDataGenerator.java	getSecRan	THIS	RandomDataGenerator	0	DEF	$.secRand == null
20445	754	8	RandomDataGenerator.java	shuffle	i	int	0	NIL-FOR	$ >= end
20445	754	8	RandomDataGenerator.java	shuffle	end	int	0	NIL-FOR	i >= $
2600	755	12	RandomDataGenerator.java	shuffle	i	int	1	DEF	$ == 0
20446	774	8	RandomDataGenerator.java	getNatural	i	int	0	NIL-FOR	$ < n
20446	774	8	RandomDataGenerator.java	getNatural	n	int	0	NIL-FOR	i < $
2647	121	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	representation.size() != $
2647	121	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	DimensionMismatchException	$.size() != l
2648	124	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	sortedRepr.size() != $
2648	124	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	DimensionMismatchException	$.size() != l
20463	133	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
20463	133	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
2649	151	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
2650	156	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
2650	156	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
20464	165	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
20464	165	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
2651	166	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
2651	166	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
2651	166	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
2652	182	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
2652	182	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
20465	199	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
20465	199	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
20466	214	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
20466	214	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
2653	262	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	DimensionMismatchException	$.size() != permutedData.size()
2653	262	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	DimensionMismatchException	originalData.size() != $.size()
20467	270	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
20467	270	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
2654	272	12	RandomKey.java	inducedPermutation	index	int	0	MathIllegalArgumentException	$ == -1
20468	294	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
20468	294	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
2622	40	8	RandomKeyMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof RandomKey<?>
19237	256	8	RealMatrixFormat.java	format	i	int	0	NIL-FOR	$ < rows
19237	256	8	RealMatrixFormat.java	format	rows	int	0	NIL-FOR	i < $
19238	258	12	RealMatrixFormat.java	format	j	int	0	NIL-FOR	$ < matrix.getColumnDimension()
19238	258	12	RealMatrixFormat.java	format	matrix	RealMatrix	0	NIL-FOR	j < $.getColumnDimension()
1194	259	16	RealMatrixFormat.java	format	j	int	0	DEF	$ > 0
1195	265	12	RealMatrixFormat.java	format	i	int	0	DEF	$ < rows - 1
1195	265	12	RealMatrixFormat.java	format	rows	int	0	DEF	i < $ - 1
1196	287	8	RealMatrixFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1197	314	8	RealMatrixFormat.java	parse	trimmedPrefix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1197	314	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1197	314	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
19239	321	8	RealMatrixFormat.java	parse	loop	boolean	0	NIL-FOR	$
1198	323	12	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	RET	$.isEmpty()
1199	325	16	RealMatrixFormat.java	parse	trimmedColumnSeparator	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1199	325	16	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedColumnSeparator, pos)
1199	325	16	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, $)
1200	326	20	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	CompositeFormat.parseFixedstring(source, $, pos)
1200	326	20	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	$.length() != 0
1200	326	20	RealMatrixFormat.java	parse	source	String	1	RET	CompositeFormat.parseFixedstring($, trimmedRowSuffix, pos)
1200	326	20	RealMatrixFormat.java	parse	pos	ParsePosition	1	RET	CompositeFormat.parseFixedstring(source, trimmedRowSuffix, $)
1201	331	24	RealMatrixFormat.java	parse	trimmedRowSeparator	String	1	DEF	CompositeFormat.parseFixedstring(source, $, pos)
1201	331	24	RealMatrixFormat.java	parse	source	String	1	DEF	CompositeFormat.parseFixedstring($, trimmedRowSeparator, pos)
1201	331	24	RealMatrixFormat.java	parse	pos	ParsePosition	1	DEF	CompositeFormat.parseFixedstring(source, trimmedRowSeparator, $)
1202	342	16	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1202	342	16	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	$.length() != 0
1202	342	16	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedRowPrefix, pos)
1202	342	16	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedRowPrefix, $)
1203	348	12	RealMatrixFormat.java	parse	loop	boolean	0	RET	$
1204	351	16	RealMatrixFormat.java	parse	component	Number	1	DEF	$ != null
1205	354	20	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	DEF	$.isEmpty()
1206	367	8	RealMatrixFormat.java	parse	rowComponents	List<Number>	0	DEF	$.isEmpty()
1207	373	8	RealMatrixFormat.java	parse	trimmedSuffix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1207	373	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1207	373	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
1208	378	8	RealMatrixFormat.java	parse	matrix	List<List<Number>>	0	RET	$.isEmpty()
19240	388	12	RealMatrixFormat.java	parse	THIS	RealMatrixFormat	0	NIL-FOR	i < $.rowList.size()
19240	388	12	RealMatrixFormat.java	parse	i	int	0	NIL-FOR	$ < rowList.size()
1628	178	8	RealVector.java	checkVectorDimensions	d	int	0	DimensionMismatchException	$ != n
1628	178	8	RealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	d != $
1629	190	8	RealVector.java	checkIndex	THIS	RealVector	0	OutOfRangeException	index >= $.getDimension()
1629	190	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1629	190	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1630	208	8	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	start >= $
1630	208	8	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ >= dim
1630	208	8	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ < 0
1631	212	8	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	end >= $
1631	212	8	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ < 0
1631	212	8	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ >= dim
1632	216	8	RealVector.java	checkIndices	start	int	0	NumberIsTooSmallException	end < $
1632	216	8	RealVector.java	checkIndices	end	int	0	NumberIsTooSmallException	$ < start
19859	236	8	RealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
19860	257	8	RealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1633	284	8	RealVector.java	mapAddToSelf	d	double	0	RET	$ != 0
19861	309	8	RealVector.java	dotProduct	i	int	0	NIL-FOR	$ < n
19861	309	8	RealVector.java	dotProduct	n	int	0	NIL-FOR	i < $
1634	331	8	RealVector.java	cosine	norm	double	0	MathArithmeticException	$ == 0
1634	331	8	RealVector.java	cosine	vNorm	double	0	MathArithmeticException	$ == 0
19862	398	8	RealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
19863	419	8	RealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
19864	440	8	RealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
19865	460	8	RealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
19866	483	8	RealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
19867	509	8	RealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
19868	526	8	RealVector.java	getMinIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1635	528	12	RealVector.java	getMinIndex	entry	Entry	0	DEF	$.getValue() <= minValue
1635	528	12	RealVector.java	getMinIndex	minValue	double	0	DEF	entry.getValue() <= $
19869	557	8	RealVector.java	getMaxIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1636	559	12	RealVector.java	getMaxIndex	entry	Entry	0	DEF	$.getValue() >= maxValue
1636	559	12	RealVector.java	getMaxIndex	maxValue	double	0	DEF	entry.getValue() >= $
1637	655	8	RealVector.java	outerProduct	v	RealVector	1	DEF	$ instanceof SparseRealVector
19870	660	8	RealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
19870	660	8	RealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
19871	661	12	RealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
19871	661	12	RealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1638	681	8	RealVector.java	projection	norm2	double	0	MathArithmeticException	$ == 0.0
19872	694	8	RealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
19873	710	8	RealVector.java	toArray	i	int	0	NIL-FOR	$ < dim
19873	710	8	RealVector.java	toArray	dim	int	0	NIL-FOR	i < $
1639	725	8	RealVector.java	unitVector	norm	double	0	MathArithmeticException	$ == 0
1640	739	8	RealVector.java	unitize	norm	double	0	MathArithmeticException	$ == 0
19874	844	8	RealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
19875	884	8	RealVector.java	combineToSelf	THIS	RealVector	0	NIL-FOR	i < $.getDimension()
19875	884	8	RealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < getDimension()
19876	905	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
19876	905	8	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
19877	928	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
19877	928	8	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
19878	981	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
19878	981	8	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
19879	1004	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
19879	1004	8	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
19601	202	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
19601	202	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
1470	203	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
1471	226	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1472	246	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
1472	246	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1472	246	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
19602	252	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
1473	254	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
1474	256	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
1474	256	16	RealVectorFormat.java	parse	source	String	0	DEF	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
1474	256	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
1475	261	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
1476	264	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
1477	278	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
1477	278	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1477	278	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
19603	284	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
19603	284	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
19603	284	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
19747	89	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
19747	89	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
19748	94	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	loop	boolean	0	NIL-FOR	$
19749	98	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
19749	98	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1534	101	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ii	int	0	DEF	c[$][$] > c[isr][isr]
1534	101	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	isr	int	0	DEF	c[ii][ii] > c[$][$]
1534	101	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	DEF	$[ii][ii] > $[isr][isr]
1535	108	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	swapR	int	0	DEF	$ != r
1535	108	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	DEF	swapR != $
1536	119	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ir	int	1	NonPositiveDefiniteMatrixException	c[$][$] <= small
1536	119	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	1	NonPositiveDefiniteMatrixException	$[ir][ir] <= small
1536	119	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	1	NonPositiveDefiniteMatrixException	c[ir][ir] <= $
1537	121	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NonPositiveDefiniteMatrixException	$ == 0
19750	126	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
19750	126	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1538	127	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1538	127	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	NonPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1538	127	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	index	int[]	0	NonPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1538	127	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	0	NonPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
19751	145	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
19751	145	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
19752	150	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < i
19752	150	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	j < $
19753	166	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
19753	166	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
19754	167	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < r
19754	167	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NIL-FOR	j < $
644	44	8	RegionFactory.java	buildConvex	THIS	RegionFactory	0	RET	hyperplanes.$.length == 0
644	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$ == null
644	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$.length == 0
645	55	12	RegionFactory.java	buildConvex	THIS	RegionFactory	0	DEF	node.insertCut($.hyperplane)
645	55	12	RegionFactory.java	buildConvex	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
646	137	8	RegionFactory.java	recurseComplement	node	BSPTree<S>	0	RET	$.getCut() == null
647	143	8	RegionFactory.java	recurseComplement	attribute	BoundaryAttribute<S>	0	DEF	$ != null
2485	100	8	RegressionResults.java	RegressionResults	copyData	boolean	1	DEF	$
20402	103	12	RegressionResults.java	RegressionResults	THIS	RegressionResults	0	NIL-FOR	i < varcov.$.length
20402	103	12	RegressionResults.java	RegressionResults	i	int	0	NIL-FOR	$ < varcov.length
20402	103	12	RegressionResults.java	RegressionResults	varcov	double[][]	0	NIL-FOR	i < $.length
2486	117	8	RegressionResults.java	RegressionResults	rank	int	0	DEF	$ > 0
2487	129	8	RegressionResults.java	RegressionResults	containsConstant	boolean	1	DEF	$
2488	151	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2489	154	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2489	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ < 0
2489	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2490	171	8	RegressionResults.java	getParameterEstimates	THIS	RegressionResults	0	RET	$.parameters == null
2491	188	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2492	191	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2492	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ < 0
2492	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2493	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	$ > Double.MIN_VALUE
2493	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	Double.isNaN($)
2494	213	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	RET	$.parameters == null
20403	217	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	NIL-FOR	i < $.parameters.length
20403	217	8	RegressionResults.java	getStdErrorOfEstimates	i	int	0	NIL-FOR	$ < this.parameters.length
2495	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	$ > Double.MIN_VALUE
2495	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	Double.isNaN($)
2496	241	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2497	244	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	i >= $.parameters.length
2497	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ < 0
2497	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ >= this.parameters.length
2498	247	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	j >= $.parameters.length
2498	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ < 0
2498	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ >= this.parameters.length
2499	262	8	RegressionResults.java	getNumberOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2500	401	8	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.isSymmetricVCD
2501	402	12	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.varCovData.length > 1
2502	404	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ == j
2502	404	16	RegressionResults.java	getVcvElement	j	int	1	RET	i == $
2503	406	23	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	i >= $.varCovData[j].length
2503	406	23	RegressionResults.java	getVcvElement	i	int	1	RET	$ >= varCovData[j].length
2503	406	23	RegressionResults.java	getVcvElement	j	int	1	RET	i >= varCovData[$].length
2504	412	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ > j
2504	412	16	RegressionResults.java	getVcvElement	j	int	1	RET	i > $
185	395	8	ResizableDoubleArray.java	ResizableDoubleArray	initialCapacity	int	0	NotStrictlyPositiveException	$ <= 0
186	408	8	ResizableDoubleArray.java	ResizableDoubleArray	data	double	0	DEF	$ != null
187	435	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.internalArray.$.length <= $.startIndex + $.numElements
188	475	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
189	485	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
190	503	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	MathIllegalStateException	$.numElements < 1
191	548	8	ResizableDoubleArray.java	checkContractExpand	contraction	double	0	DEF	$ < expansion
191	548	8	ResizableDoubleArray.java	checkContractExpand	expansion	double	0	DEF	contraction < $
192	555	8	ResizableDoubleArray.java	checkContractExpand	contraction	double	0	DEF	$ <= 1
193	562	8	ResizableDoubleArray.java	checkContractExpand	expansion	double	0	DEF	$ <= 1
194	648	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	MathIllegalArgumentException	i > $.numElements
194	648	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ > numElements
195	652	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ < 0
196	659	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
197	663	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
198	684	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == $.ExpansionMode.MULTIPLICATIVE
199	752	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	ArrayIndexOutOfBoundsException	index >= $.numElements
199	752	8	ResizableDoubleArray.java	getElement	index	int	1	ArrayIndexOutOfBoundsException	$ >= numElements
200	754	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
201	942	8	ResizableDoubleArray.java	setElement	index	int	0	ArrayIndexOutOfBoundsException	$ < 0
202	945	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
202	945	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
203	948	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
203	948	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
204	986	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != MULTIPLICATIVE_MODE
204	986	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != ADDITIVE_MODE
205	993	12	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	1	DEF	$ == MULTIPLICATIVE_MODE
206	995	19	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ == ADDITIVE_MODE
207	1037	8	ResizableDoubleArray.java	setNumElements	i	int	0	MathIllegalArgumentException	$ < 0
208	1046	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	newSize > $.internalArray.$.length
208	1046	8	ResizableDoubleArray.java	setNumElements	newSize	int	0	DEF	$ > internalArray.length
209	1061	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == $.ExpansionMode.MULTIPLICATIVE
210	1144	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
210	1144	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
211	1147	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
212	1159	16	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
3424	82	8	RiddersSolver.java	doSolve	y1	double	0	RET	$ == 0
3425	85	8	RiddersSolver.java	doSolve	y2	double	0	RET	$ == 0
3426	99	12	RiddersSolver.java	doSolve	y3	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3426	99	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y3) <= $
3427	110	12	RiddersSolver.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3427	110	12	RiddersSolver.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3427	110	12	RiddersSolver.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
3428	113	12	RiddersSolver.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3428	113	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3429	119	12	RiddersSolver.java	doSolve	correction	double	1	DEF	$ > 0.0
3430	120	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y1) + FastMath.signum($) == 0.0
3430	120	16	RiddersSolver.java	doSolve	y1	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
3431	130	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y2) + FastMath.signum($) == 0.0
3431	130	16	RiddersSolver.java	doSolve	y2	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
3618	64	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
3619	86	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
20969	124	12	RombergIntegrator.java	doIntegrate	j	int	0	NIL-FOR	$ <= i
20969	124	12	RombergIntegrator.java	doIntegrate	i	int	0	NIL-FOR	j <= $
3620	131	12	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	i >= $.getMinimalIterationCount()
3620	131	12	RombergIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
3621	134	16	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
3621	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3621	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
3621	134	16	RombergIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
800	91	8	RootsOfUnity.java	isCounterClockWise	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
801	119	8	RootsOfUnity.java	computeRoots	n	int	0	ZeroException	$ == 0
802	129	8	RootsOfUnity.java	computeRoots	THIS	RootsOfUnity	0	RET	absN == $.omegaCount
802	129	8	RootsOfUnity.java	computeRoots	absN	int	0	RET	$ == omegaCount
19065	143	8	RootsOfUnity.java	computeRoots	i	int	0	NIL-FOR	$ < absN
19065	143	8	RootsOfUnity.java	computeRoots	absN	int	0	NIL-FOR	i < $
803	165	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
804	169	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
804	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ >= omegaCount
804	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ < 0
805	192	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
806	196	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
806	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ >= omegaCount
806	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ < 0
667	138	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
668	178	4	Rotation.java	Rotation	norm	double	0	MathIllegalArgumentException	$ == 0
669	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
669	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
669	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
669	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
669	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
669	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
669	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
669	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
670	240	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
671	331	4	Rotation.java	Rotation	normProduct	double	0	MathArithmeticException	$ == 0
672	337	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
672	337	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
673	409	6	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
674	418	10	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
675	427	14	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
676	495	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
677	497	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
678	510	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
678	510	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
679	512	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
680	556	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
681	565	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
681	565	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
682	574	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
683	583	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
683	583	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
684	592	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
685	601	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
685	601	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
686	610	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
687	619	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
687	619	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
688	628	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
689	637	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
689	637	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
690	646	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
691	655	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
691	655	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
692	664	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
693	673	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
693	673	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
694	682	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
695	691	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
695	691	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
696	700	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
697	709	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
697	709	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
698	718	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
699	727	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
699	727	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
700	736	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
701	745	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
701	745	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
702	763	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
702	763	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
19049	961	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
703	1002	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
703	1002	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
703	1002	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
20629	108	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
20629	108	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
20630	127	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
20631	135	6	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
20631	135	6	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
20632	137	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
20632	137	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
20632	137	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
20633	139	14	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
20633	139	14	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
20634	150	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
20634	150	6	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
20634	150	6	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
20635	152	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
20635	152	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2872	164	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	$.isLastStep
2873	172	10	RungeKuttaIntegrator.java	integrate	nextIsLast	boolean	0	DEF	$
2762	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
2762	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
20529	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
20529	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
20529	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
20530	157	4	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
20530	157	4	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
20531	163	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
20531	163	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
20532	164	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
20532	164	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
2763	183	4	RungeKuttaStepInterpolator.java	readExternal	n	int	1	DEF	$ < 0
20533	187	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
20533	187	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
20534	194	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
20534	194	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
20535	196	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
20535	196	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
2764	203	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
1111	109	8	SaddlePointExpansion.java	getStirlingError	z	double	1	DEF	$ < 15.0
1112	111	12	SaddlePointExpansion.java	getStirlingError	z2	double	1	DEF	FastMath.floor($) == $
1113	147	8	SaddlePointExpansion.java	getDeviancePart	x	double	1	DEF	FastMath.abs($ - mu) < 0.1 * ($ + mu)
1113	147	8	SaddlePointExpansion.java	getDeviancePart	mu	double	1	DEF	FastMath.abs(x - $) < 0.1 * (x + $)
19095	155	12	SaddlePointExpansion.java	getDeviancePart	s1	double	0	NIL-WHILE	$ != s
19095	155	12	SaddlePointExpansion.java	getDeviancePart	s	double	0	NIL-WHILE	s1 != $
1114	180	8	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == 0
1115	181	12	SaddlePointExpansion.java	logBinomialProbability	p	double	1	DEF	$ < 0.1
1116	186	15	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == n
1116	186	15	SaddlePointExpansion.java	logBinomialProbability	n	int	1	DEF	x == $
1117	187	12	SaddlePointExpansion.java	logBinomialProbability	q	double	1	DEF	$ < 0.1
1486	70	8	SchurTransformer.java	SchurTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1487	93	8	SchurTransformer.java	getP	THIS	SchurTransformer	0	DEF	$.cachedP == null
1488	106	8	SchurTransformer.java	getPT	THIS	SchurTransformer	0	DEF	$.cachedPt == null
1489	120	8	SchurTransformer.java	getT	THIS	SchurTransformer	0	DEF	$.cachedT == null
19618	144	8	SchurTransformer.java	transform	iu	int	0	NIL-WHILE	$ >= 0
1490	150	12	SchurTransformer.java	transform	il	int	1	DEF	$ == iu
1490	150	12	SchurTransformer.java	transform	iu	int	1	DEF	il == $
1491	155	19	SchurTransformer.java	transform	il	int	1	DEF	$ == iu - 1
1491	155	19	SchurTransformer.java	transform	iu	int	1	DEF	il == $ - 1
1492	162	16	SchurTransformer.java	transform	q	double	0	DEF	$ >= 0
1493	164	20	SchurTransformer.java	transform	p	double	1	DEF	$ >= 0
19619	178	20	SchurTransformer.java	transform	j	int	0	NIL-FOR	$ < n
19619	178	20	SchurTransformer.java	transform	n	int	0	NIL-FOR	j < $
19620	185	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= iu
19620	185	20	SchurTransformer.java	transform	iu	int	0	NIL-FOR	i <= $
19621	192	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= n - 1
19621	192	20	SchurTransformer.java	transform	n	int	0	NIL-FOR	i <= $ - 1
1494	205	16	SchurTransformer.java	transform	iteration	int	0	MaxCountExceededException	++$ > MAX_ITERATIONS
19622	226	8	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	i < $.matrixT.$.length
19622	226	8	SchurTransformer.java	getNorm	i	int	0	NIL-FOR	$ < matrixT.length
19623	228	12	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	j < $.matrixT.$.length
19623	228	12	SchurTransformer.java	getNorm	j	int	0	NIL-FOR	$ < matrixT.length
19624	244	8	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	NIL-WHILE	$ > 0
1495	246	12	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	$ == 0.0
1496	249	12	SchurTransformer.java	findSmallSubDiagonalElement	THIS	SchurTransformer	0	DEF	FastMath.abs($.matrixT[l][l - 1]) < $.epsilon * s
1496	249	12	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	FastMath.abs(matrixT[l][l - 1]) < epsilon * $
1496	249	12	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	DEF	FastMath.abs(matrixT[$][$ - 1]) < epsilon * s
1497	269	8	SchurTransformer.java	computeShift	l	int	0	DEF	$ < idx
1497	269	8	SchurTransformer.java	computeShift	idx	int	0	DEF	l < $
1498	275	8	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 10
19625	277	12	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
19625	277	12	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
1499	287	8	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 30
1500	290	12	SchurTransformer.java	computeShift	s	double	0	DEF	$ > 0.0
1501	292	16	SchurTransformer.java	computeShift	THIS	SchurTransformer	0	DEF	shift.$.y < shift.$.x
1501	292	16	SchurTransformer.java	computeShift	shift	ShiftInfo	0	DEF	$.y < $.x
19626	296	16	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
19626	296	16	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
19627	317	8	SchurTransformer.java	initQRStep	im	int	0	NIL-WHILE	$ >= il
19627	317	8	SchurTransformer.java	initQRStep	il	int	0	NIL-WHILE	im >= $
1502	325	12	SchurTransformer.java	initQRStep	im	int	0	DEF	$ == il
1502	325	12	SchurTransformer.java	initQRStep	il	int	0	DEF	im == $
1503	334	12	SchurTransformer.java	initQRStep	THIS	SchurTransformer	0	DEF	lhs < $.epsilon * rhs
1503	334	12	SchurTransformer.java	initQRStep	lhs	double	0	DEF	$ < epsilon * rhs
1503	334	12	SchurTransformer.java	initQRStep	rhs	double	0	DEF	lhs < epsilon * $
19628	360	8	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	$ <= iu - 1
19628	360	8	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	k <= $ - 1
1504	362	12	SchurTransformer.java	performDoubleQRStep	k	int	0	DEF	$ != im
1504	362	12	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	k != $
1505	367	16	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	Precision.equals(shift.$.x, 0.0, $.epsilon)
1505	367	16	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	Precision.equals($.x, 0.0, epsilon)
1506	373	12	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	shift.$.x == 0.0
1506	373	12	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	$.x == 0.0
1507	377	12	SchurTransformer.java	performDoubleQRStep	p	double	0	DEF	$ < 0.0
1508	380	12	SchurTransformer.java	performDoubleQRStep	s	double	0	DEF	$ != 0.0
1509	381	16	SchurTransformer.java	performDoubleQRStep	k	int	1	DEF	$ != im
1509	381	16	SchurTransformer.java	performDoubleQRStep	im	int	1	DEF	k != $
1510	383	23	SchurTransformer.java	performDoubleQRStep	il	int	0	DEF	$ != im
1510	383	23	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	il != $
19629	394	16	SchurTransformer.java	performDoubleQRStep	j	int	0	NIL-FOR	$ < n
19629	394	16	SchurTransformer.java	performDoubleQRStep	n	int	0	NIL-FOR	j < $
1511	396	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
19630	405	16	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= FastMath.min(iu, k + 3)
19630	405	16	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	i <= FastMath.min(iu, $ + 3)
19630	405	16	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	i <= FastMath.min($, k + 3)
1512	407	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
19631	417	16	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= high
19631	417	16	SchurTransformer.java	performDoubleQRStep	high	int	0	NIL-FOR	i <= $
1513	419	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
19632	430	8	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= iu
19632	430	8	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	i <= $
1514	432	12	SchurTransformer.java	performDoubleQRStep	i	int	0	DEF	$ > im + 2
1514	432	12	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	i > $ + 2
3445	87	8	SecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
3446	90	8	SecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
3447	111	12	SecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
3448	124	12	SecantSolver.java	doSolve	f1	double	0	RET	FastMath.abs($) <= ftol
3448	124	12	SecantSolver.java	doSolve	ftol	double	0	RET	FastMath.abs(f1) <= $
3449	130	12	SecantSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
3449	130	12	SecantSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
3449	130	12	SecantSolver.java	doSolve	atol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
3449	130	12	SecantSolver.java	doSolve	rtol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
2167	82	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
756	96	8	Segment.java	distance	r	double	1	RET	$ < 0
756	96	8	Segment.java	distance	r	double	1	RET	$ > 1
2177	268	8	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 0
2177	268	8	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 0
2178	271	12	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 1
2178	271	12	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 1
20252	278	16	SemiVariance.java	evaluate	i	int	0	NIL-FOR	$ < length
20252	278	16	SemiVariance.java	evaluate	length	int	0	NIL-FOR	i < $
2179	279	20	SemiVariance.java	evaluate	i	int	0	DEF	(values[$] > cutoff) == booleanDirection
2179	279	20	SemiVariance.java	evaluate	booleanDirection	boolean	0	DEF	(values[i] > cutoff) == $
2179	279	20	SemiVariance.java	evaluate	values	double[]	0	DEF	($[i] > cutoff) == booleanDirection
2179	279	20	SemiVariance.java	evaluate	cutoff	double	0	DEF	(values[i] > $) == booleanDirection
2180	285	16	SemiVariance.java	evaluate	corrected	boolean	1	RET	$
3368	171	8	Sigmoid.java	value	exp	double	1	DEF	Double.isInfinite($)
20829	189	12	Sigmoid.java	value	THIS	Sigmoid	0	NIL-FOR	n < f.$.length
20829	189	12	Sigmoid.java	value	n	int	0	NIL-FOR	$ < f.length
20829	189	12	Sigmoid.java	value	f	double[]	0	NIL-FOR	n < $.length
20830	194	16	Sigmoid.java	value	k	int	0	NIL-FOR	$ >= 0
3369	196	20	Sigmoid.java	value	k	int	1	DEF	$ > 1
1775	100	8	SimplePointChecker.java	SimplePointChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1776	126	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1777	127	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	iteration >= $.maxIterationCount
1777	127	12	SimplePointChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
19939	134	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	NIL-FOR	i < p.$.length
19939	134	8	SimplePointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
19939	134	8	SimplePointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1778	139	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > size * $.getRelativeThreshold()
1778	139	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > $.getAbsoluteThreshold()
1778	139	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1778	139	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1778	139	12	SimplePointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
2505	133	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
2506	137	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2507	149	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2508	174	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
2509	175	12	SimpleRegression.java	removeData	THIS	SimpleRegression	1	DEF	$.hasIntercept
20404	218	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
20404	218	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
20404	218	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
2510	219	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	ModelSpecificationException	data[i].length < 2
2510	219	12	SimpleRegression.java	addData	i	int	0	ModelSpecificationException	data[$].length < 2
2510	219	12	SimpleRegression.java	addData	data	double[][]	0	ModelSpecificationException	$[i].length < 2
2511	237	8	SimpleRegression.java	addObservation	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length == 0
2511	237	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length == 0
2511	237	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$ == null
2512	254	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length != y.$.length
2512	254	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2512	254	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2512	254	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
2512	254	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
20405	261	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
20405	261	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
20405	261	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
2513	262	12	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	DEF	x[i].length == 0
2513	262	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$] == null
2513	262	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$].length == 0
2513	262	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i] == null
2513	262	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i].length == 0
2514	266	8	SimpleRegression.java	addObservations	obsOk	boolean	0	ModelSpecificationException	$
20406	271	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
20406	271	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
20406	271	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
20407	290	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
20407	290	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
20407	290	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
20407	290	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
2515	335	8	SimpleRegression.java	predict	THIS	SimpleRegression	0	RET	$.hasIntercept
2516	391	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
2517	394	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	FastMath.abs($.sumXX) < 10 * Double.MIN_VALUE
2518	444	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2519	458	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2520	504	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
2521	527	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
2522	565	8	SimpleRegression.java	getInterceptStdErr	THIS	SimpleRegression	0	RET	$.hasIntercept
2523	646	8	SimpleRegression.java	getSlopeConfidenceInterval	THIS	SimpleRegression	0	RET	$.n < 3
2524	649	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ <= 0
2524	649	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ >= 1
2525	682	8	SimpleRegression.java	getSignificance	THIS	SimpleRegression	0	RET	$.n < 3
2526	702	6	SimpleRegression.java	getIntercept	THIS	SimpleRegression	0	RET	$.hasIntercept
2527	731	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	NoDataException:RET	$.hasIntercept
2528	732	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 3
2529	735	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	FastMath.abs( $.sumXX ) > Precision.SAFE_MIN
2530	758	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 2
2531	761	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	Double.isNaN($.sumXX)
2532	786	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	MathIllegalArgumentException	variablesToInclude.$.length == 0
2532	786	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$.length == 0
2532	786	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$ == null
2533	789	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 2
2533	789	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 1
2533	789	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	$.hasIntercept
2533	789	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 2
2533	789	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 1
2534	795	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	$.hasIntercept
2535	796	12	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	variablesToInclude.$.length == 2
2535	796	12	SimpleRegression.java	regress	variablesToInclude	int[]	1	OutOfRangeException:RET	$.length == 2
2536	797	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	ModelSpecificationException	$[0] == 1
2537	799	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2538	802	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[1] != 1
2539	807	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2539	807	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 1
2540	812	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	RET	$[0] == 0
2541	820	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	RET	$[0] == 1
2542	826	20	SimpleRegression.java	regress	_sxx	double	1	RET	Double.isNaN($)
2543	842	12	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
1699	101	8	SimpleUnivariateValueChecker.java	SimpleUnivariateValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1700	127	8	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1701	128	12	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	iteration >= $.maxIterationCount
1701	128	12	SimpleUnivariateValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
1680	98	8	SimpleValueChecker.java	SimpleValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1681	124	8	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1682	125	12	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	iteration >= $.maxIterationCount
1682	125	12	SimpleValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
1779	100	8	SimpleVectorValueChecker.java	SimpleVectorValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1780	126	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1781	127	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	iteration >= $.maxIterationCount
1781	127	12	SimpleVectorValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
19940	134	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	NIL-FOR	i < p.$.length
19940	134	8	SimpleVectorValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
19940	134	8	SimpleVectorValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1782	139	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > $.getAbsoluteThreshold()
1782	139	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > size * $.getRelativeThreshold()
1782	139	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1782	139	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1782	139	12	SimpleVectorValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
2094	170	12	SimplexOptimizer.java	parseOptimizationData	THIS	SimplexOptimizer	0	DEF	$.data instanceof AbstractSimplex
2095	180	8	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
2096	212	12	SimplexOptimizer.java	doOptimize	iteration	int	0	RET	$ > 0
20218	214	16	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
20218	214	16	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
2097	219	16	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
19918	73	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
19918	73	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
1734	77	12	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	$ < minValue
1734	77	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	entry < $
19919	95	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
19919	95	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1735	99	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	Precision.compareTo(entry, 0d, $.maxUlps) > 0
1735	99	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	Precision.compareTo($, 0d, maxUlps) > 0
1736	104	16	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
1737	106	23	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
1738	114	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
1739	116	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
1740	120	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
19920	122	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
19920	122	20	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
1741	125	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	Precision.equals(entry, 1d, $.maxUlps)
1741	125	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
1741	125	24	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
1741	125	24	SimplexSolver.java	getPivotRow	entry	double	0	RET	Precision.equals($, 1d, maxUlps)
1741	125	24	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
1742	141	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.getIterations() < $.getMaxIterations() / 2
19921	147	20	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	NIL-FOR	$.row.equals(minRow)
19921	147	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < varEnd
19921	147	20	SimplexSolver.java	getPivotRow	minRow	Integer	0	NIL-FOR	row.equals($)
19921	147	20	SimplexSolver.java	getPivotRow	varEnd	int	0	NIL-FOR	i < $
1743	149	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	basicRow.equals($.row)
1743	149	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$.equals(row)
1743	149	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$ != null
1744	150	28	SimplexSolver.java	getPivotRow	i	int	0	DEF	$ < minIndex
1744	150	28	SimplexSolver.java	getPivotRow	minIndex	int	0	DEF	i < $
1745	176	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
19922	185	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
19922	185	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1746	186	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
1746	186	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
1747	204	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
19923	208	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1748	213	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, $.epsilon)
1748	213	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	Precision.equals($.getEntry(0, $.getRhsOffset()), 0d, epsilon)
19924	233	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1752	157	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
19925	161	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
19925	161	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
1753	164	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
19926	167	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
19926	167	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
19927	170	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
19927	170	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1754	190	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
1755	201	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
19928	209	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
19928	209	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
1756	217	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
1757	226	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
1757	226	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
1758	228	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1758	228	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1759	233	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1759	233	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
1759	233	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1759	233	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
1760	263	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
1761	288	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
1761	288	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
19929	315	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
19929	315	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
1762	317	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	Precision.equals(entry, 1d, $.maxUlps)
1762	317	12	SimplexTableau.java	getBasicRow	entry	double	1	DEF	Precision.equals($, 1d, maxUlps)
1762	317	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
1763	319	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	Precision.equals(entry, 0d, $.maxUlps)
1763	319	19	SimplexTableau.java	getBasicRow	entry	double	0	RET	Precision.equals($, 0d, maxUlps)
1764	331	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
19930	339	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
19930	339	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
1765	341	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	Precision.compareTo(entry, 0d, $.epsilon) > 0
1765	341	12	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	Precision.compareTo($, 0d, epsilon) > 0
19931	347	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
19931	347	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1766	349	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
1766	349	12	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
19932	355	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
19932	355	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
19933	357	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
19933	357	12	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
1767	358	16	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
1767	358	16	SimplexTableau.java	dropPhase1Objective	columnsToDrop	Set<Integer>	0	DEF	$.contains(j)
19934	366	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
19935	387	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
19935	387	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
1768	389	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	Precision.compareTo(entry, 0d, $.epsilon) < 0
1768	389	12	SimplexTableau.java	isOptimal	entry	double	0	RET	Precision.compareTo($, 0d, epsilon) < 0
19936	407	6	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
19936	407	6	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
19936	407	6	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
1769	409	10	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
1770	414	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ == 0
1770	414	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ != null
1771	419	17	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
1771	419	17	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
19937	443	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
19937	443	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
19938	460	8	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth()
19938	460	8	SimplexTableau.java	subtractRow	i	int	0	NIL-FOR	$ < getWidth()
1772	463	12	SimplexTableau.java	subtractRow	result	double	0	DEF	FastMath.abs($) < CUTOFF_THRESHOLD
1773	580	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
1773	580	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
1774	584	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
3590	63	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
3591	85	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
3592	105	8	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.getMinimalIterationCount() == 1
3593	116	12	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.iterations.getCount() >= $.getMinimalIterationCount()
3594	120	16	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
3594	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3594	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
3594	120	16	SimpsonIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
3362	87	8	Sinc.java	value	scaledX	double	1	RET	FastMath.abs($) <= SHORTCUT
3363	115	8	Sinc.java	value	scaledX	double	1	DEF	FastMath.abs($) <= SHORTCUT
20825	117	12	Sinc.java	value	THIS	Sinc	0	NIL-FOR	i < f.$.length
20825	117	12	Sinc.java	value	i	int	0	NIL-FOR	$ < f.length
20825	117	12	Sinc.java	value	f	double[]	0	NIL-FOR	i < $.length
3364	119	16	Sinc.java	value	i	int	1	DEF	($ & 0x1) == 0
20826	152	12	Sinc.java	value	THIS	Sinc	0	NIL-FOR	n < f.$.length
20826	152	12	Sinc.java	value	n	int	0	NIL-FOR	$ < f.length
20826	152	12	Sinc.java	value	f	double[]	0	NIL-FOR	n < $.length
3365	159	16	Sinc.java	value	n	int	1	DEF	($ & 0x1) == 0
20827	171	16	Sinc.java	value	k	int	0	NIL-FOR	$ > 1
3366	192	8	Sinc.java	value	THIS	Sinc	0	DEF	$.normalized
20828	194	12	Sinc.java	value	THIS	Sinc	0	NIL-FOR	i < f.$.length
20828	194	12	Sinc.java	value	i	int	0	NIL-FOR	$ < f.length
20828	194	12	Sinc.java	value	f	double[]	0	NIL-FOR	i < $.length
1552	92	8	SingularValueDecomposition.java	SingularValueDecomposition	matrix	RealMatrix	1	DEF	$.getRowDimension() < $.getColumnDimension()
19787	113	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ < FastMath.max(nct, nrt)
19787	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	NIL-FOR	k < FastMath.max($, nrt)
19787	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	NIL-FOR	k < FastMath.max(nct, $)
1553	114	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1553	114	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
19788	119	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19788	119	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1554	122	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1554	122	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1555	123	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	A[$][$] < 0
19789	126	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19789	126	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
19790	133	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
19790	133	12	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
1556	134	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1556	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1556	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1556	134	16	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
19791	138	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19791	138	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
19792	142	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19792	142	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1557	150	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1557	150	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
19793	153	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19793	153	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1558	157	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1558	157	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
19794	162	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
19794	162	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1559	165	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1559	165	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1560	166	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$ + 1] < 0
1560	166	20	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k + 1] < 0
19795	169	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
19795	169	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1561	175	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k + 1 < $.m
1561	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1561	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ + 1 < m
1561	175	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
19796	178	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19796	178	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
19797	181	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
19797	181	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
19798	182	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19798	182	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
19799	186	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
19799	186	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
19800	188	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19800	188	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
19801	196	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
19801	196	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1562	203	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	nct < $.n
1562	203	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	$ < n
1563	206	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.m < p
1563	206	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	m < $
1564	209	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	$ + 1 < p
1564	209	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	nrt + 1 < $
19802	215	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
19802	215	8	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
19803	216	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19803	216	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
19804	221	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1565	222	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.singularValues[k] != 0
1565	222	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	singularValues[$] != 0
19805	223	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
19805	223	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
19806	225	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19806	225	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
19807	229	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19807	229	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
19808	233	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19808	233	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
19809	237	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < k - 1
19809	237	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	i < $ - 1
19810	241	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19810	241	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
19811	249	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1566	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1566	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1566	250	12	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1566	250	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
19812	252	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
19812	252	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
19813	254	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
19813	254	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
19814	258	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
19814	258	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
19815	263	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
19815	263	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
19816	272	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-WHILE	$ > 0
19817	284	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1567	288	16	SingularValueDecomposition.java	SingularValueDecomposition	threshold	double	0	DEF	FastMath.abs(e[k]) <= $
1567	288	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	FastMath.abs(e[$]) <= threshold
1567	288	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	FastMath.abs($[k]) <= threshold
1568	294	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	$ == p - 2
1568	294	12	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	k == $ - 2
19818	298	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	NIL-FOR	$ >= k
19818	298	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	ks >= $
1569	299	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	$ == k
1569	299	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	ks == $
1570	304	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	FastMath.abs($.singularValues[ks]) <= TINY + EPS * t
1570	304	20	SingularValueDecomposition.java	SingularValueDecomposition	t	double	0	DEF	FastMath.abs(singularValues[ks]) <= TINY + EPS * $
1570	304	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	FastMath.abs(singularValues[$]) <= TINY + EPS * t
1571	309	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == k
1571	309	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	ks == $
1572	311	23	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == p - 1
1572	311	23	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	ks == $ - 1
19819	325	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ >= k
19819	325	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	j >= $
1573	330	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1573	330	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
19820	335	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
19820	335	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
19821	347	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p
19821	347	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $
19822	355	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19822	355	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1574	380	20	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ != 0
1574	380	20	SingularValueDecomposition.java	SingularValueDecomposition	c	double	0	DEF	$ != 0
1575	383	24	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ < 0
19823	391	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p - 1
19823	391	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $ - 1
1576	395	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1576	395	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
19824	403	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
19824	403	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1577	416	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	j < $.m - 1
1577	416	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ < m - 1
19825	417	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19825	417	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1578	431	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] <= 0
1578	431	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] <= 0
19826	434	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ <= pp
19826	434	24	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-FOR	i <= $
19827	439	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-WHILE	$ < pp
19827	439	20	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-WHILE	k < $
1579	440	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] >= $.singularValues[k + 1]
1579	440	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] >= singularValues[$ + 1]
1580	446	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.n - 1
1580	446	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < n - 1
19828	447	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
19828	447	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1581	453	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.m - 1
1581	453	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < m - 1
19829	454	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
19829	454	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1582	473	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.transposed
1583	501	8	SingularValueDecomposition.java	getUT	THIS	SingularValueDecomposition	0	DEF	$.cachedUt == null
1584	515	8	SingularValueDecomposition.java	getS	THIS	SingularValueDecomposition	0	DEF	$.cachedS == null
1585	550	8	SingularValueDecomposition.java	getVT	THIS	SingularValueDecomposition	0	DEF	$.cachedVt == null
19830	572	8	SingularValueDecomposition.java	getCovariance	THIS	SingularValueDecomposition	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
19830	572	8	SingularValueDecomposition.java	getCovariance	p	int	0	NIL-WHILE	dimension < $
19830	572	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	$ < p
19830	572	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
19830	572	8	SingularValueDecomposition.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
1586	577	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NumberIsTooLargeException	$ == 0
19831	636	8	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.singularValues.$.length
19831	636	8	SingularValueDecomposition.java	getRank	i	int	0	NIL-FOR	$ < singularValues.length
1587	637	12	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	DEF	$.singularValues[i] > $.tol
1587	637	12	SingularValueDecomposition.java	getRank	i	int	0	DEF	singularValues[$] > tol
2154	96	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
2155	111	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
2156	115	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
2157	136	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
2158	164	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
2158	164	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2158	164	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
2158	164	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
2158	164	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
20245	174	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20245	174	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20245	174	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
20246	182	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20246	182	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20246	182	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
3349	76	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3349	76	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3349	76	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3349	76	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3349	76	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3349	76	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3350	79	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3350	79	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3350	79	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
20811	86	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20811	86	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3351	87	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3351	87	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3351	87	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3351	87	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
20812	98	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
20812	98	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
20813	100	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20813	100	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
20814	110	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
20814	110	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
20815	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20815	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
20816	120	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20816	120	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
20817	122	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
20817	122	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
20818	132	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20818	132	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
20819	134	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
20819	134	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
19311	97	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rows
19311	97	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rows
19312	98	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columns
19312	98	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columns
1257	111	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1257	111	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
1258	157	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1258	157	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
1259	170	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1259	170	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
19412	117	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
19412	117	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
19412	117	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
19413	156	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1334	160	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1334	160	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
19414	179	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1335	188	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
19415	193	12	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < n
19415	193	12	SparseFieldVector.java	append	n	int	0	NIL-FOR	i < $
19416	217	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
19417	230	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
19418	243	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
1336	279	8	SparseFieldVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
19419	287	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1337	290	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
1337	290	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
1337	290	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
1337	290	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
19420	304	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
19420	304	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
19421	320	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
19422	334	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
19422	334	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
19423	348	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
19424	374	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
19425	377	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
1338	387	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
19426	393	12	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
19427	397	16	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < n
19427	397	16	SparseFieldVector.java	outerProduct	n	int	0	NIL-FOR	col < $
19428	414	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
19428	414	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
19429	431	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < n
19429	431	8	SparseFieldVector.java	setSubVector	n	int	0	NIL-FOR	i < $
19430	448	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1339	451	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1339	451	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1340	463	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
19431	469	12	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < n
19431	469	12	SparseFieldVector.java	subtract	n	int	0	NIL-FOR	i < $
1341	470	16	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
1341	470	16	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
19432	484	8	SparseFieldVector.java	toArray	iter	Iterator	0	NIL-WHILE	$.hasNext()
1342	498	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	OutOfRangeException	index >= $.getDimension()
1342	498	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1342	498	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1343	511	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DimensionMismatchException	$.getDimension() != n
1343	511	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	getDimension() != $
1344	518	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
19433	525	12	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < n
19433	525	12	SparseFieldVector.java	add	n	int	0	NIL-FOR	i < $
19434	552	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1345	565	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
1345	565	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
1346	569	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector<?>
1347	576	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
1348	577	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
1348	577	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
1349	580	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
1349	580	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
1350	583	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
1350	583	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
19435	588	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1351	591	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
1351	591	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
19436	596	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1352	599	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
1352	599	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
1352	599	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
2359	155	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2359	155	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2359	155	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2360	157	15	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2360	157	15	SpearmansCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
20322	173	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
20322	173	8	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
3252	70	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3252	70	8	SplineInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3252	70	8	SplineInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3253	74	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	NumberIsTooSmallException	x.$.length < 3
3253	74	8	SplineInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 3
20729	86	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
20729	86	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
20730	95	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
20730	95	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
20731	110	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
20732	118	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
20732	118	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
2561	61	8	StableRandomGenerator.java	StableRandomGenerator	generator	RandomGenerator	0	NullArgumentException	$ == null
2562	65	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ <= 2d
2562	65	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ > 0d
2563	70	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ <= 1d
2563	70	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ >= -1d
2564	78	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	1	DEF	$ < 2d
2564	78	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	1	DEF	$ != 0d
2565	96	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	RET	$.alpha == 2d
2566	103	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.beta == 0d
2567	105	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.alpha == 1d
2568	117	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	FastMath.abs($.alpha - 1d) > 1e-8
2569	128	16	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	DEF	$.alpha != 1d
2390	703	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2390	703	8	StatUtils.java	sumDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2390	703	8	StatUtils.java	sumDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2391	706	8	StatUtils.java	sumDifference	n	int	0	NoDataException	$ <= 0
20339	710	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
20339	710	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
2392	752	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2392	752	8	StatUtils.java	varianceDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2392	752	8	StatUtils.java	varianceDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2393	755	8	StatUtils.java	varianceDifference	n	int	0	NumberIsTooSmallException	$ < 2
20340	758	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
20340	758	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
20341	777	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
20341	777	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
20341	777	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
20342	788	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
20342	788	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
20342	788	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
2257	134	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
2257	134	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
2258	137	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
3370	65	8	StepFunction.java	StepFunction	x	double[]	0	NullArgumentException	$ == null
3370	65	8	StepFunction.java	StepFunction	y	double[]	0	NullArgumentException	$ == null
3371	69	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	y.$.length == 0
3371	69	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	x.$.length == 0
3371	69	8	StepFunction.java	StepFunction	x	double[]	0	NoDataException	$.length == 0
3371	69	8	StepFunction.java	StepFunction	y	double[]	0	NoDataException	$.length == 0
3372	73	8	StepFunction.java	StepFunction	THIS	StepFunction	0	DimensionMismatchException	y.$.length != x.$.length
3372	73	8	StepFunction.java	StepFunction	x	double[]	0	DimensionMismatchException	y.length != $.length
3372	73	8	StepFunction.java	StepFunction	y	double[]	0	DimensionMismatchException	$.length != x.length
3373	87	8	StepFunction.java	value	index	int	1	DEF	$ < -1
3374	90	15	StepFunction.java	value	index	int	1	DEF	$ >= 0
2748	206	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
2749	215	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
2750	224	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.mode == $.StepNormalizerMode.MULTIPLES
2750	224	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	Precision.equals(nextTime, $.lastTime, 1)
2750	224	8	StepNormalizer.java	handleStep	nextTime	double	0	DEF	Precision.equals($, lastTime, 1)
20520	231	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
2751	243	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
2752	250	12	StepNormalizer.java	handleStep	addLast	boolean	0	DEF	$
2753	278	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.bounds.firstIncluded()
2753	278	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.firstTime == $.lastTime
2349	110	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	0	NumberIsTooSmallException	$.n < 2
2350	114	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	1	RET	$.biasCorrected
20304	82	8	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
20304	82	8	StorelessCovariance.java	initializeMatrix	i	int	0	NIL-FOR	$ < dimension
20305	83	12	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
20305	83	12	StorelessCovariance.java	initializeMatrix	j	int	0	NIL-FOR	$ < dimension
2348	151	8	StorelessCovariance.java	increment	THIS	StorelessCovariance	0	DimensionMismatchException	length != $.dimension
2348	151	8	StorelessCovariance.java	increment	length	int	0	DimensionMismatchException	$ != dimension
20306	157	8	StorelessCovariance.java	increment	i	int	0	NIL-FOR	$ < length
20306	157	8	StorelessCovariance.java	increment	length	int	0	NIL-FOR	i < $
20307	158	12	StorelessCovariance.java	increment	j	int	0	NIL-FOR	$ < length
20307	158	12	StorelessCovariance.java	increment	length	int	0	NIL-FOR	j < $
20308	184	8	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
20308	184	8	StorelessCovariance.java	getData	i	int	0	NIL-FOR	$ < dimension
20309	185	12	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
20309	185	12	StorelessCovariance.java	getData	j	int	0	NIL-FOR	$ < dimension
704	121	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
753	125	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
754	159	8	SubLine.java	side	crossing	Vector2D	0	RET	$ == null
755	180	8	SubLine.java	split	crossing	Vector2D	0	RET	$ == null
654	60	8	SubPlane.java	side	inter	Line	0	RET	$ == null
655	77	8	SubPlane.java	side	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
655	77	8	SubPlane.java	side	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
656	103	8	SubPlane.java	split	inter	Line	0	RET	$ == null
657	115	8	SubPlane.java	split	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
657	115	8	SubPlane.java	split	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
2124	124	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length, true)
2124	124	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2124	124	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2124	124	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
20235	126	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20235	126	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20235	126	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2125	163	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, weights, begin, length, true)
2125	163	8	Sum.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
2125	163	8	Sum.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
2125	163	8	Sum.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
2125	163	8	Sum.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
20236	165	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20236	165	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20236	165	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2126	135	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length, true)
2126	135	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2126	135	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2126	135	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
20237	137	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20237	137	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20237	137	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2123	123	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length, true)
2123	123	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2123	123	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2123	123	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
20234	125	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20234	125	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20234	125	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2195	159	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2196	162	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2197	165	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl != $.geoMean
2198	218	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
2199	219	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
2200	354	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2201	357	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2202	371	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
2202	371	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
2203	374	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
2204	645	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	MathIllegalStateException	$.n > 0
2205	684	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getVarianceImpl() instanceof Variance
2206	689	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.meanImpl instanceof Mean
2206	689	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.meanImpl instanceof Mean
2207	694	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
2208	702	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
2208	702	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
2209	707	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
2209	707	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
2210	712	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
2210	712	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
2211	717	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
2211	717	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
2212	722	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
2212	722	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
2213	727	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
2213	727	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
2214	732	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
2214	732	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
2215	737	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
2215	737	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
1217	1168	8	SymmLQ.java	solveInPlace	state	State	0	RET	$.bEqualsNullVector()
1218	1177	8	SymmLQ.java	solveInPlace	earlyStop	boolean	0	DEF	$
19255	1178	12	SymmLQ.java	solveInPlace	state	State	0	NIL-DOWHILE	$.hasConverged()
1043	91	8	TDistribution.java	TDistribution	degreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1044	122	8	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ == 0
1045	130	12	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
1046	158	8	TDistribution.java	getNumericalMean	df	double	0	RET	$ > 1
1047	179	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 2
1048	183	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ <= 2
1048	183	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 1
2281	1133	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ <= 0
2281	1133	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ > 0.5
2282	1150	8	TTest.java	checkSampleData	data	double[]	0	NullArgumentException	$ == null
2283	1153	8	TTest.java	checkSampleData	THIS	TTest	0	NumberIsTooSmallException	data.$.length < 2
2283	1153	8	TTest.java	checkSampleData	data	double[]	0	NumberIsTooSmallException	$.length < 2
2284	1171	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NullArgumentException	$ == null
2285	1174	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NumberIsTooSmallException	$.getN() < 2
2176	90	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
2857	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	1	DEF	$.previousState != null
2857	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
20620	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20620	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
20621	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
20621	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2617	72	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	MathIllegalArgumentException	population.getPopulationSize() < $.arity
2617	72	8	TournamentSelection.java	tournament	population	ListPopulation	0	MathIllegalArgumentException	$.getPopulationSize() < this.arity
20457	86	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
20457	86	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
20489	62	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
20489	62	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
20489	62	8	TransformUtils.java	scaleArray	f	double[]	0	NIL-FOR	i < $.length
20490	78	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
20490	78	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
20490	78	8	TransformUtils.java	scaleArray	f	Complex[]	0	NIL-FOR	i < $.length
20491	102	8	TransformUtils.java	createRealImaginaryArray	THIS	TransformUtils	0	NIL-FOR	i < dataC.$.length
20491	102	8	TransformUtils.java	createRealImaginaryArray	i	int	0	NIL-FOR	$ < dataC.length
20491	102	8	TransformUtils.java	createRealImaginaryArray	dataC	Complex[]	0	NIL-FOR	i < $.length
2716	127	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataRI.$.length != 2
2716	127	8	TransformUtils.java	createComplexArray	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
2717	132	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataR.$.length != dataI.$.length
2717	132	8	TransformUtils.java	createComplexArray	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
2717	132	8	TransformUtils.java	createComplexArray	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
20492	138	8	TransformUtils.java	createComplexArray	i	int	0	NIL-FOR	$ < n
20492	138	8	TransformUtils.java	createComplexArray	n	int	0	NIL-FOR	i < $
2718	157	8	TransformUtils.java	exactLog2	index	int	0	MathIllegalArgumentException	$ < 0
102	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
102	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
103	148	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
104	159	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
104	159	8	TransformerMap.java	equals	other	Object	0	RET	this == $
105	162	8	TransformerMap.java	equals	other	Object	0	RET	$ instanceof TransformerMap
106	164	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
106	164	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
107	167	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
107	167	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
108	171	16	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
108	171	16	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
3610	65	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
3611	87	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
3612	119	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
20966	134	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
20966	134	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
3613	154	12	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	i >= $.getMinimalIterationCount()
3613	154	12	TrapezoidIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
3614	158	16	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
3614	158	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
3614	158	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3614	158	16	TrapezoidIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
1209	63	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1210	86	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
1211	98	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
19241	103	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
1212	106	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
1212	106	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
19242	110	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
19242	110	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
19243	113	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
19243	113	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
19244	115	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
19244	115	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
19245	120	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
19245	120	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
1213	139	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
19246	142	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
19246	142	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
1214	144	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
1215	147	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1215	147	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
19247	195	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
19247	195	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
19248	201	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
19248	201	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1216	207	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
19249	218	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
19249	218	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
19250	222	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
19250	222	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
19251	232	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
19251	232	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
19252	238	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
19252	238	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
19253	244	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
19253	244	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
19254	246	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
19254	246	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1053	82	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooLargeException	$ >= b
1053	82	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	a >= $
1054	87	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooSmallException	c < $
1054	87	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooSmallException	$ < a
1055	91	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooLargeException	$ > b
1055	91	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	c > $
1056	142	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.a
1056	142	8	TriangularDistribution.java	density	x	double	0	RET	$ < a
1057	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.c
1057	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.a <= x
1057	145	8	TriangularDistribution.java	density	x	double	0	RET	$ < c
1057	145	8	TriangularDistribution.java	density	x	double	0	RET	a <= $
1058	150	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x == $.c
1058	150	8	TriangularDistribution.java	density	x	double	0	RET	$ == c
1059	153	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.c < x
1059	153	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x <= $.b
1059	153	8	TriangularDistribution.java	density	x	double	0	RET	c < $
1059	153	8	TriangularDistribution.java	density	x	double	0	RET	$ <= b
1060	175	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.a
1060	175	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < a
1061	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.c
1061	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.a <= x
1061	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < c
1061	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	a <= $
1062	183	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x == $.c
1062	183	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ == c
1063	186	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x <= $.b
1063	186	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.c < x
1063	186	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ <= b
1063	186	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	c < $
1064	262	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0
1064	262	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1
1065	265	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
1066	268	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1067	271	8	TriangularDistribution.java	inverseCumulativeProbability	THIS	TriangularDistribution	0	RET	p < ($.c - $.a) / ($.b - $.a)
1067	271	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ < (c - a) / (b - a)
3256	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	z.$.length == 0
3256	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3256	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3256	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3256	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3256	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	z	double[]	0	NoDataException	$.length == 0
3256	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$[0].length == 0
3256	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$.length == 0
3257	158	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3257	158	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3257	158	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	xLen != $.length
3258	161	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3258	161	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3258	161	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	xLen != $.length
3259	164	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3259	164	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3259	164	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3260	167	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdZ.$.length
3260	167	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdZ.length
3260	167	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3261	170	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3261	170	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3261	170	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3262	173	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdZ.$.length
3262	173	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdZ.length
3262	173	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3263	176	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdYdZ.$.length
3263	176	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdYdZ.length
3263	176	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3264	179	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d3FdXdYdZ.$.length
3264	179	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d3FdXdYdZ.length
3264	179	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
20735	196	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
20735	196	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3265	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3265	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3265	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3265	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3266	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3266	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3266	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3266	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3267	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3267	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3267	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3267	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3268	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i].length != yLen
3268	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$].length != yLen
3268	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdZ[i].length != $
3268	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3269	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3269	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3269	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3269	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3270	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i].length != yLen
3270	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$].length != yLen
3270	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdZ[i].length != $
3270	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3271	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i].length != yLen
3271	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$].length != yLen
3271	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdYdZ[i].length != $
3271	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3272	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i].length != yLen
3272	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$].length != yLen
3272	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d3FdXdYdZ[i].length != $
3272	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
20736	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
20736	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3273	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i][j].length != zLen
3273	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	f[i][$].length != zLen
3273	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$][j].length != zLen
3273	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	f[i][j].length != $
3273	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3274	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i][j].length != zLen
3274	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdX[i][$].length != zLen
3274	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$][j].length != zLen
3274	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdX[i][j].length != $
3274	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3275	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i][j].length != zLen
3275	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdY[i][$].length != zLen
3275	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$][j].length != zLen
3275	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdY[i][j].length != $
3275	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3276	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i][j].length != zLen
3276	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdZ[i][$].length != zLen
3276	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$][j].length != zLen
3276	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdZ[i][j].length != $
3276	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3277	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i][j].length != zLen
3277	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdY[i][$].length != zLen
3277	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$][j].length != zLen
3277	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdY[i][j].length != $
3277	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3278	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i][j].length != zLen
3278	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdZ[i][$].length != zLen
3278	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$][j].length != zLen
3278	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdZ[i][j].length != $
3278	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3279	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i][j].length != zLen
3279	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdYdZ[i][$].length != zLen
3279	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$][j].length != zLen
3279	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdYdZ[i][j].length != $
3279	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3280	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != zLen
3280	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d3FdXdYdZ[i][$].length != zLen
3280	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$][j].length != zLen
3280	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != $
3280	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
20737	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	k	int	0	NIL-FOR	$ < lastK
20737	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastK	int	0	NIL-FOR	k < $
3281	309	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
3282	313	8	TricubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
3283	317	8	TricubicSplineInterpolatingFunction.java	value	k	int	0	OutOfRangeException	$ == -1
3284	335	8	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
3284	335	8	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
20738	340	8	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
20738	340	8	TricubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
3285	341	12	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
3285	341	12	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
3285	341	12	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
20739	401	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < sz
20739	401	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	i < $
20740	404	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < sz
20740	404	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	j < $
20741	430	8	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	i	int	0	NIL-FOR	$ < N
20742	431	12	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	j	int	0	NIL-FOR	$ < N
20743	432	16	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	k	int	0	NIL-FOR	$ < N
3286	449	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3286	449	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3287	452	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
3287	452	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
3288	455	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ < 0
3288	455	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ > 1
20744	472	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	NIL-FOR	$ < N
20745	473	12	TricubicSplineInterpolatingFunction.java	value	j	int	0	NIL-FOR	$ < N
20746	474	16	TricubicSplineInterpolatingFunction.java	value	k	int	0	NIL-FOR	$ < N
3329	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3329	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3329	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3329	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	zval.$.length == 0
3329	42	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3329	42	8	TricubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3329	42	8	TricubicSplineInterpolator.java	interpolate	zval	double[]	0	NoDataException	$.length == 0
3329	42	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	NoDataException	$.length == 0
3330	45	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3330	45	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3330	45	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	xval.length != $.length
20787	62	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20787	62	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3331	63	12	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3331	63	12	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3331	63	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3331	63	12	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i].length != yLen
20788	67	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
20788	67	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
3332	68	16	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i][j].length != zLen
3332	68	16	TricubicSplineInterpolator.java	interpolate	j	int	0	DimensionMismatchException	fval[i][$].length != zLen
3332	68	16	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$][j].length != zLen
3332	68	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	DimensionMismatchException	fval[i][j].length != $
3332	68	16	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
20789	72	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
20789	72	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
20790	85	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20790	85	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
20791	92	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
20791	92	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
20792	99	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
20792	99	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
20793	107	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
20793	107	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
20794	109	12	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20794	109	12	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
20795	111	16	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
20795	111	16	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
20796	123	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20796	123	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
20797	125	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
20797	125	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
20798	127	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
20798	127	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
20799	137	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
20799	137	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
20800	139	12	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
20800	139	12	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
20801	141	16	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20801	141	16	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
20802	150	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
20802	150	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
20803	153	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
20803	153	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
20804	156	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
20804	156	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
2601	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != standardDeviation.$.length
2601	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != standardDeviation.length
2601	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DimensionMismatchException	mean.length != $.length
20447	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
20447	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
20447	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
2618	64	8	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ < 0.0d
2618	64	8	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ > 1.0d
2619	90	8	UniformCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2619	90	8	UniformCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2620	107	8	UniformCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
2620	107	8	UniformCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
20458	120	8	UniformCrossover.java	mate	index	int	0	NIL-FOR	$ < length
20458	120	8	UniformCrossover.java	mate	length	int	0	NIL-FOR	index < $
2621	122	12	UniformCrossover.java	mate	THIS	UniformCrossover	1	DEF	random.nextDouble() < $.ratio
2621	122	12	UniformCrossover.java	mate	random	RandomGenerator	1	DEF	$.nextDouble() < ratio
1068	72	8	UniformIntegerDistribution.java	UniformIntegerDistribution	lower	int	0	NumberIsTooLargeException	$ >= upper
1068	72	8	UniformIntegerDistribution.java	UniformIntegerDistribution	upper	int	0	NumberIsTooLargeException	lower >= $
1069	83	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1069	83	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1069	83	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ < lower
1069	83	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ > upper
1070	91	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1070	91	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ < lower
1071	94	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1071	94	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ > upper
1072	96	8	UniformRealDistribution.java	UniformRealDistribution	lower	double	0	NumberIsTooLargeException	$ >= upper
1072	96	8	UniformRealDistribution.java	UniformRealDistribution	upper	double	0	NumberIsTooLargeException	lower >= $
1073	109	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x < $.lower
1073	109	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x > $.upper
1073	109	8	UniformRealDistribution.java	density	x	double	0	RET	$ < lower
1073	109	8	UniformRealDistribution.java	density	x	double	0	RET	$ > upper
1074	117	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x <= $.lower
1074	117	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ <= lower
1075	120	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x >= $.upper
1075	120	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ >= upper
20425	66	8	UnitSphereRandomVectorGenerator.java	nextVector	normSq	double	0	NIL-DOWHILE	$ > 1
20426	68	12	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
20426	68	12	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
20427	76	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
20427	76	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
1727	75	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	optimizer	BaseUnivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1727	75	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	generator	RandomGenerator	0	NullArgumentException	$ == null
1728	79	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1729	133	8	UnivariateMultiStartOptimizer.java	getOptima	THIS	UnivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
19916	156	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
19916	156	8	UnivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1730	172	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
3328	86	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NumberIsTooSmallException	xval.$.length < $.extend
3328	86	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NumberIsTooSmallException	$.length < extend
20785	96	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < xval.$.length
20785	96	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xval.length
20785	96	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NIL-FOR	i < $.length
20786	103	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < $.extend
20786	103	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < extend
3386	53	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
3387	78	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
3388	107	8	UnivariateSolverUtils.java	forceSide	THIS	UnivariateSolverUtils	0	RET	allowedSolution == $.AllowedSolution.ANY_SIDE
3388	107	8	UnivariateSolverUtils.java	forceSide	allowedSolution	AllowedSolution	0	RET	$ == AllowedSolution.ANY_SIDE
20831	120	8	UnivariateSolverUtils.java	forceSide	remainingEval	int	0	NIL-WHILE	$ > 0
3389	122	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ >= 0
3389	122	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ <= 0
3389	122	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ >= 0
3389	122	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ <= 0
3390	130	12	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ < fHi
3390	130	12	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo < $
3391	132	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ >= 0
3392	137	19	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ > fHi
3392	137	19	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo > $
3393	139	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ <= 0
3394	151	12	UnivariateSolverUtils.java	forceSide	changeLo	boolean	0	DEF	$
3395	158	12	UnivariateSolverUtils.java	forceSide	changeHi	boolean	0	DEF	$
3396	260	8	UnivariateSolverUtils.java	bracket	function	UnivariateFunction	0	NullArgumentException	$ == null
3397	263	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NotStrictlyPositiveException	$ <= 0
20832	274	8	UnivariateSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
20832	274	8	UnivariateSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
20832	274	8	UnivariateSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
20832	274	8	UnivariateSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
20832	274	8	UnivariateSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
20832	274	8	UnivariateSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
20832	274	8	UnivariateSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
20832	274	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
3398	284	8	UnivariateSolverUtils.java	bracket	fa	double	0	NoBracketingException	$ * fb > 0.0
3398	284	8	UnivariateSolverUtils.java	bracket	fb	double	0	NoBracketingException	fa * $ > 0.0
3399	321	8	UnivariateSolverUtils.java	isBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
3400	353	8	UnivariateSolverUtils.java	verifyInterval	lower	double	0	NumberIsTooLargeException	$ >= upper
3400	353	8	UnivariateSolverUtils.java	verifyInterval	upper	double	0	NumberIsTooLargeException	lower >= $
3401	392	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
3402	396	8	UnivariateSolverUtils.java	verifyBracketing	THIS	UnivariateSolverUtils	0	NoBracketingException	$.isBracketing(function, lower, upper)
3402	396	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NoBracketingException	isBracketing($, lower, upper)
3402	396	8	UnivariateSolverUtils.java	verifyBracketing	lower	double	0	NoBracketingException	isBracketing(function, $, upper)
3402	396	8	UnivariateSolverUtils.java	verifyBracketing	upper	double	0	NoBracketingException	isBracketing(function, lower, $)
20448	147	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
20448	147	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
20448	147	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
20449	165	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
20449	165	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
2602	276	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
2603	293	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
2604	368	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution == null
2604	368	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution.getBinStats().size() == 0
2605	396	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
2606	399	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
2606	399	8	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
2607	403	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
2607	403	12	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
2129	171	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
2130	181	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
2131	183	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
2132	186	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
2133	206	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
2134	229	8	Variance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2135	261	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
2135	261	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2135	261	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
2135	261	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
2136	263	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2137	265	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
2138	321	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights,begin, length)
2138	321	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights,begin, length)
2138	321	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $,begin, length)
2138	321	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights,$, length)
2138	321	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights,begin, $)
2139	323	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2140	325	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
2141	408	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
2141	408	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2141	408	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
2141	408	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
2142	409	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2143	411	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
20240	415	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20240	415	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20240	415	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2144	421	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
2145	511	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights, begin, length)
2145	511	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
2145	511	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
2145	511	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
2145	511	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
2146	512	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2147	514	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
20241	518	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20241	518	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20241	518	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
20242	525	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
20242	525	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
20242	525	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2148	529	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
734	188	8	Vector1D.java	normalize	s	double	0	MathArithmeticException	$ == 0
735	305	8	Vector1D.java	equals	THIS	Vector1D	0	RET	$ == other
735	305	8	Vector1D.java	equals	other	Object	0	RET	this == $
736	309	8	Vector1D.java	equals	other	Object	0	RET	$ instanceof Vector1D
737	311	12	Vector1D.java	equals	rhs	Vector1D	0	RET	$.isNaN()
738	329	8	Vector1D.java	hashCode	THIS	Vector1D	0	RET	$.isNaN()
730	115	8	Vector1DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
731	127	8	Vector1DFormat.java	parse	coordinates	double[]	0	RET	$ == null
793	80	8	Vector2D.java	Vector2D	THIS	Vector2D	0	DimensionMismatchException	v.$.length != 2
793	80	8	Vector2D.java	Vector2D	v	double[]	0	DimensionMismatchException	$.length != 2
794	226	8	Vector2D.java	normalize	s	double	0	MathArithmeticException	$ == 0
795	347	8	Vector2D.java	equals	THIS	Vector2D	0	RET	$ == other
795	347	8	Vector2D.java	equals	other	Object	0	RET	this == $
796	351	8	Vector2D.java	equals	other	Object	0	RET	$ instanceof Vector2D
797	353	12	Vector2D.java	equals	rhs	Vector2D	0	RET	$.isNaN()
798	371	8	Vector2D.java	hashCode	THIS	Vector2D	0	RET	$.isNaN()
748	118	8	Vector2DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
749	130	8	Vector2DFormat.java	parse	coordinates	double[]	0	RET	$ == null
705	108	8	Vector3D.java	Vector3D	THIS	Vector3D	0	DimensionMismatchException	v.$.length != 3
705	108	8	Vector3D.java	Vector3D	v	double[]	0	DimensionMismatchException	$.length != 3
706	298	8	Vector3D.java	normalize	s	double	0	MathArithmeticException	$ == 0
707	322	8	Vector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
708	326	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
708	326	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
708	326	8	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
708	326	8	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
709	329	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
709	329	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
709	329	15	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
709	329	15	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
710	352	8	Vector3D.java	angle	normProduct	double	0	MathArithmeticException	$ == 0
711	358	8	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
711	358	8	Vector3D.java	angle	dot	double	0	RET	$ > threshold
711	358	8	Vector3D.java	angle	threshold	double	0	RET	dot < -$
711	358	8	Vector3D.java	angle	threshold	double	0	RET	dot > $
712	361	12	Vector3D.java	angle	dot	double	0	RET	$ >= 0
713	414	8	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
713	414	8	Vector3D.java	equals	other	Object	0	RET	this == $
714	418	8	Vector3D.java	equals	other	Object	0	RET	$ instanceof Vector3D
715	420	12	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
716	438	8	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
658	130	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
659	147	8	Vector3DFormat.java	parse	coordinates	double[]	0	RET	$ == null
19047	202	8	VectorFormat.java	format	THIS	VectorFormat	0	NIL-FOR	i < coordinates.$.length
19047	202	8	VectorFormat.java	format	i	int	0	NIL-FOR	$ < coordinates.length
19047	202	8	VectorFormat.java	format	coordinates	double	0	NIL-FOR	i < $.length
648	203	12	VectorFormat.java	format	i	int	0	DEF	$ > 0
649	247	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
649	247	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
649	247	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
19048	251	8	VectorFormat.java	parseCoordinates	i	int	0	NIL-FOR	$ < dimension
19048	251	8	VectorFormat.java	parseCoordinates	dimension	int	0	NIL-FOR	i < $
650	257	12	VectorFormat.java	parseCoordinates	i	int	0	RET	$ > 0
651	258	16	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
651	258	16	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
651	258	16	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
652	268	12	VectorFormat.java	parseCoordinates	c	Number	0	RET	$ == null
653	282	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
653	282	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
653	282	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
2159	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
2159	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
20247	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
20247	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
20247	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
20248	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
20248	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
2160	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
20249	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
20249	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
20250	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
20250	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
2161	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
2161	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
2162	139	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
2163	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
2163	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
2164	146	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
2164	146	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
2165	149	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
2165	149	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
2166	152	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
2166	152	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
20253	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
20253	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
2181	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
2181	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
20254	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
20254	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
20254	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
20255	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
20255	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
20255	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
2182	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
2182	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
2183	96	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
2184	100	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
2184	100	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
1008	114	8	WeibullDistribution.java	WeibullDistribution	alpha	double	0	NotStrictlyPositiveException	$ <= 0
1009	118	8	WeibullDistribution.java	WeibullDistribution	beta	double	0	NotStrictlyPositiveException	$ <= 0
1010	147	8	WeibullDistribution.java	density	x	double	0	RET	$ < 0
1011	167	8	WeibullDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
1012	184	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
1012	184	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
1013	186	15	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1014	188	16	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
1015	215	8	WeibullDistribution.java	getNumericalMean	THIS	WeibullDistribution	0	DEF	$.numericalMeanIsCalculated
1016	241	8	WeibullDistribution.java	getNumericalVariance	THIS	WeibullDistribution	0	DEF	$.numericalVarianceIsCalculated
20226	44	8	Weight.java	Weight	i	int	0	NIL-FOR	$ < dim
20226	44	8	Weight.java	Weight	dim	int	0	NIL-FOR	i < $
2109	55	8	Weight.java	Weight	weight	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
2265	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2265	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2266	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	y.$.length == 0
2266	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	x.$.length == 0
2266	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2266	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
2267	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	DimensionMismatchException	y.$.length != x.$.length
2267	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	DimensionMismatchException	y.length != $.length
2267	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	DimensionMismatchException	$.length != x.length
20266	102	8	WilcoxonSignedRankTest.java	calculateDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < x.$.length
20266	102	8	WilcoxonSignedRankTest.java	calculateDifferences	i	int	0	NIL-FOR	$ < x.length
20266	102	8	WilcoxonSignedRankTest.java	calculateDifferences	x	double[]	0	NIL-FOR	i < $.length
2268	120	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NullArgumentException	$ == null
2269	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NoDataException	z.$.length == 0
2269	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NoDataException	$.length == 0
20267	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
20267	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	i	int	0	NIL-FOR	$ < z.length
20267	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NIL-FOR	i < $.length
20268	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
20268	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	NIL-FOR	$ < z.length
20268	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	NIL-FOR	i < $.length
2270	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	DEF	z[$] > 0
2270	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	DEF	$[i] > 0
20269	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	NIL-FOR	$ < m
20269	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	m	int	0	NIL-FOR	i < $
20270	219	12	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	NIL-FOR	$ < N
2271	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	DEF	((i >> $) & 1) == 1
2271	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	DEF	(($ >> j) & 1) == 1
2272	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	rankSum	int	0	DEF	$ >= Wmax
2272	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	Wmax	double	0	DEF	rankSum >= $
2273	314	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	0	NumberIsTooLargeException	$
2274	318	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	1	RET	$
1158	77	8	ZipfDistribution.java	ZipfDistribution	numberOfElements	int	0	NotStrictlyPositiveException	$ <= 0
1159	81	8	ZipfDistribution.java	ZipfDistribution	exponent	double	0	NotStrictlyPositiveException	$ <= 0
1160	110	8	ZipfDistribution.java	probability	THIS	ZipfDistribution	0	RET	x > $.numberOfElements
1160	110	8	ZipfDistribution.java	probability	x	int	0	RET	$ <= 0
1160	110	8	ZipfDistribution.java	probability	x	int	0	RET	$ > numberOfElements
1161	119	8	ZipfDistribution.java	cumulativeProbability	x	int	1	RET	$ <= 0
1162	121	15	ZipfDistribution.java	cumulativeProbability	THIS	ZipfDistribution	0	RET	x >= $.numberOfElements
1162	121	15	ZipfDistribution.java	cumulativeProbability	x	int	0	RET	$ >= numberOfElements
1163	139	8	ZipfDistribution.java	getNumericalMean	THIS	ZipfDistribution	0	DEF	$.numericalMeanIsCalculated
1164	173	8	ZipfDistribution.java	getNumericalVariance	THIS	ZipfDistribution	0	DEF	$.numericalVarianceIsCalculated
19112	207	8	ZipfDistribution.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
