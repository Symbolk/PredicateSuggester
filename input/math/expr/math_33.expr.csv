id	line	column	filename	methodname	varname	vartype	else	return	right
527	62	8	AVLTree.java	insert	element	T	0	DEF	$ != null
528	63	12	AVLTree.java	insert	THIS	AVLTree	1	DEF	$.top == null
529	82	8	AVLTree.java	delete	element	T	0	RET	$ != null
28305	83	12	AVLTree.java	delete	node	Node	0	NIL-FOR	$ != null
530	86	16	AVLTree.java	delete	THIS	AVLTree	1	RET	node.$.element == element
530	86	16	AVLTree.java	delete	node	Node	1	RET	$.element == element
530	86	16	AVLTree.java	delete	element	T	1	RET	node.element == $
531	89	23	AVLTree.java	delete	THIS	AVLTree	0	RET	node.$.element.compareTo(element) > 0
531	89	23	AVLTree.java	delete	node	Node	0	RET	$.element.compareTo(element) > 0
531	89	23	AVLTree.java	delete	element	T	0	RET	node.element.compareTo($) > 0
28306	153	8	AVLTree.java	getNotSmaller	node	Node	0	NIL-FOR	$ != null
532	154	12	AVLTree.java	getNotSmaller	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) < 0
532	154	12	AVLTree.java	getNotSmaller	node	Node	1	RET	$.element.compareTo(reference) < 0
532	154	12	AVLTree.java	getNotSmaller	reference	T	1	RET	node.element.compareTo($) < 0
533	155	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.right == null
533	155	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.right == null
534	161	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.left == null
534	161	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.left == null
28307	184	8	AVLTree.java	getNotLarger	node	Node	0	NIL-FOR	$ != null
535	185	12	AVLTree.java	getNotLarger	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) > 0
535	185	12	AVLTree.java	getNotLarger	node	Node	1	RET	$.element.compareTo(reference) > 0
535	185	12	AVLTree.java	getNotLarger	reference	T	1	RET	node.element.compareTo($) > 0
536	186	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.left == null
536	186	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.left == null
537	192	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.right == null
537	192	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.right == null
1271	76	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ <= 0
1272	80	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ <= 0
1273	97	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NullArgumentException	$ == null
1274	100	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1274	100	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$.length == 0
1275	103	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d[0].length == 0
1275	103	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$[0].length == 0
1276	118	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1276	118	8	AbstractFieldMatrix.java	extractField	d	T[]	0	NoDataException	$.length == 0
1277	139	8	AbstractFieldMatrix.java	buildArray	columns	int	0	RET	$ < 0
28694	145	8	AbstractFieldMatrix.java	buildArray	THIS	AbstractFieldMatrix	0	NIL-FOR	i < array.$.length
28694	145	8	AbstractFieldMatrix.java	buildArray	i	int	0	NIL-FOR	$ < array.length
28694	145	8	AbstractFieldMatrix.java	buildArray	array	T[][]	0	NIL-FOR	i < $.length
28695	187	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
28695	187	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
28696	188	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
28696	188	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
28697	204	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
28697	204	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
28698	205	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
28698	205	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
28699	219	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
28699	219	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
28700	220	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
28700	220	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
28701	233	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
28701	233	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
28702	234	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
28702	234	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
28703	251	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
28703	251	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
28704	252	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
28704	252	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
28705	254	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
28705	254	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1278	271	8	AbstractFieldMatrix.java	power	p	int	0	IllegalArgumentException	$ < 0
1279	275	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NonSquareMatrixException	$.isSquare()
1280	279	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 0
1281	283	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 1
28706	300	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
28706	300	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
28706	300	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1282	301	12	AbstractFieldMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1282	301	12	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
28707	312	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
28707	312	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
28707	312	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
28708	331	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
28708	331	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
28708	331	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
28709	333	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
28709	333	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
28709	333	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
28710	348	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
28710	348	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
28711	349	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
28711	349	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1283	390	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1283	390	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1283	390	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1283	390	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1283	390	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1283	390	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1284	429	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1284	429	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1284	429	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1284	429	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1284	429	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
1284	429	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
28712	438	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
28712	438	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
28712	438	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
28713	440	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
28713	440	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
28713	440	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1285	449	8	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	NullArgumentException	$ == null
1286	453	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1287	458	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
28714	462	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
28714	462	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1288	463	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1288	463	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1288	463	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1288	463	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[r].length != nCols
28715	473	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
28715	473	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
28716	474	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
28716	474	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
28717	485	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
28717	485	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1289	497	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1289	497	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1289	497	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
28718	503	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
28718	503	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
28719	515	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
28719	515	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1290	527	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1290	527	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1290	527	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
28720	533	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
28720	533	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1291	548	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1291	548	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nCols
28721	552	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
28721	552	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1292	567	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1292	567	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nRows
28722	571	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
28722	571	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
28723	582	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
28723	582	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1293	594	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1293	594	8	AbstractFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1293	594	8	AbstractFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
28724	597	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
28724	597	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
28725	608	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
28725	608	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1294	620	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1294	620	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1294	620	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
28726	623	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
28726	623	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1295	671	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1295	671	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
28727	675	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
28727	675	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1296	686	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1296	686	8	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1296	686	8	AbstractFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
28728	691	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
28728	691	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
28729	693	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
28729	693	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1297	709	12	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1297	709	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nCols
28730	714	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
28730	714	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
28731	716	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
28731	716	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1298	731	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1298	731	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1298	731	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
28732	736	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
28732	736	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
28733	738	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
28733	738	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1299	754	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1299	754	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nRows
28734	759	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
28734	759	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
28735	761	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
28735	761	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
28736	776	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
28736	776	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
28737	777	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
28737	777	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
28738	791	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
28738	791	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
28739	792	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
28739	792	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
28740	806	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
28740	806	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
28741	807	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
28741	807	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
28742	823	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
28742	823	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
28743	824	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
28743	824	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
28744	836	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
28744	836	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
28745	837	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
28745	837	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
28746	851	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
28746	851	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
28747	852	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
28747	852	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
28748	866	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
28748	866	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
28749	867	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
28749	867	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
28750	883	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
28750	883	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
28751	884	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
28751	884	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
28752	928	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
28752	928	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1300	929	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
28753	933	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
28753	933	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1301	934	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
1302	956	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
1302	956	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
1303	959	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix<?> == false
1304	965	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getRowDimension() != nRows
1304	965	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getColumnDimension() != nCols
1304	965	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1304	965	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
28754	968	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
28754	968	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
28755	969	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
28755	969	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1305	970	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
1305	970	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
1305	970	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
1305	970	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
28756	990	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
28756	990	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
28757	991	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
28757	991	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1306	1005	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1306	1005	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1306	1005	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= getRowDimension()
1307	1018	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1307	1018	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1307	1018	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= getColumnDimension()
1308	1040	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1308	1040	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1309	1047	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1309	1047	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1310	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1310	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1311	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedRows.$.length == 0
1311	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedColumns.$.length == 0
1311	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1311	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1312	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1312	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1312	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1312	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1313	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1313	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1313	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1313	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1314	1119	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DimensionMismatchException	$.getColumnDimension() != m.getRowDimension()
1314	1119	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DimensionMismatchException	getColumnDimension() != $.getRowDimension()
901	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	NullArgumentException	$ == null
902	132	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	NullArgumentException	$ == null
903	162	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
903	162	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
28337	164	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
28337	164	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
28337	164	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
904	169	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
904	169	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
952	56	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	NumberIsTooLargeException	x1 < $
952	56	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	NumberIsTooLargeException	$ < x0
953	75	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
953	75	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
954	80	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
955	83	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	1	RET	$ == Integer.MIN_VALUE
956	84	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	THIS	AbstractIntegerDistribution	0	RET	$.checkedCumulativeProbability(lower) >= p
956	84	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	RET	checkedCumulativeProbability($) >= p
956	84	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	checkedCumulativeProbability(lower) >= $
957	93	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
958	103	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	0	DEF	$
959	106	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ > lower
959	106	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	DEF	tmp > $
960	111	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ < upper
960	111	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	upper	int	0	DEF	tmp < $
28339	132	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	NIL-WHILE	$ + 1 < upper
28339	132	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	NIL-WHILE	lower + 1 < $
961	134	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ > upper
961	134	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ < lower
961	134	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	DEF	xm < $
961	134	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	DEF	xm > $
962	144	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	pm	double	1	DEF	$ >= p
962	144	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	p	double	1	DEF	pm >= $
963	176	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
28340	181	8	AbstractIntegerDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
28340	181	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
964	202	8	AbstractIntegerDistribution.java	checkedCumulativeProbability	result	double	0	MathInternalError	Double.isNaN($)
2662	215	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y0.$.length != equations.getDimension()
2662	215	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y0.length != $.getDimension()
2662	215	8	AbstractIntegrator.java	integrate	y0	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
2663	218	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y.$.length != equations.getDimension()
2663	218	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y.length != $.getDimension()
2663	218	8	AbstractIntegrator.java	integrate	y	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
2664	297	12	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.statesInitialized
2665	316	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.state.evaluateStep(interpolator)
2665	316	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	state.evaluateStep($)
29813	322	12	AbstractIntegrator.java	acceptStep	occuringEvents	SortedSet<EventState>	0	NIL-WHILE	$.isEmpty()
2666	345	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	RET	$.isLastStep
2667	354	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	RET	$.reset(eventT, eventY)
2667	354	16	AbstractIntegrator.java	acceptStep	eventT	double	0	RET	currentEvent.reset($, eventY)
2667	354	16	AbstractIntegrator.java	acceptStep	eventY	double[]	0	RET	currentEvent.reset(eventT, $)
2668	372	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	DEF	$.evaluateStep(interpolator)
2668	372	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	currentEvent.evaluateStep($)
2669	407	8	AbstractIntegrator.java	sanityChecks	threshold	double	0	NumberIsTooSmallException	dt <= $
2669	407	8	AbstractIntegrator.java	sanityChecks	dt	double	0	NumberIsTooSmallException	$ <= threshold
1649	110	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	$.weightedResidualJacobian.$.length != $.rows
29177	116	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
29177	116	8	AbstractLeastSquaresOptimizer.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
29178	119	12	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
29178	119	12	AbstractLeastSquaresOptimizer.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1650	135	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	$.objective.$.length != $.rows
29179	143	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
29179	143	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
29180	209	8	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.cols
29180	209	8	AbstractLeastSquaresOptimizer.java	getCovariances	i	int	0	NIL-FOR	$ < cols
29181	210	12	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
29181	210	12	AbstractLeastSquaresOptimizer.java	getCovariances	j	int	0	NIL-FOR	$ < cols
29182	212	16	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	k < $.rows
29182	212	16	AbstractLeastSquaresOptimizer.java	getCovariances	k	int	0	NIL-FOR	$ < rows
1651	253	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NumberIsTooSmallException	$.rows <= $.cols
29183	260	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
29183	260	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
29183	260	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
1583	127	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxCountExceededException	++$.iterations > $.maxIterations
2274	116	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	NullArgumentException	$ == null
2275	119	8	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	data.$.length != nobs * (nvars + 1)
2275	119	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DimensionMismatchException	$.length != nobs * (nvars + 1)
2275	119	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DimensionMismatchException	data.length != $ * (nvars + 1)
2275	119	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DimensionMismatchException	data.length != nobs * ($ + 1)
2276	122	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NumberIsTooSmallException	$ <= nvars
2276	122	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NumberIsTooSmallException	nobs <= $
29574	129	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
29574	129	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
2277	131	12	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	$.noIntercept
29575	134	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < cols
29575	134	12	AbstractMultipleLinearRegression.java	newSampleData	cols	int	0	NIL-FOR	j < $
2278	150	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NullArgumentException	$ == null
2279	153	8	AbstractMultipleLinearRegression.java	newYSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	y.$.length == 0
2279	153	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NoDataException	$.length == 0
2280	185	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NullArgumentException	$ == null
2281	188	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2281	188	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NoDataException	$.length == 0
2282	191	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	$.noIntercept
29576	196	12	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NIL-FOR	i < x.$.length
29576	196	12	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	NIL-FOR	$ < x.length
29576	196	12	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NIL-FOR	i < $.length
2283	197	16	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x[i].length != nVars
2283	197	16	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	DimensionMismatchException	x[$].length != nVars
2283	197	16	AbstractMultipleLinearRegression.java	newXSampleData	nVars	int	0	DimensionMismatchException	x[i].length != $
2283	197	16	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DimensionMismatchException	$[i].length != nVars
2284	226	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NullArgumentException	$ == null
2284	226	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	NullArgumentException	$ == null
2285	229	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != y.$.length
2285	229	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DimensionMismatchException	$.length != y.length
2285	229	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DimensionMismatchException	x.length != $.length
2286	232	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2286	232	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NoDataException	$.length == 0
2287	235	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	MathIllegalArgumentException	x[0].length + 1 > x.$.length
2287	235	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	MathIllegalArgumentException	$[0].length + 1 > $.length
2288	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != covariance.$.length
2288	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DimensionMismatchException	$.length != covariance.length
2288	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DimensionMismatchException	x.length != $.length
2289	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length > 0
2289	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length != covariance[0].length
2289	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length > 0
2289	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length != $[0].length
29577	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
29577	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
2709	62	12	AbstractParameterizable.java	isSupported	THIS	AbstractParameterizable	0	RET	$.supportedName.equals(name)
2709	62	12	AbstractParameterizable.java	isSupported	name	String	0	RET	supportedName.equals($)
2710	76	8	AbstractParameterizable.java	complainIfNotSupported	THIS	AbstractParameterizable	0	MathIllegalArgumentException	$.isSupported(name)
2710	76	8	AbstractParameterizable.java	complainIfNotSupported	name	String	0	MathIllegalArgumentException	isSupported($)
29604	108	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
29604	108	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
29604	108	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
29605	110	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
2359	111	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
2360	115	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
2360	115	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
2360	115	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
2361	157	8	AbstractRandomGenerator.java	nextInt	n	int	0	NotStrictlyPositiveException	$ <= 0
2362	253	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
29606	261	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
2363	266	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
1074	62	8	AbstractRealDistribution.java	cumulativeProbability	x0	double	0	NumberIsTooLargeException	$ > x1
1074	62	8	AbstractRealDistribution.java	cumulativeProbability	x1	double	0	NumberIsTooLargeException	x0 > $
1075	107	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1075	107	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1076	112	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
1077	117	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
1078	127	8	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	DEF	$ == Double.NEGATIVE_INFINITY
1079	128	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
28355	132	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(lowerBound) >= p
28355	132	16	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	cumulativeProbability($) >= p
28355	132	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(lowerBound) >= $
1080	138	8	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	DEF	$ == Double.POSITIVE_INFINITY
1081	139	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
28356	143	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(upperBound) < p
28356	143	16	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	cumulativeProbability($) < p
28356	143	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(upperBound) < $
1082	161	8	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.isSupportConnected()
1083	164	12	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	x - dx >= $.getSupportLowerBound()
1083	164	12	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	x - $ >= getSupportLowerBound()
1083	164	12	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	$ - dx >= getSupportLowerBound()
1084	166	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.cumulativeProbability(x - dx) == px
1084	166	16	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	0	RET	cumulativeProbability(x - dx) == $
1084	166	16	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	cumulativeProbability(x - $) == px
1084	166	16	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	cumulativeProbability($ - dx) == px
28357	168	20	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	NIL-WHILE	upperBound - lowerBound > $
28357	168	20	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	upperBound - $ > dx
28357	168	20	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	$ - lowerBound > dx
1085	170	24	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	1	DEF	$.cumulativeProbability(midPoint) < px
1085	170	24	AbstractRealDistribution.java	inverseCumulativeProbability	midPoint	double	1	DEF	cumulativeProbability($) < px
1085	170	24	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	1	DEF	cumulativeProbability(midPoint) < $
1086	218	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
28358	223	8	AbstractRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
28358	223	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1174	54	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ < 1
1175	57	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ < 1
28535	76	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
28535	76	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
28536	77	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
28536	77	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
28537	93	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
28537	93	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
28538	94	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
28538	94	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
28539	107	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
28539	107	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
28540	108	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
28540	108	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
28541	121	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
28541	121	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
28542	122	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
28542	122	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
28543	139	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
28543	139	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
28544	140	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
28544	140	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
28545	142	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
28545	142	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1176	159	8	AbstractRealMatrix.java	power	p	int	0	IllegalArgumentException	$ < 0
1177	163	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NonSquareMatrixException	$.isSquare()
1178	167	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 0
1179	171	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 1
28546	188	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
28546	188	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
28546	188	8	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1180	189	12	AbstractRealMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1180	189	12	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
1181	194	16	AbstractRealMatrix.java	power	maxI	int	0	DEF	$ == -1
28547	203	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ <= maxI
28547	203	8	AbstractRealMatrix.java	power	maxI	int	0	NIL-FOR	i <= $
28548	220	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
28548	220	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
28548	220	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
28549	222	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
28549	222	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
28549	222	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
28550	301	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
28550	301	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
28551	302	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
28551	302	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1182	339	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1182	339	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1182	339	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1182	339	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1182	339	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1182	339	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1183	375	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1183	375	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1183	375	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1183	375	8	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1183	375	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
1183	375	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
28552	382	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
28552	382	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
28552	382	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
28553	384	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
28553	384	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
28553	384	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1184	395	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1185	400	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
28554	404	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
28554	404	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1186	405	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1186	405	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1186	405	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1186	405	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[r].length != nCols
28555	415	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
28555	415	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
28556	416	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
28556	416	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
28557	427	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
28557	427	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1187	438	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1187	438	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1187	438	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
28558	444	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
28558	444	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
28559	454	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
28559	454	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1188	465	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1188	465	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1188	465	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
28560	471	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
28560	471	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1189	485	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1189	485	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nCols
28561	489	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
28561	489	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1190	503	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1190	503	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nRows
28562	507	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
28562	507	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
28563	517	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
28563	517	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1191	528	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1191	528	8	AbstractRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1191	528	8	AbstractRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
28564	531	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
28564	531	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
28565	541	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
28565	541	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1192	552	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1192	552	8	AbstractRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1192	552	8	AbstractRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
28566	555	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
28566	555	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1193	623	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1193	623	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
28567	627	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
28567	627	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1194	637	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1194	637	8	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1194	637	8	AbstractRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
28568	642	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
28568	642	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
28569	644	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
28569	644	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1195	661	12	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1195	661	12	AbstractRealMatrix.java	operate	v	RealVector	0	DimensionMismatchException	$.getDimension() != nCols
28570	666	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
28570	666	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
28571	668	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
28571	668	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1196	683	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1196	683	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1196	683	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
28572	688	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
28572	688	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
28573	690	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
28573	690	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1197	707	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1197	707	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DimensionMismatchException	$.getDimension() != nRows
28574	712	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
28574	712	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
28575	714	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
28575	714	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
28576	729	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
28576	729	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
28577	730	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
28577	730	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
28578	744	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
28578	744	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
28579	745	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
28579	745	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
28580	759	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
28580	759	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
28581	760	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
28581	760	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
28582	776	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
28582	776	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
28583	777	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
28583	777	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
28584	789	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
28584	789	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
28585	790	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
28585	790	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
28586	804	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
28586	804	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
28587	805	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
28587	805	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
28588	819	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
28588	819	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
28589	820	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
28589	820	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
28590	836	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
28590	836	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
28591	837	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
28591	837	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
28592	881	8	AbstractRealMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
28592	881	8	AbstractRealMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1198	882	12	AbstractRealMatrix.java	toString	i	int	0	DEF	$ > 0
28593	886	12	AbstractRealMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
28593	886	12	AbstractRealMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1199	887	16	AbstractRealMatrix.java	toString	j	int	0	DEF	$ > 0
1200	909	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
1200	909	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
1201	912	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
1202	918	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
1202	918	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
1202	918	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1202	918	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
28594	921	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
28594	921	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
28595	922	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
28595	922	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1203	923	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
1203	923	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
1203	923	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
1203	923	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
28596	943	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
28596	943	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
28597	944	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
28597	944	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
565	90	8	AbstractRegion.java	AbstractRegion	boundary	Collection<SubHyperplane<S>>	1	DEF	$.size() == 0
566	141	8	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	1	DEF	hyperplanes.$.length == 0
566	141	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$ == null
566	141	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$.length == 0
567	152	16	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	0	DEF	node.insertCut($.hyperplane)
567	152	16	AbstractRegion.java	AbstractRegion	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
28314	179	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
28314	179	8	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	NIL-WHILE	$ == null
568	181	12	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	DEF	node.insertCut($.copySelf())
568	181	12	AbstractRegion.java	insertCuts	node	BSPTree<S>	0	DEF	$.insertCut(inserted.copySelf())
569	186	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	RET	$.hasNext()
28315	193	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
570	235	8	AbstractRegion.java	isEmpty	node	BSPTree<S>	0	RET	$.getCut() == null
571	264	8	AbstractRegion.java	checkPoint	cell	BSPTree<S>	0	RET	$.getCut() == null
572	278	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getCut() != null
572	278	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getAttribute() == null
572	278	8	AbstractRegion.java	getTree	includeBoundaryAttributes	boolean	0	DEF	$
573	289	8	AbstractRegion.java	recurseBuildBoundary	node	BSPTree<S>	0	DEF	$.getCut() != null
574	299	12	AbstractRegion.java	recurseBuildBoundary	plusChar	Characterization<S>	0	DEF	$.hasOut()
575	306	16	AbstractRegion.java	recurseBuildBoundary	minusChar	Characterization<S>	0	DEF	$.hasIn()
576	311	12	AbstractRegion.java	recurseBuildBoundary	plusChar	Characterization<S>	0	DEF	$.hasIn()
577	318	16	AbstractRegion.java	recurseBuildBoundary	minusChar	Characterization<S>	0	DEF	$.hasOut()
578	345	8	AbstractRegion.java	characterize	node	BSPTree<S>	1	DEF	$.getCut() == null
579	379	8	AbstractRegion.java	getSize	THIS	AbstractRegion	0	DEF	$.barycenter == null
580	394	8	AbstractRegion.java	getBarycenter	THIS	AbstractRegion	0	DEF	$.barycenter == null
581	438	8	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	RET	$.getCut() == null
582	439	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getAttribute()
583	451	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
583	451	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
583	451	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
584	452	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
584	452	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
585	456	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
585	456	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
586	460	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
586	460	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
587	466	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
587	466	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
587	466	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
588	467	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
588	467	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
589	471	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
589	471	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
590	475	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
590	475	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
591	487	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
591	487	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
592	493	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())
592	493	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().getHyperplane().sameOrientationAs($.getHyperplane())
593	494	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
593	494	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
594	497	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
594	497	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
595	501	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
595	501	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
596	504	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
596	504	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
597	569	8	AbstractRegion.java	recurseIntersection	node	BSPTree<S>	0	RET	$.getCut() == null
598	583	12	AbstractRegion.java	recurseIntersection	plus	SubHyperplane<S>	1	RET	$ == null
599	585	19	AbstractRegion.java	recurseIntersection	minus	SubHyperplane<S>	1	RET	$ == null
600	619	8	AbstractRegion.java	recurseTransform	node	BSPTree<S>	0	RET	$.getCut() == null
601	626	8	AbstractRegion.java	recurseTransform	attribute	BoundaryAttribute<S>	0	DEF	$ != null
1662	97	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
1663	100	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
1663	100	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
29198	108	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
29198	108	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
29199	110	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
29199	110	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
1664	111	16	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
1664	111	16	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
1665	132	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
1665	132	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
29200	144	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
29200	144	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
29200	144	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
1666	148	12	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
1666	148	12	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
29201	151	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
29201	151	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
29202	154	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
29202	154	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1667	155	20	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
1667	155	20	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
1667	155	20	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
1668	160	16	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
1669	167	12	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
29203	169	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
29203	169	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1670	216	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
1670	216	8	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
29204	225	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
29204	225	8	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
29205	228	12	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
29205	228	12	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
29206	246	8	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
29206	246	8	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
1671	249	12	AbstractSimplex.java	evaluate	vertex	PointValuePair	0	DEF	Double.isNaN($.getValue())
29207	267	8	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
29207	267	8	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
1672	268	12	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
1672	268	12	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
1672	268	12	AbstractSimplex.java	replaceWorstPoint	pointValuePair	PointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
1672	268	12	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<PointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
1673	295	8	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1673	295	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1673	295	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
1674	310	8	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1674	310	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1674	310	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
1675	324	8	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
1675	324	8	AbstractSimplex.java	setPoints	points	PointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
29208	340	8	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
29208	340	8	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
2526	180	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState == null
2526	180	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState == null
29679	193	6	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.interpolatedSecondaryState.$.length
29679	193	6	AbstractStepInterpolator.java	AbstractStepInterpolator	i	int	0	NIL-FOR	$ < interpolatedSecondaryState.length
2527	212	6	AbstractStepInterpolator.java	allocateInterpolatedArrays	dimension	int	1	DEF	$ < 0
2528	224	10	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	1	DEF	$.secondaryMappers == null
29680	230	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
29680	230	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	i	int	0	NIL-FOR	$ < secondaryMappers.length
2529	402	6	AbstractStepInterpolator.java	evaluateCompleteInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
2530	482	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
2531	512	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
2532	529	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
29681	530	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
29681	530	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
29682	568	4	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
29682	568	4	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < secondaryMappers.length
2533	573	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
29683	577	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
29683	577	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
1940	59	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	NullArgumentException	$ == null
1941	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1941	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1941	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
1941	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
1942	127	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	NullArgumentException	$ == null
1943	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1943	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
1943	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
1943	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
29416	148	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
29416	148	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
1944	163	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
1944	163	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
1945	166	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
627	126	8	AbstractSubHyperplane.java	recurseTransform	node	BSPTree<T>	0	RET	$.getCut() == null
628	133	8	AbstractSubHyperplane.java	recurseTransform	attribute	BoundaryAttribute<T>	0	DEF	$ != null
2065	163	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
2066	167	8	AbstractUnivariateStatistic.java	test	begin	int	0	NotPositiveException	$ < 0
2067	171	8	AbstractUnivariateStatistic.java	test	length	int	0	NotPositiveException	$ < 0
2068	175	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
2068	175	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
2068	175	8	AbstractUnivariateStatistic.java	test	begin	int	0	NumberIsTooLargeException	$ + length > values.length
2068	175	8	AbstractUnivariateStatistic.java	test	length	int	0	NumberIsTooLargeException	begin + $ > values.length
2069	180	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
2069	180	8	AbstractUnivariateStatistic.java	test	allowEmpty	boolean	0	RET	$
2070	258	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	NullArgumentException	$ == null
2071	262	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DimensionMismatchException	weights.$.length != values.$.length
2071	262	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DimensionMismatchException	weights.length != $.length
2071	262	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DimensionMismatchException	$.length != values.length
29447	267	8	AbstractUnivariateStatistic.java	test	i	int	0	NIL-FOR	$ < begin + length
29447	267	8	AbstractUnivariateStatistic.java	test	begin	int	0	NIL-FOR	i < $ + length
29447	267	8	AbstractUnivariateStatistic.java	test	length	int	0	NIL-FOR	i < begin + $
2072	268	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isNaN(weights[$])
2072	268	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isNaN($[i])
2073	271	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isInfinite(weights[$])
2073	271	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
2074	274	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	weights[$] < 0
2074	274	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	$[i] < 0
2075	277	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] > 0.0
2075	277	12	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
2075	277	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] > 0.0
2076	282	8	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	MathIllegalArgumentException	$
29595	111	8	AbstractWell.java	AbstractWell	j	int	0	NIL-FOR	$ < r
29595	111	8	AbstractWell.java	AbstractWell	r	int	0	NIL-FOR	j < $
2351	154	8	AbstractWell.java	setSeed	seed	int[]	0	RET	$ == null
2352	161	8	AbstractWell.java	setSeed	THIS	AbstractWell	0	DEF	seed.$.length < $.v.$.length
2352	161	8	AbstractWell.java	setSeed	seed	int[]	0	DEF	$.length < v.length
29596	162	12	AbstractWell.java	setSeed	THIS	AbstractWell	0	NIL-FOR	i < $.v.$.length
29596	162	12	AbstractWell.java	setSeed	i	int	0	NIL-FOR	$ < v.length
29739	223	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-DOWHILE	$.isLastStep
29740	226	12	AdamsBashforthIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
29741	232	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.mainSetDimension
29741	232	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < mainSetDimension
2610	242	16	AdamsBashforthIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
29742	262	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
29742	262	12	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
29742	262	12	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2611	276	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.isLastStep
2612	281	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.resetOccurred
2613	297	16	AdamsBashforthIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
29735	240	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-DOWHILE	$.isLastStep
29736	243	12	AdamsMoultonIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
29737	256	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
29737	256	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
29737	256	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2606	265	16	AdamsMoultonIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
29738	279	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
29738	279	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
29738	279	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2607	294	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.isLastStep
2608	299	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.resetOccurred
2609	316	16	AdamsMoultonIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
29800	167	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
29801	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
29801	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
2660	193	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
29802	227	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
29802	227	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
29802	227	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
29803	232	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
29803	232	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
29803	232	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
29804	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < y.$.length
29804	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < y.length
29804	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	y	double[][]	0	NIL-FOR	i < $.length
29805	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < aI.$.length
29805	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < aI.length
29805	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	aI	double[]	0	NIL-FOR	j < $.length
29806	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < yI.$.length
29806	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < yI.length
29806	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	yI	double[]	0	NIL-FOR	j < $.length
29807	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
29807	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
29807	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
29808	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
29808	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
29808	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
2645	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
2645	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
2645	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
2645	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
2646	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance.$.length != $.mainSetDimension
2646	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance != null
2647	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance.$.length != $.mainSetDimension
2647	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance != null
2648	250	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
29788	260	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
29788	260	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
29788	260	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2649	269	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
29789	274	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
29789	274	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
29789	274	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
29790	281	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
29790	281	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
29790	281	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2650	295	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
2650	295	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
2651	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
2651	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
2652	301	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
2653	322	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	NumberIsTooSmallException	FastMath.abs(h) < $.minStep
2653	322	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	NumberIsTooSmallException	FastMath.abs($) < minStep
2654	323	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
2655	331	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
2655	331	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
2656	333	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
2656	333	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
2079	302	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
2080	306	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
29448	316	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
2081	318	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
2081	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
2081	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
2082	321	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
2082	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
2082	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
2083	333	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
2084	335	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
2493	43	8	ArgUtils.java	flatten	array	Object[]	0	DEF	$ != null
2494	45	16	ArgUtils.java	flatten	THIS	ArgUtils	1	DEF	$.o instanceof Object[]
11	61	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
11	61	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
12	109	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	$ == k
12	109	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	n == $
12	109	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
13	112	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
13	112	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
13	112	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
14	116	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
14	116	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
15	126	8	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
28230	129	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
28230	129	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
16	133	15	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
28231	137	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
28231	137	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
28232	153	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
28232	153	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
17	187	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
17	187	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
17	187	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
18	190	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
18	190	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
18	190	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
19	193	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
19	193	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
20	196	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
28233	201	8	ArithmeticUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
28233	201	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
21	229	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
21	229	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
21	229	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
22	232	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
22	232	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
22	232	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
23	240	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
24	248	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
25	252	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
25	252	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
28234	262	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
28234	262	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
28235	267	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
28235	267	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
26	299	8	ArithmeticUtils.java	factorial	n	int	0	NotPositiveException	$ < 0
27	303	8	ArithmeticUtils.java	factorial	n	int	0	MathArithmeticException	$ > 20
28	323	8	ArithmeticUtils.java	factorialDouble	n	int	0	NotPositiveException	$ < 0
29	327	8	ArithmeticUtils.java	factorialDouble	n	int	0	RET	$ < 21
30	341	8	ArithmeticUtils.java	factorialLog	n	int	0	NotPositiveException	$ < 0
31	345	8	ArithmeticUtils.java	factorialLog	n	int	0	RET	$ < 21
28236	349	8	ArithmeticUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
28236	349	8	ArithmeticUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
32	387	8	ArithmeticUtils.java	gcd	u	int	0	MathArithmeticException:RET	$ == 0
32	387	8	ArithmeticUtils.java	gcd	v	int	0	MathArithmeticException:RET	$ == 0
33	388	12	ArithmeticUtils.java	gcd	u	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
33	388	12	ArithmeticUtils.java	gcd	v	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
34	399	8	ArithmeticUtils.java	gcd	u	int	0	DEF	$ > 0
35	402	8	ArithmeticUtils.java	gcd	v	int	0	DEF	$ > 0
28237	407	8	ArithmeticUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
28237	407	8	ArithmeticUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
28237	407	8	ArithmeticUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
36	413	8	ArithmeticUtils.java	gcd	k	int	0	MathArithmeticException	$ == 31
28238	422	8	ArithmeticUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
28239	425	12	ArithmeticUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
37	429	12	ArithmeticUtils.java	gcd	t	int	1	DEF	$ > 0
38	474	8	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException:RET	$ == 0
38	474	8	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException:RET	$ == 0
39	475	12	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException	$ == Long.MIN_VALUE
39	475	12	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException	$ == Long.MIN_VALUE
40	486	8	ArithmeticUtils.java	gcd	u	long	0	DEF	$ > 0
41	489	8	ArithmeticUtils.java	gcd	v	long	0	DEF	$ > 0
28240	494	8	ArithmeticUtils.java	gcd	u	long	0	NIL-WHILE	($ & 1) == 0
28240	494	8	ArithmeticUtils.java	gcd	v	long	0	NIL-WHILE	($ & 1) == 0
28240	494	8	ArithmeticUtils.java	gcd	k	int	0	NIL-WHILE	$ < 63
42	500	8	ArithmeticUtils.java	gcd	k	int	0	MathArithmeticException	$ == 63
28241	509	8	ArithmeticUtils.java	gcd	t	long	0	NIL-DOWHILE	$ != 0
28242	512	12	ArithmeticUtils.java	gcd	t	long	0	NIL-WHILE	($ & 1) == 0
43	516	12	ArithmeticUtils.java	gcd	t	long	1	DEF	$ > 0
44	552	8	ArithmeticUtils.java	lcm	a	int	0	RET	$ == 0
44	552	8	ArithmeticUtils.java	lcm	b	int	0	RET	$ == 0
45	556	8	ArithmeticUtils.java	lcm	lcm	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
46	586	8	ArithmeticUtils.java	lcm	a	long	0	RET	$ == 0
46	586	8	ArithmeticUtils.java	lcm	b	long	0	RET	$ == 0
47	590	8	ArithmeticUtils.java	lcm	lcm	long	0	MathArithmeticException	$ == Long.MIN_VALUE
48	609	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
48	609	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
49	627	8	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ > b
49	627	8	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a > $
50	631	12	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ < 0
51	632	16	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ < 0
52	634	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
52	634	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
53	639	23	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ > 0
54	641	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
54	641	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
55	651	19	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ > 0
56	656	16	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
56	656	16	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
57	681	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
57	681	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
58	699	8	ArithmeticUtils.java	subAndCheck	b	long	1	MathArithmeticException	$ == Long.MIN_VALUE
59	700	12	ArithmeticUtils.java	subAndCheck	a	long	1	DEF	$ < 0
60	721	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
28243	727	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
61	728	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
62	747	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
28244	753	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
63	754	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
64	773	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
28245	779	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
65	780	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
66	799	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
28246	805	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
67	806	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
68	825	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
69	841	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
28247	847	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
70	848	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
71	868	8	ArithmeticUtils.java	pow	e	BigInteger	0	NotPositiveException	$.compareTo(BigInteger.ZERO) < 0
28248	874	8	ArithmeticUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
72	875	12	ArithmeticUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
73	898	8	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ > b
73	898	8	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a > $
74	904	12	ArithmeticUtils.java	addAndCheck	a	long	1	MathArithmeticException	$ < 0
75	905	16	ArithmeticUtils.java	addAndCheck	b	long	1	MathArithmeticException	$ < 0
76	907	20	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
76	907	20	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
77	921	16	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
77	921	16	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
78	940	8	ArithmeticUtils.java	checkBinomial	n	int	0	NumberIsTooLargeException	$ < k
78	940	8	ArithmeticUtils.java	checkBinomial	k	int	0	NumberIsTooLargeException	n < $
79	944	8	ArithmeticUtils.java	checkBinomial	n	int	0	NotPositiveException	$ < 0
1254	151	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
1255	156	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NoDataException	$ == 0
1256	160	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
28657	163	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
28657	163	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
1257	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	d[r].length != nCols
1257	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1257	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1257	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DimensionMismatchException	$[r].length != nCols
28658	195	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
28658	195	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
28659	227	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
28659	227	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
28660	231	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
28660	231	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
28661	254	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
28661	254	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
28662	258	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
28662	258	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
28663	283	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
28663	283	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
28664	286	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
28664	286	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
28665	288	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
28665	288	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1258	318	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DimensionMismatchException	$.data == null
1259	319	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1260	322	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1261	326	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1262	331	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
28666	335	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
28666	335	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1263	336	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1263	336	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1263	336	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1263	336	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[i].length != nCols
1264	400	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1264	400	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1264	400	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
28667	404	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
28667	404	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
28668	407	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
28668	407	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1265	420	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1265	420	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1265	420	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
28669	425	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
28669	425	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
28670	427	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
28670	427	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
28671	442	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
28671	442	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
28672	444	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
28672	444	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
28673	457	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
28673	457	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
28674	459	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
28674	459	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
28675	474	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
28675	474	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
28676	476	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
28676	476	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
28677	491	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
28677	491	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
28678	493	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
28678	493	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
28679	506	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
28679	506	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
28680	507	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
28680	507	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
28681	521	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
28681	521	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
28682	522	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
28682	522	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
28683	537	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
28683	537	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
28684	538	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
28684	538	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
28685	554	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
28685	554	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
28686	555	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
28686	555	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
28687	571	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
28687	571	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1400	96	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
1401	99	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullArgumentException	$ == null
1402	103	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NoDataException	$ == 0
1403	107	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	NoDataException	$ == 0
28944	110	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
28944	110	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
1404	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	d[r].length != nCols
1404	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1404	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1404	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DimensionMismatchException	$[r].length != nCols
28945	129	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
28945	129	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
28946	162	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
28946	162	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
28947	166	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
28947	166	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
28948	189	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
28948	189	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
28949	193	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
28949	193	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
28950	223	8	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
28950	223	8	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
28951	226	12	Array2DRowRealMatrix.java	multiply	mRow	int	0	NIL-FOR	$ < nSum
28951	226	12	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	mRow < $
28952	230	12	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
28952	230	12	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
28953	233	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
28953	233	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1405	262	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DimensionMismatchException	$.data == null
1406	263	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1407	266	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1408	271	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1409	276	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
28954	280	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
28954	280	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1410	281	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1410	281	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1410	281	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1410	281	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[i].length != nCols
1411	337	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1411	337	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1411	337	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
28955	341	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
28955	341	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
28956	344	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
28956	344	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1412	357	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1412	357	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1412	357	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
28957	362	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
28957	362	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
28958	364	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
28958	364	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
28959	380	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
28959	380	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
28960	382	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
28960	382	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
28961	395	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
28961	395	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
28962	397	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
28962	397	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
28963	412	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
28963	412	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
28964	414	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
28964	414	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
28965	429	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
28965	429	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
28966	431	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
28966	431	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
28967	444	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
28967	444	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
28968	445	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
28968	445	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
28969	459	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
28969	459	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
28970	460	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
28970	460	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
28971	475	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
28971	475	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
28972	476	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
28972	476	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
28973	492	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
28973	492	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
28974	493	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
28974	493	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
28975	509	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
28975	509	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1494	98	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1495	118	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1496	147	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1497	150	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	d.$.length == 0
1497	150	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	ZeroException	$.length == 0
1498	173	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1499	191	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1500	194	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1500	194	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1500	194	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1500	194	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1501	214	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1502	217	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1502	217	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1502	217	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1502	217	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1503	232	8	ArrayFieldVector.java	ArrayFieldVector	v	FieldVector<T>	0	NullArgumentException	$ == null
29065	237	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29065	237	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
1504	249	8	ArrayFieldVector.java	ArrayFieldVector	v	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1505	265	8	ArrayFieldVector.java	ArrayFieldVector	v	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1506	281	8	ArrayFieldVector.java	ArrayFieldVector	v1	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1506	281	8	ArrayFieldVector.java	ArrayFieldVector	v2	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1507	300	8	ArrayFieldVector.java	ArrayFieldVector	v1	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1507	300	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	NullArgumentException	$ == null
1508	319	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	NullArgumentException	$ == null
1508	319	8	ArrayFieldVector.java	ArrayFieldVector	v2	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1509	345	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	NullArgumentException	$ == null
1509	345	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	NullArgumentException	$ == null
1510	349	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1510	349	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1510	349	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
1511	370	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1511	370	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1511	370	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
29066	407	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29066	407	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
29067	423	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29067	423	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
29068	436	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29068	436	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
29069	452	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29069	452	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
29070	461	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29070	461	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
29071	469	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29071	469	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
29072	478	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29072	478	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
29073	486	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29073	486	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
29074	495	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29074	495	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
29075	503	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29075	503	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
29076	512	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29076	512	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
29077	520	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29077	520	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
29078	530	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29078	530	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
29079	539	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29079	539	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
29080	552	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29080	552	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
29081	568	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29081	568	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
29082	581	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29082	581	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
29083	597	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29083	597	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
29084	624	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29084	624	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
29085	640	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29085	640	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
29086	668	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
29086	668	12	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
29087	669	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
29087	669	16	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
29088	687	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
29088	687	8	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
29089	688	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
29089	688	12	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
29090	758	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
29090	758	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
29090	758	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
1512	813	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DimensionMismatchException	$.data.$.length != n
1512	813	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1513	827	8	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
1513	827	8	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
1514	830	8	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
1515	837	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
1515	837	12	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
29091	841	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
29091	841	12	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1516	842	16	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
1516	842	16	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
1516	842	16	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
1517	874	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	OutOfRangeException	index >= $.getDimension()
1517	874	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1517	874	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1142	103	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1143	120	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1144	123	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1144	123	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NumberIsTooLargeException	$.length < pos + size
1144	123	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1144	123	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
28499	137	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
28499	137	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
28499	137	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
1145	153	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NullArgumentException	$ == null
1146	156	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1146	156	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NumberIsTooLargeException	$.length < pos + size
1146	156	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1146	156	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
28500	160	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
28500	160	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
28500	160	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
1147	172	8	ArrayRealVector.java	ArrayRealVector	v	RealVector	0	NullArgumentException	$ == null
28501	176	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28501	176	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
28502	223	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l2
28502	223	8	ArrayRealVector.java	ArrayRealVector	l2	int	0	NIL-FOR	i < $
28503	237	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l1
28503	237	8	ArrayRealVector.java	ArrayRealVector	l1	int	0	NIL-FOR	i < $
1148	291	8	ArrayRealVector.java	add	v	RealVector	1	RET	$ instanceof ArrayRealVector
28504	297	12	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < dim
28504	297	12	ArrayRealVector.java	add	dim	int	0	NIL-FOR	i < $
28505	306	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
28505	306	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
28505	306	12	ArrayRealVector.java	add	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1149	316	8	ArrayRealVector.java	subtract	v	RealVector	1	RET	$ instanceof ArrayRealVector
28506	322	12	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < dim
28506	322	12	ArrayRealVector.java	subtract	dim	int	0	NIL-FOR	i < $
28507	331	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
28507	331	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
28507	331	12	ArrayRealVector.java	subtract	e	Entry	0	NIL-WHILE	($ = it.next()) != null
28508	347	8	ArrayRealVector.java	mapToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28508	347	8	ArrayRealVector.java	mapToSelf	i	int	0	NIL-FOR	$ < data.length
28509	356	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28509	356	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
28510	365	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28510	365	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
28511	374	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28511	374	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
28512	383	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28512	383	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
1150	392	8	ArrayRealVector.java	ebeMultiply	v	RealVector	1	RET	$ instanceof ArrayRealVector
28513	398	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < dim
28513	398	12	ArrayRealVector.java	ebeMultiply	dim	int	0	NIL-FOR	i < $
28514	405	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28514	405	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
1151	415	8	ArrayRealVector.java	ebeDivide	v	RealVector	1	RET	$ instanceof ArrayRealVector
28515	421	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < dim
28515	421	12	ArrayRealVector.java	ebeDivide	dim	int	0	NIL-FOR	i < $
28516	428	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28516	428	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
1152	448	8	ArrayRealVector.java	dotProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
28517	452	12	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28517	452	12	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
28518	461	12	ArrayRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
28518	461	12	ArrayRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
28518	461	12	ArrayRealVector.java	dotProduct	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1153	501	8	ArrayRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
28519	505	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28519	505	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
28520	513	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28520	513	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
1154	524	8	ArrayRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof ArrayRealVector
28521	528	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28521	528	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
28522	536	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28522	536	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
1155	547	8	ArrayRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
28523	551	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28523	551	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
28524	559	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28524	559	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
1156	571	8	ArrayRealVector.java	unitVector	norm	double	0	MathArithmeticException	$ == 0
1157	581	8	ArrayRealVector.java	unitize	norm	double	0	MathArithmeticException	$ == 0
1158	596	8	ArrayRealVector.java	outerProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
28525	601	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
28525	601	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
28526	602	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
28526	602	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
28527	611	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
28527	611	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
28528	612	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
28528	612	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1159	693	8	ArrayRealVector.java	setSubVector	v	RealVector	1	DEF	$ instanceof ArrayRealVector
28529	697	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
28529	697	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
28529	697	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
1160	763	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DimensionMismatchException	$.data.$.length != n
1160	763	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1161	777	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
1162	793	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
1163	798	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
1164	822	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
1164	822	8	ArrayRealVector.java	equals	other	Object	0	RET	this == $
1165	826	8	ArrayRealVector.java	equals	other	Object	0	RET	$ instanceof RealVector
1165	826	8	ArrayRealVector.java	equals	other	Object	0	RET	$ == null
1166	831	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
1166	831	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
1167	835	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
28530	839	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
28530	839	8	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1168	840	12	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
1168	840	12	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
1168	840	12	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
1169	855	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
1170	870	8	ArrayRealVector.java	combineToSelf	y	RealVector	1	DEF	$ instanceof ArrayRealVector
28531	873	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
28531	873	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
28532	878	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
28532	878	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
29265	299	8	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
29265	299	8	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
1735	303	12	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= -$.initialTrustRegionRadius
1735	303	12	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= -initialTrustRegionRadius
1736	304	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= ZERO
1736	304	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= ZERO
1737	315	19	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(j) <= $.initialTrustRegionRadius
1737	315	19	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	upperDifference.getEntry($) <= initialTrustRegionRadius
1738	316	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.upperDifference.getEntry(j) <= ZERO
1738	316	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	upperDifference.getEntry($) <= ZERO
29266	410	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29266	410	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1739	447	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex != kbase
1739	447	12	BOBYQAOptimizer.java	bobyqb	kbase	int	0	DEF	trustRegionCenterInterpolationPointIndex != $
29267	449	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
29267	449	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
29268	450	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
29268	450	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1740	451	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
1740	451	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
1741	458	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() > npt
1741	458	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	getEvaluations() > $
29269	459	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29269	459	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29270	461	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
29270	461	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
29271	465	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29271	465	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1742	498	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
1742	498	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
1743	503	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
1743	503	16	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
1744	517	16	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
1744	517	16	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
1744	517	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
1744	517	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
29272	522	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
29272	522	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1745	524	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.lowerDifference.getEntry(j)
1745	524	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
1746	527	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.upperDifference.getEntry(j)
1746	527	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
1747	530	20	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
1747	530	20	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
29273	532	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29273	532	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1748	538	24	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
1748	538	24	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
1749	557	12	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
1749	557	12	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
29274	562	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29274	562	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29275	565	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29275	565	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
29276	571	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29276	571	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
29277	575	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
29277	575	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
29278	586	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
29278	586	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
29279	589	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29279	589	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29280	594	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
29280	594	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
29281	596	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29281	596	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29282	600	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29282	600	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29283	606	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29283	606	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
29284	609	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
29284	609	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
29285	621	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
29285	621	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
29286	623	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29286	623	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29287	627	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
29287	627	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
29288	636	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29288	636	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1750	645	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
29289	677	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29289	677	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
29290	688	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29290	688	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29291	692	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
29291	692	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
29292	702	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
29292	702	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
29293	704	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29293	704	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29294	708	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29294	708	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29295	715	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
29295	715	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
29296	720	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29296	720	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29297	725	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29297	725	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1751	744	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
1752	748	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
1752	748	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
1752	748	16	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
29298	749	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29298	749	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
29299	767	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29299	767	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1753	768	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
1753	768	20	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
29300	772	20	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
29300	772	20	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
29301	781	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
29301	781	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1754	790	20	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
1754	790	20	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
1754	790	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
29302	811	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29302	811	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1755	819	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.lowerDifference.getEntry(i)
1755	819	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
1756	822	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.upperDifference.getEntry(i)
1756	822	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
1757	829	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
1758	831	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
29303	842	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
29303	842	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
29304	844	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
29304	844	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1759	846	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
1759	846	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
29305	853	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29305	853	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1760	863	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
1760	863	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
1761	869	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
1762	870	16	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
1763	875	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
1764	878	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
1765	885	16	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
1765	885	16	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
1766	891	16	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
1766	891	16	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
29306	898	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29306	898	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29307	900	24	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
29307	900	24	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
29308	909	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
29308	909	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1767	918	24	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
1767	918	24	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
1767	918	24	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
1768	929	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
1768	929	20	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
29309	944	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29309	944	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
29310	946	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
29310	946	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
29311	951	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
29311	951	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
29312	953	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29312	953	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29313	962	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29313	962	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
29314	966	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29314	966	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29315	968	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
29315	968	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
29316	972	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
29316	972	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
29317	976	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29317	976	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
29318	980	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29318	980	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1769	986	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
1769	986	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
29319	990	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
29319	990	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
29320	995	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
29320	995	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1770	996	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
1770	996	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
29321	1003	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29321	1003	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29322	1005	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
29322	1005	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
29323	1009	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29323	1009	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1771	1019	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
29324	1020	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29324	1020	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29325	1024	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
29325	1024	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
29326	1026	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29326	1026	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29327	1029	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29327	1029	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29328	1033	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29328	1033	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29329	1035	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
29329	1035	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
29330	1043	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29330	1043	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
29331	1045	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29331	1045	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1772	1049	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
1772	1049	20	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
1773	1057	27	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
1773	1057	27	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
1774	1078	16	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
1774	1078	16	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
1775	1081	16	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
29332	1082	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
29332	1082	20	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
1776	1083	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
1776	1083	24	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
1777	1086	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
1777	1086	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
1778	1089	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
1778	1089	24	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
1779	1101	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
1780	1104	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
1780	1104	12	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
1780	1104	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
29333	1121	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
29333	1121	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
29334	1123	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
29334	1123	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1781	1128	16	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
1781	1128	16	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
1782	1140	12	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
1783	1142	16	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1784	1145	20	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
1784	1145	20	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
1785	1157	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1786	1160	12	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
1787	1163	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta, dnorm) > $
1787	1163	12	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($, dnorm) > rho
1787	1163	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta, $) > rho
1788	1172	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
1788	1172	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
1789	1175	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
1790	1177	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
1791	1191	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1792	1197	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
1792	1197	12	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= $
29335	1198	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
29335	1198	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1793	1206	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
1793	1206	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
1794	1209	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
1794	1209	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
29336	1272	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
29336	1272	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
29337	1275	8	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
29337	1275	8	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
29338	1277	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
29338	1277	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
29339	1286	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
29339	1286	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
29340	1289	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
29340	1289	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
29341	1291	12	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
29341	1291	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
29342	1295	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
29342	1295	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
29343	1311	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
29343	1311	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
1795	1312	12	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
1795	1312	12	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
29344	1317	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
29344	1317	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
29345	1330	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
29345	1330	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1796	1332	16	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
1797	1333	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1797	1333	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1797	1333	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1797	1333	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1798	1337	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1798	1337	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1798	1337	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1798	1337	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1799	1343	23	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
1800	1344	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1800	1344	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1800	1344	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1800	1344	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1801	1348	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1801	1348	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1801	1348	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1801	1348	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1802	1363	12	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
1802	1363	12	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
1803	1367	16	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
1803	1367	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
1804	1375	16	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
1804	1375	16	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
1805	1377	20	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
1805	1377	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
1806	1389	16	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
1806	1389	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
1807	1394	16	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
1808	1395	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
1809	1408	12	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
1809	1408	12	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
29346	1418	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
29346	1418	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1810	1423	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
1811	1426	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
29347	1441	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
29347	1441	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1812	1444	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.min($.trustRegionCenterOffset.getEntry(i) - $.lowerDifference.getEntry(i), glagValue) > ZERO
1812	1444	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.max($.trustRegionCenterOffset.getEntry(i) - $.upperDifference.getEntry(i), glagValue) < ZERO
1812	1444	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
1812	1444	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
1812	1444	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
1812	1444	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
1813	1451	12	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
1814	1457	12	BOBYQAOptimizer.java	altmov	tmp1	double	0	DEF	$ > ZERO
29348	1460	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
29348	1460	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1815	1461	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
1815	1461	20	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
1815	1461	20	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
1816	1463	24	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 <= $.lowerDifference.getEntry(i)
1816	1463	24	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= lowerDifference.getEntry(i)
1816	1463	24	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= lowerDifference.getEntry($)
1817	1468	31	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 >= $.upperDifference.getEntry(i)
1817	1468	31	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= upperDifference.getEntry(i)
1817	1468	31	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= upperDifference.getEntry($)
29349	1486	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
29349	1486	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1818	1488	16	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
1818	1488	16	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
1818	1488	16	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
1819	1493	23	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
1819	1493	23	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
1820	1495	23	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
29350	1509	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
29350	1509	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
29351	1511	16	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
29351	1511	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
1821	1516	12	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
1822	1519	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
1822	1519	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
1822	1519	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
1822	1519	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
29352	1522	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
29352	1522	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1823	1540	12	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
29353	1541	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
29353	1541	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1824	1551	8	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
1824	1551	8	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
29354	1552	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
29354	1552	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
29355	1598	8	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
29355	1598	8	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
29356	1600	12	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
29356	1600	12	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
29357	1603	12	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
29357	1603	12	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
29358	1607	8	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
29358	1607	8	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
29359	1610	8	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
29359	1610	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
29360	1612	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
29360	1612	12	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
29361	1624	8	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
29361	1624	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
1825	1631	12	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= 2 * n
1825	1631	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= 2 * $
1826	1632	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ >= 1
1826	1632	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= n
1826	1632	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= $
1827	1635	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfmm) == ZERO
1827	1635	20	BOBYQAOptimizer.java	prelim	nfmm	int	0	DEF	upperDifference.getEntry($) == ZERO
1828	1640	23	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	$ > n
1828	1640	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	nfm > $
1829	1643	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.lowerDifference.getEntry(nfxm) == ZERO
1829	1643	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	lowerDifference.getEntry($) == ZERO
1830	1647	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfxm) == ZERO
1830	1647	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	upperDifference.getEntry($) == ZERO
1831	1657	16	BOBYQAOptimizer.java	prelim	n	int	0	DEF	ipt > $
1831	1657	16	BOBYQAOptimizer.java	prelim	ipt	int	0	DEF	$ > n
29362	1672	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
29362	1672	12	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
1832	1676	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.lowerDifference.getEntry(j)
1832	1676	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == lowerDifference.getEntry($)
1832	1676	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == lowerDifference.getEntry(j)
1833	1679	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.upperDifference.getEntry(j)
1833	1679	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == upperDifference.getEntry($)
1833	1679	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == upperDifference.getEntry(j)
1834	1689	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
1835	1692	19	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex)
1835	1692	19	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
1836	1702	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= 2 * n + 1
1836	1702	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= 2 * $ + 1
1837	1703	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= n + 1
1837	1703	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ >= 2
1837	1703	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= $ + 1
1838	1706	20	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	npt < $ + n
1838	1706	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	npt < numEval + $
1838	1706	20	BOBYQAOptimizer.java	prelim	npt	int	0	DEF	$ < numEval + n
1839	1713	23	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
1839	1713	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
1840	1719	20	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
1840	1719	20	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
1841	1720	24	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry(nfm - n)
1841	1720	24	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fAtInterpolationPoints.getEntry($ - n)
1841	1720	24	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(nfm - n)
1841	1720	24	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fAtInterpolationPoints.getEntry(nfm - $)
1842	1723	28	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
1842	1723	28	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
29363	1850	8	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
29363	1850	8	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1843	1852	12	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) <= $.lowerDifference.getEntry(i)
1843	1852	12	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	trustRegionCenterOffset.getEntry($) <= lowerDifference.getEntry($)
1844	1853	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) >= ZERO
1844	1853	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) >= ZERO
1845	1856	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) >= $.upperDifference.getEntry(i)
1845	1856	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	trustRegionCenterOffset.getEntry($) >= upperDifference.getEntry($)
1846	1857	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) <= ZERO
1846	1857	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) <= ZERO
1847	1861	12	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
1847	1861	12	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
29364	1887	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
29364	1887	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1848	1888	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
1848	1888	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
1849	1890	23	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
1850	1899	12	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
1851	1902	12	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
1852	1906	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
1852	1906	12	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
1852	1906	12	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
29365	1922	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
29365	1922	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1853	1923	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1853	1923	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1854	1931	12	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
1855	1935	12	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
1856	1941	12	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
29366	1950	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
29366	1950	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1857	1951	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
1857	1951	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
1858	1953	20	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
1858	1953	20	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
1859	1958	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
1859	1958	20	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
1860	1968	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
1861	1971	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
1861	1971	16	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
1862	1973	20	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
29367	1979	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
29367	1979	16	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1863	1981	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1863	1981	20	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1864	1996	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
1865	1999	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
1865	1999	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
1866	2005	16	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
1867	2014	12	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
1867	2014	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
1868	2015	16	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
1868	2015	16	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
1869	2018	16	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
1869	2018	16	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
1870	2036	12	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
1870	2036	12	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
29368	2042	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
29368	2042	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1871	2043	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
1871	2043	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
1872	2065	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
1872	2065	12	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
29369	2069	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
29369	2069	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1873	2070	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
1873	2070	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
29370	2085	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
29370	2085	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1874	2086	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1874	2086	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1875	2089	20	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
1876	2093	27	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
1877	2106	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
1878	2108	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
1878	2108	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
1878	2108	24	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
1879	2117	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
1880	2119	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
1880	2119	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
1880	2119	24	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
29371	2137	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
29371	2137	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1881	2138	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1881	2138	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
29372	2153	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
29372	2153	12	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
1882	2158	16	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
1882	2158	16	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
1883	2162	23	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
1883	2162	23	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
1884	2171	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
1885	2174	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
1885	2174	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
1886	2182	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
29373	2192	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
29373	2192	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1887	2194	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1887	2194	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1888	2204	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
1888	2204	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
1888	2204	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
1889	2213	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
1889	2213	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
29374	2220	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
29374	2220	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1890	2226	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
1890	2226	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
1891	2229	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
1891	2229	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
29375	2246	12	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
29375	2246	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
29376	2248	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
29376	2248	16	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
1892	2249	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
1892	2249	20	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
29377	2257	12	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
29377	2257	12	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
1893	2258	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.modelSecondDerivativesParameters.getEntry(k) != ZERO
1893	2258	16	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	modelSecondDerivativesParameters.getEntry($) != ZERO
29378	2259	20	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
29378	2259	20	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1894	2264	12	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
1895	2267	12	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
1895	2267	12	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
29379	2270	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
29379	2270	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
29380	2311	8	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
29380	2311	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
29381	2312	12	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
29381	2312	12	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
29382	2321	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
29382	2321	8	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
1896	2323	12	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
1896	2323	12	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
29383	2331	16	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
29383	2331	16	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
29384	2343	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
29384	2343	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
29385	2355	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
29385	2355	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
29386	2362	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
29386	2362	8	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
29387	2367	12	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
29387	2367	12	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
1897	2370	16	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
1897	2370	16	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
1898	2391	8	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
1899	2396	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
1899	2396	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
1899	2396	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
1899	2396	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
29388	2409	8	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
29388	2409	8	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
1900	2413	8	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
1900	2413	8	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
604	149	8	BSPTree.java	insertCut	THIS	BSPTree	0	DEF	$.cut != null
605	155	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$.isEmpty()
606	180	8	BSPTree.java	copySelf	THIS	BSPTree	0	RET	$.cut == null
607	241	8	BSPTree.java	visit	THIS	BSPTree	1	DEF	$.cut == null
28316	292	8	BSPTree.java	fitToCell	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
28316	292	8	BSPTree.java	fitToCell	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
608	293	12	BSPTree.java	fitToCell	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
608	293	12	BSPTree.java	fitToCell	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
609	311	8	BSPTree.java	getCell	THIS	BSPTree	0	RET	$.cut == null
610	318	8	BSPTree.java	getCell	offset	double	1	RET	FastMath.abs($) < 1.0e-10
611	320	15	BSPTree.java	getCell	offset	double	1	RET	$ <= 0
612	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.cut == null
612	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute.equals($.minus.$.attribute)
612	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute != null
612	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.cut == null
612	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.cut != null
612	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute == null
612	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.attribute == null
613	384	8	BSPTree.java	merge	THIS	BSPTree	1	RET	$.cut == null
614	387	15	BSPTree.java	merge	THIS	BSPTree	1	RET	tree.$.cut == null
614	387	15	BSPTree.java	merge	tree	BSPTree<S>	1	RET	$.cut == null
615	393	12	BSPTree.java	merge	parentTree	BSPTree<S>	0	DEF	$ != null
616	395	16	BSPTree.java	merge	isPlusChild	boolean	1	DEF	$
617	406	12	BSPTree.java	merge	THIS	BSPTree	0	DEF	merged.$.cut != null
617	406	12	BSPTree.java	merge	merged	BSPTree<S>	0	DEF	$.cut != null
618	488	8	BSPTree.java	split	THIS	BSPTree	0	RET	$.cut == null
619	499	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
619	499	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
620	515	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
620	515	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
621	567	8	BSPTree.java	insertInTree	parentTree	BSPTree<S>	0	DEF	$ != null
622	568	12	BSPTree.java	insertInTree	isPlusChild	boolean	1	DEF	$
623	576	8	BSPTree.java	insertInTree	THIS	BSPTree	0	DEF	$.cut != null
28317	579	12	BSPTree.java	insertInTree	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
28317	579	12	BSPTree.java	insertInTree	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
624	586	16	BSPTree.java	insertInTree	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
624	586	16	BSPTree.java	insertInTree	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
625	613	8	BSPTree.java	chopOffMinus	THIS	BSPTree	0	DEF	$.cut != null
626	627	8	BSPTree.java	chopOffPlus	THIS	BSPTree	0	DEF	$.cut != null
1916	105	8	BaseAbstractMultivariateOptimizer.java	optimize	f	FUNC	0	NullArgumentException	$ == null
1917	108	8	BaseAbstractMultivariateOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
1918	111	8	BaseAbstractMultivariateOptimizer.java	optimize	startPoint	double[]	0	NullArgumentException	$ == null
1676	94	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lower	double[]	0	NumberIsTooSmallException	$ != null
1677	95	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	THIS	BaseAbstractMultivariateSimpleBoundsOptimizer	0	DimensionMismatchException	lower.$.length != dim
1677	95	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	DimensionMismatchException	lower.length != $
1677	95	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lower	double[]	0	DimensionMismatchException	$.length != dim
29209	98	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
29209	98	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1678	101	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	v	double	0	NumberIsTooSmallException	$ < lo
1678	101	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lo	double	0	NumberIsTooSmallException	v < $
1679	106	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	upper	double[]	0	NumberIsTooLargeException	$ != null
1680	107	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	THIS	BaseAbstractMultivariateSimpleBoundsOptimizer	0	DimensionMismatchException	upper.$.length != dim
1680	107	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	DimensionMismatchException	upper.length != $
1680	107	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	upper	double[]	0	DimensionMismatchException	$.length != dim
29210	110	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
29210	110	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1681	113	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	v	double	0	NumberIsTooLargeException	$ > hi
1681	113	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	hi	double	0	NumberIsTooLargeException	v > $
1682	120	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lower	double[]	1	DEF	$ == null
29211	122	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
29211	122	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1683	128	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	upper	double[]	1	DEF	$ == null
29212	130	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
29212	130	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1684	107	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	f	FUNC	0	NullArgumentException	$ == null
1685	110	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	t	double[]	0	NullArgumentException	$ == null
1686	113	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	w	double[]	0	NullArgumentException	$ == null
1687	116	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	startPoint	double[]	0	NullArgumentException	$ == null
1688	119	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	t.$.length != w.$.length
1688	119	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	t	double[]	0	DimensionMismatchException	$.length != w.length
1688	119	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	w	double[]	0	DimensionMismatchException	t.length != $.length
3289	120	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NotStrictlyPositiveException	$ <= 0
3290	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NumberIsTooSmallException	maximalIterationCount <= $
3290	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	maximalIterationCount	int	0	NumberIsTooSmallException	$ <= minimalIterationCount
1532	117	8	BaseAbstractUnivariateOptimizer.java	optimize	f	UnivariateFunction	0	NullArgumentException	$ == null
1533	120	8	BaseAbstractUnivariateOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
1524	73	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	optimizer	BaseMultivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1524	73	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1525	77	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1526	113	8	BaseMultivariateMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
29098	146	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
29098	146	8	BaseMultivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1527	162	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
1528	73	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	optimizer	BaseMultivariateVectorOptimizer<FUNC>	0	NullArgumentException	$ == null
1528	73	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1529	77	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1530	114	8	BaseMultivariateVectorMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateVectorMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
29099	147	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	NIL-FOR	i < $.starts
29099	147	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1531	166	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	DEF	$.optima[0] == null
3144	140	8	BaseSecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
3145	143	8	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
3146	168	12	BaseSecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
3147	173	12	BaseSecantSolver.java	doSolve	fx	double	1	DEF	f1 * $ < 0
3147	173	12	BaseSecantSolver.java	doSolve	f1	double	1	DEF	$ * fx < 0
3148	190	20	BaseSecantSolver.java	doSolve	x	double	0	ConvergenceException	$ == x1
3148	190	20	BaseSecantSolver.java	doSolve	x1	double	0	ConvergenceException	x == $
3149	206	12	BaseSecantSolver.java	doSolve	f1	double	0	MathInternalError:RET	FastMath.abs($) <= ftol
3149	206	12	BaseSecantSolver.java	doSolve	ftol	double	0	MathInternalError:RET	FastMath.abs(f1) <= $
3150	211	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
3151	216	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
3152	221	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ <= 0
3153	226	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ >= 0
3154	237	12	BaseSecantSolver.java	doSolve	x0	double	0	MathInternalError:RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
3154	237	12	BaseSecantSolver.java	doSolve	x1	double	0	MathInternalError:RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
3154	237	12	BaseSecantSolver.java	doSolve	atol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
3154	237	12	BaseSecantSolver.java	doSolve	rtol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
2477	120	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
2477	120	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
2477	120	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
2477	120	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
2477	120	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
2477	120	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
2477	120	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
2478	128	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
2478	128	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
2478	128	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
2479	195	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
2479	195	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
2479	195	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
2479	195	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
988	98	8	BetaDistribution.java	recomputeZ	THIS	BetaDistribution	0	DEF	Double.isNaN($.z)
989	117	8	BetaDistribution.java	density	x	double	1	RET	$ < 0
989	117	8	BetaDistribution.java	density	x	double	1	RET	$ > 1
990	119	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 0
991	120	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.alpha < 1
992	124	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 1
993	125	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.beta < 1
994	138	8	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ <= 0
995	140	15	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ >= 1
1315	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
1315	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
1316	90	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
28758	100	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
28758	100	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
28759	105	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
28759	105	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
1317	108	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
1317	108	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
1317	108	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
28760	109	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
28760	109	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
28761	111	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
28761	111	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
28762	116	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
28762	116	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
1318	122	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
1319	139	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
28763	144	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
28763	144	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
1320	146	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
1320	146	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
1321	147	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
1322	151	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1322	151	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
1323	171	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
28764	181	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
28764	181	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
28765	186	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
28765	186	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
1324	189	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
1324	189	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
28766	190	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
28766	190	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
28767	192	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
28767	192	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
28768	197	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
28768	197	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
1325	203	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
28769	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
28769	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
28770	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
28770	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1326	272	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
28771	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
28771	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
28772	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
28772	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
28773	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
28773	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1327	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
1327	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
28774	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
28774	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
1328	297	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
28775	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
28775	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
28776	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
28776	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
28777	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
28777	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
28778	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
28778	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
28779	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
28779	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1329	336	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
28780	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
28780	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
28781	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
28781	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
28782	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
28782	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1330	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
1330	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
28783	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
28783	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
1331	361	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
28784	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
28784	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
28785	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
28785	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
28786	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
28786	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
3085	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3085	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3085	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3085	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3085	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$.length == 0
3085	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$[0].length == 0
3086	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3086	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3086	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	xLen != $.length
3087	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3087	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3087	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	xLen != $.length
3088	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3088	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3088	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	xLen != $.length
3089	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3089	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3089	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	xLen != $.length
29925	127	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
29925	127	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3090	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3090	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3090	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3090	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	$[i].length != yLen
3091	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3091	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3091	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3091	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	$[i].length != yLen
3092	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3092	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3092	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3092	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
3093	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3093	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3093	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3093	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
29926	141	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
29926	141	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3094	160	8	BicubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
3095	164	8	BicubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
3096	226	8	BicubicSplineInterpolatingFunction.java	partialDerivative	THIS	BicubicSplineInterpolatingFunction	0	DEF	$.partialDerivatives == null
3097	231	8	BicubicSplineInterpolatingFunction.java	partialDerivative	i	int	0	OutOfRangeException	$ == -1
3098	235	8	BicubicSplineInterpolatingFunction.java	partialDerivative	j	int	0	OutOfRangeException	$ == -1
29927	253	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < lastI
29927	253	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastI	int	0	NIL-FOR	i < $
29928	254	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < lastJ
29928	254	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastJ	int	0	NIL-FOR	j < $
3099	273	8	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
3099	273	8	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
29929	278	8	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
29929	278	8	BicubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
3100	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
3100	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
3100	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
29930	319	8	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < 16
29931	322	12	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < 16
29932	367	8	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	i	int	0	NIL-FOR	$ < N
29933	368	12	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	j	int	0	NIL-FOR	$ < N
3101	378	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3101	378	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3102	381	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
3102	381	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
29934	406	8	BicubicSplineInterpolatingFunction.java	apply	i	int	0	NIL-FOR	$ < N
29935	407	12	BicubicSplineInterpolatingFunction.java	apply	j	int	0	NIL-FOR	$ < N
3103	419	8	BicubicSplineInterpolatingFunction.java	partialDerivativeX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeX == null
3104	429	8	BicubicSplineInterpolatingFunction.java	partialDerivativeY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeY == null
3105	439	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXX == null
3106	449	8	BicubicSplineInterpolatingFunction.java	partialDerivativeYY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeYY == null
3107	459	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXY == null
29936	476	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < N
29937	477	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < N
3082	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3082	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3082	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3082	39	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3082	39	8	BicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3082	39	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3083	42	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3083	42	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3083	42	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
29913	57	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29913	57	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3084	58	12	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3084	58	12	BicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3084	58	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3084	58	12	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
29914	62	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
29914	62	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
29915	72	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
29915	72	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
29916	79	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29916	79	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
29917	85	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
29917	85	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
29918	87	12	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29918	87	12	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
29919	94	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29919	94	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
29920	96	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
29920	96	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
29921	103	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29921	103	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
29922	106	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
29922	106	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
848	123	8	BigFraction.java	BigFraction	den	BigInteger	0	ZeroException	BigInteger.ZERO.equals($)
849	126	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
850	133	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
851	139	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
852	173	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isNaN($)
853	176	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isInfinite($)
854	185	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
855	189	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
28334	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
28334	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
856	198	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
857	275	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
857	275	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
858	281	8	BigFraction.java	BigFraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
858	281	8	BigFraction.java	BigFraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
858	281	8	BigFraction.java	BigFraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
28335	297	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
859	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
859	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
859	303	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
859	303	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
860	308	12	BigFraction.java	BigFraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
860	308	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
860	308	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
860	308	12	BigFraction.java	BigFraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
860	308	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
860	308	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
860	308	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
861	322	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
861	322	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
862	326	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
862	326	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
863	433	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
864	508	8	BigFraction.java	add	fraction	BigFraction	0	NullArgumentException	$ == null
865	511	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
866	518	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
866	518	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
867	612	8	BigFraction.java	divide	bg	BigInteger	0	NullArgumentException	$ == null
868	615	8	BigFraction.java	divide	bg	BigInteger	0	MathArithmeticException	BigInteger.ZERO.equals($)
869	661	8	BigFraction.java	divide	fraction	BigFraction	0	NullArgumentException	$ == null
870	664	8	BigFraction.java	divide	THIS	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals(fraction.$.numerator)
870	664	8	BigFraction.java	divide	fraction	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals($.numerator)
871	683	8	BigFraction.java	doubleValue	result	double	0	DEF	Double.isNaN($)
872	713	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
872	713	8	BigFraction.java	equals	other	Object	1	DEF	this == $
873	715	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
874	736	8	BigFraction.java	floatValue	result	float	0	DEF	Double.isNaN($)
875	865	8	BigFraction.java	multiply	bg	BigInteger	0	NullArgumentException	$ == null
876	910	8	BigFraction.java	multiply	fraction	BigFraction	0	NullArgumentException	$ == null
877	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	fraction.$.numerator.equals(BigInteger.ZERO)
877	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
877	913	8	BigFraction.java	multiply	fraction	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
878	957	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
879	974	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
880	993	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
881	1052	8	BigFraction.java	subtract	bg	BigInteger	0	NullArgumentException	$ == null
882	1095	8	BigFraction.java	subtract	fraction	BigFraction	0	NullArgumentException	$ == null
883	1098	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
884	1104	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
884	1104	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
885	1127	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
886	1129	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
887	169	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
888	171	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
889	173	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
890	194	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
891	216	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
892	249	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
28336	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
28336	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
28336	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
28336	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
193	306	8	BigReal.java	equals	THIS	BigReal	0	RET	$ == other
193	306	8	BigReal.java	equals	other	Object	0	RET	this == $
194	310	8	BigReal.java	equals	other	Object	0	RET	$ instanceof BigReal
2457	59	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
2457	59	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
29633	74	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
29633	74	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
2458	86	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
2459	91	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
2459	91	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
29634	95	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
29634	95	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
2460	96	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
2460	96	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
2460	96	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
2471	41	8	BinaryMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof BinaryChromosome
1044	50	8	BinomialDistribution.java	BinomialDistribution	trials	int	0	NotPositiveException	$ < 0
1045	54	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ > 1
1045	54	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ < 0
1046	83	8	BinomialDistribution.java	probability	THIS	BinomialDistribution	1	DEF	x > $.numberOfTrials
1046	83	8	BinomialDistribution.java	probability	x	int	1	DEF	$ > numberOfTrials
1046	83	8	BinomialDistribution.java	probability	x	int	1	DEF	$ < 0
1047	96	8	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
1048	98	15	BinomialDistribution.java	cumulativeProbability	THIS	BinomialDistribution	1	DEF	x >= $.numberOfTrials
1048	98	15	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= numberOfTrials
3218	76	12	BisectionSolver.java	doSolve	fm	double	1	DEF	$ * fmin > 0
3218	76	12	BisectionSolver.java	doSolve	fmin	double	1	DEF	fm * $ > 0
3219	84	12	BisectionSolver.java	doSolve	min	double	0	RET	FastMath.abs(max - $) <= absoluteAccuracy
3219	84	12	BisectionSolver.java	doSolve	max	double	0	RET	FastMath.abs($ - min) <= absoluteAccuracy
3219	84	12	BisectionSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(max - min) <= $
29623	68	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
29623	68	8	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
29624	77	8	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
29624	77	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
29624	77	8	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
2424	99	8	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
2425	138	8	BitsStreamGenerator.java	nextInt	n	int	0	RET	$ > 0
2426	139	12	BitsStreamGenerator.java	nextInt	n	int	0	RET	($ & -$) == $
29625	144	12	BitsStreamGenerator.java	nextInt	bits	int	0	NIL-DOWHILE	$ - val + (n - 1) < 0
29625	144	12	BitsStreamGenerator.java	nextInt	val	int	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
29625	144	12	BitsStreamGenerator.java	nextInt	n	int	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
1108	150	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
28374	159	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
28374	159	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
28375	161	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
28375	161	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1109	162	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1109	162	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1109	162	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1109	162	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1109	162	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1110	166	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
28376	205	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
28376	205	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
28376	205	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
1111	207	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1111	207	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
28377	216	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
28377	216	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
28378	220	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
28378	220	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
28379	231	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
28379	231	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
28380	265	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
28380	265	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
28381	269	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
28381	269	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
28382	295	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
28382	295	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
28383	316	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
28383	316	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
28383	316	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
28384	317	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
28384	317	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
28384	317	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
28385	327	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
28385	327	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
28386	328	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
28386	328	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
28387	359	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
28387	359	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
28387	359	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
28388	363	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
28388	363	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
28388	363	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
28389	385	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
28389	385	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
28389	385	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
28390	386	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
28390	386	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
28390	386	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
28391	396	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
28391	396	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
28392	397	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
28392	397	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
28393	427	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
28393	427	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
28393	427	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
28394	431	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
28394	431	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
28394	431	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
28395	445	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
28395	445	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
28395	445	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
28396	448	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
28396	448	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
28396	448	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
28397	463	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
28397	463	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
28397	463	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
28398	466	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
28398	466	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
28398	466	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
28399	489	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
28399	489	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
28399	489	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
28400	494	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
28400	494	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
28400	494	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
28401	503	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
28401	503	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
28402	508	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
28402	508	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
28403	511	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
28403	511	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
28404	514	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
28404	514	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
28405	552	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
28405	552	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
28405	552	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
28406	557	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
28406	557	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
28406	557	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
28407	567	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
28407	567	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
28408	572	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
28408	572	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
28409	575	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
28409	575	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
28410	579	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
28410	579	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
28411	588	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
28411	588	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
28412	613	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
28412	613	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
28413	618	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
28413	618	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
28414	622	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
28414	622	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
28415	654	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
28415	654	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
28415	654	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
28416	657	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
28416	657	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
28416	657	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
1112	668	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1113	670	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1114	702	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
28417	752	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
28417	752	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1115	765	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1116	772	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1116	772	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
28418	784	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
28418	784	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
28419	790	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
28419	790	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
28420	799	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
28420	799	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
28421	821	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
28421	821	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1117	825	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1117	825	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1118	864	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1118	864	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1118	864	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
28422	877	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
28422	877	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1119	881	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1119	881	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
28423	906	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
28423	906	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
28424	909	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
28424	909	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1120	910	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
1120	910	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1120	910	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
1121	946	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1121	946	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1121	946	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
28425	960	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
28425	960	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
28426	963	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
28426	963	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1122	964	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
1122	964	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1122	964	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
28427	983	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
28427	983	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
28428	1014	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
28428	1014	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
28429	1017	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
28429	1017	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
28430	1045	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
28430	1045	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1123	1060	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1123	1060	8	BlockFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1123	1060	8	BlockFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
28431	1068	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
28431	1068	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
28432	1087	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
28432	1087	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
28433	1090	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
28433	1090	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1124	1103	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1124	1103	8	BlockFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1124	1103	8	BlockFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
28434	1112	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
28434	1112	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
28435	1115	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
28435	1115	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
28436	1188	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
28436	1188	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
28437	1189	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
28437	1189	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
28438	1199	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
28438	1199	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
28439	1202	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
28439	1202	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1125	1233	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.columns
1125	1233	8	BlockFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != columns
28440	1240	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
28440	1240	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
28441	1243	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
28441	1243	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
28442	1248	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
28442	1248	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
28443	1251	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
28443	1251	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
28444	1260	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
28444	1260	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1126	1275	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.rows
1126	1275	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != rows
28445	1282	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
28445	1282	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
28446	1289	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
28446	1289	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
28447	1293	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
28447	1293	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
28448	1297	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
28448	1297	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
28449	1306	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
28449	1306	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
28450	1322	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
28450	1322	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
28451	1325	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
28451	1325	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
28452	1326	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
28452	1326	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
28453	1332	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
28453	1332	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
28454	1346	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
28454	1346	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
28455	1349	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
28455	1349	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
28456	1350	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
28456	1350	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
28457	1356	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
28457	1356	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
28458	1373	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
28458	1373	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
28459	1377	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
28459	1377	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
28460	1378	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
28460	1378	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
28461	1385	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
28461	1385	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
28462	1402	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
28462	1402	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
28463	1406	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
28463	1406	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
28464	1407	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
28464	1407	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
28465	1414	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
28465	1414	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
28466	1429	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
28466	1429	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
28467	1432	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
28467	1432	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
28468	1437	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
28468	1437	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
28469	1438	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
28469	1438	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
28470	1454	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
28470	1454	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
28471	1457	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
28471	1457	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
28472	1462	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
28472	1462	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
28473	1463	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
28473	1463	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
28474	1481	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
28474	1481	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
28475	1485	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
28475	1485	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
28476	1491	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
28476	1491	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
28477	1493	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
28477	1493	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
28478	1510	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
28478	1510	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
28479	1514	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
28479	1514	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
28480	1520	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
28480	1520	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
28481	1522	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
28481	1522	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
1376	147	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
28822	156	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28822	156	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
28823	158	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28823	158	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1377	159	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1377	159	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1377	159	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1377	159	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1377	159	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1378	163	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
28824	198	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
28824	198	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
28824	198	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
1379	200	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1379	200	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
28825	208	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
28825	208	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
28826	212	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
28826	212	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
28827	223	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
28827	223	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
28828	252	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
28828	252	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
28829	256	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
28829	256	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
28830	281	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
28830	281	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
28831	301	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
28831	301	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
28831	301	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28832	302	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
28832	302	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
28832	302	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28833	312	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
28833	312	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
28834	313	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
28834	313	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
28835	342	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
28835	342	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
28835	342	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
28836	346	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
28836	346	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
28836	346	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
28837	367	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
28837	367	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
28837	367	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28838	368	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
28838	368	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
28838	368	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28839	378	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
28839	378	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
28840	379	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
28840	379	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
28841	408	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
28841	408	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
28841	408	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
28842	412	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
28842	412	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
28842	412	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
28843	427	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
28843	427	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
28843	427	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
28844	430	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
28844	430	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
28844	430	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
28845	444	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
28845	444	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
28845	444	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
28846	447	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
28846	447	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
28846	447	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
28847	468	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
28847	468	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
28847	468	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28848	472	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
28848	472	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
28848	472	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28849	480	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
28849	480	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
28850	485	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
28850	485	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
28851	488	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
28851	488	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
28852	491	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
28852	491	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
28853	525	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
28853	525	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
28853	525	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28854	530	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
28854	530	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
28854	530	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28855	540	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
28855	540	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
28856	545	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
28856	545	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
28857	548	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
28857	548	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
28858	552	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
28858	552	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
28859	560	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
28859	560	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
28860	583	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28860	583	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
28861	588	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
28861	588	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
28862	592	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
28862	592	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
28863	610	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28863	610	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
28864	613	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28864	613	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
28865	616	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
28865	616	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
28866	618	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
28866	618	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
28867	624	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
28867	624	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
28868	635	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
28868	635	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
28869	662	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
28869	662	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
28869	662	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28870	665	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
28870	665	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
28870	665	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
1380	676	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1381	678	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1382	710	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
28871	760	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
28871	760	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1383	774	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1384	781	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1384	781	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
28872	793	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
28872	793	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
28873	799	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
28873	799	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
28874	808	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
28874	808	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
28875	830	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28875	830	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1385	834	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1385	834	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1386	873	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1386	873	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1386	873	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
28876	886	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28876	886	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1387	890	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1387	890	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
28877	915	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28877	915	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
28878	918	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
28878	918	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1388	919	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
1388	919	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1388	919	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
1389	955	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1389	955	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1389	955	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
28879	969	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28879	969	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
28880	972	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
28880	972	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1390	973	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
1390	973	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1390	973	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
28881	992	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28881	992	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
28882	1023	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28882	1023	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
28883	1026	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
28883	1026	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
28884	1054	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28884	1054	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1391	1069	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1391	1069	8	BlockRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1391	1069	8	BlockRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
28885	1077	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28885	1077	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
28886	1096	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28886	1096	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
28887	1099	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
28887	1099	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1392	1112	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1392	1112	8	BlockRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1392	1112	8	BlockRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
28888	1121	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28888	1121	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
28889	1124	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
28889	1124	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
28890	1183	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
28890	1183	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
28891	1184	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
28891	1184	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
28892	1193	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
28892	1193	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
28893	1196	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
28893	1196	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1393	1225	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.columns
1393	1225	8	BlockRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != columns
28894	1231	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28894	1231	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
28895	1234	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28895	1234	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
28896	1239	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
28896	1239	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
28897	1242	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
28897	1242	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
28898	1250	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
28898	1250	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1394	1264	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.rows
1394	1264	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != rows
28899	1270	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28899	1270	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
28900	1277	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28900	1277	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
28901	1281	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
28901	1281	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
28902	1285	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
28902	1285	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
28903	1293	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
28903	1293	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
28904	1309	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28904	1309	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
28905	1312	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
28905	1312	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
28906	1313	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28906	1313	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
28907	1319	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
28907	1319	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
28908	1333	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28908	1333	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
28909	1336	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
28909	1336	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
28910	1337	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28910	1337	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
28911	1343	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
28911	1343	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
28912	1360	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
28912	1360	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
28913	1364	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
28913	1364	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
28914	1365	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
28914	1365	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
28915	1372	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
28915	1372	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
28916	1389	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
28916	1389	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
28917	1393	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
28917	1393	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
28918	1394	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
28918	1394	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
28919	1401	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
28919	1401	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
28920	1416	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28920	1416	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
28921	1419	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28921	1419	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
28922	1424	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
28922	1424	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
28923	1425	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
28923	1425	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
28924	1441	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
28924	1441	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
28925	1444	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
28925	1444	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
28926	1449	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
28926	1449	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
28927	1450	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
28927	1450	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
28928	1468	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
28928	1468	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
28929	1472	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
28929	1472	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
28930	1478	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
28930	1478	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
28931	1480	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
28931	1480	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
28932	1497	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
28932	1497	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
28933	1501	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
28933	1501	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
28934	1507	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
28934	1507	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
28935	1509	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
28935	1509	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
602	47	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusOutside() != null
603	50	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusInside() != null
1534	91	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
1535	94	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
1536	118	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
1536	118	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
1536	118	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
29100	134	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
29100	134	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
29100	134	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
1537	145	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
1537	145	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
1537	145	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
1538	147	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
1538	147	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
1538	147	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
1539	155	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
1539	155	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
1539	155	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
1540	164	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
1540	164	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
1540	164	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
1541	167	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
1541	167	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
1541	167	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
1542	169	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
1542	169	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
1542	169	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
1543	199	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
3173	83	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3174	103	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3175	125	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3176	155	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[1], 0.0, 1)
3177	162	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[0], 0.0, 1)
3178	169	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[0] * $[1] < 0
3179	179	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[2], 0.0, 1)
3180	184	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[1] * $[2] < 0
3181	213	12	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	MathInternalError:RET	FastMath.max(absYA, absYB) < $.getFunctionValueAccuracy()
3181	213	12	BracketingNthOrderBrentSolver.java	doSolve	xTol	double	0	MathInternalError:RET	(xB - xA) <= $
3181	213	12	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	MathInternalError:RET	(xB - $) <= xTol
3181	213	12	BracketingNthOrderBrentSolver.java	doSolve	absYA	double	0	MathInternalError:RET	FastMath.max($, absYB) < getFunctionValueAccuracy()
3181	213	12	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	MathInternalError:RET	($ - xA) <= xTol
3181	213	12	BracketingNthOrderBrentSolver.java	doSolve	absYB	double	0	MathInternalError:RET	FastMath.max(absYA, $) < getFunctionValueAccuracy()
3182	233	12	BracketingNthOrderBrentSolver.java	doSolve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
3183	239	19	BracketingNthOrderBrentSolver.java	doSolve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
29975	254	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	NIL-DOWHILE	Double.isNaN($)
29975	254	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	0	NIL-DOWHILE	end - $ > 1
29975	254	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	0	NIL-DOWHILE	$ - start > 1
3184	260	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ > xA
3184	260	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ < xB
3184	260	16	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	DEF	nextX > $
3184	260	16	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	DEF	nextX < $
3185	266	20	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
3185	266	20	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
3185	266	20	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	1	DEF	$ - start >= end - $
3186	281	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	Double.isNaN($)
3187	290	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	0	RET	Precision.equals($, 0.0, 1)
3188	296	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	end - $ != nbPoints
3188	296	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	$ - start != nbPoints
3188	296	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	$ > 2
3188	296	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	end - start != $
3189	305	20	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	nbPoints == x.$.length
3189	305	20	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	nbPoints == $.length
3189	305	20	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	0	DEF	$ == x.length
3190	311	16	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
3190	311	16	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
3190	311	16	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
3191	329	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	1	DEF	$ * yA <= 0
3191	329	12	BracketingNthOrderBrentSolver.java	doSolve	yA	double	1	DEF	nextY * $ <= 0
29976	371	8	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	$ < end - 1
29976	371	8	BracketingNthOrderBrentSolver.java	guessX	end	int	0	NIL-FOR	i < $ - 1
29977	373	12	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ > i
29977	373	12	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	j > $
29978	380	8	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ >= start
29978	380	8	BracketingNthOrderBrentSolver.java	guessX	start	int	0	NIL-FOR	j >= $
2954	77	8	BracketingNthOrderBrentSolverDFP.java	BracketingNthOrderBrentSolverDFP	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
2955	203	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[1].isZero()
2956	211	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[0].isZero()
2957	218	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[0].multiply($[1]).negativeOrNull()
2958	229	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[2].isZero()
2959	234	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[1].multiply($[2]).negativeOrNull()
2960	267	12	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	MathInternalError:RET	maxY.lessThan($.functionValueAccuracy)
2960	267	12	BracketingNthOrderBrentSolverDFP.java	solve	maxY	Dfp	0	MathInternalError:RET	$.lessThan(functionValueAccuracy)
2960	267	12	BracketingNthOrderBrentSolverDFP.java	solve	xTol	Dfp	0	MathInternalError:RET	xB.subtract(xA).subtract($).negativeOrNull()
2960	267	12	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	MathInternalError:RET	xB.subtract($).subtract(xTol).negativeOrNull()
2960	267	12	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	MathInternalError:RET	$.subtract(xA).subtract(xTol).negativeOrNull()
2961	288	12	BracketingNthOrderBrentSolverDFP.java	solve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
2962	291	19	BracketingNthOrderBrentSolverDFP.java	solve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
29877	303	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	NIL-DOWHILE	$.isNaN()
29877	303	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	0	NIL-DOWHILE	end - $ > 1
29877	303	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	0	NIL-DOWHILE	$ - start > 1
2963	309	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.lessThan(xB)
2963	309	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.greaterThan(xA)
2963	309	16	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	DEF	nextX.greaterThan($)
2963	309	16	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	DEF	nextX.lessThan($)
2964	315	20	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
2964	315	20	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
2964	315	20	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	1	DEF	$ - start >= end - $
2965	330	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.isNaN()
2966	340	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	0	RET	$.isZero()
2967	346	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	end - $ != nbPoints
2967	346	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	$ - start != nbPoints
2967	346	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	end - start != $
2967	346	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	$ > 2
2968	355	20	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	nbPoints == x.$.length
2968	355	20	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	nbPoints == $.length
2968	355	20	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	0	DEF	$ == x.length
2969	361	16	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
2969	361	16	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
2969	361	16	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
2970	379	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	1	DEF	$.multiply(yA).negativeOrNull()
2970	379	12	BracketingNthOrderBrentSolverDFP.java	solve	yA	Dfp	1	DEF	nextY.multiply($).negativeOrNull()
29878	421	8	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	$ < end - 1
29878	421	8	BracketingNthOrderBrentSolverDFP.java	guessX	end	int	0	NIL-FOR	i < $ - 1
29879	423	12	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ > i
29879	423	12	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	j > $
29880	430	8	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ >= start
29880	430	8	BracketingNthOrderBrentSolverDFP.java	guessX	start	int	0	NIL-FOR	j >= $
1544	77	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1545	80	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
1546	120	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
1546	120	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
1547	134	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1548	152	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
1549	158	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
1549	158	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
1550	164	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
1551	173	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
1551	173	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
1551	173	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
1551	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
1551	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
1551	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
1551	173	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
1551	173	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
1551	173	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
1551	173	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
1551	173	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
1552	181	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
1552	181	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
1552	181	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
1552	181	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
1552	181	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
1552	181	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
1553	182	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
1553	182	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
1554	190	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1554	190	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1555	199	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1555	199	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1556	208	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
1556	208	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
1557	209	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
1558	219	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1559	227	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$ != null
1560	228	20	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$.converged(iter, previous, current)
1560	228	20	BrentOptimizer.java	doOptimize	previous	UnivariatePointValuePair	0	RET	checker.converged(iter, $, current)
1560	228	20	BrentOptimizer.java	doOptimize	current	UnivariatePointValuePair	0	RET	checker.converged(iter, previous, $)
1560	228	20	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1561	234	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
1561	234	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
1562	235	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1562	235	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1563	247	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1563	247	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1564	252	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
1564	252	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	Precision.equals(w, $)
1564	252	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	Precision.equals($, x)
1564	252	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
1565	258	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
1565	258	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	Precision.equals(v, $)
1565	258	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, x)
1565	258	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, w)
1565	258	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	Precision.equals(v, $)
1565	258	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
3227	92	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
3227	92	8	BrentSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3228	98	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
3228	98	8	BrentSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3229	103	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
3229	103	8	BrentSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
3230	109	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
3230	109	8	BrentSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3231	114	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
3231	114	8	BrentSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
3232	152	12	BrentSolver.java	brent	fb	double	0	DEF	FastMath.abs(fc) < FastMath.abs($)
3232	152	12	BrentSolver.java	brent	fc	double	0	DEF	FastMath.abs($) < FastMath.abs(fb)
3233	164	12	BrentSolver.java	brent	tol	double	0	RET	FastMath.abs(m) <= $
3233	164	12	BrentSolver.java	brent	m	double	0	RET	FastMath.abs($) <= tol
3233	164	12	BrentSolver.java	brent	fb	double	0	RET	Precision.equals($, 0)
3234	168	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(e) < $
3234	168	12	BrentSolver.java	brent	fa	double	1	DEF	FastMath.abs($) <= FastMath.abs(fb)
3234	168	12	BrentSolver.java	brent	fb	double	1	DEF	FastMath.abs(fa) <= FastMath.abs($)
3234	168	12	BrentSolver.java	brent	e	double	1	DEF	FastMath.abs($) < tol
3235	180	16	BrentSolver.java	brent	a	double	1	DEF	$ == c
3235	180	16	BrentSolver.java	brent	c	double	1	DEF	a == $
3236	191	16	BrentSolver.java	brent	p	double	1	DEF	$ > 0
3237	198	16	BrentSolver.java	brent	s	double	1	DEF	p >= FastMath.abs(0.5 * $ * q)
3237	198	16	BrentSolver.java	brent	p	double	1	DEF	$ >= 1.5 * m * q - FastMath.abs(tol * q)
3237	198	16	BrentSolver.java	brent	p	double	1	DEF	$ >= FastMath.abs(0.5 * s * q)
3237	198	16	BrentSolver.java	brent	q	double	1	DEF	p >= 1.5 * m * $ - FastMath.abs(tol * $)
3237	198	16	BrentSolver.java	brent	q	double	1	DEF	p >= FastMath.abs(0.5 * s * $)
3237	198	16	BrentSolver.java	brent	tol	double	1	DEF	p >= 1.5 * m * q - FastMath.abs($ * q)
3237	198	16	BrentSolver.java	brent	m	double	1	DEF	p >= 1.5 * $ * q - FastMath.abs(tol * q)
3238	212	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(d) > $
3238	212	12	BrentSolver.java	brent	d	double	1	DEF	FastMath.abs($) > tol
3239	214	19	BrentSolver.java	brent	m	double	1	DEF	$ > 0
3240	220	12	BrentSolver.java	brent	fb	double	0	DEF	$ <= 0
3240	220	12	BrentSolver.java	brent	fb	double	0	DEF	$ > 0
3240	220	12	BrentSolver.java	brent	fc	double	0	DEF	$ <= 0
3240	220	12	BrentSolver.java	brent	fc	double	0	DEF	$ > 0
29215	364	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
29216	370	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
29216	370	16	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
29217	372	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount+1
29217	372	20	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount+1
1691	373	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1692	380	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
1692	380	24	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
1692	380	24	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
1692	380	24	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
1693	402	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1694	411	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
1694	411	16	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
1695	417	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1695	417	20	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
1696	418	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, optimum, lastResult)
1696	418	24	CMAESOptimizer.java	doOptimize	optimum	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1696	418	24	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, optimum, $)
1697	425	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopFitness != 0
1698	426	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopFitness : -$.stopFitness)
1698	426	20	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopFitness : -stopFitness)
29218	432	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
29218	432	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1699	433	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > $.stopTolX
1699	433	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma*(Math.max(Math.abs(pcCol[$]), sqrtDiagC[$])) > stopTolX
1699	433	20	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma*(Math.max(Math.abs(pcCol[i]), $[i])) > stopTolX
1699	433	20	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma*(Math.max(Math.abs($[i]), sqrtDiagC[i])) > stopTolX
1700	436	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension-1
1700	436	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension-1
29219	440	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
29219	440	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1701	441	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma*sqrtDiagC[i] > $.stopTolUpX
1701	441	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma*sqrtDiagC[$] > stopTolUpX
1701	441	20	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma*$[i] > stopTolUpX
1702	447	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1702	447	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < $.stopTolFun
1702	447	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
1702	447	16	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
1702	447	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
1702	447	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
1703	451	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
1703	451	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst-historyBest < $.stopTolHistFun
1703	451	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst-$ < stopTolHistFun
1703	451	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$-historyBest < stopTolHistFun
1704	456	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD)/$.min($.diagD) > 1e7
1705	460	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1706	464	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, current, lastResult)
1706	464	20	CMAESOptimizer.java	doOptimize	current	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1706	464	20	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, current, $)
1706	464	20	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
1707	471	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1+$.lambda/4.)]]
1707	471	16	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1+lambda/4.)]]
1707	471	16	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1+lambda/4.)]]
1707	471	16	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1+lambda/4.)]]
1708	474	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1708	474	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
1708	474	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
1708	474	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
1709	481	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
29220	501	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < lB.$.length
29220	501	8	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < lB.length
29220	501	8	CMAESOptimizer.java	checkParameters	lB	double[]	0	NIL-FOR	i < $.length
1710	502	12	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(lB[$])
1710	502	12	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(uB[$])
1710	502	12	CMAESOptimizer.java	checkParameters	lB	double[]	0	DEF	Double.isInfinite($[i])
1710	502	12	CMAESOptimizer.java	checkParameters	uB	double[]	0	DEF	Double.isInfinite($[i])
1711	510	8	CMAESOptimizer.java	checkParameters	hasFiniteBounds	boolean	1	MathUnsupportedOperationException	$
29221	511	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < lB.$.length
29221	511	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < lB.length
29221	511	12	CMAESOptimizer.java	checkParameters	lB	double[]	0	NIL-FOR	i < $.length
1712	512	16	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(uB[$])
1712	512	16	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(lB[$])
1712	512	16	CMAESOptimizer.java	checkParameters	lB	double[]	0	DEF	Double.isInfinite($[i])
1712	512	16	CMAESOptimizer.java	checkParameters	uB	double[]	0	DEF	Double.isInfinite($[i])
1713	519	12	CMAESOptimizer.java	checkParameters	hasInfiniteBounds	boolean	1	MathUnsupportedOperationException	$
1714	534	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
1715	535	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	DimensionMismatchException	$.inputSigma.$.length != init.$.length
1715	535	12	CMAESOptimizer.java	checkParameters	init	double[]	0	DimensionMismatchException	inputSigma.length != $.length
29222	538	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
29222	538	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
29222	538	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
1716	539	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NotPositiveException	$.inputSigma[i] < 0
1716	539	16	CMAESOptimizer.java	checkParameters	i	int	0	NotPositiveException	inputSigma[$] < 0
1717	542	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.boundaries != null
1718	543	20	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > $.boundaries[1][i] - $.boundaries[0][i]
1718	543	20	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > boundaries[1][$] - boundaries[0][$]
1719	557	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	DEF	$.lambda <= 0
29223	562	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
29223	562	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
29223	562	8	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
29224	581	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
29224	581	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
29225	620	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
29225	620	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
1720	642	8	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
1721	670	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
1721	670	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
1722	693	8	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
1723	701	12	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
1724	725	16	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
1724	725	16	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
1725	764	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
1725	764	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1.
1725	764	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
1725	764	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1.
1726	773	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
29226	774	16	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
29226	774	16	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
1727	775	20	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i, 0) < 0
1727	775	20	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($, 0) < 0
1728	783	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
29227	801	8	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
29228	815	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
29228	815	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
29228	815	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
29229	820	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
29229	820	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
29229	820	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
29230	1013	8	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
29230	1013	8	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
29231	1014	12	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
29231	1014	12	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
29232	1028	8	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
29232	1028	8	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
29233	1029	12	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
29233	1029	12	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
29234	1042	8	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
29234	1042	8	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
29235	1043	12	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
29235	1043	12	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
29236	1058	8	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
29236	1058	8	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
29237	1059	12	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
29237	1059	12	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
29238	1073	8	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
29238	1073	8	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
29239	1074	12	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
29239	1074	12	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
29240	1088	8	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
29240	1088	8	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
29241	1089	12	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
29241	1089	12	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
29241	1089	12	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
29242	1103	8	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
29242	1103	8	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
29243	1104	12	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
29243	1104	12	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
29244	1117	8	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
29244	1117	8	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
29245	1119	12	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
29245	1119	12	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
1729	1133	8	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
29246	1135	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
29246	1135	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
29247	1141	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
29247	1141	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
29248	1157	8	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
29248	1157	8	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
29249	1169	8	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
29249	1169	8	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
29250	1182	8	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
29250	1182	8	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
1730	1183	12	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
1730	1183	12	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
29251	1209	8	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
29251	1209	8	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
29251	1209	8	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
29252	1210	12	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
29252	1210	12	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
29252	1210	12	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
29253	1227	8	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
29253	1227	8	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
29254	1240	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
29254	1240	8	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
29255	1241	12	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
29255	1241	12	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
1731	1243	16	CMAESOptimizer.java	max	e	double	0	DEF	max < $
1731	1243	16	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
29256	1257	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
29256	1257	8	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
29257	1258	12	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
29257	1258	12	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
1732	1260	16	CMAESOptimizer.java	min	e	double	0	DEF	min > $
1732	1260	16	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
29258	1274	8	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
29258	1274	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
29258	1274	8	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
1733	1275	12	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
1733	1275	12	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
1733	1275	12	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
29259	1288	8	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
29259	1288	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
29259	1288	8	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
1734	1289	12	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
1734	1289	12	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
1734	1289	12	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
29260	1302	8	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
29260	1302	8	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
29260	1302	8	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
29261	1314	8	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
29261	1314	8	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
29261	1314	8	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
29262	1326	8	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
29262	1326	8	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
29263	1339	8	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
29263	1339	8	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
29264	1340	12	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
29264	1340	12	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
1034	78	8	CauchyDistribution.java	CauchyDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1035	135	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0
1035	135	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1
1036	137	15	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1037	139	16	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
524	75	8	Characterization.java	add	inside	boolean	1	DEF	$
525	76	12	Characterization.java	add	THIS	Characterization	1	DEF	$.in == null
526	82	12	Characterization.java	add	THIS	Characterization	1	DEF	$.out == null
2106	83	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length < 2
2106	83	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length < 2
2107	86	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length != observed.$.length
2107	86	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length != observed.length
2107	86	8	ChiSquareTest.java	chiSquare	observed	long[]	0	DimensionMismatchException	expected.length != $.length
29456	94	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
29456	94	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
29456	94	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2108	100	8	ChiSquareTest.java	chiSquare	sumExpected	double	0	DEF	FastMath.abs($ - sumObserved) > 10E-6
2108	100	8	ChiSquareTest.java	chiSquare	sumObserved	double	0	DEF	FastMath.abs(sumExpected - $) > 10E-6
29457	105	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
29457	105	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
29457	105	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2109	106	12	ChiSquareTest.java	chiSquare	rescale	boolean	1	DEF	$
2110	209	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
2110	209	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
29458	257	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
29458	257	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
29459	258	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
29459	258	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
29460	268	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
29460	268	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
29461	269	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
29461	269	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
2111	364	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
2111	364	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
2112	415	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length < 2
2112	415	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
2113	418	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
2113	418	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
2113	418	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
29462	431	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
29462	431	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
29462	431	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2114	436	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
2114	436	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
2115	441	8	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
29463	449	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
29463	449	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
29463	449	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2116	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
2116	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
2116	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
2116	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
2117	455	16	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
2118	567	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
2118	567	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
2119	589	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in.$.length < 2
2119	589	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$.length < 2
2120	593	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in[0].length < 2
2120	593	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$[0].length < 2
29464	615	8	ChiSquareTest.java	checkRectangular	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
29464	615	8	ChiSquareTest.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
29464	615	8	ChiSquareTest.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
2121	616	12	ChiSquareTest.java	checkRectangular	THIS	ChiSquareTest	0	DimensionMismatchException	in[i].length != in[0].length
2121	616	12	ChiSquareTest.java	checkRectangular	i	int	0	DimensionMismatchException	in[$].length != in[0].length
2121	616	12	ChiSquareTest.java	checkRectangular	in	long[][]	0	DimensionMismatchException	$[i].length != $[0].length
29465	634	8	ChiSquareTest.java	checkPositive	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
29465	634	8	ChiSquareTest.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
29465	634	8	ChiSquareTest.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
2122	635	12	ChiSquareTest.java	checkPositive	i	int	0	NotStrictlyPositiveException	in[$] <= 0
2122	635	12	ChiSquareTest.java	checkPositive	in	double[]	0	NotStrictlyPositiveException	$[i] <= 0
29466	651	8	ChiSquareTest.java	checkNonNegative	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
29466	651	8	ChiSquareTest.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
29466	651	8	ChiSquareTest.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
2123	652	12	ChiSquareTest.java	checkNonNegative	i	int	0	NotPositiveException	in[$] < 0
2123	652	12	ChiSquareTest.java	checkNonNegative	in	long[]	0	NotPositiveException	$[i] < 0
29467	668	8	ChiSquareTest.java	checkNonNegative	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
29467	668	8	ChiSquareTest.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
29467	668	8	ChiSquareTest.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
29468	669	12	ChiSquareTest.java	checkNonNegative	THIS	ChiSquareTest	0	NIL-FOR	j < in[i].length
29468	669	12	ChiSquareTest.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
29468	669	12	ChiSquareTest.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
29468	669	12	ChiSquareTest.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
2124	670	16	ChiSquareTest.java	checkNonNegative	j	int	0	NotPositiveException	in[i][$] < 0
2124	670	16	ChiSquareTest.java	checkNonNegative	i	int	0	NotPositiveException	in[$][j] < 0
2124	670	16	ChiSquareTest.java	checkNonNegative	in	long[][]	0	NotPositiveException	$[i][j] < 0
1266	107	8	CholeskyDecomposition.java	CholeskyDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
28688	118	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
28688	118	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
28689	122	12	CholeskyDecomposition.java	CholeskyDecomposition	j	int	0	NIL-FOR	$ < order
28689	122	12	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	j < $
1267	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lIJ	double	0	NonSymmetricMatrixException	FastMath.abs($ - lJI) > maxDelta
1267	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lJI	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - $) > maxDelta
1267	128	16	CholeskyDecomposition.java	CholeskyDecomposition	maxDelta	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - lJI) > $
28690	136	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
28690	136	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
1268	141	12	CholeskyDecomposition.java	CholeskyDecomposition	ltI	double[]	0	NonPositiveDefiniteMatrixException	$[i] <= absolutePositivityThreshold
1268	141	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	ltI[$] <= absolutePositivityThreshold
1268	141	12	CholeskyDecomposition.java	CholeskyDecomposition	absolutePositivityThreshold	double	0	NonPositiveDefiniteMatrixException	ltI[i] <= $
28691	148	12	CholeskyDecomposition.java	CholeskyDecomposition	q	int	0	NIL-FOR	$ > i
28691	148	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	q > $
28692	151	16	CholeskyDecomposition.java	CholeskyDecomposition	p	int	0	NIL-FOR	$ < order
28692	151	16	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	p < $
1269	164	8	CholeskyDecomposition.java	getL	THIS	CholeskyDecomposition	0	DEF	$.cachedL == null
1270	177	8	CholeskyDecomposition.java	getLT	THIS	CholeskyDecomposition	0	DEF	$.cachedLT == null
28693	191	8	CholeskyDecomposition.java	getDeterminant	THIS	CholeskyDecomposition	0	NIL-FOR	i < $.lTData.$.length
28693	191	8	CholeskyDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
2437	45	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == NO_FITNESS
2438	90	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
2439	105	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
2644	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	1	DEF	$.previousState != null
2644	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
29786	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29786	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
29787	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29787	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
793	116	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN
794	119	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
795	122	8	Complex.java	abs	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
796	123	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
797	129	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
798	158	8	Complex.java	add	THIS	Complex	0	RET	addend.$.isNaN
798	158	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
798	158	8	Complex.java	add	addend	Complex	0	RET	$.isNaN
799	175	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
799	175	8	Complex.java	add	addend	double	0	RET	Double.isNaN($)
800	197	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN
801	249	8	Complex.java	divide	THIS	Complex	0	RET	divisor.$.isNaN
801	249	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
801	249	8	Complex.java	divide	divisor	Complex	0	RET	$.isNaN
802	255	8	Complex.java	divide	c	double	0	RET	$ == 0.0
802	255	8	Complex.java	divide	d	double	0	RET	$ == 0.0
803	259	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
803	259	8	Complex.java	divide	divisor	Complex	0	RET	$.isInfinite()
804	263	8	Complex.java	divide	c	double	1	RET	FastMath.abs($) < FastMath.abs(d)
804	263	8	Complex.java	divide	d	double	1	RET	FastMath.abs(c) < FastMath.abs($)
805	285	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
805	285	8	Complex.java	divide	divisor	double	0	RET	Double.isNaN($)
806	288	8	Complex.java	divide	divisor	double	0	RET	$ == 0d
807	291	8	Complex.java	divide	divisor	double	0	RET	Double.isInfinite($)
808	300	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isNaN
809	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.real == 0.0
809	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.imaginary == 0.0
810	308	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isInfinite
811	312	8	Complex.java	reciprocal	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
812	340	8	Complex.java	equals	THIS	Complex	0	RET	$ == other
812	340	8	Complex.java	equals	other	Object	0	RET	this == $
813	343	8	Complex.java	equals	other	Object	0	RET	$ instanceof Complex
814	345	12	Complex.java	equals	THIS	Complex	1	RET	c.$.isNaN
814	345	12	Complex.java	equals	c	Complex	1	RET	$.isNaN
815	363	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN
816	439	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
816	439	8	Complex.java	multiply	THIS	Complex	0	RET	factor.$.isNaN
816	439	8	Complex.java	multiply	factor	Complex	0	RET	$.isNaN
817	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.real)
817	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
817	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
817	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.imaginary)
817	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.real)
817	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.imaginary)
818	462	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
819	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
819	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
820	481	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
820	481	8	Complex.java	multiply	factor	double	0	RET	Double.isNaN($)
821	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
821	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
821	484	8	Complex.java	multiply	factor	double	0	RET	Double.isInfinite($)
822	501	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN
823	529	8	Complex.java	subtract	THIS	Complex	0	RET	subtrahend.$.isNaN
823	529	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
823	529	8	Complex.java	subtract	subtrahend	Complex	0	RET	$.isNaN
824	546	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
824	546	8	Complex.java	subtract	subtrahend	double	0	RET	Double.isNaN($)
825	569	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN
826	594	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN
827	619	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN
828	660	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN
829	700	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN
830	741	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN
831	786	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN
832	864	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN
833	904	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN
834	947	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN
835	951	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
835	951	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
836	956	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
837	1018	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN
837	1018	8	Complex.java	tan	THIS	Complex	0	RET	Double.isInfinite($.real)
838	1021	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary > 20.0
839	1024	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary < -20.0
840	1069	8	Complex.java	tanh	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
840	1069	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN
841	1072	8	Complex.java	tanh	THIS	Complex	0	RET	$.real > 20.0
842	1075	8	Complex.java	tanh	THIS	Complex	0	RET	$.real < -20.0
843	1133	8	Complex.java	nthRoot	n	int	0	NotPositiveException	$ <= 0
844	1140	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN
845	1144	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
28333	1156	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
28333	1156	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
846	1190	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
846	1190	8	Complex.java	valueOf	imaginaryPart	double	0	RET	Double.isNaN($)
847	1204	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
779	115	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NullArgumentException	$ == null
780	118	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NoDataException	$.length() == 0
781	121	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
782	124	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
783	183	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
784	188	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
784	188	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
785	211	8	ComplexFormat.java	formatImaginary	absIm	double	0	MathInternalError	$ < 0
786	219	8	ComplexFormat.java	formatImaginary	toAppendTo	StringBuffer	0	DEF	$.toString().equals("1")
787	245	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
788	247	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
789	323	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
790	346	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
791	382	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
792	390	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	CompositeFormat.parseFixedstring(source, $.getImaginaryCharacter(), pos)
792	390	8	ComplexFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, getImaginaryCharacter(), pos)
792	390	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), $)
771	65	8	ComplexUtils.java	polar2Complex	r	double	0	MathIllegalArgumentException	$ < 0
476	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
476	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
28298	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
28298	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
28298	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
477	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
477	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
478	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
478	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
479	122	12	CompositeFormat.java	parseNumber	sb	StringBuilder	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
479	122	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
479	122	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
479	122	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
480	148	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
480	148	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
28299	153	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
28299	153	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
28299	153	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
481	155	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
482	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
482	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
482	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
482	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
482	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
482	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
482	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
482	177	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
483	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
483	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
1479	166	8	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	1	DEF	$ == null
1480	175	8	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1480	175	8	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
1481	185	12	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	0	DEF	$ != null
1482	189	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1482	189	12	ConjugateGradient.java	solveInPlace	rhoNext	double	0	DEF	$ <= 0.
1483	197	12	ConjugateGradient.java	solveInPlace	manager	IterationManager	1	DEF	$.getIterations() == 2
1484	204	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1484	204	12	ConjugateGradient.java	solveInPlace	pq	double	0	DEF	$ <= 0.
1485	220	12	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1485	220	12	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
28249	132	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
28249	132	8	ContinuedFraction.java	evaluate	relativeError	double	0	NIL-WHILE	$ > epsilon
28249	132	8	ContinuedFraction.java	evaluate	epsilon	double	0	NIL-WHILE	relativeError > $
28249	132	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
80	139	12	ContinuedFraction.java	evaluate	p2	double	0	ConvergenceException	Double.isInfinite($)
80	139	12	ContinuedFraction.java	evaluate	q2	double	0	ConvergenceException	Double.isInfinite($)
81	149	16	ContinuedFraction.java	evaluate	scale	double	0	ConvergenceException	$ <= 0
28250	154	16	ContinuedFraction.java	evaluate	i	int	0	NIL-FOR	$ < maxPower
28250	154	16	ContinuedFraction.java	evaluate	maxPower	int	0	NIL-FOR	i < $
82	157	20	ContinuedFraction.java	evaluate	a	double	1	DEF	$ > b
82	157	20	ContinuedFraction.java	evaluate	a	double	1	DEF	$ != 0.0
82	157	20	ContinuedFraction.java	evaluate	b	double	1	DEF	a > $
83	160	27	ContinuedFraction.java	evaluate	b	double	0	DEF	$ != 0
84	165	20	ContinuedFraction.java	evaluate	infinite	boolean	0	DEF	$
85	171	12	ContinuedFraction.java	evaluate	infinite	boolean	0	ConvergenceException	$
86	179	12	ContinuedFraction.java	evaluate	r	double	0	ConvergenceException	Double.isNaN($)
87	193	8	ContinuedFraction.java	evaluate	n	int	0	MaxCountExceededException	$ >= maxIterations
87	193	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxCountExceededException	n >= $
2690	130	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
2690	130	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
2691	134	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
2692	139	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DimensionMismatchException	$.getInterpolatedState().length != model.getInterpolatedState().length
2692	139	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DimensionMismatchException	getInterpolatedState().length != $.getInterpolatedState().length
2693	144	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	MathIllegalArgumentException	$.forward ^ model.$.forward
2693	144	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	MathIllegalArgumentException	forward ^ $.forward
2694	153	6	ContinuousOutputModel.java	append	step	double	0	MathIllegalArgumentException	FastMath.abs(gap) > 1.0e-3 * FastMath.abs($)
2694	153	6	ContinuousOutputModel.java	append	gap	double	0	MathIllegalArgumentException	FastMath.abs($) > 1.0e-3 * FastMath.abs(step)
2695	186	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
2696	193	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
2697	251	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
2697	251	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
2697	251	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
2698	256	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
2698	256	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
2698	256	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
29818	263	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
29818	263	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
2699	268	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
2700	271	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
2701	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs(tMax - $) < 1e-6
2701	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs($ - tMin) < 1e-6
2701	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	FastMath.abs(tMed - $) < 1e-6
2701	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	FastMath.abs($ - tMed) < 1e-6
2702	308	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
2702	308	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
2703	310	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
2703	310	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
29819	318	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
29819	318	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
29819	318	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
29819	318	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
2704	342	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
2705	343	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
2705	343	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
2706	345	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
2706	345	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
2707	351	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
2707	351	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
2708	353	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
2708	353	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
2347	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
2347	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
2347	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
29584	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
29584	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
29585	168	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.normalized.$.length
29585	168	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < normalized.length
29586	174	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
29586	174	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
29586	174	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
29587	176	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.root.getColumnDimension()
29587	176	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < root.getColumnDimension()
29497	163	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
29497	163	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
29498	164	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
29498	164	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
2161	224	8	Covariance.java	covariance	THIS	Covariance	1	MathIllegalArgumentException	length != yArray.$.length
2161	224	8	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ != yArray.length
2161	224	8	Covariance.java	covariance	yArray	double[]	1	MathIllegalArgumentException	length != $.length
2162	227	15	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ < 2
29499	233	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
29499	233	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
2163	267	8	Covariance.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2163	267	8	Covariance.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
523	246	8	Decimal64.java	equals	obj	Object	0	RET	$ instanceof Decimal64
1493	114	8	DefaultIterativeLinearSolverEvent.java	getResidual	THIS	DefaultIterativeLinearSolverEvent	0	RET	$.r != null
496	50	8	DefaultTransformer.java	transform	o	Object	0	NullArgumentException	$ == null
497	54	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
498	69	8	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
498	69	8	DefaultTransformer.java	equals	other	Object	0	RET	this == $
499	72	8	DefaultTransformer.java	equals	other	Object	0	RET	$ == null
2009	138	8	DescriptiveStatistics.java	DescriptiveStatistics	initialDoubleArray	double[]	0	DEF	$ != null
2010	162	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
2011	163	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
2012	165	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
2013	242	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
2014	243	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
2015	341	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ < 1
2016	342	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ != INFINITE_WINDOW
2017	353	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
2017	353	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
2017	353	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
2018	413	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
2738	217	8	Dfp.java	Dfp	x	long	0	DEF	$ == Long.MIN_VALUE
2739	225	8	Dfp.java	Dfp	x	long	1	DEF	$ < 0
29825	233	8	Dfp.java	Dfp	x	long	0	NIL-WHILE	$ != 0
2740	240	8	Dfp.java	Dfp	isLongMin	boolean	0	DEF	$
29826	243	12	Dfp.java	Dfp	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
29826	243	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < mant.length - 1
2741	244	16	Dfp.java	Dfp	THIS	Dfp	0	DEF	$.mant[i] != 0
2741	244	16	Dfp.java	Dfp	i	int	0	DEF	mant[$] != 0
2742	269	8	Dfp.java	Dfp	exponent	int	0	RET	$ == -1023
2743	271	12	Dfp.java	Dfp	x	double	0	RET	$ == 0
2744	273	16	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
29827	282	12	Dfp.java	Dfp	mantissa	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
2745	289	8	Dfp.java	Dfp	exponent	int	0	RET	$ == 1024
2746	291	12	Dfp.java	Dfp	x	double	1	DEF	$ != $
2747	294	19	Dfp.java	Dfp	x	double	1	DEF	$ < 0
2748	308	8	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
2749	349	8	Dfp.java	Dfp	s	String	0	RET	$.equals(POS_INFINITY_STRING)
2750	355	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NEG_INFINITY_STRING)
2751	361	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NAN_STRING)
2752	369	8	Dfp.java	Dfp	p	int	0	DEF	$ == -1
2753	375	8	Dfp.java	Dfp	p	int	1	DEF	$ != -1
29828	381	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$<fpexp.length()
29828	381	12	Dfp.java	Dfp	fpexp	String	0	NIL-FOR	i<$.length()
2754	383	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) == '-'
2754	383	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) == '-'
2755	388	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) >= '0'
2755	388	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) <= '9'
2755	388	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) >= '0'
2755	388	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) <= '9'
2756	393	12	Dfp.java	Dfp	negative	boolean	0	DEF	$
2757	402	8	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.indexOf("-") != -1
2758	412	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) <= '9'
2758	412	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) >= '1'
2758	412	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) <= '9'
2758	412	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) >= '1'
2759	416	12	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2759	416	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '0'
2759	416	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '0'
2760	420	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
2760	420	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
2761	426	12	Dfp.java	Dfp	p	int	0	DEF	$ == fpdecimal.length()
2761	426	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == $.length()
2762	439	12	Dfp.java	Dfp	p	int	0	DEF	$ == (fpdecimal.length())
2762	439	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == ($.length())
2763	444	12	Dfp.java	Dfp	THIS	Dfp	0	DEF	q == $.mant.$.length*rsize+offset+1
2763	444	12	Dfp.java	Dfp	rsize	int	0	DEF	q == mant.length*$+offset+1
2763	444	12	Dfp.java	Dfp	offset	int	0	DEF	q == mant.length*rsize+$+1
2763	444	12	Dfp.java	Dfp	q	int	0	DEF	$ == mant.length*rsize+offset+1
2764	448	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
2764	448	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
2765	455	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) > '9'
2765	455	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) < '0'
2765	455	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) > '9'
2765	455	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) < '0'
2766	468	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2766	468	8	Dfp.java	Dfp	offset	int	0	DEF	q != $
2766	468	8	Dfp.java	Dfp	q	int	0	DEF	$ != offset
2767	471	16	Dfp.java	Dfp	offset	int	0	DEF	q == $
2767	471	16	Dfp.java	Dfp	q	int	0	DEF	$ == offset
2768	474	16	Dfp.java	Dfp	striped	char[]	1	DEF	$[q] == '0'
2768	474	16	Dfp.java	Dfp	q	int	1	DEF	striped[$] == '0'
2769	483	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2769	483	8	Dfp.java	Dfp	significantDigits	int	0	DEF	$ == 0
2770	488	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
29829	496	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	$ > q
29829	496	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	p > $
2771	497	12	Dfp.java	Dfp	striped	char[]	0	DEF	$[p] != '0'
2771	497	12	Dfp.java	Dfp	p	int	0	DEF	striped[$] != '0'
29830	509	8	Dfp.java	Dfp	THIS	Dfp	0	NIL-WHILE	(p - q) < ($.mant.$.length * rsize)
29830	509	8	Dfp.java	Dfp	rsize	int	0	NIL-WHILE	(p - q) < (mant.length * $)
29830	509	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	($ - q) < (mant.length * rsize)
29830	509	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	(p - $) < (mant.length * rsize)
29831	510	12	Dfp.java	Dfp	rsize	int	0	NIL-FOR	i < $
29831	510	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < rsize
29832	517	8	Dfp.java	Dfp	i	int	0	NIL-FOR	$ >= 0
2772	528	8	Dfp.java	Dfp	THIS	Dfp	0	DEF	q < striped.$.length
2772	528	8	Dfp.java	Dfp	striped	char[]	0	DEF	q < $.length
2772	528	8	Dfp.java	Dfp	q	int	0	DEF	$ < striped.length
2773	597	8	Dfp.java	newInstance	THIS	Dfp	0	RET	$.field.getRadixDigits() != d.$.field.getRadixDigits()
2773	597	8	Dfp.java	newInstance	d	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
29833	669	8	Dfp.java	shiftLeft	i	int	0	NIL-FOR	$ > 0
29834	681	8	Dfp.java	shiftRight	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
29834	681	8	Dfp.java	shiftRight	i	int	0	NIL-FOR	$ < mant.length - 1
2774	703	8	Dfp.java	align	adiff	int	0	DEF	$ < 0
2775	707	8	Dfp.java	align	diff	int	0	RET	$ == 0
2776	711	8	Dfp.java	align	THIS	Dfp	0	RET	adiff > ($.mant.$.length + 1)
2776	711	8	Dfp.java	align	adiff	int	0	RET	$ > (mant.length + 1)
29835	722	8	Dfp.java	align	i	int	0	NIL-FOR	$ < adiff
29835	722	8	Dfp.java	align	adiff	int	0	NIL-FOR	i < $
2777	723	12	Dfp.java	align	diff	int	1	DEF	$ < 0
2778	728	16	Dfp.java	align	lostdigit	int	0	DEF	$ != 0
2779	740	8	Dfp.java	align	inexact	boolean	0	DEF	$
2780	756	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2780	756	8	Dfp.java	lessThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2781	765	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.isNaN()
2781	765	8	Dfp.java	lessThan	x	Dfp	0	RET	$.isNaN()
2782	781	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2782	781	8	Dfp.java	greaterThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2783	790	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.isNaN()
2783	790	8	Dfp.java	greaterThan	x	Dfp	0	RET	$.isNaN()
2784	804	8	Dfp.java	negativeOrNull	THIS	Dfp	0	RET	$.isNaN()
2785	819	8	Dfp.java	strictlyNegative	THIS	Dfp	0	RET	$.isNaN()
2786	834	8	Dfp.java	positiveOrNull	THIS	Dfp	0	RET	$.isNaN()
2787	849	8	Dfp.java	strictlyPositive	THIS	Dfp	0	RET	$.isNaN()
2788	887	8	Dfp.java	isZero	THIS	Dfp	0	RET	$.isNaN()
2789	904	8	Dfp.java	equals	other	Object	0	RET	$ instanceof Dfp
2790	906	12	Dfp.java	equals	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2790	906	12	Dfp.java	equals	THIS	Dfp	0	RET	$.isNaN()
2790	906	12	Dfp.java	equals	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2790	906	12	Dfp.java	equals	x	Dfp	0	RET	$.isNaN()
2791	931	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.isNaN()
2791	931	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2791	931	8	Dfp.java	unequal	x	Dfp	0	RET	$.isNaN()
2791	931	8	Dfp.java	unequal	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2792	946	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
2792	946	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[a.$.mant.$.length - 1] == 0
2792	946	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
2792	946	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length - 1] == 0
2792	946	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
2792	946	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
2792	946	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
2792	946	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
2793	951	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.sign != b.$.sign
2793	951	8	Dfp.java	compare	a	Dfp	0	RET	$.sign != b.sign
2793	951	8	Dfp.java	compare	b	Dfp	0	RET	a.sign != $.sign
2794	952	12	Dfp.java	compare	THIS	Dfp	1	RET	a.$.sign == -1
2794	952	12	Dfp.java	compare	a	Dfp	1	RET	$.sign == -1
2795	960	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
2795	960	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
2795	960	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
2795	960	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
2796	964	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
2796	964	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
2796	964	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
2796	964	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
2797	968	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
2797	968	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
2797	968	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
2797	968	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
2798	973	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[b.$.mant.$.length-1] != 0
2798	973	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length-1] != 0
2798	973	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[b.mant.length-1] != 0
2798	973	8	Dfp.java	compare	b	Dfp	0	RET	a.mant[$.mant.length-1] != 0
2798	973	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length-1] != 0
2799	974	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp < b.$.exp
2799	974	12	Dfp.java	compare	a	Dfp	0	RET	$.exp < b.exp
2799	974	12	Dfp.java	compare	b	Dfp	0	RET	a.exp < $.exp
2800	978	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp > b.$.exp
2800	978	12	Dfp.java	compare	a	Dfp	0	RET	$.exp > b.exp
2800	978	12	Dfp.java	compare	b	Dfp	0	RET	a.exp > $.exp
29836	984	8	Dfp.java	compare	i	int	0	NIL-FOR	$ >= 0
2801	985	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] > b.$.mant[i]
2801	985	12	Dfp.java	compare	i	int	0	RET	a.mant[$] > b.mant[$]
2801	985	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] > b.mant[i]
2801	985	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] > $.mant[i]
2802	989	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] < b.$.mant[i]
2802	989	12	Dfp.java	compare	i	int	0	RET	a.mant[$] < b.mant[$]
2802	989	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] < b.mant[i]
2802	989	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] < $.mant[i]
2803	1032	8	Dfp.java	remainder	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2803	1032	8	Dfp.java	remainder	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2804	1047	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.isNaN()
2805	1051	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.nans == INFINITE
2806	1055	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2807	1062	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp < 0
2808	1073	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp >= $.mant.$.length
29837	1081	8	Dfp.java	trunc	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length-result.$.exp
29837	1081	8	Dfp.java	trunc	i	int	0	NIL-FOR	$ < mant.length-result.exp
29837	1081	8	Dfp.java	trunc	result	Dfp	0	NIL-FOR	i < mant.length-$.exp
2809	1086	8	Dfp.java	trunc	changed	boolean	0	RET	$
2810	1089	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == -1
2810	1089	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == -1
2811	1096	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == 1
2811	1096	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == 1
2812	1107	20	Dfp.java	trunc	half	Dfp	0	DEF	a.greaterThan($)
2812	1107	20	Dfp.java	trunc	a	Dfp	0	DEF	$.greaterThan(half)
2813	1114	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.exp > 0
2813	1114	20	Dfp.java	trunc	THIS	Dfp	0	DEF	(result.$.mant[$.mant.$.length-result.$.exp]&1) != 0
2813	1114	20	Dfp.java	trunc	half	Dfp	0	DEF	a.equals($)
2813	1114	20	Dfp.java	trunc	a	Dfp	0	DEF	$.equals(half)
2813	1114	20	Dfp.java	trunc	result	Dfp	0	DEF	$.exp > 0
2813	1114	20	Dfp.java	trunc	result	Dfp	0	DEF	($.mant[mant.length-$.exp]&1) != 0
2814	1140	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.greaterThan($.newInstance(2147483647))
2814	1140	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.greaterThan(newInstance(2147483647))
2815	1144	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.lessThan($.newInstance(-2147483648))
2815	1144	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.lessThan(newInstance(-2147483648))
29838	1148	8	Dfp.java	intValue	THIS	Dfp	0	NIL-FOR	i >= $.mant.$.length - rounded.$.exp
29838	1148	8	Dfp.java	intValue	i	int	0	NIL-FOR	$ >= mant.length - rounded.exp
29838	1148	8	Dfp.java	intValue	rounded	Dfp	0	NIL-FOR	i >= mant.length - $.exp
2816	1152	8	Dfp.java	intValue	THIS	Dfp	0	DEF	rounded.$.sign == -1
2816	1152	8	Dfp.java	intValue	rounded	Dfp	0	DEF	$.sign == -1
2817	1182	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 1000
2818	1185	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 100
2819	1188	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 10
2820	1201	8	Dfp.java	power10	e	int	1	DEF	$ >= 0
29839	1232	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
29839	1232	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
29840	1238	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
29840	1238	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
2821	1254	8	Dfp.java	add	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2821	1254	8	Dfp.java	add	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2822	1262	8	Dfp.java	add	THIS	Dfp	0	RET	$.nans != FINITE
2822	1262	8	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans != FINITE
2822	1262	8	Dfp.java	add	x	Dfp	0	RET	$.nans != FINITE
2823	1263	12	Dfp.java	add	THIS	Dfp	0	RET	$.isNaN()
2824	1267	12	Dfp.java	add	x	Dfp	0	RET	$.isNaN()
2825	1271	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == FINITE
2825	1271	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2825	1271	12	Dfp.java	add	x	Dfp	0	RET	$.nans == FINITE
2826	1275	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2826	1275	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == FINITE
2826	1275	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2827	1279	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign == x.$.sign
2827	1279	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2827	1279	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2827	1279	12	Dfp.java	add	x	Dfp	0	RET	sign == $.sign
2827	1279	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2828	1283	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2828	1283	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2828	1283	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign != x.$.sign
2828	1283	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2828	1283	12	Dfp.java	add	x	Dfp	0	RET	sign != $.sign
2829	1308	8	Dfp.java	add	THIS	Dfp	0	DEF	$.compare(a, b) > 0
2829	1308	8	Dfp.java	add	a	Dfp	0	DEF	compare($, b) > 0
2829	1308	8	Dfp.java	add	b	Dfp	0	DEF	compare(a, $) > 0
2830	1315	8	Dfp.java	add	THIS	Dfp	0	DEF	b.$.mant[$.mant.$.length-1] == 0
2830	1315	8	Dfp.java	add	b	Dfp	0	DEF	$.mant[mant.length-1] == 0
2831	1319	8	Dfp.java	add	THIS	Dfp	0	DEF	a.$.mant[$.mant.$.length-1] == 0
2831	1319	8	Dfp.java	add	a	Dfp	0	DEF	$.mant[mant.length-1] == 0
2832	1326	8	Dfp.java	add	THIS	Dfp	1	DEF	a.$.exp < b.$.exp
2832	1326	8	Dfp.java	add	a	Dfp	1	DEF	$.exp < b.exp
2832	1326	8	Dfp.java	add	b	Dfp	1	DEF	a.exp < $.exp
2833	1333	8	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2833	1333	8	Dfp.java	add	bsign	byte	0	DEF	asign != $
2834	1334	12	Dfp.java	add	asign	byte	1	DEF	$ == rsign
2834	1334	12	Dfp.java	add	rsign	byte	1	DEF	asign == $
29841	1343	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
29841	1343	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2835	1354	8	Dfp.java	add	asign	byte	0	DEF	$ == bsign
2835	1354	8	Dfp.java	add	bsign	byte	0	DEF	asign == $
2835	1354	8	Dfp.java	add	rh	int	0	DEF	$ != 0
2836	1359	12	Dfp.java	add	excp	int	0	DEF	$ != 0
29842	1365	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
29842	1365	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2837	1366	12	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] != 0
2837	1366	12	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] != 0
2838	1370	12	Dfp.java	add	i	int	0	DEF	$ == 0
2839	1378	8	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2839	1378	8	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2840	1381	12	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2840	1381	12	Dfp.java	add	bsign	byte	0	DEF	asign != $
2841	1389	8	Dfp.java	add	excp	int	0	DEF	$ != 0
2842	1454	8	Dfp.java	round	inc	boolean	0	DEF	$
29843	1457	12	Dfp.java	round	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
29843	1457	12	Dfp.java	round	i	int	0	NIL-FOR	$ < mant.length
2843	1463	12	Dfp.java	round	rh	int	0	DEF	$ != 0
2844	1470	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp < MIN_EXP
2845	1476	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp > MAX_EXP
2846	1482	8	Dfp.java	round	n	int	0	RET	$ != 0
2847	1499	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2847	1499	8	Dfp.java	multiply	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2848	1509	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
2848	1509	8	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans != FINITE
2848	1509	8	Dfp.java	multiply	x	Dfp	0	RET	$.nans != FINITE
2849	1510	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
2850	1514	12	Dfp.java	multiply	x	Dfp	0	RET	$.isNaN()
2851	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] != 0
2851	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2851	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2851	1518	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] != 0
2851	1518	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
2852	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2852	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2852	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] != 0
2852	1524	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2853	1530	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2853	1530	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2853	1530	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2854	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] == 0
2854	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2854	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2854	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2854	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2854	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2854	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] == 0
2854	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2854	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
29844	1548	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
29844	1548	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
29845	1550	12	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	j<$.mant.$.length
29845	1550	12	Dfp.java	multiply	j	int	0	NIL-FOR	$<mant.length
29846	1562	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ >= 0
2855	1563	12	Dfp.java	multiply	i	int	0	DEF	product[$] != 0
2855	1563	12	Dfp.java	multiply	product	int[]	0	DEF	$[i] != 0
29847	1570	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
29847	1570	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
2856	1578	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2856	1578	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2857	1584	8	Dfp.java	multiply	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
2857	1584	8	Dfp.java	multiply	md	int	1	DEF	$ > (mant.length-1)
2858	1590	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
2859	1607	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
2860	1608	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
2861	1612	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2861	1612	12	Dfp.java	multiply	x	int	0	RET	$ != 0
2862	1617	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2862	1617	12	Dfp.java	multiply	x	int	0	RET	$ == 0
2863	1627	8	Dfp.java	multiply	x	int	0	RET	$ >= RADIX
2863	1627	8	Dfp.java	multiply	x	int	0	RET	$ < 0
29848	1636	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
29848	1636	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
2864	1643	8	Dfp.java	multiply	rh	int	0	DEF	$ != 0
2865	1649	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2865	1649	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2866	1654	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
2867	1678	8	Dfp.java	divide	THIS	Dfp	0	RET	$.field.getRadixDigits() != divisor.$.field.getRadixDigits()
2867	1678	8	Dfp.java	divide	divisor	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2868	1688	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
2868	1688	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans != FINITE
2868	1688	8	Dfp.java	divide	divisor	Dfp	0	RET	$.nans != FINITE
2869	1689	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
2870	1693	12	Dfp.java	divide	divisor	Dfp	0	RET	$.isNaN()
2871	1697	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2871	1697	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == FINITE
2871	1697	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == FINITE
2872	1703	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == FINITE
2872	1703	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2872	1703	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2873	1709	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2873	1709	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2873	1709	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2874	1719	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.mant[$.mant.$.length-1] == 0
2874	1719	8	Dfp.java	divide	divisor	Dfp	0	RET	$.mant[mant.length-1] == 0
29849	1742	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
29849	1742	8	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
29850	1750	8	Dfp.java	divide	qd	int	0	NIL-FOR	$ >= 0
29851	1759	12	Dfp.java	divide	trialgood	boolean	0	NIL-WHILE	$
29852	1765	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
29852	1765	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
29853	1774	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
29853	1774	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
2875	1781	16	Dfp.java	divide	rh	int	0	DEF	$ == 0
2876	1791	16	Dfp.java	divide	minadj	int	0	DEF	$ >= 2
29854	1799	16	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2877	1800	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] > remainder[i]
2877	1800	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] > remainder[$]
2877	1800	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] > $[i]
2877	1800	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] > remainder[i]
2878	1803	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] < remainder[i]
2878	1803	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] < remainder[$]
2878	1803	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] < $[i]
2878	1803	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] < remainder[i]
2879	1808	16	Dfp.java	divide	THIS	Dfp	0	DEF	remainder[$.mant.$.length] != 0
2879	1808	16	Dfp.java	divide	remainder	int[]	0	DEF	$[mant.length] != 0
2880	1812	16	Dfp.java	divide	trialgood	boolean	0	DEF	$ == false
2881	1819	12	Dfp.java	divide	nsqd	int	0	DEF	$ != 0
2881	1819	12	Dfp.java	divide	trial	int	0	DEF	$ != 0
2882	1823	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd == $.mant.$.length
2882	1823	12	Dfp.java	divide	THIS	Dfp	0	DEF	$.field.getRoundingMode() == DfpField.$.RoundingMode.ROUND_DOWN
2882	1823	12	Dfp.java	divide	nsqd	int	0	DEF	$ == mant.length
2883	1828	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd > $.mant.$.length
2883	1828	12	Dfp.java	divide	nsqd	int	0	DEF	$ > mant.length
29855	1835	12	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
29855	1835	12	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
29856	1842	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2884	1843	12	Dfp.java	divide	i	int	0	DEF	quotient[$] != 0
2884	1843	12	Dfp.java	divide	quotient	int[]	0	DEF	$[i] != 0
29857	1850	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i<$.mant.$.length
29857	1850	8	Dfp.java	divide	i	int	0	NIL-FOR	$<mant.length
2885	1858	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2885	1858	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2886	1862	8	Dfp.java	divide	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
2886	1862	8	Dfp.java	divide	md	int	1	DEF	$ > (mant.length-1)
2887	1868	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
2888	1883	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
2889	1884	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
2890	1888	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2891	1894	8	Dfp.java	divide	divisor	int	0	RET	$ == 0
2892	1904	8	Dfp.java	divide	divisor	int	0	RET	$ >= RADIX
2892	1904	8	Dfp.java	divide	divisor	int	0	RET	$ < 0
29858	1915	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2893	1922	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2893	1922	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2894	1932	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
2895	1951	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2895	1951	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == FINITE
2896	1956	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans != FINITE
2897	1957	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == 1
2897	1957	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == INFINITE
2898	1962	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == QNAN
2899	1966	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == SNAN
2900	1976	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == -1
2901	1990	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp < -1
2901	1990	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp > 1
2901	1990	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp < -1
2901	1990	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp > 1
29859	2016	8	Dfp.java	sqrt	x	Dfp	0	NIL-WHILE	$.unequal(px)
29859	2016	8	Dfp.java	sqrt	px	Dfp	0	NIL-WHILE	x.unequal($)
2902	2025	12	Dfp.java	sqrt	x	Dfp	0	DEF	$.equals(ppx)
2902	2025	12	Dfp.java	sqrt	ppx	Dfp	0	DEF	x.equals($)
2903	2032	12	Dfp.java	sqrt	THIS	Dfp	0	DEF	dx.$.mant[$.mant.$.length-1] == 0
2903	2032	12	Dfp.java	sqrt	dx	Dfp	0	DEF	$.mant[mant.length-1] == 0
2904	2046	8	Dfp.java	toString	THIS	Dfp	0	RET	$.nans != FINITE
2905	2048	12	Dfp.java	toString	THIS	Dfp	1	RET	$.nans == INFINITE
2906	2055	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp < -1
2906	2055	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp > $.mant.$.length
29860	2077	8	Dfp.java	dfp2sci	i	int	0	NIL-FOR	$ >= 0
29861	2085	8	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-FOR	p < rawdigits.$.length
29861	2085	8	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-FOR	p < $.length
29861	2085	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ < rawdigits.length
2907	2086	12	Dfp.java	dfp2sci	rawdigits	char[]	0	DEF	$[p] != '0'
2907	2086	12	Dfp.java	dfp2sci	p	int	0	DEF	rawdigits[$] != '0'
2908	2094	8	Dfp.java	dfp2sci	THIS	Dfp	0	DEF	$.sign == -1
2909	2098	8	Dfp.java	dfp2sci	THIS	Dfp	1	DEF	p != rawdigits.$.length
2909	2098	8	Dfp.java	dfp2sci	rawdigits	char[]	1	DEF	p != $.length
2909	2098	8	Dfp.java	dfp2sci	p	int	1	DEF	$ != rawdigits.length
29862	2103	12	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-WHILE	p<rawdigits.$.length
29862	2103	12	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-WHILE	p<$.length
29862	2103	12	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$<rawdigits.length
2910	2121	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
29863	2126	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ > ae
29863	2126	8	Dfp.java	dfp2sci	ae	int	0	NIL-FOR	p > $
2911	2130	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
29864	2134	8	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$ > 0
2912	2156	8	Dfp.java	dfp2string	e	int	0	DEF	$ <= 0
29865	2162	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ < 0
29866	2170	8	Dfp.java	dfp2string	i	int	0	NIL-FOR	$ >= 0
2913	2175	12	Dfp.java	dfp2string	e	int	0	DEF	--$ == 0
29867	2181	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ > 0
2914	2189	8	Dfp.java	dfp2string	pointInserted	boolean	0	DEF	$
29868	2196	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[q] == '0'
29868	2196	8	Dfp.java	dfp2string	q	int	0	NIL-WHILE	buffer[$] == '0'
2915	2199	8	Dfp.java	dfp2string	buffer	char[]	0	DEF	$[q] == '.'
2915	2199	8	Dfp.java	dfp2string	q	int	0	DEF	buffer[$] == '.'
29869	2204	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[p-1] == '0'
29869	2204	8	Dfp.java	dfp2string	p	int	0	NIL-WHILE	buffer[$-1] == '0'
2916	2209	8	Dfp.java	dfp2string	THIS	Dfp	0	DEF	$.sign < 0
2917	2235	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] != 0
2917	2235	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
2918	2242	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] == 0
2918	2242	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
2919	2248	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == QNAN
2919	2248	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
2920	2253	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == SNAN
2920	2253	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
2921	2260	16	Dfp.java	dotrap	THIS	Dfp	1	DEF	(result.$.exp+$.mant.$.length) < MIN_EXP
2921	2260	16	Dfp.java	dotrap	result	Dfp	1	DEF	($.exp+mant.length) < MIN_EXP
2922	2325	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2922	2325	8	Dfp.java	nextAfter	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2923	2334	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan(x)
2923	2334	8	Dfp.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
2924	2338	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.compare(this, x) == 0
2924	2338	8	Dfp.java	nextAfter	x	Dfp	0	RET	compare(this, $) == 0
2925	2342	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan($.getZero())
2926	2348	8	Dfp.java	nextAfter	up	boolean	1	DEF	$
2927	2353	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
2928	2363	12	Dfp.java	nextAfter	THIS	Dfp	1	DEF	$.equals(inc)
2928	2363	12	Dfp.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
2929	2369	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
2930	2376	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.classify() != INFINITE
2930	2376	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
2931	2381	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	result.equals($.getZero())
2931	2381	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero()) == false
2931	2381	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
2932	2396	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isInfinite()
2933	2397	12	Dfp.java	toDouble	THIS	Dfp	1	RET	$.lessThan($.getZero())
2934	2404	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isNaN()
2935	2411	8	Dfp.java	toDouble	cmp0	int	1	RET	$ == 0
2936	2413	15	Dfp.java	toDouble	cmp0	int	0	DEF	$ < 0
2937	2421	8	Dfp.java	toDouble	exponent	int	0	DEF	$ < 0
29870	2426	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.equals($)
29870	2426	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.lessThan($)
29870	2426	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.equals(y)
29870	2426	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.lessThan(y)
2938	2435	8	Dfp.java	toDouble	exponent	int	0	DEF	$ > -1023
2939	2439	8	Dfp.java	toDouble	exponent	int	0	RET	$ < -1074
2940	2443	8	Dfp.java	toDouble	exponent	int	0	RET	$ > 1023
2941	2453	8	Dfp.java	toDouble	mantissa	long	0	DEF	$ == 4503599627370496L
2942	2460	8	Dfp.java	toDouble	exponent	int	0	DEF	$ <= -1023
29871	2464	8	Dfp.java	toDouble	exponent	int	0	NIL-WHILE	$ < -1023
2943	2472	8	Dfp.java	toDouble	negate	boolean	0	DEF	$
2717	131	8	DfpDec.java	newInstance	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != d.getField().getRadixDigits()
2717	131	8	DfpDec.java	newInstance	d	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2718	168	8	DfpDec.java	round	msb	int	0	RET	$ == 0
29821	175	8	DfpDec.java	round	msb	int	0	NIL-WHILE	lsbthreshold > $
29821	175	8	DfpDec.java	round	lsbthreshold	int	0	NIL-WHILE	$ > msb
29822	186	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsbshift % 4
29822	186	8	DfpDec.java	round	lsbshift	int	0	NIL-FOR	i < $ % 4
2719	192	8	DfpDec.java	round	THIS	DfpDec	0	RET	digits == 4 * $.mant.$.length - 3
2719	192	8	DfpDec.java	round	lsbthreshold	int	0	RET	$ <= 1
2719	192	8	DfpDec.java	round	digits	int	0	RET	$ == 4 * mant.length - 3
2720	198	8	DfpDec.java	round	lsbthreshold	int	1	DEF	$ == 1
29823	208	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsd
29823	208	8	DfpDec.java	round	lsd	int	0	NIL-FOR	i < $
2721	255	8	DfpDec.java	round	inc	boolean	0	DEF	$
29824	258	12	DfpDec.java	round	THIS	DfpDec	0	NIL-FOR	i < $.mant.$.length
29824	258	12	DfpDec.java	round	i	int	0	NIL-FOR	$ < mant.length
2722	264	12	DfpDec.java	round	rh	int	0	DEF	$ != 0
2723	271	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp < MIN_EXP
2724	277	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp > MAX_EXP
2725	283	8	DfpDec.java	round	discarded	int	0	RET	$ != 0
2725	283	8	DfpDec.java	round	n	int	0	RET	$ != 0
2726	298	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != x.getField().getRadixDigits()
2726	298	8	DfpDec.java	nextAfter	x	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2727	310	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan(x)
2727	310	8	DfpDec.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
2728	314	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.equals(x)
2728	314	8	DfpDec.java	nextAfter	x	Dfp	0	RET	equals($)
2729	318	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan($.getZero())
2730	322	8	DfpDec.java	nextAfter	up	boolean	1	DEF	$
2731	326	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2732	330	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2732	330	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2733	339	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	$.equals(inc)
2733	339	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
2734	345	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2735	349	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2735	349	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2736	356	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.classify() != INFINITE
2736	356	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
2737	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero()) == false
2737	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	result.equals($.getZero())
2737	361	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
2944	200	8	DfpField.java	DfpField	computeConstants	boolean	1	DEF	$
29872	537	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
29872	537	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
29872	537	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
2945	540	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2945	540	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '1'
2945	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
2945	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '1'
2946	544	8	DfpField.java	split	i	int	0	DEF	buf[$] == '.'
2946	544	8	DfpField.java	split	buf	char[]	0	DEF	$[i] == '.'
2947	549	8	DfpField.java	split	THIS	DfpField	0	DEF	sig == ($.radixDigits / 2) * 4
2947	549	8	DfpField.java	split	sig	int	0	DEF	$ == (radixDigits / 2) * 4
2948	554	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
2948	554	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2948	554	8	DfpField.java	split	leading	boolean	0	DEF	$
2948	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
2948	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
29873	561	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
29873	561	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
29873	561	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
2949	563	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2949	563	8	DfpField.java	split	i	int	0	DEF	$ < sp
2949	563	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
2949	563	8	DfpField.java	split	sp	int	0	DEF	i < $
2949	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
2949	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
2950	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String.length() < highPrecisionDecimalDigits - 3
2950	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String == null
2950	578	8	DfpField.java	computeStringConstants	highPrecisionDecimalDigits	int	0	DEF	sqr2String.length() < $ - 3
29874	623	8	DfpField.java	computePi	i	int	0	NIL-FOR	$ < 20
2951	637	12	DfpField.java	computePi	ykM1	Dfp	0	DEF	yk.equals($)
2951	637	12	DfpField.java	computePi	yk	Dfp	0	DEF	$.equals(ykM1)
29875	659	8	DfpField.java	computeExp	i	int	0	NIL-FOR	$ < 10000
2952	664	12	DfpField.java	computeExp	y	Dfp	0	DEF	$.equals(py)
2952	664	12	DfpField.java	computeExp	py	Dfp	0	DEF	y.equals($)
29876	742	8	DfpField.java	computeLn	i	int	0	NIL-FOR	$ < 10000
2953	748	12	DfpField.java	computeLn	y	Dfp	0	DEF	$.equals(py)
2953	748	12	DfpField.java	computeLn	py	Dfp	0	DEF	y.equals($)
29881	54	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
29881	54	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
29881	54	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
2971	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '1'
2971	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2971	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '1'
2971	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2972	61	12	DfpMath.java	split	i	int	0	DEF	buf[$] == '.'
2972	61	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] == '.'
2973	66	12	DfpMath.java	split	sig	int	0	DEF	$ == (field.getRadixDigits() / 2) * 4
2973	66	12	DfpMath.java	split	field	DfpField	0	DEF	sig == ($.getRadixDigits() / 2) * 4
2974	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2974	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
2974	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2974	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
2974	71	12	DfpMath.java	split	leading	boolean	0	DEF	$
29882	78	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
29882	78	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
29882	78	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
2975	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2975	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
2975	80	12	DfpMath.java	split	i	int	0	DEF	$ < sp
2975	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2975	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
2975	80	12	DfpMath.java	split	sp	int	0	DEF	i < $
2976	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].equals($[1])
2976	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].classify() == Dfp.INFINITE
2977	162	8	DfpMath.java	splitPow	a	int	0	RET	$ == 0
2978	167	8	DfpMath.java	splitPow	a	int	0	DEF	$ < 0
29883	174	8	DfpMath.java	splitPow	a	int	0	NIL-DOWHILE	$ >= 1
2979	183	16	DfpMath.java	splitPow	trial	int	0	DEF	$ > a
2979	183	16	DfpMath.java	splitPow	a	int	0	DEF	trial > $
2980	198	8	DfpMath.java	splitPow	invert	boolean	0	DEF	$
2981	217	8	DfpMath.java	pow	a	int	0	RET	$ == 0
2982	222	8	DfpMath.java	pow	a	int	0	DEF	$ < 0
29884	228	8	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$ >= 1
29885	234	12	DfpMath.java	pow	trial	int	0	NIL-DOWHILE	a>$
29885	234	12	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$>trial
2983	249	8	DfpMath.java	pow	invert	boolean	0	DEF	$
2984	270	8	DfpMath.java	exp	ia	int	0	RET	$ > 2147483646
2985	275	8	DfpMath.java	exp	ia	int	0	RET	$ < -2147483646
29886	297	8	DfpMath.java	expInternal	i	int	0	NIL-FOR	$ < 90
2986	301	12	DfpMath.java	expInternal	y	Dfp	0	DEF	$.equals(py)
2986	301	12	DfpMath.java	expInternal	py	Dfp	0	DEF	y.equals($)
2987	324	8	DfpMath.java	log	a	Dfp	0	RET	$.isNaN()
2987	324	8	DfpMath.java	log	a	Dfp	0	RET	$.equals($.getZero())
2987	324	8	DfpMath.java	log	a	Dfp	0	RET	$.lessThan($.getZero())
2988	330	8	DfpMath.java	log	a	Dfp	0	RET	$.classify() == Dfp.INFINITE
29887	340	8	DfpMath.java	log	ix	int	0	NIL-WHILE	$ > 2
29888	353	8	DfpMath.java	log	spx	Dfp[]	0	NIL-WHILE	$[0].add($[1]).greaterThan(spy[0])
29888	353	8	DfpMath.java	log	spy	Dfp[]	0	NIL-WHILE	spx[0].add(spx[1]).greaterThan($[0])
29889	447	8	DfpMath.java	logInternal	i	int	0	NIL-FOR	$ < 10000
2989	453	12	DfpMath.java	logInternal	y	Dfp	0	DEF	$.equals(py)
2989	453	12	DfpMath.java	logInternal	py	Dfp	0	DEF	y.equals($)
2990	508	8	DfpMath.java	pow	x	Dfp	0	RET	$.getField().getRadixDigits() != y.getField().getRadixDigits()
2990	508	8	DfpMath.java	pow	y	Dfp	0	RET	x.getField().getRadixDigits() != $.getField().getRadixDigits()
2991	522	8	DfpMath.java	pow	zero	Dfp	0	RET	y.equals($)
2991	522	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(zero)
2992	526	8	DfpMath.java	pow	one	Dfp	0	RET	y.equals($)
2992	526	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(one)
2993	527	12	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
2994	535	8	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
2994	535	8	DfpMath.java	pow	y	Dfp	0	RET	$.isNaN()
2995	542	8	DfpMath.java	pow	zero	Dfp	0	RET	x.equals($)
2995	542	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(zero)
2996	543	12	DfpMath.java	pow	zero	Dfp	1	RET	Dfp.copysign(one, x).greaterThan($)
2996	543	12	DfpMath.java	pow	one	Dfp	1	RET	Dfp.copysign($, x).greaterThan(zero)
2996	543	12	DfpMath.java	pow	x	Dfp	1	RET	Dfp.copysign(one, $).greaterThan(zero)
2997	545	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2997	545	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2998	552	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
2998	552	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
2998	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
2998	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
2998	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
2999	554	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2999	554	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3000	561	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3000	561	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3001	570	8	DfpMath.java	pow	zero	Dfp	0	DEF	x.lessThan($)
3001	570	8	DfpMath.java	pow	x	Dfp	0	DEF	$.lessThan(zero)
3002	576	8	DfpMath.java	pow	one	Dfp	0	RET	x.greaterThan($)
3002	576	8	DfpMath.java	pow	x	Dfp	0	RET	$.greaterThan(one)
3002	576	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3003	577	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3003	577	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3004	584	8	DfpMath.java	pow	one	Dfp	0	RET	x.lessThan($)
3004	584	8	DfpMath.java	pow	x	Dfp	0	RET	$.lessThan(one)
3004	584	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3005	585	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3005	585	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3006	592	8	DfpMath.java	pow	one	Dfp	0	RET	x.equals($)
3006	592	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(one)
3006	592	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3007	597	8	DfpMath.java	pow	x	Dfp	0	RET	$.classify() == Dfp.INFINITE
3008	599	12	DfpMath.java	pow	invert	boolean	1	RET	$
3009	601	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3009	601	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3009	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3009	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3009	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3010	603	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3010	603	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3011	610	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3011	610	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3012	618	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3012	618	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3013	626	8	DfpMath.java	pow	invert	boolean	0	RET	$
3013	626	8	DfpMath.java	pow	y	Dfp	0	RET	$.rint().equals($)
3014	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.greaterThan($.newInstance(-100000000))
3014	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.lessThan($.newInstance(100000000))
3014	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.greaterThan(x.newInstance(-100000000))
3014	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.lessThan(x.newInstance(100000000))
3015	640	12	DfpMath.java	pow	v	Dfp	1	DEF	$.unequal(zero)
3015	640	12	DfpMath.java	pow	zero	Dfp	1	DEF	v.unequal($)
3016	656	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3017	658	12	DfpMath.java	pow	zero	Dfp	0	DEF	y.remainder(two).equals($)
3017	658	12	DfpMath.java	pow	two	Dfp	0	DEF	y.remainder($).equals(zero)
3017	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.remainder(two).equals(zero)
3017	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.rint().equals($)
29890	681	8	DfpMath.java	sinInternal	i	int	0	NIL-FOR	$ < 90
3018	687	12	DfpMath.java	sinInternal	y	Dfp	0	DEF	$.equals(py)
3018	687	12	DfpMath.java	sinInternal	py	Dfp	0	DEF	y.equals($)
29891	714	8	DfpMath.java	cosInternal	i	int	0	NIL-FOR	$ < 90
3019	721	12	DfpMath.java	cosInternal	y	Dfp	0	DEF	$.equals(py)
3019	721	12	DfpMath.java	cosInternal	py	Dfp	0	DEF	y.equals($)
3020	745	8	DfpMath.java	sin	zero	Dfp	0	DEF	x.lessThan($)
3020	745	8	DfpMath.java	sin	x	Dfp	0	DEF	$.lessThan(zero)
3021	754	8	DfpMath.java	sin	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3021	754	8	DfpMath.java	sin	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3022	759	8	DfpMath.java	sin	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3022	759	8	DfpMath.java	sin	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3023	774	8	DfpMath.java	sin	neg	boolean	0	DEF	$
3024	796	8	DfpMath.java	cos	zero	Dfp	0	DEF	x.lessThan($)
3024	796	8	DfpMath.java	cos	x	Dfp	0	DEF	$.lessThan(zero)
3025	804	8	DfpMath.java	cos	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3025	804	8	DfpMath.java	cos	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3026	810	8	DfpMath.java	cos	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3026	810	8	DfpMath.java	cos	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3027	824	8	DfpMath.java	cos	neg	boolean	0	DEF	$
29892	850	8	DfpMath.java	atanInternal	i	int	0	NIL-FOR	$ < 90
3028	855	12	DfpMath.java	atanInternal	y	Dfp	0	DEF	$.equals(py)
3028	855	12	DfpMath.java	atanInternal	py	Dfp	0	DEF	y.equals($)
3029	890	8	DfpMath.java	atan	zero	Dfp	0	DEF	x.lessThan($)
3029	890	8	DfpMath.java	atan	x	Dfp	0	DEF	$.lessThan(zero)
3030	895	8	DfpMath.java	atan	one	Dfp	0	DEF	x.greaterThan($)
3030	895	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(one)
3031	900	8	DfpMath.java	atan	ty	Dfp	0	DEF	x.greaterThan($)
3031	900	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(ty)
3032	923	8	DfpMath.java	atan	sub	boolean	0	DEF	$
3033	927	8	DfpMath.java	atan	recp	boolean	0	DEF	$
3034	931	8	DfpMath.java	atan	neg	boolean	0	DEF	$
3035	955	8	DfpMath.java	acos	a	Dfp	0	DEF	$.lessThan($.getZero())
3036	963	8	DfpMath.java	acos	negative	boolean	0	DEF	$
29923	105	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
29923	105	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
29924	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
29924	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
29924	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
29734	144	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < $.mainSetDimension
29734	144	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2551	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
2551	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
2552	172	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
2553	174	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
29700	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29700	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2554	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	1	DEF	$.previousState != null
2554	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
29701	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29701	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
29702	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29702	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
29733	258	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < $.mainSetDimension
29733	258	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2605	279	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
2625	246	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
2625	246	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
29754	257	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
29754	257	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
29755	264	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
29755	264	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
29756	293	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
29756	293	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
29757	298	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
29757	298	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
2626	318	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
2627	320	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
29758	322	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
29759	331	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29759	331	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
29760	349	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < D.$.length
29760	349	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < D.length
2628	371	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	1	DEF	$.previousState != null
2628	371	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
29761	372	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29761	372	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
29762	386	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29762	386	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2629	407	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
29763	417	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
29763	417	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
29764	426	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
29764	426	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
29765	436	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
29765	436	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
29766	457	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
29766	457	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
29767	480	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
29767	480	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
1204	103	8	EigenDecomposition.java	EigenDecomposition	THIS	EigenDecomposition	0	DEF	$.isSymmetric(matrix, true)
1204	103	8	EigenDecomposition.java	EigenDecomposition	matrix	RealMatrix	0	DEF	isSymmetric($, true)
28598	126	8	EigenDecomposition.java	EigenDecomposition	i	int	0	NIL-FOR	$<size
28598	126	8	EigenDecomposition.java	EigenDecomposition	size	int	0	NIL-FOR	i<$
28599	147	8	EigenDecomposition.java	isSymmetric	i	int	0	NIL-FOR	$ < rows
28599	147	8	EigenDecomposition.java	isSymmetric	rows	int	0	NIL-FOR	i < $
28600	148	12	EigenDecomposition.java	isSymmetric	j	int	0	NIL-FOR	$ < columns
28600	148	12	EigenDecomposition.java	isSymmetric	columns	int	0	NIL-FOR	j < $
1205	151	16	EigenDecomposition.java	isSymmetric	mij	double	0	NonSymmetricMatrixException:RET	FastMath.abs($ - mji) > (FastMath.max(FastMath.abs($), FastMath.abs(mji)) * eps)
1205	151	16	EigenDecomposition.java	isSymmetric	mji	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - $) > (FastMath.max(FastMath.abs(mij), FastMath.abs($)) * eps)
1205	151	16	EigenDecomposition.java	isSymmetric	eps	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - mji) > (FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * $)
1206	153	20	EigenDecomposition.java	isSymmetric	raiseException	boolean	0	NonSymmetricMatrixException	$
1207	175	8	EigenDecomposition.java	getV	THIS	EigenDecomposition	0	DEF	$.cachedV == null
28601	178	12	EigenDecomposition.java	getV	k	int	0	NIL-FOR	$ < m
28601	178	12	EigenDecomposition.java	getV	m	int	0	NIL-FOR	k < $
1208	199	8	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	$.cachedD == null
1209	218	8	EigenDecomposition.java	getVT	THIS	EigenDecomposition	0	DEF	$.cachedVt == null
28602	221	12	EigenDecomposition.java	getVT	k	int	0	NIL-FOR	$ < m
28602	221	12	EigenDecomposition.java	getVT	m	int	0	NIL-FOR	k < $
28603	491	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n - 1
28603	491	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $ - 1
28604	500	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
28604	500	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1210	501	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1210	501	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1210	501	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1211	504	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) > maxAbsoluteValue
1211	504	12	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) > maxAbsoluteValue
1211	504	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) > $
1212	509	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0
28605	510	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
28605	510	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1213	511	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue
1213	511	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) <= Precision.EPSILON * maxAbsoluteValue
1213	511	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * $
1214	514	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) <= Precision.EPSILON * maxAbsoluteValue
1214	514	16	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) <= Precision.EPSILON * maxAbsoluteValue
1214	514	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) <= Precision.EPSILON * $
28606	520	8	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
28606	520	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
28607	523	12	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-DOWHILE	$ != j
28607	523	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-DOWHILE	m != $
28608	524	16	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-FOR	$ < n - 1
28608	524	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	m < $ - 1
1215	527	20	EigenDecomposition.java	findEigenVectors	delta	double	0	DEF	FastMath.abs(e[m]) + $ == $
1215	527	20	EigenDecomposition.java	findEigenVectors	m	int	0	DEF	FastMath.abs(e[$]) + delta == delta
1215	527	20	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[m]) + delta == delta
1216	531	16	EigenDecomposition.java	findEigenVectors	m	int	0	MaxCountExceededException	$ != j
1216	531	16	EigenDecomposition.java	findEigenVectors	j	int	0	MaxCountExceededException	m != $
1217	532	20	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	MaxCountExceededException	its == $.maxIter
1217	532	20	EigenDecomposition.java	findEigenVectors	its	int	0	MaxCountExceededException	$ == maxIter
1218	539	20	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	$ < 0.0
28609	548	20	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ >= j
28609	548	20	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	i >= $
1219	551	24	EigenDecomposition.java	findEigenVectors	p	double	1	DEF	FastMath.abs($) >= FastMath.abs(q)
1219	551	24	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	FastMath.abs(p) >= FastMath.abs($)
1220	564	24	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	e[$ + 1] == 0.0
1220	564	24	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	$[i + 1] == 0.0
28610	574	24	EigenDecomposition.java	findEigenVectors	ia	int	0	NIL-FOR	$ < n
28610	574	24	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	ia < $
1221	580	20	EigenDecomposition.java	findEigenVectors	t	double	0	DEF	$ == 0.0
1221	580	20	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	$ >= j
1221	580	20	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	i >= $
28611	591	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
28611	591	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
28612	594	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
28612	594	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
1222	595	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.realEigenvalues[j] > p
1222	595	16	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	realEigenvalues[$] > p
1222	595	16	EigenDecomposition.java	findEigenVectors	p	double	0	DEF	realEigenvalues[j] > $
1223	600	12	EigenDecomposition.java	findEigenVectors	k	int	0	DEF	$ != i
1223	600	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	k != $
28613	603	16	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
28613	603	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
28614	613	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
28614	613	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1224	614	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1224	614	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1224	614	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1225	619	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$!=0.0
28615	620	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
28615	620	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1226	621	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue
1226	621	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) < Precision.EPSILON * maxAbsoluteValue
1226	621	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * $
28616	628	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
28616	628	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
28617	629	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
28617	629	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
29629	84	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$ < oldChromosomes.size()
29629	84	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i < $.size()
2434	99	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ < 0
2434	99	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ > 1
29745	220	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
29746	226	6	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
2615	228	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2615	228	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2616	233	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2617	235	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance == null
29747	236	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
29747	236	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
29747	236	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
29748	240	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
29748	240	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
29748	240	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
2618	250	8	EmbeddedRungeKuttaIntegrator.java	integrate	forward	boolean	1	DEF	$
2619	251	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize >= t
2619	251	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize >= $
2620	255	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize <= t
2620	255	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize <= $
29749	261	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
29749	261	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
29750	263	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
29750	263	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
29750	263	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
29751	265	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
29751	265	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
29752	276	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
29752	276	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
29752	276	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
29753	278	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
29753	278	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2621	286	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
2622	303	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.isLastStep
2623	308	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2624	323	10	EmbeddedRungeKuttaIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
2353	218	12	EmpiricalDistribution.java	load	THIS	EmpiricalDistribution	0	ZeroException	$.sampleStats.getN() == 0
2354	408	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	DEF	$.binStats.isEmpty()
29597	411	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
29597	411	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
29598	425	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount-1
29598	425	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
2355	453	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	MathIllegalStateException	$.loaded
29599	461	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
29599	461	8	EmpiricalDistribution.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
2356	462	11	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	RET	x <= $.upperBounds[i]
2356	462	11	EmpiricalDistribution.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
2356	462	11	EmpiricalDistribution.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
2357	464	15	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
2358	465	19	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
29600	525	8	EmpiricalDistribution.java	getUpperBounds	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount - 1
29600	525	8	EmpiricalDistribution.java	getUpperBounds	i	int	0	NIL-FOR	$ < binCount - 1
2671	77	8	EquationsMapper.java	extractEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
2671	77	8	EquationsMapper.java	extractEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
2672	92	8	EquationsMapper.java	insertEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
2672	92	8	EquationsMapper.java	insertEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
2474	67	8	Erf.java	erf	x	double	0	RET	FastMath.abs($) > 40
2475	98	8	Erf.java	erfc	x	double	0	RET	FastMath.abs($) > 40
2476	116	8	Erf.java	erf	x1	double	0	RET	$ > x2
2476	116	8	Erf.java	erf	x2	double	0	RET	x1 > $
29478	64	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
29478	64	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
29478	64	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
29479	68	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
29479	68	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
29479	68	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
2149	77	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
2150	81	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point.$.length != otherPoint.$.length
2150	81	8	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point.length != $.length
29480	84	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < $.point.$.length
29480	84	8	EuclideanIntegerPoint.java	equals	i	int	0	NIL-FOR	$ < point.length
2151	85	12	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point[i] != otherPoint[i]
2151	85	12	EuclideanIntegerPoint.java	equals	i	int	0	RET	point[$] != otherPoint[$]
2151	85	12	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point[i] != $[i]
29481	110	8	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < coordinates.$.length
29481	110	8	EuclideanIntegerPoint.java	toString	i	int	0	NIL-FOR	$ < coordinates.length
29481	110	8	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	NIL-FOR	i < $.length
2152	112	12	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	DEF	i < coordinates.$.length - 1
2152	112	12	EuclideanIntegerPoint.java	toString	i	int	0	DEF	$ < coordinates.length - 1
2152	112	12	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	DEF	i < $.length - 1
2657	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	1	DEF	$.previousState != null
2657	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
29791	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29791	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
29792	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29792	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2673	157	8	EventState.java	reinitializeBegin	THIS	EventState	0	DEF	$.g0 == 0
2674	193	12	EventState.java	evaluateStep	THIS	EventState	0	RET	FastMath.abs(dt) < $.convergence
2674	193	12	EventState.java	evaluateStep	dt	double	0	RET	FastMath.abs($) < convergence
29814	209	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
29814	209	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
2675	217	16	EventState.java	evaluateStep	THIS	EventState	1	RET	$.g0Positive ^ (gb >= 0)
2675	217	16	EventState.java	evaluateStep	gb	double	1	RET	g0Positive ^ ($ >= 0)
2676	225	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	$.solver instanceof BracketedUnivariateSolver<?>
2677	246	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - $.previousEventTime) <= $.convergence
2677	246	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Double.isNaN($.previousEventTime)
2677	246	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - ta) <= $.convergence
2677	246	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - previousEventTime) <= convergence
2677	246	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - ta) <= convergence
2677	246	20	EventState.java	evaluateStep	ta	double	1	DEF	FastMath.abs(root - $) <= convergence
2678	254	27	EventState.java	evaluateStep	THIS	EventState	1	RET	Double.isNaN($.previousEventTime)
2678	254	27	EventState.java	evaluateStep	THIS	EventState	1	RET	FastMath.abs($.previousEventTime - root) > $.convergence
2678	254	27	EventState.java	evaluateStep	root	double	1	RET	FastMath.abs(previousEventTime - $) > convergence
2679	301	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
2679	301	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	FastMath.abs($.pendingEventTime - t) <= $.convergence
2679	301	8	EventState.java	stepAccepted	t	double	1	DEF	FastMath.abs(pendingEventTime - $) <= convergence
2680	329	8	EventState.java	reset	THIS	EventState	0	RET	FastMath.abs($.pendingEventTime - t) <= $.convergence
2680	329	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
2680	329	8	EventState.java	reset	t	double	0	RET	FastMath.abs(pendingEventTime - $) <= convergence
2681	333	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.$.Action.RESET_STATE
29645	174	8	ExceptionContext.java	buildMessage	i	int	0	NIL-FOR	$ < len
29645	174	8	ExceptionContext.java	buildMessage	len	int	0	NIL-FOR	i < $
2495	180	12	ExceptionContext.java	buildMessage	count	int	0	DEF	++$ < len
2495	180	12	ExceptionContext.java	buildMessage	len	int	0	DEF	++count < $
29646	228	8	ExceptionContext.java	serializeMessages	i	int	0	NIL-FOR	$ < len
29646	228	8	ExceptionContext.java	serializeMessages	len	int	0	NIL-FOR	i < $
29647	236	12	ExceptionContext.java	serializeMessages	j	int	0	NIL-FOR	$ < aLen
29647	236	12	ExceptionContext.java	serializeMessages	aLen	int	0	NIL-FOR	j < $
2496	237	16	ExceptionContext.java	serializeMessages	j	int	1	DEF	args[$] instanceof Serializable
2496	237	16	ExceptionContext.java	serializeMessages	args	Object[]	1	DEF	$[j] instanceof Serializable
29648	263	8	ExceptionContext.java	deSerializeMessages	i	int	0	NIL-FOR	$ < len
29648	263	8	ExceptionContext.java	deSerializeMessages	len	int	0	NIL-FOR	i < $
29649	270	12	ExceptionContext.java	deSerializeMessages	j	int	0	NIL-FOR	$ < aLen
29649	270	12	ExceptionContext.java	deSerializeMessages	aLen	int	0	NIL-FOR	j < $
2497	293	12	ExceptionContext.java	serializeContext	value	Object	1	DEF	$ instanceof Serializable
29650	316	8	ExceptionContext.java	deSerializeContext	i	int	0	NIL-FOR	$ < len
29650	316	8	ExceptionContext.java	deSerializeContext	len	int	0	NIL-FOR	i < $
2712	96	8	ExpandableStatefulODE.java	getTotalDimension	THIS	ExpandableStatefulODE	1	RET	$.components.isEmpty()
2713	135	8	ExpandableStatefulODE.java	addSecondaryEquations	THIS	ExpandableStatefulODE	1	DEF	$.components.isEmpty()
29820	164	8	ExpandableStatefulODE.java	getSecondaryMappers	THIS	ExpandableStatefulODE	0	NIL-FOR	i < mappers.$.length
29820	164	8	ExpandableStatefulODE.java	getSecondaryMappers	i	int	0	NIL-FOR	$ < mappers.length
29820	164	8	ExpandableStatefulODE.java	getSecondaryMappers	mappers	EquationsMapper[]	0	NIL-FOR	i < $.length
2714	192	8	ExpandableStatefulODE.java	setPrimaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	primaryState.$.length != $.primaryState.length
2714	192	8	ExpandableStatefulODE.java	setPrimaryState	primaryState	double[]	0	DimensionMismatchException	$.length != this.primaryState.length
2715	229	8	ExpandableStatefulODE.java	setSecondaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	secondaryState.$.length != localArray.$.length
2715	229	8	ExpandableStatefulODE.java	setSecondaryState	localArray	double[]	0	DimensionMismatchException	secondaryState.length != $.length
2715	229	8	ExpandableStatefulODE.java	setSecondaryState	secondaryState	double[]	0	DimensionMismatchException	$.length != localArray.length
2716	265	8	ExpandableStatefulODE.java	setCompleteState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	completeState.$.length != $.getTotalDimension()
2716	265	8	ExpandableStatefulODE.java	setCompleteState	completeState	double[]	0	DimensionMismatchException	$.length != getTotalDimension()
996	64	8	ExponentialDistribution.java	ExponentialDistribution	mean	double	0	NotStrictlyPositiveException	$ <= 0
997	93	8	ExponentialDistribution.java	density	x	double	0	RET	$ < 0
998	111	8	ExponentialDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
999	129	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
999	129	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
1000	131	15	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
1038	89	8	FDistribution.java	FDistribution	numeratorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1039	93	8	FDistribution.java	FDistribution	denominatorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1040	144	8	FDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1041	193	8	FDistribution.java	getNumericalMean	denominatorDF	double	0	RET	$ > 2
1042	214	8	FDistribution.java	getNumericalVariance	THIS	FDistribution	0	DEF	$.numericalVarianceIsCalculated
1043	229	8	FDistribution.java	calculateNumericalVariance	denominatorDF	double	0	RET	$ > 4
2498	98	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	type == $.TransformType.FORWARD
2498	98	8	FastCosineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
2499	99	12	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
2500	107	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	1	DEF	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
2501	147	8	FastCosineTransformer.java	fct	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
2502	152	8	FastCosineTransformer.java	fct	n	int	0	RET	$ == 1
29651	164	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
29651	164	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
29652	179	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
29652	179	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
29665	139	8	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	NIL-FOR	$ < n
29665	139	8	FastFourierTransformer.java	bitReversalShuffle2	n	int	0	NIL-FOR	i < $
2514	140	12	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	DEF	$ < j
2514	140	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	DEF	i < $
29666	152	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ <= j
29666	152	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ > 0
29666	152	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	NIL-WHILE	k <= $
2515	178	16	FastFourierTransformer.java	normalizeTransformedData	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
2515	178	16	FastFourierTransformer.java	normalizeTransformedData	type	TransformType	0	DEF	$ == TransformType.INVERSE
29667	180	20	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
29667	180	20	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
29668	188	16	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
29668	188	16	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
2516	227	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataRI.$.length != 2
2516	227	8	FastFourierTransformer.java	transformInPlace	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
2517	232	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataR.$.length != dataI.$.length
2517	232	8	FastFourierTransformer.java	transformInPlace	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
2517	232	8	FastFourierTransformer.java	transformInPlace	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
2518	237	8	FastFourierTransformer.java	transformInPlace	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
2519	243	8	FastFourierTransformer.java	transformInPlace	n	int	1	RET	$ == 1
2520	245	15	FastFourierTransformer.java	transformInPlace	n	int	0	RET	$ == 2
2521	265	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	1	DEF	type == $.TransformType.INVERSE
2521	265	8	FastFourierTransformer.java	transformInPlace	type	TransformType	1	DEF	$ == TransformType.INVERSE
29669	266	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
29669	266	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
29670	295	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
29670	295	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
29671	327	8	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-WHILE	lastN0 < $
29671	327	8	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-WHILE	$ < n
2522	332	12	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
2522	332	12	FastFourierTransformer.java	transformInPlace	type	TransformType	0	DEF	$ == TransformType.INVERSE
29672	337	12	FastFourierTransformer.java	transformInPlace	destEvenStartIndex	int	0	NIL-FOR	$ < n
29672	337	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	destEvenStartIndex < $
29673	343	16	FastFourierTransformer.java	transformInPlace	r	int	0	NIL-FOR	$ < lastN0
29673	343	16	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-FOR	r < $
29674	456	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
29674	456	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
29674	456	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
2523	478	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
2523	478	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
2523	478	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
29675	480	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
29675	480	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
29675	480	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
29676	488	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
29676	488	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
29676	488	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
2524	495	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
2524	495	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
2524	495	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
29677	501	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
29677	501	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
29677	501	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
29677	501	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
2506	50	8	FastHadamardTransformer.java	transform	THIS	FastHadamardTransformer	0	RET	type == $.TransformType.FORWARD
2506	50	8	FastHadamardTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
2507	235	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
29657	249	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
29657	249	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
29658	257	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
29658	257	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
29659	262	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
29659	262	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
2508	287	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
29660	301	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
29660	301	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
29661	309	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
29661	309	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
29662	314	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
29662	314	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
235	361	8	FastMath.java	doubleHighPart	d	double	0	RET	$ < Precision.SAFE_MIN
235	361	8	FastMath.java	doubleHighPart	d	double	0	RET	$ > -Precision.SAFE_MIN
236	383	6	FastMath.java	cosh	x	double	0	RET	$ != $
237	392	6	FastMath.java	cosh	x	double	0	RET	$ > 20.0
238	396	6	FastMath.java	cosh	x	double	0	RET	$ < -20
239	401	6	FastMath.java	cosh	x	double	0	DEF	$ < 0.0
240	443	6	FastMath.java	sinh	x	double	0	RET	$ != $
241	452	6	FastMath.java	sinh	x	double	0	RET	$ > 20.0
242	456	6	FastMath.java	sinh	x	double	0	RET	$ < -20
243	460	6	FastMath.java	sinh	x	double	0	RET	$ == 0
244	464	6	FastMath.java	sinh	x	double	0	DEF	$ < 0.0
245	471	6	FastMath.java	sinh	x	double	1	DEF	$ > 0.25
246	545	6	FastMath.java	sinh	negate	boolean	0	DEF	$
247	559	6	FastMath.java	tanh	x	double	0	RET	$ != $
248	569	6	FastMath.java	tanh	x	double	0	RET	$ > 20.0
249	573	6	FastMath.java	tanh	x	double	0	RET	$ < -20
250	577	6	FastMath.java	tanh	x	double	0	RET	$ == 0
251	581	6	FastMath.java	tanh	x	double	0	DEF	$ < 0.0
252	587	6	FastMath.java	tanh	x	double	1	DEF	$ >= 0.5
253	669	6	FastMath.java	tanh	negate	boolean	0	DEF	$
254	690	8	FastMath.java	asinh	a	double	0	DEF	$ < 0
255	696	8	FastMath.java	asinh	a	double	1	DEF	$ > 0.167
256	700	12	FastMath.java	asinh	a	double	1	DEF	$ > 0.097
257	702	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.036
258	704	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.0036
259	720	8	FastMath.java	atanh	a	double	0	DEF	$ < 0
260	726	8	FastMath.java	atanh	a	double	1	DEF	$ > 0.15
261	730	12	FastMath.java	atanh	a	double	1	DEF	$ > 0.087
262	732	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.031
263	734	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.003
264	826	8	FastMath.java	exp	x	double	1	RET	$ < 0.0
265	829	12	FastMath.java	exp	intVal	int	0	RET	$ > 746
266	830	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
267	837	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
268	840	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
269	847	12	FastMath.java	exp	intVal	int	0	RET	$ == 709
270	850	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
271	866	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
272	867	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
273	919	8	FastMath.java	exp	extra	double	1	DEF	$ != 0.0
274	925	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
275	948	8	FastMath.java	expm1	x	double	0	RET	$ == 0.0
275	948	8	FastMath.java	expm1	x	double	0	RET	$ != $
276	952	8	FastMath.java	expm1	x	double	0	RET	$ <= -1.0
276	952	8	FastMath.java	expm1	x	double	0	RET	$ >= 1.0
277	957	12	FastMath.java	expm1	x	double	1	RET	$ > 0.0
278	972	8	FastMath.java	expm1	x	double	0	DEF	$ < 0.0
279	1048	8	FastMath.java	expm1	negative	boolean	0	DEF	$
280	1081	8	FastMath.java	expm1	hiPrecOut	double	0	DEF	$ != null
281	1106	8	FastMath.java	log	x	double	0	RET	$==0
282	1112	8	FastMath.java	log	bits	long	0	RET	($ & 0x8000000000000000L) != 0
282	1112	8	FastMath.java	log	x	double	0	RET	$ != $
283	1113	12	FastMath.java	log	x	double	0	RET	$ != 0.0
284	1114	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
285	1123	8	FastMath.java	log	x	double	0	RET	$ == Double.POSITIVE_INFINITY
286	1124	12	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
287	1134	8	FastMath.java	log	bits	long	0	RET	($ & 0x7ff0000000000000L) == 0
288	1136	12	FastMath.java	log	x	double	0	RET	$ == 0
289	1138	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
28293	1147	12	FastMath.java	log	bits	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
290	1154	8	FastMath.java	log	exp	int	0	RET	$ == 0
290	1154	8	FastMath.java	log	exp	int	0	RET	$ == -1
291	1155	12	FastMath.java	log	x	double	0	RET	$ < 1.01
291	1155	12	FastMath.java	log	x	double	0	RET	$ > 0.99
291	1155	12	FastMath.java	log	hiPrec	double[]	0	RET	$ == null
28294	1171	16	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
292	1218	8	FastMath.java	log	hiPrec	double[]	1	DEF	$ != null
28295	1236	12	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
293	1319	8	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
294	1333	8	FastMath.java	log1p	x	double	0	RET	$ == -1
295	1337	8	FastMath.java	log1p	x	double	0	RET	$ > 0
295	1337	8	FastMath.java	log1p	x	double	0	RET	1/$ == 0
296	1341	8	FastMath.java	log1p	x	double	0	RET	$<-1e-6
296	1341	8	FastMath.java	log1p	x	double	0	RET	$>1e-6
297	1348	12	FastMath.java	log1p	lores	double	0	RET	Double.isInfinite($)
298	1378	8	FastMath.java	log10	lores	double	0	RET	Double.isInfinite($)
299	1422	8	FastMath.java	pow	y	double	0	RET	$ == 0.0
300	1426	8	FastMath.java	pow	x	double	0	RET	$ != $
301	1431	8	FastMath.java	pow	x	double	0	RET	$ == 0
302	1433	12	FastMath.java	pow	bits	long	0	RET	($ & 0x8000000000000000L) != 0
303	1437	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
303	1437	16	FastMath.java	pow	yi	long	0	RET	y == $
303	1437	16	FastMath.java	pow	y	double	0	RET	$ == yi
303	1437	16	FastMath.java	pow	y	double	0	RET	$ < 0
304	1441	16	FastMath.java	pow	yi	long	0	RET	y == $
304	1441	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
304	1441	16	FastMath.java	pow	y	double	0	RET	$ > 0
304	1441	16	FastMath.java	pow	y	double	0	RET	$ == yi
305	1446	12	FastMath.java	pow	y	double	0	RET	$ < 0
306	1449	12	FastMath.java	pow	y	double	0	RET	$ > 0
307	1456	8	FastMath.java	pow	x	double	0	RET	$ == Double.POSITIVE_INFINITY
308	1457	12	FastMath.java	pow	y	double	0	RET	$ != $
309	1460	12	FastMath.java	pow	y	double	1	RET	$ < 0.0
310	1467	8	FastMath.java	pow	y	double	0	RET	$ == Double.POSITIVE_INFINITY
311	1468	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
312	1472	12	FastMath.java	pow	x	double	1	RET	$ * $ > 1.0
313	1479	8	FastMath.java	pow	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
314	1480	12	FastMath.java	pow	y	double	0	RET	$ != $
315	1484	12	FastMath.java	pow	y	double	0	RET	$ < 0
316	1486	16	FastMath.java	pow	yi	long	0	RET	y == $
316	1486	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
316	1486	16	FastMath.java	pow	y	double	0	RET	$ == yi
317	1493	12	FastMath.java	pow	y	double	0	RET	$ > 0
318	1495	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
318	1495	16	FastMath.java	pow	yi	long	0	RET	y == $
318	1495	16	FastMath.java	pow	y	double	0	RET	$ == yi
319	1503	8	FastMath.java	pow	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
320	1505	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
321	1509	12	FastMath.java	pow	x	double	1	RET	$ * $ < 1.0
322	1517	8	FastMath.java	pow	x	double	0	RET	$ < 0
323	1519	12	FastMath.java	pow	THIS	FastMath	0	RET	y <= -$.TWO_POWER_52
323	1519	12	FastMath.java	pow	THIS	FastMath	0	RET	y >= $.TWO_POWER_52
323	1519	12	FastMath.java	pow	y	double	0	RET	$ <= -TWO_POWER_52
323	1519	12	FastMath.java	pow	y	double	0	RET	$ >= TWO_POWER_52
324	1523	12	FastMath.java	pow	y	double	1	RET	$ == (long) $
325	1534	8	FastMath.java	pow	y	double	1	DEF	$ > -8e298
325	1534	8	FastMath.java	pow	y	double	1	DEF	$ < 8e298
326	1547	8	FastMath.java	pow	lores	double	0	RET	Double.isInfinite($)
327	1729	8	FastMath.java	sinQ	xb	double	0	DEF	$ != 0.0
328	1859	8	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
329	1892	8	FastMath.java	tanQ	xb	double	0	DEF	$ != 0.0
330	1896	12	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
331	1938	8	FastMath.java	reducePayneHanek	shift	int	1	DEF	$ != 0
332	1969	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
332	1969	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
332	1969	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
332	1969	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
332	1969	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
333	1983	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
333	1983	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
333	1983	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
333	1983	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
333	1983	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
334	2003	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
334	2003	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
334	2003	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
334	2003	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
334	2003	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
335	2055	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
335	2055	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
335	2055	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
335	2055	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
335	2055	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
336	2069	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
336	2069	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
336	2069	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
336	2069	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
336	2069	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
337	2089	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
337	2089	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
337	2089	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
337	2089	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
337	2089	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
338	2111	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
338	2111	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
338	2111	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
338	2111	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
338	2111	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
339	2142	8	FastMath.java	sin	x	double	0	DEF	$ < 0
340	2148	8	FastMath.java	sin	xa	double	0	RET	$ == 0.0
341	2150	12	FastMath.java	sin	bits	long	0	RET	$ < 0
342	2156	8	FastMath.java	sin	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
342	2156	8	FastMath.java	sin	xa	double	0	RET	$ != $
343	2161	8	FastMath.java	sin	xa	double	1	DEF	$ > 3294198.0
344	2170	15	FastMath.java	sin	xa	double	0	DEF	$ > 1.5707963267948966
345	2195	16	FastMath.java	sin	remA	double	0	DEF	$ > 0.0
346	2209	8	FastMath.java	sin	negative	boolean	0	DEF	$
347	2237	8	FastMath.java	cos	x	double	0	DEF	$ < 0
348	2241	8	FastMath.java	cos	xa	double	0	RET	$ != $
348	2241	8	FastMath.java	cos	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
349	2247	8	FastMath.java	cos	xa	double	1	DEF	$ > 3294198.0
350	2256	15	FastMath.java	cos	xa	double	0	DEF	$ > 1.5707963267948966
351	2281	16	FastMath.java	cos	remA	double	0	DEF	$ > 0.0
352	2323	8	FastMath.java	tan	x	double	0	DEF	$ < 0
353	2329	8	FastMath.java	tan	xa	double	0	RET	$ == 0.0
354	2331	12	FastMath.java	tan	bits	long	0	RET	$ < 0
355	2337	8	FastMath.java	tan	xa	double	0	RET	$ != $
355	2337	8	FastMath.java	tan	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
356	2343	8	FastMath.java	tan	xa	double	1	DEF	$ > 3294198.0
357	2352	15	FastMath.java	tan	xa	double	0	DEF	$ > 1.5707963267948966
358	2377	16	FastMath.java	tan	remA	double	0	DEF	$ > 0.0
359	2391	8	FastMath.java	tan	xa	double	0	DEF	$ > 1.5
360	2407	8	FastMath.java	tan	quadrant	int	1	DEF	($ & 1) == 0
361	2413	8	FastMath.java	tan	negative	boolean	0	DEF	$
362	2439	8	FastMath.java	atan	xa	double	0	RET	$ == 0.0
363	2443	8	FastMath.java	atan	xa	double	0	DEF	$ < 0
364	2450	8	FastMath.java	atan	xa	double	0	RET	$ > 1.633123935319537E16
365	2455	8	FastMath.java	atan	xa	double	1	DEF	$ < 1
366	2477	8	FastMath.java	atan	idx	int	1	DEF	$ == 0
367	2555	8	FastMath.java	atan	leftPlane	boolean	0	DEF	$
368	2569	8	FastMath.java	atan	negate	boolean	0	DEF	$ ^ leftPlane
368	2569	8	FastMath.java	atan	leftPlane	boolean	0	DEF	negate ^ $
369	2583	8	FastMath.java	atan2	y	double	0	RET	$ != $
369	2583	8	FastMath.java	atan2	x	double	0	RET	$ != $
370	2587	8	FastMath.java	atan2	y	double	0	RET	$ == 0
371	2592	12	FastMath.java	atan2	invx	double	0	RET	$ == 0
372	2593	16	FastMath.java	atan2	x	double	1	RET	$ > 0
373	2600	12	FastMath.java	atan2	invx	double	1	RET	$ < 0
373	2600	12	FastMath.java	atan2	x	double	1	RET	$ < 0
374	2601	16	FastMath.java	atan2	invy	double	1	RET	$ < 0
374	2601	16	FastMath.java	atan2	y	double	1	RET	$ < 0
375	2613	8	FastMath.java	atan2	y	double	0	RET	$ == Double.POSITIVE_INFINITY
376	2614	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
377	2618	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
378	2625	8	FastMath.java	atan2	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
379	2626	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
380	2630	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
381	2637	8	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
382	2638	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
382	2638	12	FastMath.java	atan2	y	double	0	RET	$ > 0
383	2642	12	FastMath.java	atan2	y	double	0	RET	$ < 0
383	2642	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
384	2647	8	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
385	2649	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
385	2649	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0.0
386	2653	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
386	2653	12	FastMath.java	atan2	y	double	0	RET	$ < 0
387	2660	8	FastMath.java	atan2	x	double	0	RET	$ == 0
388	2661	12	FastMath.java	atan2	y	double	0	RET	$ > 0
388	2661	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
389	2665	12	FastMath.java	atan2	y	double	0	RET	$ < 0
389	2665	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
390	2672	8	FastMath.java	atan2	r	double	0	RET	Double.isInfinite($)
391	2689	8	FastMath.java	atan2	ra	double	0	DEF	$ == 0
392	2704	6	FastMath.java	asin	x	double	0	RET	$ != $
393	2708	6	FastMath.java	asin	x	double	0	RET	$ > 1.0
393	2708	6	FastMath.java	asin	x	double	0	RET	$ < -1.0
394	2712	6	FastMath.java	asin	x	double	0	RET	$ == 1.0
395	2716	6	FastMath.java	asin	x	double	0	RET	$ == -1.0
396	2720	6	FastMath.java	asin	x	double	0	RET	$ == 0.0
397	2780	6	FastMath.java	acos	x	double	0	RET	$ != $
398	2784	6	FastMath.java	acos	x	double	0	RET	$ > 1.0
398	2784	6	FastMath.java	acos	x	double	0	RET	$ < -1.0
399	2788	6	FastMath.java	acos	x	double	0	RET	$ == -1.0
400	2792	6	FastMath.java	acos	x	double	0	RET	$ == 1.0
401	2796	6	FastMath.java	acos	x	double	0	RET	$ == 0
402	2840	6	FastMath.java	acos	r	double	0	RET	Double.isInfinite($)
403	2867	6	FastMath.java	cbrt	exponent	int	0	RET	$ == -1023
404	2868	10	FastMath.java	cbrt	x	double	0	RET	$ == 0
405	2879	6	FastMath.java	cbrt	exponent	int	0	RET	$ == 1024
406	2934	6	FastMath.java	cbrt	subnormal	boolean	0	DEF	$
407	2948	8	FastMath.java	toRadians	x	double	0	RET	$ == 0.0
407	2948	8	FastMath.java	toRadians	x	double	0	RET	Double.isInfinite($)
408	2960	8	FastMath.java	toRadians	result	double	0	DEF	$ == 0
409	2973	8	FastMath.java	toDegrees	x	double	0	RET	$ == 0.0
409	2973	8	FastMath.java	toDegrees	x	double	0	RET	Double.isInfinite($)
410	3029	8	FastMath.java	ulp	x	double	0	RET	Double.isInfinite($)
411	3041	8	FastMath.java	ulp	x	float	0	RET	Float.isInfinite($)
412	3056	8	FastMath.java	scalb	n	int	0	RET	$ > -1023
412	3056	8	FastMath.java	scalb	n	int	0	RET	$ < 1024
413	3061	8	FastMath.java	scalb	d	double	0	RET	Double.isInfinite($)
413	3061	8	FastMath.java	scalb	d	double	0	RET	$ == 0
413	3061	8	FastMath.java	scalb	d	double	0	RET	Double.isNaN($)
414	3064	8	FastMath.java	scalb	n	int	0	RET	$ < -2098
415	3067	8	FastMath.java	scalb	n	int	0	RET	$ > 2097
416	3080	8	FastMath.java	scalb	n	int	1	RET	$ < 0
417	3082	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
418	3085	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -53
419	3094	16	FastMath.java	scalb	mostSignificantLostBit	long	0	DEF	$ != 0
420	3106	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
28296	3109	16	FastMath.java	scalb	mantissa	long	0	NIL-WHILE	($ >>> 52) != 1
421	3116	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
422	3122	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
423	3140	8	FastMath.java	scalb	n	int	0	RET	$ > -127
423	3140	8	FastMath.java	scalb	n	int	0	RET	$ < 128
424	3145	8	FastMath.java	scalb	f	float	0	RET	Float.isInfinite($)
424	3145	8	FastMath.java	scalb	f	float	0	RET	$ == 0f
424	3145	8	FastMath.java	scalb	f	float	0	RET	Float.isNaN($)
425	3148	8	FastMath.java	scalb	n	int	0	RET	$ < -277
426	3151	8	FastMath.java	scalb	n	int	0	RET	$ > 276
427	3164	8	FastMath.java	scalb	n	int	1	RET	$ < 0
428	3166	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
429	3169	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -24
430	3178	16	FastMath.java	scalb	mostSignificantLostBit	int	0	DEF	$ != 0
431	3190	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
28297	3193	16	FastMath.java	scalb	mantissa	int	0	NIL-WHILE	($ >>> 23) != 1
432	3200	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
433	3206	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
434	3249	8	FastMath.java	nextAfter	d	double	1	RET	Double.isNaN($)
434	3249	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
435	3251	15	FastMath.java	nextAfter	d	double	1	RET	$ == direction
435	3251	15	FastMath.java	nextAfter	direction	double	1	RET	d == $
436	3253	15	FastMath.java	nextAfter	d	double	1	RET	Double.isInfinite($)
437	3255	15	FastMath.java	nextAfter	d	double	0	RET	$ == 0
438	3263	8	FastMath.java	nextAfter	sign	long	1	RET	(direction < d) ^ ($ == 0L)
438	3263	8	FastMath.java	nextAfter	d	double	1	RET	(direction < $) ^ (sign == 0L)
438	3263	8	FastMath.java	nextAfter	direction	double	1	RET	($ < d) ^ (sign == 0L)
439	3305	8	FastMath.java	nextAfter	f	float	1	RET	Double.isNaN($)
439	3305	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
440	3307	15	FastMath.java	nextAfter	f	float	1	RET	$ == direction
440	3307	15	FastMath.java	nextAfter	direction	double	1	RET	f == $
441	3309	15	FastMath.java	nextAfter	f	float	1	RET	Float.isInfinite($)
442	3311	15	FastMath.java	nextAfter	f	float	0	RET	$ == 0f
443	3319	8	FastMath.java	nextAfter	sign	int	1	RET	(direction < f) ^ ($ == 0)
443	3319	8	FastMath.java	nextAfter	f	float	1	RET	(direction < $) ^ (sign == 0)
443	3319	8	FastMath.java	nextAfter	direction	double	1	RET	($ < f) ^ (sign == 0)
444	3334	8	FastMath.java	floor	x	double	0	RET	$ != $
445	3338	8	FastMath.java	floor	THIS	FastMath	0	RET	x <= -$.TWO_POWER_52
445	3338	8	FastMath.java	floor	THIS	FastMath	0	RET	x >= $.TWO_POWER_52
445	3338	8	FastMath.java	floor	x	double	0	RET	$ <= -TWO_POWER_52
445	3338	8	FastMath.java	floor	x	double	0	RET	$ >= TWO_POWER_52
446	3343	8	FastMath.java	floor	y	long	0	DEF	$ != x
446	3343	8	FastMath.java	floor	x	double	0	DEF	$ < 0
446	3343	8	FastMath.java	floor	x	double	0	DEF	y != $
447	3347	8	FastMath.java	floor	y	long	0	RET	$ == 0
448	3361	8	FastMath.java	ceil	x	double	0	RET	$ != $
449	3366	8	FastMath.java	ceil	y	double	0	RET	$ == x
449	3366	8	FastMath.java	ceil	x	double	0	RET	y == $
450	3372	8	FastMath.java	ceil	y	double	0	RET	$ == 0
451	3387	8	FastMath.java	rint	d	double	0	RET	$ > 0.5
452	3388	12	FastMath.java	rint	y	double	0	RET	$ == -1.0
453	3393	8	FastMath.java	rint	d	double	0	RET	$ < 0.5
454	3442	8	FastMath.java	min	a	float	0	RET	$ > b
454	3442	8	FastMath.java	min	b	float	0	RET	a > $
455	3445	8	FastMath.java	min	a	float	0	RET	$ < b
455	3445	8	FastMath.java	min	b	float	0	RET	a < $
456	3449	8	FastMath.java	min	a	float	0	RET	$ != b
456	3449	8	FastMath.java	min	b	float	0	RET	a != $
457	3455	8	FastMath.java	min	bits	int	0	RET	$ == 0x80000000
458	3467	8	FastMath.java	min	a	double	0	RET	$ > b
458	3467	8	FastMath.java	min	b	double	0	RET	a > $
459	3470	8	FastMath.java	min	a	double	0	RET	$ < b
459	3470	8	FastMath.java	min	b	double	0	RET	a < $
460	3474	8	FastMath.java	min	a	double	0	RET	$ != b
460	3474	8	FastMath.java	min	b	double	0	RET	a != $
461	3480	8	FastMath.java	min	bits	long	0	RET	$ == 0x8000000000000000L
462	3510	8	FastMath.java	max	a	float	0	RET	$ > b
462	3510	8	FastMath.java	max	b	float	0	RET	a > $
463	3513	8	FastMath.java	max	a	float	0	RET	$ < b
463	3513	8	FastMath.java	max	b	float	0	RET	a < $
464	3517	8	FastMath.java	max	a	float	0	RET	$ != b
464	3517	8	FastMath.java	max	b	float	0	RET	a != $
465	3523	8	FastMath.java	max	bits	int	0	RET	$ == 0x80000000
466	3535	8	FastMath.java	max	a	double	0	RET	$ > b
466	3535	8	FastMath.java	max	b	double	0	RET	a > $
467	3538	8	FastMath.java	max	a	double	0	RET	$ < b
467	3538	8	FastMath.java	max	b	double	0	RET	a < $
468	3542	8	FastMath.java	max	a	double	0	RET	$ != b
468	3542	8	FastMath.java	max	b	double	0	RET	a != $
469	3548	8	FastMath.java	max	bits	long	0	RET	$ == 0x8000000000000000L
470	3569	8	FastMath.java	hypot	x	double	1	RET	Double.isInfinite($)
470	3569	8	FastMath.java	hypot	y	double	1	RET	Double.isInfinite($)
471	3571	15	FastMath.java	hypot	x	double	1	RET	Double.isNaN($)
471	3571	15	FastMath.java	hypot	y	double	1	RET	Double.isNaN($)
472	3577	12	FastMath.java	hypot	expX	int	1	RET	$ > expY + 27
472	3577	12	FastMath.java	hypot	expY	int	1	RET	expX > $ + 27
473	3580	19	FastMath.java	hypot	expX	int	1	RET	expY > $ + 27
473	3580	19	FastMath.java	hypot	expY	int	1	RET	$ > expX + 27
474	3638	8	FastMath.java	copySign	m	long	0	RET	$ >= 0
474	3638	8	FastMath.java	copySign	m	long	0	RET	$ < 0
474	3638	8	FastMath.java	copySign	s	long	0	RET	$ < 0
474	3638	8	FastMath.java	copySign	s	long	0	RET	$ >= 0
475	3655	8	FastMath.java	copySign	m	int	0	RET	$ < 0
475	3655	8	FastMath.java	copySign	m	int	0	RET	$ >= 0
475	3655	8	FastMath.java	copySign	s	int	0	RET	$ < 0
475	3655	8	FastMath.java	copySign	s	int	0	RET	$ >= 0
28279	108	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 7
28280	121	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
149	128	12	FastMathCalc.java	buildSinCosTables	i	int	1	DEF	($ & 1) == 0
28281	177	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
28282	215	8	FastMathCalc.java	slowCos	i	int	0	NIL-FOR	$ >= 0
150	219	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 1) != 0
151	226	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 2) != 0
152	235	8	FastMathCalc.java	slowCos	result	double	0	DEF	$ != null
28283	259	8	FastMathCalc.java	slowSin	i	int	0	NIL-FOR	$ >= 0
153	263	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 1) == 0
154	270	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 2) != 0
155	279	8	FastMathCalc.java	slowSin	result	double	0	DEF	$ != null
28284	303	8	FastMathCalc.java	slowexp	i	int	0	NIL-FOR	$ >= 0
156	316	8	FastMathCalc.java	slowexp	result	double	0	DEF	$ != null
157	330	8	FastMathCalc.java	split	d	double	1	DEF	$ > -8e298
157	330	8	FastMathCalc.java	split	d	double	1	DEF	$ < 8e298
158	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ < 8e298
158	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ > -8e298
159	407	8	FastMathCalc.java	splitReciprocal	in	double	0	DEF	$[0] == 0.0
160	415	8	FastMathCalc.java	splitReciprocal	result	double	0	DEF	$[1] != $[1]
28285	422	8	FastMathCalc.java	splitReciprocal	i	int	0	NIL-FOR	$ < 2
28286	510	8	FastMathCalc.java	expint	p	int	0	NIL-WHILE	$ > 0
161	511	12	FastMathCalc.java	expint	p	int	0	DEF	($ & 1) != 0
162	522	8	FastMathCalc.java	expint	result	double	0	DEF	$ != null
28287	578	8	FastMathCalc.java	slowLog	i	int	0	NIL-FOR	$ >= 0
163	639	8	FastMathCalc.java	format	d	double	1	RET	$ != $
164	654	8	FastMathCalc.java	checkLen	expectedLen	int	0	DimensionMismatchException	$ != actual
164	654	8	FastMathCalc.java	checkLen	actual	int	0	DimensionMismatchException	expectedLen != $
2509	105	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	$.normalization == $.DstNormalization.ORTHOGONAL_DST_I
2510	109	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	type == $.TransformType.FORWARD
2510	109	8	FastSineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
2511	150	8	FastSineTransformer.java	fst	THIS	FastSineTransformer	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo(f.$.length)
2511	150	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($.length)
2512	155	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	$[0] != 0.0
2513	161	8	FastSineTransformer.java	fst	n	int	0	RET	$ == 1
29663	170	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
29663	170	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
29664	183	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
29664	183	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
1368	87	8	FieldLUDecomposition.java	FieldLUDecomposition	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
28808	101	8	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
28808	101	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
28809	108	8	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	$ < m
28809	108	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	col < $
28810	113	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < col
28810	113	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	row < $
28811	116	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < row
28811	116	16	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	i < $
28812	124	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
28812	124	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
28813	127	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < col
28813	127	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	i < $
1369	132	16	FieldLUDecomposition.java	FieldLUDecomposition	THIS	FieldLUDecomposition	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
1369	132	16	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
1369	132	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
1370	139	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	RET	$ >= m
1370	139	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	RET	nonZero >= $
1371	145	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	$ != col
1371	145	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	nonZero != $
28814	147	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < m
28814	147	16	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	i < $
28815	160	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
28815	160	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
1372	174	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.singular
1372	174	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.cachedL == null
28816	177	12	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
28816	177	12	FieldLUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
28817	179	16	FieldLUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
28817	179	16	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1373	194	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.cachedU == null
1373	194	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.singular
28818	197	12	FieldLUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
28818	197	12	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
28819	199	16	FieldLUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
28819	199	16	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1374	217	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.cachedP == null
1374	217	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.singular
28820	220	12	FieldLUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
28820	220	12	FieldLUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1375	241	8	FieldLUDecomposition.java	getDeterminant	THIS	FieldLUDecomposition	1	RET	$.singular
28821	246	12	FieldLUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
28821	246	12	FieldLUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
1998	102	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
2469	61	8	FixedElapsedTime.java	FixedElapsedTime	maxTime	long	0	NumberIsTooSmallException	$ < 0
2470	75	8	FixedElapsedTime.java	isSatisfied	THIS	FixedElapsedTime	0	DEF	$.endTime < 0
2455	45	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	NumberIsTooSmallException	$ <= 0
2456	60	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
1976	88	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
921	181	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	a0 > $
921	181	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	$ > overflow
922	187	8	Fraction.java	Fraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
922	187	8	Fraction.java	Fraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
922	187	8	Fraction.java	Fraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
28338	203	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
923	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	p2 > $
923	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	q2 > $
923	209	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	$ > overflow
923	209	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	$ > overflow
924	214	12	Fraction.java	Fraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
924	214	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
924	214	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
924	214	12	Fraction.java	Fraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
924	214	12	Fraction.java	Fraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
924	214	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
924	214	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
925	226	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
925	226	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
926	230	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
926	230	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
927	257	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == 0
928	261	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ < 0
929	262	12	Fraction.java	Fraction	num	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
929	262	12	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
930	272	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
931	278	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
932	292	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
933	333	8	Fraction.java	equals	THIS	Fraction	0	RET	$ == other
933	333	8	Fraction.java	equals	other	Object	0	RET	this == $
934	336	8	Fraction.java	equals	other	Object	0	RET	$ instanceof Fraction
935	406	8	Fraction.java	negate	THIS	Fraction	0	MathArithmeticException	$.numerator==Integer.MIN_VALUE
936	477	8	Fraction.java	addSub	fraction	Fraction	0	NullArgumentException	$ == null
937	481	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
938	484	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
938	484	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
939	490	8	Fraction.java	addSub	d1	int	0	RET	$==1
940	514	8	Fraction.java	addSub	w	BigInteger	0	MathArithmeticException	$.bitLength() > 31
941	534	8	Fraction.java	multiply	fraction	Fraction	0	NullArgumentException	$ == null
942	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
942	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
942	537	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
943	569	8	Fraction.java	divide	fraction	Fraction	0	NullArgumentException	$ == null
944	572	8	Fraction.java	divide	THIS	Fraction	0	MathArithmeticException	fraction.$.numerator == 0
944	572	8	Fraction.java	divide	fraction	Fraction	0	MathArithmeticException	$.numerator == 0
945	612	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ == 0
946	616	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
947	620	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
947	620	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
948	623	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ < 0
949	624	12	Fraction.java	getReducedFraction	numerator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
949	624	12	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
950	651	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
951	653	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
905	177	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
906	179	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
907	199	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
908	221	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
909	254	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
29512	86	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2176	112	8	Frequency.java	addValue	v	Comparable<?>	0	DEF	$ instanceof Integer
2177	117	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
29513	185	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
2178	199	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
2179	205	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
2180	265	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
2181	315	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
2182	318	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
2183	323	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
2184	330	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
2185	337	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
2185	337	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
2185	337	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
2186	341	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
2186	341	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
2186	341	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
29514	346	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2187	348	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
2187	348	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
2187	348	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
2188	408	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
2189	494	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
2189	494	8	Frequency.java	equals	obj	Object	0	RET	this == $
2190	497	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
2191	501	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
2192	502	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
2192	502	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
2193	505	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
2193	505	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
3241	320	8	FunctionUtils.java	sample	n	int	0	NotStrictlyPositiveException	$ <= 0
3242	325	8	FunctionUtils.java	sample	min	double	0	NumberIsTooLargeException	$ >= max
3242	325	8	FunctionUtils.java	sample	max	double	0	NumberIsTooLargeException	min >= $
29982	331	8	FunctionUtils.java	sample	i	int	0	NIL-FOR	$ < n
29982	331	8	FunctionUtils.java	sample	n	int	0	NIL-FOR	i < $
2198	80	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
2480	88	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
2480	88	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
29643	94	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ > 0
2481	153	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
2481	153	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
2481	153	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
2481	153	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
2482	155	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
2483	157	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x >= $ + 1
2483	157	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ >= a + 1
29644	166	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
29644	166	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	FastMath.abs($/sum) > epsilon
29644	166	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	FastMath.abs(an/$) > epsilon
29644	166	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	$ < Double.POSITIVE_INFINITY
29644	166	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	FastMath.abs(an/sum) > $
29644	166	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
2484	176	12	Gamma.java	regularizedGammaP	n	double	1	MaxCountExceededException	$ >= maxIterations
2484	176	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxCountExceededException	n >= $
2485	178	19	Gamma.java	regularizedGammaP	sum	double	1	DEF	Double.isInfinite($)
2486	231	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
2486	231	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
2486	231	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
2486	231	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
2487	233	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
2488	235	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $ + 1.0
2488	235	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a + 1.0
2489	283	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
2489	283	8	Gamma.java	digamma	x	double	0	RET	$ > 0
2490	289	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
2491	313	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
2491	313	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
2492	317	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
1061	71	8	GammaDistribution.java	GammaDistribution	alpha	double	0	NotStrictlyPositiveException	$ <= 0
1062	74	8	GammaDistribution.java	GammaDistribution	beta	double	0	NotStrictlyPositiveException	$ <= 0
1063	114	8	GammaDistribution.java	density	x	double	0	RET	$ < 0
1064	138	8	GammaDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
29192	106	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
29193	121	12	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.rows
29193	121	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < rows
29194	129	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	j < $.cols
29194	129	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
29195	134	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	k < $.cols
29195	134	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
29196	137	20	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	l < $.cols
29196	137	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < cols
29197	151	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.cols
29197	151	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < cols
1660	159	12	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	DEF	$ != null
1661	160	16	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	DEF	$ != null
3135	54	8	Gaussian.java	Gaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
2450	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ < 0
2450	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ > 1
2451	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ > 1
2451	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ < 0
29631	120	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
29631	120	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
29632	154	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
2452	159	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
2452	159	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
2453	165	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
2453	165	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
2454	175	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
1996	111	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
1997	203	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	MathIllegalStateException	$.getN() > 0
2614	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	1	DEF	$.previousState != null
2614	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
29743	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29743	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
29744	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29744	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2555	226	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ > 0.9999
2555	226	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ < 0.0001
2556	261	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ > 0.9999
2556	261	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ < 0.0001
2557	267	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ > 0.9999
2557	267	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ < 0.0001
2558	273	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ < 0.0001
2558	273	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ > 0.9999
2559	279	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ < 1.0001
2559	279	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ > 999.9
2560	313	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ % 2 != 0
2560	313	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ <= 6
2561	317	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ < 0.0001
2561	317	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ > 0.9999
2562	323	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ > 0.9999
2562	323	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ < 0.0001
2563	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
2563	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
2563	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
29703	375	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
29703	375	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
29704	382	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
29704	382	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
29705	387	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
29705	387	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
29706	389	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
29706	389	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
2564	412	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ <= 0
2564	412	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ >= 7
2565	426	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
29707	427	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
29707	427	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
29707	427	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
29708	432	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
29708	432	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
29708	432	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
29709	465	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
29709	465	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
29709	465	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
29710	472	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
29710	472	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
2566	474	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
2566	474	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
29711	480	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
29711	480	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
29711	480	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
2567	489	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
2567	489	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
2567	489	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
2567	489	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
2567	489	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
29712	491	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
29712	491	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
29712	491	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
29713	496	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
29713	496	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
29713	496	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
2568	500	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * FastMath.max(1.0e-15, $)
2568	500	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * FastMath.max(1.0e-15, initialNorm)
29714	508	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
29714	508	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
29714	508	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
29715	527	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
29715	527	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
29716	528	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
29716	528	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
29716	528	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
29717	536	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
29717	536	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
29717	536	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
29718	561	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
29718	561	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
29719	567	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
29719	567	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
29720	574	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
29720	574	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
29720	574	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
2569	580	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2569	580	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
29721	618	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-DOWHILE	$.isLastStep
2570	623	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
2571	628	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
2572	632	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2573	644	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
2573	644	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
2573	644	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2573	644	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2573	644	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
2573	644	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
29722	653	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
2574	658	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2574	658	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
2574	658	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2574	658	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
2574	658	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
2574	658	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2574	658	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
2574	658	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2574	658	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2574	658	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2575	671	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
29723	680	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < $.mainSetDimension
29723	680	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < mainSetDimension
2576	686	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
2576	686	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
2576	686	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
2576	686	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
2577	707	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2577	707	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2578	710	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2579	719	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2579	719	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2580	725	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2580	725	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2580	725	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2581	737	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2582	745	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2582	745	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2583	750	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2583	750	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2583	750	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2584	761	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
2585	763	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2585	763	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2585	763	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2586	774	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.isLastStep
2586	774	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
2586	774	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2587	786	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2588	793	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
29724	796	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
29724	796	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
29725	802	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
29725	802	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
29726	808	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
29726	808	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
29726	808	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
29727	811	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
29727	811	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
29727	811	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
29728	814	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
29728	814	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
29728	814	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
29729	819	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
29729	819	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
29729	819	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
29730	824	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
29730	824	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
29731	825	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
29731	825	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
29732	826	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
29732	826	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
29732	826	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
2589	834	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
2590	841	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
2591	846	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
2592	856	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2593	869	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
2594	871	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2595	874	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
2595	874	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
2596	876	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
2596	876	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2597	878	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
2597	878	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
2598	883	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
2598	883	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
2598	883	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
2599	887	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
2599	887	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
2599	887	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
2600	892	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
2601	899	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
2601	899	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
2602	902	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
2602	902	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
2602	902	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
2602	902	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
2603	921	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2604	927	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
2630	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynomials == null
2630	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials == null
29768	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynomials.$.length
29768	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynomials.length
2631	192	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
2632	199	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials != null
29769	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
29769	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
29769	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
29770	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
29770	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
29770	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
2633	212	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
29771	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
29771	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
29772	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
29772	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
2634	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials == null
2634	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials.$.length <= (mu + 4)
2634	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynomials.length <= ($ + 4)
29773	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
29773	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
2635	264	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
2636	272	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
2637	276	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
2638	280	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
29774	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
29774	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
2639	304	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
29775	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < scale.$.length
29775	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < scale.length
29775	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	scale	double[]	0	NIL-FOR	i < $.length
29776	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
29776	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
2640	339	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
29777	342	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
2641	353	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
29778	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
29778	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
29779	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
29779	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
29780	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
29780	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
29781	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
29781	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
29811	117	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < $.mainSetDimension
29811	117	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
29812	119	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < STATIC_E.$.length
29812	119	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < STATIC_E.length
2661	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	1	DEF	$.previousState != null
2661	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
29809	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29809	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
29810	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29810	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
977	67	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NotStrictlyPositiveException	$ <= 0
978	71	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NotPositiveException	$ < 0
979	75	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NotPositiveException	$ < 0
980	80	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	numberOfSuccesses > $
980	80	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NumberIsTooLargeException	$ > populationSize
981	84	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	sampleSize > $
981	84	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NumberIsTooLargeException	$ > populationSize
982	99	8	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
982	99	8	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
983	101	15	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
983	101	15	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
984	181	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x < $[0]
984	181	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x > $[1]
984	181	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ < domain[0]
984	181	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ > domain[1]
985	226	8	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x < $[0]
985	226	8	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ < domain[0]
986	228	15	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
986	228	15	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
28341	257	8	HypergeometricDistribution.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
28341	257	8	HypergeometricDistribution.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
987	282	8	HypergeometricDistribution.java	getNumericalVariance	THIS	HypergeometricDistribution	0	DEF	$.numericalVarianceIsCalculated
2348	121	8	ISAACRandom.java	setSeed	seed	int[]	0	RET	$ == null
2349	128	8	ISAACRandom.java	setSeed	seedLen	int	0	DEF	$ < rslLen
2349	128	8	ISAACRandom.java	setSeed	rslLen	int	0	DEF	seedLen < $
29588	129	12	ISAACRandom.java	setSeed	j	int	0	NIL-FOR	$ < rslLen
29588	129	12	ISAACRandom.java	setSeed	rslLen	int	0	NIL-FOR	j < $
2350	140	8	ISAACRandom.java	next	THIS	ISAACRandom	0	DEF	$.count < 0
29589	152	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacI < H_SIZE
29590	156	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacJ < H_SIZE
29591	193	8	ISAACRandom.java	initState	THIS	ISAACRandom	0	NIL-FOR	j < $.arr.$.length
29591	193	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < arr.length
29592	196	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < 4
29593	200	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
29594	213	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
28288	131	8	Incrementor.java	incrementCount	i	int	0	NIL-FOR	$ < value
28288	131	8	Incrementor.java	incrementCount	value	int	0	NIL-FOR	i < $
165	150	8	Incrementor.java	incrementCount	THIS	Incrementor	0	DEF	++$.count > $.maximalCount
726	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	$ < 0
726	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	Double.isInfinite($)
727	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
727	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
728	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
728	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
729	139	8	IntervalsSet.java	computeGeometricalProperties	THIS	IntervalsSet	1	DEF	$.getTree(false).getCut() == null
730	150	12	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	Double.isInfinite($)
731	152	19	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	$ >= Precision.SAFE_MIN
28324	169	8	IntervalsSet.java	getInf	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
28325	186	8	IntervalsSet.java	getSup	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
732	224	8	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	1	DEF	$.getCut() == null
733	225	12	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	0	DEF	(Boolean) $.getAttribute()
734	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(low, loc) == $.Location.INSIDE
734	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(high, loc) == $.Location.INSIDE
734	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(low, $) == Location.INSIDE
734	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(high, $) == Location.INSIDE
734	241	12	IntervalsSet.java	recurseList	low	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
734	241	12	IntervalsSet.java	recurseList	high	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
1139	81	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != $.getColumnDimension()
1140	85	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	b.getDimension() != $.getRowDimension()
1140	85	8	IterativeLinearSolver.java	checkParameters	b	RealVector	0	DimensionMismatchException	$.getDimension() != a.getRowDimension()
1141	89	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	x0.getDimension() != $.getColumnDimension()
1141	89	8	IterativeLinearSolver.java	checkParameters	x0	RealVector	0	DimensionMismatchException	$.getDimension() != a.getColumnDimension()
1127	62	8	JacobiPreconditioner.java	create	n	int	0	NonSquareOperatorException	a.getRowDimension() != $
1127	62	8	JacobiPreconditioner.java	create	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != n
1128	66	8	JacobiPreconditioner.java	create	a	RealLinearOperator	1	DEF	$ instanceof AbstractRealMatrix
28482	68	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
28482	68	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
28483	73	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
28483	73	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
2682	133	8	JacobianMatrices.java	JacobianMatrices	parameters	String	1	DEF	$ == null
29815	138	12	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < parameters.$.length
29815	138	12	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < parameters.length
29815	138	12	JacobianMatrices.java	JacobianMatrices	parameters	String	0	NIL-FOR	i < $.length
29816	150	8	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
29816	150	8	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < stateDim
2683	169	8	JacobianMatrices.java	registerVariationalEquations	ode	FirstOrderDifferentialEquations	0	MathIllegalArgumentException	expandable.getPrimary() != $
2683	169	8	JacobianMatrices.java	registerVariationalEquations	expandable	ExpandableStatefulODE	0	MathIllegalArgumentException	$.getPrimary() != ode
2684	214	12	JacobianMatrices.java	setParameterStep	THIS	JacobianMatrices	0	RET	parameter.equals($.param.getParameterName())
2684	214	12	JacobianMatrices.java	setParameterStep	parameter	String	0	RET	$.equals(param.getParameterName())
2685	247	8	JacobianMatrices.java	setInitialMainStateJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
2686	271	12	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	RET	pName.equals($.param.getParameterName())
2686	271	12	JacobianMatrices.java	setInitialParameterJacobian	pName	String	0	RET	$.equals(param.getParameterName())
2687	273	16	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
29817	294	8	JacobianMatrices.java	getCurrentMainSetJacobian	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
29817	294	8	JacobianMatrices.java	getCurrentMainSetJacobian	i	int	0	NIL-FOR	$ < stateDim
2688	312	12	JacobianMatrices.java	getCurrentParameterJacobian	THIS	JacobianMatrices	0	RET	$.param.getParameterName().equals(pName)
2688	312	12	JacobianMatrices.java	getCurrentParameterJacobian	pName	String	0	RET	param.getParameterName().equals($)
2689	329	8	JacobianMatrices.java	checkDimension	arrayDimension	int	0	DimensionMismatchException	$ != expected
2689	329	8	JacobianMatrices.java	checkDimension	expected	int	0	DimensionMismatchException	arrayDimension != $
29469	108	8	KMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
29469	108	8	KMeansPlusPlusClusterer.java	cluster	numTrials	int	0	NIL-FOR	i < $
2125	116	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2126	129	12	KMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
2126	129	12	KMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
2127	161	8	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
2127	161	8	KMeansPlusPlusClusterer.java	cluster	k	int	0	NumberIsTooSmallException	points.size() < $
29470	175	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
29470	175	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
2128	180	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
2129	205	12	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
2129	205	12	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
2130	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
2130	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
2130	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
29471	282	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
29471	282	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2131	283	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
2131	283	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
29472	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
29472	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
29473	295	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
29473	295	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2132	296	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2132	296	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
29474	311	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
29474	311	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2133	312	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2133	312	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2134	314	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
2134	314	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
2135	324	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
29475	325	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
2136	326	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2136	326	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2137	334	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
2138	343	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	DEF	$.size() < k
2138	343	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	DEF	resultSet.size() < $
29476	346	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
29476	346	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
2139	348	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
2139	348	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
2140	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
2140	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
2140	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
2141	380	12	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2142	391	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
2142	391	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
2143	400	8	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
2144	426	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
2144	426	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
2145	434	8	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
29477	460	12	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
29477	460	12	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
2146	462	16	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
2146	462	16	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
2147	472	8	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster<T>	0	ConvergenceException	$ == null
2148	495	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
2148	495	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
0	134	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getControlMatrix() == null
1	154	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialStateEstimate() == null
2	161	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	DimensionMismatchException	$.transitionMatrix.getColumnDimension() != $.stateEstimation.getDimension()
3	168	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialErrorCovariance() == null
4	177	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	NonSquareMatrixException	$.transitionMatrix.isSquare()
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() > 0
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix != null
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() != 1
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() > 0
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() != $.transitionMatrix.getRowDimension()
6	198	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.measurementMatrix.getColumnDimension() != $.transitionMatrix.getRowDimension()
7	206	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	measNoise.getRowDimension() != $.measurementMatrix.getRowDimension()
7	206	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != measurementMatrix.getRowDimension()
7	206	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
8	296	8	KalmanFilter.java	predict	THIS	KalmanFilter	0	DimensionMismatchException	u.getDimension() != $.controlMatrix.getColumnDimension()
8	296	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$ != null
8	296	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$.getDimension() != controlMatrix.getColumnDimension()
9	307	8	KalmanFilter.java	predict	u	RealVector	0	DEF	$ != null
10	343	8	KalmanFilter.java	correct	THIS	KalmanFilter	0	DimensionMismatchException	z.getDimension() != $.measurementMatrix.getRowDimension()
10	343	8	KalmanFilter.java	correct	z	RealVector	0	DimensionMismatchException	$.getDimension() != measurementMatrix.getRowDimension()
1065	86	8	KolmogorovSmirnovDistribution.java	KolmogorovSmirnovDistribution	n	int	0	NotStrictlyPositiveException	$ <= 0
1066	154	8	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	d <= $
1066	154	8	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninvhalf
1067	158	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	d <= $
1067	158	15	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	$ < d
1067	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	ninvhalf < $
1067	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninv
28343	164	12	KolmogorovSmirnovDistribution.java	cdf	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
28343	164	12	KolmogorovSmirnovDistribution.java	cdf	i	int	0	NIL-FOR	$ <= n
1068	170	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	1 - $ <= d
1068	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	1 - ninv <= $
1068	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ < 1
1069	174	15	KolmogorovSmirnovDistribution.java	cdf	d	double	0	RET	1 <= $
28344	203	8	KolmogorovSmirnovDistribution.java	exactK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
28344	203	8	KolmogorovSmirnovDistribution.java	exactK	i	int	0	NIL-FOR	$ <= n
28345	238	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ < m
28345	238	8	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	i < $
28346	239	12	KolmogorovSmirnovDistribution.java	roundedK	j	int	0	NIL-FOR	$ < m
28346	239	12	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	j < $
28347	248	8	KolmogorovSmirnovDistribution.java	roundedK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
28347	248	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ <= n
1070	274	8	KolmogorovSmirnovDistribution.java	createH	hDouble	double	0	NumberIsTooLargeException	$ >= 1
28348	295	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
28348	295	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
28349	296	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < m
28349	296	12	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	j < $
1071	297	16	KolmogorovSmirnovDistribution.java	createH	j	int	1	DEF	i - $ + 1 < 0
1071	297	16	KolmogorovSmirnovDistribution.java	createH	i	int	1	DEF	$ - j + 1 < 0
28350	311	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
28350	311	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
28351	318	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
28351	318	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
1072	328	8	KolmogorovSmirnovDistribution.java	createH	h	BigFraction	0	DEF	$.compareTo(BigFraction.ONE_HALF) == 1
28352	343	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
28352	343	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
28353	344	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < i + 1
28353	344	12	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	j < $ + 1
1073	345	16	KolmogorovSmirnovDistribution.java	createH	j	int	0	DEF	i - $ + 1 > 0
1073	345	16	KolmogorovSmirnovDistribution.java	createH	i	int	0	DEF	$ - j + 1 > 0
28354	346	20	KolmogorovSmirnovDistribution.java	createH	g	int	0	NIL-FOR	$ <= i - j + 1
28354	346	20	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	g <= i - $ + 1
28354	346	20	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	g <= $ - j + 1
1991	98	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
1992	111	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
1993	113	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
1993	113	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
1994	131	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
1995	168	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
1995	168	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1995	168	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
1995	168	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
1995	168	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
29434	179	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29434	179	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29434	179	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1100	87	8	LUDecomposition.java	LUDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
28360	100	8	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
28360	100	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
28361	107	8	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	$ < m
28361	107	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	col < $
28362	110	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < col
28362	110	12	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	row < $
28363	113	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < row
28363	113	16	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	i < $
28364	122	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
28364	122	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
28365	125	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < col
28365	125	16	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	i < $
1101	131	16	LUDecomposition.java	LUDecomposition	sum	double	0	DEF	FastMath.abs($) > largest
1101	131	16	LUDecomposition.java	LUDecomposition	largest	double	0	DEF	FastMath.abs(sum) > $
1102	138	12	LUDecomposition.java	LUDecomposition	THIS	LUDecomposition	0	RET	FastMath.abs($.lu[max][col]) < singularityThreshold
1102	138	12	LUDecomposition.java	LUDecomposition	max	int	0	RET	FastMath.abs(lu[$][col]) < singularityThreshold
1102	138	12	LUDecomposition.java	LUDecomposition	col	int	0	RET	FastMath.abs(lu[max][$]) < singularityThreshold
1102	138	12	LUDecomposition.java	LUDecomposition	singularityThreshold	double	0	RET	FastMath.abs(lu[max][col]) < $
1103	144	12	LUDecomposition.java	LUDecomposition	max	int	0	DEF	$ != col
1103	144	12	LUDecomposition.java	LUDecomposition	col	int	0	DEF	max != $
28366	148	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < m
28366	148	16	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	i < $
28367	161	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
28367	161	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
1104	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.singular
1104	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.cachedL == null
28368	176	12	LUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
28368	176	12	LUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
28369	178	16	LUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
28369	178	16	LUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1105	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.cachedU == null
1105	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.singular
28370	196	12	LUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
28370	196	12	LUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
28371	198	16	LUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
28371	198	16	LUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1106	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.singular
1106	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.cachedP == null
28372	219	12	LUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
28372	219	12	LUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1107	240	8	LUDecomposition.java	getDeterminant	THIS	LUDecomposition	1	RET	$.singular
28373	245	12	LUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
28373	245	12	LUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
3220	98	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
3220	98	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3221	104	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
3221	104	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3222	109	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
3222	109	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
3223	115	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
3223	115	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3224	120	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
3224	120	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
29980	149	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < coefficients.$.length
29980	149	8	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < coefficients.length
29980	149	8	LaguerreSolver.java	laguerre	coefficients	double[]	0	NIL-FOR	i < $.length
3225	154	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	1	RET	$.complexSolver.isRoot(lo, hi, z)
3225	154	8	LaguerreSolver.java	laguerre	z	Complex	1	RET	complexSolver.isRoot(lo, hi, $)
3225	154	8	LaguerreSolver.java	laguerre	lo	double	1	RET	complexSolver.isRoot($, hi, z)
3225	154	8	LaguerreSolver.java	laguerre	hi	double	1	RET	complexSolver.isRoot(lo, $, z)
29981	160	12	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
29981	160	12	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < root.length
29981	160	12	LaguerreSolver.java	laguerre	root	Complex[]	0	NIL-FOR	i < $.length
3226	161	16	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	DEF	$.complexSolver.isRoot(lo, hi, root[i])
3226	161	16	LaguerreSolver.java	laguerre	i	int	0	DEF	complexSolver.isRoot(lo, hi, root[$])
3226	161	16	LaguerreSolver.java	laguerre	root	Complex[]	0	DEF	complexSolver.isRoot(lo, hi, $[i])
3226	161	16	LaguerreSolver.java	laguerre	lo	double	0	DEF	complexSolver.isRoot($, hi, root[i])
3226	161	16	LaguerreSolver.java	laguerre	hi	double	0	DEF	complexSolver.isRoot(lo, $, root[i])
1610	112	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
1610	112	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
1610	112	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
1611	142	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
1611	142	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
1611	142	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
1612	155	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
1612	155	8	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
29124	158	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
29124	158	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
29124	158	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1613	164	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
29125	165	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
29125	165	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
29125	165	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1614	169	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
3291	217	12	LegendreGaussIntegrator.java	doIntegrate	THIS	LegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
3291	217	12	LegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
3291	217	12	LegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
30016	248	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
30016	248	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
30017	249	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
30017	249	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
29126	305	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i<$.rows
29126	305	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$<rows
29127	318	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
29127	318	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
1615	323	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
29128	327	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
29128	327	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1616	329	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1617	344	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.cost != 0
29129	345	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29129	345	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1618	348	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
29130	350	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
29130	350	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1619	357	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1619	357	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
29131	365	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
29131	365	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
29132	370	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
29133	373	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29133	373	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
29134	390	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29134	390	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1620	399	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1621	408	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost < previousCost
1621	408	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost < $
29135	415	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29135	415	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
29136	419	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
29136	419	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
29137	424	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29137	424	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1622	437	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1623	440	24	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost >= previousCost
1623	440	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1623	440	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost >= $
1624	445	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1624	445	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1625	451	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
29138	455	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
29138	455	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1626	463	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$ != null
1627	465	24	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(iter, $, current)
1627	465	24	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(iter, previous, $)
1627	465	24	LevenbergMarquardtOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1627	465	24	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$.converged(iter, previous, current)
29139	472	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29139	472	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1628	485	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1628	485	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1628	485	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
1628	485	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
1628	485	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1628	485	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1628	485	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1628	485	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1629	494	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= 2.2204e-16
1629	494	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= 2.2204e-16
1629	494	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
1630	497	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= 2.2204e-16 * xNorm
1630	497	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= 2.2204e-16 * $
1631	500	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= 2.2204e-16
29140	535	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
29140	535	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
29141	538	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
29141	538	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
29142	541	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
29143	544	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
29143	544	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
29144	553	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29144	553	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1632	561	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1632	561	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1633	571	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
29145	572	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29145	572	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
29146	577	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29146	577	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
29147	580	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
29147	580	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
29148	592	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29148	592	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
29149	595	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
29149	595	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1634	603	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1635	611	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
29150	615	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1636	618	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
29151	622	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29151	622	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
29152	629	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29152	629	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1637	641	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1637	641	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1637	641	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1637	641	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
1637	641	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1637	641	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
29153	647	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29153	647	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
29154	651	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29154	651	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
29155	655	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
29155	655	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
29156	660	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29156	660	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1638	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1639	669	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
29157	704	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29157	704	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
29158	706	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
29158	706	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
29159	714	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29159	714	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1640	720	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
29160	729	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
29160	729	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1641	734	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1641	734	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1642	739	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
1642	739	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
1642	739	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
29161	757	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
29161	757	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
29162	775	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
29162	775	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1643	776	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1643	776	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1643	776	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1643	776	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1644	779	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1644	779	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1645	783	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
29163	784	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
29164	787	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
29164	787	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
29165	795	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
29165	795	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
29166	825	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
29166	825	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
29167	828	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.weightedResidualJacobian.$.length
29167	828	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < weightedResidualJacobian.length
29168	836	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
29168	836	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
29169	841	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.cols
29169	841	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
29170	843	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
29170	843	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
1646	847	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
1646	847	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
1647	851	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1647	851	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1648	856	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
1648	856	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
29171	875	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
29172	877	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
29172	877	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
29173	881	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
29173	881	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
29174	895	8	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
29174	895	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < cols
29175	898	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
29175	898	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
29176	902	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
29176	902	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
649	76	8	Line.java	reset	norm2	double	0	MathIllegalArgumentException	$ == 0.0
650	175	8	Line.java	distance	n	double	0	RET	$ < Precision.SAFE_MIN
651	195	8	Line.java	closestPoint	n	double	0	RET	$ < Precision.EPSILON
737	132	8	Line.java	reset	d	double	1	DEF	$ == 0.0
738	159	8	Line.java	revertSelf	THIS	Line	1	DEF	$.angle < FastMath.PI
739	199	8	Line.java	intersection	d	double	0	RET	FastMath.abs($) < 1.0e-10
29102	128	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
29102	128	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
29102	128	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
1570	191	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
1570	191	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
1571	195	6	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
3039	44	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3039	44	8	LinearInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3039	44	8	LinearInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3040	48	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	NumberIsTooSmallException	x.$.length < 2
3040	48	8	LinearInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 2
29897	60	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
29897	60	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
29898	66	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
29898	66	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1584	108	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
1584	108	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
1585	112	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
2440	65	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
2441	68	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ <= 0
2442	71	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
2442	71	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NumberIsTooLargeException	chromosomes.size() > $
2443	91	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
2444	94	8	ListPopulation.java	setChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	chromosomes.size() > $.populationLimit
2444	94	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
2445	109	8	ListPopulation.java	addChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() + chromosomeColl.size() > $.populationLimit
2445	109	8	ListPopulation.java	addChromosomes	chromosomeColl	Collection<Chromosome>	0	NumberIsTooLargeException	chromosomes.size() + $.size() > populationLimit
2446	139	8	ListPopulation.java	addChromosome	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() >= $.populationLimit
2447	154	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
2447	154	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
2448	178	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NotPositiveException	$ <= 0
2449	181	8	ListPopulation.java	setPopulationLimit	THIS	ListPopulation	0	NumberIsTooSmallException	populationLimit < $.chromosomes.size()
2449	181	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NumberIsTooSmallException	$ < chromosomes.size()
3115	147	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ < 0
3115	147	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ > 1
3116	152	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	NotPositiveException	$ < 0
3117	206	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
3117	206	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
3117	206	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3118	212	8	LoessInterpolator.java	smooth	n	int	0	NoDataException	$ == 0
3119	222	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
3120	226	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
3121	232	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	NumberIsTooSmallException	$ < 2
29958	249	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
29958	249	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
29959	252	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
29959	252	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
3122	257	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
3123	267	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
3123	267	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
3123	267	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
3123	267	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
29960	286	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
29960	286	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
3124	305	16	LoessInterpolator.java	smooth	THIS	LoessInterpolator	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < $.accuracy
3124	305	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
3124	305	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
3125	319	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
3125	319	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
3126	332	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	FastMath.abs(medianResidual) < $.accuracy
3126	332	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	FastMath.abs($) < accuracy
29961	336	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
29961	336	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
3127	338	16	LoessInterpolator.java	smooth	arg	double	1	DEF	$ >= 1
3128	368	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
3128	368	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
3128	368	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3129	402	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	nextRight < xval.$.length
3129	402	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[nextRight] - xval[i] < xval[i] - xval[$]
3129	402	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	xval[$] - xval[i] < xval[i] - xval[left]
3129	402	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	$ < xval.length
3129	402	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[nextRight] - $[i] < $[i] - $[left]
3129	402	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	nextRight < $.length
3129	402	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[nextRight] - xval[$] < xval[$] - xval[left]
29962	419	8	LoessInterpolator.java	nextNonzero	THIS	LoessInterpolator	0	NIL-WHILE	j < weights.$.length
29962	419	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	weights[$] == 0
29962	419	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	$ < weights.length
29962	419	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	$[j] == 0
29962	419	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	j < $.length
3130	435	8	LoessInterpolator.java	tricube	absX	double	0	RET	$ >= 1.0
29963	450	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
29963	450	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
29963	450	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
1087	99	8	LogNormalDistribution.java	LogNormalDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1088	160	8	LogNormalDistribution.java	density	x	double	0	RET	$ <= 0
1089	184	8	LogNormalDistribution.java	cumulativeProbability	x	double	0	RET	$ <= 0
1090	188	8	LogNormalDistribution.java	cumulativeProbability	THIS	LogNormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.shape
1090	188	8	LogNormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * shape
1091	198	8	LogNormalDistribution.java	cumulativeProbability	x0	double	0	NumberIsTooLargeException	$ > x1
1091	198	8	LogNormalDistribution.java	cumulativeProbability	x1	double	0	NumberIsTooLargeException	x0 > $
1092	202	8	LogNormalDistribution.java	cumulativeProbability	x0	double	0	RET	$ <= 0
1092	202	8	LogNormalDistribution.java	cumulativeProbability	x1	double	0	RET	$ <= 0
3138	68	8	Logistic.java	Logistic	n	double	0	NotStrictlyPositiveException	$ <= 0
3134	152	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
3134	152	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
3134	152	8	Logit.java	value	lo	double	0	OutOfRangeException	x < $
3134	152	8	Logit.java	value	hi	double	0	OutOfRangeException	x > $
2095	74	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2095	74	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2096	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	x.$.length == 0
2096	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	y.$.length == 0
2096	78	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2096	78	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
29454	140	8	MannWhitneyUTest.java	mannWhitneyU	THIS	MannWhitneyUTest	0	NIL-FOR	i < x.$.length
29454	140	8	MannWhitneyUTest.java	mannWhitneyU	i	int	0	NIL-FOR	$ < x.length
29454	140	8	MannWhitneyUTest.java	mannWhitneyU	x	double[]	0	NIL-FOR	i < $.length
28257	57	8	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
28257	57	8	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
28257	57	8	MathArrays.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
28258	72	6	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
28258	72	6	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
28258	72	6	MathArrays.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
28259	87	8	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
28259	87	8	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
28259	87	8	MathArrays.java	distance	p1	double[]	0	NIL-FOR	i < $.length
28260	103	6	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
28260	103	6	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
28260	103	6	MathArrays.java	distance	p1	int[]	0	NIL-FOR	i < $.length
28261	119	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
28261	119	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
28261	119	8	MathArrays.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
28262	134	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
28262	134	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
28262	134	8	MathArrays.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
28263	164	8	MathArrays.java	isMonotonic	i	int	0	NIL-FOR	$ < max
28263	164	8	MathArrays.java	isMonotonic	max	int	0	NIL-FOR	i < $
99	169	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
100	170	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
101	174	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
102	181	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
103	182	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
104	186	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
28264	233	8	MathArrays.java	checkOrder	max	int	0	NIL-FOR	index < $
28264	233	8	MathArrays.java	checkOrder	index	int	0	NIL-FOR	$ < max
105	236	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
106	237	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] <= $
106	237	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] <= previous
106	237	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] <= previous
107	241	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] < $
107	241	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] < previous
107	241	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] < previous
108	247	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
109	248	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] >= $
109	248	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] >= previous
109	248	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] >= previous
110	252	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] > $
110	252	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] > previous
110	252	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] > previous
111	265	8	MathArrays.java	checkOrder	max	int	0	RET	index == $
111	265	8	MathArrays.java	checkOrder	index	int	0	RET	$ == max
112	271	8	MathArrays.java	checkOrder	abort	boolean	1	NonMonotonicSequenceException	$
28265	373	8	MathArrays.java	safeNorm	THIS	MathArrays	0	NIL-FOR	i < v.$.length
28265	373	8	MathArrays.java	safeNorm	i	int	0	NIL-FOR	$ < v.length
28265	373	8	MathArrays.java	safeNorm	v	double[]	0	NIL-FOR	i < $.length
113	375	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ < rdwarf
113	375	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > agiant
113	375	12	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs < $
113	375	12	MathArrays.java	safeNorm	agiant	double	1	DEF	xabs > $
114	376	16	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > rdwarf
114	376	16	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs > $
115	377	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x1max
115	377	20	MathArrays.java	safeNorm	x1max	double	1	DEF	xabs > $
116	386	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x3max
116	386	20	MathArrays.java	safeNorm	x3max	double	1	DEF	xabs > $
117	391	24	MathArrays.java	safeNorm	xabs	double	0	DEF	$ != 0
118	402	8	MathArrays.java	safeNorm	s1	double	1	DEF	$ != 0
119	405	12	MathArrays.java	safeNorm	s2	double	1	DEF	$ == 0
120	408	16	MathArrays.java	safeNorm	s2	double	1	DEF	$ >= x3max
120	408	16	MathArrays.java	safeNorm	x3max	double	1	DEF	s2 >= $
121	459	8	MathArrays.java	sortInPlace	x	double[]	0	NullArgumentException	$ == null
28266	468	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
28266	468	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
28267	470	12	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
28267	470	12	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
122	472	16	MathArrays.java	sortInPlace	y	double[]	0	NullArgumentException	$ == null
123	475	16	MathArrays.java	sortInPlace	THIS	MathArrays	0	DimensionMismatchException	y.$.length != len
123	475	16	MathArrays.java	sortInPlace	y	double[]	0	DimensionMismatchException	$.length != len
123	475	16	MathArrays.java	sortInPlace	len	int	0	DimensionMismatchException	y.length != $
28268	505	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
28268	505	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
28269	509	12	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
28269	509	12	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
124	583	8	MathArrays.java	linearCombination	THIS	MathArrays	0	DimensionMismatchException	len != b.$.length
124	583	8	MathArrays.java	linearCombination	len	int	0	DimensionMismatchException	$ != b.length
124	583	8	MathArrays.java	linearCombination	b	double[]	0	DimensionMismatchException	len != $.length
28270	590	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
28270	590	8	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
28271	616	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < lenMinusOne
28271	616	8	MathArrays.java	linearCombination	lenMinusOne	int	0	NIL-FOR	i < $
125	626	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
28272	630	12	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
28272	630	12	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
126	706	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
127	803	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
128	922	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
129	942	8	MathArrays.java	equals	x	float[]	0	RET	$ == null
129	942	8	MathArrays.java	equals	y	float[]	0	RET	$ == null
130	945	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
130	945	8	MathArrays.java	equals	x	float[]	0	RET	$.length != y.length
130	945	8	MathArrays.java	equals	y	float[]	0	RET	x.length != $.length
28273	948	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
28273	948	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
28273	948	8	MathArrays.java	equals	x	float[]	0	NIL-FOR	i < $.length
131	949	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
131	949	12	MathArrays.java	equals	x	float[]	0	RET	Precision.equals($[i], y[i])
131	949	12	MathArrays.java	equals	y	float[]	0	RET	Precision.equals(x[i], $[i])
132	968	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$ == null
132	968	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	$ == null
133	971	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
133	971	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$.length != y.length
133	971	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	x.length != $.length
28274	974	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
28274	974	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
28274	974	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	NIL-FOR	i < $.length
134	975	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
134	975	12	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
134	975	12	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
135	993	8	MathArrays.java	equals	x	double[]	0	RET	$ == null
135	993	8	MathArrays.java	equals	y	double[]	0	RET	$ == null
136	996	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
136	996	8	MathArrays.java	equals	x	double[]	0	RET	$.length != y.length
136	996	8	MathArrays.java	equals	y	double[]	0	RET	x.length != $.length
28275	999	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
28275	999	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
28275	999	8	MathArrays.java	equals	x	double[]	0	NIL-FOR	i < $.length
137	1000	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
137	1000	12	MathArrays.java	equals	x	double[]	0	RET	Precision.equals($[i], y[i])
137	1000	12	MathArrays.java	equals	y	double[]	0	RET	Precision.equals(x[i], $[i])
138	1019	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$ == null
138	1019	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	$ == null
139	1022	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
139	1022	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$.length != y.length
139	1022	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	x.length != $.length
28276	1025	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
28276	1025	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
28276	1025	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	NIL-FOR	i < $.length
140	1026	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
140	1026	12	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
140	1026	12	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
141	1056	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isInfinite($)
142	1059	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isNaN($)
28277	1065	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
28277	1065	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
143	1066	13	MathArrays.java	normalizeArray	i	int	0	MathIllegalArgumentException	Double.isInfinite(values[$])
143	1066	13	MathArrays.java	normalizeArray	values	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
144	1069	13	MathArrays.java	normalizeArray	i	int	0	DEF	Double.isNaN(values[$])
144	1069	13	MathArrays.java	normalizeArray	values	double[]	0	DEF	Double.isNaN($[i])
145	1073	9	MathArrays.java	normalizeArray	sum	double	0	MathArithmeticException	$ == 0
28278	1076	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
28278	1076	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
146	1077	13	MathArrays.java	normalizeArray	i	int	1	DEF	Double.isNaN(values[$])
146	1077	13	MathArrays.java	normalizeArray	values	double[]	1	DEF	Double.isNaN($[i])
484	128	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ >= 0
484	128	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ < 0
484	128	8	MathUtils.java	copySign	sign	byte	1	RET	$ >= 0
484	128	8	MathUtils.java	copySign	sign	byte	1	RET	$ < 0
485	131	15	MathUtils.java	copySign	magnitude	byte	1	MathArithmeticException	$ == Byte.MIN_VALUE
485	131	15	MathUtils.java	copySign	sign	byte	1	MathArithmeticException	$ >= 0
486	150	8	MathUtils.java	copySign	magnitude	short	1	RET	$ >= 0
486	150	8	MathUtils.java	copySign	magnitude	short	1	RET	$ < 0
486	150	8	MathUtils.java	copySign	sign	short	1	RET	$ >= 0
486	150	8	MathUtils.java	copySign	sign	short	1	RET	$ < 0
487	153	15	MathUtils.java	copySign	magnitude	short	1	MathArithmeticException	$ == Short.MIN_VALUE
487	153	15	MathUtils.java	copySign	sign	short	1	MathArithmeticException	$ >= 0
488	172	8	MathUtils.java	copySign	magnitude	int	1	RET	$ >= 0
488	172	8	MathUtils.java	copySign	magnitude	int	1	RET	$ < 0
488	172	8	MathUtils.java	copySign	sign	int	1	RET	$ >= 0
488	172	8	MathUtils.java	copySign	sign	int	1	RET	$ < 0
489	175	15	MathUtils.java	copySign	magnitude	int	1	MathArithmeticException	$ == Integer.MIN_VALUE
489	175	15	MathUtils.java	copySign	sign	int	1	MathArithmeticException	$ >= 0
490	194	8	MathUtils.java	copySign	magnitude	long	1	RET	$ >= 0
490	194	8	MathUtils.java	copySign	magnitude	long	1	RET	$ < 0
490	194	8	MathUtils.java	copySign	sign	long	1	RET	$ < 0
490	194	8	MathUtils.java	copySign	sign	long	1	RET	$ >= 0
491	197	15	MathUtils.java	copySign	magnitude	long	1	MathArithmeticException	$ == Long.MIN_VALUE
491	197	15	MathUtils.java	copySign	sign	long	1	MathArithmeticException	$ >= 0
492	212	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
492	212	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
28300	225	8	MathUtils.java	checkFinite	THIS	MathUtils	0	NIL-FOR	i < val.$.length
28300	225	8	MathUtils.java	checkFinite	i	int	0	NIL-FOR	$ < val.length
28300	225	8	MathUtils.java	checkFinite	val	double[]	0	NIL-FOR	i < $.length
493	227	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
493	227	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
494	244	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
495	257	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
1332	116	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$[0] == null
1332	116	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$ == null
1333	144	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$[0] == null
1333	144	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$ == null
28787	162	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
28787	162	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
28788	184	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
28788	184	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
28789	202	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
28789	202	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
28789	202	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
28790	221	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
28790	221	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
28790	221	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
1334	236	8	MatrixUtils.java	createRealVector	data	double[]	0	NullArgumentException	$ == null
1335	253	8	MatrixUtils.java	createFieldVector	data	T[]	0	NullArgumentException	$ == null
1336	256	8	MatrixUtils.java	createFieldVector	THIS	MatrixUtils	0	ZeroException	data.$.length == 0
1336	256	8	MatrixUtils.java	createFieldVector	data	T[]	0	ZeroException	$.length == 0
1337	272	8	MatrixUtils.java	createRowRealMatrix	rowData	double[]	0	NullArgumentException	$ == null
28791	277	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
28791	277	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
1338	295	8	MatrixUtils.java	createRowFieldMatrix	rowData	T[]	0	NullArgumentException	$ == null
1339	299	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
28792	303	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
28792	303	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
1340	319	8	MatrixUtils.java	createColumnRealMatrix	columnData	double[]	0	NullArgumentException	$ == null
28793	324	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
28793	324	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
1341	342	8	MatrixUtils.java	createColumnFieldMatrix	columnData	T[]	0	NullArgumentException	$ == null
1342	346	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NoDataException	$ == 0
28794	350	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
28794	350	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
1343	379	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1343	379	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1343	379	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= m.getRowDimension()
1344	394	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1344	394	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1344	394	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= m.getColumnDimension()
1345	418	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1345	418	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1346	425	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1346	425	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1347	449	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1348	452	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1349	455	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedRows.$.length == 0
1349	455	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1350	458	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedColumns.$.length == 0
1350	458	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1351	478	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1351	478	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1351	478	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1351	478	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1352	493	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1352	493	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1352	493	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1352	493	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1353	508	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DimensionMismatchException	$.getColumnDimension() != right.getRowDimension()
1353	508	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DimensionMismatchException	left.getColumnDimension() != $.getRowDimension()
28795	647	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
28795	647	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
28796	678	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
28796	678	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
28797	750	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
28797	750	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
28798	751	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
28798	751	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
28799	784	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
28799	784	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
28800	786	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
28800	786	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1354	827	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getRowDimension() != b.getDimension()
1354	827	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$ == null
1354	827	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	MathIllegalArgumentException	rm.getRowDimension() != $.getDimension()
1354	827	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	MathIllegalArgumentException	$ == null
1355	832	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getColumnDimension() != $.getRowDimension()
28801	838	8	MatrixUtils.java	solveLowerTriangularSystem	i	int	0	NIL-FOR	$ < rows
28801	838	8	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	i < $
1356	840	12	MatrixUtils.java	solveLowerTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
28802	845	12	MatrixUtils.java	solveLowerTriangularSystem	j	int	0	NIL-FOR	$< rows
28802	845	12	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	j< $
1357	867	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getRowDimension() != b.getDimension()
1357	867	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$ == null
1357	867	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	MathIllegalArgumentException	rm.getRowDimension() != $.getDimension()
1357	867	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	MathIllegalArgumentException	$ == null
1358	872	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getColumnDimension() != $.getRowDimension()
28803	878	8	MatrixUtils.java	solveUpperTriangularSystem	i	int	0	NIL-FOR	$ >-1
1359	880	12	MatrixUtils.java	solveUpperTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
28804	885	12	MatrixUtils.java	solveUpperTriangularSystem	j	int	0	NIL-FOR	$>-1
2043	76	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
2043	76	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
2043	76	8	Max.java	increment	d	double	0	DEF	$ > value
2044	131	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
2044	131	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2044	131	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
2044	131	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
29440	133	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29440	133	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29440	133	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2045	134	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2045	134	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1972	109	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
1973	119	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
1974	157	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
1974	157	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
1974	157	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
1974	157	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
29426	166	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29426	166	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29426	166	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1975	205	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, weights, begin, length)
1975	205	8	Mean.java	evaluate	values	double[]	0	RET	test($, weights, begin, length)
1975	205	8	Mean.java	evaluate	weights	double[]	0	RET	test(values, $, begin, length)
1975	205	8	Mean.java	evaluate	begin	int	0	RET	test(values, weights, $, length)
1975	205	8	Mean.java	evaluate	length	int	0	RET	test(values, weights, begin, $)
29427	214	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29427	214	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29427	214	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
29618	147	8	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
2419	167	8	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
29619	176	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
2420	182	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
2421	186	12	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
2421	186	12	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
2421	186	12	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
29620	191	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
2422	197	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
2423	233	8	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
29621	235	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
29622	241	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
3074	151	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$ == null
3074	151	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	NullArgumentException	$ == null
3075	155	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NoDataException	xval.$.length == 0
3075	155	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NoDataException	$.length == 0
3076	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xval.$.length != yval.$.length
3076	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DimensionMismatchException	$.length != yval.length
3076	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3077	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$[0] == null
29911	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NIL-FOR	i < xval.$.length
29911	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < xval.length
29911	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NIL-FOR	i < $.length
3078	172	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	NullArgumentException	$ == null
3079	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xvalI.$.length != $.dimension
3079	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	DimensionMismatchException	$.length != dimension
29912	185	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < microsphereElements
29912	185	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	microsphereElements	int	0	NIL-FOR	i < $
3080	209	12	MicrosphereInterpolatingFunction.java	value	diffNorm	double	0	RET	FastMath.abs($) < FastMath.ulp(1d)
3081	228	12	MicrosphereInterpolatingFunction.java	value	sd	Entry<RealVector,Double>	0	DEF	$ != null
3108	72	8	MicrosphereInterpolator.java	MicrosphereInterpolator	exponent	int	0	NotPositiveException	$ < 0
3109	75	8	MicrosphereInterpolator.java	MicrosphereInterpolator	elements	int	0	NotStrictlyPositiveException	$ <= 0
2642	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	1	DEF	$.previousState != null
2642	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
29782	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29782	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
29783	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29783	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2199	118	8	MillerUpdatingRegression.java	MillerUpdatingRegression	numberOfVariables	int	0	ModelSpecificationException	$ < 1
2200	121	8	MillerUpdatingRegression.java	MillerUpdatingRegression	includeConstant	boolean	1	DEF	$
29519	138	8	MillerUpdatingRegression.java	MillerUpdatingRegression	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
29519	138	8	MillerUpdatingRegression.java	MillerUpdatingRegression	i	int	0	NIL-FOR	$ < this.nvars
2201	141	8	MillerUpdatingRegression.java	MillerUpdatingRegression	errorTolerance	double	1	DEF	$ > 0
2202	184	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length + 1 != $.nvars
2202	184	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2202	184	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != $.nvars
2202	184	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2202	184	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length + 1 != nvars
2202	184	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length != nvars
2203	189	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
2204	210	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != y.$.length
2204	210	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2204	210	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2204	210	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
2204	210	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2205	216	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length == 0
2205	216	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length == 0
2206	220	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x[0].length + 1 > x.$.length
2206	220	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$[0].length + 1 > $.length
29520	225	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
29520	225	8	MillerUpdatingRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
29520	225	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
29521	258	8	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
29521	258	8	MillerUpdatingRegression.java	include	i	int	0	NIL-FOR	$ < x.length
29521	258	8	MillerUpdatingRegression.java	include	x	double[]	0	NIL-FOR	i < $.length
2207	259	12	MillerUpdatingRegression.java	include	w	double	0	RET	$ == 0.0
2208	264	12	MillerUpdatingRegression.java	include	xi	double	0	DEF	$ == 0.0
2209	271	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2210	274	16	MillerUpdatingRegression.java	include	tmp	double	0	DEF	FastMath.abs($) > Precision.EPSILON
29522	282	12	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	k < $.nvars
29522	282	12	MillerUpdatingRegression.java	include	k	int	0	NIL-FOR	$ < nvars
2211	285	16	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2212	294	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2213	314	8	MillerUpdatingRegression.java	smartAdd	_a	double	1	RET	$ > _b
2213	314	8	MillerUpdatingRegression.java	smartAdd	_b	double	1	RET	_a > $
2214	316	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_b > $
2214	316	12	MillerUpdatingRegression.java	smartAdd	_b	double	0	RET	$ > eps
2215	322	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_a > $
2215	322	12	MillerUpdatingRegression.java	smartAdd	_a	double	0	RET	$ > eps
29523	343	8	MillerUpdatingRegression.java	clear	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
29523	343	8	MillerUpdatingRegression.java	clear	i	int	0	NIL-FOR	$ < nvars
29524	362	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
29524	362	8	MillerUpdatingRegression.java	tolset	i	int	0	NIL-FOR	$ < nvars
29525	366	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
29525	366	8	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	$ < nvars
29526	369	12	MillerUpdatingRegression.java	tolset	row	int	0	NIL-FOR	$ < col
29526	369	12	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	row < $
2216	390	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ < 1
2217	393	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	ModelSpecificationException	nreq > $.nvars
2217	393	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ > this.nvars
2218	397	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.tol_set
29527	402	8	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ > -1
2219	403	12	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[i]) < $.tol[i]
2219	403	12	MillerUpdatingRegression.java	regcf	i	int	1	DEF	Math.sqrt(d[$]) < tol[$]
29528	410	16	MillerUpdatingRegression.java	regcf	j	int	0	NIL-FOR	$ < nreq
29528	410	16	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	j < $
2220	416	8	MillerUpdatingRegression.java	regcf	rankProblem	boolean	0	DEF	$
29529	417	12	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ < nreq
29529	417	12	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	i < $
2221	418	16	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2221	418	16	MillerUpdatingRegression.java	regcf	i	int	0	DEF	this.lindep[$]
29530	435	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
29530	435	8	MillerUpdatingRegression.java	singcheck	i	int	0	NIL-FOR	$ < nvars
29531	438	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
29531	438	8	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	$ < nvars
29532	444	12	MillerUpdatingRegression.java	singcheck	row	int	0	NIL-FOR	$ < col - 1
29532	444	12	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	row < $ - 1
2222	445	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	Math.abs($.r[pos]) * $.work_sing[row] < temp
2222	445	16	MillerUpdatingRegression.java	singcheck	row	int	0	DEF	Math.abs(r[pos]) * work_sing[$] < temp
2222	445	16	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	Math.abs(r[pos]) * work_sing[row] < $
2222	445	16	MillerUpdatingRegression.java	singcheck	pos	int	0	DEF	Math.abs(r[$]) * work_sing[row] < temp
2223	454	12	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	$.work_sing[col] < temp
2223	454	12	MillerUpdatingRegression.java	singcheck	col	int	0	DEF	work_sing[$] < temp
2223	454	12	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	work_sing[col] < $
2224	456	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	1	DEF	col < $.nvars - 1
2224	456	16	MillerUpdatingRegression.java	singcheck	col	int	1	DEF	$ < nvars - 1
29533	459	20	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	_xi < $.nvars
29533	459	20	MillerUpdatingRegression.java	singcheck	_xi	int	0	NIL-FOR	$ < nvars
29534	488	8	MillerUpdatingRegression.java	ss	i	int	0	NIL-FOR	$ > 0
2225	515	8	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	RET	$.nobs <= nreq
2225	515	8	MillerUpdatingRegression.java	cov	nreq	int	0	RET	this.nobs <= $
29535	519	8	MillerUpdatingRegression.java	cov	i	int	0	NIL-FOR	$ < nreq
29535	519	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	i < $
2226	520	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2226	520	12	MillerUpdatingRegression.java	cov	i	int	0	DEF	this.lindep[$]
29536	533	8	MillerUpdatingRegression.java	cov	row	int	0	NIL-FOR	$ < nreq
29536	533	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	row < $
2227	535	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[row]
2227	535	12	MillerUpdatingRegression.java	cov	row	int	0	DEF	this.lindep[$]
29537	536	16	MillerUpdatingRegression.java	cov	col	int	0	NIL-FOR	$ < nreq
29537	536	16	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	col < $
2228	537	20	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	1	DEF	$.lindep[col]
2228	537	20	MillerUpdatingRegression.java	cov	col	int	1	DEF	this.lindep[$]
2229	539	24	MillerUpdatingRegression.java	cov	col	int	1	DEF	row == $
2229	539	24	MillerUpdatingRegression.java	cov	row	int	1	DEF	$ == col
29538	544	24	MillerUpdatingRegression.java	cov	k	int	0	NIL-FOR	$ < nreq
29538	544	24	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	k < $
2230	545	28	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2230	545	28	MillerUpdatingRegression.java	cov	k	int	0	DEF	this.lindep[$]
29539	576	8	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	$ > 0
2231	577	12	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	1	DEF	$.lindep[row]
2231	577	12	MillerUpdatingRegression.java	inverse	row	int	1	DEF	this.lindep[$]
29540	579	16	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	$ > row
29540	579	16	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	col > $
29541	583	20	MillerUpdatingRegression.java	inverse	k	int	0	NIL-FOR	$ < col - 1
29541	583	20	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	k < $ - 1
2232	585	24	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2232	585	24	MillerUpdatingRegression.java	inverse	k	int	0	DEF	this.lindep[$]
2233	647	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	RET	in >= $.nvars
2233	647	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ < -1
2233	647	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ >= nvars
2234	652	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	DEF	$.d[in] > 0.0
2234	652	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	DEF	d[$] > 0.0
29542	655	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
29542	655	8	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	$ < nvars
29543	658	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col
29543	658	12	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	row < $
2235	662	12	MillerUpdatingRegression.java	getPartialCorrelations	sumxx	double	1	DEF	$ > 0.0
29544	669	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	row < $.nvars
29544	669	8	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < nvars
2236	672	8	MillerUpdatingRegression.java	getPartialCorrelations	sumyy	double	0	DEF	$ > 0.0
29545	676	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col1 < $.nvars
29545	676	8	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	$ < nvars
29546	680	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col1
29546	680	12	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	row < $
29547	682	16	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
29547	682	16	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
29548	690	12	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
29548	690	12	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
2237	728	8	MillerUpdatingRegression.java	vmove	from	int	0	RET	$ == to
2237	728	8	MillerUpdatingRegression.java	vmove	to	int	0	RET	from == $
2238	731	8	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	$.rss_set
2239	735	8	MillerUpdatingRegression.java	vmove	from	int	1	DEF	$ < to
2239	735	8	MillerUpdatingRegression.java	vmove	to	int	1	DEF	from < $
29549	747	8	MillerUpdatingRegression.java	vmove	count	int	0	NIL-WHILE	idx < $
29549	747	8	MillerUpdatingRegression.java	vmove	idx	int	0	NIL-WHILE	$ < count
2240	755	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 > $.epsilon
2240	755	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d1 > $.epsilon
2240	755	12	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	$ > this.epsilon
2240	755	12	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ > this.epsilon
2241	757	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	Math.abs(X) * Math.sqrt(d1) < $.tol[mp1]
2241	757	16	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	Math.abs(X) * Math.sqrt($) < tol[mp1]
2241	757	16	MillerUpdatingRegression.java	vmove	mp1	int	0	DEF	Math.abs(X) * Math.sqrt(d1) < tol[$]
2242	760	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	d1 < $.epsilon
2242	760	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	Math.abs(X) < $.epsilon
2242	760	16	MillerUpdatingRegression.java	vmove	d1	double	1	DEF	$ < this.epsilon
29550	764	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
29550	764	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2243	776	23	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 < $.epsilon
2243	776	23	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ < this.epsilon
29551	779	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	_i < m1 + $.nvars - m - 1
29551	779	20	MillerUpdatingRegression.java	vmove	_i	int	0	NIL-FOR	$ < m1 + nvars - m - 1
29551	779	20	MillerUpdatingRegression.java	vmove	m1	int	0	NIL-FOR	_i < $ + nvars - m - 1
29551	779	20	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	_i < m1 + nvars - $ - 1
2244	786	16	MillerUpdatingRegression.java	vmove	bSkipTo40	boolean	0	DEF	$
29552	794	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
29552	794	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2245	806	12	MillerUpdatingRegression.java	vmove	m	int	0	DEF	$ > 0
29553	808	16	MillerUpdatingRegression.java	vmove	row	int	0	NIL-FOR	$ < m
29553	808	16	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	row < $
2246	849	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length > $.nvars + 1 - pos1
2246	849	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length < 1
2246	849	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length > nvars + 1 - pos1
2246	849	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length < 1
2246	849	8	MillerUpdatingRegression.java	reorderRegressors	pos1	int	0	RET	list.length > nvars + 1 - $
29554	854	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-WHILE	i < $.nvars
29554	854	8	MillerUpdatingRegression.java	reorderRegressors	i	int	0	NIL-WHILE	$ < nvars
29555	856	12	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-FOR	j < list.$.length
29555	856	12	MillerUpdatingRegression.java	reorderRegressors	j	int	0	NIL-FOR	$ < list.length
29555	856	12	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	NIL-FOR	j < $.length
2247	857	16	MillerUpdatingRegression.java	reorderRegressors	j	int	0	RET	l == list[$]
2247	857	16	MillerUpdatingRegression.java	reorderRegressors	l	int	0	RET	$ == list[j]
2247	857	16	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	l == $[j]
2248	858	20	MillerUpdatingRegression.java	reorderRegressors	next	int	0	RET	i > $
2248	858	20	MillerUpdatingRegression.java	reorderRegressors	i	int	0	RET	$ > next
2249	861	24	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	1	RET	next >= list.$.length + pos1
2249	861	24	MillerUpdatingRegression.java	reorderRegressors	next	int	1	RET	$ >= list.length + pos1
2249	861	24	MillerUpdatingRegression.java	reorderRegressors	list	int[]	1	RET	next >= $.length + pos1
2249	861	24	MillerUpdatingRegression.java	reorderRegressors	pos1	int	1	RET	next >= list.length + $
2250	885	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	RET	row_data.$.length > $.nvars
2250	885	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row_data	double[]	0	RET	$.length > nvars
2251	889	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
29556	897	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	NIL-FOR	col < xrow.$.length
29556	897	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	$ < xrow.length
29556	897	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	xrow	double[]	0	NIL-FOR	col < $.length
2252	898	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[col]) < $.tol[col]
2252	898	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	1	DEF	Math.sqrt(d[$]) < tol[$]
29557	903	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row	int	0	NIL-FOR	$ < col
29557	903	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	row < $
2253	947	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= numberOfRegressors
2253	947	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	this.nobs <= $
2254	952	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	numberOfRegressors > $.nvars
2254	952	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	$ > this.nvars
29558	967	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
29558	967	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2255	968	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2255	968	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
29559	974	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < numberOfRegressors
29559	974	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	i < $
2256	975	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != i
2256	975	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != $
2257	980	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
29560	989	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
29560	989	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < nvars
29561	990	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < numberOfRegressors
29561	990	16	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	j < $
2258	991	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == i
2258	991	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == i
2258	991	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == $
29562	1002	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
29562	1002	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
29562	1002	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
29563	1004	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
29563	1004	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2259	1006	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2259	1006	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2260	1033	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	variablesToInclude.$.length > $.nvars
2260	1033	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > this.nvars
2261	1037	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= $.nvars
29564	1044	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
29564	1044	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
29564	1044	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2262	1045	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	i >= $.nvars
2262	1045	12	MillerUpdatingRegression.java	regress	i	int	0	ModelSpecificationException	$ >= this.nvars
2263	1049	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	$ > 0
2263	1049	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] == variablesToInclude[$ - 1]
2263	1049	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] == $[i - 1]
2264	1055	8	MillerUpdatingRegression.java	regress	iExclude	int	1	DEF	$ > 0
29565	1058	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
29565	1058	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
29565	1058	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2265	1059	16	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] > -1
2265	1059	16	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] > -1
29566	1081	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
29566	1081	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2266	1082	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2266	1082	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
29567	1088	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
29567	1088	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.nvars
2267	1089	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != series[i]
2267	1089	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != series[$]
2267	1089	12	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[i] != $[i]
2268	1094	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
29568	1101	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < series.$.length
29568	1101	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < series.length
29568	1101	12	MillerUpdatingRegression.java	regress	series	int[]	0	NIL-FOR	i < $.length
29569	1102	16	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	j < $.vorder.length
29569	1102	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < this.vorder.length
2269	1103	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == series[i]
2269	1103	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == series[i]
2269	1103	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == series[$]
2269	1103	20	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[j] == $[i]
29570	1114	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
29570	1114	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
29570	1114	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
29571	1116	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
29571	1116	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2270	1118	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2270	1118	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2040	76	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
2040	76	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
2040	76	8	Min.java	increment	d	double	0	DEF	$ < value
2041	131	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
2041	131	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2041	131	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
2041	131	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
29439	133	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29439	133	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29439	133	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2042	134	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2042	134	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
3206	92	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMin) < $
3206	92	8	MullerSolver.java	doSolve	fMin	double	0	RET	FastMath.abs($) < functionValueAccuracy
3207	96	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMax) < $
3207	96	8	MullerSolver.java	doSolve	fMax	double	0	RET	FastMath.abs($) < functionValueAccuracy
3208	100	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fInitial) < $
3208	100	8	MullerSolver.java	doSolve	fInitial	double	0	RET	FastMath.abs($) < functionValueAccuracy
3209	106	8	MullerSolver.java	doSolve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial)
3209	106	8	MullerSolver.java	doSolve	min	double	1	RET	isBracketing($, initial)
3209	106	8	MullerSolver.java	doSolve	initial	double	1	RET	isBracketing(min, $)
3210	160	12	MullerSolver.java	solve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3210	160	12	MullerSolver.java	solve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3210	160	12	MullerSolver.java	solve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3210	160	12	MullerSolver.java	solve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3210	160	12	MullerSolver.java	solve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
3211	173	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
3212	183	16	MullerSolver.java	solve	ym	double	1	DEF	FastMath.signum(y0) + FastMath.signum($) == 0.0
3212	183	16	MullerSolver.java	solve	y0	double	1	DEF	FastMath.signum($) + FastMath.signum(ym) == 0.0
3200	98	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y0) < $
3200	98	8	MullerSolver2.java	doSolve	y0	double	0	RET	FastMath.abs($) < functionValueAccuracy
3201	103	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y1) < $
3201	103	8	MullerSolver2.java	doSolve	y1	double	0	RET	FastMath.abs($) < functionValueAccuracy
3202	107	8	MullerSolver2.java	doSolve	y0	double	0	NoBracketingException	$ * y1 > 0
3202	107	8	MullerSolver2.java	doSolve	y1	double	0	NoBracketingException	y0 * $ > 0
3203	124	12	MullerSolver2.java	doSolve	delta	double	1	DEF	$ >= 0.0
3204	133	12	MullerSolver2.java	doSolve	denominator	double	1	DEF	$ != 0
29979	137	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x2
29979	137	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x1
29979	137	16	MullerSolver2.java	doSolve	x1	double	0	NIL-WHILE	x == $
29979	137	16	MullerSolver2.java	doSolve	x2	double	0	NIL-WHILE	x == $
3205	149	12	MullerSolver2.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3205	149	12	MullerSolver2.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3205	149	12	MullerSolver2.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3205	149	12	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3205	149	12	MullerSolver2.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
1689	164	8	MultiDirectionalSimplex.java	iterate	best	PointValuePair	0	RET	comparator.compare(reflected, $) < 0
1689	164	8	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare($, best) < 0
1689	164	8	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(reflected, best) < 0
1690	169	12	MultiDirectionalSimplex.java	iterate	expanded	PointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
1690	169	12	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	DEF	comparator.compare($, expanded) <= 0
1690	169	12	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
29213	203	8	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
29213	203	8	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
29214	206	12	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
29214	206	12	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
28251	172	8	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
28251	172	8	MultidimensionalCounter.java	MultidimensionalCounter	i	int	0	NIL-FOR	$ < last
28252	174	12	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	j < $.dimension
28252	174	12	MultidimensionalCounter.java	MultidimensionalCounter	j	int	0	NIL-FOR	$ < dimension
95	182	8	MultidimensionalCounter.java	MultidimensionalCounter	tS	int	0	NotStrictlyPositiveException	$ <= 0
96	216	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.totalSize
96	216	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ < 0
96	216	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ >= totalSize
28253	224	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
28253	224	8	MultidimensionalCounter.java	getCounts	i	int	0	NIL-FOR	$ < last
28254	227	12	MultidimensionalCounter.java	getCounts	count	int	0	NIL-WHILE	$ <= index
28254	227	12	MultidimensionalCounter.java	getCounts	index	int	0	NIL-WHILE	count <= $
97	253	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	DimensionMismatchException	c.$.length != $.dimension
97	253	8	MultidimensionalCounter.java	getCount	c	int	0	DimensionMismatchException	$.length != dimension
28255	257	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
28255	257	8	MultidimensionalCounter.java	getCount	i	int	0	NIL-FOR	$ < dimension
98	259	12	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.size[i]
98	259	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ >= size[i]
98	259	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ < 0
98	259	12	MultidimensionalCounter.java	getCount	i	int	0	OutOfRangeException	index >= size[$]
28256	291	8	MultidimensionalCounter.java	toString	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
28256	291	8	MultidimensionalCounter.java	toString	i	int	0	NIL-FOR	$ < dimension
2711	116	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	MathIllegalArgumentException	$ <= 1
1928	103	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
1928	103	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
1928	103	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
29406	106	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < lower.$.length
29406	106	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < lower.length
29406	106	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NIL-FOR	i < $.length
1929	108	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
1929	108	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
1929	108	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
29407	115	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
29407	115	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < mappers.length
1930	116	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(lower[$])
1930	116	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	1	DEF	Double.isInfinite($[i])
1931	117	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
1931	117	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
1932	125	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
1932	125	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
29408	145	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
29408	145	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	i	int	0	NIL-FOR	$ < mappers.length
29409	161	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
29409	161	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	i	int	0	NIL-FOR	$ < mappers.length
1922	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
1922	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
1922	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
1923	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != scale.$.length
1923	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != scale.length
1923	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	scale	double[]	0	DimensionMismatchException	lower.length != $.length
29403	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < lower.$.length
29403	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NIL-FOR	$ < lower.length
29403	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NIL-FOR	i < $.length
1924	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
1924	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
1924	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
29404	164	8	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < $.scale.$.length
29404	164	8	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	NIL-FOR	$ < scale.length
1925	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] < $.lower[i]
1925	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] > $.upper[i]
1925	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] < lower[$]
1925	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] > upper[$]
1925	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] < lower[i]
1925	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] > upper[i]
29405	168	16	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	j < $.scale.$.length
29405	168	16	MultivariateFunctionPenaltyAdapter.java	value	j	int	0	NIL-FOR	$ < scale.length
1926	170	20	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] < $.lower[j]
1926	170	20	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] < lower[$]
1926	170	20	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] < lower[j]
1927	172	27	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] > $.upper[j]
1927	172	27	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] > upper[$]
1927	172	27	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] > upper[j]
29410	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
29410	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
29411	150	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
29411	150	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
29412	187	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
29412	187	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
29412	187	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
1933	246	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
1934	248	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
29413	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
29413	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
29414	336	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
29414	336	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
29414	336	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
1935	337	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
29415	350	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
29415	350	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
1936	370	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
1936	370	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
1937	373	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
1938	612	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	MathIllegalStateException	$.n > 0
1939	624	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
1939	624	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
29501	194	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
29501	194	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
29501	194	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
29502	227	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
29502	227	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
29502	227	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2166	228	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
2166	228	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
2167	231	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2168	242	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2169	245	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
2170	259	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
2170	259	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
29503	264	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
29503	264	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
29503	264	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2171	265	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
2171	265	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
29504	267	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
29504	267	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
29504	267	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
29505	289	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
29505	289	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
29505	289	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2172	290	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2172	290	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
29506	304	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
29506	304	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
29506	304	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2173	305	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
2173	305	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
29507	347	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
29508	357	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
29509	375	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
2174	387	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
29510	391	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
29511	405	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
29511	405	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
29511	405	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2175	406	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2175	406	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
29393	201	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
29393	201	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
29394	203	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
29394	203	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
29395	208	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
29395	208	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
29396	214	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
29396	214	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1910	220	8	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare($, reflected) <= 0
1910	220	8	NelderMeadSimplex.java	iterate	secondBest	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1910	220	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, secondBest) < 0
1910	220	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(best, $) <= 0
1910	220	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
1910	220	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(best, reflected) <= 0
1911	224	15	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1911	224	15	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, best) < 0
1911	224	15	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, best) < 0
29397	227	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
29397	227	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1912	233	12	NelderMeadSimplex.java	iterate	expanded	PointValuePair	1	DEF	comparator.compare($, reflected) < 0
1912	233	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(expanded, $) < 0
1912	233	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
1913	241	12	NelderMeadSimplex.java	iterate	worst	PointValuePair	1	RET	comparator.compare(reflected, $) < 0
1913	241	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	RET	comparator.compare($, worst) < 0
1913	241	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	RET	$.compare(reflected, worst) < 0
29398	244	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
29398	244	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1914	249	16	NelderMeadSimplex.java	iterate	outContracted	PointValuePair	0	RET	comparator.compare($, reflected) <= 0
1914	249	16	NelderMeadSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
1914	249	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
29399	257	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
29399	257	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1915	263	16	NelderMeadSimplex.java	iterate	inContracted	PointValuePair	0	RET	comparator.compare($, worst) < 0
1915	263	16	NelderMeadSimplex.java	iterate	worst	PointValuePair	0	RET	comparator.compare(inContracted, $) < 0
1915	263	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(inContracted, worst) < 0
29400	272	12	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
29400	272	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
29401	274	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
29401	274	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
759	78	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	MathIllegalArgumentException	$[0] == null
28329	88	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	0	NIL-FOR	i < loop.$.length
28329	88	8	NestedLoops.java	NestedLoops	i	int	0	NIL-FOR	$ < loop.length
28329	88	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	NIL-FOR	i < $.length
760	99	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	1	DEF	Double.isInfinite($.polygon.getSize())
761	126	12	NestedLoops.java	add	THIS	NestedLoops	0	RET	$.child.$.polygon.contains(node.$.polygon)
761	126	12	NestedLoops.java	add	node	NestedLoops	0	RET	child.polygon.contains($.polygon)
28330	133	8	NestedLoops.java	add	iterator	Iterator<NestedLoops>	0	NIL-FOR	$.hasNext()
762	135	12	NestedLoops.java	add	THIS	NestedLoops	0	DEF	node.$.polygon.contains(child.$.polygon)
762	135	12	NestedLoops.java	add	child	NestedLoops	0	DEF	node.polygon.contains($.polygon)
762	135	12	NestedLoops.java	add	node	NestedLoops	0	DEF	$.polygon.contains(child.polygon)
763	144	12	NestedLoops.java	add	THIS	NestedLoops	0	MathIllegalArgumentException	factory.intersection(node.$.polygon, $.child.$.polygon).isEmpty()
763	144	12	NestedLoops.java	add	factory	RegionFactory<Euclidean2D>	0	MathIllegalArgumentException	$.intersection(node.polygon, child.polygon).isEmpty()
763	144	12	NestedLoops.java	add	node	NestedLoops	0	MathIllegalArgumentException	factory.intersection($.polygon, child.polygon).isEmpty()
764	170	8	NestedLoops.java	setClockWise	THIS	NestedLoops	0	DEF	$.originalIsClockwise ^ clockwise
764	170	8	NestedLoops.java	setClockWise	clockwise	boolean	0	DEF	originalIsClockwise ^ $
28331	174	12	NestedLoops.java	setClockWise	min	int	0	NIL-WHILE	++$ < --max
28331	174	12	NestedLoops.java	setClockWise	max	int	0	NIL-WHILE	++min < --$
3172	81	12	NewtonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
3172	81	12	NewtonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
3172	81	12	NewtonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
1652	137	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
1653	152	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1653	152	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
29184	153	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
29184	153	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
29185	163	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
29185	163	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1654	176	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	$ != null
1655	177	16	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	checker.converged(iter, $, current)
1655	177	16	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	RET	$.converged(iter, previous, current)
1655	177	16	NonLinearConjugateGradientOptimizer.java	doOptimize	current	PointValuePair	0	RET	checker.converged(iter, previous, $)
1655	177	16	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
29186	193	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
29186	193	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
1656	198	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1656	198	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
29187	199	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
29187	199	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
29188	208	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
29188	208	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1657	213	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
29189	217	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
29189	217	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
29189	217	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
1658	225	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
1658	225	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	iter % $ == 0
1658	225	12	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	1	DEF	$ % n == 0
29190	231	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
29190	231	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
29191	251	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
1659	254	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
1659	254	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
2540	85	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
2540	85	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
2541	88	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
2541	88	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
2542	91	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
2542	91	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
29685	150	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
29685	150	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
29686	156	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
29686	156	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
29686	156	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
29687	159	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
29687	159	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
29687	159	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
29688	199	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
29689	203	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
29689	203	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
29689	203	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
29690	210	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
29690	210	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
2543	232	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
29691	236	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
29691	236	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
2544	241	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
2545	266	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
29692	268	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
29692	268	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
2546	276	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
2547	282	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
2547	282	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
965	76	8	NormalDistribution.java	NormalDistribution	sd	double	0	NotStrictlyPositiveException	$ <= 0
966	138	8	NormalDistribution.java	cumulativeProbability	THIS	NormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.standardDeviation
966	138	8	NormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * standardDeviation
967	148	8	NormalDistribution.java	cumulativeProbability	x0	double	0	NumberIsTooLargeException	$ > x1
967	148	8	NormalDistribution.java	cumulativeProbability	x1	double	0	NumberIsTooLargeException	x0 > $
29572	106	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
29572	106	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
29573	107	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
29573	107	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
2271	108	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
2271	108	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
2271	108	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
2271	108	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
2272	134	8	OLSMultipleLinearRegression.java	calculateTotalSumOfSquares	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2273	184	8	OLSMultipleLinearRegression.java	calculateAdjustedRSquared	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2472	78	8	OnePointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2472	78	8	OnePointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2473	96	8	OnePointCrossover.java	crossover	length	int	0	DimensionMismatchException	$ != second.getLength()
2473	96	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
29641	111	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
29641	111	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
29642	116	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
29642	116	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
2097	172	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ > 0.5
2097	172	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ <= 0
2098	195	8	OneWayAnova.java	anovaStats	categoryData	Collection<double[]>	0	NullArgumentException	$ == null
2099	200	8	OneWayAnova.java	anovaStats	categoryData	Collection<double[]>	0	DimensionMismatchException	$.size() < 2
2100	208	12	OneWayAnova.java	anovaStats	THIS	OneWayAnova	0	DimensionMismatchException	$.array.$.length <= 1
29455	227	12	OneWayAnova.java	anovaStats	THIS	OneWayAnova	0	NIL-FOR	i < $.data.$.length
29455	227	12	OneWayAnova.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
212	150	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
213	155	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
213	155	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
214	179	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
214	179	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
214	179	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
215	183	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
215	183	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
28289	188	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
28289	188	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
216	191	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
216	191	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
216	191	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
217	209	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
217	209	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
217	209	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
218	213	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
218	213	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
28290	218	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
28290	218	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
219	221	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
219	221	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
219	221	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
220	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
220	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
221	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
221	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
221	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
221	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
221	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
222	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
222	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
223	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
223	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
223	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
223	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
223	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
224	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
224	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
225	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
225	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
226	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
226	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
227	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
227	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
227	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
227	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
227	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
228	353	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
228	353	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
228	353	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
229	357	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
229	357	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
28291	362	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
28291	362	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
230	365	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
230	365	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
230	365	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
231	410	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
232	418	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
233	420	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
28292	444	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
28292	444	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
234	445	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
234	445	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
500	163	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
501	168	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
501	168	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
502	192	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
502	192	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
502	192	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
503	196	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
503	196	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
28301	201	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
28301	201	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
504	204	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
504	204	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
504	204	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
505	222	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
505	222	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
505	222	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
506	226	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
506	226	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
28302	231	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
28302	231	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
507	234	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
507	234	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
507	234	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
508	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
508	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
509	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
509	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
509	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
509	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
509	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
510	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
510	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
511	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
511	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
511	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
511	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
511	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
512	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
512	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
513	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
513	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
514	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
514	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
515	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
515	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
515	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
515	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
515	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
516	366	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
516	366	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
516	366	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
517	370	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
517	370	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
28303	375	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
28303	375	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
518	378	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
518	378	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
518	378	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
519	423	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
520	431	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
521	433	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
28304	457	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
28304	457	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
522	458	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
522	458	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
1518	52	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lRow	long	0	NumberIsTooLargeException	$ * lCol >= Integer.MAX_VALUE
1518	52	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lCol	long	0	NumberIsTooLargeException	lRow * $ >= Integer.MAX_VALUE
29092	103	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
29093	137	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
29094	159	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
29095	165	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
29095	165	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
29096	189	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
29097	195	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
29097	195	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
1519	197	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
1519	197	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
1519	197	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
1520	201	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
1521	232	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
1522	246	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
1523	260	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
29021	136	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
29021	136	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
29021	136	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
1449	138	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1449	138	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
29022	165	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
29022	165	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
29022	165	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
1450	167	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1450	167	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
29023	193	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
29023	193	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
1451	195	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1451	195	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
1452	226	8	OpenMapRealVector.java	add	v	RealVector	1	RET	$ instanceof OpenMapRealVector
29024	248	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1453	251	12	OpenMapRealVector.java	add	key	int	1	DEF	randomAccess.containsKey($)
1453	251	12	OpenMapRealVector.java	add	randomAccess	OpenIntToDoubleHashMap	1	DEF	$.containsKey(key)
29025	268	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1454	278	8	OpenMapRealVector.java	append	v	RealVector	1	RET	$ instanceof OpenMapRealVector
29026	282	12	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < v.getDimension()
29026	282	12	OpenMapRealVector.java	append	v	RealVector	0	NIL-FOR	i < $.getDimension()
29027	321	8	OpenMapRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
1455	331	8	OpenMapRealVector.java	dotProduct	v	RealVector	1	RET	$ instanceof OpenMapRealVector
29028	344	8	OpenMapRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
29029	357	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
29030	372	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1456	375	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
1456	375	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
1456	375	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
1456	375	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
29031	399	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
29032	407	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1457	410	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1457	410	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
1458	422	8	OpenMapRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
29033	448	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
29034	454	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1459	457	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1459	457	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
1460	469	8	OpenMapRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
29035	485	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1461	488	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
1461	488	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
29036	493	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1462	496	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1462	496	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
1463	497	16	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
1463	497	16	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
1464	509	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
29037	521	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
1465	524	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
1466	527	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
29038	538	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
1467	540	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
29039	556	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
29039	556	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
1468	573	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isDefaultValue(value)
1468	573	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isDefaultValue($)
1469	575	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
1469	575	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
29040	585	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.getDimension()
29040	585	8	OpenMapRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < $.getDimension()
29041	593	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
29041	593	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
29042	610	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1470	613	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
1470	613	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1471	626	8	OpenMapRealVector.java	subtract	v	RealVector	1	RET	$ instanceof OpenMapRealVector
1472	645	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	MathArithmeticException	$.isDefaultValue(norm)
1472	645	8	OpenMapRealVector.java	unitize	norm	double	0	MathArithmeticException	isDefaultValue($)
29043	649	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
29044	660	8	OpenMapRealVector.java	toArray	iter	Iterator	0	NIL-WHILE	$.hasNext()
29045	682	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1473	698	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
1473	698	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
1474	701	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
1475	705	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
1475	705	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
1476	708	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
1476	708	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
29046	713	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1477	716	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
1477	716	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
29047	721	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1478	724	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
1478	724	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
1478	724	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
28308	139	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	NIL-FOR	i < components.$.length
28308	139	8	OrderedTuple.java	OrderedTuple	i	int	0	NIL-FOR	$ < components.length
28308	139	8	OrderedTuple.java	OrderedTuple	components	double	0	NIL-FOR	i < $.length
538	140	12	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isInfinite(components[$])
538	140	12	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isInfinite($[i])
539	141	16	OrderedTuple.java	OrderedTuple	i	int	1	DEF	components[$] < 0
539	141	16	OrderedTuple.java	OrderedTuple	components	double	1	DEF	$[i] < 0
540	146	19	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isNaN(components[$])
540	146	19	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isNaN($[i])
541	151	16	OrderedTuple.java	OrderedTuple	m	long	0	DEF	$ != 0
542	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.negInf
542	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.posInf
543	166	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	1	DEF	$.lsb <= msb
543	166	8	OrderedTuple.java	OrderedTuple	msb	int	1	DEF	lsb <= $
544	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding != null
544	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding.$.length == 1
544	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding[0] == 0x0L
28309	202	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	eIndex < $.encoding.$.length
28309	202	8	OrderedTuple.java	encode	eIndex	int	0	NIL-FOR	$ < encoding.length
28310	203	12	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	vIndex < $.components.$.length
28310	203	12	OrderedTuple.java	encode	vIndex	int	0	NIL-FOR	$ < components.length
545	204	16	OrderedTuple.java	encode	THIS	OrderedTuple	0	DEF	$.getBit(vIndex, k) != 0
545	204	16	OrderedTuple.java	encode	vIndex	int	0	DEF	getBit($, k) != 0
545	204	16	OrderedTuple.java	encode	k	int	0	DEF	getBit(vIndex, $) != 0
546	207	16	OrderedTuple.java	encode	shift	int	0	DEF	$-- == 0
547	248	8	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.components.$.length == ot.$.components.$.length
547	248	8	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	components.length == $.components.length
548	249	12	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.nan
549	251	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.nan
549	251	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.nan
550	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.posInf
550	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.negInf
550	253	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.posInf
551	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.negInf
551	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.posInf
551	255	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.negInf
552	259	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	DEF	$.offset < ot.$.offset
552	259	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	DEF	offset < $.offset
553	261	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	DEF	$.offset > ot.$.offset
553	261	23	OrderedTuple.java	compareTo	ot	OrderedTuple	0	DEF	offset > $.offset
28311	266	16	OrderedTuple.java	compareTo	i	int	0	NIL-FOR	$ < limit
28311	266	16	OrderedTuple.java	compareTo	limit	int	0	NIL-FOR	i < $
554	267	20	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding[i] < ot.$.encoding[i]
554	267	20	OrderedTuple.java	compareTo	i	int	1	RET	encoding[$] < ot.encoding[$]
554	267	20	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding[i] < $.encoding[i]
555	269	27	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.encoding[i] > ot.$.encoding[i]
555	269	27	OrderedTuple.java	compareTo	i	int	0	RET	encoding[$] > ot.encoding[$]
555	269	27	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	encoding[i] > $.encoding[i]
556	274	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length < ot.$.encoding.$.length
556	274	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length < $.encoding.length
557	276	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length > ot.$.encoding.$.length
557	276	23	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length > $.encoding.length
558	292	8	OrderedTuple.java	equals	THIS	OrderedTuple	1	RET	$ == other
558	292	8	OrderedTuple.java	equals	other	Object	1	RET	this == $
559	294	15	OrderedTuple.java	equals	other	Object	1	RET	$ instanceof OrderedTuple
28312	358	8	OrderedTuple.java	computeMSB	scale	int	0	NIL-WHILE	$ != 0
560	359	12	OrderedTuple.java	computeMSB	ll	long	0	DEF	($ & mask) != $
560	359	12	OrderedTuple.java	computeMSB	mask	long	0	DEF	(ll & $) != ll
28313	384	8	OrderedTuple.java	computeLSB	scale	int	0	NIL-WHILE	$ != 0
561	385	12	OrderedTuple.java	computeLSB	ll	long	0	DEF	($ & mask) == $
561	385	12	OrderedTuple.java	computeLSB	mask	long	0	DEF	(ll & $) == ll
562	406	8	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k > $.offset
562	406	8	OrderedTuple.java	getBit	e	int	1	RET	k < $
562	406	8	OrderedTuple.java	getBit	k	int	1	RET	$ > offset
562	406	8	OrderedTuple.java	getBit	k	int	1	RET	$ < e
563	408	15	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k == $.offset
563	408	15	OrderedTuple.java	getBit	k	int	1	RET	$ == offset
564	410	15	OrderedTuple.java	getBit	e	int	1	RET	k > ($ + 52)
564	410	15	OrderedTuple.java	getBit	k	int	1	RET	$ > (e + 52)
28321	72	8	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	NIL-FOR	i < outline.$.length
28321	72	8	OutlineExtractor.java	getOutline	i	int	0	NIL-FOR	$ < outline.length
28321	72	8	OutlineExtractor.java	getOutline	outline	Vector2D[][]	0	NIL-FOR	i < $.length
28322	76	12	OutlineExtractor.java	getOutline	end	int	0	NIL-WHILE	j < $
28322	76	12	OutlineExtractor.java	getOutline	j	int	0	NIL-WHILE	$ < end
706	77	16	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	1	DEF	$.pointIsBetween(rawLoop, end, j)
706	77	16	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	1	DEF	pointIsBetween($, end, j)
706	77	16	OutlineExtractor.java	getOutline	end	int	1	DEF	pointIsBetween(rawLoop, $, j)
706	77	16	OutlineExtractor.java	getOutline	j	int	1	DEF	pointIsBetween(rawLoop, end, $)
28323	79	20	OutlineExtractor.java	getOutline	k	int	0	NIL-FOR	$ < (end - 1)
28323	79	20	OutlineExtractor.java	getOutline	end	int	0	NIL-FOR	k < ($ - 1)
707	88	12	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	DEF	end != rawLoop.$.length
707	88	12	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	0	DEF	end != $.length
707	88	12	OutlineExtractor.java	getOutline	end	int	0	DEF	$ != rawLoop.length
147	84	8	Pair.java	equals	o	Object	0	RET	$ == null
148	87	8	Pair.java	equals	o	Object	1	RET	$ instanceof Pair
2525	56	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	name	String	0	DEF	pode.isSupported($)
2525	56	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	pode	ParameterizedODE	0	DEF	$.isSupported(name)
29678	84	8	ParameterJacobianWrapper.java	computeParameterJacobian	i	int	0	NIL-FOR	$ < n
29678	84	8	ParameterJacobianWrapper.java	computeParameterJacobian	n	int	0	NIL-FOR	i < $
2670	72	8	ParameterizedWrapper.java	getParameter	THIS	ParameterizedWrapper	0	MathIllegalArgumentException	$.isSupported(name)
2670	72	8	ParameterizedWrapper.java	getParameter	name	String	0	MathIllegalArgumentException	isSupported($)
1007	82	8	PascalDistribution.java	PascalDistribution	r	int	0	NotStrictlyPositiveException	$ <= 0
1008	86	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ < 0
1008	86	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ > 1
1009	115	8	PascalDistribution.java	probability	x	int	1	DEF	$ < 0
1010	129	8	PascalDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
2156	95	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	NullArgumentException	$ == null
29488	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
29488	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
29489	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
29489	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
29490	167	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
29490	167	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
29491	168	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
29491	168	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
2157	169	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
2157	169	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
29492	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
29492	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
29493	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
29493	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
2158	229	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2158	229	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2158	229	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2159	231	15	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2159	231	15	PearsonsCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
29494	235	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
29494	235	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
29494	235	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
29495	256	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
29495	256	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
29496	259	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
29496	259	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
2160	279	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2160	279	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
2046	133	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2047	145	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2048	261	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ <= 0
2048	261	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ > 100
2049	264	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
2050	267	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
2051	277	8	Percentile.java	evaluate	THIS	Percentile	1	DEF	values == $.getDataRef()
2051	277	8	Percentile.java	evaluate	values	double[]	1	DEF	$ == getDataRef()
2052	287	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
2053	290	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
2053	290	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
29441	315	8	Percentile.java	select	begin	int	0	NIL-WHILE	end - $ > MIN_SELECT_SIZE
29441	315	8	Percentile.java	select	end	int	0	NIL-WHILE	$ - begin > MIN_SELECT_SIZE
2054	318	12	Percentile.java	select	THIS	Percentile	1	DEF	node < pivotsHeap.$.length
2054	318	12	Percentile.java	select	node	int	1	DEF	pivotsHeap[$] >= 0
2054	318	12	Percentile.java	select	node	int	1	DEF	$ < pivotsHeap.length
2054	318	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	$[node] >= 0
2054	318	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	node < $.length
2055	325	16	Percentile.java	select	THIS	Percentile	0	DEF	node < pivotsHeap.$.length
2055	325	16	Percentile.java	select	node	int	0	DEF	$ < pivotsHeap.length
2055	325	16	Percentile.java	select	pivotsHeap	int[]	0	DEF	node < $.length
2056	330	12	Percentile.java	select	pivot	int	1	RET	k == $
2056	330	12	Percentile.java	select	k	int	1	RET	$ == pivot
2057	333	19	Percentile.java	select	pivot	int	1	DEF	k < $
2057	333	19	Percentile.java	select	k	int	1	DEF	$ < pivot
2058	367	8	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wMiddle
2058	367	8	Percentile.java	medianOf3	wMiddle	double	1	RET	wBegin < $
2059	368	12	Percentile.java	medianOf3	wMiddle	double	1	RET	$ < wEnd
2059	368	12	Percentile.java	medianOf3	wEnd	double	1	RET	wMiddle < $
2060	374	12	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wEnd
2060	374	12	Percentile.java	medianOf3	wEnd	double	1	RET	wBegin < $
29442	403	8	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
29442	403	8	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
29443	404	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[j] >= $
29443	404	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
29443	404	12	Percentile.java	partition	j	int	0	NIL-WHILE	work[$] >= value
29443	404	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
29443	404	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[j] >= value
29444	407	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[i] <= $
29444	407	12	Percentile.java	partition	i	int	0	NIL-WHILE	work[$] <= value
29444	407	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
29444	407	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
29444	407	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[i] <= value
2061	411	12	Percentile.java	partition	i	int	0	DEF	$ < j
2061	411	12	Percentile.java	partition	j	int	0	DEF	i < $
2062	418	8	Percentile.java	partition	value	double	0	DEF	work[i] > $
2062	418	8	Percentile.java	partition	i	int	0	DEF	$ >= end
2062	418	8	Percentile.java	partition	i	int	0	DEF	work[$] > value
2062	418	8	Percentile.java	partition	work	double[]	0	DEF	$[i] > value
2062	418	8	Percentile.java	partition	end	int	0	DEF	i >= $
29445	434	8	Percentile.java	insertionSort	j	int	0	NIL-FOR	$ < end
29445	434	8	Percentile.java	insertionSort	end	int	0	NIL-FOR	j < $
29446	437	12	Percentile.java	insertionSort	saved	double	0	NIL-WHILE	$ < work[i]
29446	437	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	saved < work[$]
29446	437	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	$ >= begin
29446	437	12	Percentile.java	insertionSort	work	double[]	0	NIL-WHILE	saved < $[i]
29446	437	12	Percentile.java	insertionSort	begin	int	0	NIL-WHILE	i >= $
2063	464	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ > 100
2063	464	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ <= 0
2064	493	8	Percentile.java	copy	THIS	Percentile	0	DEF	source.$.cachedPivots != null
2064	493	8	Percentile.java	copy	source	Percentile	0	DEF	$.cachedPivots != null
645	138	8	Plane.java	setNormal	norm	double	0	MathArithmeticException	$ < 1.0e-10
646	308	8	Plane.java	intersection	dot	double	0	RET	FastMath.abs($) < 1.0e-10
647	323	8	Plane.java	intersection	direction	Vector3D	0	RET	$.getNorm() < 1.0e-10
648	360	8	Plane.java	intersection	determinant	double	0	RET	FastMath.abs($) < 1.0e-10
1049	89	8	PoissonDistribution.java	PoissonDistribution	p	double	0	NotStrictlyPositiveException	$ <= 0
1050	137	8	PoissonDistribution.java	probability	x	int	1	DEF	$ == Integer.MAX_VALUE
1050	137	8	PoissonDistribution.java	probability	x	int	1	DEF	$ < 0
1051	139	15	PoissonDistribution.java	probability	x	int	1	DEF	$ == 0
1052	151	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ < 0
1053	154	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
743	134	8	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	v.$.length == 0
743	134	8	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$.length == 0
744	135	12	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	(Boolean) $.getTree(false).getAttribute()
745	142	15	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$[0][0] == null
746	168	12	PolygonsSet.java	computeGeometricalProperties	sum	double	1	DEF	$ < 0
747	205	8	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	$.vertices == null
748	206	12	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.getTree(false).getCut() == null
28326	218	16	PolygonsSet.java	getVertices	sorted	AVLTree<ComparableSegment>	0	NIL-WHILE	$.isEmpty()
749	221	20	PolygonsSet.java	getVertices	loop	List<ComparableSegment>	0	DEF	$ != null
750	231	20	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.size() < 2
751	239	27	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.get(0).getStart() == null
752	245	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == 0
753	253	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j < (array.$.length - 1)
753	253	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j < ($.length - 1)
753	253	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ < (array.length - 1)
754	258	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j == (array.$.length - 1)
754	258	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j == ($.length - 1)
754	258	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == (array.length - 1)
28327	304	8	PolygonsSet.java	followLoop	globalStart	Vector2D	0	NIL-WHILE	$.distance(end) > 1.0e-10
28327	304	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	$ != null
28327	304	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	globalStart.distance($) > 1.0e-10
28327	304	8	PolygonsSet.java	followLoop	open	boolean	0	NIL-WHILE	$
28328	312	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$.getElement().compareTo(upperRight) <= 0
28328	312	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$ != null
28328	312	12	PolygonsSet.java	followLoop	upperRight	ComparableSegment	0	NIL-FOR	n.getElement().compareTo($) <= 0
755	317	16	PolygonsSet.java	followLoop	distance	double	0	DEF	$ < selectedDistance
755	317	16	PolygonsSet.java	followLoop	selectedDistance	double	0	DEF	distance < $
756	324	12	PolygonsSet.java	followLoop	selectedDistance	double	0	RET	$ > 1.0e-10
757	337	8	PolygonsSet.java	followLoop	loop	ArrayList<ComparableSegment>	0	RET	$.size() == 2
757	337	8	PolygonsSet.java	followLoop	open	boolean	0	RET	$
758	342	8	PolygonsSet.java	followLoop	end	Vector2D	0	MathInternalError	$ == null
758	342	8	PolygonsSet.java	followLoop	open	boolean	0	MathInternalError	$
708	120	8	PolyhedronsSet.java	computeGeometricalProperties	THIS	PolyhedronsSet	1	DEF	$.getSize() < 0
709	218	8	PolyhedronsSet.java	recurseFirstIntersection	cut	SubHyperplane<Euclidean3D>	0	RET	$ == null
710	230	8	PolyhedronsSet.java	recurseFirstIntersection	offset	double	1	DEF	$ < 0
711	238	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
712	241	12	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
713	248	8	PolyhedronsSet.java	recurseFirstIntersection	crossed	SubHyperplane<Euclidean3D>	0	RET	$ != null
714	252	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
715	255	12	PolyhedronsSet.java	recurseFirstIntersection	hit3D	Vector3D	0	RET	$ != null
716	257	16	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
717	280	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
717	280	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
717	280	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
717	280	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusOutside() != null
718	284	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
718	284	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
718	284	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
718	284	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusInside() != null
3257	70	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NoDataException	$ == 0
29993	73	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	$ > 1
29993	73	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	c[$ - 1] == 0
29993	73	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[n - 1] == 0
3258	130	8	PolynomialFunction.java	evaluate	n	int	0	NoDataException	$ == 0
29994	134	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >= 0
29995	153	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
29995	153	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
29996	178	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
29996	178	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
3259	181	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
3259	181	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
29997	182	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
29997	182	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
29998	200	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
29998	200	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
29999	215	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
29999	215	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
29999	215	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
30000	217	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < FastMath.min($.coefficients.$.length, i + 1)
30000	217	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < FastMath.min(coefficients.length, i + 1)
30000	217	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < FastMath.min(coefficients.length, $ + 1)
3260	239	8	PolynomialFunction.java	differentiate	n	int	0	NoDataException	$ == 0
3261	242	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
30001	246	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
3262	288	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
3263	289	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
30002	296	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
30002	296	8	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
3264	297	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
3264	297	12	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
3265	298	16	PolynomialFunction.java	toString	s	StringBuilder	1	DEF	$.length() > 0
3266	299	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
3266	299	20	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
3267	305	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
3267	305	20	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
3268	311	16	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
3269	317	16	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
3270	335	8	PolynomialFunction.java	toString	c	String	1	RET	$.endsWith(".0")
3271	354	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
3271	354	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
3272	357	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
3273	361	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
3273	361	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
3249	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.verifyInterpolationArray(x, y, false)
3249	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	x	double	0	DEF	verifyInterpolationArray($, y, false)
3249	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	y	double	0	DEF	verifyInterpolationArray(x, $, false)
3250	147	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
3251	172	8	PolynomialFunctionLagrangeForm.java	evaluate	THIS	PolynomialFunctionLagrangeForm	0	RET	$.verifyInterpolationArray(x, y, false)
3251	172	8	PolynomialFunctionLagrangeForm.java	evaluate	x	double	0	RET	verifyInterpolationArray($, y, false)
3251	172	8	PolynomialFunctionLagrangeForm.java	evaluate	y	double	0	RET	verifyInterpolationArray(x, $, false)
29984	210	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
29984	210	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
3252	216	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	dist	double	0	DEF	$ < min_dist
3252	216	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	min_dist	double	0	DEF	dist < $
29985	225	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
29985	225	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
29986	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	j	int	0	NIL-FOR	$ < n-i
29986	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	j < n-$
29986	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	j < $-i
3253	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	1	DEF	nearest < 0.5*(n-$+1)
3253	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	nearest	int	1	DEF	$ < 0.5*(n-i+1)
3253	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	1	DEF	nearest < 0.5*($-i+1)
29987	256	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
29987	256	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
29988	263	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
29988	263	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
29989	264	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
29990	272	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
29990	272	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
29991	275	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
29991	275	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
3254	276	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
3254	276	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
29992	286	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
3255	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DimensionMismatchException	x.$.length != y.$.length
3255	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DimensionMismatchException	$.length != y.length
3255	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DimensionMismatchException	x.length != $.length
3256	317	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	NumberIsTooSmallException	x.$.length < 2
3256	317	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	NumberIsTooSmallException	$.length < 2
3276	140	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
30011	168	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
30012	183	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
30012	183	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
30013	188	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
30014	189	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
3277	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	a.$.length == 0
3277	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	c.$.length == 0
3277	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	NoDataException	$.length == 0
3277	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	NoDataException	$.length == 0
3278	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DimensionMismatchException	a.$.length != c.$.length + 1
3278	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DimensionMismatchException	$.length != c.length + 1
3278	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DimensionMismatchException	a.length != $.length + 1
3243	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NullArgumentException	$ == null
3243	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	NullArgumentException	$ == null
3244	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	NumberIsTooSmallException	knots.$.length < 2
3244	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NumberIsTooSmallException	$.length < 2
3245	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DimensionMismatchException	knots.$.length - 1 != polynomials.$.length
3245	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DimensionMismatchException	$.length - 1 != polynomials.length
3245	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DimensionMismatchException	knots.length - 1 != $.length
3246	133	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v < $.knots[0]
3246	133	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v > $.knots[$.n]
3246	133	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ < knots[0]
3246	133	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ > knots[n]
3247	137	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
3248	143	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
3248	143	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
29983	165	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
29983	165	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
3274	219	8	PolynomialsUtils.java	createJacobiPolynomial	key	JacobiKey	0	DEF	JACOBI_COEFFICIENTS.containsKey($)
30003	329	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
30003	329	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
30004	330	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ <= i
30004	330	12	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	j <= $
30005	336	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
30005	336	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
30006	342	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < d
30006	342	8	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	i < $
30007	343	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ < d
30007	343	12	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	j < $
3275	365	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
3275	365	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
30008	381	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
30008	381	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
30009	401	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
30009	401	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
30010	417	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
30010	417	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
1901	85	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1902	88	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
29389	122	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
29389	122	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
29390	142	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
29390	142	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1903	153	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
1903	153	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
1903	153	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
1904	166	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
1905	167	16	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	DEF	$ != null
1906	171	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
1907	172	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
1907	172	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
29391	181	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
29391	181	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1908	189	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
1908	189	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
1909	196	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
29392	229	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
29392	229	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
195	89	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, eps)
195	89	8	Precision.java	compareTo	x	double	1	RET	equals($, y, eps)
195	89	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, eps)
195	89	8	Precision.java	compareTo	eps	double	1	RET	equals(x, y, $)
196	91	15	Precision.java	compareTo	x	double	0	RET	$ < y
196	91	15	Precision.java	compareTo	y	double	0	RET	x < $
197	115	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, maxUlps)
197	115	8	Precision.java	compareTo	x	double	1	RET	equals($, y, maxUlps)
197	115	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, maxUlps)
197	115	8	Precision.java	compareTo	maxUlps	int	1	RET	equals(x, y, $)
198	117	15	Precision.java	compareTo	x	double	0	RET	$ < y
198	117	15	Precision.java	compareTo	y	double	0	RET	x < $
199	200	8	Precision.java	equals	xInt	int	0	DEF	$ < 0
200	203	8	Precision.java	equals	yInt	int	0	DEF	$ < 0
201	305	8	Precision.java	equals	xInt	long	0	DEF	$ < 0
202	308	8	Precision.java	equals	yInt	long	0	DEF	$ < 0
203	370	12	Precision.java	round	x	double	1	RET	Double.isInfinite($)
204	425	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
205	435	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
206	444	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
207	453	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
208	455	19	Precision.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
209	459	16	Precision.java	roundUnscaled	unscaled	double	1	DEF	FastMath.floor($) / 2.0 == FastMath.floor(Math .floor($) / 2.0)
210	471	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
211	479	12	Precision.java	roundUnscaled	unscaled	double	0	MathArithmeticException	$ != FastMath.floor($)
1227	144	8	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$ != null
1228	145	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	NonSquareOperatorException	$.getColumnDimension() != $.getRowDimension()
1229	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	m.getRowDimension() != $.getRowDimension()
1229	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$.getRowDimension() != a.getRowDimension()
1950	122	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length, true)
1950	122	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1950	122	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1950	122	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
29421	124	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29421	124	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29421	124	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1951	162	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, weights, begin, length, true)
1951	162	8	Product.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
1951	162	8	Product.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
1951	162	8	Product.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
1951	162	8	Product.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
29422	164	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29422	164	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29422	164	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
910	100	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
911	103	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
912	138	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
913	149	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
914	162	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
915	170	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
916	201	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
917	209	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
918	216	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
919	220	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
920	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
893	101	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
894	138	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
895	149	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
896	162	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
897	170	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
898	201	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
899	209	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
900	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
28643	108	8	QRDecomposition.java	QRDecomposition	minor	int	0	NIL-FOR	$ < FastMath.min(m, n)
28643	108	8	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	minor < FastMath.min($, n)
28643	108	8	QRDecomposition.java	QRDecomposition	n	int	0	NIL-FOR	minor < FastMath.min(m, $)
28644	120	12	QRDecomposition.java	QRDecomposition	row	int	0	NIL-FOR	$ < m
28644	120	12	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	row < $
1248	127	12	QRDecomposition.java	QRDecomposition	a	double	0	DEF	$ != 0.0
28645	151	16	QRDecomposition.java	QRDecomposition	col	int	0	NIL-FOR	$ < n
28645	151	16	QRDecomposition.java	QRDecomposition	n	int	0	NIL-FOR	col < $
28646	154	20	QRDecomposition.java	QRDecomposition	row	int	0	NIL-FOR	$ < m
28646	154	20	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	row < $
28647	160	20	QRDecomposition.java	QRDecomposition	row	int	0	NIL-FOR	$ < m
28647	160	20	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	row < $
1249	175	8	QRDecomposition.java	getR	THIS	QRDecomposition	0	DEF	$.cachedR == null
28648	182	12	QRDecomposition.java	getR	row	int	0	NIL-FOR	$ >= 0
28649	184	16	QRDecomposition.java	getR	col	int	0	NIL-FOR	$ < n
28649	184	16	QRDecomposition.java	getR	n	int	0	NIL-FOR	col < $
1250	201	8	QRDecomposition.java	getQ	THIS	QRDecomposition	0	DEF	$.cachedQ == null
1251	213	8	QRDecomposition.java	getQT	THIS	QRDecomposition	0	DEF	$.cachedQT == null
28650	225	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= FastMath.min(m, n)
28650	225	12	QRDecomposition.java	getQT	n	int	0	NIL-FOR	minor >= FastMath.min(m, $)
28650	225	12	QRDecomposition.java	getQT	m	int	0	NIL-FOR	minor >= FastMath.min($, n)
28651	229	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= 0
1252	232	16	QRDecomposition.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
1252	232	16	QRDecomposition.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
28652	233	20	QRDecomposition.java	getQT	col	int	0	NIL-FOR	$ < m
28652	233	20	QRDecomposition.java	getQT	m	int	0	NIL-FOR	col < $
28653	235	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
28653	235	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
28654	240	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
28654	240	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
1253	261	8	QRDecomposition.java	getH	THIS	QRDecomposition	0	DEF	$.cachedH == null
28655	266	12	QRDecomposition.java	getH	i	int	0	NIL-FOR	$ < m
28655	266	12	QRDecomposition.java	getH	m	int	0	NIL-FOR	i < $
28656	267	16	QRDecomposition.java	getH	j	int	0	NIL-FOR	$ < FastMath.min(i + 1, n)
28656	267	16	QRDecomposition.java	getH	i	int	0	NIL-FOR	j < FastMath.min($ + 1, n)
28656	267	16	QRDecomposition.java	getH	n	int	0	NIL-FOR	j < FastMath.min(i + 1, $)
2373	178	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2374	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2375	193	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2376	201	8	RandomDataImpl.java	nextHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
29607	216	8	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
29607	216	8	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
29607	216	8	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
2377	227	12	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
2378	237	8	RandomDataImpl.java	nextInt	lower	int	0	NumberIsTooLargeException	$ >= upper
2378	237	8	RandomDataImpl.java	nextInt	upper	int	0	NumberIsTooLargeException	lower >= $
2379	248	8	RandomDataImpl.java	nextLong	lower	long	0	NumberIsTooLargeException	$ >= upper
2379	248	8	RandomDataImpl.java	nextLong	upper	long	0	NumberIsTooLargeException	lower >= $
2380	274	8	RandomDataImpl.java	nextSecureHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
29608	293	8	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
29608	293	8	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
29609	302	12	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
29609	302	12	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
29609	302	12	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
2381	313	16	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
2382	324	8	RandomDataImpl.java	nextSecureInt	lower	int	0	NumberIsTooLargeException	$ >= upper
2382	324	8	RandomDataImpl.java	nextSecureInt	upper	int	0	NumberIsTooLargeException	lower >= $
2383	337	8	RandomDataImpl.java	nextSecureLong	lower	long	0	NumberIsTooLargeException	$ >= upper
2383	337	8	RandomDataImpl.java	nextSecureLong	upper	long	0	NumberIsTooLargeException	lower >= $
2384	361	8	RandomDataImpl.java	nextPoisson	mean	double	0	NotStrictlyPositiveException	$ <= 0
2385	366	8	RandomDataImpl.java	nextPoisson	pivot	double	1	RET	mean < $
2385	366	8	RandomDataImpl.java	nextPoisson	mean	double	1	RET	$ < pivot
29610	373	12	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
29610	373	12	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
2386	376	16	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
2386	376	16	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
2387	408	16	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= p1
2387	408	16	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u <= $
2388	411	20	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	x < -$
2388	411	20	RandomDataImpl.java	nextPoisson	delta	double	0	DEF	x > $
2388	411	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ > delta
2388	411	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ < -lambda
2389	418	20	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
2389	418	20	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u > $ + p2
2389	418	20	RandomDataImpl.java	nextPoisson	p2	double	1	DEF	u > p1 + $
2390	429	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < -t
2390	429	16	RandomDataImpl.java	nextPoisson	a	int	0	DEF	$ == 0
2390	429	16	RandomDataImpl.java	nextPoisson	t	double	0	DEF	v < -$
2391	435	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < qa
2391	435	16	RandomDataImpl.java	nextPoisson	qa	double	0	DEF	v < $
2392	439	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ > qr
2392	439	16	RandomDataImpl.java	nextPoisson	qr	double	0	DEF	v > $
2393	442	16	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + $)) + logLambdaFactorial
2393	442	16	RandomDataImpl.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
2393	442	16	RandomDataImpl.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + $
2393	442	16	RandomDataImpl.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - ArithmeticUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
2393	442	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
2394	454	8	RandomDataImpl.java	nextGaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
2395	473	8	RandomDataImpl.java	nextExponential	mean	double	0	NotStrictlyPositiveException	$ <= 0.0
29611	482	8	RandomDataImpl.java	nextExponential	u	double	0	NIL-WHILE	$ < 0.5
2396	491	8	RandomDataImpl.java	nextExponential	u	double	0	RET	$ <= EXPONENTIAL_SA_QI[0]
29612	501	8	RandomDataImpl.java	nextExponential	u	double	0	NIL-DOWHILE	$ > EXPONENTIAL_SA_QI[i]
29612	501	8	RandomDataImpl.java	nextExponential	i	int	0	NIL-DOWHILE	u > EXPONENTIAL_SA_QI[$]
2397	505	12	RandomDataImpl.java	nextExponential	u2	double	0	DEF	$ < umin
2397	505	12	RandomDataImpl.java	nextExponential	umin	double	0	DEF	u2 < $
2398	551	8	RandomDataImpl.java	nextUniform	lower	double	0	NumberIsTooLargeException	$ >= upper
2398	551	8	RandomDataImpl.java	nextUniform	upper	double	0	NumberIsTooLargeException	lower >= $
2399	556	8	RandomDataImpl.java	nextUniform	lower	double	0	MathIllegalArgumentException	Double.isInfinite($)
2399	556	8	RandomDataImpl.java	nextUniform	upper	double	0	MathIllegalArgumentException	Double.isInfinite($)
2400	560	8	RandomDataImpl.java	nextUniform	lower	double	0	MathIllegalArgumentException	Double.isNaN($)
2400	560	8	RandomDataImpl.java	nextUniform	upper	double	0	MathIllegalArgumentException	Double.isNaN($)
29613	568	8	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
29613	568	8	RandomDataImpl.java	nextUniform	lowerInclusive	boolean	0	NIL-WHILE	$
2401	666	8	RandomDataImpl.java	nextGamma	shape	double	0	RET	$ < 1
2402	675	16	RandomDataImpl.java	nextGamma	p	double	1	RET	$ <= 1
2403	681	20	RandomDataImpl.java	nextGamma	x	double	1	DEF	u2 > FastMath.exp(-$)
2403	681	20	RandomDataImpl.java	nextGamma	u2	double	1	DEF	$ > FastMath.exp(-x)
2404	693	20	RandomDataImpl.java	nextGamma	x	double	1	DEF	u2 > FastMath.pow($, shape - 1)
2404	693	20	RandomDataImpl.java	nextGamma	u2	double	1	DEF	$ > FastMath.pow(x, shape - 1)
2404	693	20	RandomDataImpl.java	nextGamma	shape	double	1	DEF	u2 > FastMath.pow(x, $ - 1)
2405	713	12	RandomDataImpl.java	nextGamma	v	double	0	DEF	$ <= 0
2406	721	12	RandomDataImpl.java	nextGamma	xx	double	0	RET	u < 1 - 0.0331*$*$
2406	721	12	RandomDataImpl.java	nextGamma	u	double	0	RET	$ < 1 - 0.0331*xx*xx
2407	725	12	RandomDataImpl.java	nextGamma	v	double	0	RET	FastMath.log(u) < 0.5*xx + d*(1 - $ + FastMath.log($))
2407	725	12	RandomDataImpl.java	nextGamma	xx	double	0	RET	FastMath.log(u) < 0.5*$ + d*(1 - v + FastMath.log(v))
2407	725	12	RandomDataImpl.java	nextGamma	u	double	0	RET	FastMath.log($) < 0.5*xx + d*(1 - v + FastMath.log(v))
2407	725	12	RandomDataImpl.java	nextGamma	d	double	0	RET	FastMath.log(u) < 0.5*xx + $*(1 - v + FastMath.log(v))
2408	812	8	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
2409	836	8	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
2410	853	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
2411	867	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
2412	883	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
2413	894	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
2414	935	8	RandomDataImpl.java	nextPermutation	n	int	0	NumberIsTooLargeException	k > $
2414	935	8	RandomDataImpl.java	nextPermutation	k	int	0	NumberIsTooLargeException	$ > n
2415	939	8	RandomDataImpl.java	nextPermutation	k	int	0	NotStrictlyPositiveException	$ <= 0
29614	947	8	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
29614	947	8	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
2416	970	8	RandomDataImpl.java	nextSample	len	int	0	NumberIsTooLargeException	k > $
2416	970	8	RandomDataImpl.java	nextSample	k	int	0	NumberIsTooLargeException	$ > len
2417	974	8	RandomDataImpl.java	nextSample	k	int	0	NotStrictlyPositiveException	$ <= 0
29615	981	8	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
29615	981	8	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
29616	1025	8	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
29616	1025	8	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
2418	1026	12	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
29617	1046	8	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
29617	1046	8	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
2461	130	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	representation.size() != $
2461	130	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	DimensionMismatchException	$.size() != l
2462	133	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	sortedRepr.size() != $
2462	133	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	DimensionMismatchException	$.size() != l
29635	142	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
29635	142	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
2463	160	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
2464	165	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
2464	165	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
29636	174	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
29636	174	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
2465	175	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
2465	175	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
2465	175	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
2466	191	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
2466	191	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
29637	208	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
29637	208	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
29638	223	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
29638	223	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
2467	270	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	DimensionMismatchException	$.size() != permutedData.size()
2467	270	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	DimensionMismatchException	originalData.size() != $.size()
29639	278	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
29639	278	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
2468	280	12	RandomKey.java	inducedPermutation	index	int	0	MathIllegalArgumentException	$ == -1
29640	305	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
29640	305	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
2436	41	8	RandomKeyMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof RandomKey<?>
1486	174	8	RealVector.java	checkVectorDimensions	d	int	0	DimensionMismatchException	$ != n
1486	174	8	RealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	d != $
1487	186	8	RealVector.java	checkIndex	THIS	RealVector	0	OutOfRangeException	index >= $.getDimension()
1487	186	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1487	186	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
29048	206	8	RealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
29048	206	8	RealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
29048	206	8	RealVector.java	add	e	Entry	0	NIL-WHILE	($ = it.next()) != null
29049	226	8	RealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
29049	226	8	RealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
29049	226	8	RealVector.java	subtract	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1488	252	8	RealVector.java	mapAddToSelf	d	double	0	RET	$ != 0
29050	278	8	RealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
29050	278	8	RealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
29050	278	8	RealVector.java	dotProduct	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1489	295	8	RealVector.java	cosine	norm	double	0	MathArithmeticException	$ == 0
1489	295	8	RealVector.java	cosine	vNorm	double	0	MathArithmeticException	$ == 0
29051	341	8	RealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
29051	341	8	RealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
29051	341	8	RealVector.java	getDistance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
29052	362	8	RealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
29052	362	8	RealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
29052	362	8	RealVector.java	getNorm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
29053	383	8	RealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
29053	383	8	RealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
29053	383	8	RealVector.java	getL1Norm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
29054	403	8	RealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
29054	403	8	RealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
29054	403	8	RealVector.java	getLInfNorm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
29055	425	8	RealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
29055	425	8	RealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
29055	425	8	RealVector.java	getL1Distance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
29056	450	8	RealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
29056	450	8	RealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
29056	450	8	RealVector.java	getLInfDistance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
29057	466	8	RealVector.java	getMinIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1490	468	12	RealVector.java	getMinIndex	entry	Entry	0	DEF	$.getValue() <= minValue
1490	468	12	RealVector.java	getMinIndex	minValue	double	0	DEF	entry.getValue() <= $
29058	497	8	RealVector.java	getMaxIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1491	499	12	RealVector.java	getMaxIndex	entry	Entry	0	DEF	$.getValue() >= maxValue
1491	499	12	RealVector.java	getMaxIndex	maxValue	double	0	DEF	entry.getValue() >= $
1492	593	8	RealVector.java	outerProduct	v	RealVector	1	DEF	$ instanceof SparseRealVector
29059	602	8	RealVector.java	outerProduct	thisIt	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
29059	602	8	RealVector.java	outerProduct	thisIt	Iterator<Entry>	0	NIL-WHILE	(thisE = $.next()) != null
29059	602	8	RealVector.java	outerProduct	thisE	Entry	0	NIL-WHILE	($ = thisIt.next()) != null
29060	605	12	RealVector.java	outerProduct	otherIt	Iterator<Entry>	0	NIL-WHILE	(otherE = $.next()) != null
29060	605	12	RealVector.java	outerProduct	otherIt	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
29060	605	12	RealVector.java	outerProduct	otherE	Entry	0	NIL-WHILE	($ = otherIt.next()) != null
29061	633	8	RealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
29061	633	8	RealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
29061	633	8	RealVector.java	set	e	Entry	0	NIL-WHILE	($ = it.next()) != null
29062	648	8	RealVector.java	toArray	i	int	0	NIL-FOR	$ < dim
29062	648	8	RealVector.java	toArray	dim	int	0	NIL-FOR	i < $
29063	757	8	RealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
29063	757	8	RealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
29063	757	8	RealVector.java	mapToSelf	e	Entry	0	NIL-WHILE	($ = it.next()) != null
29064	794	8	RealVector.java	combineToSelf	THIS	RealVector	0	NIL-FOR	i < $.getDimension()
29064	794	8	RealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < getDimension()
28805	202	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
28805	202	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
1360	203	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
1361	226	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1362	246	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
1362	246	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1362	246	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
28806	252	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
1363	254	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
1364	256	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
1364	256	16	RealVectorFormat.java	parse	source	String	0	DEF	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
1364	256	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
1365	261	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
1366	264	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
1367	278	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
1367	278	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1367	278	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
28807	284	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
28807	284	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
28807	284	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
28936	71	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
28936	71	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
28937	76	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	loop	boolean	0	NIL-FOR	$
28938	80	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
28938	80	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1395	83	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ii	int	0	DEF	c[$][$] > c[isi][isi]
1395	83	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	isi	int	0	DEF	c[ii][ii] > c[$][$]
1395	83	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
1396	90	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	swap	int[]	0	DEF	$[r] != r
1396	90	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	DEF	swap[$] != $
1397	98	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ir	int	1	NonPositiveDefiniteMatrixException	c[$][$] < small
1397	98	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	1	NonPositiveDefiniteMatrixException	$[ir][ir] < small
1397	98	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	1	NonPositiveDefiniteMatrixException	c[ir][ir] < $
1398	100	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NonPositiveDefiniteMatrixException	$ == 0
28939	105	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
28939	105	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1399	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1399	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	NonPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1399	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	index	int[]	0	NonPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1399	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	0	NonPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
28940	124	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
28940	124	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
28941	129	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < i
28941	129	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	j < $
28942	145	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
28942	145	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
28943	146	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < r
28943	146	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NIL-FOR	j < $
629	44	8	RegionFactory.java	buildConvex	THIS	RegionFactory	0	RET	hyperplanes.$.length == 0
629	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$.length == 0
629	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$ == null
630	55	12	RegionFactory.java	buildConvex	THIS	RegionFactory	0	DEF	node.insertCut($.hyperplane)
630	55	12	RegionFactory.java	buildConvex	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
631	137	8	RegionFactory.java	recurseComplement	node	BSPTree<S>	0	RET	$.getCut() == null
632	143	8	RegionFactory.java	recurseComplement	attribute	BoundaryAttribute<S>	0	DEF	$ != null
2290	100	8	RegressionResults.java	RegressionResults	copyData	boolean	1	DEF	$
29578	103	12	RegressionResults.java	RegressionResults	THIS	RegressionResults	0	NIL-FOR	i < varcov.$.length
29578	103	12	RegressionResults.java	RegressionResults	i	int	0	NIL-FOR	$ < varcov.length
29578	103	12	RegressionResults.java	RegressionResults	varcov	double[][]	0	NIL-FOR	i < $.length
2291	117	8	RegressionResults.java	RegressionResults	rank	int	0	DEF	$ > 0
2292	129	8	RegressionResults.java	RegressionResults	containsConstant	boolean	1	DEF	$
2293	151	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2294	154	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2294	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2294	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ < 0
2295	171	8	RegressionResults.java	getParameterEstimates	THIS	RegressionResults	0	RET	$.parameters == null
2296	188	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2297	191	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2297	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2297	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ < 0
2298	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	$ > Double.MIN_VALUE
2298	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	Double.isNaN($)
2299	213	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	RET	$.parameters == null
29579	217	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	NIL-FOR	i < $.parameters.length
29579	217	8	RegressionResults.java	getStdErrorOfEstimates	i	int	0	NIL-FOR	$ < this.parameters.length
2300	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	Double.isNaN($)
2300	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	$ > Double.MIN_VALUE
2301	241	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2302	244	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	i >= $.parameters.length
2302	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ < 0
2302	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ >= this.parameters.length
2303	247	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	j >= $.parameters.length
2303	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ < 0
2303	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ >= this.parameters.length
2304	262	8	RegressionResults.java	getNumberOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2305	401	8	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.isSymmetricVCD
2306	402	12	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.varCovData.length > 1
2307	404	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ == j
2307	404	16	RegressionResults.java	getVcvElement	j	int	1	RET	i == $
2308	406	23	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	i >= $.varCovData[j].length
2308	406	23	RegressionResults.java	getVcvElement	i	int	1	RET	$ >= varCovData[j].length
2308	406	23	RegressionResults.java	getVcvElement	j	int	1	RET	i >= varCovData[$].length
2309	412	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ > j
2309	412	16	RegressionResults.java	getVcvElement	j	int	1	RET	i > $
166	183	8	ResizableDoubleArray.java	ResizableDoubleArray	initialArray	double[]	1	DEF	$ == null
167	302	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
168	306	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
169	345	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
170	355	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
171	372	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	MathIllegalStateException	$.numElements < 1
172	397	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	MathIllegalArgumentException	$ < expansion
172	397	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	MathIllegalArgumentException	contraction < $
173	403	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	MathIllegalArgumentException	$ <= 1.0
174	409	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	MathIllegalArgumentException	$ <= 1.0
175	496	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	MathIllegalArgumentException	i > $.numElements
175	496	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ > numElements
176	500	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ < 0
177	507	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
178	511	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
179	533	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
180	582	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	ArrayIndexOutOfBoundsException	index >= $.numElements
180	582	8	ResizableDoubleArray.java	getElement	index	int	1	ArrayIndexOutOfBoundsException	$ >= numElements
181	584	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
182	696	8	ResizableDoubleArray.java	setElement	index	int	0	ArrayIndexOutOfBoundsException	$ < 0
183	699	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
183	699	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
184	702	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
184	702	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
185	735	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != ADDITIVE_MODE
185	735	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != MULTIPLICATIVE_MODE
186	755	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
187	777	8	ResizableDoubleArray.java	setNumElements	i	int	0	MathIllegalArgumentException	$ < 0
188	785	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
188	785	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
189	800	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
190	881	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
190	881	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
191	884	7	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
192	897	15	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
3192	78	8	RiddersSolver.java	doSolve	y1	double	0	RET	$ == 0
3193	81	8	RiddersSolver.java	doSolve	y2	double	0	RET	$ == 0
3194	95	12	RiddersSolver.java	doSolve	y3	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3194	95	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y3) <= $
3195	106	12	RiddersSolver.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3195	106	12	RiddersSolver.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3195	106	12	RiddersSolver.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
3196	109	12	RiddersSolver.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3196	109	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3197	115	12	RiddersSolver.java	doSolve	correction	double	1	DEF	$ > 0.0
3198	116	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y1) + FastMath.signum($) == 0.0
3198	116	16	RiddersSolver.java	doSolve	y1	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
3199	126	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y2) + FastMath.signum($) == 0.0
3199	126	16	RiddersSolver.java	doSolve	y2	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
3292	64	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
3293	86	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
30018	124	12	RombergIntegrator.java	doIntegrate	j	int	0	NIL-FOR	$ <= i
30018	124	12	RombergIntegrator.java	doIntegrate	i	int	0	NIL-FOR	j <= $
3294	131	12	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	i >= $.getMinimalIterationCount()
3294	131	12	RombergIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
3295	134	16	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
3295	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
3295	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3295	134	16	RombergIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
772	91	8	RootsOfUnity.java	isCounterClockWise	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
773	119	8	RootsOfUnity.java	computeRoots	n	int	0	ZeroException	$ == 0
774	129	8	RootsOfUnity.java	computeRoots	THIS	RootsOfUnity	0	RET	absN == $.omegaCount
774	129	8	RootsOfUnity.java	computeRoots	absN	int	0	RET	$ == omegaCount
28332	143	8	RootsOfUnity.java	computeRoots	i	int	0	NIL-FOR	$ < absN
28332	143	8	RootsOfUnity.java	computeRoots	absN	int	0	NIL-FOR	i < $
775	165	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
776	169	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
776	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ >= omegaCount
776	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ < 0
777	192	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
778	196	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
778	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ >= omegaCount
778	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ < 0
652	136	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
653	176	4	Rotation.java	Rotation	norm	double	0	MathIllegalArgumentException	$ == 0
654	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
654	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
654	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
654	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
654	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
654	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
654	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
654	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
655	238	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
656	256	4	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
657	265	6	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
658	274	8	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
659	320	2	Rotation.java	Rotation	u1u1	double	0	MathIllegalArgumentException	$ == 0
659	320	2	Rotation.java	Rotation	u2u2	double	0	MathIllegalArgumentException	$ == 0
659	320	2	Rotation.java	Rotation	v1v1	double	0	MathIllegalArgumentException	$ == 0
659	320	2	Rotation.java	Rotation	v2v2	double	0	MathIllegalArgumentException	$ == 0
660	345	2	Rotation.java	Rotation	k	Vector3D	0	RET	c <= inPlaneThreshold * $.getNorm() * u3.getNorm()
660	345	2	Rotation.java	Rotation	u3	Vector3D	0	RET	c <= inPlaneThreshold * k.getNorm() * $.getNorm()
660	345	2	Rotation.java	Rotation	c	double	0	RET	$ <= inPlaneThreshold * k.getNorm() * u3.getNorm()
660	345	2	Rotation.java	Rotation	inPlaneThreshold	double	0	RET	c <= $ * k.getNorm() * u3.getNorm()
661	354	4	Rotation.java	Rotation	u2Prime	Vector3D	0	RET	c <= inPlaneThreshold * k.getNorm() * $.getNorm()
661	354	4	Rotation.java	Rotation	k	Vector3D	0	RET	c <= inPlaneThreshold * $.getNorm() * u2Prime.getNorm()
661	354	4	Rotation.java	Rotation	c	double	0	RET	$ <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()
661	354	4	Rotation.java	Rotation	inPlaneThreshold	double	0	RET	c <= $ * k.getNorm() * u2Prime.getNorm()
662	360	6	Rotation.java	Rotation	c	double	0	RET	$ <= 0
663	409	4	Rotation.java	Rotation	normProduct	double	0	MathIllegalArgumentException	$ == 0
664	415	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
664	415	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
665	512	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
666	514	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
667	527	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
667	527	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
668	529	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
669	573	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
670	582	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
670	582	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
671	591	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
672	600	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
672	600	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
673	609	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
674	618	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
674	618	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
675	627	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
676	636	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
676	636	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
677	645	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
678	654	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
678	654	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
679	663	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
680	672	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
680	672	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
681	681	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
682	690	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
682	690	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
683	699	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
684	708	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
684	708	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
685	717	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
686	726	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
686	726	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
687	735	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
688	744	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
688	744	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
689	753	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
690	762	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
690	762	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
691	780	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
691	780	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
28320	978	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
692	1019	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
692	1019	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
692	1019	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
29793	105	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
29793	105	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
29794	124	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
29795	132	6	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
29795	132	6	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
29796	134	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
29796	134	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
29796	134	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
29797	136	14	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
29797	136	14	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
29798	147	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
29798	147	6	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
29798	147	6	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
29799	149	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
29799	149	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2658	161	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	$.isLastStep
2659	169	10	RungeKuttaIntegrator.java	integrate	nextIsLast	boolean	0	DEF	$
2548	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
2548	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
29693	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
29693	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
29693	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
29694	157	4	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
29694	157	4	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
29695	163	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
29695	163	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
29696	164	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
29696	164	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
2549	183	4	RungeKuttaStepInterpolator.java	readExternal	n	int	1	DEF	$ < 0
29697	187	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
29697	187	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
29698	194	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
29698	194	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
29699	196	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
29699	196	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
2550	203	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
1054	109	8	SaddlePointExpansion.java	getStirlingError	z	double	1	DEF	$ < 15.0
1055	111	12	SaddlePointExpansion.java	getStirlingError	z2	double	1	DEF	FastMath.floor($) == $
1056	147	8	SaddlePointExpansion.java	getDeviancePart	x	double	1	DEF	FastMath.abs($ - mu) < 0.1 * ($ + mu)
1056	147	8	SaddlePointExpansion.java	getDeviancePart	mu	double	1	DEF	FastMath.abs(x - $) < 0.1 * (x + $)
28342	155	12	SaddlePointExpansion.java	getDeviancePart	s1	double	0	NIL-WHILE	$ != s
28342	155	12	SaddlePointExpansion.java	getDeviancePart	s	double	0	NIL-WHILE	s1 != $
1057	180	8	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == 0
1058	181	12	SaddlePointExpansion.java	logBinomialProbability	p	double	1	DEF	$ < 0.1
1059	186	15	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == n
1059	186	15	SaddlePointExpansion.java	logBinomialProbability	n	int	1	DEF	x == $
1060	187	12	SaddlePointExpansion.java	logBinomialProbability	q	double	1	DEF	$ < 0.1
3213	83	8	SecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
3214	86	8	SecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
3215	107	12	SecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
3216	120	12	SecantSolver.java	doSolve	f1	double	0	RET	FastMath.abs($) <= ftol
3216	120	12	SecantSolver.java	doSolve	ftol	double	0	RET	FastMath.abs(f1) <= $
3217	126	12	SecantSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
3217	126	12	SecantSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
3217	126	12	SecantSolver.java	doSolve	atol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
3217	126	12	SecantSolver.java	doSolve	rtol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
1990	80	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
2000	183	8	SemiVariance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2001	281	8	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 0
2001	281	8	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 0
2002	284	12	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 1
2002	284	12	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 1
29435	291	16	SemiVariance.java	evaluate	i	int	0	NIL-FOR	$ < length
29435	291	16	SemiVariance.java	evaluate	length	int	0	NIL-FOR	i < $
2003	292	20	SemiVariance.java	evaluate	i	int	0	DEF	(values[$] > cutoff) == booleanDirection
2003	292	20	SemiVariance.java	evaluate	booleanDirection	boolean	0	DEF	(values[i] > cutoff) == $
2003	292	20	SemiVariance.java	evaluate	values	double[]	0	DEF	($[i] > cutoff) == booleanDirection
2003	292	20	SemiVariance.java	evaluate	cutoff	double	0	DEF	(values[i] > $) == booleanDirection
2004	298	16	SemiVariance.java	evaluate	corrected	boolean	1	RET	$
29122	81	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	NIL-FOR	i < p.$.length
29122	81	8	SimplePointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
29122	81	8	SimplePointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1608	86	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > $.getAbsoluteThreshold()
1608	86	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > size * $.getRelativeThreshold()
1608	86	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1608	86	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1608	86	12	SimplePointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
2310	133	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
2311	137	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2312	149	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2313	175	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
2314	176	12	SimpleRegression.java	removeData	THIS	SimpleRegression	1	DEF	$.hasIntercept
29580	220	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
29580	220	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
29580	220	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
2315	221	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	ModelSpecificationException	data[i].length < 2
2315	221	12	SimpleRegression.java	addData	i	int	0	ModelSpecificationException	data[$].length < 2
2315	221	12	SimpleRegression.java	addData	data	double[][]	0	ModelSpecificationException	$[i].length < 2
2316	239	8	SimpleRegression.java	addObservation	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length == 0
2316	239	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length == 0
2316	239	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$ == null
2317	257	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length != y.$.length
2317	257	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2317	257	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2317	257	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2317	257	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
29581	264	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
29581	264	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
29581	264	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
2318	265	12	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	DEF	x[i].length == 0
2318	265	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$] == null
2318	265	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$].length == 0
2318	265	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i] == null
2318	265	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i].length == 0
2319	269	8	SimpleRegression.java	addObservations	obsOk	boolean	0	ModelSpecificationException	$
29582	274	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
29582	274	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
29582	274	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
29583	294	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
29583	294	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
29583	294	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
29583	294	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
2320	339	8	SimpleRegression.java	predict	THIS	SimpleRegression	0	RET	$.hasIntercept
2321	395	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
2322	398	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	FastMath.abs($.sumXX) < 10 * Double.MIN_VALUE
2323	448	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2324	462	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2325	508	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
2326	531	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
2327	569	8	SimpleRegression.java	getInterceptStdErr	THIS	SimpleRegression	0	RET	$.hasIntercept
2328	649	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ >= 1
2328	649	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ <= 0
2329	697	6	SimpleRegression.java	getIntercept	THIS	SimpleRegression	0	RET	$.hasIntercept
2330	719	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	NoDataException:RET	$.hasIntercept
2331	720	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 3
2332	723	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	FastMath.abs( $.sumXX ) > Precision.SAFE_MIN
2333	746	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 2
2334	749	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	Double.isNaN($.sumXX)
2335	775	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	MathIllegalArgumentException	variablesToInclude.$.length == 0
2335	775	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$.length == 0
2335	775	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$ == null
2336	778	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	$.hasIntercept
2336	778	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 1
2336	778	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 2
2336	778	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 1
2336	778	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 2
2337	784	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	$.hasIntercept
2338	785	12	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	variablesToInclude.$.length == 2
2338	785	12	SimpleRegression.java	regress	variablesToInclude	int[]	1	OutOfRangeException:RET	$.length == 2
2339	786	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	ModelSpecificationException	$[0] == 1
2340	788	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2341	791	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[1] != 1
2342	796	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 1
2342	796	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2343	801	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	RET	$[0] == 0
2344	809	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	RET	$[0] == 1
2345	815	20	SimpleRegression.java	regress	_sxx	double	1	RET	Double.isNaN($)
2346	831	12	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
29123	78	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	NIL-FOR	i < p.$.length
29123	78	8	SimpleVectorValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
29123	78	8	SimpleVectorValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1609	83	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > size * $.getRelativeThreshold()
1609	83	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > $.getAbsoluteThreshold()
1609	83	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1609	83	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1609	83	12	SimpleVectorValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
1919	127	8	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
1920	159	12	SimplexOptimizer.java	doOptimize	iteration	int	0	RET	$ > 0
29402	161	16	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
29402	161	16	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
1921	165	16	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
29103	72	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
29103	72	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
1572	74	12	SimplexSolver.java	getPivotColumn	THIS	SimplexSolver	0	DEF	Precision.compareTo(entry, minValue, $.maxUlps) < 0
1572	74	12	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	Precision.compareTo($, minValue, maxUlps) < 0
1572	74	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	Precision.compareTo(entry, $, maxUlps) < 0
29104	92	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
29104	92	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1573	96	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	Precision.compareTo(entry, 0d, $.maxUlps) > 0
1573	96	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	Precision.compareTo($, 0d, maxUlps) > 0
1574	99	16	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
1575	101	23	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
1576	109	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
1577	111	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
29105	115	12	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
29105	115	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
1578	118	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	Precision.equals(entry, 1d, $.maxUlps)
1578	118	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
1578	118	14	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
1578	118	14	SimplexSolver.java	getPivotRow	entry	double	0	RET	Precision.equals($, 1d, maxUlps)
1578	118	14	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
1579	141	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
29106	150	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
29106	150	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1580	151	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
1580	151	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
1581	169	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
29107	173	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1582	178	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, $.epsilon)
1582	178	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	Precision.equals($.getEntry(0, $.getRhsOffset()), 0d, epsilon)
29108	198	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1586	154	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
29109	158	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
29109	158	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
1587	161	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
29110	164	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
29110	164	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
29111	167	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
29111	167	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1588	187	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
1589	198	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
29112	206	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
29112	206	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
1590	214	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
1591	223	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
1591	223	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
1592	225	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1592	225	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1593	230	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1593	230	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
1593	230	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1593	230	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
1594	260	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
1595	285	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
1595	285	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
29113	312	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
29113	312	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
1596	314	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	Precision.equals(entry, 1d, $.maxUlps)
1596	314	12	SimplexTableau.java	getBasicRow	entry	double	1	DEF	Precision.equals($, 1d, maxUlps)
1596	314	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
1597	316	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	Precision.equals(entry, 0d, $.maxUlps)
1597	316	19	SimplexTableau.java	getBasicRow	entry	double	0	RET	Precision.equals($, 0d, maxUlps)
1598	328	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
29114	336	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
29114	336	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
1599	338	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	Precision.compareTo(entry, 0d, $.maxUlps) > 0
1599	338	12	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	Precision.compareTo($, 0d, maxUlps) > 0
29115	344	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
29115	344	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1600	346	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
1600	346	10	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
29116	352	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
29116	352	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
29117	354	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
29117	354	10	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
1601	355	12	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
1601	355	12	SimplexTableau.java	dropPhase1Objective	columnsToDrop	List<Integer>	0	DEF	$.contains(j)
29118	361	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
29119	382	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
29119	382	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
1602	384	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	Precision.compareTo(entry, 0d, $.epsilon) < 0
1602	384	12	SimplexTableau.java	isOptimal	entry	double	0	RET	Precision.compareTo($, 0d, epsilon) < 0
29120	403	6	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
29120	403	6	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
29120	403	6	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
1603	405	10	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
1604	410	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ == 0
1604	410	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ != null
1605	415	17	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
1605	415	17	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
29121	439	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
29121	439	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
1606	570	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
1606	570	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
1607	574	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
3279	63	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
3280	85	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
3281	105	8	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.getMinimalIterationCount() == 1
3282	116	12	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.iterations.getCount() >= $.getMinimalIterationCount()
3283	120	16	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
3283	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
3283	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3283	120	16	SimpsonIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
3136	64	8	Sinc.java	value	THIS	Sinc	1	RET	$.normalized
3137	74	8	Sinc.java	derivative	THIS	Sinc	1	RET	$.normalized
1413	92	8	SingularValueDecomposition.java	SingularValueDecomposition	matrix	RealMatrix	1	DEF	$.getRowDimension() < $.getColumnDimension()
28976	113	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ < FastMath.max(nct, nrt)
28976	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	NIL-FOR	k < FastMath.max($, nrt)
28976	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	NIL-FOR	k < FastMath.max(nct, $)
1414	114	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1414	114	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
28977	119	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
28977	119	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1415	122	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1415	122	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1416	123	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	A[$][$] < 0
28978	126	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
28978	126	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
28979	133	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
28979	133	12	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
1417	134	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1417	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1417	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1417	134	16	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
28980	138	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
28980	138	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
28981	142	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
28981	142	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1418	150	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1418	150	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
28982	153	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
28982	153	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1419	157	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1419	157	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
28983	162	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
28983	162	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1420	165	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1420	165	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1421	166	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$ + 1] < 0
1421	166	20	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k + 1] < 0
28984	169	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
28984	169	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1422	175	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k + 1 < $.m
1422	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ + 1 < m
1422	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1422	175	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
28985	178	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
28985	178	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
28986	181	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
28986	181	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
28987	182	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
28987	182	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
28988	186	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
28988	186	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
28989	188	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
28989	188	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
28990	196	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
28990	196	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1423	203	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	nct < $.n
1423	203	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	$ < n
1424	206	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.m < p
1424	206	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	m < $
1425	209	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	$ + 1 < p
1425	209	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	nrt + 1 < $
28991	215	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
28991	215	8	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
28992	216	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
28992	216	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
28993	221	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1426	222	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.singularValues[k] != 0
1426	222	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	singularValues[$] != 0
28994	223	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
28994	223	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
28995	225	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
28995	225	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
28996	229	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
28996	229	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
28997	233	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
28997	233	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
28998	237	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < k - 1
28998	237	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	i < $ - 1
28999	241	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
28999	241	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
29000	249	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1427	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1427	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1427	250	12	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1427	250	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
29001	252	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
29001	252	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
29002	254	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
29002	254	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
29003	258	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
29003	258	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
29004	263	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
29004	263	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
29005	272	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-WHILE	$ > 0
29006	284	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1428	288	16	SingularValueDecomposition.java	SingularValueDecomposition	threshold	double	0	DEF	FastMath.abs(e[k]) <= $
1428	288	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	FastMath.abs(e[$]) <= threshold
1428	288	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	FastMath.abs($[k]) <= threshold
1429	294	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	$ == p - 2
1429	294	12	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	k == $ - 2
29007	298	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	NIL-FOR	$ >= k
29007	298	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	ks >= $
1430	299	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	$ == k
1430	299	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	ks == $
1431	304	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	FastMath.abs($.singularValues[ks]) <= TINY + EPS * t
1431	304	20	SingularValueDecomposition.java	SingularValueDecomposition	t	double	0	DEF	FastMath.abs(singularValues[ks]) <= TINY + EPS * $
1431	304	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	FastMath.abs(singularValues[$]) <= TINY + EPS * t
1432	309	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == k
1432	309	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	ks == $
1433	311	23	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == p - 1
1433	311	23	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	ks == $ - 1
29008	325	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ >= k
29008	325	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	j >= $
1434	330	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1434	330	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
29009	335	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
29009	335	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
29010	347	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p
29010	347	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $
29011	355	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
29011	355	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1435	380	20	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ != 0
1435	380	20	SingularValueDecomposition.java	SingularValueDecomposition	c	double	0	DEF	$ != 0
1436	383	24	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ < 0
29012	391	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p - 1
29012	391	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $ - 1
1437	395	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1437	395	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
29013	403	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
29013	403	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1438	416	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	j < $.m - 1
1438	416	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ < m - 1
29014	417	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
29014	417	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1439	431	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] <= 0
1439	431	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] <= 0
29015	434	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ <= pp
29015	434	24	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-FOR	i <= $
29016	439	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-WHILE	$ < pp
29016	439	20	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-WHILE	k < $
1440	440	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] >= $.singularValues[k + 1]
1440	440	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] >= singularValues[$ + 1]
1441	446	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.n - 1
1441	446	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < n - 1
29017	447	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
29017	447	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1442	453	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.m - 1
1442	453	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < m - 1
29018	454	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
29018	454	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1443	473	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.transposed
1444	501	8	SingularValueDecomposition.java	getUT	THIS	SingularValueDecomposition	0	DEF	$.cachedUt == null
1445	515	8	SingularValueDecomposition.java	getS	THIS	SingularValueDecomposition	0	DEF	$.cachedS == null
1446	550	8	SingularValueDecomposition.java	getVT	THIS	SingularValueDecomposition	0	DEF	$.cachedVt == null
29019	572	8	SingularValueDecomposition.java	getCovariance	THIS	SingularValueDecomposition	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
29019	572	8	SingularValueDecomposition.java	getCovariance	p	int	0	NIL-WHILE	dimension < $
29019	572	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	$ < p
29019	572	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
29019	572	8	SingularValueDecomposition.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
1447	577	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NumberIsTooLargeException	$ == 0
29020	636	8	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.singularValues.$.length
29020	636	8	SingularValueDecomposition.java	getRank	i	int	0	NIL-FOR	$ < singularValues.length
1448	637	12	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	DEF	$.singularValues[i] > $.tol
1448	637	12	SingularValueDecomposition.java	getRank	i	int	0	DEF	singularValues[$] > tol
1977	91	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
1978	106	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
1979	110	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
1980	131	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
1981	159	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
1981	159	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1981	159	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
1981	159	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
1981	159	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
29428	169	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29428	169	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29428	169	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
29429	177	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29429	177	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29429	177	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
3131	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3131	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3131	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3131	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3131	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3131	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3132	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3132	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3132	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
29964	84	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29964	84	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3133	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3133	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3133	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3133	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
29965	96	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
29965	96	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
29966	98	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29966	98	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
29967	108	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
29967	108	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
29968	110	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29968	110	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
29969	118	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29969	118	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
29970	120	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
29970	120	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
29971	130	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29971	130	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
29972	132	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
29972	132	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
28533	91	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rows
28533	91	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rows
28534	92	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columns
28534	92	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columns
1171	105	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1171	105	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
1172	151	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1172	151	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
1173	164	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1173	164	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
28618	108	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
28618	108	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
28618	108	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
28619	146	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1230	150	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1230	150	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
28620	169	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1231	178	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
28621	183	12	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < n
28621	183	12	SparseFieldVector.java	append	n	int	0	NIL-FOR	i < $
28622	207	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
28623	219	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
28624	231	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
28625	242	8	SparseFieldVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
28626	272	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1232	275	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
1232	275	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
1232	275	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
1232	275	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
28627	289	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
28627	289	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
28628	303	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
28629	317	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
28629	317	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
28630	331	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
28631	359	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
28632	362	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
1233	372	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
28633	378	12	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
28634	382	16	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < n
28634	382	16	SparseFieldVector.java	outerProduct	n	int	0	NIL-FOR	col < $
28635	398	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
28635	398	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
28636	414	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < n
28636	414	8	SparseFieldVector.java	setSubVector	n	int	0	NIL-FOR	i < $
28637	431	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1234	434	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1234	434	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1235	445	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
28638	451	12	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < n
28638	451	12	SparseFieldVector.java	subtract	n	int	0	NIL-FOR	i < $
1236	452	16	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
1236	452	16	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
1237	474	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	OutOfRangeException	index >= $.getDimension()
1237	474	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1237	474	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1238	486	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DimensionMismatchException	$.getDimension() != n
1238	486	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	getDimension() != $
1239	493	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
28639	500	12	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < n
28639	500	12	SparseFieldVector.java	add	n	int	0	NIL-FOR	i < $
28640	527	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1240	540	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
1240	540	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
1241	544	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector<?>
1242	551	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
1243	552	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
1243	552	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
1244	555	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
1244	555	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
1245	558	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
1245	558	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
28641	563	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1246	566	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
1246	566	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
28642	571	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1247	574	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
1247	574	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
1247	574	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
2164	146	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2164	146	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2164	146	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2165	148	15	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2165	148	15	SpearmansCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
29500	164	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
29500	164	8	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
3037	68	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3037	68	8	SplineInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3037	68	8	SplineInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3038	72	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	NumberIsTooSmallException	x.$.length < 3
3038	72	8	SplineInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 3
29893	84	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
29893	84	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
29894	93	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
29894	93	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
29895	108	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
29896	116	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
29896	116	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
2364	57	8	StableRandomGenerator.java	StableRandomGenerator	generator	RandomGenerator	0	NullArgumentException	$ == null
2365	61	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ <= 2d
2365	61	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ > 0d
2366	66	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ <= 1d
2366	66	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ >= -1d
2367	74	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	1	DEF	$ < 2d
2367	74	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	1	DEF	$ != 0d
2368	92	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	RET	$.alpha == 2d
2369	99	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.beta == 0d
2370	101	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.alpha == 1d
2371	113	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	FastMath.abs($.alpha - 1d) > 1e-8
2372	124	16	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	DEF	$.alpha != 1d
2194	692	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2194	692	8	StatUtils.java	sumDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2194	692	8	StatUtils.java	sumDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2195	695	8	StatUtils.java	sumDifference	n	int	0	NoDataException	$ <= 0
29515	699	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
29515	699	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
2196	740	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2196	740	8	StatUtils.java	varianceDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2196	740	8	StatUtils.java	varianceDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2197	743	8	StatUtils.java	varianceDifference	n	int	0	NumberIsTooSmallException	$ < 2
29516	746	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
29516	746	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
29517	765	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
29517	765	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
29517	765	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
29518	776	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
29518	776	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
29518	776	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
2077	134	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
2077	134	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
2078	137	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
3139	62	8	StepFunction.java	StepFunction	x	double[]	0	NullArgumentException	$ == null
3139	62	8	StepFunction.java	StepFunction	y	double[]	0	NullArgumentException	$ == null
3140	66	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	x.$.length == 0
3140	66	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	y.$.length == 0
3140	66	8	StepFunction.java	StepFunction	x	double[]	0	NoDataException	$.length == 0
3140	66	8	StepFunction.java	StepFunction	y	double[]	0	NoDataException	$.length == 0
3141	70	8	StepFunction.java	StepFunction	THIS	StepFunction	0	DimensionMismatchException	y.$.length != x.$.length
3141	70	8	StepFunction.java	StepFunction	x	double[]	0	DimensionMismatchException	y.length != $.length
3141	70	8	StepFunction.java	StepFunction	y	double[]	0	DimensionMismatchException	$.length != x.length
3142	84	8	StepFunction.java	value	index	int	1	DEF	$ < -1
3143	87	15	StepFunction.java	value	index	int	1	DEF	$ >= 0
2534	202	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
2535	211	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
2536	220	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.mode == $.StepNormalizerMode.MULTIPLES
2536	220	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	Precision.equals(nextTime, $.lastTime, 1)
2536	220	8	StepNormalizer.java	handleStep	nextTime	double	0	DEF	Precision.equals($, lastTime, 1)
29684	227	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
2537	239	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
2538	246	12	StepNormalizer.java	handleStep	addLast	boolean	0	DEF	$
2539	274	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.bounds.firstIncluded()
2539	274	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.firstTime == $.lastTime
2154	110	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	0	NumberIsTooSmallException	$.n < 2
2155	114	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	1	RET	$.biasCorrected
29482	82	8	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
29482	82	8	StorelessCovariance.java	initializeMatrix	i	int	0	NIL-FOR	$ < dimension
29483	83	12	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
29483	83	12	StorelessCovariance.java	initializeMatrix	j	int	0	NIL-FOR	$ < dimension
2153	151	8	StorelessCovariance.java	increment	THIS	StorelessCovariance	0	DimensionMismatchException	length != $.dimension
2153	151	8	StorelessCovariance.java	increment	length	int	0	DimensionMismatchException	$ != dimension
29484	157	8	StorelessCovariance.java	increment	i	int	0	NIL-FOR	$ < length
29484	157	8	StorelessCovariance.java	increment	length	int	0	NIL-FOR	i < $
29485	158	12	StorelessCovariance.java	increment	j	int	0	NIL-FOR	$ < length
29485	158	12	StorelessCovariance.java	increment	length	int	0	NIL-FOR	j < $
29486	184	8	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
29486	184	8	StorelessCovariance.java	getData	i	int	0	NIL-FOR	$ < dimension
29487	185	12	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
29487	185	12	StorelessCovariance.java	getData	j	int	0	NIL-FOR	$ < dimension
693	117	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
740	125	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
741	159	8	SubLine.java	side	crossing	Vector2D	0	RET	$ == null
742	180	8	SubLine.java	split	crossing	Vector2D	0	RET	$ == null
639	60	8	SubPlane.java	side	inter	Line	0	RET	$ == null
640	77	8	SubPlane.java	side	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
640	77	8	SubPlane.java	side	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
641	103	8	SubPlane.java	split	inter	Line	0	RET	$ == null
642	115	8	SubPlane.java	split	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
642	115	8	SubPlane.java	split	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
1947	121	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length, true)
1947	121	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1947	121	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1947	121	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
29418	123	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29418	123	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29418	123	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1948	160	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, weights, begin, length, true)
1948	160	8	Sum.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
1948	160	8	Sum.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
1948	160	8	Sum.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
1948	160	8	Sum.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
29419	162	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29419	162	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29419	162	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1949	132	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length, true)
1949	132	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1949	132	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1949	132	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
29420	134	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29420	134	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29420	134	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1946	120	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length, true)
1946	120	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1946	120	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1946	120	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
29417	122	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29417	122	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29417	122	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2019	158	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2020	161	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2021	164	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl != $.geoMean
2022	217	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
2023	218	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
2024	353	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2025	356	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2026	370	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
2026	370	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
2027	373	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
2028	643	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	MathIllegalStateException	$.n > 0
2029	681	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getVarianceImpl() instanceof Variance
2030	686	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.meanImpl instanceof Mean
2030	686	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.meanImpl instanceof Mean
2031	691	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
2032	699	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
2032	699	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
2033	704	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
2033	704	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
2034	709	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
2034	709	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
2035	714	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
2035	714	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
2036	719	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
2036	719	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
2037	724	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
2037	724	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
2038	729	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
2038	729	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
2039	734	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
2039	734	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
1137	1168	8	SymmLQ.java	solveInPlace	state	State	0	RET	$.bEqualsNullVector()
1138	1177	8	SymmLQ.java	solveInPlace	earlyStop	boolean	0	DEF	$
28498	1178	12	SymmLQ.java	solveInPlace	state	State	0	NIL-DOWHILE	$.hasConverged()
1001	58	8	TDistribution.java	TDistribution	degreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1002	111	8	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ == 0
1003	119	12	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
1004	147	8	TDistribution.java	getNumericalMean	df	double	0	RET	$ > 1
1005	168	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 2
1006	172	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ <= 2
1006	172	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 1
2101	1120	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ > 0.5
2101	1120	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ <= 0
2102	1137	8	TTest.java	checkSampleData	data	double[]	0	NullArgumentException	$ == null
2103	1140	8	TTest.java	checkSampleData	THIS	TTest	0	NumberIsTooSmallException	data.$.length < 2
2103	1140	8	TTest.java	checkSampleData	data	double[]	0	NumberIsTooSmallException	$.length < 2
2104	1158	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NullArgumentException	$ == null
2105	1161	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NumberIsTooSmallException	$.getN() < 2
1999	89	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
2643	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	1	DEF	$.previousState != null
2643	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
29784	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29784	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
29785	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
29785	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2435	73	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	MathIllegalArgumentException	population.getPopulationSize() < $.arity
2435	73	8	TournamentSelection.java	tournament	population	ListPopulation	0	MathIllegalArgumentException	$.getPopulationSize() < this.arity
29630	87	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
29630	87	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
29653	62	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
29653	62	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
29653	62	8	TransformUtils.java	scaleArray	f	double[]	0	NIL-FOR	i < $.length
29654	78	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
29654	78	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
29654	78	8	TransformUtils.java	scaleArray	f	Complex[]	0	NIL-FOR	i < $.length
29655	102	8	TransformUtils.java	createRealImaginaryArray	THIS	TransformUtils	0	NIL-FOR	i < dataC.$.length
29655	102	8	TransformUtils.java	createRealImaginaryArray	i	int	0	NIL-FOR	$ < dataC.length
29655	102	8	TransformUtils.java	createRealImaginaryArray	dataC	Complex[]	0	NIL-FOR	i < $.length
2503	128	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataRI.$.length != 2
2503	128	8	TransformUtils.java	createComplexArray	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
2504	133	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataR.$.length != dataI.$.length
2504	133	8	TransformUtils.java	createComplexArray	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
2504	133	8	TransformUtils.java	createComplexArray	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
29656	139	8	TransformUtils.java	createComplexArray	i	int	0	NIL-FOR	$ < n
29656	139	8	TransformUtils.java	createComplexArray	n	int	0	NIL-FOR	i < $
2505	158	8	TransformUtils.java	exactLog2	index	int	0	MathIllegalArgumentException	$ < 0
88	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
88	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
89	148	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
90	159	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
90	159	8	TransformerMap.java	equals	other	Object	0	RET	this == $
91	162	8	TransformerMap.java	equals	other	Object	0	RET	$ instanceof TransformerMap
92	164	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
92	164	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
93	167	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
93	167	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
94	171	16	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
94	171	16	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
3284	65	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
3285	87	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
3286	119	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
30015	134	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
30015	134	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
3287	154	12	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	i >= $.getMinimalIterationCount()
3287	154	12	TrapezoidIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
3288	158	16	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
3288	158	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
3288	158	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3288	158	16	TrapezoidIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
1129	63	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1130	86	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
1131	98	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
28484	103	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
1132	106	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
1132	106	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
28485	110	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
28485	110	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
28486	113	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
28486	113	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
28487	115	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
28487	115	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
28488	120	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
28488	120	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
1133	139	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
28489	142	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
28489	142	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
1134	144	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
1135	147	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1135	147	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
28490	195	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
28490	195	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
28491	201	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
28491	201	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1136	207	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
28492	218	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
28492	218	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
28493	222	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
28493	222	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
28494	232	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
28494	232	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
28495	238	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
28495	238	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
28496	244	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
28496	244	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
28497	246	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
28497	246	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1011	63	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooLargeException	$ >= b
1011	63	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	a >= $
1012	68	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooSmallException	c < $
1012	68	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooSmallException	$ < a
1013	72	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooLargeException	$ > b
1013	72	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	c > $
1014	134	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.a
1014	134	8	TriangularDistribution.java	density	x	double	0	RET	$ < a
1015	137	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.a <= x
1015	137	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.c
1015	137	8	TriangularDistribution.java	density	x	double	0	RET	a <= $
1015	137	8	TriangularDistribution.java	density	x	double	0	RET	$ < c
1016	142	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x == $.c
1016	142	8	TriangularDistribution.java	density	x	double	0	RET	$ == c
1017	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x <= $.b
1017	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.c < x
1017	145	8	TriangularDistribution.java	density	x	double	0	RET	$ <= b
1017	145	8	TriangularDistribution.java	density	x	double	0	RET	c < $
1018	167	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.a
1018	167	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < a
1019	170	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.c
1019	170	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.a <= x
1019	170	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < c
1019	170	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	a <= $
1020	175	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x == $.c
1020	175	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ == c
1021	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x <= $.b
1021	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.c < x
1021	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ <= b
1021	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	c < $
1022	254	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0
1022	254	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1
1023	257	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
1024	260	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1025	263	8	TriangularDistribution.java	inverseCumulativeProbability	THIS	TriangularDistribution	0	RET	p < ($.c - $.a) / ($.b - $.a)
1025	263	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ < (c - a) / (b - a)
3041	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3041	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	z.$.length == 0
3041	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3041	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3041	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3041	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	z	double[]	0	NoDataException	$.length == 0
3041	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$.length == 0
3041	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$[0].length == 0
3042	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3042	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3042	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	xLen != $.length
3043	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3043	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3043	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	xLen != $.length
3044	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3044	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3044	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3045	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdZ.$.length
3045	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdZ.length
3045	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3046	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3046	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3046	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3047	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdZ.$.length
3047	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdZ.length
3047	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3048	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdYdZ.$.length
3048	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdYdZ.length
3048	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3049	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d3FdXdYdZ.$.length
3049	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d3FdXdYdZ.length
3049	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
29899	201	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
29899	201	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3050	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3050	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3050	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3050	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3051	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3051	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3051	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3051	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3052	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3052	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3052	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3052	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3053	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i].length != yLen
3053	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$].length != yLen
3053	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdZ[i].length != $
3053	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3054	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3054	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3054	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3054	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3055	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i].length != yLen
3055	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$].length != yLen
3055	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdZ[i].length != $
3055	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3056	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i].length != yLen
3056	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$].length != yLen
3056	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdYdZ[i].length != $
3056	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3057	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i].length != yLen
3057	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$].length != yLen
3057	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d3FdXdYdZ[i].length != $
3057	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
29900	228	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
29900	228	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3058	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i][j].length != zLen
3058	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	f[i][$].length != zLen
3058	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$][j].length != zLen
3058	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	f[i][j].length != $
3058	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3059	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i][j].length != zLen
3059	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdX[i][$].length != zLen
3059	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$][j].length != zLen
3059	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdX[i][j].length != $
3059	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3060	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i][j].length != zLen
3060	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdY[i][$].length != zLen
3060	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$][j].length != zLen
3060	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdY[i][j].length != $
3060	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3061	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i][j].length != zLen
3061	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdZ[i][$].length != zLen
3061	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$][j].length != zLen
3061	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdZ[i][j].length != $
3061	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3062	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i][j].length != zLen
3062	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdY[i][$].length != zLen
3062	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$][j].length != zLen
3062	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdY[i][j].length != $
3062	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3063	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i][j].length != zLen
3063	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdZ[i][$].length != zLen
3063	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$][j].length != zLen
3063	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdZ[i][j].length != $
3063	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3064	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i][j].length != zLen
3064	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdYdZ[i][$].length != zLen
3064	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$][j].length != zLen
3064	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdYdZ[i][j].length != $
3064	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3065	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != zLen
3065	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d3FdXdYdZ[i][$].length != zLen
3065	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$][j].length != zLen
3065	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != $
3065	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
29901	255	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	k	int	0	NIL-FOR	$ < lastK
29901	255	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastK	int	0	NIL-FOR	k < $
3066	311	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
3067	315	8	TricubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
3068	319	8	TricubicSplineInterpolatingFunction.java	value	k	int	0	OutOfRangeException	$ == -1
3069	338	8	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
3069	338	8	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
29902	343	8	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
29902	343	8	TricubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
3070	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
3070	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
3070	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
29903	405	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < sz
29903	405	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	i < $
29904	408	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < sz
29904	408	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	j < $
29905	434	8	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	i	int	0	NIL-FOR	$ < N
29906	435	12	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	j	int	0	NIL-FOR	$ < N
29907	436	16	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	k	int	0	NIL-FOR	$ < N
3071	450	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3071	450	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3072	453	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
3072	453	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
3073	456	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ < 0
3073	456	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ > 1
29908	473	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	NIL-FOR	$ < N
29909	474	12	TricubicSplineInterpolatingFunction.java	value	j	int	0	NIL-FOR	$ < N
29910	475	16	TricubicSplineInterpolatingFunction.java	value	k	int	0	NIL-FOR	$ < N
3111	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3111	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	zval.$.length == 0
3111	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3111	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3111	38	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3111	38	8	TricubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3111	38	8	TricubicSplineInterpolator.java	interpolate	zval	double[]	0	NoDataException	$.length == 0
3111	38	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	NoDataException	$.length == 0
3112	41	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3112	41	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3112	41	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	xval.length != $.length
29940	58	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29940	58	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3113	59	12	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3113	59	12	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3113	59	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3113	59	12	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i].length != yLen
29941	63	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
29941	63	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
3114	64	16	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i][j].length != zLen
3114	64	16	TricubicSplineInterpolator.java	interpolate	j	int	0	DimensionMismatchException	fval[i][$].length != zLen
3114	64	16	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$][j].length != zLen
3114	64	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	DimensionMismatchException	fval[i][j].length != $
3114	64	16	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
29942	68	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
29942	68	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
29943	81	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29943	81	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
29944	88	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
29944	88	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
29945	95	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
29945	95	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
29946	103	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
29946	103	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
29947	105	12	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29947	105	12	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
29948	107	16	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
29948	107	16	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
29949	119	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29949	119	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
29950	121	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
29950	121	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
29951	123	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
29951	123	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
29952	133	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
29952	133	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
29953	135	12	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
29953	135	12	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
29954	137	16	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29954	137	16	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
29955	146	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
29955	146	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
29956	149	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
29956	149	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
29957	152	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
29957	152	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
2427	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != standardDeviation.$.length
2427	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != standardDeviation.length
2427	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DimensionMismatchException	mean.length != $.length
29626	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
29626	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
29626	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
1026	51	8	UniformIntegerDistribution.java	UniformIntegerDistribution	lower	int	0	NumberIsTooLargeException	$ >= upper
1026	51	8	UniformIntegerDistribution.java	UniformIntegerDistribution	upper	int	0	NumberIsTooLargeException	lower >= $
1027	62	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1027	62	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1027	62	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ < lower
1027	62	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ > upper
1028	70	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1028	70	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ < lower
1029	73	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1029	73	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ > upper
1030	72	8	UniformRealDistribution.java	UniformRealDistribution	lower	double	0	NumberIsTooLargeException	$ >= upper
1030	72	8	UniformRealDistribution.java	UniformRealDistribution	upper	double	0	NumberIsTooLargeException	lower >= $
1031	104	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x < $.lower
1031	104	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x > $.upper
1031	104	8	UniformRealDistribution.java	density	x	double	0	RET	$ < lower
1031	104	8	UniformRealDistribution.java	density	x	double	0	RET	$ > upper
1032	112	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x <= $.lower
1032	112	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ <= lower
1033	115	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x >= $.upper
1033	115	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ >= upper
29601	66	8	UnitSphereRandomVectorGenerator.java	nextVector	normSq	double	0	NIL-DOWHILE	$ > 1
29602	68	12	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
29602	68	12	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
29603	76	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
29603	76	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
1566	75	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	optimizer	BaseUnivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1566	75	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	generator	RandomGenerator	0	NullArgumentException	$ == null
1567	79	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1568	133	8	UnivariateMultiStartOptimizer.java	getOptima	THIS	UnivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
29101	156	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
29101	156	8	UnivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1569	172	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
3110	85	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NumberIsTooSmallException	xval.$.length < $.extend
3110	85	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NumberIsTooSmallException	$.length < extend
29938	95	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < xval.$.length
29938	95	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xval.length
29938	95	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NIL-FOR	i < $.length
29939	102	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < $.extend
29939	102	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < extend
3155	50	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
3156	73	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
3157	99	8	UnivariateSolverUtils.java	forceSide	THIS	UnivariateSolverUtils	0	RET	allowedSolution == $.AllowedSolution.ANY_SIDE
3157	99	8	UnivariateSolverUtils.java	forceSide	allowedSolution	AllowedSolution	0	RET	$ == AllowedSolution.ANY_SIDE
29973	112	8	UnivariateSolverUtils.java	forceSide	remainingEval	int	0	NIL-WHILE	$ > 0
3158	114	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ >= 0
3158	114	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ <= 0
3158	114	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ <= 0
3158	114	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ >= 0
3159	122	12	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ < fHi
3159	122	12	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo < $
3160	124	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ >= 0
3161	129	19	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ > fHi
3161	129	19	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo > $
3162	131	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ <= 0
3163	143	12	UnivariateSolverUtils.java	forceSide	changeLo	boolean	0	DEF	$
3164	150	12	UnivariateSolverUtils.java	forceSide	changeHi	boolean	0	DEF	$
3165	246	8	UnivariateSolverUtils.java	bracket	function	UnivariateFunction	0	NullArgumentException	$ == null
3166	249	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NotStrictlyPositiveException	$ <= 0
29974	260	8	UnivariateSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
29974	260	8	UnivariateSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
29974	260	8	UnivariateSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
29974	260	8	UnivariateSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
29974	260	8	UnivariateSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
29974	260	8	UnivariateSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
29974	260	8	UnivariateSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
29974	260	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
3167	270	8	UnivariateSolverUtils.java	bracket	fa	double	0	NoBracketingException	$ * fb > 0.0
3167	270	8	UnivariateSolverUtils.java	bracket	fb	double	0	NoBracketingException	fa * $ > 0.0
3168	305	8	UnivariateSolverUtils.java	isBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
3169	336	8	UnivariateSolverUtils.java	verifyInterval	lower	double	0	NumberIsTooLargeException	$ >= upper
3169	336	8	UnivariateSolverUtils.java	verifyInterval	upper	double	0	NumberIsTooLargeException	lower >= $
3170	371	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
3171	375	8	UnivariateSolverUtils.java	verifyBracketing	THIS	UnivariateSolverUtils	0	NoBracketingException	$.isBracketing(function, lower, upper)
3171	375	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NoBracketingException	isBracketing($, lower, upper)
3171	375	8	UnivariateSolverUtils.java	verifyBracketing	lower	double	0	NoBracketingException	isBracketing(function, $, upper)
3171	375	8	UnivariateSolverUtils.java	verifyBracketing	upper	double	0	NoBracketingException	isBracketing(function, lower, $)
29627	139	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
29627	139	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
29627	139	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
29628	154	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
29628	154	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
2428	262	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
2429	279	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
2430	353	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution == null
2430	353	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution.getBinStats().size() == 0
2431	380	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
2432	383	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
2432	383	8	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
2433	387	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
2433	387	12	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
1952	169	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
1953	179	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
1954	181	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
1955	184	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
1956	204	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
1957	227	8	Variance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
1958	258	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1958	258	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1958	258	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1958	258	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1959	260	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1960	262	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1961	318	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights,begin, length)
1961	318	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights,begin, length)
1961	318	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $,begin, length)
1961	318	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights,$, length)
1961	318	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights,begin, $)
1962	320	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1963	322	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1964	404	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1964	404	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1964	404	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1964	404	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1965	405	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1966	407	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
29423	411	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29423	411	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29423	411	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1967	417	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
1968	506	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights, begin, length)
1968	506	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
1968	506	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
1968	506	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
1968	506	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
1969	507	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1970	509	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
29424	513	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29424	513	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29424	513	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
29425	520	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
29425	520	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
29425	520	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1971	524	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
721	188	8	Vector1D.java	normalize	s	double	0	MathArithmeticException	$ == 0
722	305	8	Vector1D.java	equals	THIS	Vector1D	0	RET	$ == other
722	305	8	Vector1D.java	equals	other	Object	0	RET	this == $
723	309	8	Vector1D.java	equals	other	Object	0	RET	$ instanceof Vector1D
724	311	12	Vector1D.java	equals	rhs	Vector1D	0	RET	$.isNaN()
725	329	8	Vector1D.java	hashCode	THIS	Vector1D	0	RET	$.isNaN()
719	115	8	Vector1DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
720	127	8	Vector1DFormat.java	parse	coordinates	double[]	0	RET	$ == null
765	80	8	Vector2D.java	Vector2D	THIS	Vector2D	0	DimensionMismatchException	v.$.length != 2
765	80	8	Vector2D.java	Vector2D	v	double[]	0	DimensionMismatchException	$.length != 2
766	226	8	Vector2D.java	normalize	s	double	0	MathArithmeticException	$ == 0
767	347	8	Vector2D.java	equals	THIS	Vector2D	0	RET	$ == other
767	347	8	Vector2D.java	equals	other	Object	0	RET	this == $
768	351	8	Vector2D.java	equals	other	Object	0	RET	$ instanceof Vector2D
769	353	12	Vector2D.java	equals	rhs	Vector2D	0	RET	$.isNaN()
770	371	8	Vector2D.java	hashCode	THIS	Vector2D	0	RET	$.isNaN()
735	118	8	Vector2DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
736	130	8	Vector2DFormat.java	parse	coordinates	double[]	0	RET	$ == null
694	108	8	Vector3D.java	Vector3D	THIS	Vector3D	0	DimensionMismatchException	v.$.length != 3
694	108	8	Vector3D.java	Vector3D	v	double[]	0	DimensionMismatchException	$.length != 3
695	298	8	Vector3D.java	normalize	s	double	0	MathArithmeticException	$ == 0
696	322	8	Vector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
697	326	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
697	326	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
697	326	8	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
697	326	8	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
698	329	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
698	329	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
698	329	15	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
698	329	15	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
699	352	8	Vector3D.java	angle	normProduct	double	0	MathArithmeticException	$ == 0
700	358	8	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
700	358	8	Vector3D.java	angle	dot	double	0	RET	$ > threshold
700	358	8	Vector3D.java	angle	threshold	double	0	RET	dot < -$
700	358	8	Vector3D.java	angle	threshold	double	0	RET	dot > $
701	361	12	Vector3D.java	angle	dot	double	0	RET	$ >= 0
702	414	8	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
702	414	8	Vector3D.java	equals	other	Object	0	RET	this == $
703	418	8	Vector3D.java	equals	other	Object	0	RET	$ instanceof Vector3D
704	420	12	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
705	438	8	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
643	130	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
644	147	8	Vector3DFormat.java	parse	coordinates	double[]	0	RET	$ == null
28318	202	8	VectorFormat.java	format	THIS	VectorFormat	0	NIL-FOR	i < coordinates.$.length
28318	202	8	VectorFormat.java	format	i	int	0	NIL-FOR	$ < coordinates.length
28318	202	8	VectorFormat.java	format	coordinates	double	0	NIL-FOR	i < $.length
633	203	12	VectorFormat.java	format	i	int	0	DEF	$ > 0
634	247	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
634	247	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
634	247	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
28319	251	8	VectorFormat.java	parseCoordinates	i	int	0	NIL-FOR	$ < dimension
28319	251	8	VectorFormat.java	parseCoordinates	dimension	int	0	NIL-FOR	i < $
635	257	12	VectorFormat.java	parseCoordinates	i	int	0	RET	$ > 0
636	258	16	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
636	258	16	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
636	258	16	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
637	268	12	VectorFormat.java	parseCoordinates	c	Number	0	RET	$ == null
638	282	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
638	282	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
638	282	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
1982	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
1982	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
29430	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
29430	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
29430	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
29431	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
29431	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
1983	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
29432	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
29432	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
29433	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
29433	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
1984	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
1984	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
1985	139	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
1986	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
1986	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
1987	146	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
1987	146	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
1988	149	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
1988	149	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
1989	152	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
1989	152	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
29436	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
29436	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
2005	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
2005	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
29437	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
29437	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
29437	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
29438	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
29438	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
29438	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
2006	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
2006	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
2007	96	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
2008	100	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
2008	100	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
968	98	8	WeibullDistribution.java	WeibullDistribution	alpha	double	0	NotStrictlyPositiveException	$ <= 0
969	102	8	WeibullDistribution.java	WeibullDistribution	beta	double	0	NotStrictlyPositiveException	$ <= 0
970	142	8	WeibullDistribution.java	density	x	double	0	RET	$ < 0
971	162	8	WeibullDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
972	179	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
972	179	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
973	181	15	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
974	183	16	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
975	210	8	WeibullDistribution.java	getNumericalMean	THIS	WeibullDistribution	0	DEF	$.numericalMeanIsCalculated
976	236	8	WeibullDistribution.java	getNumericalVariance	THIS	WeibullDistribution	0	DEF	$.numericalVarianceIsCalculated
2085	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2085	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2086	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	y.$.length == 0
2086	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	x.$.length == 0
2086	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2086	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
2087	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	DimensionMismatchException	y.$.length != x.$.length
2087	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	DimensionMismatchException	y.length != $.length
2087	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	DimensionMismatchException	$.length != x.length
29449	102	8	WilcoxonSignedRankTest.java	calculateDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < x.$.length
29449	102	8	WilcoxonSignedRankTest.java	calculateDifferences	i	int	0	NIL-FOR	$ < x.length
29449	102	8	WilcoxonSignedRankTest.java	calculateDifferences	x	double[]	0	NIL-FOR	i < $.length
2088	120	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NullArgumentException	$ == null
2089	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NoDataException	z.$.length == 0
2089	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NoDataException	$.length == 0
29450	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
29450	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	i	int	0	NIL-FOR	$ < z.length
29450	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NIL-FOR	i < $.length
29451	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
29451	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	NIL-FOR	$ < z.length
29451	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	NIL-FOR	i < $.length
2090	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	DEF	z[$] > 0
2090	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	DEF	$[i] > 0
29452	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	NIL-FOR	$ < m
29452	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	m	int	0	NIL-FOR	i < $
29453	219	12	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	NIL-FOR	$ < N
2091	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	DEF	((i >> $) & 1) == 1
2091	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	DEF	(($ >> j) & 1) == 1
2092	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	rankSum	int	0	DEF	$ >= Wmax
2092	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	Wmax	double	0	DEF	rankSum >= $
2093	313	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	0	NumberIsTooLargeException	$
2094	317	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	1	RET	$
1093	63	8	ZipfDistribution.java	ZipfDistribution	numberOfElements	int	0	NotStrictlyPositiveException	$ <= 0
1094	67	8	ZipfDistribution.java	ZipfDistribution	exponent	double	0	NotStrictlyPositiveException	$ <= 0
1095	96	8	ZipfDistribution.java	probability	THIS	ZipfDistribution	0	RET	x > $.numberOfElements
1095	96	8	ZipfDistribution.java	probability	x	int	0	RET	$ <= 0
1095	96	8	ZipfDistribution.java	probability	x	int	0	RET	$ > numberOfElements
1096	105	8	ZipfDistribution.java	cumulativeProbability	x	int	1	RET	$ <= 0
1097	107	15	ZipfDistribution.java	cumulativeProbability	THIS	ZipfDistribution	0	RET	x >= $.numberOfElements
1097	107	15	ZipfDistribution.java	cumulativeProbability	x	int	0	RET	$ >= numberOfElements
1098	125	8	ZipfDistribution.java	getNumericalMean	THIS	ZipfDistribution	0	DEF	$.numericalMeanIsCalculated
1099	159	8	ZipfDistribution.java	getNumericalVariance	THIS	ZipfDistribution	0	DEF	$.numericalVarianceIsCalculated
28359	193	8	ZipfDistribution.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
