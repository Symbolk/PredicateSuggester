id	line	column	filename	methodname	varname	vartype	else	return	right
404	61	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ > 1.0
404	61	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ < 0.0
405	96	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(lowerBound)) < 1E-6
405	96	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	lowerBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
406	99	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(upperBound)) < 1E-6
406	99	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	upperBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
436	60	8	AbstractDistribution.java	cumulativeProbability	x0	double	0	IllegalArgumentException	$ > x1
436	60	8	AbstractDistribution.java	cumulativeProbability	x1	double	0	IllegalArgumentException	x0 > $
41758	86	8	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
41758	86	8	AbstractEstimator.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
41759	89	12	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	j < $.cols
41759	89	12	AbstractEstimator.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1189	110	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	EstimationException	++$.costEvaluations > $.maxCostEval
41760	116	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
41760	116	8	AbstractEstimator.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
41761	140	8	AbstractEstimator.java	getRMS	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
41761	140	8	AbstractEstimator.java	getRMS	i	int	0	NIL-FOR	$ < wm.length
41761	140	8	AbstractEstimator.java	getRMS	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
41762	155	8	AbstractEstimator.java	getChiSquare	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
41762	155	8	AbstractEstimator.java	getChiSquare	i	int	0	NIL-FOR	$ < wm.length
41762	155	8	AbstractEstimator.java	getChiSquare	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
41763	180	8	AbstractEstimator.java	getCovariances	i	int	0	NIL-FOR	$ < cols
41763	180	8	AbstractEstimator.java	getCovariances	cols	int	0	NIL-FOR	i < $
41764	181	12	AbstractEstimator.java	getCovariances	j	int	0	NIL-FOR	$ < cols
41764	181	12	AbstractEstimator.java	getCovariances	cols	int	0	NIL-FOR	j < $
41765	183	16	AbstractEstimator.java	getCovariances	k	int	0	NIL-FOR	$ < max
41765	183	16	AbstractEstimator.java	getCovariances	max	int	0	NIL-FOR	k < $
1190	215	8	AbstractEstimator.java	guessParametersErrors	m	int	0	EstimationException	$ <= p
1190	215	8	AbstractEstimator.java	guessParametersErrors	p	int	0	EstimationException	m <= $
41766	223	8	AbstractEstimator.java	guessParametersErrors	THIS	AbstractEstimator	0	NIL-FOR	i < errors.$.length
41766	223	8	AbstractEstimator.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
41766	223	8	AbstractEstimator.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
312	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	DEF	$ == null
313	134	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	DEF	$ == null
314	165	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
314	165	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
40938	167	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
40938	167	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
40938	167	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
315	172	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
315	172	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
363	79	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	0	IllegalArgumentException	$ > x1
363	79	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	double	0	IllegalArgumentException	x0 > $
364	83	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	1	RET	Math.floor($) < $
365	117	8	AbstractIntegerDistribution.java	probability	fl	double	1	RET	$ == x
365	117	8	AbstractIntegerDistribution.java	probability	x	double	1	RET	fl == $
366	136	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	IllegalArgumentException	$ > x1
366	136	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	IllegalArgumentException	x0 > $
367	155	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ < 0.0
367	155	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ > 1.0
40940	165	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	0	NIL-WHILE	$ < x1
40940	165	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	0	NIL-WHILE	x0 < $
368	168	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	1	DEF	$ > p
368	168	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	1	DEF	pm > $
369	170	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x1
369	170	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	1	DEF	xm == $
370	180	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x0
370	180	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	1	DEF	xm == $
40941	193	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	0	NIL-WHILE	$ > p
40941	193	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	pm > $
1376	109	12	AbstractIntegrator.java	requiresDenseOutput	THIS	AbstractIntegrator	0	RET	$.handler.requiresDenseOutput()
1377	139	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	equations.getDimension() != y0.$.length
1377	139	8	AbstractIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y0.length
1377	139	8	AbstractIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	equations.getDimension() != $.length
1378	146	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	equations.getDimension() != y.$.length
1378	146	8	AbstractIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y.length
1378	146	8	AbstractIntegrator.java	sanityChecks	y	double[]	0	IntegratorException	equations.getDimension() != $.length
1379	153	8	AbstractIntegrator.java	sanityChecks	t0	double	0	IntegratorException	Math.abs(t - $) <= 1.0e-12 * Math.max(Math.abs($), Math.abs(t))
1379	153	8	AbstractIntegrator.java	sanityChecks	t	double	0	IntegratorException	Math.abs($ - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs($))
890	154	8	AbstractLeastSquaresOptimizer.java	incrementIterationsCounter	THIS	AbstractLeastSquaresOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
891	155	12	AbstractLeastSquaresOptimizer.java	incrementIterationsCounter	THIS	AbstractLeastSquaresOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
892	169	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	FunctionEvaluationException	$.jacobian.$.length != $.rows
41603	173	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
41603	173	8	AbstractLeastSquaresOptimizer.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
41604	176	12	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
41604	176	12	AbstractLeastSquaresOptimizer.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
893	192	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	FunctionEvaluationException	$.objective.$.length != $.rows
41605	197	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
41605	197	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
41606	218	8	AbstractLeastSquaresOptimizer.java	getRMS	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
41606	218	8	AbstractLeastSquaresOptimizer.java	getRMS	i	int	0	NIL-FOR	$ < rows
41607	231	8	AbstractLeastSquaresOptimizer.java	getChiSquare	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
41607	231	8	AbstractLeastSquaresOptimizer.java	getChiSquare	i	int	0	NIL-FOR	$ < rows
41608	254	8	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.cols
41608	254	8	AbstractLeastSquaresOptimizer.java	getCovariances	i	int	0	NIL-FOR	$ < cols
41609	255	12	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
41609	255	12	AbstractLeastSquaresOptimizer.java	getCovariances	j	int	0	NIL-FOR	$ < cols
41610	257	16	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	k < $.rows
41610	257	16	AbstractLeastSquaresOptimizer.java	getCovariances	k	int	0	NIL-FOR	$ < rows
894	287	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	OptimizationException	$.rows <= $.cols
41611	295	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
41611	295	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
41611	295	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
895	307	8	AbstractLeastSquaresOptimizer.java	optimize	THIS	AbstractLeastSquaresOptimizer	0	OptimizationException	target.$.length != weights.$.length
895	307	8	AbstractLeastSquaresOptimizer.java	optimize	target	double[]	0	OptimizationException	$.length != weights.length
895	307	8	AbstractLeastSquaresOptimizer.java	optimize	weights	double[]	0	OptimizationException	target.length != $.length
837	89	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
838	90	12	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
41712	48	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
41712	48	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
41713	51	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < nvars + 1
41713	51	12	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NIL-FOR	j < $ + 1
1108	86	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	IllegalArgumentException	$ == null
1109	89	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	IllegalArgumentException	$ == null
1110	92	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	x.$.length != y.$.length
1110	92	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	IllegalArgumentException	$.length != y.length
1110	92	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	IllegalArgumentException	x.length != $.length
1111	107	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	$ == null
1112	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	x.$.length != covariance.$.length
1112	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	IllegalArgumentException	$.length != covariance.length
1112	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	x.length != $.length
1113	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	covariance.$.length > 0
1113	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	covariance.$.length != covariance[0].length
1113	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	$.length > 0
1113	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	$.length != $[0].length
41714	151	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
41714	151	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
41733	91	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
41733	91	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
41733	91	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
41734	93	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
1139	94	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
1140	98	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
1140	98	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
1140	98	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
1141	140	8	AbstractRandomGenerator.java	nextInt	n	int	0	IllegalArgumentException	$ <= 0
1142	236	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
41735	244	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
1143	249	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
539	64	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	DEF	$ <= 0
540	69	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	DEF	$ <= 0
41100	93	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
41100	93	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
41101	94	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
41101	94	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
41102	112	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
41102	112	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
41103	113	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
41103	113	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
41104	128	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
41104	128	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
41105	129	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
41105	129	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
41106	144	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
41106	144	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
41107	145	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
41107	145	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
41108	165	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
41108	165	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
41109	166	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
41109	166	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
41110	168	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
41110	168	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
41111	190	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
41111	190	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
41111	190	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
41112	192	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
41112	192	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
41112	192	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
41113	282	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
41113	282	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
41114	283	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
41114	283	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
541	329	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination[0].length < columnsCount
541	329	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination.$.length < rowsCount
541	329	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	DEF	destination.length < $
541	329	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	DEF	destination[0].length < $
541	329	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$[0].length < columnsCount
541	329	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$.length < rowsCount
542	373	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination.$.length < selectedRows.$.length
542	373	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination[0].length < selectedColumns.$.length
542	373	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	DEF	destination.length < $.length
542	373	8	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	DEF	destination[0].length < $.length
542	373	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$.length < selectedRows.length
542	373	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$[0].length < selectedColumns.length
41115	382	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
41115	382	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
41115	382	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
41116	384	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
41116	384	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
41116	384	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
543	396	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
544	401	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
41117	405	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
41117	405	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
545	406	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DEF	subMatrix[r].length != nCols
545	406	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
545	406	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
545	406	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[r].length != nCols
41118	418	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
41118	418	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
41119	419	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
41119	419	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
41120	435	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
41120	435	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
546	449	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
546	449	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getRowDimension() != 1
546	449	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getColumnDimension() != nCols
41121	455	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
41121	455	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
41122	468	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
41122	468	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
547	482	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
547	482	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getRowDimension() != nRows
547	482	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getColumnDimension() != 1
41123	488	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
41123	488	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
548	506	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	InvalidMatrixException	vector.getDimension() != $
548	506	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	InvalidMatrixException	$.getDimension() != nCols
41124	511	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
41124	511	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
549	529	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	InvalidMatrixException	vector.getDimension() != $
549	529	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	InvalidMatrixException	$.getDimension() != nRows
41125	534	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
41125	534	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
41126	547	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
41126	547	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
550	561	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	InvalidMatrixException	array.$.length != nCols
550	561	8	AbstractRealMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
550	561	8	AbstractRealMatrix.java	setRow	array	double[]	0	InvalidMatrixException	$.length != nCols
41127	566	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
41127	566	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
41128	579	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
41128	579	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
551	593	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	InvalidMatrixException	array.$.length != nRows
551	593	8	AbstractRealMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
551	593	8	AbstractRealMatrix.java	setColumn	array	double[]	0	InvalidMatrixException	$.length != nRows
41129	598	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
41129	598	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
552	647	8	AbstractRealMatrix.java	inverse	THIS	AbstractRealMatrix	0	DEF	$.lu == null
553	668	8	AbstractRealMatrix.java	isSingular	THIS	AbstractRealMatrix	0	DEF	$.lu == null
554	685	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
554	685	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
41130	689	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
41130	689	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
555	701	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DEF	v.$.length != nCols
555	701	8	AbstractRealMatrix.java	operate	nCols	int	0	DEF	v.length != $
555	701	8	AbstractRealMatrix.java	operate	v	double[]	0	DEF	$.length != nCols
41131	708	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
41131	708	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
41132	710	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
41132	710	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
556	728	12	AbstractRealMatrix.java	operate	nCols	int	0	DEF	v.getDimension() != $
556	728	12	AbstractRealMatrix.java	operate	v	RealVector	0	DEF	$.getDimension() != nCols
41133	735	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
41133	735	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
41134	737	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
41134	737	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
557	753	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DEF	v.$.length != nRows
557	753	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
557	753	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != nRows
41135	760	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
41135	760	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
41136	762	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
41136	762	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
558	781	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DEF	v.getDimension() != $
558	781	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DEF	$.getDimension() != nRows
41137	788	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
41137	788	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
41138	790	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
41138	790	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
41139	807	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
41139	807	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
41140	808	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
41140	808	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
41141	824	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
41141	824	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
41142	825	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
41142	825	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
41143	840	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
41143	840	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
41144	841	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
41144	841	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
41145	859	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
41145	859	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
41146	860	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
41146	860	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
41147	873	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
41147	873	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
41148	874	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
41148	874	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
41149	890	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
41149	890	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
41150	891	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
41150	891	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
41151	906	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
41151	906	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
41152	907	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
41152	907	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
41153	925	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
41153	925	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
41154	926	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
41154	926	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
559	965	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
560	975	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
561	1003	8	AbstractRealMatrix.java	luDecompose	THIS	AbstractRealMatrix	0	DEF	$.lu == null
41155	1021	8	AbstractRealMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
41155	1021	8	AbstractRealMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
562	1022	12	AbstractRealMatrix.java	toString	i	int	0	DEF	$ > 0
41156	1026	12	AbstractRealMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
41156	1026	12	AbstractRealMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
563	1027	16	AbstractRealMatrix.java	toString	j	int	0	DEF	$ > 0
564	1050	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
564	1050	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
565	1053	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
566	1059	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
566	1059	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
566	1059	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
566	1059	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
41157	1062	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
41157	1062	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
41158	1063	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
41158	1063	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
567	1064	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
567	1064	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
567	1064	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
567	1064	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
41159	1084	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
41159	1084	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
41160	1085	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
41160	1085	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
568	1099	8	AbstractRealMatrix.java	checkRowIndex	THIS	AbstractRealMatrix	0	MatrixIndexException	row >= $.getRowDimension()
568	1099	8	AbstractRealMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
568	1099	8	AbstractRealMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= getRowDimension()
569	1112	8	AbstractRealMatrix.java	checkColumnIndex	THIS	AbstractRealMatrix	0	MatrixIndexException	column >= $.getColumnDimension()
569	1112	8	AbstractRealMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
569	1112	8	AbstractRealMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= getColumnDimension()
570	1132	8	AbstractRealMatrix.java	checkSubMatrixIndex	startRow	int	0	MatrixIndexException	$ > endRow
570	1132	8	AbstractRealMatrix.java	checkSubMatrixIndex	endRow	int	0	MatrixIndexException	startRow > $
571	1139	8	AbstractRealMatrix.java	checkSubMatrixIndex	startColumn	int	0	MatrixIndexException	$ > endColumn
571	1139	8	AbstractRealMatrix.java	checkSubMatrixIndex	endColumn	int	0	MatrixIndexException	startColumn > $
572	1156	8	AbstractRealMatrix.java	checkSubMatrixIndex	THIS	AbstractRealMatrix	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
572	1156	8	AbstractRealMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
572	1156	8	AbstractRealMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
573	1157	12	AbstractRealMatrix.java	checkSubMatrixIndex	THIS	AbstractRealMatrix	0	MatrixIndexException	selectedRows.$.length == 0
573	1157	12	AbstractRealMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length == 0
574	1177	8	AbstractRealMatrix.java	checkAdditionCompatible	THIS	AbstractRealMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
574	1177	8	AbstractRealMatrix.java	checkAdditionCompatible	THIS	AbstractRealMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
574	1177	8	AbstractRealMatrix.java	checkAdditionCompatible	m	RealMatrix	0	DEF	getRowDimension() != $.getRowDimension()
574	1177	8	AbstractRealMatrix.java	checkAdditionCompatible	m	RealMatrix	0	DEF	getColumnDimension() != $.getColumnDimension()
575	1192	8	AbstractRealMatrix.java	checkSubtractionCompatible	THIS	AbstractRealMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
575	1192	8	AbstractRealMatrix.java	checkSubtractionCompatible	THIS	AbstractRealMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
575	1192	8	AbstractRealMatrix.java	checkSubtractionCompatible	m	RealMatrix	0	DEF	getRowDimension() != $.getRowDimension()
575	1192	8	AbstractRealMatrix.java	checkSubtractionCompatible	m	RealMatrix	0	DEF	getColumnDimension() != $.getColumnDimension()
576	1207	8	AbstractRealMatrix.java	checkMultiplicationCompatible	THIS	AbstractRealMatrix	0	DEF	$.getColumnDimension() != m.getRowDimension()
576	1207	8	AbstractRealMatrix.java	checkMultiplicationCompatible	m	RealMatrix	0	DEF	getColumnDimension() != $.getRowDimension()
907	124	8	AbstractScalarDifferentiableOptimizer.java	incrementIterationsCounter	THIS	AbstractScalarDifferentiableOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
908	125	12	AbstractScalarDifferentiableOptimizer.java	incrementIterationsCounter	THIS	AbstractScalarDifferentiableOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
1251	144	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState != null
1251	144	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState != null
1252	321	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
41844	360	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
41844	360	4	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
41845	397	4	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
41845	397	4	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
941	60	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	IllegalArgumentException	$ == null
942	89	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
942	89	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
942	89	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
942	89	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
943	128	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	IllegalArgumentException	$ == null
944	147	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
944	147	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
944	147	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
944	147	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
41656	149	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
41656	149	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
945	164	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
945	164	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
946	167	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
823	64	8	AbstractUnivariateRealOptimizer.java	checkResultComputed	THIS	AbstractUnivariateRealOptimizer	0	DEF	$.resultComputed
1032	82	8	AbstractUnivariateStatistic.java	test	values	double[]	0	IllegalArgumentException	$ == null
1033	86	8	AbstractUnivariateStatistic.java	test	begin	int	0	IllegalArgumentException	$ < 0
1034	90	8	AbstractUnivariateStatistic.java	test	length	int	0	IllegalArgumentException	$ < 0
1035	94	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	IllegalArgumentException	begin + length > values.$.length
1035	94	8	AbstractUnivariateStatistic.java	test	values	double[]	0	IllegalArgumentException	begin + length > $.length
1035	94	8	AbstractUnivariateStatistic.java	test	begin	int	0	IllegalArgumentException	$ + length > values.length
1035	94	8	AbstractUnivariateStatistic.java	test	length	int	0	IllegalArgumentException	begin + $ > values.length
1036	99	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
41917	86	8	AdamsBashforthIntegrator.java	AdamsBashforthIntegrator	i	int	0	NIL-FOR	$ < order
41917	86	8	AdamsBashforthIntegrator.java	AdamsBashforthIntegrator	order	int	0	NIL-FOR	i < $
41918	88	12	AdamsBashforthIntegrator.java	AdamsBashforthIntegrator	j	int	0	NIL-FOR	$ < order
41918	88	12	AdamsBashforthIntegrator.java	AdamsBashforthIntegrator	order	int	0	NIL-FOR	j < $
1327	107	8	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1327	107	8	AdamsBashforthIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1328	128	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	RET	Double.isNaN($.previousT[0])
41919	135	8	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
41920	141	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
41920	141	12	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
41920	141	12	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
41921	143	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	l < $.coeffs.$.length
41921	143	16	AdamsBashforthIntegrator.java	integrate	l	int	0	NIL-FOR	$ < coeffs.length
1329	152	12	AdamsBashforthIntegrator.java	integrate	interpolator	AdamsBashforthStepInterpolator	1	DEF	manager.evaluateStep($)
1329	152	12	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1330	172	12	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	RET	$
1331	175	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	1	RET	manager.reset($.stepStart, y)
1331	175	16	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	1	RET	$.reset(stepStart, y)
1331	175	16	AdamsBashforthIntegrator.java	integrate	y	double[]	1	RET	manager.reset(stepStart, $)
1332	181	20	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	RET	Double.isNaN($.previousT[0])
1333	188	20	AdamsBashforthIntegrator.java	integrate	truncated	boolean	1	DEF	$
41922	190	24	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.previousF.$.length
41922	190	24	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < previousF.length
41923	249	8	AdamsBashforthIntegrator.java	computeBackwardDifferencesArray	i	int	0	NIL-FOR	$ < order
41923	249	8	AdamsBashforthIntegrator.java	computeBackwardDifferencesArray	order	int	0	NIL-FOR	i < $
41924	252	12	AdamsBashforthIntegrator.java	computeBackwardDifferencesArray	j	int	0	NIL-FOR	$ < i - 1
41924	252	12	AdamsBashforthIntegrator.java	computeBackwardDifferencesArray	i	int	0	NIL-FOR	j < $ - 1
41925	275	8	AdamsBashforthIntegrator.java	computeGammaArray	i	int	0	NIL-FOR	$ < order
41925	275	8	AdamsBashforthIntegrator.java	computeGammaArray	order	int	0	NIL-FOR	i < $
41926	277	12	AdamsBashforthIntegrator.java	computeGammaArray	j	int	0	NIL-FOR	$ <= i
41926	277	12	AdamsBashforthIntegrator.java	computeGammaArray	i	int	0	NIL-FOR	j <= $
41950	110	8	AdamsBashforthStepInterpolator.java	initializeCoefficients	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	i < fGamma.$.length
41950	110	8	AdamsBashforthStepInterpolator.java	initializeCoefficients	i	int	0	NIL-FOR	$ < fGamma.length
41950	110	8	AdamsBashforthStepInterpolator.java	initializeCoefficients	fGamma	Fraction[]	0	NIL-FOR	i < $.length
41951	160	8	AdamsBashforthStepInterpolator.java	interpolateDerivatives	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	i < $.interpolatedDerivatives.$.length
41951	160	8	AdamsBashforthStepInterpolator.java	interpolateDerivatives	i	int	0	NIL-FOR	$ < interpolatedDerivatives.length
41952	163	12	AdamsBashforthStepInterpolator.java	interpolateDerivatives	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	k < $.previousF.$.length
41952	163	12	AdamsBashforthStepInterpolator.java	interpolateDerivatives	k	int	0	NIL-FOR	$ < previousF.length
41953	168	12	AdamsBashforthStepInterpolator.java	interpolateDerivatives	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	l < $.neville.$.length
41953	168	12	AdamsBashforthStepInterpolator.java	interpolateDerivatives	l	int	0	NIL-FOR	$ < neville.length
41954	169	16	AdamsBashforthStepInterpolator.java	interpolateDerivatives	m	int	0	NIL-FOR	$ >= l
41954	169	16	AdamsBashforthStepInterpolator.java	interpolateDerivatives	l	int	0	NIL-FOR	m >= $
41955	237	8	AdamsBashforthStepInterpolator.java	interpolateState	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	j < $.interpolatedState.$.length
41955	237	8	AdamsBashforthStepInterpolator.java	interpolateState	j	int	0	NIL-FOR	$ < interpolatedState.length
41956	239	12	AdamsBashforthStepInterpolator.java	interpolateState	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	l < $.previousT.$.length
41956	239	12	AdamsBashforthStepInterpolator.java	interpolateState	l	int	0	NIL-FOR	$ < previousT.length
41957	256	8	AdamsBashforthStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ < order
41957	256	8	AdamsBashforthStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i < $
41958	259	12	AdamsBashforthStepInterpolator.java	computeRollback	j	int	0	NIL-FOR	$ <= i
41958	259	12	AdamsBashforthStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	j <= $
41959	266	8	AdamsBashforthStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ < order
41959	266	8	AdamsBashforthStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i < $
41960	272	8	AdamsBashforthStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ < order
41960	272	8	AdamsBashforthStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i < $
41961	274	12	AdamsBashforthStepInterpolator.java	computeRollback	j	int	0	NIL-FOR	$ <= order
41961	274	12	AdamsBashforthStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	j <= $
41905	90	8	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	i	int	0	NIL-FOR	$ < order
41905	90	8	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	order	int	0	NIL-FOR	i < $
41906	92	12	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	j	int	0	NIL-FOR	$ < order
41906	92	12	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	order	int	0	NIL-FOR	j < $
41907	101	8	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	i	int	0	NIL-FOR	$ <= order
41907	101	8	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	order	int	0	NIL-FOR	i <= $
41908	103	12	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	j	int	0	NIL-FOR	$ <= order
41908	103	12	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	order	int	0	NIL-FOR	j <= $
1320	123	8	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1320	123	8	AdamsMoultonIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1321	144	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	RET	Double.isNaN($.previousT[0])
41909	153	8	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
41910	159	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
41910	159	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
41910	159	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
41911	161	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	l < $.predictorCoeffs.$.length
41911	161	16	AdamsMoultonIntegrator.java	integrate	l	int	0	NIL-FOR	$ < predictorCoeffs.length
41912	172	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
41912	172	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
41912	172	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
41913	174	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	l < $.correctorCoeffs.$.length
41913	174	16	AdamsMoultonIntegrator.java	integrate	l	int	0	NIL-FOR	$ < correctorCoeffs.length
1322	183	12	AdamsMoultonIntegrator.java	integrate	interpolator	AdamsMoultonStepInterpolator	1	DEF	manager.evaluateStep($)
1322	183	12	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1323	203	12	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	RET	$
1324	206	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	1	RET	manager.reset($.stepStart, y)
1324	206	16	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	1	RET	$.reset(stepStart, y)
1324	206	16	AdamsMoultonIntegrator.java	integrate	y	double[]	1	RET	manager.reset(stepStart, $)
1325	212	20	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	RET	Double.isNaN($.previousT[0])
1326	221	20	AdamsMoultonIntegrator.java	integrate	truncated	boolean	1	DEF	$
41914	223	24	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	i < $.previousF.$.length
41914	223	24	AdamsMoultonIntegrator.java	integrate	i	int	0	NIL-FOR	$ < previousF.length
41915	284	8	AdamsMoultonIntegrator.java	computeGammaStarArray	i	int	0	NIL-FOR	$ <= order
41915	284	8	AdamsMoultonIntegrator.java	computeGammaStarArray	order	int	0	NIL-FOR	i <= $
41916	286	12	AdamsMoultonIntegrator.java	computeGammaStarArray	j	int	0	NIL-FOR	$ <= i
41916	286	12	AdamsMoultonIntegrator.java	computeGammaStarArray	i	int	0	NIL-FOR	j <= $
41857	110	8	AdamsMoultonStepInterpolator.java	initializeCoefficients	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	i < fGammaStar.$.length
41857	110	8	AdamsMoultonStepInterpolator.java	initializeCoefficients	i	int	0	NIL-FOR	$ < fGammaStar.length
41857	110	8	AdamsMoultonStepInterpolator.java	initializeCoefficients	fGammaStar	Fraction[]	0	NIL-FOR	i < $.length
41858	160	8	AdamsMoultonStepInterpolator.java	interpolateDerivatives	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	i < $.interpolatedDerivatives.$.length
41858	160	8	AdamsMoultonStepInterpolator.java	interpolateDerivatives	i	int	0	NIL-FOR	$ < interpolatedDerivatives.length
41859	163	12	AdamsMoultonStepInterpolator.java	interpolateDerivatives	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	k < $.previousF.$.length
41859	163	12	AdamsMoultonStepInterpolator.java	interpolateDerivatives	k	int	0	NIL-FOR	$ < previousF.length
41860	168	12	AdamsMoultonStepInterpolator.java	interpolateDerivatives	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	l < $.neville.$.length
41860	168	12	AdamsMoultonStepInterpolator.java	interpolateDerivatives	l	int	0	NIL-FOR	$ < neville.length
41861	169	16	AdamsMoultonStepInterpolator.java	interpolateDerivatives	m	int	0	NIL-FOR	$ >= l
41861	169	16	AdamsMoultonStepInterpolator.java	interpolateDerivatives	l	int	0	NIL-FOR	m >= $
41862	238	8	AdamsMoultonStepInterpolator.java	interpolateState	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	j < $.interpolatedState.$.length
41862	238	8	AdamsMoultonStepInterpolator.java	interpolateState	j	int	0	NIL-FOR	$ < interpolatedState.length
41863	240	12	AdamsMoultonStepInterpolator.java	interpolateState	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	l < $.previousT.$.length
41863	240	12	AdamsMoultonStepInterpolator.java	interpolateState	l	int	0	NIL-FOR	$ < previousT.length
41864	257	8	AdamsMoultonStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ <= order
41864	257	8	AdamsMoultonStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i <= $
41865	260	12	AdamsMoultonStepInterpolator.java	computeRollback	j	int	0	NIL-FOR	$ <= i
41865	260	12	AdamsMoultonStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	j <= $
41866	267	8	AdamsMoultonStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ <= order
41866	267	8	AdamsMoultonStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i <= $
41867	273	8	AdamsMoultonStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ <= order
41867	273	8	AdamsMoultonStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i <= $
41868	275	12	AdamsMoultonStepInterpolator.java	computeRollback	j	int	0	NIL-FOR	$ <= order
41868	275	12	AdamsMoultonStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	j <= $
1360	132	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
1360	132	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
1360	132	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
1360	132	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
1361	155	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance != null
1361	155	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance.$.length != y0.$.length
1361	155	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecAbsoluteTolerance.length != $.length
1362	162	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance != null
1362	162	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance.$.length != y0.$.length
1362	162	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecRelativeTolerance.length != $.length
1363	191	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
41979	201	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
41979	201	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
41979	201	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
1364	210	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
41980	215	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
41980	215	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
41980	215	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
41981	222	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
41981	222	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
41981	222	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
1365	236	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
1365	236	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
1366	239	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
1366	239	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
1367	242	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
1368	263	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	Math.abs(h) < $.minStep
1368	263	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	IntegratorException	Math.abs($) < minStep
1369	264	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
1370	273	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
1370	273	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
1371	275	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
1371	275	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
1224	126	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
1224	126	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
1224	126	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
1224	126	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
1224	126	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
1224	126	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
1224	126	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
1225	130	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
1225	130	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
1225	130	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
1226	199	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
1226	199	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
1226	199	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
1226	199	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
437	89	8	BetaDistributionImpl.java	recomputeZ	THIS	BetaDistributionImpl	0	DEF	Double.isNaN($.z)
438	97	8	BetaDistributionImpl.java	density	x	Double	1	RET	$ > 1
438	97	8	BetaDistributionImpl.java	density	x	Double	1	RET	$ < 0
439	99	15	BetaDistributionImpl.java	density	x	Double	1	MathException:RET	$ == 0
440	100	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	MathException	$.alpha < 1
441	104	15	BetaDistributionImpl.java	density	x	Double	1	MathException:RET	$ == 1
442	105	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	MathException	$.beta < 1
443	119	8	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 0
444	121	15	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 1
445	148	8	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ <= 0
446	150	15	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ >= 1
674	80	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
674	80	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
675	95	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
41419	105	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
41419	105	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
41420	110	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
41420	110	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
676	113	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
676	113	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
676	113	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
41421	114	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
41421	114	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
41422	116	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
41422	116	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
41423	121	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
41423	121	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
677	127	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
678	144	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
41424	149	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
41424	149	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
679	151	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
679	151	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
680	152	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
681	156	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
681	156	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
682	176	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
41425	186	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
41425	186	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
41426	191	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
41426	191	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
683	194	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
683	194	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
41427	195	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
41427	195	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
41428	197	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
41428	197	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
41429	202	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
41429	202	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
684	208	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
41430	266	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
41430	266	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
41431	270	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
41431	270	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
685	277	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
41432	279	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
41432	279	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
41433	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
41433	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
41434	286	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
41434	286	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
686	293	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
686	293	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
41435	296	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
41435	296	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
687	302	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
41436	304	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
41436	304	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
41437	307	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
41437	307	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
41438	311	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
41438	311	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
41439	330	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
41439	330	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
41440	335	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
41440	335	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
688	341	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
41441	343	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
41441	343	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
41442	346	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
41442	346	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
41443	350	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
41443	350	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
689	356	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
689	356	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
41444	360	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
41444	360	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
690	366	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
41445	368	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
41445	368	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
41446	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
41446	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
41447	375	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
41447	375	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
266	109	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
267	145	8	BigFraction.java	BigFraction	num	BigInteger	0	DEF	$ == null
268	148	8	BigFraction.java	BigFraction	den	BigInteger	0	DEF	$ == null
269	151	8	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.equals($)
270	154	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
271	161	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
272	167	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
273	201	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isNaN($)
274	204	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isInfinite($)
275	213	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
276	217	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
40935	221	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
40935	221	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
277	226	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
278	303	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
278	303	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
279	309	8	BigFraction.java	BigFraction	a0	long	0	RET	Math.abs($ - value) < epsilon
279	309	8	BigFraction.java	BigFraction	value	double	0	RET	Math.abs(a0 - $) < epsilon
279	309	8	BigFraction.java	BigFraction	epsilon	double	0	RET	Math.abs(a0 - value) < $
40936	325	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
280	331	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
280	331	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
280	331	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
280	331	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
281	336	12	BigFraction.java	BigFraction	convergent	double	1	DEF	Math.abs($ - value) > epsilon
281	336	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
281	336	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
281	336	12	BigFraction.java	BigFraction	value	double	1	DEF	Math.abs(convergent - $) > epsilon
281	336	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	Math.abs(convergent - value) > $
281	336	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
281	336	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
282	350	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
282	350	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
283	354	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
283	354	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
284	508	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
285	515	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
285	515	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
286	613	8	BigFraction.java	divide	bg	BigInteger	0	DEF	BigInteger.ZERO.equals($)
287	666	8	BigFraction.java	divide	THIS	BigFraction	0	DEF	BigInteger.ZERO.equals(fraction.$.numerator)
287	666	8	BigFraction.java	divide	fraction	BigFraction	0	DEF	BigInteger.ZERO.equals($.numerator)
288	706	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
288	706	8	BigFraction.java	equals	other	Object	1	DEF	this == $
289	708	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
290	897	8	BigFraction.java	multiply	THIS	BigFraction	0	DEF	$.getNumeratorAsInt() != 0
290	897	8	BigFraction.java	multiply	fraction	BigFraction	0	DEF	$.getNumeratorAsInt() != 0
291	940	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
292	957	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
293	976	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
294	1084	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
295	1090	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
295	1090	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
296	1113	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
297	1115	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
298	168	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
299	170	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
300	172	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
301	194	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
302	218	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
303	251	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
40937	274	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
40937	274	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
40937	274	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
40937	274	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
487	102	8	BigMatrixImpl.java	BigMatrixImpl	rowDimension	int	0	IllegalArgumentException	$ <=0
487	102	8	BigMatrixImpl.java	BigMatrixImpl	columnDimension	int	0	IllegalArgumentException	$ <=0
488	143	8	BigMatrixImpl.java	BigMatrixImpl	copyArray	boolean	1	DEF	$
489	146	12	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	NullPointerException	$ == null
490	150	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	IllegalArgumentException	$ == 0
491	154	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	$ == 0
41026	157	12	BigMatrixImpl.java	BigMatrixImpl	r	int	0	NIL-FOR	$ < nRows
41026	157	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	r < $
492	158	16	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	IllegalArgumentException	d[r].length != nCols
492	158	16	BigMatrixImpl.java	BigMatrixImpl	r	int	0	IllegalArgumentException	d[$].length != nCols
492	158	16	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	d[r].length != $
492	158	16	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	IllegalArgumentException	$[r].length != nCols
493	180	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	IllegalArgumentException	$ == 0
494	185	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	$ == 0
41027	189	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
41027	189	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
495	190	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	IllegalArgumentException	d[row].length != nCols
495	190	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	IllegalArgumentException	d[$].length != nCols
495	190	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	d[row].length != $
495	190	12	BigMatrixImpl.java	BigMatrixImpl	d	double[][]	0	IllegalArgumentException	$[row].length != nCols
496	210	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	IllegalArgumentException	$ == 0
497	215	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	$ == 0
41028	219	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
41028	219	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
498	220	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	IllegalArgumentException	d[row].length != nCols
498	220	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	IllegalArgumentException	d[$].length != nCols
498	220	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	d[row].length != $
498	220	12	BigMatrixImpl.java	BigMatrixImpl	d	String[][]	0	IllegalArgumentException	$[row].length != nCols
41029	241	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
41029	241	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
499	268	12	BigMatrixImpl.java	add	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
499	268	12	BigMatrixImpl.java	add	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
499	268	12	BigMatrixImpl.java	add	m	BigMatrix	0	IllegalArgumentException	rowCount != $.getRowDimension()
499	268	12	BigMatrixImpl.java	add	m	BigMatrix	0	IllegalArgumentException	columnCount != $.getColumnDimension()
41030	272	12	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
41030	272	12	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
41031	275	16	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
41031	275	16	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
500	293	8	BigMatrixImpl.java	add	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
500	293	8	BigMatrixImpl.java	add	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
500	293	8	BigMatrixImpl.java	add	m	BigMatrixImpl	0	IllegalArgumentException	columnCount != $.getColumnDimension()
500	293	8	BigMatrixImpl.java	add	m	BigMatrixImpl	0	IllegalArgumentException	rowCount != $.getRowDimension()
41032	297	8	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
41032	297	8	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
41033	301	12	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
41033	301	12	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
501	321	12	BigMatrixImpl.java	subtract	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
501	321	12	BigMatrixImpl.java	subtract	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
501	321	12	BigMatrixImpl.java	subtract	m	BigMatrix	0	IllegalArgumentException	columnCount != $.getColumnDimension()
501	321	12	BigMatrixImpl.java	subtract	m	BigMatrix	0	IllegalArgumentException	rowCount != $.getRowDimension()
41034	325	12	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
41034	325	12	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
41035	328	16	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
41035	328	16	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
502	346	8	BigMatrixImpl.java	subtract	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
502	346	8	BigMatrixImpl.java	subtract	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
502	346	8	BigMatrixImpl.java	subtract	m	BigMatrixImpl	0	IllegalArgumentException	rowCount != $.getRowDimension()
502	346	8	BigMatrixImpl.java	subtract	m	BigMatrixImpl	0	IllegalArgumentException	columnCount != $.getColumnDimension()
41036	350	8	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
41036	350	8	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
41037	354	12	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
41037	354	12	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
41038	371	8	BigMatrixImpl.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
41038	371	8	BigMatrixImpl.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
41039	374	12	BigMatrixImpl.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
41039	374	12	BigMatrixImpl.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
41040	390	8	BigMatrixImpl.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
41040	390	8	BigMatrixImpl.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
41041	393	12	BigMatrixImpl.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
41041	393	12	BigMatrixImpl.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
503	411	12	BigMatrixImpl.java	multiply	THIS	BigMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getRowDimension()
503	411	12	BigMatrixImpl.java	multiply	m	BigMatrix	0	IllegalArgumentException	this.getColumnDimension() != $.getRowDimension()
41042	418	12	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
41042	418	12	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
41043	421	16	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
41043	421	16	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
41044	423	20	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
41044	423	20	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
504	441	8	BigMatrixImpl.java	multiply	THIS	BigMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getRowDimension()
504	441	8	BigMatrixImpl.java	multiply	m	BigMatrixImpl	0	IllegalArgumentException	this.getColumnDimension() != $.getRowDimension()
41045	448	8	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
41045	448	8	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
41046	451	12	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
41046	451	12	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
41047	453	16	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
41047	453	16	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
41048	496	8	BigMatrixImpl.java	getDataAsDoubleArray	i	int	0	NIL-FOR	$ < nRows
41048	496	8	BigMatrixImpl.java	getDataAsDoubleArray	nRows	int	0	NIL-FOR	i < $
41049	497	12	BigMatrixImpl.java	getDataAsDoubleArray	j	int	0	NIL-FOR	$ < nCols
41049	497	12	BigMatrixImpl.java	getDataAsDoubleArray	nCols	int	0	NIL-FOR	j < $
41050	561	8	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	col < $.getColumnDimension()
41050	561	8	BigMatrixImpl.java	getNorm	col	int	0	NIL-FOR	$ < this.getColumnDimension()
41051	563	12	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	row < $.getRowDimension()
41051	563	12	BigMatrixImpl.java	getNorm	row	int	0	NIL-FOR	$ < this.getRowDimension()
505	589	8	BigMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ > endRow
505	589	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	startRow > $
506	596	8	BigMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ > endColumn
506	596	8	BigMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	startColumn > $
41052	603	8	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
41052	603	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
507	627	8	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
507	627	8	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
507	627	8	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
508	628	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length == 0
508	628	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length == 0
41053	637	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	i < selectedRows.$.length
41053	637	12	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
41053	637	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
41054	640	16	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	j < selectedColumns.$.length
41054	640	16	BigMatrixImpl.java	getSubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
41054	640	16	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
509	690	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	IllegalArgumentException	$ == 0
510	693	8	BigMatrixImpl.java	setSubMatrix	nCols	int	0	IllegalArgumentException	$ == 0
41055	697	8	BigMatrixImpl.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
41055	697	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
511	698	12	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	IllegalArgumentException	subMatrix[r].length != nCols
511	698	12	BigMatrixImpl.java	setSubMatrix	r	int	0	IllegalArgumentException	subMatrix[$].length != nCols
511	698	12	BigMatrixImpl.java	setSubMatrix	nCols	int	0	IllegalArgumentException	subMatrix[r].length != $
511	698	12	BigMatrixImpl.java	setSubMatrix	subMatrix	BigDecimal[][]	0	IllegalArgumentException	$[r].length != nCols
512	703	8	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	1	DEF	$.data == null
513	704	12	BigMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
514	709	12	BigMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
41056	722	8	BigMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
41056	722	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
41057	758	8	BigMatrixImpl.java	getColumnMatrix	row	int	0	NIL-FOR	$ < nRows
41057	758	8	BigMatrixImpl.java	getColumnMatrix	nRows	int	0	NIL-FOR	row < $
41058	797	8	BigMatrixImpl.java	getRowAsDoubleArray	i	int	0	NIL-FOR	$<ncols
41058	797	8	BigMatrixImpl.java	getRowAsDoubleArray	ncols	int	0	NIL-FOR	i<$
41059	817	8	BigMatrixImpl.java	getColumn	i	int	0	NIL-FOR	$ < nRows
41059	817	8	BigMatrixImpl.java	getColumn	nRows	int	0	NIL-FOR	i < $
41060	838	8	BigMatrixImpl.java	getColumnAsDoubleArray	i	int	0	NIL-FOR	$<nrows
41060	838	8	BigMatrixImpl.java	getColumnAsDoubleArray	nrows	int	0	NIL-FOR	i<$
41061	899	8	BigMatrixImpl.java	transpose	row	int	0	NIL-FOR	$ < nRows
41061	899	8	BigMatrixImpl.java	transpose	nRows	int	0	NIL-FOR	row < $
41062	901	12	BigMatrixImpl.java	transpose	col	int	0	NIL-FOR	$ < nCols
41062	901	12	BigMatrixImpl.java	transpose	nCols	int	0	NIL-FOR	col < $
515	925	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
516	928	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	1	RET	$.isSingular()
41063	932	12	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
41063	932	12	BigMatrixImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < this.getRowDimension()
517	952	8	BigMatrixImpl.java	isSingular	THIS	BigMatrixImpl	1	RET	$.lu == null
518	991	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
41064	995	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
41064	995	8	BigMatrixImpl.java	getTrace	i	int	0	NIL-FOR	$ < this.getRowDimension()
519	1009	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	DEF	v.$.length != $.getColumnDimension()
519	1009	8	BigMatrixImpl.java	operate	v	BigDecimal[]	0	DEF	$.length != getColumnDimension()
41065	1017	8	BigMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
41065	1017	8	BigMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
41066	1019	12	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
41066	1019	12	BigMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
41067	1036	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
41067	1036	8	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < bd.length
41067	1036	8	BigMatrixImpl.java	operate	bd	BigDecimal[]	0	NIL-FOR	i < $.length
520	1051	8	BigMatrixImpl.java	preMultiply	THIS	BigMatrixImpl	0	DEF	v.$.length != nRows
520	1051	8	BigMatrixImpl.java	preMultiply	nRows	int	0	DEF	v.length != $
520	1051	8	BigMatrixImpl.java	preMultiply	v	BigDecimal[]	0	DEF	$.length != nRows
41068	1058	8	BigMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
41068	1058	8	BigMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
41069	1060	12	BigMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
41069	1060	12	BigMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
521	1081	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	DEF	b.$.length != nRows
521	1081	8	BigMatrixImpl.java	solve	nRows	int	0	DEF	b.length != $
521	1081	8	BigMatrixImpl.java	solve	b	BigDecimal[]	0	DEF	$.length != nRows
41070	1089	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRows
41070	1089	8	BigMatrixImpl.java	solve	nRows	int	0	NIL-FOR	row < $
41071	1108	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
41071	1108	8	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < bd.length
41071	1108	8	BigMatrixImpl.java	solve	bd	BigDecimal[]	0	NIL-FOR	i < $.length
522	1126	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	DEF	b.getRowDimension() != $.getRowDimension()
522	1126	8	BigMatrixImpl.java	solve	b	BigMatrix	0	DEF	$.getRowDimension() != getRowDimension()
523	1131	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
524	1134	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	SingularMatrixException	$.isSingular()
41072	1144	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRowB
41072	1144	8	BigMatrixImpl.java	solve	nRowB	int	0	NIL-FOR	row < $
41073	1146	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nColB
41073	1146	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	col < $
41074	1152	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nCol
41074	1152	8	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	col < $
41075	1153	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < nCol
41075	1153	12	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	i < $
41076	1156	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
41076	1156	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
41077	1163	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ >= 0
41078	1166	12	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
41078	1166	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
41079	1169	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < col
41079	1169	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	i < $
41080	1172	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
41080	1172	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
525	1204	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NonSquareMatrixException	$ != nCols
525	1204	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NonSquareMatrixException	nRows != $
41081	1211	8	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
41081	1211	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
41082	1217	8	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	$ < nCols
41082	1217	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	col < $
41083	1222	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < col
41083	1222	12	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	row < $
41084	1225	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < row
41084	1225	16	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	i < $
41085	1234	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
41085	1234	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
41086	1237	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < col
41086	1237	16	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	i < $
526	1243	16	BigMatrixImpl.java	luDecompose	sum	BigDecimal	0	DEF	$.abs().compareTo(largest) == 1
526	1243	16	BigMatrixImpl.java	luDecompose	largest	BigDecimal	0	DEF	sum.abs().compareTo($) == 1
527	1250	12	BigMatrixImpl.java	luDecompose	THIS	BigMatrixImpl	0	SingularMatrixException	$.lu[max][col].abs().compareTo(TOO_SMALL) <= 0
527	1250	12	BigMatrixImpl.java	luDecompose	max	int	0	SingularMatrixException	lu[$][col].abs().compareTo(TOO_SMALL) <= 0
527	1250	12	BigMatrixImpl.java	luDecompose	col	int	0	SingularMatrixException	lu[max][$].abs().compareTo(TOO_SMALL) <= 0
528	1256	12	BigMatrixImpl.java	luDecompose	max	int	0	DEF	$ != col
528	1256	12	BigMatrixImpl.java	luDecompose	col	int	0	DEF	max != $
41087	1258	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < nCols
41087	1258	16	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	i < $
41088	1271	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
41088	1271	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
529	1288	8	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	DEF	$.data != null
41089	1289	12	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	i < $.data.$.length
41089	1289	12	BigMatrixImpl.java	toString	i	int	0	NIL-FOR	$ < data.length
530	1290	16	BigMatrixImpl.java	toString	i	int	0	DEF	$ > 0
41090	1294	16	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	j < $.data[0].length
41090	1294	16	BigMatrixImpl.java	toString	j	int	0	NIL-FOR	$ < data[0].length
531	1295	20	BigMatrixImpl.java	toString	j	int	0	DEF	$ > 0
532	1318	8	BigMatrixImpl.java	equals	THIS	BigMatrixImpl	0	RET	object == $
532	1318	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ == this
533	1321	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ instanceof BigMatrixImpl == false
534	1327	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getColumnDimension() != nCols
534	1327	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getRowDimension() != nRows
534	1327	8	BigMatrixImpl.java	equals	nRows	int	0	RET	m.getRowDimension() != $
534	1327	8	BigMatrixImpl.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
41091	1330	8	BigMatrixImpl.java	equals	row	int	0	NIL-FOR	$ < nRows
41091	1330	8	BigMatrixImpl.java	equals	nRows	int	0	NIL-FOR	row < $
41092	1332	12	BigMatrixImpl.java	equals	col	int	0	NIL-FOR	$ < nCols
41092	1332	12	BigMatrixImpl.java	equals	nCols	int	0	NIL-FOR	col < $
535	1333	16	BigMatrixImpl.java	equals	col	int	0	RET	dataRow[$].equals(m.getEntry(row, $))
535	1333	16	BigMatrixImpl.java	equals	dataRow	BigDecimal[]	0	RET	$[col].equals(m.getEntry(row, col))
535	1333	16	BigMatrixImpl.java	equals	row	int	0	RET	dataRow[col].equals(m.getEntry($, col))
535	1333	16	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	dataRow[col].equals($.getEntry(row, col))
41093	1353	8	BigMatrixImpl.java	hashCode	row	int	0	NIL-FOR	$ < nRows
41093	1353	8	BigMatrixImpl.java	hashCode	nRows	int	0	NIL-FOR	row < $
41094	1355	12	BigMatrixImpl.java	hashCode	col	int	0	NIL-FOR	$ < nCols
41094	1355	12	BigMatrixImpl.java	hashCode	nCols	int	0	NIL-FOR	col < $
536	1393	8	BigMatrixImpl.java	getLUMatrix	THIS	BigMatrixImpl	0	DEF	$.lu == null
41095	1428	8	BigMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
41095	1428	8	BigMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
41096	1457	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
41096	1457	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
41097	1460	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
41097	1460	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
41098	1477	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
41098	1477	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
41099	1480	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
41099	1480	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
537	1493	8	BigMatrixImpl.java	checkRowIndex	THIS	BigMatrixImpl	0	MatrixIndexException	row >= $.getRowDimension()
537	1493	8	BigMatrixImpl.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= getRowDimension()
537	1493	8	BigMatrixImpl.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
538	1507	8	BigMatrixImpl.java	checkColumnIndex	THIS	BigMatrixImpl	0	MatrixIndexException	column >= $.getColumnDimension()
538	1507	8	BigMatrixImpl.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
538	1507	8	BigMatrixImpl.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= getColumnDimension()
397	78	8	BinomialDistributionImpl.java	setNumberOfTrials	trials	int	0	IllegalArgumentException	$ < 0
398	91	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ > 1.0
398	91	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ < 0.0
399	133	8	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
400	135	15	BinomialDistributionImpl.java	cumulativeProbability	THIS	BinomialDistributionImpl	1	DEF	x >= $.getNumberOfTrials()
400	135	15	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= getNumberOfTrials()
401	155	8	BinomialDistributionImpl.java	probability	THIS	BinomialDistributionImpl	1	DEF	x > $.getNumberOfTrials()
401	155	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ > getNumberOfTrials()
401	155	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ < 0
402	183	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
403	186	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
42036	89	8	BisectionSolver.java	solve	THIS	BisectionSolver	0	NIL-WHILE	i < $.maximalIterationCount
42036	89	8	BisectionSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1471	94	12	BisectionSolver.java	solve	fm	double	1	DEF	$ * fmin > 0.0
1471	94	12	BisectionSolver.java	solve	fmin	double	1	DEF	fm * $ > 0.0
1472	102	12	BisectionSolver.java	solve	THIS	BisectionSolver	0	RET	Math.abs(max - min) <= $.absoluteAccuracy
1472	102	12	BisectionSolver.java	solve	min	double	0	RET	Math.abs(max - $) <= absoluteAccuracy
1472	102	12	BisectionSolver.java	solve	max	double	0	RET	Math.abs($ - min) <= absoluteAccuracy
811	96	8	BrentOptimizer.java	localMin	THIS	BrentOptimizer	0	DEF	goalType == $.GoalType.MAXIMIZE
811	96	8	BrentOptimizer.java	localMin	goalType	GoalType	0	DEF	$ == GoalType.MAXIMIZE
41531	103	8	BrentOptimizer.java	localMin	THIS	BrentOptimizer	0	NIL-WHILE	count < $.maximalIterationCount
41531	103	8	BrentOptimizer.java	localMin	count	int	0	NIL-WHILE	$ < maximalIterationCount
812	109	12	BrentOptimizer.java	localMin	m	double	1	DEF	Math.abs(x - $) > t2 - 0.5 * (b - a)
812	109	12	BrentOptimizer.java	localMin	t2	double	1	DEF	Math.abs(x - m) > $ - 0.5 * (b - a)
812	109	12	BrentOptimizer.java	localMin	x	double	1	DEF	Math.abs($ - m) > t2 - 0.5 * (b - a)
812	109	12	BrentOptimizer.java	localMin	a	double	1	DEF	Math.abs(x - m) > t2 - 0.5 * (b - $)
812	109	12	BrentOptimizer.java	localMin	b	double	1	DEF	Math.abs(x - m) > t2 - 0.5 * ($ - a)
813	116	16	BrentOptimizer.java	localMin	tol	double	0	DEF	Math.abs(e) > $
813	116	16	BrentOptimizer.java	localMin	e	double	0	DEF	Math.abs($) > tol
814	122	20	BrentOptimizer.java	localMin	q	double	1	DEF	$ > 0
815	132	16	BrentOptimizer.java	localMin	p	double	1	DEF	$ < q * (b - x)
815	132	16	BrentOptimizer.java	localMin	p	double	1	DEF	Math.abs($) < Math.abs(0.5 * q * r)
815	132	16	BrentOptimizer.java	localMin	p	double	1	DEF	$ < q * (a - x)
815	132	16	BrentOptimizer.java	localMin	q	double	1	DEF	p < $ * (b - x)
815	132	16	BrentOptimizer.java	localMin	q	double	1	DEF	Math.abs(p) < Math.abs(0.5 * $ * r)
815	132	16	BrentOptimizer.java	localMin	q	double	1	DEF	p < $ * (a - x)
815	132	16	BrentOptimizer.java	localMin	r	double	1	DEF	Math.abs(p) < Math.abs(0.5 * q * $)
815	132	16	BrentOptimizer.java	localMin	x	double	1	DEF	p < q * (b - $)
815	132	16	BrentOptimizer.java	localMin	x	double	1	DEF	p < q * (a - $)
815	132	16	BrentOptimizer.java	localMin	a	double	1	DEF	p < q * ($ - x)
815	132	16	BrentOptimizer.java	localMin	b	double	1	DEF	p < q * ($ - x)
816	138	20	BrentOptimizer.java	localMin	u	double	0	DEF	(b - $) < t2
816	138	20	BrentOptimizer.java	localMin	u	double	0	DEF	($ - a) < t2
816	138	20	BrentOptimizer.java	localMin	t2	double	0	DEF	(b - u) < $
816	138	20	BrentOptimizer.java	localMin	t2	double	0	DEF	(u - a) < $
816	138	20	BrentOptimizer.java	localMin	a	double	0	DEF	(u - $) < t2
816	138	20	BrentOptimizer.java	localMin	b	double	0	DEF	($ - u) < t2
817	149	16	BrentOptimizer.java	localMin	THIS	BrentOptimizer	0	DEF	goalType == $.GoalType.MAXIMIZE
817	149	16	BrentOptimizer.java	localMin	goalType	GoalType	0	DEF	$ == GoalType.MAXIMIZE
818	154	16	BrentOptimizer.java	localMin	fu	double	1	DEF	$ <= fx
818	154	16	BrentOptimizer.java	localMin	fx	double	1	DEF	fu <= $
819	155	20	BrentOptimizer.java	localMin	u	double	1	DEF	$ < x
819	155	20	BrentOptimizer.java	localMin	x	double	1	DEF	u < $
820	167	20	BrentOptimizer.java	localMin	u	double	1	DEF	$ < x
820	167	20	BrentOptimizer.java	localMin	x	double	1	DEF	u < $
821	172	20	BrentOptimizer.java	localMin	fu	double	1	DEF	$ <= fw
821	172	20	BrentOptimizer.java	localMin	x	double	1	DEF	w == $
821	172	20	BrentOptimizer.java	localMin	w	double	1	DEF	$ == x
821	172	20	BrentOptimizer.java	localMin	fw	double	1	DEF	fu <= $
822	177	27	BrentOptimizer.java	localMin	fu	double	0	DEF	$ <= fv
822	177	27	BrentOptimizer.java	localMin	x	double	0	DEF	v == $
822	177	27	BrentOptimizer.java	localMin	v	double	0	DEF	$ == x
822	177	27	BrentOptimizer.java	localMin	v	double	0	DEF	$ == w
822	177	27	BrentOptimizer.java	localMin	w	double	0	DEF	v == $
822	177	27	BrentOptimizer.java	localMin	fv	double	0	DEF	fu <= $
1488	102	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yInitial) <= $.functionValueAccuracy
1488	102	8	BrentSolver.java	solve	yInitial	double	0	RET	Math.abs($) <= functionValueAccuracy
1489	109	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMin) <= $.functionValueAccuracy
1489	109	8	BrentSolver.java	solve	yMin	double	0	RET	Math.abs($) <= functionValueAccuracy
1490	115	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMin < 0
1490	115	8	BrentSolver.java	solve	yMin	double	0	RET	yInitial * $ < 0
1491	121	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMax) <= $.functionValueAccuracy
1491	121	8	BrentSolver.java	solve	yMax	double	0	RET	Math.abs($) <= functionValueAccuracy
1492	127	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMax < 0
1492	127	8	BrentSolver.java	solve	yMax	double	0	RET	yInitial * $ < 0
1493	168	8	BrentSolver.java	solve	sign	double	1	DEF	$ > 0
1494	170	12	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	Math.abs(yMin) <= $.functionValueAccuracy
1494	170	12	BrentSolver.java	solve	yMin	double	1	DEF	Math.abs($) <= functionValueAccuracy
1495	173	19	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	Math.abs(yMax) <= $.functionValueAccuracy
1495	173	19	BrentSolver.java	solve	yMax	double	1	DEF	Math.abs($) <= functionValueAccuracy
1496	183	15	BrentSolver.java	solve	sign	double	1	DEF	$ < 0
1497	188	12	BrentSolver.java	solve	yMin	double	1	DEF	$ == 0.0
42045	225	8	BrentSolver.java	solve	THIS	BrentSolver	0	NIL-WHILE	i < $.maximalIterationCount
42045	225	8	BrentSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1498	226	12	BrentSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
1498	226	12	BrentSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
1499	235	12	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
1499	235	12	BrentSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
1500	245	12	BrentSolver.java	solve	dx	double	0	RET	Math.abs($) <= tolerance
1500	245	12	BrentSolver.java	solve	tolerance	double	0	RET	Math.abs(dx) <= $
1501	249	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(oldDelta) < $
1501	249	12	BrentSolver.java	solve	oldDelta	double	1	DEF	Math.abs($) < tolerance
1501	249	12	BrentSolver.java	solve	y0	double	1	DEF	Math.abs($) <= Math.abs(y1)
1501	249	12	BrentSolver.java	solve	y1	double	1	DEF	Math.abs(y0) <= Math.abs($)
1502	261	16	BrentSolver.java	solve	x0	double	1	DEF	$ == x2
1502	261	16	BrentSolver.java	solve	x2	double	1	DEF	x0 == $
1503	272	16	BrentSolver.java	solve	p	double	1	DEF	$ > 0.0
1504	277	16	BrentSolver.java	solve	p	double	1	DEF	$ >= Math.abs(0.5 * oldDelta * p1)
1504	277	16	BrentSolver.java	solve	p	double	1	DEF	2.0 * $ >= 1.5 * dx * p1 - Math.abs(tolerance * p1)
1504	277	16	BrentSolver.java	solve	p1	double	1	DEF	p >= Math.abs(0.5 * oldDelta * $)
1504	277	16	BrentSolver.java	solve	p1	double	1	DEF	2.0 * p >= 1.5 * dx * $ - Math.abs(tolerance * $)
1504	277	16	BrentSolver.java	solve	dx	double	1	DEF	2.0 * p >= 1.5 * $ * p1 - Math.abs(tolerance * p1)
1504	277	16	BrentSolver.java	solve	tolerance	double	1	DEF	2.0 * p >= 1.5 * dx * p1 - Math.abs($ * p1)
1504	277	16	BrentSolver.java	solve	oldDelta	double	1	DEF	p >= Math.abs(0.5 * $ * p1)
1505	293	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(delta) > $
1505	293	12	BrentSolver.java	solve	delta	double	1	DEF	Math.abs($) > tolerance
1506	295	19	BrentSolver.java	solve	dx	double	1	DEF	$ > 0.0
1507	297	19	BrentSolver.java	solve	dx	double	0	DEF	$ <= 0.0
1508	301	12	BrentSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
1508	301	12	BrentSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
428	100	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ > 1.0
428	100	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ < 0.0
429	103	15	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
430	105	16	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
431	127	8	CauchyDistributionImpl.java	setScale	s	double	0	IllegalArgumentException	$ <= 0.0
432	147	8	CauchyDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
433	169	8	CauchyDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
434	190	8	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
435	192	15	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
1042	65	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	expected.$.length < 2
1042	65	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	expected.$.length != observed.$.length
1042	65	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	IllegalArgumentException	$.length < 2
1042	65	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	IllegalArgumentException	$.length != observed.length
1042	65	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	IllegalArgumentException	expected.length != $.length
1043	69	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isPositive(expected)
1043	69	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(observed)
1043	69	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	IllegalArgumentException	isPositive($)
1043	69	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	IllegalArgumentException	isNonNegative($)
41676	75	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
41676	75	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
41676	75	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
1044	81	8	ChiSquareTestImpl.java	chiSquare	sumExpected	double	0	DEF	Math.abs($ - sumObserved) > 10E-6
1044	81	8	ChiSquareTestImpl.java	chiSquare	sumObserved	double	0	DEF	Math.abs(sumExpected - $) > 10E-6
41677	87	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
41677	87	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
41677	87	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
1045	88	12	ChiSquareTestImpl.java	chiSquare	rescale	boolean	1	DEF	$
1046	134	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ > 0.5
1046	134	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ <= 0
41678	156	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
41678	156	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
41679	157	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
41679	157	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
41680	167	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
41680	167	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
41681	168	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
41681	168	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
1047	201	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ <= 0
1047	201	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ > 0.5
1048	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	observed1.$.length != observed2.$.length
1048	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	observed1.$.length < 2
1048	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	IllegalArgumentException	$.length != observed2.length
1048	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	IllegalArgumentException	$.length < 2
1048	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	IllegalArgumentException	observed1.length != $.length
1049	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(observed1)
1049	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(observed2)
1049	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	IllegalArgumentException	isNonNegative($)
1049	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	IllegalArgumentException	isNonNegative($)
41682	232	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
41682	232	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
41682	232	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
1050	237	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum1	long	0	IllegalArgumentException	$ * countSum2 == 0
1050	237	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum2	long	0	IllegalArgumentException	countSum1 * $ == 0
1051	243	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
41683	251	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
41683	251	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
41683	251	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
1052	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	IllegalArgumentException	observed1[$] == 0
1052	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	IllegalArgumentException	observed2[$] == 0
1052	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	1	IllegalArgumentException	$[i] == 0
1052	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	1	IllegalArgumentException	$[i] == 0
1053	258	16	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
1054	296	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	IllegalArgumentException	$ > 0.5
1054	296	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	IllegalArgumentException	$ <= 0
1055	313	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	in.$.length < 2
1055	313	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	$.length < 2
1056	317	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	in[0].length < 2
1056	317	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	$[0].length < 2
1057	321	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isRectangular(in)
1057	321	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	isRectangular($)
1058	325	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(in)
1058	325	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	isNonNegative($)
41684	342	8	ChiSquareTestImpl.java	isRectangular	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
41684	342	8	ChiSquareTestImpl.java	isRectangular	i	int	0	NIL-FOR	$ < in.length
41684	342	8	ChiSquareTestImpl.java	isRectangular	in	long[][]	0	NIL-FOR	i < $.length
1059	343	12	ChiSquareTestImpl.java	isRectangular	THIS	ChiSquareTestImpl	0	RET	in[i].length != in[0].length
1059	343	12	ChiSquareTestImpl.java	isRectangular	i	int	0	RET	in[$].length != in[0].length
1059	343	12	ChiSquareTestImpl.java	isRectangular	in	long[][]	0	RET	$[i].length != $[0].length
41685	359	8	ChiSquareTestImpl.java	isPositive	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
41685	359	8	ChiSquareTestImpl.java	isPositive	i	int	0	NIL-FOR	$ < in.length
41685	359	8	ChiSquareTestImpl.java	isPositive	in	double[]	0	NIL-FOR	i < $.length
1060	360	12	ChiSquareTestImpl.java	isPositive	i	int	0	RET	in[$] <= 0
1060	360	12	ChiSquareTestImpl.java	isPositive	in	double[]	0	RET	$[i] <= 0
41686	376	8	ChiSquareTestImpl.java	isNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
41686	376	8	ChiSquareTestImpl.java	isNonNegative	i	int	0	NIL-FOR	$ < in.length
41686	376	8	ChiSquareTestImpl.java	isNonNegative	in	long[]	0	NIL-FOR	i < $.length
1061	377	12	ChiSquareTestImpl.java	isNonNegative	i	int	0	RET	in[$] < 0
1061	377	12	ChiSquareTestImpl.java	isNonNegative	in	long[]	0	RET	$[i] < 0
41687	393	8	ChiSquareTestImpl.java	isNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
41687	393	8	ChiSquareTestImpl.java	isNonNegative	i	int	0	NIL-FOR	$ < in.length
41687	393	8	ChiSquareTestImpl.java	isNonNegative	in	long[][]	0	NIL-FOR	i < $.length
41688	394	12	ChiSquareTestImpl.java	isNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	j < in[i].length
41688	394	12	ChiSquareTestImpl.java	isNonNegative	j	int	0	NIL-FOR	$ < in[i].length
41688	394	12	ChiSquareTestImpl.java	isNonNegative	i	int	0	NIL-FOR	j < in[$].length
41688	394	12	ChiSquareTestImpl.java	isNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
1062	395	16	ChiSquareTestImpl.java	isNonNegative	j	int	0	RET	in[i][$] < 0
1062	395	16	ChiSquareTestImpl.java	isNonNegative	i	int	0	RET	in[$][j] < 0
1062	395	16	ChiSquareTestImpl.java	isNonNegative	in	long[][]	0	RET	$[i][j] < 0
424	111	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
425	114	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
426	150	8	ChiSquaredDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
427	176	8	ChiSquaredDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
691	108	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
41448	119	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
41448	119	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
692	124	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	THIS	CholeskyDecompositionImpl	0	NotPositiveDefiniteMatrixException	$.lTData[i][i] < absolutePositivityThreshold
692	124	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NotPositiveDefiniteMatrixException	lTData[$][$] < absolutePositivityThreshold
692	124	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	absolutePositivityThreshold	double	0	NotPositiveDefiniteMatrixException	lTData[i][i] < $
41449	129	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	j	int	0	NIL-FOR	$ < order
41449	129	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	j < $
693	135	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lIJ	double	0	NotSymmetricMatrixException	Math.abs($ - lJI) > maxDelta
693	135	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lJI	double	0	NotSymmetricMatrixException	Math.abs(lIJ - $) > maxDelta
693	135	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	maxDelta	double	0	NotSymmetricMatrixException	Math.abs(lIJ - lJI) > $
41450	143	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
41450	143	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
41451	149	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	q	int	0	NIL-FOR	$ > i
41451	149	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	q > $
41452	152	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	p	int	0	NIL-FOR	$ < order
41452	152	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	p < $
694	163	8	CholeskyDecompositionImpl.java	getL	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedL == null
695	172	8	CholeskyDecompositionImpl.java	getLT	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedLT == null
41453	184	8	CholeskyDecompositionImpl.java	getDeterminant	THIS	CholeskyDecompositionImpl	0	NIL-FOR	i < $.lTData.$.length
41453	184	8	CholeskyDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
41978	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedState	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41978	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
1382	132	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	RET	$.states.isEmpty()
1383	139	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.initialized
1384	156	16	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.evaluateStep(interpolator)
1384	156	16	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	0	DEF	state.evaluateStep($)
1385	157	20	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	1	DEF	$.first == null
1386	160	24	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	1	DEF	$.isForward()
1387	161	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() < $.first.getEventTime()
1388	165	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() > $.first.getEventTime()
1389	220	12	CombinedEventsManager.java	stop	THIS	CombinedEventsManager	0	RET	$.state.stop()
1390	241	16	CombinedEventsManager.java	reset	THIS	CombinedEventsManager	0	DEF	$.state.reset(t, y)
1390	241	16	CombinedEventsManager.java	reset	t	double	0	DEF	state.reset($, y)
1390	241	16	CombinedEventsManager.java	reset	y	double[]	0	DEF	state.reset(t, $)
228	96	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN()
229	100	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
230	104	8	Complex.java	abs	THIS	Complex	1	RET	Math.abs($.real) < Math.abs($.imaginary)
231	105	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
232	111	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
233	156	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN()
234	198	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN()
234	198	8	Complex.java	divide	rhs	Complex	0	RET	$.isNaN()
235	204	8	Complex.java	divide	c	double	0	RET	$ == 0.0
235	204	8	Complex.java	divide	d	double	0	RET	$ == 0.0
236	208	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
236	208	8	Complex.java	divide	rhs	Complex	0	RET	$.isInfinite()
237	212	8	Complex.java	divide	c	double	1	RET	Math.abs($) < Math.abs(d)
237	212	8	Complex.java	divide	d	double	1	RET	Math.abs(c) < Math.abs($)
238	213	12	Complex.java	divide	d	double	0	RET	$ == 0.0
239	221	12	Complex.java	divide	c	double	0	RET	$ == 0.0
240	253	8	Complex.java	equals	THIS	Complex	1	DEF	$ == other
240	253	8	Complex.java	equals	other	Object	1	DEF	this == $
241	255	15	Complex.java	equals	other	Object	1	DEF	$ == null
242	260	16	Complex.java	equals	rhs	Complex	1	DEF	$.isNaN()
243	283	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN()
244	361	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN()
244	361	8	Complex.java	multiply	rhs	Complex	0	RET	$.isNaN()
245	364	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
245	364	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
245	364	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.imaginary)
245	364	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.real)
245	364	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.imaginary)
245	364	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.real)
246	382	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN()
247	408	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN()
247	408	8	Complex.java	subtract	rhs	Complex	0	RET	$.isNaN()
248	431	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN()
249	454	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN()
250	477	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN()
251	512	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN()
252	546	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN()
253	581	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN()
254	619	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN()
255	645	8	Complex.java	pow	x	Complex	0	NullPointerException	$ == null
256	678	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN()
257	712	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN()
258	754	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN()
259	758	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
259	758	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
260	763	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
261	820	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN()
262	858	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN()
263	909	8	Complex.java	nthRoot	n	int	0	DEF	$ <= 0
264	917	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN()
265	922	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
40934	934	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
40934	934	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
217	157	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
218	161	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
218	161	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
219	189	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
220	191	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
221	254	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
222	277	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
223	313	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
224	321	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	$.parseFixedstring(source, $.getImaginaryCharacter(), pos)
224	321	8	ComplexFormat.java	parse	source	String	0	RET	parseFixedstring($, getImaginaryCharacter(), pos)
224	321	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, getImaginaryCharacter(), $)
225	349	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	IllegalArgumentException	$ == null
225	349	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	IllegalArgumentException	$.length() == 0
226	363	8	ComplexFormat.java	setImaginaryFormat	imaginaryFormat	NumberFormat	0	IllegalArgumentException	$ == null
227	377	8	ComplexFormat.java	setRealFormat	realFormat	NumberFormat	0	IllegalArgumentException	$ == null
216	61	8	ComplexUtils.java	polar2Complex	r	double	0	IllegalArgumentException	$ < 0
56	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
56	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
40914	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
40914	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
40914	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
57	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
57	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
58	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
58	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
59	122	12	CompositeFormat.java	parseNumber	sb	StringBuffer	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
59	122	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
59	122	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
59	122	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
60	148	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
60	148	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
40915	153	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
40915	153	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
40915	153	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
61	155	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
62	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
62	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
62	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
62	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
62	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
62	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
62	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
62	176	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
63	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
63	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
40909	140	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
40909	140	8	ContinuedFraction.java	evaluate	relativeError	double	0	NIL-WHILE	$ > epsilon
40909	140	8	ContinuedFraction.java	evaluate	epsilon	double	0	NIL-WHILE	relativeError > $
40909	140	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
1	146	12	ContinuedFraction.java	evaluate	p2	double	0	ConvergenceException	Double.isInfinite($)
1	146	12	ContinuedFraction.java	evaluate	q2	double	0	ConvergenceException	Double.isInfinite($)
2	148	16	ContinuedFraction.java	evaluate	a	double	1	DEF	$ != 0.0
3	151	23	ContinuedFraction.java	evaluate	b	double	1	DEF	$ != 0
4	172	8	ContinuedFraction.java	evaluate	n	int	0	MaxIterationsExceededException	$ >= maxIterations
4	172	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxIterationsExceededException	n >= $
1400	108	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
1400	108	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
1401	112	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
1402	117	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	IllegalArgumentException	$.getInterpolatedState().length != model.getInterpolatedState().length
1402	117	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	IllegalArgumentException	getInterpolatedState().length != $.getInterpolatedState().length
1403	121	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	IllegalArgumentException	$.forward ^ model.$.forward
1403	121	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	IllegalArgumentException	forward ^ $.forward
1404	130	6	ContinuousOutputModel.java	append	step	double	0	IllegalArgumentException	Math.abs(gap) > 1.0e-3 * Math.abs($)
1404	130	6	ContinuousOutputModel.java	append	gap	double	0	IllegalArgumentException	Math.abs($) > 1.0e-3 * Math.abs(step)
1405	178	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
1406	185	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
1407	244	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
1407	244	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
1407	244	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
1408	249	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
1408	249	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
1408	249	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
42016	256	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
42016	256	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
1409	261	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
1410	264	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
1411	278	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs($ - tMin) < 1e-6
1411	278	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs(tMax - $) < 1e-6
1411	278	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	Math.abs(tMed - $) < 1e-6
1411	278	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	Math.abs($ - tMed) < 1e-6
1412	301	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
1412	301	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
1413	303	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
1413	303	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
42017	311	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
42017	311	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
42017	311	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
42017	311	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
1414	339	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
1415	340	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
1415	340	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
1416	342	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
1416	342	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
1417	348	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
1417	348	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
1418	350	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
1418	350	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
1127	90	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
1127	90	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
1127	90	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
41717	119	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
41717	119	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
41718	184	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
41718	184	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
41719	189	8	CorrelatedRandomVectorGenerator.java	decompose	loop	boolean	0	NIL-FOR	$
41720	193	12	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
41720	193	12	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
1128	196	16	CorrelatedRandomVectorGenerator.java	decompose	ii	int	0	DEF	c[$][$] > c[isi][isi]
1128	196	16	CorrelatedRandomVectorGenerator.java	decompose	isi	int	0	DEF	c[ii][ii] > c[$][$]
1128	196	16	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
1129	203	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	DEF	swap[$.rank] != $.rank
1129	203	12	CorrelatedRandomVectorGenerator.java	decompose	swap	int[]	0	DEF	$[rank] != rank
1130	211	12	CorrelatedRandomVectorGenerator.java	decompose	ir	int	1	NotPositiveDefiniteMatrixException	c[$][$] < small
1130	211	12	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	1	NotPositiveDefiniteMatrixException	$[ir][ir] < small
1130	211	12	CorrelatedRandomVectorGenerator.java	decompose	small	double	1	NotPositiveDefiniteMatrixException	c[ir][ir] < $
1131	213	16	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NotPositiveDefiniteMatrixException	$.rank == 0
41721	218	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
41721	218	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
1132	219	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NotPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1132	219	20	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	NotPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1132	219	20	CorrelatedRandomVectorGenerator.java	decompose	index	int[]	0	NotPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1132	219	20	CorrelatedRandomVectorGenerator.java	decompose	small	double	0	NotPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
41722	237	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
41722	237	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
41723	242	20	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < i
41723	242	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	j < $
41724	259	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
41724	259	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
41725	260	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
41725	260	12	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < rank
41726	274	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.rank
41726	274	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < rank
41727	280	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
41727	280	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
41727	280	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
41728	282	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
41728	282	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < rank
41698	163	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
41698	163	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
41699	164	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
41699	164	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
1086	224	8	Covariance.java	covariance	THIS	Covariance	1	DEF	length == yArray.$.length
1086	224	8	Covariance.java	covariance	length	int	1	DEF	$ > 1
1086	224	8	Covariance.java	covariance	length	int	1	DEF	$ == yArray.length
1086	224	8	Covariance.java	covariance	yArray	double[]	1	DEF	length == $.length
41700	227	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
41700	227	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
1087	267	8	Covariance.java	checkSufficientData	nRows	int	0	DEF	$ < 2
1087	267	8	Covariance.java	checkSufficientData	nCols	int	0	DEF	$ < 2
153	46	8	DefaultTransformer.java	transform	o	Object	0	MathException	$ == null
154	50	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
599	156	8	DenseRealMatrix.java	DenseRealMatrix	copyArray	boolean	1	DEF	$
41205	165	8	DenseRealMatrix.java	DenseRealMatrix	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41205	165	8	DenseRealMatrix.java	DenseRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
41206	167	12	DenseRealMatrix.java	DenseRealMatrix	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41206	167	12	DenseRealMatrix.java	DenseRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
600	168	16	DenseRealMatrix.java	DenseRealMatrix	THIS	DenseRealMatrix	0	DEF	blockData[index].length != iHeight * $.blockWidth(jBlock)
600	168	16	DenseRealMatrix.java	DenseRealMatrix	jBlock	int	0	DEF	blockData[index].length != iHeight * blockWidth($)
600	168	16	DenseRealMatrix.java	DenseRealMatrix	iHeight	int	0	DEF	blockData[index].length != $ * blockWidth(jBlock)
600	168	16	DenseRealMatrix.java	DenseRealMatrix	index	int	0	DEF	blockData[$].length != iHeight * blockWidth(jBlock)
600	168	16	DenseRealMatrix.java	DenseRealMatrix	blockData	double[][]	0	DEF	$[index].length != iHeight * blockWidth(jBlock)
601	173	16	DenseRealMatrix.java	DenseRealMatrix	copyArray	boolean	0	DEF	$
41207	212	8	DenseRealMatrix.java	toBlocksLayout	THIS	DenseRealMatrix	0	NIL-FOR	i < rawData.$.length
41207	212	8	DenseRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
41207	212	8	DenseRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
602	214	12	DenseRealMatrix.java	toBlocksLayout	length	int	0	DEF	$ != columns
602	214	12	DenseRealMatrix.java	toBlocksLayout	columns	int	0	DEF	length != $
41208	223	8	DenseRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
41208	223	8	DenseRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
41209	227	12	DenseRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
41209	227	12	DenseRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
41210	237	16	DenseRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
41210	237	16	DenseRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
41211	266	8	DenseRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
41211	266	8	DenseRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
41212	270	12	DenseRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
41212	270	12	DenseRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
41213	297	8	DenseRealMatrix.java	copy	THIS	DenseRealMatrix	0	NIL-FOR	i < $.blocks.$.length
41213	297	8	DenseRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
41214	320	12	DenseRealMatrix.java	add	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
41214	320	12	DenseRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
41214	320	12	DenseRealMatrix.java	add	out	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41215	321	16	DenseRealMatrix.java	add	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
41215	321	16	DenseRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
41215	321	16	DenseRealMatrix.java	add	out	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41216	330	20	DenseRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
41216	330	20	DenseRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
41217	331	24	DenseRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
41217	331	24	DenseRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
41218	363	8	DenseRealMatrix.java	add	THIS	DenseRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
41218	363	8	DenseRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
41218	363	8	DenseRealMatrix.java	add	out	DenseRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
41219	367	12	DenseRealMatrix.java	add	THIS	DenseRealMatrix	0	NIL-FOR	k < outBlock.$.length
41219	367	12	DenseRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
41219	367	12	DenseRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
41220	391	12	DenseRealMatrix.java	subtract	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
41220	391	12	DenseRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
41220	391	12	DenseRealMatrix.java	subtract	out	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41221	392	16	DenseRealMatrix.java	subtract	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
41221	392	16	DenseRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
41221	392	16	DenseRealMatrix.java	subtract	out	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41222	401	20	DenseRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
41222	401	20	DenseRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
41223	402	24	DenseRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
41223	402	24	DenseRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
41224	434	8	DenseRealMatrix.java	subtract	THIS	DenseRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
41224	434	8	DenseRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
41224	434	8	DenseRealMatrix.java	subtract	out	DenseRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
41225	438	12	DenseRealMatrix.java	subtract	THIS	DenseRealMatrix	0	NIL-FOR	k < outBlock.$.length
41225	438	12	DenseRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
41225	438	12	DenseRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
41226	455	8	DenseRealMatrix.java	scalarAdd	THIS	DenseRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
41226	455	8	DenseRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
41226	455	8	DenseRealMatrix.java	scalarAdd	out	DenseRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
41227	458	12	DenseRealMatrix.java	scalarAdd	THIS	DenseRealMatrix	0	NIL-FOR	k < outBlock.$.length
41227	458	12	DenseRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
41227	458	12	DenseRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
41228	475	8	DenseRealMatrix.java	scalarMultiply	THIS	DenseRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
41228	475	8	DenseRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
41228	475	8	DenseRealMatrix.java	scalarMultiply	out	DenseRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
41229	478	12	DenseRealMatrix.java	scalarMultiply	THIS	DenseRealMatrix	0	NIL-FOR	k < outBlock.$.length
41229	478	12	DenseRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
41229	478	12	DenseRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
41230	502	12	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
41230	502	12	DenseRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
41230	502	12	DenseRealMatrix.java	multiply	out	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41231	507	16	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
41231	507	16	DenseRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
41231	507	16	DenseRealMatrix.java	multiply	out	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41232	516	20	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
41232	516	20	DenseRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
41233	520	24	DenseRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
41233	520	24	DenseRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
41234	523	28	DenseRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
41234	523	28	DenseRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
41235	525	32	DenseRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
41235	525	32	DenseRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
41236	561	8	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
41236	561	8	DenseRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
41236	561	8	DenseRealMatrix.java	multiply	out	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41237	566	12	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
41237	566	12	DenseRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
41237	566	12	DenseRealMatrix.java	multiply	out	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41238	576	16	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
41238	576	16	DenseRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
41239	580	20	DenseRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
41239	580	20	DenseRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
41240	583	24	DenseRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
41240	583	24	DenseRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
41241	587	28	DenseRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
41241	587	28	DenseRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
41242	595	28	DenseRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
41242	595	28	DenseRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
41243	621	8	DenseRealMatrix.java	getData	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41243	621	8	DenseRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
41244	626	12	DenseRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
41244	626	12	DenseRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
41245	630	16	DenseRealMatrix.java	getData	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
41245	630	16	DenseRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
41246	649	8	DenseRealMatrix.java	getNorm	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41246	649	8	DenseRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
41247	652	12	DenseRealMatrix.java	getNorm	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41247	652	12	DenseRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
41248	655	16	DenseRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
41248	655	16	DenseRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
41249	657	20	DenseRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
41249	657	20	DenseRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
41250	663	12	DenseRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
41250	663	12	DenseRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
41251	674	8	DenseRealMatrix.java	getFrobeniusNorm	THIS	DenseRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
41251	674	8	DenseRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
41252	702	8	DenseRealMatrix.java	getSubMatrix	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
41252	702	8	DenseRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
41252	702	8	DenseRealMatrix.java	getSubMatrix	out	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41253	704	12	DenseRealMatrix.java	getSubMatrix	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
41253	704	12	DenseRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
41253	704	12	DenseRealMatrix.java	getSubMatrix	out	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
603	715	16	DenseRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
604	717	20	DenseRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
605	749	20	DenseRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
41254	799	8	DenseRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
41254	799	8	DenseRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
606	813	8	DenseRealMatrix.java	setSubMatrix	refLength	int	0	DEF	$ < 1
607	820	12	DenseRealMatrix.java	setSubMatrix	THIS	DenseRealMatrix	0	DEF	$.subRow.$.length != refLength
607	820	12	DenseRealMatrix.java	setSubMatrix	refLength	int	0	DEF	subRow.length != $
41255	834	8	DenseRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
41255	834	8	DenseRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
41256	840	12	DenseRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
41256	840	12	DenseRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
41257	849	16	DenseRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
41257	849	16	DenseRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
41258	873	8	DenseRealMatrix.java	getRowMatrix	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41258	873	8	DenseRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
608	877	12	DenseRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
608	877	12	DenseRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
609	919	8	DenseRealMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
609	919	8	DenseRealMatrix.java	setRowMatrix	matrix	DenseRealMatrix	0	InvalidMatrixException	$.getColumnDimension() != nCols
609	919	8	DenseRealMatrix.java	setRowMatrix	matrix	DenseRealMatrix	0	InvalidMatrixException	$.getRowDimension() != 1
41259	933	8	DenseRealMatrix.java	setRowMatrix	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41259	933	8	DenseRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
610	937	12	DenseRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
610	937	12	DenseRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
41260	965	8	DenseRealMatrix.java	getColumnMatrix	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41260	965	8	DenseRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
41261	968	12	DenseRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
41261	968	12	DenseRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
611	969	16	DenseRealMatrix.java	getColumnMatrix	THIS	DenseRealMatrix	0	DEF	outIndex >= outBlock.$.length
611	969	16	DenseRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
611	969	16	DenseRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
612	1008	8	DenseRealMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
612	1008	8	DenseRealMatrix.java	setColumnMatrix	matrix	DenseRealMatrix	0	InvalidMatrixException	$.getColumnDimension() != 1
612	1008	8	DenseRealMatrix.java	setColumnMatrix	matrix	DenseRealMatrix	0	InvalidMatrixException	$.getRowDimension() != nRows
41262	1023	8	DenseRealMatrix.java	setColumnMatrix	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41262	1023	8	DenseRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
41263	1026	12	DenseRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
41263	1026	12	DenseRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
613	1027	16	DenseRealMatrix.java	setColumnMatrix	THIS	DenseRealMatrix	0	DEF	mIndex >= mBlock.$.length
613	1027	16	DenseRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
613	1027	16	DenseRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
41264	1049	8	DenseRealMatrix.java	getRowVector	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41264	1049	8	DenseRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
41265	1084	8	DenseRealMatrix.java	getColumnVector	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41265	1084	8	DenseRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
41266	1087	12	DenseRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
41266	1087	12	DenseRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
41267	1119	8	DenseRealMatrix.java	getRow	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41267	1119	8	DenseRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
614	1137	8	DenseRealMatrix.java	setRow	THIS	DenseRealMatrix	0	InvalidMatrixException	array.$.length != nCols
614	1137	8	DenseRealMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
614	1137	8	DenseRealMatrix.java	setRow	array	double[]	0	InvalidMatrixException	$.length != nCols
41268	1147	8	DenseRealMatrix.java	setRow	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41268	1147	8	DenseRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
41269	1169	8	DenseRealMatrix.java	getColumn	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41269	1169	8	DenseRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
41270	1172	12	DenseRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
41270	1172	12	DenseRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
615	1188	8	DenseRealMatrix.java	setColumn	THIS	DenseRealMatrix	0	InvalidMatrixException	array.$.length != nRows
615	1188	8	DenseRealMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
615	1188	8	DenseRealMatrix.java	setColumn	array	double[]	0	InvalidMatrixException	$.length != nRows
41271	1199	8	DenseRealMatrix.java	setColumn	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41271	1199	8	DenseRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
41272	1202	12	DenseRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
41272	1202	12	DenseRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
41273	1287	8	DenseRealMatrix.java	transpose	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
41273	1287	8	DenseRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
41274	1288	12	DenseRealMatrix.java	transpose	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockRows
41274	1288	12	DenseRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
41275	1297	16	DenseRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
41275	1297	16	DenseRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
41276	1299	20	DenseRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
41276	1299	20	DenseRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
616	1331	8	DenseRealMatrix.java	operate	THIS	DenseRealMatrix	0	DEF	v.$.length != $.columns
616	1331	8	DenseRealMatrix.java	operate	v	double[]	0	DEF	$.length != columns
41277	1339	8	DenseRealMatrix.java	operate	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41277	1339	8	DenseRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
41278	1342	12	DenseRealMatrix.java	operate	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41278	1342	12	DenseRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
41279	1346	16	DenseRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
41279	1346	16	DenseRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
41280	1349	20	DenseRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
41280	1349	20	DenseRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
41281	1357	20	DenseRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
41281	1357	20	DenseRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
617	1374	8	DenseRealMatrix.java	preMultiply	THIS	DenseRealMatrix	0	DEF	v.$.length != $.rows
617	1374	8	DenseRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != rows
41282	1382	8	DenseRealMatrix.java	preMultiply	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41282	1382	8	DenseRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
41283	1389	12	DenseRealMatrix.java	preMultiply	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41283	1389	12	DenseRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
41284	1393	16	DenseRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
41284	1393	16	DenseRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
41285	1397	20	DenseRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
41285	1397	20	DenseRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
41286	1405	20	DenseRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
41286	1405	20	DenseRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
41287	1423	8	DenseRealMatrix.java	walkInRowOrder	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41287	1423	8	DenseRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
41288	1426	12	DenseRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
41288	1426	12	DenseRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
41289	1427	16	DenseRealMatrix.java	walkInRowOrder	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41289	1427	16	DenseRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
41290	1432	20	DenseRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
41290	1432	20	DenseRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
41291	1446	8	DenseRealMatrix.java	walkInRowOrder	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41291	1446	8	DenseRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
41292	1449	12	DenseRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
41292	1449	12	DenseRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
41293	1450	16	DenseRealMatrix.java	walkInRowOrder	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41293	1450	16	DenseRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
41294	1455	20	DenseRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
41294	1455	20	DenseRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
41295	1472	8	DenseRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
41295	1472	8	DenseRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
41296	1476	12	DenseRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
41296	1476	12	DenseRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
41297	1477	16	DenseRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
41297	1477	16	DenseRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
41298	1483	20	DenseRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
41298	1483	20	DenseRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
41299	1500	8	DenseRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
41299	1500	8	DenseRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
41300	1504	12	DenseRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
41300	1504	12	DenseRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
41301	1505	16	DenseRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
41301	1505	16	DenseRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
41302	1511	20	DenseRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
41302	1511	20	DenseRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
41303	1525	8	DenseRealMatrix.java	walkInOptimizedOrder	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41303	1525	8	DenseRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
41304	1528	12	DenseRealMatrix.java	walkInOptimizedOrder	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41304	1528	12	DenseRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
41305	1532	16	DenseRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
41305	1532	16	DenseRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
41306	1533	20	DenseRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
41306	1533	20	DenseRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
41307	1547	8	DenseRealMatrix.java	walkInOptimizedOrder	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
41307	1547	8	DenseRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
41308	1550	12	DenseRealMatrix.java	walkInOptimizedOrder	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
41308	1550	12	DenseRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
41309	1554	16	DenseRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
41309	1554	16	DenseRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
41310	1555	20	DenseRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
41310	1555	20	DenseRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
41311	1572	8	DenseRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
41311	1572	8	DenseRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
41312	1576	12	DenseRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
41312	1576	12	DenseRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
41313	1582	16	DenseRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
41313	1582	16	DenseRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
41314	1583	20	DenseRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
41314	1583	20	DenseRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
41315	1600	8	DenseRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
41315	1600	8	DenseRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
41316	1604	12	DenseRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
41316	1604	12	DenseRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
41317	1610	16	DenseRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
41317	1610	16	DenseRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
41318	1611	20	DenseRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
41318	1611	20	DenseRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
990	139	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
991	140	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
992	142	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
993	203	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
994	204	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
995	302	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	IllegalArgumentException	$ < 1
996	303	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	IllegalArgumentException	$ != INFINITE_WINDOW
997	313	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
997	313	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
997	313	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
998	374	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
41638	140	8	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	$ < n
41638	140	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	i < $
41639	142	12	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	NIL-FOR	$ < i + 1
41639	142	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	j < $ + 1
920	143	16	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	DEF	steps[$] == 0.0
920	143	16	DirectSearchOptimizer.java	setStartConfiguration	steps	double[]	0	DEF	$[j] == 0.0
921	168	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	DEF	$ < 0
41640	176	8	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	$ < n + 1
41640	176	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	i < $ + 1
922	181	12	DirectSearchOptimizer.java	setStartConfiguration	THIS	DirectSearchOptimizer	0	DEF	refI.$.length != n
922	181	12	DirectSearchOptimizer.java	setStartConfiguration	refI	double[]	0	DEF	$.length != n
922	181	12	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	DEF	refI.length != $
41641	186	12	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	NIL-FOR	$ < i
41641	186	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	j < $
41642	189	16	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	NIL-FOR	$ < n
41642	189	16	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	k < $
923	190	20	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	DEF	refI[$] != refJ[$]
923	190	20	DirectSearchOptimizer.java	setStartConfiguration	refJ	double[]	0	DEF	refI[k] != $[k]
923	190	20	DirectSearchOptimizer.java	setStartConfiguration	refI	double[]	0	DEF	$[k] != refJ[k]
924	195	16	DirectSearchOptimizer.java	setStartConfiguration	allEquals	boolean	0	DEF	$
925	203	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	DEF	$ > 0
41643	205	16	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	NIL-FOR	$ < n
41643	205	16	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	k < $
926	251	8	DirectSearchOptimizer.java	optimize	THIS	DirectSearchOptimizer	0	DEF	$.startConfiguration == null
927	280	12	DirectSearchOptimizer.java	optimize	THIS	DirectSearchOptimizer	0	RET	$.iterations > 0
41644	282	16	DirectSearchOptimizer.java	optimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
41644	282	16	DirectSearchOptimizer.java	optimize	i	int	0	NIL-FOR	$ < simplex.length
928	285	16	DirectSearchOptimizer.java	optimize	converged	boolean	0	RET	$
929	305	8	DirectSearchOptimizer.java	incrementIterationsCounter	THIS	DirectSearchOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
930	343	8	DirectSearchOptimizer.java	buildSimplex	THIS	DirectSearchOptimizer	0	DEF	n != $.startConfiguration.$.length
930	343	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	DEF	$ != startConfiguration.length
41645	354	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ < n
41645	354	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i < $
41646	357	12	DirectSearchOptimizer.java	buildSimplex	k	int	0	NIL-FOR	$ < n
41646	357	12	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	k < $
41647	373	8	DirectSearchOptimizer.java	evaluateSimplex	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
41647	373	8	DirectSearchOptimizer.java	evaluateSimplex	i	int	0	NIL-FOR	$ < simplex.length
931	376	12	DirectSearchOptimizer.java	evaluateSimplex	vertex	RealPointValuePair	0	DEF	Double.isNaN($.getValue())
41648	393	8	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < n
41648	393	8	DirectSearchOptimizer.java	replaceWorstPoint	n	int	0	NIL-FOR	i < $
932	394	12	DirectSearchOptimizer.java	replaceWorstPoint	THIS	DirectSearchOptimizer	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
932	394	12	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
932	394	12	DirectSearchOptimizer.java	replaceWorstPoint	pointValuePair	RealPointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
932	394	12	DirectSearchOptimizer.java	replaceWorstPoint	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
42025	74	8	DividedDifferenceInterpolator.java	interpolate	THIS	DividedDifferenceInterpolator	0	NIL-FOR	i < c.$.length
42025	74	8	DividedDifferenceInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < c.length
42025	74	8	DividedDifferenceInterpolator.java	interpolate	c	double[]	0	NIL-FOR	i < $.length
42026	109	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
42026	109	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
42027	115	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
42027	115	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
42028	116	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
42028	116	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
42028	116	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
1424	118	16	DividedDifferenceInterpolator.java	computeDividedDifference	denominator	double	0	DuplicateSampleAbscissaException	$ == 0.0
41904	141	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < y0.$.length
41904	141	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
41904	141	4	DormandPrince54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
1258	64	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
1258	64	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
1259	116	4	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
1260	118	6	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
41869	128	6	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41869	128	6	DormandPrince54StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
41870	151	4	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41870	151	4	DormandPrince54StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
41903	255	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < y0.$.length
41903	255	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
41903	255	4	DormandPrince853Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
1319	276	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
1344	67	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
1344	67	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
41937	78	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
41937	78	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
41938	85	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
41938	85	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
41939	112	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
41939	112	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
41940	117	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
41940	117	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
1345	138	4	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
1346	140	6	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
41941	142	8	DormandPrince853StepInterpolator.java	computeInterpolatedState	k	int	0	NIL-FOR	$ < 7
41942	151	6	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41942	151	6	DormandPrince853StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
41943	169	10	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.d.$.length
41943	169	10	DormandPrince853StepInterpolator.java	computeInterpolatedState	k	int	0	NIL-FOR	$ < d.length
41944	191	4	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41944	191	4	DormandPrince853StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
1347	212	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
41945	221	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
41945	221	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
41946	230	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
41946	230	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
41947	240	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
41947	240	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
41948	263	4	DormandPrince853StepInterpolator.java	writeExternal	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.currentState.$.length
41948	263	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentState.length
41949	286	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
41949	286	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
702	173	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	1	DEF	$.isSymmetric(matrix)
702	173	8	EigenDecompositionImpl.java	EigenDecompositionImpl	matrix	RealMatrix	1	DEF	isSymmetric($)
41468	204	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.squaredSecondary.$.length
41468	204	8	EigenDecompositionImpl.java	EigenDecompositionImpl	i	int	0	NIL-FOR	$ < squaredSecondary.length
41469	223	8	EigenDecompositionImpl.java	isSymmetric	i	int	0	NIL-FOR	$ < rows
41469	223	8	EigenDecompositionImpl.java	isSymmetric	rows	int	0	NIL-FOR	i < $
41470	224	12	EigenDecompositionImpl.java	isSymmetric	j	int	0	NIL-FOR	$ < columns
41470	224	12	EigenDecompositionImpl.java	isSymmetric	columns	int	0	NIL-FOR	j < $
703	227	16	EigenDecompositionImpl.java	isSymmetric	mij	double	0	RET	Math.abs($ - mji) > (Math.max(Math.abs($), Math.abs(mji)) * eps)
703	227	16	EigenDecompositionImpl.java	isSymmetric	mji	double	0	RET	Math.abs(mij - $) > (Math.max(Math.abs(mij), Math.abs($)) * eps)
703	227	16	EigenDecompositionImpl.java	isSymmetric	eps	double	0	RET	Math.abs(mij - mji) > (Math.max(Math.abs(mij), Math.abs(mji)) * $)
704	262	8	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.cachedV == null
705	264	12	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
41471	270	12	EigenDecompositionImpl.java	getV	k	int	0	NIL-FOR	$ < m
41471	270	12	EigenDecompositionImpl.java	getV	m	int	0	NIL-FOR	k < $
706	284	8	EigenDecompositionImpl.java	getD	THIS	EigenDecompositionImpl	0	DEF	$.cachedD == null
707	295	8	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.cachedVt == null
708	297	12	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
41472	303	12	EigenDecompositionImpl.java	getVT	k	int	0	NIL-FOR	$ < m
41472	303	12	EigenDecompositionImpl.java	getVT	m	int	0	NIL-FOR	k < $
709	341	8	EigenDecompositionImpl.java	getEigenvector	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
710	361	8	EigenDecompositionImpl.java	getSolver	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
41473	567	8	EigenDecompositionImpl.java	transformToTridiagonal	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.squaredSecondary.$.length
41473	567	8	EigenDecompositionImpl.java	transformToTridiagonal	i	int	0	NIL-FOR	$ < squaredSecondary.length
41474	587	8	EigenDecompositionImpl.java	computeGershgorinCircles	i	int	0	NIL-FOR	$ < m - 1
41474	587	8	EigenDecompositionImpl.java	computeGershgorinCircles	m	int	0	NIL-FOR	i < $ - 1
711	665	16	EigenDecompositionImpl.java	findEigenvalues	chooseLeft	boolean	1	DEF	$
41475	666	20	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < n
41475	666	20	EigenDecompositionImpl.java	findEigenvalues	n	int	0	NIL-FOR	i < $
41476	670	20	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < n
41476	670	20	EigenDecompositionImpl.java	findEigenvalues	n	int	0	NIL-FOR	i < $
41477	681	8	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < j
41477	681	8	EigenDecompositionImpl.java	findEigenvalues	j	int	0	NIL-FOR	i < $
41478	699	8	EigenDecompositionImpl.java	computeSplits	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.secondary.$.length
41478	699	8	EigenDecompositionImpl.java	computeSplits	i	int	0	NIL-FOR	$ < secondary.length
712	703	12	EigenDecompositionImpl.java	computeSplits	THIS	EigenDecompositionImpl	0	DEF	Math.abs($.secondary[i]) <= max
712	703	12	EigenDecompositionImpl.java	computeSplits	max	double	0	DEF	Math.abs(secondary[i]) <= $
712	703	12	EigenDecompositionImpl.java	computeSplits	i	int	0	DEF	Math.abs(secondary[$]) <= max
713	742	8	EigenDecompositionImpl.java	process2RowsBlock	delta	double	0	InvalidMatrixException	$ < 0
714	779	8	EigenDecompositionImpl.java	process3RowsBlock	delta	double	0	InvalidMatrixException	$ >= 0
715	793	8	EigenDecompositionImpl.java	process3RowsBlock	z0	double	0	DEF	$ < z1
715	793	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	z0 < $
716	798	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	$ < z2
716	798	8	EigenDecompositionImpl.java	process3RowsBlock	z2	double	0	DEF	z1 < $
717	803	8	EigenDecompositionImpl.java	process3RowsBlock	z0	double	0	DEF	$ < z1
717	803	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	z0 < $
41479	830	8	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ < n - 1
41479	830	8	EigenDecompositionImpl.java	processGeneralBlock	n	int	0	NIL-FOR	i < $ - 1
718	836	8	EigenDecompositionImpl.java	processGeneralBlock	sumOffDiag	double	0	RET	$ == 0
41480	859	8	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-WHILE	$ > 0
41481	871	12	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ >= 0
719	872	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[i + 2] <= 0
719	872	16	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	DEF	work[$ + 2] <= 0
720	876	16	EigenDecompositionImpl.java	processGeneralBlock	eMax	double	0	DEF	qMin >= 4 * $
720	876	16	EigenDecompositionImpl.java	processGeneralBlock	qMin	double	0	DEF	$ >= 4 * eMax
41482	890	12	EigenDecompositionImpl.java	processGeneralBlock	i0	int	0	NIL-FOR	$ < n0
41482	890	12	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-FOR	i0 < $
721	891	16	EigenDecompositionImpl.java	processGeneralBlock	k	int	0	MaxIterationsExceededException	$ >= maxIter
721	891	16	EigenDecompositionImpl.java	processGeneralBlock	maxIter	int	0	MaxIterationsExceededException	k >= $
722	901	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[4 * n0 - 1] <= $.TOLERANCE_2 * qMax
722	901	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.pingPong == 0
722	901	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[4 * n0 - 2] <= $.TOLERANCE_2 * $.sigma
722	901	16	EigenDecompositionImpl.java	processGeneralBlock	qMax	double	0	DEF	work[4 * n0 - 1] <= TOLERANCE_2 * $
722	901	16	EigenDecompositionImpl.java	processGeneralBlock	i0	int	0	DEF	n0 - $ > 3
722	901	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	work[4 * $ - 1] <= TOLERANCE_2 * qMax
722	901	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	work[4 * $ - 2] <= TOLERANCE_2 * sigma
722	901	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	$ - i0 > 3
41483	908	20	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ < 4 * n0 - 11
41483	908	20	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-FOR	i < 4 * $ - 11
723	909	24	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 2] <= $.TOLERANCE_2 * $.sigma
723	909	24	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 3] <= $.TOLERANCE_2 * $.work[i]
723	909	24	EigenDecompositionImpl.java	processGeneralBlock	i	int	1	DEF	work[$ + 2] <= TOLERANCE_2 * sigma
723	909	24	EigenDecompositionImpl.java	processGeneralBlock	i	int	1	DEF	work[$ + 3] <= TOLERANCE_2 * work[$]
41484	940	8	EigenDecompositionImpl.java	initialSplits	k	int	0	NIL-FOR	$ < 2
41485	944	12	EigenDecompositionImpl.java	initialSplits	i	int	0	NIL-FOR	$ >= 0
724	945	16	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 2] <= $.TOLERANCE_2 * d
724	945	16	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	work[$ + 2] <= TOLERANCE_2 * d
724	945	16	EigenDecompositionImpl.java	initialSplits	d	double	1	DEF	work[i + 2] <= TOLERANCE_2 * $
41486	955	12	EigenDecompositionImpl.java	initialSplits	i	int	0	NIL-FOR	$ < 4 * n - 2
41486	955	12	EigenDecompositionImpl.java	initialSplits	n	int	0	NIL-FOR	i < 4 * $ - 2
725	958	16	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	$.work[i] <= $.TOLERANCE_2 * d
725	958	16	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	work[$] <= TOLERANCE_2 * d
725	958	16	EigenDecompositionImpl.java	initialSplits	d	double	1	DEF	work[i] <= TOLERANCE_2 * $
726	963	23	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j] < $.work[i + 2]
726	963	23	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[i + 2] < $.work[j]
726	963	23	EigenDecompositionImpl.java	initialSplits	j	int	1	DEF	MathUtils.SAFE_MIN * work[$] < work[i + 2]
726	963	23	EigenDecompositionImpl.java	initialSplits	j	int	1	DEF	MathUtils.SAFE_MIN * work[i + 2] < work[$]
726	963	23	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	MathUtils.SAFE_MIN * work[j] < work[$ + 2]
726	963	23	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j]
41487	999	8	EigenDecompositionImpl.java	goodStep	deflating	boolean	0	NIL-FOR	$
727	1001	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	RET	start >= $
727	1001	12	EigenDecompositionImpl.java	goodStep	start	int	0	RET	$ >= deflatedEnd
728	1008	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 5] <= $.TOLERANCE_2 * ($.sigma + $.work[k - 3])
728	1008	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 2 * $.pingPong - 4] <= $.TOLERANCE_2 * $.work[k - 7]
728	1008	12	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 5] <= TOLERANCE_2 * (sigma + work[$ - 3])
728	1008	12	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 2 * pingPong - 4] <= TOLERANCE_2 * work[$ - 7]
728	1008	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start != $ - 2
728	1008	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start == $ - 1
728	1008	12	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ != deflatedEnd - 2
728	1008	12	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ == deflatedEnd - 1
729	1017	19	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 9] <= $.TOLERANCE_2 * $.sigma
729	1017	19	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 2 * $.pingPong - 8] <= $.TOLERANCE_2 * $.work[k - 11]
729	1017	19	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 9] <= TOLERANCE_2 * sigma
729	1017	19	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 2 * pingPong - 8] <= TOLERANCE_2 * work[$ - 11]
729	1017	19	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start == $ - 2
729	1017	19	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ == deflatedEnd - 2
730	1022	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.work[k - 3] > $.work[k - 7]
730	1022	16	EigenDecompositionImpl.java	goodStep	k	int	0	DEF	work[$ - 3] > work[$ - 7]
731	1028	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.work[k - 5] > $.TOLERANCE_2 * $.work[k - 3]
731	1028	16	EigenDecompositionImpl.java	goodStep	k	int	0	DEF	work[$ - 5] > TOLERANCE_2 * work[$ - 3]
732	1031	20	EigenDecompositionImpl.java	goodStep	t	double	1	DEF	s <= $
732	1031	20	EigenDecompositionImpl.java	goodStep	s	double	1	DEF	$ <= t
733	1055	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.dMin <= 0
733	1055	8	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	DEF	$ < end
733	1055	8	EigenDecompositionImpl.java	goodStep	end	int	0	DEF	deflatedEnd < $
734	1056	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.flipIfWarranted(deflatedEnd, 1)
734	1056	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	DEF	flipIfWarranted($, 1)
735	1069	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	RET	MathUtils.SAFE_MIN * $.qMax < Math.min($.work[l - 1], Math.min($.work[l - 9], $.dMin2 + $.work[l - 2 * $.pingPong]))
735	1069	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	RET	$.dMin < 0
735	1069	8	EigenDecompositionImpl.java	goodStep	l	int	0	RET	MathUtils.SAFE_MIN * qMax < Math.min(work[$ - 1], Math.min(work[$ - 9], dMin2 + work[$ - 2 * pingPong]))
41488	1077	12	EigenDecompositionImpl.java	goodStep	loop	boolean	0	NIL-FOR	$
736	1083	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin >= 0
736	1083	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin1 > 0
737	1087	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin < 0.0
737	1087	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin1 > 0.0
737	1087	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.work[4 * deflatedEnd - 5 - $.pingPong] < TOLERANCE * ($.sigma + $.dN1)
737	1087	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	Math.abs($.dN) < TOLERANCE * $.sigma
737	1087	23	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	RET	work[4 * $ - 5 - pingPong] < TOLERANCE * (sigma + dN1)
738	1096	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.dMin < 0.0
739	1098	20	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.tType < -22
740	1101	27	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.dMin1 > 0.0
741	1110	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	Double.isNaN($.dMin)
742	1135	8	EigenDecompositionImpl.java	flipIfWarranted	THIS	EigenDecompositionImpl	0	RET	1.5 * $.work[$.pingPong] < $.work[4 * (n - 1) + $.pingPong]
742	1135	8	EigenDecompositionImpl.java	flipIfWarranted	n	int	0	RET	1.5 * work[pingPong] < work[4 * ($ - 1) + pingPong]
41489	1137	12	EigenDecompositionImpl.java	flipIfWarranted	i	int	0	NIL-FOR	$ < j
41489	1137	12	EigenDecompositionImpl.java	flipIfWarranted	j	int	0	NIL-FOR	i < $
41490	1138	16	EigenDecompositionImpl.java	flipIfWarranted	k	int	0	NIL-FOR	$ < 4
41491	1162	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < n
41491	1162	8	EigenDecompositionImpl.java	eigenvaluesRange	n	int	0	NIL-FOR	i < $
41492	1178	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < maxIter
41492	1178	8	EigenDecompositionImpl.java	eigenvaluesRange	maxIter	int	0	NIL-FOR	i < $
743	1181	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < absoluteTolerance
743	1181	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))
743	1181	12	EigenDecompositionImpl.java	eigenvaluesRange	relativeTolerance	double	0	DEF	range < $ * Math.max(Math.abs(left), Math.abs(right))
743	1181	12	EigenDecompositionImpl.java	eigenvaluesRange	absoluteTolerance	double	0	DEF	range < $
743	1181	12	EigenDecompositionImpl.java	eigenvaluesRange	left	double	0	DEF	range < relativeTolerance * Math.max(Math.abs($), Math.abs(right))
743	1181	12	EigenDecompositionImpl.java	eigenvaluesRange	right	double	0	DEF	range < relativeTolerance * Math.max(Math.abs(left), Math.abs($))
744	1188	12	EigenDecompositionImpl.java	eigenvaluesRange	THIS	EigenDecompositionImpl	1	DEF	$.countEigenValues(middle, index, n) >= 1
744	1188	12	EigenDecompositionImpl.java	eigenvaluesRange	middle	double	1	DEF	countEigenValues($, index, n) >= 1
744	1188	12	EigenDecompositionImpl.java	eigenvaluesRange	index	int	1	DEF	countEigenValues(middle, $, n) >= 1
744	1188	12	EigenDecompositionImpl.java	eigenvaluesRange	n	int	1	DEF	countEigenValues(middle, index, $) >= 1
41493	1200	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < maxIter
41493	1200	8	EigenDecompositionImpl.java	eigenvaluesRange	maxIter	int	0	NIL-FOR	i < $
745	1203	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < absoluteTolerance
745	1203	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))
745	1203	12	EigenDecompositionImpl.java	eigenvaluesRange	relativeTolerance	double	0	DEF	range < $ * Math.max(Math.abs(left), Math.abs(right))
745	1203	12	EigenDecompositionImpl.java	eigenvaluesRange	absoluteTolerance	double	0	DEF	range < $
745	1203	12	EigenDecompositionImpl.java	eigenvaluesRange	left	double	0	DEF	range < relativeTolerance * Math.max(Math.abs($), Math.abs(right))
745	1203	12	EigenDecompositionImpl.java	eigenvaluesRange	right	double	0	DEF	range < relativeTolerance * Math.max(Math.abs(left), Math.abs($))
746	1210	12	EigenDecompositionImpl.java	eigenvaluesRange	THIS	EigenDecompositionImpl	1	DEF	$.countEigenValues(middle, index, n) >= n
746	1210	12	EigenDecompositionImpl.java	eigenvaluesRange	middle	double	1	DEF	countEigenValues($, index, n) >= n
746	1210	12	EigenDecompositionImpl.java	eigenvaluesRange	index	int	1	DEF	countEigenValues(middle, $, n) >= n
746	1210	12	EigenDecompositionImpl.java	eigenvaluesRange	n	int	1	DEF	countEigenValues(middle, index, $) >= $
41494	1233	8	EigenDecompositionImpl.java	countEigenValues	i	int	0	NIL-FOR	$ < n
41494	1233	8	EigenDecompositionImpl.java	countEigenValues	n	int	0	NIL-FOR	i < $
747	1235	12	EigenDecompositionImpl.java	countEigenValues	ratio	double	0	DEF	$ <= 0
41495	1256	8	EigenDecompositionImpl.java	ldlTDecomposition	i	int	0	NIL-FOR	$ < n
41495	1256	8	EigenDecompositionImpl.java	ldlTDecomposition	n	int	0	NIL-FOR	i < $
748	1279	8	EigenDecompositionImpl.java	dqds	THIS	EigenDecompositionImpl	1	DEF	$.pingPong == 0
41496	1280	12	EigenDecompositionImpl.java	dqds	j4	int	0	NIL-FOR	$ <= 4 * (end - 3)
41496	1280	12	EigenDecompositionImpl.java	dqds	end	int	0	NIL-FOR	j4 <= 4 * ($ - 3)
41497	1289	12	EigenDecompositionImpl.java	dqds	j4	int	0	NIL-FOR	$ <= 4 * (end - 3)
41497	1289	12	EigenDecompositionImpl.java	dqds	end	int	0	NIL-FOR	j4 <= 4 * ($ - 3)
749	1335	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.pingPong == 0
41498	1336	12	EigenDecompositionImpl.java	dqd	j4	int	0	NIL-FOR	$ < 4 * (end - 3)
41498	1336	12	EigenDecompositionImpl.java	dqd	end	int	0	NIL-FOR	j4 < 4 * ($ - 3)
750	1338	16	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
750	1338	16	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
751	1343	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4 + 1]
751	1343	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 + 1] < $.work[j4 - 2]
751	1343	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[$ + 1]
751	1343	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 1] < work[$ - 2]
41499	1356	12	EigenDecompositionImpl.java	dqd	j4	int	0	NIL-FOR	$ < 4 * (end - 3)
41499	1356	12	EigenDecompositionImpl.java	dqd	end	int	0	NIL-FOR	j4 < 4 * ($ - 3)
752	1358	16	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 3] == 0.0
752	1358	16	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 3] == 0.0
753	1363	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 + 2] < $.work[j4 - 3]
753	1363	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 3] < $.work[j4 + 2]
753	1363	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[$ - 3]
753	1363	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 3] < work[$ + 2]
754	1383	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
754	1383	8	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
755	1388	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4p2 + 2] < $.work[j4 - 2]
755	1388	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4p2 + 2]
755	1388	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[j4p2 + 2] < work[$ - 2]
755	1388	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[j4p2 + 2]
755	1388	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j4 - 2]
755	1388	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[j4 - 2] < work[$ + 2]
756	1403	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
756	1403	8	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
757	1408	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4p2 + 2] < $.work[j4 - 2]
757	1408	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4p2 + 2]
757	1408	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[j4p2 + 2] < work[$ - 2]
757	1408	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[j4p2 + 2]
757	1408	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j4 - 2]
757	1408	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[j4 - 2] < work[$ + 2]
758	1439	8	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.dMin <= 0.0
759	1449	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN
759	1449	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN1
760	1455	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.dMin == $.dN
760	1455	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.dMin1 == $.dN1
761	1459	20	EigenDecompositionImpl.java	computeShiftIncrement	gap1	double	1	DEF	$ > 0.0
761	1459	20	EigenDecompositionImpl.java	computeShiftIncrement	gap1	double	1	DEF	$ > b1
761	1459	20	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	1	DEF	gap1 > $
762	1464	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	DEF	$.dN > b1
762	1464	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	dN > $
763	1467	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	a2 > ($ + b2)
763	1467	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	a2 > (b1 + $)
763	1467	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	$ > (b1 + b2)
764	1479	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN
765	1482	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
765	1482	24	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
766	1491	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 4] > $.work[np - 2]
766	1491	24	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 4] > work[$ - 2]
767	1495	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 9] > $.work[nn - 11]
767	1495	24	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 9] > work[$ - 11]
41500	1504	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
41500	1504	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
41500	1504	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
768	1505	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	$ == 0.0
769	1509	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
769	1509	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
770	1514	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max(b2, $) < a2
770	1514	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max($, b1) < a2
770	1514	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	cnst1 < $
770	1514	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	100 * Math.max(b2, b1) < $
770	1514	24	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	$ < a2
771	1521	20	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	$ < cnst1
771	1521	20	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	a2 < $
772	1527	19	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN2
773	1538	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 4] > b1
773	1538	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 8] > b2
773	1538	16	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 4] > b1
773	1538	16	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 8] > b2
773	1538	16	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	RET	work[np - 4] > $
773	1538	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	work[np - 8] > $
774	1544	16	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	RET	end - $ > 2
774	1544	16	EigenDecompositionImpl.java	computeShiftIncrement	end	int	0	RET	$ - start > 2
41501	1547	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
41501	1547	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
41501	1547	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
775	1548	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	$ == 0.0
776	1552	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
776	1552	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
777	1557	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max(b2, $) < a2
777	1557	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max($, b1) < a2
777	1557	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	100 * Math.max(b2, b1) < $
777	1557	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	cnst1 < $
777	1557	24	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	$ < a2
778	1564	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	$ < cnst1
778	1564	16	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	1	DEF	a2 < $
779	1573	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.tType == -6
780	1575	23	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.tType == -18
781	1587	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin1 == $.dN1
781	1587	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin2 == $.dN2
782	1592	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
782	1592	16	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
783	1597	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	$ != 0.0
41502	1598	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
41502	1598	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
41502	1598	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
784	1600	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
784	1600	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
785	1605	24	EigenDecompositionImpl.java	computeShiftIncrement	oldB1	double	0	DEF	100 * Math.max(b1, $) < b2
785	1605	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max($, oldB1) < b2
785	1605	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max(b1, oldB1) < $
786	1613	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	1	DEF	gap2 > $ * a2
786	1613	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	gap2 > b2 * $
786	1613	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > b2 * a2
786	1613	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > 0.0
787	1623	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	DEF	$.dMin1 == $.dN1
788	1633	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	2 * $.work[nn - 5] < $.work[nn - 7]
788	1633	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin2 == $.dN2
788	1633	12	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	1	RET	2 * work[$ - 5] < work[$ - 7]
789	1636	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
789	1636	16	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
790	1641	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	$ != 0.0
41503	1642	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
41503	1642	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
41503	1642	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
791	1643	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
791	1643	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
792	1648	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * $ < b2
792	1648	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * b1 < $
793	1657	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	1	DEF	gap2 > $ * a2
793	1657	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	gap2 > b2 * $
793	1657	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > b2 * a2
793	1657	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > 0.0
794	1683	8	EigenDecompositionImpl.java	updateSigma	THIS	EigenDecompositionImpl	1	DEF	tau < $.sigma
794	1683	8	EigenDecompositionImpl.java	updateSigma	tau	double	1	DEF	$ < sigma
41504	1708	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < m
41504	1708	8	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	i < $
41505	1717	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < m
41505	1717	8	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	i < $
41506	1745	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m - 1
41506	1745	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $ - 1
795	1748	12	EigenDecompositionImpl.java	findEigenvector	absG	double	0	DEF	$ < minG
795	1748	12	EigenDecompositionImpl.java	findEigenvector	minG	double	0	DEF	absG < $
41507	1760	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ >= 0
41508	1766	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m
41508	1766	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $
41509	1774	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m
41509	1774	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $
41510	1796	8	EigenDecompositionImpl.java	stationaryQuotientDifferenceWithShift	i	int	0	NIL-FOR	$ < nM1
41510	1796	8	EigenDecompositionImpl.java	stationaryQuotientDifferenceWithShift	nM1	int	0	NIL-FOR	i < $
41511	1822	8	EigenDecompositionImpl.java	progressiveQuotientDifferenceWithShift	i	int	0	NIL-FOR	$ >= 0
1334	178	4	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1334	178	4	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
41928	182	4	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
41928	182	4	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
1335	189	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
1335	189	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
41929	209	4	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
41930	214	6	EmbeddedRungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1336	216	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1336	216	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1337	221	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1338	223	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance != null
41931	227	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
41931	227	12	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
41931	227	12	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
41932	239	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
41932	239	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
41933	241	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
41933	241	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
41933	241	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
41934	243	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
41934	243	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
41935	254	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
41935	254	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
41935	254	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
41936	256	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
41936	256	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1339	264	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1340	268	10	EmbeddedRungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1340	268	10	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1341	299	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1342	304	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1342	304	6	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1342	304	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1342	304	6	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1343	310	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1133	141	12	EmpiricalDistributionImpl.java	load	THIS	EmpiricalDistributionImpl	0	DEF	$.sampleStats.getN() == 0
41729	353	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i< $.binCount - 1
41729	353	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$< binCount - 1
1134	359	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	DEF	$.binStats.isEmpty()
41730	362	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
41730	362	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
41731	386	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount-1
41731	386	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
1135	415	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	DEF	$.loaded
41732	423	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
41732	423	8	EmpiricalDistributionImpl.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
1136	424	11	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	RET	x <= $.upperBounds[i]
1136	424	11	EmpiricalDistributionImpl.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
1136	424	11	EmpiricalDistributionImpl.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
1137	426	15	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
1138	427	19	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
1223	57	8	Erf.java	erf	x	double	0	DEF	$ < 0
41982	83	4	EulerStepInterpolator.java	computeInterpolatedState	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41982	83	4	EulerStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
42015	180	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
42015	180	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
1391	188	16	EventState.java	evaluateStep	THIS	EventState	1	FunctionEvaluationException:RET	$.g0Positive ^ (gb >= 0)
1391	188	16	EventState.java	evaluateStep	gb	double	1	FunctionEvaluationException:RET	g0Positive ^ ($ >= 0)
1392	211	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Math.abs(root - ta) <= $.convergence
1392	211	20	EventState.java	evaluateStep	root	double	1	DEF	Math.abs($ - ta) <= convergence
1392	211	20	EventState.java	evaluateStep	ta	double	1	DEF	Math.abs(root - $) <= convergence
1393	215	27	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs($.previousEventTime - root) > $.convergence
1393	215	27	EventState.java	evaluateStep	THIS	EventState	0	RET	Double.isNaN($.previousEventTime)
1393	215	27	EventState.java	evaluateStep	root	double	0	RET	Math.abs(previousEventTime - $) > convergence
1394	218	24	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs(t1 - $.pendingEventTime) <= $.convergence
1394	218	24	EventState.java	evaluateStep	THIS	EventState	0	RET	$.pendingEvent
1394	218	24	EventState.java	evaluateStep	t1	double	0	RET	Math.abs($ - pendingEventTime) <= convergence
1395	246	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ instanceof DerivativeException
1395	246	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ != null
1396	248	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ instanceof EventException
1396	248	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ != null
1397	279	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
1398	310	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
1399	314	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.RESET_STATE
463	52	8	ExponentialDistributionImpl.java	setMean	mean	double	0	IllegalArgumentException	$ <= 0.0
464	73	8	ExponentialDistributionImpl.java	density	x	Double	0	RET	$ < 0
465	96	8	ExponentialDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
466	120	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ < 0.0
466	120	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ > 1.0
467	123	15	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
468	158	8	ExponentialDistributionImpl.java	getDomainUpperBound	p	double	1	RET	$ < .5
469	180	8	ExponentialDistributionImpl.java	getInitialDomain	p	double	1	RET	$ < .5
418	72	8	FDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
419	101	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
420	104	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
421	150	8	FDistributionImpl.java	getInitialDomain	d	double	0	DEF	$ > 2.0
422	164	8	FDistributionImpl.java	setNumeratorDegreesOfFreedom	degreesOfFreedom	double	0	IllegalArgumentException	$ <= 0.0
423	186	8	FDistributionImpl.java	setDenominatorDegreesOfFreedom	degreesOfFreedom	double	0	IllegalArgumentException	$ <= 0.0
41819	242	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (N >> 1)
41820	256	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (N >> 1)
1241	304	8	FastFourierTransformer.java	fft	THIS	FastFourierTransformer	0	RET	f.$.length == 1
1241	304	8	FastFourierTransformer.java	fft	f	double	0	RET	$.length == 1
41829	313	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
41830	323	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
41831	364	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
41832	367	12	FastFourierTransformer.java	fft	j	int	0	NIL-WHILE	$ >= k
41832	367	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	$ > 0
41832	367	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	j >= $
41833	374	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
41834	389	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
41835	391	12	FastFourierTransformer.java	fft	j	int	0	NIL-FOR	$ < N
41836	392	16	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	k < $
41836	392	16	FastFourierTransformer.java	fft	k	int	0	NIL-FOR	$ < i
1244	433	8	FastFourierTransformer.java	sample	n	int	0	DEF	$ <= 0
41837	442	8	FastFourierTransformer.java	sample	i	int	0	NIL-FOR	$ < n
41837	442	8	FastFourierTransformer.java	sample	n	int	0	NIL-FOR	i < $
41838	457	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
41838	457	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
41838	457	8	FastFourierTransformer.java	scaleArray	f	double	0	NIL-FOR	i < $.length
41839	472	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
41839	472	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
41839	472	8	FastFourierTransformer.java	scaleArray	f	Complex	0	NIL-FOR	i < $.length
1245	495	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(d.$.length)
1245	495	8	FastFourierTransformer.java	verifyDataSet	d	double	0	DEF	isPowerOf2($.length)
1246	509	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(o.$.length)
1246	509	8	FastFourierTransformer.java	verifyDataSet	o	Object	0	DEF	isPowerOf2($.length)
1247	526	8	FastFourierTransformer.java	verifyInterval	lower	double	0	DEF	$ >= upper
1247	526	8	FastFourierTransformer.java	verifyInterval	upper	double	0	DEF	lower >= $
41840	553	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
41840	553	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
41840	553	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
1248	573	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
1248	573	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
1248	573	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
41841	575	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
41841	575	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
41841	575	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1249	581	12	FastFourierTransformer.java	mdfft	forward	boolean	1	DEF	$
41842	586	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
41842	586	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
41842	586	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1250	593	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
1250	593	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
1250	593	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
41843	599	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
41843	599	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
41843	599	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
41843	599	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
1237	164	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
41821	176	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
41821	176	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
41822	184	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
41822	184	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
41823	190	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
41823	190	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
1238	215	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
41824	227	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
41824	227	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
41825	235	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
41825	235	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
41826	241	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
41826	241	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
1239	220	8	FastSineTransformer.java	fst	f	double	0	DEF	$[0] != 0.0
41827	235	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (N >> 1)
41828	247	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (N >> 1)
987	98	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
971	85	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
332	172	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	a0 > $
332	172	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	$ > overflow
333	178	8	Fraction.java	Fraction	a0	long	0	RET	Math.abs($ - value) < epsilon
333	178	8	Fraction.java	Fraction	value	double	0	RET	Math.abs(a0 - $) < epsilon
333	178	8	Fraction.java	Fraction	epsilon	double	0	RET	Math.abs(a0 - value) < $
40939	194	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
334	200	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	q2 > $
334	200	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	p2 > $
334	200	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	$ > overflow
334	200	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	$ > overflow
335	205	12	Fraction.java	Fraction	convergent	double	1	DEF	Math.abs($ - value) > epsilon
335	205	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
335	205	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
335	205	12	Fraction.java	Fraction	value	double	1	DEF	Math.abs(convergent - $) > epsilon
335	205	12	Fraction.java	Fraction	epsilon	double	1	DEF	Math.abs(convergent - value) > $
335	205	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
335	205	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
336	217	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
336	217	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
337	221	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
337	221	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
338	248	8	Fraction.java	Fraction	den	int	0	DEF	$ == 0
339	252	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
340	253	12	Fraction.java	Fraction	num	int	0	DEF	$ == Integer.MIN_VALUE
340	253	12	Fraction.java	Fraction	den	int	0	DEF	$ == Integer.MIN_VALUE
341	262	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
342	268	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
343	282	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
344	325	8	Fraction.java	equals	THIS	Fraction	1	DEF	$ == other
344	325	8	Fraction.java	equals	other	Object	1	DEF	this == $
345	327	15	Fraction.java	equals	other	Object	1	DEF	$ == null
346	405	8	Fraction.java	negate	THIS	Fraction	0	DEF	$.numerator==Integer.MIN_VALUE
347	477	8	Fraction.java	addSub	fraction	Fraction	0	IllegalArgumentException	$ == null
348	481	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
349	484	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
349	484	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
350	490	8	Fraction.java	addSub	d1	int	0	RET	$==1
351	514	8	Fraction.java	addSub	w	BigInteger	0	DEF	$.bitLength() > 31
352	534	8	Fraction.java	multiply	fraction	Fraction	0	IllegalArgumentException	$ == null
353	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
353	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
353	537	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
354	569	8	Fraction.java	divide	fraction	Fraction	0	IllegalArgumentException	$ == null
355	572	8	Fraction.java	divide	THIS	Fraction	0	DEF	fraction.$.numerator == 0
355	572	8	Fraction.java	divide	fraction	Fraction	0	DEF	$.numerator == 0
356	601	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ == 0
357	606	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
358	610	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
358	610	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
359	613	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ < 0
360	614	12	Fraction.java	getReducedFraction	numerator	int	0	DEF	$==Integer.MIN_VALUE
360	614	12	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
361	642	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
362	644	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
316	175	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
317	177	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
318	205	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
319	229	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
320	262	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
41701	82	8	Frequency.java	toString	iter	Iterator	0	NIL-WHILE	$.hasNext()
1088	125	8	Frequency.java	addValue	v	Comparable<?>	0	DEF	$ instanceof Integer
1089	130	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
41702	205	8	Frequency.java	getSumFreq	iterator	Iterator	0	NIL-WHILE	$.hasNext()
1090	219	8	Frequency.java	getCount	v	Object	0	RET	$ instanceof Integer
1091	225	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
1092	277	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
1093	327	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
1094	330	8	Frequency.java	getCumFreq	v	Object	0	RET	$ instanceof Integer
1095	334	8	Frequency.java	getCumFreq	c	Comparator	0	DEF	$ == null
1096	341	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
1097	348	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
1097	348	8	Frequency.java	getCumFreq	c	Comparator	0	RET	$.compare(v, freqTable.firstKey()) < 0
1097	348	8	Frequency.java	getCumFreq	v	Object	0	RET	c.compare($, freqTable.firstKey()) < 0
1098	352	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
1098	352	8	Frequency.java	getCumFreq	c	Comparator	0	RET	$.compare(v, freqTable.lastKey()) >= 0
1098	352	8	Frequency.java	getCumFreq	v	Object	0	RET	c.compare($, freqTable.lastKey()) >= 0
41703	357	8	Frequency.java	getCumFreq	values	Iterator	0	NIL-WHILE	$.hasNext()
1099	359	12	Frequency.java	getCumFreq	nextValue	Object	1	DEF	c.compare(v, $) > 0
1099	359	12	Frequency.java	getCumFreq	c	Comparator	1	DEF	$.compare(v, nextValue) > 0
1099	359	12	Frequency.java	getCumFreq	v	Object	1	DEF	c.compare($, nextValue) > 0
1100	419	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
1103	80	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
1227	90	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
1227	90	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
41817	96	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ > 0
1228	158	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
1228	158	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
1228	158	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
1228	158	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
1229	160	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
1230	162	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x > $
1230	162	15	Gamma.java	regularizedGammaP	a	double	1	DEF	$ >= 1.0
1230	162	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ > a
41818	171	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
41818	171	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	Math.abs($) > epsilon
41818	171	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	Math.abs(an) > $
41818	171	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
1231	179	12	Gamma.java	regularizedGammaP	n	double	1	MaxIterationsExceededException	$ >= maxIterations
1231	179	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxIterationsExceededException	n >= $
1232	233	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
1232	233	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
1232	233	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
1232	233	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
1233	235	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
1234	237	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ < 1.0
1234	237	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $
1234	237	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a
376	72	8	GammaDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
377	97	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
378	100	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
379	112	8	GammaDistributionImpl.java	setAlpha	alpha	double	0	IllegalArgumentException	$ <= 0.0
380	132	8	GammaDistributionImpl.java	setBeta	beta	double	0	IllegalArgumentException	$ <= 0.0
381	153	8	GammaDistributionImpl.java	density	x	Double	0	RET	$ < 0
382	189	8	GammaDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
383	215	8	GammaDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
41752	172	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	$.getCostEvaluations() < 2
41752	172	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs(previous - $.cost) > ($.cost * $.steadyStateThreshold)
41752	172	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs($.cost) > $.convergence
41752	172	8	GaussNewtonEstimator.java	estimate	previous	double	0	NIL-DOWHILE	Math.abs($ - cost) > (cost * steadyStateThreshold)
41753	178	12	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.measurements.$.length
41753	178	12	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < measurements.length
1187	179	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	DEF	$.measurements [i].isIgnored()
1187	179	16	GaussNewtonEstimator.java	estimate	i	int	0	DEF	measurements [$].isIgnored()
41754	185	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	j < $.parameters.$.length
41754	185	20	GaussNewtonEstimator.java	estimate	j	int	0	NIL-FOR	$ < parameters.length
41755	191	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	k < $.parameters.$.length
41755	191	20	GaussNewtonEstimator.java	estimate	k	int	0	NIL-FOR	$ < parameters.length
41756	193	24	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	l < $.parameters.$.length
41756	193	24	GaussNewtonEstimator.java	estimate	l	int	0	NIL-FOR	$ < parameters.length
41757	211	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.parameters.$.length
41757	211	16	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < parameters.length
41620	71	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
41621	84	12	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.rows
41621	84	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < rows
41622	92	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	j < $.cols
41622	92	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
41623	97	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	k < $.cols
41623	97	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
41624	100	20	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	l < $.cols
41624	100	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < cols
41625	117	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.cols
41625	117	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < cols
906	126	12	GaussNewtonOptimizer.java	doOptimize	previous	VectorialPointValuePair	0	DEF	$ != null
41750	51	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
41750	51	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
41751	128	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $ .getPopulationLimit()
1184	134	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	Math.random() < $.getCrossoverRate()
1185	141	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	Math.random() < $.getMutationRate()
1186	152	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $ .getPopulationLimit()
985	105	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
986	193	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	DEF	$.getN() > 0
41927	101	4	GillStepInterpolator.java	computeInterpolatedState	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41927	101	4	GillStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
1261	176	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stabilityReduction	double	1	DEF	$ < 0.0001
1261	176	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stabilityReduction	double	1	DEF	$ > 0.9999
1262	211	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl1	double	1	DEF	$ > 0.9999
1262	211	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl1	double	1	DEF	$ < 0.0001
1263	217	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl2	double	1	DEF	$ > 0.9999
1263	217	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl2	double	1	DEF	$ < 0.0001
1264	223	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl3	double	1	DEF	$ > 0.9999
1264	223	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl3	double	1	DEF	$ < 0.0001
1265	229	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl4	double	1	DEF	$ > 999.9
1265	229	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl4	double	1	DEF	$ < 1.0001
1266	263	4	GraggBulirschStoerIntegrator.java	setOrderControl	maxOrder	int	0	DEF	$ % 2 != 0
1266	263	4	GraggBulirschStoerIntegrator.java	setOrderControl	maxOrder	int	0	DEF	$ <= 6
1267	267	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl1	double	1	DEF	$ < 0.0001
1267	267	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl1	double	1	DEF	$ > 0.9999
1268	273	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl2	double	1	DEF	$ < 0.0001
1268	273	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl2	double	1	DEF	$ > 0.9999
1269	315	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
1269	315	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
1269	315	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
1270	324	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
41871	326	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
41871	326	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
41872	331	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
41872	331	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
41873	339	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
41873	339	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
41874	344	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
41874	344	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
41875	346	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
41875	346	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
1271	369	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudif	int	1	DEF	$ >= 7
1271	369	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudif	int	1	DEF	$ <= 0
1272	383	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
41876	384	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
41876	384	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
41876	384	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
41877	389	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
41877	389	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
41877	389	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
41878	427	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
41878	427	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
41878	427	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
41879	434	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
41879	434	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
1273	436	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
1273	436	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
41880	442	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
41880	442	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
41880	442	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
1274	451	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
1274	451	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
1274	451	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
1274	451	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
1274	451	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
41881	453	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
41881	453	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
41881	453	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
41882	458	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
41882	458	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
41882	458	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
1275	462	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * Math.max(1.0e-15, $)
1275	462	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * Math.max(1.0e-15, initialNorm)
41883	470	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
41883	470	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
41883	470	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
41884	489	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
41884	489	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
41885	490	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
41885	490	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
41885	490	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
41886	498	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
41886	498	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
41886	498	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
41887	521	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
41887	521	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
41888	527	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
41888	527	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
41889	534	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
41889	534	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
41889	534	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
1276	540	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1276	540	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1277	546	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
41890	549	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < yMidDots.$.length
41890	549	6	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < yMidDots.length
41890	549	6	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	0	NIL-FOR	j < $.length
1278	570	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
1278	570	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
41891	591	4	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
1279	596	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
1280	601	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
1281	605	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1282	611	10	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1283	624	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
1283	624	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
1283	624	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1283	624	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1283	624	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
1283	624	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
41892	633	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1284	638	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep(equations, $.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1284	638	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(equations, stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
1284	638	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
1284	638	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
1284	638	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1284	638	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
1284	638	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1284	638	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1284	638	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1284	638	8	GraggBulirschStoerIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	1	DEF	tryStep($, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1284	638	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(equations, stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1285	651	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
41893	660	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < y0.$.length
41893	660	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
41893	660	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1286	666	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
1286	666	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
1286	666	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
1286	666	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
1287	687	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1287	687	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1288	690	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1289	699	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1289	699	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1290	705	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1290	705	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1290	705	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1291	717	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1292	725	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1292	725	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1293	730	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1293	730	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1293	730	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1294	741	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
1295	743	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1295	743	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1295	743	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1296	754	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
1296	754	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1296	754	16	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1297	768	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.denseOutput
1297	768	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
41894	771	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
41894	771	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
41895	780	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
41895	780	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
41896	786	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
41896	786	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
41896	786	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
41897	789	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
41897	789	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
41897	789	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
41898	792	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
41898	792	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
41898	792	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
41899	797	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
41899	797	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
41899	797	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
41900	802	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
41900	802	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
41901	803	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
41901	803	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
41902	804	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
41902	804	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
41902	804	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
1298	812	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
1299	819	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
1300	824	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
1301	831	10	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1302	833	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.evaluateStep(interpolator)
1302	833	12	GraggBulirschStoerIntegrator.java	integrate	interpolator	AbstractStepInterpolator	0	DEF	eventsHandlersManager.evaluateStep($)
1303	841	8	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1304	849	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1305	856	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.stop()
1306	867	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.reset($.stepStart, y)
1306	867	8	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1306	867	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	eventsHandlersManager.reset(stepStart, $)
1307	874	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
1308	876	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1309	879	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
1309	879	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
1310	881	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
1310	881	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1311	883	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1311	883	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1312	888	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
1312	888	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
1312	888	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
1313	892	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
1313	892	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
1313	892	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
1314	897	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
1315	904	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
1315	904	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
1316	907	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1316	907	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1316	907	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
1316	907	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
1317	926	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1318	932	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
1348	112	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
1349	119	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms != null
41962	121	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
41962	121	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
41962	121	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
41963	125	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
41963	125	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
41963	125	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
1350	132	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
41964	136	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
41964	136	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
41965	140	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
41965	140	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
1351	211	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynoms == null
1351	211	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms == null
41966	216	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynoms.$.length
41966	216	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynoms.length
1352	239	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms.$.length <= (mu + 4)
1352	239	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms == null
1352	239	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynoms.length <= ($ + 4)
41967	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
41967	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
1353	258	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
1354	266	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
1355	270	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
1356	274	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
41968	278	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
41968	278	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
1357	298	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
41969	299	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
41969	299	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < currentState.length
41970	325	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < dimension
41970	325	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	dimension	int	0	NIL-FOR	i < $
1358	334	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
41971	337	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	j	int	0	NIL-FOR	$ > 3
1359	348	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
41972	368	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
41972	368	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
41973	369	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
41973	369	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
41974	390	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
41974	390	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
41975	391	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
41975	391	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
41992	114	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < y0.$.length
41992	114	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
41992	114	4	HighamHall54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
41993	116	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < $.staticE.$.length
41993	116	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < staticE.length
41991	85	4	HighamHall54StepInterpolator.java	computeInterpolatedState	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41991	85	4	HighamHall54StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
447	55	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	IllegalArgumentException	numberOfSuccesses > $
447	55	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	numberOfSuccesses	int	0	IllegalArgumentException	$ > populationSize
448	60	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	IllegalArgumentException	sampleSize > $
448	60	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	sampleSize	int	0	IllegalArgumentException	$ > populationSize
449	83	8	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
449	83	8	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
450	85	15	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
450	85	15	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
451	197	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x > $[1]
451	197	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x < $[0]
451	197	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ > domain[1]
451	197	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ < domain[0]
452	228	8	HypergeometricDistributionImpl.java	setNumberOfSuccesses	num	int	0	IllegalArgumentException	$ < 0
453	241	8	HypergeometricDistributionImpl.java	setPopulationSize	size	int	0	IllegalArgumentException	$ <= 0
454	254	8	HypergeometricDistributionImpl.java	setSampleSize	size	int	0	IllegalArgumentException	$ < 0
455	275	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x < $[0]
455	275	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ < domain[0]
456	277	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
456	277	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
40943	303	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
40943	303	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
980	92	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
981	106	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
982	108	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
982	108	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
983	126	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
984	164	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
984	164	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
984	164	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
984	164	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
984	164	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
41669	175	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
41669	175	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
41669	175	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
796	89	8	LUDecompositionImpl.java	LUDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
41512	101	8	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
41512	101	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
41513	108	8	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	$ < m
41513	108	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	col < $
41514	113	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < col
41514	113	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	row < $
41515	116	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < row
41515	116	16	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	i < $
41516	125	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
41516	125	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
41517	128	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < col
41517	128	16	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	i < $
797	134	16	LUDecompositionImpl.java	LUDecompositionImpl	sum	double	0	DEF	Math.abs($) > largest
797	134	16	LUDecompositionImpl.java	LUDecompositionImpl	largest	double	0	DEF	Math.abs(sum) > $
798	141	12	LUDecompositionImpl.java	LUDecompositionImpl	THIS	LUDecompositionImpl	0	RET	Math.abs($.lu[max][col]) < singularityThreshold
798	141	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	RET	Math.abs(lu[$][col]) < singularityThreshold
798	141	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	RET	Math.abs(lu[max][$]) < singularityThreshold
798	141	12	LUDecompositionImpl.java	LUDecompositionImpl	singularityThreshold	double	0	RET	Math.abs(lu[max][col]) < $
799	147	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	DEF	$ != col
799	147	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	DEF	max != $
41518	149	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < m
41518	149	16	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	i < $
41519	162	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
41519	162	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
800	171	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.cachedL == null
800	171	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.singular
41520	174	12	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
41520	174	12	LUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
41521	176	16	LUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
41521	176	16	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
801	187	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.cachedU == null
801	187	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.singular
41522	190	12	LUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
41522	190	12	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
41523	192	16	LUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
41523	192	16	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
802	202	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.cachedP == null
802	202	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.singular
41524	205	12	LUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
41524	205	12	LUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
803	219	8	LUDecompositionImpl.java	getDeterminant	THIS	LUDecompositionImpl	1	RET	$.singular
41525	224	12	LUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
41525	224	12	LUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
1473	64	8	LaguerreSolver.java	LaguerreSolver	f	UnivariateRealFunction	1	DEF	$ instanceof PolynomialFunction
1474	124	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1474	124	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1475	125	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1475	125	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1476	126	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1476	126	8	LaguerreSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1477	130	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	1	RET	$.isBracketing(min, initial, f)
1477	130	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1477	130	8	LaguerreSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1477	130	8	LaguerreSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1478	162	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	DEF	$ instanceof PolynomialFunction
1479	167	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1479	167	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1480	168	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1480	168	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
42037	173	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < coefficients.$.length
42037	173	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < coefficients.length
42037	173	8	LaguerreSolver.java	solve	coefficients	double[]	0	NIL-FOR	i < $.length
1481	178	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, z)
1481	178	8	LaguerreSolver.java	solve	z	Complex	0	RET	isRootOK(min, max, $)
1481	178	8	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, z)
1481	178	8	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, z)
42038	185	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
42038	185	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < root.length
42038	185	8	LaguerreSolver.java	solve	root	Complex[]	0	NIL-FOR	i < $.length
1482	186	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, root[i])
1482	186	12	LaguerreSolver.java	solve	i	int	0	RET	isRootOK(min, max, root[$])
1482	186	12	LaguerreSolver.java	solve	root	Complex[]	0	RET	isRootOK(min, max, $[i])
1482	186	12	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, root[i])
1482	186	12	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, root[i])
42039	230	8	LaguerreSolver.java	solveAll	THIS	LaguerreSolver	0	NIL-FOR	i < c.$.length
42039	230	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < c.length
42039	230	8	LaguerreSolver.java	solveAll	c	Complex[]	0	NIL-FOR	i < $.length
1483	254	8	LaguerreSolver.java	solveAll	n	int	0	IllegalArgumentException	$ < 1
42040	259	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ <= n
42040	259	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i <= $
42041	265	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < n
42041	265	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i < $
42042	272	12	LaguerreSolver.java	solveAll	j	int	0	NIL-FOR	$ >= 0
1484	302	8	LaguerreSolver.java	solve	n	int	0	IllegalArgumentException	$ < 1
42043	320	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-WHILE	i <= $.maximalIterationCount
42043	320	8	LaguerreSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
42044	326	12	LaguerreSolver.java	solve	j	int	0	NIL-FOR	$ >= 0
1485	336	12	LaguerreSolver.java	solve	tolerance	double	0	RET	(z.subtract(oldz)).abs() <= $
1485	336	12	LaguerreSolver.java	solve	z	Complex	0	RET	($.subtract(oldz)).abs() <= tolerance
1485	336	12	LaguerreSolver.java	solve	oldz	Complex	0	RET	(z.subtract($)).abs() <= tolerance
1486	341	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	pv.abs() <= $.functionValueAccuracy
1486	341	12	LaguerreSolver.java	solve	pv	Complex	0	RET	$.abs() <= functionValueAccuracy
1487	359	12	LaguerreSolver.java	solve	denominator	Complex	1	DEF	$.equals(new Complex(0.0, 0.0))
852	117	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DEF	observations.$.length != weights.$.length
852	117	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DEF	$.length != weights.length
852	117	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DEF	observations.length != $.length
853	150	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DEF	observations.$.length != scale.getColumnDimension()
853	150	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DEF	$.length != scale.getColumnDimension()
853	150	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DEF	observations.length != $.getColumnDimension()
854	166	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	FunctionEvaluationException	residuals.$.length != $.observations.$.length
854	166	8	LeastSquaresConverter.java	value	residuals	double[]	0	FunctionEvaluationException	$.length != observations.length
41550	170	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
41550	170	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
41550	170	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
855	176	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
41551	177	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
41551	177	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
41551	177	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
856	181	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
42078	178	8	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	NIL-FOR	i < $.maximalIterationCount
42078	178	8	LegendreGaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < maximalIterationCount
1554	190	12	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	RET	i + 1 >= $.minimalIterationCount
1554	190	12	LegendreGaussIntegrator.java	integrate	delta	double	0	RET	$ <= limit
1554	190	12	LegendreGaussIntegrator.java	integrate	limit	double	0	RET	delta <= $
1554	190	12	LegendreGaussIntegrator.java	integrate	i	int	0	RET	$ + 1 >= minimalIterationCount
42079	227	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
42079	227	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
42080	228	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
42080	228	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
41767	242	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
41767	242	6	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < solvedCols
1191	247	6	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
41768	252	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
41768	252	8	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
1192	254	10	LevenbergMarquardtEstimator.java	estimate	dk	double	0	DEF	$ == 0
1193	270	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.cost != 0
41769	271	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41769	271	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1194	274	10	LevenbergMarquardtEstimator.java	estimate	s	double	0	DEF	$ != 0
41770	276	12	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
41770	276	12	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
1195	283	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	maxCosine <= $.orthoTolerance
1195	283	6	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	RET	$ <= orthoTolerance
41771	288	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
41771	288	6	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < cols
41772	293	6	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	NIL-FOR	$ < 1.0e-4
41773	296	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41773	296	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
41774	310	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41774	310	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1196	320	8	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
1197	329	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost < previousCost
1197	329	8	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost < $
41775	336	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41775	336	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
41776	340	10	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
41776	340	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
41777	345	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41777	345	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1198	358	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ <= 0.25
1199	361	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost >= previousCost
1199	361	10	LevenbergMarquardtEstimator.java	estimate	tmp	double	0	DEF	$ < 0.1
1199	361	10	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost >= $
1200	366	15	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
1200	366	15	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	DEF	$ >= 0.75
1201	372	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ >= 1.0e-4
41778	376	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
41778	376	10	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
41779	384	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41779	384	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1202	394	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	delta <= $.parRelativeTolerance * xNorm
1202	394	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	preRed <= $.costRelativeTolerance
1202	394	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	Math.abs(actRed) <= $.costRelativeTolerance
1202	394	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	0	RET	Math.abs($) <= costRelativeTolerance
1202	394	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	0	RET	$ <= costRelativeTolerance
1202	394	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	RET	$ <= 2.0
1202	394	8	LevenbergMarquardtEstimator.java	estimate	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1202	394	8	LevenbergMarquardtEstimator.java	estimate	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1203	403	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	1	EstimationException	Math.abs($) <= 2.2204e-16
1203	403	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	1	EstimationException	$ <= 2.2204e-16
1203	403	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	EstimationException	$ <= 2.0
1204	408	15	LevenbergMarquardtEstimator.java	estimate	delta	double	1	EstimationException	$ <= 2.2204e-16 * xNorm
1204	408	15	LevenbergMarquardtEstimator.java	estimate	xNorm	double	1	EstimationException	delta <= 2.2204e-16 * $
1205	413	15	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	EstimationException	$ <= 2.2204e-16
41780	452	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.rank
41780	452	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
41781	455	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
41781	455	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
41782	458	4	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
41783	461	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
41783	461	6	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	i < $
41784	470	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41784	470	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1206	478	4	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1206	478	4	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1207	487	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.rank == $.solvedCols
41785	488	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41785	488	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
41786	493	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41786	493	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
41787	496	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
41787	496	8	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i < $
41788	508	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41788	508	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
41789	511	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
41789	511	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1208	519	4	LevenbergMarquardtEstimator.java	determineLMParameter	paru	double	0	DEF	$ == 0
1209	527	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
41790	531	4	LevenbergMarquardtEstimator.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1210	534	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
41791	538	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41791	538	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
41792	545	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41792	545	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1211	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1211	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1211	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1211	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	Math.abs($) <= 0.1 * delta
1211	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	parl	double	0	RET	$ == 0
1211	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	Math.abs(fp) <= 0.1 * $
41793	563	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41793	563	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
41794	567	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41794	567	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
41795	571	8	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
41795	571	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
41796	576	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41796	576	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1212	583	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	1	DEF	$ > 0
1213	585	13	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	DEF	$ < 0
41797	620	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41797	620	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
41798	622	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
41798	622	6	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
41799	630	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41799	630	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1214	636	6	LevenbergMarquardtEstimator.java	determineLMDirection	dpj	double	0	DEF	$ != 0
41800	645	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
41800	645	6	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1215	650	8	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1215	650	8	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1216	654	10	LevenbergMarquardtEstimator.java	determineLMDirection	rkk	double	1	DEF	Math.abs($) < Math.abs(lmDiag[k])
1216	654	10	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	1	DEF	Math.abs(rkk) < Math.abs(lmDiag[$])
1216	654	10	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	1	DEF	Math.abs(rkk) < Math.abs($[k])
41801	672	10	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
41801	672	10	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
41802	693	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
41802	693	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1217	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing == $.solvedCols
1217	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1217	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1217	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1218	697	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing < $.solvedCols
1218	697	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1219	701	4	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ > 0
41803	702	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
41804	705	8	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
41804	705	8	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
41805	713	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.lmDir.$.length
41805	713	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
41806	744	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
41806	744	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
41807	747	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
41807	747	6	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
41808	755	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
41808	755	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
41809	760	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.cols
41809	760	6	LevenbergMarquardtEstimator.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
41810	763	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
41810	763	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
1220	767	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isNaN($)
1220	767	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isInfinite($)
1221	772	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1221	772	8	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1222	777	6	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	RET	$ == 0
41811	797	6	LevenbergMarquardtEstimator.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
41812	800	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
41812	800	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
41813	804	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
41813	804	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
41814	821	4	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
41814	821	4	LevenbergMarquardtEstimator.java	qTy	k	int	0	NIL-FOR	$ < cols
41815	825	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
41815	825	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
41816	829	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
41816	829	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
41553	252	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
41553	252	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
858	257	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
41554	262	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
41554	262	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
859	264	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
860	280	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.cost != 0
41555	281	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41555	281	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
861	284	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
41556	286	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
41556	286	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
862	293	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
862	293	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
41557	299	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
41557	299	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
41558	304	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
41559	307	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41559	307	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
41560	321	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41560	321	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
863	331	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
864	340	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost < previousCost
864	340	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost < $
41561	347	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41561	347	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
41562	351	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
41562	351	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
41563	356	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41563	356	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
865	369	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
866	372	24	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost >= previousCost
866	372	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
866	372	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost >= $
867	377	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
867	377	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
868	383	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ >= 1.0e-4
41564	387	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
41564	387	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
41565	395	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41565	395	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
869	405	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	Math.abs(actRed) <= $.costRelativeTolerance
869	405	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
869	405	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
869	405	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	Math.abs($) <= costRelativeTolerance
869	405	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
869	405	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
869	405	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
869	405	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
870	414	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	OptimizationException	Math.abs($) <= 2.2204e-16
870	414	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	OptimizationException	$ <= 2.2204e-16
870	414	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	OptimizationException	$ <= 2.0
871	419	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	OptimizationException	$ <= 2.2204e-16 * xNorm
871	419	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	OptimizationException	delta <= 2.2204e-16 * $
872	424	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	OptimizationException	$ <= 2.2204e-16
41566	463	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
41566	463	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
41567	466	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
41567	466	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
41568	469	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
41569	472	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
41569	472	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
41570	481	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41570	481	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
873	489	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
873	489	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
874	498	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
41571	499	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41571	499	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
41572	504	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41572	504	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
41573	507	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
41573	507	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
41574	519	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41574	519	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
41575	522	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
41575	522	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
875	530	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
876	538	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
41576	542	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
877	545	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
41577	549	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41577	549	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
41578	556	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41578	556	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
878	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
878	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
878	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
878	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	Math.abs($) <= 0.1 * delta
878	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
878	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	Math.abs(fp) <= 0.1 * $
41579	574	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41579	574	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
41580	578	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41580	578	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
41581	582	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
41581	582	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
41582	587	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41582	587	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
879	594	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
880	596	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
41583	631	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41583	631	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
41584	633	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
41584	633	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
41585	641	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41585	641	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
881	647	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
41586	656	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
41586	656	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
882	661	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
882	661	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
883	665	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	Math.abs($) < Math.abs(lmDiag[k])
883	665	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	Math.abs(rkk) < Math.abs(lmDiag[$])
883	665	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	Math.abs(rkk) < Math.abs($[k])
41587	683	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
41587	683	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
41588	703	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
41588	703	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
884	704	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
884	704	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
884	704	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
884	704	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
885	707	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
885	707	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
886	711	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
41589	712	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
41590	715	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
41590	715	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
41591	723	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
41591	723	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
41592	754	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
41592	754	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
41593	757	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.jacobian.$.length
41593	757	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < jacobian.length
41594	765	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
41594	765	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
41595	770	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.cols
41595	770	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
41596	772	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.jacobian.$.length
41596	772	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < jacobian.length
887	776	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	OptimizationException	Double.isInfinite($)
887	776	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	OptimizationException	Double.isNaN($)
888	781	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
888	781	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
889	786	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ == 0
41597	805	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
41598	807	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.jacobian.$.length
41598	807	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < jacobian.length
41599	811	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.jacobian.$.length
41599	811	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < jacobian.length
41600	828	8	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
41600	828	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < cols
41601	831	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
41601	831	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
41602	835	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
41602	835	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
41533	124	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
41533	124	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
41533	124	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
0	62	12	MathException.java	translate	bundle	ResourceBundle	0	RET	$.getLocale().getLanguage().equals(locale.getLanguage())
0	62	12	MathException.java	translate	locale	Locale	0	RET	bundle.getLocale().getLanguage().equals($.getLanguage())
1126	63	12	MathRuntimeException.java	translate	bundle	ResourceBundle	0	RET	$.getLocale().getLanguage().equals(locale.getLanguage())
1126	63	12	MathRuntimeException.java	translate	locale	Locale	0	RET	bundle.getLocale().getLanguage().equals($.getLanguage())
64	81	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
64	81	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
65	114	8	MathUtils.java	addAndCheck	a	long	1	DEF	$ > b
65	114	8	MathUtils.java	addAndCheck	b	long	1	DEF	a > $
66	120	12	MathUtils.java	addAndCheck	a	long	1	ArithmeticException	$ < 0
67	121	16	MathUtils.java	addAndCheck	b	long	1	ArithmeticException	$ < 0
68	123	20	MathUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
68	123	20	MathUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
69	137	16	MathUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
69	137	16	MathUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
70	173	8	MathUtils.java	binomialCoefficient	n	int	0	IllegalArgumentException	$ < k
70	173	8	MathUtils.java	binomialCoefficient	k	int	0	IllegalArgumentException	n < $
71	177	8	MathUtils.java	binomialCoefficient	n	int	0	IllegalArgumentException	$ < 0
72	181	8	MathUtils.java	binomialCoefficient	n	int	0	RET	$ == k
72	181	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
72	181	8	MathUtils.java	binomialCoefficient	k	int	0	RET	n == $
73	184	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
73	184	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
73	184	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
74	188	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
74	188	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
75	197	8	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
40916	199	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
40916	199	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
76	202	15	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
40917	205	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
40917	205	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
40918	219	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
40918	219	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
77	250	8	MathUtils.java	binomialCoefficientDouble	n	int	0	IllegalArgumentException	$ < k
77	250	8	MathUtils.java	binomialCoefficientDouble	k	int	0	IllegalArgumentException	n < $
78	254	8	MathUtils.java	binomialCoefficientDouble	n	int	0	IllegalArgumentException	$ < 0
79	258	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
79	258	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
79	258	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
80	261	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
80	261	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
80	261	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
81	264	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
81	264	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
82	267	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
40919	272	8	MathUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
40919	272	8	MathUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
83	298	8	MathUtils.java	binomialCoefficientLog	n	int	0	IllegalArgumentException	$ < k
83	298	8	MathUtils.java	binomialCoefficientLog	k	int	0	IllegalArgumentException	n < $
84	302	8	MathUtils.java	binomialCoefficientLog	n	int	0	IllegalArgumentException	$ < 0
85	306	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
85	306	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
85	306	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
86	309	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
86	309	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
86	309	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
87	317	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
88	325	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
89	329	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
89	329	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
40920	339	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
40920	339	8	MathUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
40921	344	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
40921	344	8	MathUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
90	362	8	MathUtils.java	compareTo	THIS	MathUtils	1	RET	$.equals(x, y, eps)
90	362	8	MathUtils.java	compareTo	x	double	1	RET	equals($, y, eps)
90	362	8	MathUtils.java	compareTo	y	double	1	RET	equals(x, $, eps)
90	362	8	MathUtils.java	compareTo	eps	double	1	RET	equals(x, y, $)
91	364	15	MathUtils.java	compareTo	x	double	0	RET	$ < y
91	364	15	MathUtils.java	compareTo	y	double	0	RET	x < $
92	420	8	MathUtils.java	equals	x	double[]	0	RET	$ == null
92	420	8	MathUtils.java	equals	y	double[]	0	RET	$ == null
93	423	8	MathUtils.java	equals	THIS	MathUtils	0	RET	x.$.length != y.$.length
93	423	8	MathUtils.java	equals	x	double[]	0	RET	$.length != y.length
93	423	8	MathUtils.java	equals	y	double[]	0	RET	x.length != $.length
40922	426	8	MathUtils.java	equals	THIS	MathUtils	0	NIL-FOR	i < x.$.length
40922	426	8	MathUtils.java	equals	i	int	0	NIL-FOR	$ < x.length
40922	426	8	MathUtils.java	equals	x	double[]	0	NIL-FOR	i < $.length
94	427	12	MathUtils.java	equals	THIS	MathUtils	0	RET	$.equals(x[i], y[i])
94	427	12	MathUtils.java	equals	i	int	0	RET	equals(x[$], y[$])
94	427	12	MathUtils.java	equals	x	double[]	0	RET	equals($[i], y[i])
94	427	12	MathUtils.java	equals	y	double[]	0	RET	equals(x[i], $[i])
95	464	8	MathUtils.java	factorial	n	int	0	IllegalArgumentException	$ < 0
96	467	8	MathUtils.java	factorial	n	int	0	ArithmeticException	$ > 20
97	495	8	MathUtils.java	factorialDouble	n	int	0	IllegalArgumentException	$ < 0
98	498	8	MathUtils.java	factorialDouble	n	int	0	RET	$ < 21
99	518	8	MathUtils.java	factorialLog	n	int	0	IllegalArgumentException	$ < 0
100	521	8	MathUtils.java	factorialLog	n	int	0	RET	$ < 21
40923	525	8	MathUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
40923	525	8	MathUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
101	564	8	MathUtils.java	gcd	u	int	0	RET	$ == 0
101	564	8	MathUtils.java	gcd	v	int	0	RET	$ == 0
102	565	12	MathUtils.java	gcd	u	int	0	DEF	$ == Integer.MIN_VALUE
102	565	12	MathUtils.java	gcd	v	int	0	DEF	$ == Integer.MIN_VALUE
103	577	8	MathUtils.java	gcd	u	int	0	DEF	$ > 0
104	580	8	MathUtils.java	gcd	v	int	0	DEF	$ > 0
40924	585	8	MathUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
40924	585	8	MathUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
40924	585	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
105	591	8	MathUtils.java	gcd	k	int	0	DEF	$ == 31
40925	601	8	MathUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
40926	604	12	MathUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
106	608	12	MathUtils.java	gcd	t	int	1	DEF	$ > 0
107	662	8	MathUtils.java	indicator	x	double	0	RET	Double.isNaN($)
108	676	8	MathUtils.java	indicator	x	float	0	RET	Float.isNaN($)
109	737	8	MathUtils.java	lcm	a	int	0	RET	$==0
109	737	8	MathUtils.java	lcm	b	int	0	RET	$==0
110	741	8	MathUtils.java	lcm	lcm	int	0	ArithmeticException	$ == Integer.MIN_VALUE
111	779	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ < Integer.MIN_VALUE
111	779	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ > Integer.MAX_VALUE
112	798	8	MathUtils.java	mulAndCheck	a	long	1	DEF	$ > b
112	798	8	MathUtils.java	mulAndCheck	b	long	1	DEF	a > $
113	802	12	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ < 0
114	803	16	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ < 0
115	805	20	MathUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
115	805	20	MathUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
116	810	23	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ > 0
117	812	20	MathUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
117	812	20	MathUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
118	822	19	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ > 0
119	827	16	MathUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
119	827	16	MathUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
120	860	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isInfinite($)
120	860	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isNaN($)
121	862	15	MathUtils.java	nextAfter	d	double	0	RET	$ == 0
122	874	8	MathUtils.java	nextAfter	d	double	1	RET	$ * (direction - $) >= 0
122	874	8	MathUtils.java	nextAfter	direction	double	1	RET	d * ($ - d) >= 0
123	876	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0x000fffffffffffffL
124	885	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0L
125	909	8	MathUtils.java	scalb	d	double	0	RET	Double.isNaN($)
125	909	8	MathUtils.java	scalb	d	double	0	RET	Double.isInfinite($)
125	909	8	MathUtils.java	scalb	d	double	0	RET	$ == 0
126	979	12	MathUtils.java	round	x	double	1	RET	Double.isInfinite($)
127	1034	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
128	1044	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
129	1053	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
130	1062	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
131	1064	19	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
132	1068	16	MathUtils.java	roundUnscaled	unscaled	double	1	DEF	Math.floor($) / 2.0 == Math.floor(Math .floor($) / 2.0)
133	1080	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
134	1088	12	MathUtils.java	roundUnscaled	unscaled	double	0	ArithmeticException	$ != Math.floor($)
135	1128	8	MathUtils.java	sign	x	double	0	RET	Double.isNaN($)
136	1146	8	MathUtils.java	sign	x	float	0	RET	Float.isNaN($)
137	1218	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
137	1218	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
138	1237	8	MathUtils.java	subAndCheck	b	long	1	ArithmeticException	$ == Long.MIN_VALUE
139	1238	12	MathUtils.java	subAndCheck	a	long	1	DEF	$ < 0
140	1260	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
40927	1268	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
141	1269	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
142	1290	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
40928	1298	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
143	1299	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
144	1320	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
40929	1328	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
145	1329	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
146	1350	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
40930	1358	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
147	1359	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
148	1380	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
149	1400	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
40931	1408	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
150	1409	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
151	1430	8	MathUtils.java	pow	e	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
40932	1438	8	MathUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
152	1439	12	MathUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
41192	74	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
41192	74	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
41193	90	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
41193	90	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
41193	90	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
41194	182	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
41194	182	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
41195	200	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
41195	200	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
41196	234	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
41196	234	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
41197	252	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
41197	252	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
41198	270	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
41198	270	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
41199	288	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
41199	288	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
41200	306	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
41200	306	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
41201	322	8	MatrixUtils.java	createBigIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
41201	322	8	MatrixUtils.java	createBigIdentityMatrix	dimension	int	0	NIL-FOR	row < $
1023	72	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
1023	72	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
1023	72	8	Max.java	increment	d	double	0	DEF	$ > value
1024	127	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
1024	127	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1024	127	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
1024	127	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
41674	129	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
41674	129	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
41674	129	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1025	130	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1025	130	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
968	106	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
969	116	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
970	154	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
970	154	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
970	154	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
970	154	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
41662	163	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
41662	163	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
41662	163	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
41976	87	4	MidpointStepInterpolator.java	computeInterpolatedState	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41976	87	4	MidpointStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
1020	74	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
1020	74	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
1020	74	8	Min.java	increment	d	double	0	DEF	$ < value
1021	129	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
1021	129	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1021	129	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
1021	129	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
41673	131	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
41673	131	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
41673	131	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1022	132	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1022	132	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1443	99	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1443	99	8	MullerSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1444	100	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1444	100	8	MullerSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1445	101	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1445	101	8	MullerSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1446	105	8	MullerSolver.java	solve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial, f)
1446	105	8	MullerSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1446	105	8	MullerSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1446	105	8	MullerSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1447	153	8	MullerSolver.java	solve	y0	double	0	RET	$ == 0.0
1448	154	8	MullerSolver.java	solve	y2	double	0	RET	$ == 0.0
42031	159	8	MullerSolver.java	solve	THIS	MullerSolver	0	NIL-WHILE	i <= $.maximalIterationCount
42031	159	8	MullerSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1449	178	12	MullerSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1449	178	12	MullerSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1449	178	12	MullerSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1450	182	12	MullerSolver.java	solve	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1450	182	12	MullerSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1451	195	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
1452	205	16	MullerSolver.java	solve	ym	double	1	DEF	MathUtils.sign(y0) + MathUtils.sign($) == 0.0
1452	205	16	MullerSolver.java	solve	y0	double	1	DEF	MathUtils.sign($) + MathUtils.sign(ym) == 0.0
1453	293	8	MullerSolver.java	solve2	y0	double	0	RET	$ == 0.0
1454	294	8	MullerSolver.java	solve2	y1	double	0	RET	$ == 0.0
42032	299	8	MullerSolver.java	solve2	THIS	MullerSolver	0	NIL-WHILE	i <= $.maximalIterationCount
42032	299	8	MullerSolver.java	solve2	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1455	306	12	MullerSolver.java	solve2	delta	double	1	DEF	$ >= 0.0
1456	315	12	MullerSolver.java	solve2	denominator	double	1	DEF	$ != 0
42033	319	16	MullerSolver.java	solve2	x1	double	0	NIL-WHILE	x == $
42033	319	16	MullerSolver.java	solve2	x2	double	0	NIL-WHILE	x == $
42033	319	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x1
42033	319	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x2
1457	331	12	MullerSolver.java	solve2	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1457	331	12	MullerSolver.java	solve2	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1457	331	12	MullerSolver.java	solve2	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1458	335	12	MullerSolver.java	solve2	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1458	335	12	MullerSolver.java	solve2	y	double	0	RET	Math.abs($) <= functionValueAccuracy
917	76	12	MultiDirectional.java	iterateSimplex	best	RealPointValuePair	0	RET	comparator.compare(reflected, $) < 0
917	76	12	MultiDirectional.java	iterateSimplex	reflected	RealPointValuePair	0	RET	comparator.compare($, best) < 0
917	76	12	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(reflected, best) < 0
918	81	16	MultiDirectional.java	iterateSimplex	expanded	RealPointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
918	81	16	MultiDirectional.java	iterateSimplex	reflected	RealPointValuePair	0	DEF	comparator.compare($, expanded) <= 0
918	81	16	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
919	92	12	MultiDirectional.java	iterateSimplex	best	RealPointValuePair	0	RET	comparator.compare(contracted, $) < 0
919	92	12	MultiDirectional.java	iterateSimplex	contracted	RealPointValuePair	0	RET	comparator.compare($, best) < 0
919	92	12	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(contracted, best) < 0
41636	120	8	MultiDirectional.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ <= n
41636	120	8	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	i <= $
41637	123	12	MultiDirectional.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < n
41637	123	12	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	j < $
804	119	8	MultiStartDifferentiableMultivariateRealOptimizer.java	getOptima	THIS	MultiStartDifferentiableMultivariateRealOptimizer	0	DEF	$.optima == null
41526	172	8	MultiStartDifferentiableMultivariateRealOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateRealOptimizer	0	NIL-FOR	i < $.starts
41526	172	8	MultiStartDifferentiableMultivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
805	205	8	MultiStartDifferentiableMultivariateRealOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateRealOptimizer	0	OptimizationException	$.optima[0] == null
909	120	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	getOptima	THIS	MultiStartDifferentiableMultivariateVectorialOptimizer	0	DEF	$.optima == null
41626	173	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateVectorialOptimizer	0	NIL-FOR	i < $.starts
41626	173	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
910	212	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateVectorialOptimizer	0	OptimizationException	$.optima[0] == null
824	113	8	MultiStartMultivariateRealOptimizer.java	getOptima	THIS	MultiStartMultivariateRealOptimizer	0	DEF	$.optima == null
41532	160	8	MultiStartMultivariateRealOptimizer.java	optimize	THIS	MultiStartMultivariateRealOptimizer	0	NIL-FOR	i < $.starts
41532	160	8	MultiStartMultivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
825	192	8	MultiStartMultivariateRealOptimizer.java	optimize	THIS	MultiStartMultivariateRealOptimizer	0	OptimizationException	$.optima[0] == null
806	169	8	MultiStartUnivariateRealOptimizer.java	getOptima	THIS	MultiStartUnivariateRealOptimizer	0	DEF	$.optima == null
41527	192	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	NIL-FOR	i < $.starts
41527	192	8	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
41528	210	8	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < lastNaN
41528	210	8	MultiStartUnivariateRealOptimizer.java	optimize	lastNaN	int	0	NIL-FOR	i < $
807	211	12	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	DEF	Double.isNaN($.optima[i])
807	211	12	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	DEF	Double.isNaN(optima[$])
808	217	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	DEF	goalType == $.GoalType.MAXIMIZE
808	217	8	MultiStartUnivariateRealOptimizer.java	optimize	goalType	GoalType	0	DEF	$ == GoalType.MAXIMIZE
41529	218	12	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < j
41529	218	12	MultiStartUnivariateRealOptimizer.java	optimize	j	int	0	NIL-FOR	i < $
809	225	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	OptimizationException	Double.isNaN($.optima[0])
42018	164	8	MultistepIntegrator.java	start	THIS	MultistepIntegrator	0	NIL-DOWHILE	Double.isNaN($.resetTime)
1419	169	12	MultistepIntegrator.java	start	THIS	MultistepIntegrator	0	DEF	Double.isNaN($.resetTime)
1420	179	8	MultistepIntegrator.java	start	store	StoringStepHandler	0	DEF	$.getFinalState() != null
42019	190	8	MultistepIntegrator.java	rotatePreviousSteps	k	int	0	NIL-FOR	$ > 0
1256	81	8	MultistepStepInterpolator.java	MultistepStepInterpolator	THIS	MultistepStepInterpolator	1	DEF	interpolator.$.currentState != null
1256	81	8	MultistepStepInterpolator.java	MultistepStepInterpolator	interpolator	MultistepStepInterpolator	1	DEF	$.currentState != null
41847	84	12	MultistepStepInterpolator.java	MultistepStepInterpolator	THIS	MultistepStepInterpolator	0	NIL-FOR	k < interpolator.$.previousF.$.length
41847	84	12	MultistepStepInterpolator.java	MultistepStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.previousF.length
41847	84	12	MultistepStepInterpolator.java	MultistepStepInterpolator	interpolator	MultistepStepInterpolator	0	NIL-FOR	k < $.previousF.length
41848	129	8	MultistepStepInterpolator.java	writeExternal	THIS	MultistepStepInterpolator	0	NIL-FOR	k < $.previousF.$.length
41848	129	8	MultistepStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < previousF.length
41849	131	12	MultistepStepInterpolator.java	writeExternal	THIS	MultistepStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
41849	131	12	MultistepStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentState.length
41850	150	8	MultistepStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
41850	150	8	MultistepStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
41851	153	12	MultistepStepInterpolator.java	readExternal	THIS	MultistepStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
41851	153	12	MultistepStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < currentState.length
41650	92	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
41650	92	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
41651	147	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
41651	147	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
41652	184	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
41652	184	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
41652	184	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
934	243	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
935	245	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
41653	249	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
41653	249	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
41654	331	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
41654	331	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
41654	331	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
936	332	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
41655	345	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
41655	345	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
937	365	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
937	365	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
938	368	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
939	615	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	DEF	$.n > 0
940	629	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
940	629	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
41627	94	8	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < n
41627	94	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	i < $
41628	96	12	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
41628	96	12	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
41629	101	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
41629	101	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
41630	107	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
41630	107	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
911	112	8	NelderMead.java	iterateSimplex	best	RealPointValuePair	1	DEF	comparator.compare($, reflected) <= 0
911	112	8	NelderMead.java	iterateSimplex	secondBest	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
911	112	8	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare(best, $) <= 0
911	112	8	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare($, secondBest) < 0
911	112	8	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(best, reflected) <= 0
911	112	8	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
912	118	15	NelderMead.java	iterateSimplex	best	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
912	118	15	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare($, best) < 0
912	118	15	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, best) < 0
41631	122	12	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
41631	122	12	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
913	127	12	NelderMead.java	iterateSimplex	expanded	RealPointValuePair	1	DEF	comparator.compare($, reflected) < 0
913	127	12	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare(expanded, $) < 0
913	127	12	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
914	137	12	NelderMead.java	iterateSimplex	worst	RealPointValuePair	1	RET	comparator.compare(reflected, $) < 0
914	137	12	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	RET	comparator.compare($, worst) < 0
914	137	12	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	RET	$.compare(reflected, worst) < 0
41632	141	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
41632	141	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
915	146	16	NelderMead.java	iterateSimplex	outContracted	RealPointValuePair	0	RET	comparator.compare($, reflected) <= 0
915	146	16	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
915	146	16	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
41633	156	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
41633	156	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
916	161	16	NelderMead.java	iterateSimplex	inContracted	RealPointValuePair	0	RET	comparator.compare($, worst) < 0
916	161	16	NelderMead.java	iterateSimplex	worst	RealPointValuePair	0	RET	comparator.compare(inContracted, $) < 0
916	161	16	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(inContracted, worst) < 0
41634	171	12	NelderMead.java	iterateSimplex	THIS	NelderMead	0	NIL-FOR	i < $.simplex.$.length
41634	171	12	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < simplex.length
41635	173	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
41635	173	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
42029	121	12	NewtonSolver.java	solve	THIS	NewtonSolver	0	NIL-WHILE	i < $.maximalIterationCount
42029	121	12	NewtonSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1430	124	16	NewtonSolver.java	solve	THIS	NewtonSolver	0	RET	Math.abs(x1 - x0) <= $.absoluteAccuracy
1430	124	16	NewtonSolver.java	solve	x0	double	0	RET	Math.abs(x1 - $) <= absoluteAccuracy
1430	124	16	NewtonSolver.java	solve	x1	double	0	RET	Math.abs($ - x0) <= absoluteAccuracy
896	108	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
897	122	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.preconditioner == null
898	125	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.solver == null
899	130	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.goalType == $.GoalType.MINIMIZE
41612	131	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
41612	131	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
41613	141	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
41613	141	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
900	151	16	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	$ != null
901	152	20	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	RET	$.checker.converged($.getIterations(), previous, current)
901	152	20	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	checker.converged(getIterations(), $, current)
901	152	20	NonLinearConjugateGradientOptimizer.java	doOptimize	current	RealPointValuePair	0	RET	checker.converged(getIterations(), previous, $)
41614	170	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
41614	170	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
902	174	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.goalType == $.GoalType.MINIMIZE
41615	175	20	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
41615	175	20	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
41616	184	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
41616	184	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
903	189	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
41617	193	20	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
41617	193	20	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
41617	193	20	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
904	201	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.getIterations() % n == 0
904	201	16	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
904	201	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	getIterations() % $ == 0
41618	206	20	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
41618	206	20	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
41619	232	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
905	235	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
905	235	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
41994	109	8	NordsieckTransformer.java	NordsieckTransformer	i	int	0	NIL-FOR	$ < n
41994	109	8	NordsieckTransformer.java	NordsieckTransformer	n	int	0	NIL-FOR	i < $
41995	112	12	NordsieckTransformer.java	NordsieckTransformer	j	int	0	NIL-FOR	$ < n
41995	112	12	NordsieckTransformer.java	NordsieckTransformer	n	int	0	NIL-FOR	j < $
41996	121	8	NordsieckTransformer.java	NordsieckTransformer	i	int	0	NIL-FOR	$ < n
41996	121	8	NordsieckTransformer.java	NordsieckTransformer	n	int	0	NIL-FOR	i < $
41997	124	12	NordsieckTransformer.java	NordsieckTransformer	j	int	0	NIL-FOR	$ < n
41997	124	12	NordsieckTransformer.java	NordsieckTransformer	n	int	0	NIL-FOR	j < $
41998	133	8	NordsieckTransformer.java	NordsieckTransformer	i	int	0	NIL-FOR	$ < n
41998	133	8	NordsieckTransformer.java	NordsieckTransformer	n	int	0	NIL-FOR	i < $
41999	136	12	NordsieckTransformer.java	NordsieckTransformer	j	int	0	NIL-FOR	$ < n
41999	136	12	NordsieckTransformer.java	NordsieckTransformer	n	int	0	NIL-FOR	j < $
42000	145	8	NordsieckTransformer.java	NordsieckTransformer	i	int	0	NIL-FOR	$ < n
42000	145	8	NordsieckTransformer.java	NordsieckTransformer	n	int	0	NIL-FOR	i < $
42001	148	12	NordsieckTransformer.java	NordsieckTransformer	j	int	0	NIL-FOR	$ < n
42001	148	12	NordsieckTransformer.java	NordsieckTransformer	n	int	0	NIL-FOR	j < $
42002	175	8	NordsieckTransformer.java	buildNordsieckToMultistepWithoutDerivatives	i	int	0	NIL-FOR	$ < n
42002	175	8	NordsieckTransformer.java	buildNordsieckToMultistepWithoutDerivatives	n	int	0	NIL-FOR	i < $
42003	179	12	NordsieckTransformer.java	buildNordsieckToMultistepWithoutDerivatives	j	int	0	NIL-FOR	$ < n
42003	179	12	NordsieckTransformer.java	buildNordsieckToMultistepWithoutDerivatives	n	int	0	NIL-FOR	j < $
42004	220	8	NordsieckTransformer.java	buildMultistepWithoutDerivativesToNordsieck	i	int	0	NIL-FOR	$ < n
42004	220	8	NordsieckTransformer.java	buildMultistepWithoutDerivativesToNordsieck	n	int	0	NIL-FOR	i < $
42005	227	12	NordsieckTransformer.java	buildMultistepWithoutDerivativesToNordsieck	j	int	0	NIL-FOR	$ < i
42005	227	12	NordsieckTransformer.java	buildMultistepWithoutDerivativesToNordsieck	i	int	0	NIL-FOR	j < $
42006	233	12	NordsieckTransformer.java	buildMultistepWithoutDerivativesToNordsieck	k	int	0	NIL-FOR	$ > 0
42007	240	16	NordsieckTransformer.java	buildMultistepWithoutDerivativesToNordsieck	j	int	0	NIL-FOR	$ < i
42007	240	16	NordsieckTransformer.java	buildMultistepWithoutDerivativesToNordsieck	i	int	0	NIL-FOR	j < $
42008	255	8	NordsieckTransformer.java	buildMultistepWithoutDerivativesToNordsieck	i	int	0	NIL-FOR	$ < n
42008	255	8	NordsieckTransformer.java	buildMultistepWithoutDerivativesToNordsieck	n	int	0	NIL-FOR	i < $
42009	259	12	NordsieckTransformer.java	buildMultistepWithoutDerivativesToNordsieck	j	int	0	NIL-FOR	$ < n
42009	259	12	NordsieckTransformer.java	buildMultistepWithoutDerivativesToNordsieck	n	int	0	NIL-FOR	j < $
1380	282	8	NordsieckTransformer.java	buildNordsieckToMultistep	n	int	0	DEF	$ > 1
42010	295	12	NordsieckTransformer.java	buildNordsieckToMultistep	i	int	0	NIL-FOR	$ < n
42010	295	12	NordsieckTransformer.java	buildNordsieckToMultistep	n	int	0	NIL-FOR	i < $
42011	299	16	NordsieckTransformer.java	buildNordsieckToMultistep	j	int	0	NIL-FOR	$ < n
42011	299	16	NordsieckTransformer.java	buildNordsieckToMultistep	n	int	0	NIL-FOR	j < $
1381	332	8	NordsieckTransformer.java	convertMWDtNtoMtN	n	int	0	RET	$ == 1
42012	345	8	NordsieckTransformer.java	convertMWDtNtoMtN	j	int	0	NIL-FOR	$ < n
42012	345	8	NordsieckTransformer.java	convertMWDtNtoMtN	n	int	0	NIL-FOR	j < $
42013	351	8	NordsieckTransformer.java	convertMWDtNtoMtN	i	int	0	NIL-FOR	$ < n
42013	351	8	NordsieckTransformer.java	convertMWDtNtoMtN	n	int	0	NIL-FOR	i < $
42014	354	12	NordsieckTransformer.java	convertMWDtNtoMtN	j	int	0	NIL-FOR	$ > 1
388	96	8	NormalDistributionImpl.java	setStandardDeviation	sd	double	0	IllegalArgumentException	$ <= 0.0
389	127	12	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x < ($.mean - 20 * $.standardDeviation)
389	127	12	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ < (mean - 20 * standardDeviation)
390	129	19	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x > ($.mean + 20 * $.standardDeviation)
390	129	19	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ > (mean + 20 * standardDeviation)
391	154	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
392	157	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
393	176	8	NormalDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
394	198	8	NormalDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
395	219	8	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
396	221	15	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
41706	109	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
41706	109	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
41707	110	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
41707	110	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
1104	111	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
1104	111	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
1104	111	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
1104	111	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
1105	200	8	OLSMultipleLinearRegression.java	solveUpperTriangular	THIS	OLSMultipleLinearRegression	0	IllegalArgumentException	$.isUpperTriangular(coefficients, 1E-12)
1105	200	8	OLSMultipleLinearRegression.java	solveUpperTriangular	coefficients	RealMatrix	0	IllegalArgumentException	isUpperTriangular($, 1E-12)
1106	204	8	OLSMultipleLinearRegression.java	solveUpperTriangular	constants	RealMatrix	0	IllegalArgumentException	$.getColumnDimension() != 1
41708	210	8	OLSMultipleLinearRegression.java	solveUpperTriangular	i	int	0	NIL-FOR	$ < length
41708	210	8	OLSMultipleLinearRegression.java	solveUpperTriangular	length	int	0	NIL-FOR	i < $
41709	213	12	OLSMultipleLinearRegression.java	solveUpperTriangular	j	int	0	NIL-FOR	$ < length
41709	213	12	OLSMultipleLinearRegression.java	solveUpperTriangular	length	int	0	NIL-FOR	j < $
41710	236	8	OLSMultipleLinearRegression.java	isUpperTriangular	r	int	0	NIL-FOR	$ < nRows
41710	236	8	OLSMultipleLinearRegression.java	isUpperTriangular	nRows	int	0	NIL-FOR	r < $
41711	238	12	OLSMultipleLinearRegression.java	isUpperTriangular	c	int	0	NIL-FOR	$ < bound
41711	238	12	OLSMultipleLinearRegression.java	isUpperTriangular	bound	int	0	NIL-FOR	c < $
1107	239	16	OLSMultipleLinearRegression.java	isUpperTriangular	c	int	0	RET	Math.abs(m.getEntry(r, $)) > epsilon
1107	239	16	OLSMultipleLinearRegression.java	isUpperTriangular	r	int	0	RET	Math.abs(m.getEntry($, c)) > epsilon
1107	239	16	OLSMultipleLinearRegression.java	isUpperTriangular	m	RealMatrix	0	RET	Math.abs($.getEntry(r, c)) > epsilon
1107	239	16	OLSMultipleLinearRegression.java	isUpperTriangular	epsilon	double	0	RET	Math.abs(m.getEntry(r, c)) > $
1039	102	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	IllegalArgumentException	$ <= 0
1039	102	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	IllegalArgumentException	$ > 0.5
1040	123	8	OneWayAnovaImpl.java	anovaStats	categoryData	Collection<double[]>	0	IllegalArgumentException	$.size() < 2
1041	130	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	IllegalArgumentException	$.array.$.length <= 1
41675	148	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	NIL-FOR	i < $.data.$.length
41675	148	12	OneWayAnovaImpl.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
33	152	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
34	157	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
34	157	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
35	181	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
35	181	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
35	181	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
36	185	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
36	185	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
40910	189	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
40910	189	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
37	192	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
37	192	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
37	192	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
38	210	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
38	210	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
38	210	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
39	214	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
39	214	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
40911	218	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
40911	218	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
40	221	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
40	221	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
40	221	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
41	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
41	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
42	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
42	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
42	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
42	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
42	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
43	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
43	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
44	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
44	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
44	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
44	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
44	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
45	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
45	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
46	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
46	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
47	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
47	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
48	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
48	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
48	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
48	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
48	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
49	353	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
49	353	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
49	353	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
50	357	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
50	357	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
40912	361	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
40912	361	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
51	364	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
51	364	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
51	364	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
52	409	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
53	417	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
54	419	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
40913	443	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
40913	443	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
55	444	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
55	444	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
457	77	8	PascalDistributionImpl.java	setNumberOfSuccesses	successes	int	0	IllegalArgumentException	$ < 0
458	91	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ < 0.0
458	91	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ > 1.0
459	133	8	PascalDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
460	149	8	PascalDistributionImpl.java	probability	x	int	1	DEF	$ < 0
461	178	8	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
462	180	15	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
1082	93	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	DEF	$ == null
41689	138	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
41689	138	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
41690	139	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
41690	139	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
41691	164	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
41691	164	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
41692	165	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
41692	165	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
1083	166	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
1083	166	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
41693	189	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
41693	189	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
41694	190	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
41694	190	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
1084	226	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	RET	xArray.$.length == yArray.$.length
1084	226	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	RET	xArray.$.length > 1
1084	226	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	RET	$.length == yArray.length
1084	226	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	RET	$.length > 1
1084	226	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	RET	xArray.length == $.length
41695	227	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
41695	227	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
41695	227	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
41696	253	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
41696	253	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
41697	256	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
41697	256	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
1085	275	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	DEF	$ < 2
1085	275	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	DEF	$ < 2
1026	198	8	Percentile.java	evaluate	p	double	0	IllegalArgumentException	$ <= 0
1026	198	8	Percentile.java	evaluate	p	double	0	IllegalArgumentException	$ > 100
1027	201	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
1028	204	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
1029	216	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
1030	219	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
1030	219	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
1031	246	8	Percentile.java	setQuantile	p	double	0	IllegalArgumentException	$ <= 0
1031	246	8	Percentile.java	setQuantile	p	double	0	IllegalArgumentException	$ > 100
384	90	8	PoissonDistributionImpl.java	setMean	p	double	0	IllegalArgumentException	$ <= 0
385	106	8	PoissonDistributionImpl.java	probability	x	int	0	RET	$ == Integer.MAX_VALUE
385	106	8	PoissonDistributionImpl.java	probability	x	int	0	RET	$ < 0
386	123	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ < 0
387	126	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
1525	60	8	PolynomialFunction.java	PolynomialFunction	THIS	PolynomialFunction	0	IllegalArgumentException	c.$.length < 1
1525	60	8	PolynomialFunction.java	PolynomialFunction	c	double	0	IllegalArgumentException	$.length < 1
42058	64	8	PolynomialFunction.java	PolynomialFunction	l	int	0	NIL-WHILE	$ > 1
42058	64	8	PolynomialFunction.java	PolynomialFunction	l	int	0	NIL-WHILE	c[$ - 1] == 0
42058	64	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[l - 1] == 0
1526	120	8	PolynomialFunction.java	evaluate	n	int	0	IllegalArgumentException	$ < 1
42059	124	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >=0
42060	143	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
42060	143	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
42061	169	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
42061	169	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
1527	172	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
1527	172	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
42062	173	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
42062	173	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
42063	191	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
42063	191	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
42064	206	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
42064	206	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
42064	206	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
42065	208	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < Math.min($.coefficients.$.length, i + 1)
42065	208	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < Math.min(coefficients.length, i + 1)
42065	208	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < Math.min(coefficients.length, $ + 1)
1528	229	8	PolynomialFunction.java	differentiate	n	int	0	IllegalArgumentException	$ < 1
1529	232	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
42066	236	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
1530	279	7	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
1531	280	9	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
42067	287	7	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
42067	287	7	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
1532	289	9	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
1532	289	9	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
1533	291	11	PolynomialFunction.java	toString	s	StringBuffer	1	DEF	$.length() > 0
1534	292	13	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
1534	292	13	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
1535	298	13	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
1535	298	13	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
1536	304	11	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
1537	310	11	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
1516	141	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
42048	176	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
42048	176	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
1517	182	12	PolynomialFunctionLagrangeForm.java	evaluate	dist	double	0	DEF	$ < min_dist
1517	182	12	PolynomialFunctionLagrangeForm.java	evaluate	min_dist	double	0	DEF	dist < $
42049	191	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
42049	191	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
42050	192	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	j < n-$
42050	192	12	PolynomialFunctionLagrangeForm.java	evaluate	j	int	0	NIL-FOR	$ < n-i
42050	192	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	j < $-i
1518	196	16	PolynomialFunctionLagrangeForm.java	evaluate	divider	double	0	DuplicateSampleAbscissaException	$ == 0.0
1519	206	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	1	DEF	nearest < 0.5*(n-$+1)
1519	206	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	1	DEF	nearest < 0.5*($-i+1)
1519	206	12	PolynomialFunctionLagrangeForm.java	evaluate	nearest	int	1	DEF	$ < 0.5*(n-i+1)
42051	232	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
42051	232	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
42052	239	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
42052	239	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
42053	240	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
42054	248	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
42054	248	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
42055	251	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
42055	251	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
1520	252	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
1520	252	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
1521	256	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	d	double	0	DEF	$ == 0.0
42056	258	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	NIL-FOR	$ < n
42056	258	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	k < $
1522	259	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.x[i] == $.x[k]
1522	259	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	i != $
1522	259	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	x[i] == x[$]
1522	259	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != k
1522	259	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	x[$] == x[k]
42057	271	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
1523	295	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	IllegalArgumentException	x.$.length < 2
1523	295	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	IllegalArgumentException	y.$.length < 2
1523	295	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	IllegalArgumentException	$.length < 2
1523	295	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	IllegalArgumentException	$.length < 2
1524	299	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	IllegalArgumentException	x.$.length != y.$.length
1524	299	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	IllegalArgumentException	$.length != y.length
1524	299	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	IllegalArgumentException	x.length != $.length
1539	139	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
42071	166	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
42072	181	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
42072	181	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
42073	186	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
42074	187	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
1540	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	IllegalArgumentException	a.$.length < 1
1540	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	IllegalArgumentException	c.$.length < 1
1540	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	IllegalArgumentException	$.length < 1
1540	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	IllegalArgumentException	$.length < 1
1541	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	IllegalArgumentException	a.$.length != c.$.length + 1
1541	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	IllegalArgumentException	$.length != c.length + 1
1541	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	IllegalArgumentException	a.length != $.length + 1
1509	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	IllegalArgumentException	knots.$.length < 2
1509	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	IllegalArgumentException	$.length < 2
1510	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	IllegalArgumentException	knots.$.length - 1 != polynomials.$.length
1510	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	IllegalArgumentException	$.length - 1 != polynomials.length
1510	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	IllegalArgumentException	knots.length - 1 != $.length
1511	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	IllegalArgumentException	$.isStrictlyIncreasing(knots)
1511	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	IllegalArgumentException	isStrictlyIncreasing($)
1512	137	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v > $.knots[$.n]
1512	137	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v < $.knots[0]
1512	137	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ > knots[n]
1512	137	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ < knots[0]
1513	141	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
1514	147	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
1514	147	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
42046	168	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
42046	168	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
42047	221	8	PolynomialSplineFunction.java	isStrictlyIncreasing	THIS	PolynomialSplineFunction	0	NIL-FOR	i < x.$.length
42047	221	8	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	NIL-FOR	$ < x.length
42047	221	8	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	NIL-FOR	i < $.length
1515	222	12	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	RET	x[$ - 1] >= x[$]
1515	222	12	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	RET	$[i - 1] >= $[i]
1538	198	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
1538	198	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
42068	214	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
42068	214	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
42069	234	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
42069	234	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
42070	250	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
42070	250	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
953	72	8	Product.java	increment	THIS	Product	1	DEF	$.n == 0
954	121	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length)
954	121	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length)
954	121	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length)
954	121	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $)
41660	123	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
41660	123	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
41660	123	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
321	99	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
322	102	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
323	137	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
324	148	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
325	161	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
326	169	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
327	200	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
328	208	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
329	215	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
330	219	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
331	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	DEF	$ == null
304	100	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
305	137	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
306	148	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
307	161	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
308	169	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
309	200	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
310	208	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
311	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	DEF	$ == null
41454	95	8	QRDecompositionImpl.java	QRDecompositionImpl	minor	int	0	NIL-FOR	$ < Math.min(m, n)
41454	95	8	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	minor < Math.min($, n)
41454	95	8	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	minor < Math.min(m, $)
41455	107	12	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
41455	107	12	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
696	114	12	QRDecompositionImpl.java	QRDecompositionImpl	a	double	0	DEF	$ != 0.0
41456	138	16	QRDecompositionImpl.java	QRDecompositionImpl	col	int	0	NIL-FOR	$ < n
41456	138	16	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	col < $
41457	141	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
41457	141	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
41458	147	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
41458	147	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
697	158	8	QRDecompositionImpl.java	getR	THIS	QRDecompositionImpl	0	DEF	$.cachedR == null
41459	166	12	QRDecompositionImpl.java	getR	row	int	0	NIL-FOR	$ >= 0
41460	168	16	QRDecompositionImpl.java	getR	col	int	0	NIL-FOR	$ < n
41460	168	16	QRDecompositionImpl.java	getR	n	int	0	NIL-FOR	col < $
698	182	8	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	DEF	$.cachedQ == null
699	191	8	QRDecompositionImpl.java	getQT	THIS	QRDecompositionImpl	0	DEF	$.cachedQT == null
41461	203	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= Math.min(m, n)
41461	203	12	QRDecompositionImpl.java	getQT	n	int	0	NIL-FOR	minor >= Math.min(m, $)
41461	203	12	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	minor >= Math.min($, n)
41462	207	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= 0
700	210	16	QRDecompositionImpl.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
700	210	16	QRDecompositionImpl.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
41463	211	20	QRDecompositionImpl.java	getQT	col	int	0	NIL-FOR	$ < m
41463	211	20	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	col < $
41464	213	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
41464	213	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
41465	218	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
41465	218	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
701	235	8	QRDecompositionImpl.java	getH	THIS	QRDecompositionImpl	0	DEF	$.cachedH == null
41466	240	12	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	$ < m
41466	240	12	QRDecompositionImpl.java	getH	m	int	0	NIL-FOR	i < $
41467	241	16	QRDecompositionImpl.java	getH	j	int	0	NIL-FOR	$ < Math.min(i + 1, n)
41467	241	16	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	j < Math.min($ + 1, n)
41467	241	16	QRDecompositionImpl.java	getH	n	int	0	NIL-FOR	j < Math.min(i + 1, $)
1144	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1145	135	2	RandomDataImpl.java	nextHexString	len	int	0	IllegalArgumentException	$ <= 0
41736	150	2	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
41736	150	2	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
41736	150	2	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
1146	161	3	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
1147	180	2	RandomDataImpl.java	nextInt	lower	int	0	IllegalArgumentException	$ >= upper
1147	180	2	RandomDataImpl.java	nextInt	upper	int	0	IllegalArgumentException	lower >= $
1148	200	2	RandomDataImpl.java	nextLong	lower	long	0	IllegalArgumentException	$ >= upper
1148	200	2	RandomDataImpl.java	nextLong	upper	long	0	IllegalArgumentException	lower >= $
1149	230	2	RandomDataImpl.java	nextSecureHexString	len	int	0	IllegalArgumentException	$ <= 0
41737	248	2	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
41737	248	2	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
41738	257	3	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
41738	257	3	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
41738	257	3	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
1150	268	4	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
1151	289	2	RandomDataImpl.java	nextSecureInt	lower	int	0	IllegalArgumentException	$ >= upper
1151	289	2	RandomDataImpl.java	nextSecureInt	upper	int	0	IllegalArgumentException	lower >= $
1152	309	2	RandomDataImpl.java	nextSecureLong	lower	long	0	IllegalArgumentException	$ >= upper
1152	309	2	RandomDataImpl.java	nextSecureLong	upper	long	0	IllegalArgumentException	lower >= $
1153	347	2	RandomDataImpl.java	nextPoisson	mean	double	0	IllegalArgumentException	$ <= 0
1154	354	2	RandomDataImpl.java	nextPoisson	pivot	double	1	RET	mean < $
1154	354	2	RandomDataImpl.java	nextPoisson	mean	double	1	RET	$ < pivot
41739	360	3	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
41739	360	3	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
1155	363	4	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
1155	363	4	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
41740	395	3	RandomDataImpl.java	nextPoisson	accept	boolean	0	NIL-WHILE	$
1156	399	4	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= c1
1156	399	4	RandomDataImpl.java	nextPoisson	c1	double	1	DEF	u <= $
1157	404	5	RandomDataImpl.java	nextPoisson	mu	double	0	DEF	x < -$
1157	404	5	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ < -mu
1158	407	11	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= c2
1158	407	11	RandomDataImpl.java	nextPoisson	u	double	1	DEF	c1 < $
1158	407	11	RandomDataImpl.java	nextPoisson	c1	double	1	DEF	$ < u
1158	407	11	RandomDataImpl.java	nextPoisson	c2	double	1	DEF	u <= $
1159	412	5	RandomDataImpl.java	nextPoisson	delta	double	0	DEF	x > $
1159	412	5	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ > delta
1160	415	11	RandomDataImpl.java	nextPoisson	u	double	1	DEF	c2 < $
1160	415	11	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= c3
1160	415	11	RandomDataImpl.java	nextPoisson	c2	double	1	DEF	$ < u
1160	415	11	RandomDataImpl.java	nextPoisson	c3	double	1	DEF	u <= $
1161	418	11	RandomDataImpl.java	nextPoisson	u	double	1	DEF	c3 < $
1161	418	11	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= c4
1161	418	11	RandomDataImpl.java	nextPoisson	c3	double	1	DEF	$ < u
1161	418	11	RandomDataImpl.java	nextPoisson	c4	double	1	DEF	u <= $
1162	421	11	RandomDataImpl.java	nextPoisson	u	double	0	DEF	c4 < $
1162	421	11	RandomDataImpl.java	nextPoisson	c4	double	0	DEF	$ < u
1163	449	2	RandomDataImpl.java	nextGaussian	sigma	double	0	IllegalArgumentException	$ <= 0
1164	471	2	RandomDataImpl.java	nextExponential	mean	double	0	IllegalArgumentException	$ < 0.0
41741	476	2	RandomDataImpl.java	nextExponential	unif	double	0	NIL-WHILE	$ == 0.0d
1165	499	2	RandomDataImpl.java	nextUniform	lower	double	0	IllegalArgumentException	$ >= upper
1165	499	2	RandomDataImpl.java	nextUniform	upper	double	0	IllegalArgumentException	lower >= $
41742	507	2	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
1166	524	2	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
1167	540	2	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
1168	557	2	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
1169	571	2	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
1170	587	2	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
1171	598	2	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
1172	658	2	RandomDataImpl.java	nextPermutation	n	int	0	IllegalArgumentException	k > $
1172	658	2	RandomDataImpl.java	nextPermutation	k	int	0	IllegalArgumentException	$ > n
1173	661	2	RandomDataImpl.java	nextPermutation	k	int	0	IllegalArgumentException	$ == 0
41743	668	2	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
41743	668	2	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
1174	693	2	RandomDataImpl.java	nextSample	len	int	0	IllegalArgumentException	k > $
1174	693	2	RandomDataImpl.java	nextSample	k	int	0	IllegalArgumentException	$ > len
1175	697	2	RandomDataImpl.java	nextSample	k	int	0	IllegalArgumentException	$ == 0
41744	704	2	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
41744	704	2	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
41745	723	2	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
41745	723	2	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
1176	724	3	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
41746	744	2	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
41746	744	2	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
577	115	8	RealMatrixImpl.java	RealMatrixImpl	copyArray	boolean	1	DEF	$
578	118	12	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	NullPointerException	$ == null
579	122	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	DEF	$ == 0
580	126	12	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	$ == 0
41161	129	12	RealMatrixImpl.java	RealMatrixImpl	r	int	0	NIL-FOR	$ < nRows
41161	129	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	r < $
581	130	16	RealMatrixImpl.java	RealMatrixImpl	THIS	RealMatrixImpl	0	DEF	d[r].length != nCols
581	130	16	RealMatrixImpl.java	RealMatrixImpl	r	int	0	DEF	d[$].length != nCols
581	130	16	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	d[r].length != $
581	130	16	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	DEF	$[r].length != nCols
41162	151	8	RealMatrixImpl.java	RealMatrixImpl	row	int	0	NIL-FOR	$ < nRows
41162	151	8	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	row < $
41163	196	8	RealMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
41163	196	8	RealMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
41164	200	12	RealMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
41164	200	12	RealMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
41165	236	8	RealMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
41165	236	8	RealMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
41166	240	12	RealMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
41166	240	12	RealMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
41167	277	8	RealMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
41167	277	8	RealMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
41168	280	12	RealMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
41168	280	12	RealMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
41169	282	16	RealMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
41169	282	16	RealMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
582	314	8	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	1	DEF	$.data == null
583	315	12	RealMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
584	320	12	RealMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
585	326	12	RealMatrixImpl.java	setSubMatrix	nRows	int	0	DEF	$ == 0
586	331	12	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	$ == 0
41170	335	12	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	NIL-FOR	i < $.data.$.length
41170	335	12	RealMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
587	336	16	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	DEF	subMatrix[i].length != nCols
587	336	16	RealMatrixImpl.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
587	336	16	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
587	336	16	RealMatrixImpl.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[i].length != nCols
588	419	8	RealMatrixImpl.java	operate	THIS	RealMatrixImpl	0	DEF	v.$.length != nCols
588	419	8	RealMatrixImpl.java	operate	nCols	int	0	DEF	v.length != $
588	419	8	RealMatrixImpl.java	operate	v	double[]	0	DEF	$.length != nCols
41171	425	8	RealMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
41171	425	8	RealMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
41172	428	12	RealMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
41172	428	12	RealMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
589	443	8	RealMatrixImpl.java	preMultiply	THIS	RealMatrixImpl	0	DEF	v.$.length != nRows
589	443	8	RealMatrixImpl.java	preMultiply	nRows	int	0	DEF	v.length != $
589	443	8	RealMatrixImpl.java	preMultiply	v	double[]	0	DEF	$.length != nRows
41173	450	8	RealMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
41173	450	8	RealMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
41174	452	12	RealMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
41174	452	12	RealMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
41175	469	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
41175	469	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
41176	471	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
41176	471	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
41177	485	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
41177	485	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
41178	487	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
41178	487	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
41179	503	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
41179	503	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
41180	505	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
41180	505	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
41181	521	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
41181	521	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
41182	523	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
41182	523	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
41183	537	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
41183	537	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
41184	538	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
41184	538	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
41185	553	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
41185	553	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
41186	554	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
41186	554	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
41187	570	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
41187	570	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
41188	571	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
41188	571	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
41189	588	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
41189	588	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
41190	589	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
41190	589	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
41191	605	8	RealMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
41191	605	8	RealMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
41202	214	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
41202	214	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
590	215	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
591	244	8	RealVectorFormat.java	format	obj	Object	0	RET	$ instanceof RealVector
592	262	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
593	281	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
593	281	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
593	281	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
41203	287	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
594	289	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
595	291	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	$.parseFixedstring(source, $.trimmedSeparator, pos)
595	291	16	RealVectorFormat.java	parse	source	String	0	DEF	parseFixedstring($, trimmedSeparator, pos)
595	291	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	parseFixedstring(source, trimmedSeparator, $)
596	296	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
597	299	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
598	313	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
598	313	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
598	313	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
41204	319	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
41204	319	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
41204	319	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
470	97	8	RealVectorImpl.java	RealVectorImpl	d	double[]	0	NullPointerException	$ == null
471	100	8	RealVectorImpl.java	RealVectorImpl	THIS	RealVectorImpl	0	DEF	d.$.length == 0
471	100	8	RealVectorImpl.java	RealVectorImpl	d	double[]	0	DEF	$.length == 0
472	113	8	RealVectorImpl.java	RealVectorImpl	THIS	RealVectorImpl	0	DEF	d.$.length < pos + size
472	113	8	RealVectorImpl.java	RealVectorImpl	d	double[]	0	DEF	$.length < pos + size
472	113	8	RealVectorImpl.java	RealVectorImpl	pos	int	0	DEF	d.length < $ + size
472	113	8	RealVectorImpl.java	RealVectorImpl	size	int	0	DEF	d.length < pos + $
40944	128	8	RealVectorImpl.java	RealVectorImpl	THIS	RealVectorImpl	0	NIL-FOR	i < d.$.length
40944	128	8	RealVectorImpl.java	RealVectorImpl	i	int	0	NIL-FOR	$ < d.length
40944	128	8	RealVectorImpl.java	RealVectorImpl	d	Double[]	0	NIL-FOR	i < $.length
473	140	8	RealVectorImpl.java	RealVectorImpl	THIS	RealVectorImpl	0	DEF	d.$.length < pos + size
473	140	8	RealVectorImpl.java	RealVectorImpl	d	Double[]	0	DEF	$.length < pos + size
473	140	8	RealVectorImpl.java	RealVectorImpl	pos	int	0	DEF	d.length < $ + size
473	140	8	RealVectorImpl.java	RealVectorImpl	size	int	0	DEF	d.length < pos + $
40945	146	8	RealVectorImpl.java	RealVectorImpl	i	int	0	NIL-FOR	$ < pos + size
40945	146	8	RealVectorImpl.java	RealVectorImpl	pos	int	0	NIL-FOR	i < $ + size
40945	146	8	RealVectorImpl.java	RealVectorImpl	size	int	0	NIL-FOR	i < pos + $
40946	157	8	RealVectorImpl.java	RealVectorImpl	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40946	157	8	RealVectorImpl.java	RealVectorImpl	i	int	0	NIL-FOR	$ < data.length
40947	236	12	RealVectorImpl.java	add	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40947	236	12	RealVectorImpl.java	add	i	int	0	NIL-FOR	$ < data.length
40948	248	8	RealVectorImpl.java	add	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40948	248	8	RealVectorImpl.java	add	i	int	0	NIL-FOR	$ < data.length
40949	273	12	RealVectorImpl.java	subtract	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40949	273	12	RealVectorImpl.java	subtract	i	int	0	NIL-FOR	$ < data.length
40950	285	8	RealVectorImpl.java	subtract	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40950	285	8	RealVectorImpl.java	subtract	i	int	0	NIL-FOR	$ < data.length
40951	305	8	RealVectorImpl.java	mapAdd	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40951	305	8	RealVectorImpl.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
40952	313	8	RealVectorImpl.java	mapAddToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40952	313	8	RealVectorImpl.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
40953	322	8	RealVectorImpl.java	mapSubtract	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40953	322	8	RealVectorImpl.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
40954	330	8	RealVectorImpl.java	mapSubtractToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40954	330	8	RealVectorImpl.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
40955	339	8	RealVectorImpl.java	mapMultiply	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40955	339	8	RealVectorImpl.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
40956	347	8	RealVectorImpl.java	mapMultiplyToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40956	347	8	RealVectorImpl.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
40957	356	8	RealVectorImpl.java	mapDivide	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40957	356	8	RealVectorImpl.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
40958	364	8	RealVectorImpl.java	mapDivideToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40958	364	8	RealVectorImpl.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
40959	373	8	RealVectorImpl.java	mapPow	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40959	373	8	RealVectorImpl.java	mapPow	i	int	0	NIL-FOR	$ < data.length
40960	381	8	RealVectorImpl.java	mapPowToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40960	381	8	RealVectorImpl.java	mapPowToSelf	i	int	0	NIL-FOR	$ < data.length
40961	390	8	RealVectorImpl.java	mapExp	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40961	390	8	RealVectorImpl.java	mapExp	i	int	0	NIL-FOR	$ < data.length
40962	398	8	RealVectorImpl.java	mapExpToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40962	398	8	RealVectorImpl.java	mapExpToSelf	i	int	0	NIL-FOR	$ < data.length
40963	407	8	RealVectorImpl.java	mapExpm1	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40963	407	8	RealVectorImpl.java	mapExpm1	i	int	0	NIL-FOR	$ < data.length
40964	415	8	RealVectorImpl.java	mapExpm1ToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40964	415	8	RealVectorImpl.java	mapExpm1ToSelf	i	int	0	NIL-FOR	$ < data.length
40965	424	8	RealVectorImpl.java	mapLog	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40965	424	8	RealVectorImpl.java	mapLog	i	int	0	NIL-FOR	$ < data.length
40966	432	8	RealVectorImpl.java	mapLogToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40966	432	8	RealVectorImpl.java	mapLogToSelf	i	int	0	NIL-FOR	$ < data.length
40967	441	8	RealVectorImpl.java	mapLog10	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40967	441	8	RealVectorImpl.java	mapLog10	i	int	0	NIL-FOR	$ < data.length
40968	449	8	RealVectorImpl.java	mapLog10ToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40968	449	8	RealVectorImpl.java	mapLog10ToSelf	i	int	0	NIL-FOR	$ < data.length
40969	458	8	RealVectorImpl.java	mapLog1p	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40969	458	8	RealVectorImpl.java	mapLog1p	i	int	0	NIL-FOR	$ < data.length
40970	466	8	RealVectorImpl.java	mapLog1pToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40970	466	8	RealVectorImpl.java	mapLog1pToSelf	i	int	0	NIL-FOR	$ < data.length
40971	475	8	RealVectorImpl.java	mapCosh	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40971	475	8	RealVectorImpl.java	mapCosh	i	int	0	NIL-FOR	$ < data.length
40972	483	8	RealVectorImpl.java	mapCoshToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40972	483	8	RealVectorImpl.java	mapCoshToSelf	i	int	0	NIL-FOR	$ < data.length
40973	492	8	RealVectorImpl.java	mapSinh	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40973	492	8	RealVectorImpl.java	mapSinh	i	int	0	NIL-FOR	$ < data.length
40974	500	8	RealVectorImpl.java	mapSinhToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40974	500	8	RealVectorImpl.java	mapSinhToSelf	i	int	0	NIL-FOR	$ < data.length
40975	509	8	RealVectorImpl.java	mapTanh	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40975	509	8	RealVectorImpl.java	mapTanh	i	int	0	NIL-FOR	$ < data.length
40976	517	8	RealVectorImpl.java	mapTanhToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40976	517	8	RealVectorImpl.java	mapTanhToSelf	i	int	0	NIL-FOR	$ < data.length
40977	526	8	RealVectorImpl.java	mapCos	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40977	526	8	RealVectorImpl.java	mapCos	i	int	0	NIL-FOR	$ < data.length
40978	534	8	RealVectorImpl.java	mapCosToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40978	534	8	RealVectorImpl.java	mapCosToSelf	i	int	0	NIL-FOR	$ < data.length
40979	543	8	RealVectorImpl.java	mapSin	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40979	543	8	RealVectorImpl.java	mapSin	i	int	0	NIL-FOR	$ < data.length
40980	551	8	RealVectorImpl.java	mapSinToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40980	551	8	RealVectorImpl.java	mapSinToSelf	i	int	0	NIL-FOR	$ < data.length
40981	560	8	RealVectorImpl.java	mapTan	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40981	560	8	RealVectorImpl.java	mapTan	i	int	0	NIL-FOR	$ < data.length
40982	568	8	RealVectorImpl.java	mapTanToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40982	568	8	RealVectorImpl.java	mapTanToSelf	i	int	0	NIL-FOR	$ < data.length
40983	577	8	RealVectorImpl.java	mapAcos	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40983	577	8	RealVectorImpl.java	mapAcos	i	int	0	NIL-FOR	$ < data.length
40984	585	8	RealVectorImpl.java	mapAcosToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40984	585	8	RealVectorImpl.java	mapAcosToSelf	i	int	0	NIL-FOR	$ < data.length
40985	594	8	RealVectorImpl.java	mapAsin	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40985	594	8	RealVectorImpl.java	mapAsin	i	int	0	NIL-FOR	$ < data.length
40986	602	8	RealVectorImpl.java	mapAsinToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40986	602	8	RealVectorImpl.java	mapAsinToSelf	i	int	0	NIL-FOR	$ < data.length
40987	611	8	RealVectorImpl.java	mapAtan	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40987	611	8	RealVectorImpl.java	mapAtan	i	int	0	NIL-FOR	$ < data.length
40988	619	8	RealVectorImpl.java	mapAtanToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40988	619	8	RealVectorImpl.java	mapAtanToSelf	i	int	0	NIL-FOR	$ < data.length
40989	628	8	RealVectorImpl.java	mapInv	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40989	628	8	RealVectorImpl.java	mapInv	i	int	0	NIL-FOR	$ < data.length
40990	636	8	RealVectorImpl.java	mapInvToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40990	636	8	RealVectorImpl.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
40991	645	8	RealVectorImpl.java	mapAbs	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40991	645	8	RealVectorImpl.java	mapAbs	i	int	0	NIL-FOR	$ < data.length
40992	653	8	RealVectorImpl.java	mapAbsToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40992	653	8	RealVectorImpl.java	mapAbsToSelf	i	int	0	NIL-FOR	$ < data.length
40993	662	8	RealVectorImpl.java	mapSqrt	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40993	662	8	RealVectorImpl.java	mapSqrt	i	int	0	NIL-FOR	$ < data.length
40994	670	8	RealVectorImpl.java	mapSqrtToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40994	670	8	RealVectorImpl.java	mapSqrtToSelf	i	int	0	NIL-FOR	$ < data.length
40995	679	8	RealVectorImpl.java	mapCbrt	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40995	679	8	RealVectorImpl.java	mapCbrt	i	int	0	NIL-FOR	$ < data.length
40996	687	8	RealVectorImpl.java	mapCbrtToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40996	687	8	RealVectorImpl.java	mapCbrtToSelf	i	int	0	NIL-FOR	$ < data.length
40997	696	8	RealVectorImpl.java	mapCeil	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40997	696	8	RealVectorImpl.java	mapCeil	i	int	0	NIL-FOR	$ < data.length
40998	704	8	RealVectorImpl.java	mapCeilToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40998	704	8	RealVectorImpl.java	mapCeilToSelf	i	int	0	NIL-FOR	$ < data.length
40999	713	8	RealVectorImpl.java	mapFloor	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
40999	713	8	RealVectorImpl.java	mapFloor	i	int	0	NIL-FOR	$ < data.length
41000	721	8	RealVectorImpl.java	mapFloorToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41000	721	8	RealVectorImpl.java	mapFloorToSelf	i	int	0	NIL-FOR	$ < data.length
41001	730	8	RealVectorImpl.java	mapRint	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41001	730	8	RealVectorImpl.java	mapRint	i	int	0	NIL-FOR	$ < data.length
41002	738	8	RealVectorImpl.java	mapRintToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41002	738	8	RealVectorImpl.java	mapRintToSelf	i	int	0	NIL-FOR	$ < data.length
41003	747	8	RealVectorImpl.java	mapSignum	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41003	747	8	RealVectorImpl.java	mapSignum	i	int	0	NIL-FOR	$ < data.length
41004	755	8	RealVectorImpl.java	mapSignumToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41004	755	8	RealVectorImpl.java	mapSignumToSelf	i	int	0	NIL-FOR	$ < data.length
41005	764	8	RealVectorImpl.java	mapUlp	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41005	764	8	RealVectorImpl.java	mapUlp	i	int	0	NIL-FOR	$ < data.length
41006	772	8	RealVectorImpl.java	mapUlpToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41006	772	8	RealVectorImpl.java	mapUlpToSelf	i	int	0	NIL-FOR	$ < data.length
41007	786	12	RealVectorImpl.java	ebeMultiply	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41007	786	12	RealVectorImpl.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
41008	798	8	RealVectorImpl.java	ebeMultiply	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41008	798	8	RealVectorImpl.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
41009	823	12	RealVectorImpl.java	ebeDivide	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41009	823	12	RealVectorImpl.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
41010	835	8	RealVectorImpl.java	ebeDivide	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41010	835	8	RealVectorImpl.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
41011	874	12	RealVectorImpl.java	dotProduct	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41011	874	12	RealVectorImpl.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
41012	886	8	RealVectorImpl.java	dotProduct	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41012	886	8	RealVectorImpl.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
41013	938	12	RealVectorImpl.java	getDistance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41013	938	12	RealVectorImpl.java	getDistance	i	int	0	NIL-FOR	$ < data.length
41014	951	8	RealVectorImpl.java	getDistance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41014	951	8	RealVectorImpl.java	getDistance	i	int	0	NIL-FOR	$ < data.length
41015	984	12	RealVectorImpl.java	getL1Distance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41015	984	12	RealVectorImpl.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
41016	997	8	RealVectorImpl.java	getL1Distance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41016	997	8	RealVectorImpl.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
41017	1030	12	RealVectorImpl.java	getLInfDistance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41017	1030	12	RealVectorImpl.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
41018	1043	8	RealVectorImpl.java	getLInfDistance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41018	1043	8	RealVectorImpl.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
474	1071	8	RealVectorImpl.java	unitVector	norm	double	0	DEF	$ == 0
475	1080	8	RealVectorImpl.java	unitize	norm	double	0	DEF	$ == 0
41019	1083	8	RealVectorImpl.java	unitize	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41019	1083	8	RealVectorImpl.java	unitize	i	int	0	NIL-FOR	$ < data.length
41020	1116	12	RealVectorImpl.java	outerProduct	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41020	1116	12	RealVectorImpl.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
41021	1117	16	RealVectorImpl.java	outerProduct	THIS	RealVectorImpl	0	NIL-FOR	j < $.data.$.length
41021	1117	16	RealVectorImpl.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
41022	1142	8	RealVectorImpl.java	outerProduct	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41022	1142	8	RealVectorImpl.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
41023	1143	12	RealVectorImpl.java	outerProduct	THIS	RealVectorImpl	0	NIL-FOR	j < $.data.$.length
41023	1143	12	RealVectorImpl.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
41024	1218	16	RealVectorImpl.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
41024	1218	16	RealVectorImpl.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
41024	1218	16	RealVectorImpl.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
476	1287	8	RealVectorImpl.java	checkVectorDimensions	THIS	RealVectorImpl	0	DEF	$.data.$.length != n
476	1287	8	RealVectorImpl.java	checkVectorDimensions	n	int	0	DEF	data.length != $
477	1300	12	RealVectorImpl.java	isNaN	THIS	RealVectorImpl	0	RET	Double.isNaN($.v)
478	1315	8	RealVectorImpl.java	isInfinite	THIS	RealVectorImpl	0	RET	$.isNaN()
479	1320	12	RealVectorImpl.java	isInfinite	THIS	RealVectorImpl	0	RET	Double.isInfinite($.v)
480	1351	6	RealVectorImpl.java	equals	THIS	RealVectorImpl	0	RET	$ == other
480	1351	6	RealVectorImpl.java	equals	other	Object	0	RET	this == $
481	1355	6	RealVectorImpl.java	equals	other	Object	0	RET	$ == null
482	1362	10	RealVectorImpl.java	equals	THIS	RealVectorImpl	0	RET	$.data.$.length != rhs.getDimension()
482	1362	10	RealVectorImpl.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
483	1366	10	RealVectorImpl.java	equals	rhs	RealVector	0	RET	$.isNaN()
41025	1370	10	RealVectorImpl.java	equals	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
41025	1370	10	RealVectorImpl.java	equals	i	int	0	NIL-FOR	$ < data.length
484	1371	14	RealVectorImpl.java	equals	THIS	RealVectorImpl	0	RET	$.data[i] != rhs.getEntry(i)
484	1371	14	RealVectorImpl.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
484	1371	14	RealVectorImpl.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
485	1391	8	RealVectorImpl.java	hashCode	THIS	RealVectorImpl	0	RET	$.isNaN()
486	1404	8	RealVectorImpl.java	checkIndex	THIS	RealVectorImpl	0	MatrixIndexException	index >= $.getDimension()
486	1404	8	RealVectorImpl.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
486	1404	8	RealVectorImpl.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
7	268	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
8	272	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
9	296	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
10	306	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
11	322	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	DEF	$.numElements < 1
12	349	8	ResizableDoubleArray.java	checkContractExpand	contractionCritera	float	0	DEF	$ < expansionFactor
12	349	8	ResizableDoubleArray.java	checkContractExpand	expansionFactor	float	0	DEF	contractionCritera < $
13	357	8	ResizableDoubleArray.java	checkContractExpand	THIS	ResizableDoubleArray	0	DEF	$.contractionCriteria <= 1.0
14	365	8	ResizableDoubleArray.java	checkContractExpand	expansionFactor	float	0	DEF	$ <= 1.0
15	451	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	DEF	i > $.numElements
15	451	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ > numElements
16	455	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ < 0
17	462	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
18	464	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
19	486	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
20	535	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	DEF	index >= $.numElements
20	535	8	ResizableDoubleArray.java	getElement	index	int	1	DEF	$ >= numElements
21	539	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
22	668	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ < 0
23	673	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
23	673	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
24	676	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
24	676	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
25	707	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != MULTIPLICATIVE_MODE
25	707	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != ADDITIVE_MODE
26	725	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
27	747	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	$ < 0
28	755	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
28	755	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
29	770	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
30	847	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
30	847	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
31	850	7	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
32	863	15	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
1431	97	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1431	97	8	RiddersSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1432	98	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1432	98	8	RiddersSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1433	99	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1433	99	8	RiddersSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1434	103	8	RiddersSolver.java	solve	THIS	RiddersSolver	1	RET	$.isBracketing(min, initial, f)
1434	103	8	RiddersSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1434	103	8	RiddersSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1434	103	8	RiddersSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1435	137	8	RiddersSolver.java	solve	y1	double	0	RET	$ == 0.0
1436	138	8	RiddersSolver.java	solve	y2	double	0	RET	$ == 0.0
42030	143	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	NIL-WHILE	i <= $.maximalIterationCount
42030	143	8	RiddersSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1437	147	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y3) <= $.functionValueAccuracy
1437	147	12	RiddersSolver.java	solve	y3	double	0	RET	Math.abs($) <= functionValueAccuracy
1438	159	12	RiddersSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1438	159	12	RiddersSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1438	159	12	RiddersSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1439	163	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1439	163	12	RiddersSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1440	170	12	RiddersSolver.java	solve	correction	double	1	DEF	$ > 0.0
1441	171	16	RiddersSolver.java	solve	y1	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
1441	171	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y1) + MathUtils.sign($) == 0.0
1442	178	16	RiddersSolver.java	solve	y2	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
1442	178	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y2) + MathUtils.sign($) == 0.0
42081	85	8	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
42081	85	8	RombergIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
42082	87	12	RombergIntegrator.java	integrate	i	int	0	NIL-FOR	j <= $
42082	87	12	RombergIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= i
1555	93	12	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	i >= $.minimalIterationCount
1555	93	12	RombergIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1556	97	16	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	delta <= $.absoluteAccuracy
1556	97	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1556	97	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1556	97	16	RombergIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1557	113	8	RombergIntegrator.java	verifyIterationCount	THIS	RombergIntegrator	0	DEF	$.maximalIterationCount > 32
164	128	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
165	158	4	Rotation.java	Rotation	norm	double	0	DEF	$ == 0
166	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
166	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
166	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
166	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
166	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
166	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
166	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
166	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
167	220	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
168	238	4	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
169	247	6	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
170	256	8	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
171	302	2	Rotation.java	Rotation	u1u1	double	0	IllegalArgumentException	$ == 0
171	302	2	Rotation.java	Rotation	u2u2	double	0	IllegalArgumentException	$ == 0
171	302	2	Rotation.java	Rotation	v1v1	double	0	IllegalArgumentException	$ == 0
171	302	2	Rotation.java	Rotation	v2v2	double	0	IllegalArgumentException	$ == 0
172	351	2	Rotation.java	Rotation	c	double	0	RET	$ == 0
173	373	4	Rotation.java	Rotation	c	double	0	RET	$ == 0
174	383	6	Rotation.java	Rotation	c	double	0	RET	$ == 0
175	433	4	Rotation.java	Rotation	normProduct	double	0	IllegalArgumentException	$ == 0
176	439	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
176	439	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
177	534	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
178	536	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
179	548	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
179	548	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
180	550	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
181	594	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
182	603	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
182	603	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
183	612	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
184	621	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
184	621	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
185	630	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
186	639	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
186	639	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
187	648	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
188	657	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
188	657	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
189	666	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
190	675	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
190	675	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
191	684	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
192	693	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
192	693	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
193	702	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
194	711	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
194	711	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
195	720	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
196	729	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
196	729	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
197	738	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
198	747	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
198	747	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
199	756	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
200	765	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
200	765	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
201	774	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
202	783	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
202	783	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
203	801	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
203	801	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
40933	960	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
204	1001	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	Math.abs(fn1 - $) <= threshold
204	1001	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	Math.abs($ - fn) <= threshold
204	1001	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	Math.abs(fn1 - fn) <= $
1372	93	4	RungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1372	93	4	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
41983	97	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
41983	97	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
1373	104	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
1373	104	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
41984	123	4	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
41985	127	6	RungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
41986	133	8	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
41986	133	8	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
41987	135	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
41987	135	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
41987	135	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
41988	137	12	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
41988	137	12	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
41989	148	8	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
41989	148	8	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
41989	148	8	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
41990	150	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
41990	150	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1374	158	8	RungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1374	158	8	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1375	179	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1375	179	6	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1375	179	6	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1375	179	6	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1257	79	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
1257	79	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
41852	83	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
41852	83	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
41852	83	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
41853	137	4	RungeKuttaStepInterpolator.java	writeExternal	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.$.length
41853	137	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < yDotK.length
41854	138	6	RungeKuttaStepInterpolator.java	writeExternal	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
41854	138	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentState.length
41855	158	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
41855	158	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
41856	160	6	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
41856	160	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < currentState.length
1459	132	8	SecantSolver.java	solve	y0	double	0	IllegalArgumentException	$ * y1 >= 0
1459	132	8	SecantSolver.java	solve	y1	double	0	IllegalArgumentException	y0 * $ >= 0
42034	143	8	SecantSolver.java	solve	THIS	SecantSolver	0	NIL-WHILE	i < $.maximalIterationCount
42034	143	8	SecantSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1460	144	12	SecantSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
1460	144	12	SecantSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
1461	152	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
1461	152	12	SecantSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
1462	156	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(oldDelta) < Math.max($.relativeAccuracy * Math.abs(x1), $.absoluteAccuracy)
1462	156	12	SecantSolver.java	solve	x1	double	0	RET	Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs($), absoluteAccuracy)
1462	156	12	SecantSolver.java	solve	oldDelta	double	0	RET	Math.abs($) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)
1463	162	12	SecantSolver.java	solve	y0	double	1	DEF	Math.abs(y1) > Math.abs($)
1463	162	12	SecantSolver.java	solve	y1	double	1	DEF	Math.abs($) > Math.abs(y0)
1464	167	16	SecantSolver.java	solve	delta	double	0	DEF	$ / oldDelta > 1
1464	167	16	SecantSolver.java	solve	oldDelta	double	0	DEF	delta / $ > 1
1465	177	12	SecantSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
1465	177	12	SecantSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
979	77	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
1188	72	12	SimpleEstimationProblem.java	getUnboundParameters	THIS	SimpleEstimationProblem	0	DEF	$.p.isBound()
41649	79	8	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	NIL-FOR	i < p.$.length
41649	79	8	SimpleRealPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
41649	79	8	SimpleRealPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
933	82	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > $.absoluteThreshold
933	82	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > (size * $.relativeThreshold)
933	82	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > absoluteThreshold
933	82	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > (size * relativeThreshold)
933	82	12	SimpleRealPointChecker.java	converged	size	double	0	RET	difference > ($ * relativeThreshold)
1114	121	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
1115	137	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.n > 2
1116	157	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
1117	169	12	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 2
41715	192	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
41715	192	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
41715	192	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
41716	212	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
41716	212	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
41716	212	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
41716	212	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
1118	297	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
1119	300	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	Math.abs($.sumXX) < 10 * Double.MIN_VALUE
1120	350	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
1121	364	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
1122	410	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
1123	433	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
1124	548	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	IllegalArgumentException	$ >= 1
1124	548	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	IllegalArgumentException	$ <= 0
1125	614	8	SimpleRegression.java	setDistribution	THIS	SimpleRegression	0	DEF	$.n > 2
41530	79	8	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	NIL-FOR	i < p.$.length
41530	79	8	SimpleVectorialPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
41530	79	8	SimpleVectorialPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
810	84	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > $.absoluteThreshold
810	84	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > (size * $.relativeThreshold)
810	84	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > absoluteThreshold
810	84	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > (size * relativeThreshold)
810	84	12	SimpleVectorialPointChecker.java	converged	size	double	0	RET	difference > ($ * relativeThreshold)
41552	79	8	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	NIL-FOR	i < p.$.length
41552	79	8	SimpleVectorialValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
41552	79	8	SimpleVectorialValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
857	84	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > $.absoluteThreshold
857	84	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > (size * $.relativeThreshold)
857	84	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > absoluteThreshold
857	84	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > (size * relativeThreshold)
857	84	12	SimpleVectorialValueChecker.java	converged	size	double	0	RET	difference > ($ * relativeThreshold)
41534	64	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
41534	64	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
826	65	12	SimplexSolver.java	getPivotColumn	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(tableau.getEntry(0, i), minValue, $.epsilon) < 0
826	65	12	SimplexSolver.java	getPivotColumn	i	int	0	DEF	MathUtils.compareTo(tableau.getEntry(0, $), minValue, epsilon) < 0
826	65	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	MathUtils.compareTo(tableau.getEntry(0, i), $, epsilon) < 0
826	65	12	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	DEF	MathUtils.compareTo($.getEntry(0, i), minValue, epsilon) < 0
41535	82	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
41535	82	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
827	84	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(tableau.getEntry(i, col), 0, $.epsilon) >= 0
827	84	12	SimplexSolver.java	getPivotRow	i	int	0	DEF	MathUtils.compareTo(tableau.getEntry($, col), 0, epsilon) >= 0
827	84	12	SimplexSolver.java	getPivotRow	col	int	0	DEF	MathUtils.compareTo(tableau.getEntry(i, $), 0, epsilon) >= 0
827	84	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	DEF	MathUtils.compareTo($.getEntry(i, col), 0, epsilon) >= 0
828	86	16	SimplexSolver.java	getPivotRow	ratio	double	0	DEF	$ < minRatio
828	86	16	SimplexSolver.java	getPivotRow	minRatio	double	0	DEF	ratio < $
829	109	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
41536	118	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
41536	118	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
830	119	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
830	119	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
831	132	8	SimplexSolver.java	isPhase1Solved	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
41537	135	8	SimplexSolver.java	isPhase1Solved	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
41537	135	8	SimplexSolver.java	isPhase1Solved	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
832	136	12	SimplexSolver.java	isPhase1Solved	THIS	SimplexSolver	0	RET	MathUtils.compareTo(tableau.getEntry(0, i), 0, $.epsilon) < 0
832	136	12	SimplexSolver.java	isPhase1Solved	i	int	0	RET	MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
832	136	12	SimplexSolver.java	isPhase1Solved	tableau	SimplexTableau	0	RET	MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
833	149	8	SimplexSolver.java	isOptimal	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
41538	152	8	SimplexSolver.java	isOptimal	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
41538	152	8	SimplexSolver.java	isOptimal	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
834	153	12	SimplexSolver.java	isOptimal	THIS	SimplexSolver	0	RET	MathUtils.compareTo(tableau.getEntry(0, i), 0, $.epsilon) < 0
834	153	12	SimplexSolver.java	isOptimal	i	int	0	RET	MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
834	153	12	SimplexSolver.java	isOptimal	tableau	SimplexTableau	0	RET	MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
835	170	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
41539	174	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NIL-WHILE	$.isPhase1Solved(tableau)
41539	174	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	isPhase1Solved($)
836	179	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, $.epsilon)
836	179	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	MathUtils.equals($.getEntry(0, $.getRhsOffset()), 0, epsilon)
41540	192	8	SimplexSolver.java	doOptimize	THIS	SimplexSolver	0	NIL-WHILE	$.isOptimal(tableau)
41540	192	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	isOptimal($)
839	127	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
840	138	16	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
41541	146	16	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
41541	146	16	SimplexTableau.java	createTableau	constraints	List<LinearConstraint>	0	NIL-FOR	i < $.size()
841	154	20	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
842	163	20	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
842	163	20	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
843	165	27	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
843	165	27	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
844	170	20	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
844	170	20	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
844	170	20	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
844	170	20	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
845	205	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
846	230	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
846	230	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
41542	242	8	SimplexTableau.java	initialize	THIS	SimplexTableau	0	NIL-FOR	artificialVar < $.numArtificialVariables
41542	242	8	SimplexTableau.java	initialize	artificialVar	int	0	NIL-FOR	$ < numArtificialVariables
41543	268	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
41543	268	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
847	269	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	MathUtils.equals($.getEntry(i, col), 0.0, $.epsilon)
847	269	12	SimplexTableau.java	getBasicRow	i	int	0	RET	MathUtils.equals(getEntry($, col), 0.0, epsilon)
847	269	12	SimplexTableau.java	getBasicRow	col	int	0	RET	MathUtils.equals(getEntry(i, $), 0.0, epsilon)
848	270	16	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
849	284	8	SimplexTableau.java	discardArtificialVariables	THIS	SimplexTableau	0	RET	$.numArtificialVariables == 0
41544	290	8	SimplexTableau.java	discardArtificialVariables	i	int	0	NIL-FOR	$ < height
41544	290	8	SimplexTableau.java	discardArtificialVariables	height	int	0	NIL-FOR	i < $
41545	291	12	SimplexTableau.java	discardArtificialVariables	j	int	0	NIL-FOR	$ < width - 1
41545	291	12	SimplexTableau.java	discardArtificialVariables	width	int	0	NIL-FOR	j < $ - 1
41546	321	8	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
41546	321	8	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
41546	321	8	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
850	339	6	SimplexTableau.java	getDecisionVariableValue	basicRow	Integer	0	RET	$ == null
41547	344	6	SimplexTableau.java	getDecisionVariableValue	i	int	0	NIL-FOR	$ < col
41547	344	6	SimplexTableau.java	getDecisionVariableValue	col	int	0	NIL-FOR	i < $
851	345	10	SimplexTableau.java	getDecisionVariableValue	THIS	SimplexTableau	0	RET	$.tableau.getEntry(basicRow, i) == 1
851	345	10	SimplexTableau.java	getDecisionVariableValue	i	int	0	RET	tableau.getEntry(basicRow, $) == 1
851	345	10	SimplexTableau.java	getDecisionVariableValue	basicRow	Integer	0	RET	tableau.getEntry($, i) == 1
41548	362	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
41548	362	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
41549	379	8	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
41549	379	8	SimplexTableau.java	subtractRow	j	int	0	NIL-FOR	$ < getWidth()
1542	80	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	$.minimalIterationCount == 1
42075	88	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
42075	88	8	SimpsonIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1543	91	12	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	i >= $.minimalIterationCount
1543	91	12	SimpsonIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1544	95	16	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	delta <= $.absoluteAccuracy
1544	95	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1544	95	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1544	95	16	SimpsonIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1545	112	8	SimpsonIntegrator.java	verifyIterationCount	THIS	SimpsonIntegrator	0	DEF	$.maximalIterationCount > 64
41408	113	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.mainBidiagonal.$.length
41408	113	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < mainBidiagonal.length
41409	125	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.singularValues.$.length
41409	125	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < singularValues.length
666	135	8	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedU == null
667	137	12	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	1	DEF	$.m >= $.n
41410	143	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n - 1
41410	143	16	SingularValueDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < n - 1
41411	149	20	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
41411	149	20	SingularValueDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < n
41412	156	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
41412	156	16	SingularValueDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < n
41413	159	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
41413	159	16	SingularValueDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
668	180	8	SingularValueDecompositionImpl.java	getUT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedUt == null
669	193	8	SingularValueDecompositionImpl.java	getS	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedS == null
670	212	8	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedV == null
671	214	12	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	1	DEF	$.m >= $.n
41414	223	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m - 1
41414	223	16	SingularValueDecompositionImpl.java	getV	i	int	0	NIL-FOR	$ < m - 1
41415	229	20	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.m
41415	229	20	SingularValueDecompositionImpl.java	getV	j	int	0	NIL-FOR	$ < m
41416	236	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.m
41416	236	16	SingularValueDecompositionImpl.java	getV	j	int	0	NIL-FOR	$ < m
41417	239	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
41417	239	16	SingularValueDecompositionImpl.java	getV	i	int	0	NIL-FOR	$ < n
672	257	8	SingularValueDecompositionImpl.java	getVT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedVt == null
41418	284	8	SingularValueDecompositionImpl.java	getRank	i	int	0	NIL-FOR	$ >= 0
673	285	11	SingularValueDecompositionImpl.java	getRank	THIS	SingularValueDecompositionImpl	0	RET	$.singularValues[i] > threshold
673	285	11	SingularValueDecompositionImpl.java	getRank	i	int	0	RET	singularValues[$] > threshold
673	285	11	SingularValueDecompositionImpl.java	getRank	threshold	double	0	RET	singularValues[i] > $
972	88	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
973	103	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
974	107	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
975	128	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
976	156	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
976	156	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
976	156	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
976	156	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
976	156	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
41663	166	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
41663	166	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
41663	166	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
41664	174	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
41664	174	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
41664	174	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
41388	107	8	SparseRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
41389	142	8	SparseRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
41390	166	12	SparseRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
41391	172	16	SparseRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
41391	172	16	SparseRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
41392	197	8	SparseRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
41393	203	12	SparseRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
41393	203	12	SparseRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
653	205	16	SparseRealMatrix.java	multiply	THIS	SparseRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
653	205	16	SparseRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
653	205	16	SparseRealMatrix.java	multiply	m	SparseRealMatrix	0	DEF	$.entries.containsKey(rightKey)
654	209	20	SparseRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
655	242	8	SparseRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
656	257	8	SparseRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
657	272	8	SparseRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
41319	128	8	SparseRealVector.java	SparseRealVector	THIS	SparseRealVector	0	NIL-FOR	key < values.$.length
41319	128	8	SparseRealVector.java	SparseRealVector	key	int	0	NIL-FOR	$ < values.length
41319	128	8	SparseRealVector.java	SparseRealVector	values	double[]	0	NIL-FOR	key < $.length
618	130	12	SparseRealVector.java	SparseRealVector	THIS	SparseRealVector	0	DEF	$.isZero(value)
618	130	12	SparseRealVector.java	SparseRealVector	value	double	0	DEF	isZero($)
41320	155	8	SparseRealVector.java	SparseRealVector	THIS	SparseRealVector	0	NIL-FOR	key < values.$.length
41320	155	8	SparseRealVector.java	SparseRealVector	key	int	0	NIL-FOR	$ < values.length
41320	155	8	SparseRealVector.java	SparseRealVector	values	Double[]	0	NIL-FOR	key < $.length
619	157	12	SparseRealVector.java	SparseRealVector	THIS	SparseRealVector	0	DEF	$.isZero(value)
619	157	12	SparseRealVector.java	SparseRealVector	value	double	0	DEF	isZero($)
41321	181	8	SparseRealVector.java	SparseRealVector	THIS	SparseRealVector	0	NIL-FOR	key < $.virtualSize
41321	181	8	SparseRealVector.java	SparseRealVector	key	int	0	NIL-FOR	$ < virtualSize
620	183	12	SparseRealVector.java	SparseRealVector	THIS	SparseRealVector	0	DEF	$.isZero(value)
620	183	12	SparseRealVector.java	SparseRealVector	value	double	0	DEF	isZero($)
621	225	8	SparseRealVector.java	add	v	RealVector	0	RET	$ instanceof SparseRealVector
41322	241	8	SparseRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
622	244	12	SparseRealVector.java	add	THIS	SparseRealVector	1	DEF	$.entries.containsKey(key)
622	244	12	SparseRealVector.java	add	key	int	1	DEF	entries.containsKey($)
41323	257	8	SparseRealVector.java	add	THIS	SparseRealVector	0	NIL-FOR	i < v.$.length
41323	257	8	SparseRealVector.java	add	i	int	0	NIL-FOR	$ < v.length
41323	257	8	SparseRealVector.java	add	v	double[]	0	NIL-FOR	i < $.length
41324	271	8	SparseRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
623	280	8	SparseRealVector.java	append	v	RealVector	0	RET	$ instanceof SparseRealVector
41325	296	8	SparseRealVector.java	append	THIS	SparseRealVector	0	NIL-FOR	i < a.$.length
41325	296	8	SparseRealVector.java	append	i	int	0	NIL-FOR	$ < a.length
41325	296	8	SparseRealVector.java	append	a	double[]	0	NIL-FOR	i < $.length
41326	312	8	SparseRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
41327	324	8	SparseRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
624	327	12	SparseRealVector.java	dotProduct	THIS	SparseRealVector	0	DEF	idx < v.$.length
624	327	12	SparseRealVector.java	dotProduct	idx	int	0	DEF	$ < v.length
624	327	12	SparseRealVector.java	dotProduct	v	double[]	0	DEF	idx < $.length
41328	340	8	SparseRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
41329	352	8	SparseRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
41330	364	8	SparseRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
41331	376	8	SparseRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
41332	390	8	SparseRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
625	393	12	SparseRealVector.java	getSubVector	key	int	0	DEF	$ >= index
625	393	12	SparseRealVector.java	getSubVector	key	int	0	DEF	$ < end
625	393	12	SparseRealVector.java	getSubVector	end	int	0	DEF	key < $
625	393	12	SparseRealVector.java	getSubVector	index	int	0	DEF	key >= $
41333	404	8	SparseRealVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
41334	425	8	SparseRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
41335	433	8	SparseRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
626	436	12	SparseRealVector.java	getDistance	THIS	SparseRealVector	0	DEF	$.entries.containsKey(key)
626	436	12	SparseRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
627	447	8	SparseRealVector.java	getDistance	v	RealVector	0	RET	$ instanceof SparseRealVector
41336	457	8	SparseRealVector.java	getDistance	THIS	SparseRealVector	0	NIL-FOR	i < v.$.length
41336	457	8	SparseRealVector.java	getDistance	i	int	0	NIL-FOR	$ < v.length
41336	457	8	SparseRealVector.java	getDistance	v	double[]	0	NIL-FOR	i < $.length
41337	474	8	SparseRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
41338	480	8	SparseRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
628	483	12	SparseRealVector.java	getL1Distance	THIS	SparseRealVector	0	DEF	$.entries.containsKey(key)
628	483	12	SparseRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
629	494	8	SparseRealVector.java	getL1Distance	v	RealVector	0	RET	$ instanceof SparseRealVector
41339	504	8	SparseRealVector.java	getL1Distance	THIS	SparseRealVector	0	NIL-FOR	i < v.$.length
41339	504	8	SparseRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < v.length
41339	504	8	SparseRealVector.java	getL1Distance	v	double[]	0	NIL-FOR	i < $.length
41340	515	8	SparseRealVector.java	getL1Norm	iter	Iterator	0	NIL-WHILE	$.hasNext()
41341	530	8	SparseRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
630	533	12	SparseRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
630	533	12	SparseRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
41342	538	8	SparseRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
631	541	12	SparseRealVector.java	getLInfDistance	THIS	SparseRealVector	0	DEF	$.entries.containsKey(key)
631	541	12	SparseRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
632	542	16	SparseRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
632	542	16	SparseRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
633	553	8	SparseRealVector.java	getLInfDistance	v	RealVector	0	RET	$ instanceof SparseRealVector
41343	563	8	SparseRealVector.java	getLInfDistance	THIS	SparseRealVector	0	NIL-FOR	i < v.$.length
41343	563	8	SparseRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < v.length
41343	563	8	SparseRealVector.java	getLInfDistance	v	double[]	0	NIL-FOR	i < $.length
634	565	12	SparseRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
634	565	12	SparseRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
41344	576	8	SparseRealVector.java	getLInfNorm	iter	Iterator	0	NIL-WHILE	$.hasNext()
41345	587	8	SparseRealVector.java	getNorm	iter	Iterator	0	NIL-WHILE	$.hasNext()
41346	597	8	SparseRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
635	599	12	SparseRealVector.java	isInfinite	iter	Iterator	0	RET	Double.isInfinite($.value())
41347	609	8	SparseRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
636	611	12	SparseRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
41348	626	8	SparseRealVector.java	mapAbsToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41349	640	8	SparseRealVector.java	mapAcosToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
41349	640	8	SparseRealVector.java	mapAcosToSelf	i	int	0	NIL-FOR	$ < virtualSize
41350	653	8	SparseRealVector.java	mapAddToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
41350	653	8	SparseRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
41351	667	8	SparseRealVector.java	mapAsinToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41352	682	8	SparseRealVector.java	mapAtanToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41353	697	8	SparseRealVector.java	mapCbrtToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41354	712	8	SparseRealVector.java	mapCeilToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41355	726	8	SparseRealVector.java	mapCosToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
41355	726	8	SparseRealVector.java	mapCosToSelf	i	int	0	NIL-FOR	$ < virtualSize
41356	739	8	SparseRealVector.java	mapCoshToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
41356	739	8	SparseRealVector.java	mapCoshToSelf	i	int	0	NIL-FOR	$ < virtualSize
41357	753	8	SparseRealVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41358	767	8	SparseRealVector.java	mapExpToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
41358	767	8	SparseRealVector.java	mapExpToSelf	i	int	0	NIL-FOR	$ < virtualSize
41359	781	8	SparseRealVector.java	mapExpm1ToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41360	796	8	SparseRealVector.java	mapFloorToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41361	810	8	SparseRealVector.java	mapInvToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
41361	810	8	SparseRealVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
41362	828	8	SparseRealVector.java	mapLog10ToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
41362	828	8	SparseRealVector.java	mapLog10ToSelf	i	int	0	NIL-FOR	$ < virtualSize
41363	842	8	SparseRealVector.java	mapLog1pToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41364	851	8	SparseRealVector.java	mapLogToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
41364	851	8	SparseRealVector.java	mapLogToSelf	i	int	0	NIL-FOR	$ < virtualSize
41365	865	8	SparseRealVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41366	879	8	SparseRealVector.java	mapPowToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41367	894	8	SparseRealVector.java	mapRintToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41368	909	8	SparseRealVector.java	mapSignumToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41369	924	8	SparseRealVector.java	mapSinToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41370	940	8	SparseRealVector.java	mapSinhToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41371	955	8	SparseRealVector.java	mapSqrtToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41372	980	8	SparseRealVector.java	mapTanToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41373	995	8	SparseRealVector.java	mapTanhToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41374	1010	8	SparseRealVector.java	mapUlpToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
41375	1027	8	SparseRealVector.java	outerproduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
41376	1030	12	SparseRealVector.java	outerproduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
637	1042	8	SparseRealVector.java	outerProduct	v	RealVector	0	RET	$ instanceof SparseRealVector
41377	1047	8	SparseRealVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
41378	1050	12	SparseRealVector.java	outerProduct	THIS	SparseRealVector	0	NIL-FOR	col < $.virtualSize
41378	1050	12	SparseRealVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
41379	1062	8	SparseRealVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
41380	1066	12	SparseRealVector.java	outerProduct	THIS	SparseRealVector	0	NIL-FOR	col < $.virtualSize
41380	1066	12	SparseRealVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
638	1088	8	SparseRealVector.java	setEntry	THIS	SparseRealVector	1	DEF	$.isZero(value)
638	1088	8	SparseRealVector.java	setEntry	value	double	1	DEF	isZero($)
639	1090	15	SparseRealVector.java	setEntry	THIS	SparseRealVector	0	DEF	$.entries.containsKey(index)
639	1090	15	SparseRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
41381	1106	8	SparseRealVector.java	setSubVector	THIS	SparseRealVector	0	NIL-FOR	i < v.$.length
41381	1106	8	SparseRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
41381	1106	8	SparseRealVector.java	setSubVector	v	double[]	0	NIL-FOR	i < $.length
41382	1113	8	SparseRealVector.java	set	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
41382	1113	8	SparseRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
41383	1128	8	SparseRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
640	1131	12	SparseRealVector.java	subtract	THIS	SparseRealVector	1	DEF	$.entries.containsKey(key)
640	1131	12	SparseRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
641	1143	8	SparseRealVector.java	subtract	v	RealVector	0	RET	$ instanceof SparseRealVector
41384	1153	8	SparseRealVector.java	subtract	THIS	SparseRealVector	0	NIL-FOR	i < v.$.length
41384	1153	8	SparseRealVector.java	subtract	i	int	0	NIL-FOR	$ < v.length
41384	1153	8	SparseRealVector.java	subtract	v	double[]	0	NIL-FOR	i < $.length
642	1154	12	SparseRealVector.java	subtract	THIS	SparseRealVector	1	DEF	$.entries.containsKey(i)
642	1154	12	SparseRealVector.java	subtract	i	int	1	DEF	entries.containsKey($)
643	1174	8	SparseRealVector.java	unitize	THIS	SparseRealVector	0	DEF	$.isZero(norm)
643	1174	8	SparseRealVector.java	unitize	norm	double	0	DEF	isZero($)
41385	1178	8	SparseRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
644	1194	8	SparseRealVector.java	checkIndex	THIS	SparseRealVector	0	MatrixIndexException	index >= $.getDimension()
644	1194	8	SparseRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
644	1194	8	SparseRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
645	1210	8	SparseRealVector.java	checkVectorDimensions	THIS	SparseRealVector	0	DEF	$.getDimension() != n
645	1210	8	SparseRealVector.java	checkVectorDimensions	n	int	0	DEF	getDimension() != $
646	1237	8	SparseRealVector.java	equals	THIS	SparseRealVector	0	RET	$ == obj
646	1237	8	SparseRealVector.java	equals	obj	Object	0	RET	this == $
647	1240	8	SparseRealVector.java	equals	obj	Object	0	RET	$ == null
648	1243	8	SparseRealVector.java	equals	obj	Object	0	RET	$ instanceof SparseRealVector
649	1247	8	SparseRealVector.java	equals	THIS	SparseRealVector	0	RET	$.virtualSize != other.$.virtualSize
649	1247	8	SparseRealVector.java	equals	other	SparseRealVector	0	RET	virtualSize != $.virtualSize
650	1250	8	SparseRealVector.java	equals	THIS	SparseRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
650	1250	8	SparseRealVector.java	equals	other	SparseRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
41386	1255	8	SparseRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
651	1258	12	SparseRealVector.java	equals	THIS	SparseRealVector	0	RET	Math.abs(test) > $.epsilon
651	1258	12	SparseRealVector.java	equals	test	double	0	RET	Math.abs($) > epsilon
41387	1263	8	SparseRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
652	1266	12	SparseRealVector.java	equals	THIS	SparseRealVector	0	RET	$.isZero(test)
652	1266	12	SparseRealVector.java	equals	test	double	0	RET	isZero($)
1421	59	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	IllegalArgumentException	x.$.length != y.$.length
1421	59	8	SplineInterpolator.java	interpolate	x	double	0	IllegalArgumentException	$.length != y.length
1421	59	8	SplineInterpolator.java	interpolate	y	double	0	IllegalArgumentException	x.length != $.length
1422	63	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	IllegalArgumentException	x.$.length < 3
1422	63	8	SplineInterpolator.java	interpolate	x	double	0	IllegalArgumentException	$.length < 3
42020	71	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
42020	71	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1423	72	12	SplineInterpolator.java	interpolate	i	int	0	IllegalArgumentException	x[$] >= x[$ + 1]
1423	72	12	SplineInterpolator.java	interpolate	x	double	0	IllegalArgumentException	$[i] >= $[i + 1]
42021	79	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
42021	79	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
42022	88	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
42022	88	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
42023	103	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
42024	111	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
42024	111	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1101	566	8	StatUtils.java	sumDifference	THIS	StatUtils	0	IllegalArgumentException	n != sample2.$.length
1101	566	8	StatUtils.java	sumDifference	n	int	0	IllegalArgumentException	$ != sample2.length
1101	566	8	StatUtils.java	sumDifference	n	int	0	IllegalArgumentException	$ < 1
1101	566	8	StatUtils.java	sumDifference	sample2	double[]	0	IllegalArgumentException	n != $.length
41704	571	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
41704	571	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
1102	610	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	IllegalArgumentException	n != sample2.$.length
1102	610	8	StatUtils.java	varianceDifference	n	int	0	IllegalArgumentException	$ != sample2.length
1102	610	8	StatUtils.java	varianceDifference	n	int	0	IllegalArgumentException	$ < 2
1102	610	8	StatUtils.java	varianceDifference	sample2	double[]	0	IllegalArgumentException	n != $.length
41705	613	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
41705	613	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
1037	131	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
1037	131	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
1038	134	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
1253	120	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
1254	129	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
41846	137	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
1255	155	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
949	72	8	Sum.java	increment	THIS	Sum	1	DEF	$.n == 0
950	121	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length)
950	121	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length)
950	121	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length)
950	121	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $)
41658	123	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
41658	123	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
41658	123	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
951	89	8	SumOfLogs.java	getResult	THIS	SumOfLogs	1	RET	$.n > 0
952	132	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length)
952	132	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length)
952	132	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length)
952	132	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $)
41659	134	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
41659	134	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
41659	134	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
947	72	8	SumOfSquares.java	increment	THIS	SumOfSquares	1	DEF	$.n == 0
948	121	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length)
948	121	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length)
948	121	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length)
948	121	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $)
41657	123	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
41657	123	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
41657	123	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
999	154	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl instanceof Mean
1000	157	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl instanceof Variance
1001	160	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl instanceof GeometricMean
1002	201	8	SummaryStatistics.java	getMean	THIS	SummaryStatistics	1	RET	$.mean == $.meanImpl
1003	217	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
1004	218	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
1005	235	8	SummaryStatistics.java	getVariance	THIS	SummaryStatistics	1	RET	$.varianceImpl == $.variance
1006	324	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
1007	327	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
1008	341	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
1008	341	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
1009	344	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
1010	615	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	DEF	$.n > 0
1011	649	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
1012	660	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
1012	660	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
1013	665	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
1013	665	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
1014	670	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
1014	670	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
1015	675	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
1015	675	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
1016	680	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
1016	680	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
1017	685	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
1017	685	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
1018	690	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
1018	690	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
1019	695	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
1019	695	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
371	54	8	TDistributionImpl.java	setDegreesOfFreedom	degreesOfFreedom	double	0	IllegalArgumentException	$ <= 0.0
372	77	8	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ == 0.0
373	85	12	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
374	112	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
375	115	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1063	78	8	TTestImpl.java	pairedT	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
1063	78	8	TTestImpl.java	pairedT	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
1063	78	8	TTestImpl.java	pairedT	sample1	double[]	0	IllegalArgumentException	$ == null
1063	78	8	TTestImpl.java	pairedT	sample2	double[]	0	IllegalArgumentException	$ == null
1063	78	8	TTestImpl.java	pairedT	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
1064	163	8	TTestImpl.java	pairedTTest	alpha	double	0	IllegalArgumentException	$ > 0.5
1064	163	8	TTestImpl.java	pairedTTest	alpha	double	0	IllegalArgumentException	$ <= 0
1065	186	8	TTestImpl.java	t	THIS	TTestImpl	0	IllegalArgumentException	observed.$.length < 2
1065	186	8	TTestImpl.java	t	observed	double[]	0	IllegalArgumentException	$.length < 2
1065	186	8	TTestImpl.java	t	observed	double[]	0	IllegalArgumentException	$ == null
1066	211	8	TTestImpl.java	t	sampleStats	StatisticalSummary	0	IllegalArgumentException	$.getN() < 2
1066	211	8	TTestImpl.java	t	sampleStats	StatisticalSummary	0	IllegalArgumentException	$ == null
1067	253	8	TTestImpl.java	homoscedasticT	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
1067	253	8	TTestImpl.java	homoscedasticT	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
1067	253	8	TTestImpl.java	homoscedasticT	sample1	double[]	0	IllegalArgumentException	$ == null
1067	253	8	TTestImpl.java	homoscedasticT	sample2	double[]	0	IllegalArgumentException	$ == null
1067	253	8	TTestImpl.java	homoscedasticT	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
1068	292	8	TTestImpl.java	t	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
1068	292	8	TTestImpl.java	t	sample1	double[]	0	IllegalArgumentException	$ == null
1068	292	8	TTestImpl.java	t	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
1068	292	8	TTestImpl.java	t	sample2	double[]	0	IllegalArgumentException	$ == null
1068	292	8	TTestImpl.java	t	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
1069	335	8	TTestImpl.java	t	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
1069	335	8	TTestImpl.java	t	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
1069	335	8	TTestImpl.java	t	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
1069	335	8	TTestImpl.java	t	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
1070	383	8	TTestImpl.java	homoscedasticT	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
1070	383	8	TTestImpl.java	homoscedasticT	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
1070	383	8	TTestImpl.java	homoscedasticT	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
1070	383	8	TTestImpl.java	homoscedasticT	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
1071	421	8	TTestImpl.java	tTest	THIS	TTestImpl	0	IllegalArgumentException	sample.$.length < 2
1071	421	8	TTestImpl.java	tTest	sample	double[]	0	IllegalArgumentException	$.length < 2
1071	421	8	TTestImpl.java	tTest	sample	double[]	0	IllegalArgumentException	$ == null
1072	465	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
1072	465	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
1073	501	8	TTestImpl.java	tTest	sampleStats	StatisticalSummary	0	IllegalArgumentException	$ == null
1073	501	8	TTestImpl.java	tTest	sampleStats	StatisticalSummary	0	IllegalArgumentException	$.getN() < 2
1074	547	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
1074	547	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
1075	591	8	TTestImpl.java	tTest	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
1075	591	8	TTestImpl.java	tTest	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
1075	591	8	TTestImpl.java	tTest	sample1	double[]	0	IllegalArgumentException	$ == null
1075	591	8	TTestImpl.java	tTest	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
1075	591	8	TTestImpl.java	tTest	sample2	double[]	0	IllegalArgumentException	$ == null
1076	635	8	TTestImpl.java	homoscedasticTTest	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
1076	635	8	TTestImpl.java	homoscedasticTTest	sample1	double[]	0	IllegalArgumentException	$ == null
1076	635	8	TTestImpl.java	homoscedasticTTest	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
1076	635	8	TTestImpl.java	homoscedasticTTest	sample2	double[]	0	IllegalArgumentException	$ == null
1076	635	8	TTestImpl.java	homoscedasticTTest	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
1077	700	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
1077	700	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
1078	760	8	TTestImpl.java	homoscedasticTTest	alpha	double	0	IllegalArgumentException	$ > 0.5
1078	760	8	TTestImpl.java	homoscedasticTTest	alpha	double	0	IllegalArgumentException	$ <= 0
1079	802	8	TTestImpl.java	tTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
1079	802	8	TTestImpl.java	tTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
1079	802	8	TTestImpl.java	tTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
1079	802	8	TTestImpl.java	tTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
1080	847	8	TTestImpl.java	homoscedasticTTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
1080	847	8	TTestImpl.java	homoscedasticTTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
1080	847	8	TTestImpl.java	homoscedasticTTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
1080	847	8	TTestImpl.java	homoscedasticTTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
1081	913	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
1081	913	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
988	86	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
41977	98	6	ThreeEighthesStepInterpolator.java	computeInterpolatedState	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41977	98	6	ThreeEighthesStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
5	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
5	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
6	147	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
1550	86	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
42076	93	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
42076	93	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
42077	123	8	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
42077	123	8	TrapezoidIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1551	125	12	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	i >= $.minimalIterationCount
1551	125	12	TrapezoidIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1552	129	16	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.absoluteAccuracy
1552	129	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1552	129	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1552	129	16	TrapezoidIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1553	145	8	TrapezoidIntegrator.java	verifyIterationCount	THIS	TrapezoidIntegrator	0	DEF	$.maximalIterationCount > 64
658	74	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
659	97	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
660	110	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
41394	116	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
661	120	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
661	120	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
41395	123	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
41395	123	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
41396	126	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
41396	126	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
41397	128	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
41397	128	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
41398	133	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
41398	133	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
662	154	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
41399	158	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
41399	158	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
663	160	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
664	163	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
664	163	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
41400	213	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
41400	213	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
41401	219	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
41401	219	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
665	225	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
41402	236	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
41402	236	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
41403	240	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
41403	240	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
41404	250	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
41404	250	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
41405	256	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
41405	256	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
41406	262	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
41406	262	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
41407	264	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
41407	264	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1177	48	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	IllegalArgumentException	mean.$.length != standardDeviation.$.length
1177	48	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	IllegalArgumentException	$.length != standardDeviation.length
1177	48	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	IllegalArgumentException	mean.length != $.length
41747	77	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
41747	77	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
41747	77	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
1546	68	8	UnivariateRealIntegratorImpl.java	UnivariateRealIntegratorImpl	f	UnivariateRealFunction	0	IllegalArgumentException	$ == null
1547	108	8	UnivariateRealIntegratorImpl.java	getResult	THIS	UnivariateRealIntegratorImpl	1	RET	$.resultComputed
1548	159	8	UnivariateRealIntegratorImpl.java	verifyInterval	lower	double	0	DEF	$ >= upper
1548	159	8	UnivariateRealIntegratorImpl.java	verifyInterval	upper	double	0	DEF	lower >= $
1549	172	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.maximalIterationCount <= $.minimalIterationCount
1549	172	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.minimalIterationCount <= 0
1425	78	8	UnivariateRealSolverImpl.java	UnivariateRealSolverImpl	f	UnivariateRealFunction	0	DEF	$ == null
1426	105	8	UnivariateRealSolverImpl.java	checkResultComputed	THIS	UnivariateRealSolverImpl	0	DEF	$.resultComputed
1427	211	8	UnivariateRealSolverImpl.java	verifyInterval	lower	double	0	DEF	$ >= upper
1427	211	8	UnivariateRealSolverImpl.java	verifyInterval	upper	double	0	DEF	lower >= $
1428	228	8	UnivariateRealSolverImpl.java	verifySequence	THIS	UnivariateRealSolverImpl	0	DEF	$.isSequence(lower, initial, upper)
1428	228	8	UnivariateRealSolverImpl.java	verifySequence	lower	double	0	DEF	isSequence($, initial, upper)
1428	228	8	UnivariateRealSolverImpl.java	verifySequence	initial	double	0	DEF	isSequence(lower, $, upper)
1428	228	8	UnivariateRealSolverImpl.java	verifySequence	upper	double	0	DEF	isSequence(lower, initial, $)
1429	251	8	UnivariateRealSolverImpl.java	verifyBracketing	THIS	UnivariateRealSolverImpl	0	DEF	$.isBracketing(lower, upper, f)
1429	251	8	UnivariateRealSolverImpl.java	verifyBracketing	lower	double	0	DEF	isBracketing($, upper, f)
1429	251	8	UnivariateRealSolverImpl.java	verifyBracketing	upper	double	0	DEF	isBracketing(lower, $, f)
1429	251	8	UnivariateRealSolverImpl.java	verifyBracketing	f	UnivariateRealFunction	0	DEF	isBracketing(lower, upper, $)
1466	169	8	UnivariateRealSolverUtils.java	bracket	function	UnivariateRealFunction	0	IllegalArgumentException	$ == null
1467	172	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	IllegalArgumentException	$ <= 0
1468	176	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	IllegalArgumentException	$ < lowerBound
1468	176	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	IllegalArgumentException	$ > upperBound
1468	176	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	IllegalArgumentException	initial < $
1468	176	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	IllegalArgumentException	$ >= upperBound
1468	176	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	IllegalArgumentException	lowerBound >= $
1468	176	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	IllegalArgumentException	initial > $
42035	187	8	UnivariateRealSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
42035	187	8	UnivariateRealSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
42035	187	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
42035	187	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
42035	187	8	UnivariateRealSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
42035	187	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
42035	187	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
42035	187	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
1469	197	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	ConvergenceException	$ * fb >= 0.0
1469	197	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	ConvergenceException	fa * $ >= 0.0
1470	223	8	UnivariateRealSolverUtils.java	setup	f	UnivariateRealFunction	0	IllegalArgumentException	$ == null
41748	126	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
41748	126	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
41748	126	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
41749	141	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
41749	141	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
1178	238	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
1179	255	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
1180	302	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution.getBinStats().size() == 0
1180	302	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution == null
1181	329	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
1182	332	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
1182	332	8	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
1183	336	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
1183	336	12	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
955	155	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
956	165	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
957	167	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
958	170	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
959	190	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
960	213	8	Variance.java	evaluate	values	double[]	0	IllegalArgumentException	$ == null
961	244	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
961	244	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
961	244	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
961	244	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
962	246	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
963	248	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
964	288	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
964	288	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
964	288	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
964	288	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
965	289	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
966	291	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
41661	295	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
41661	295	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
41661	295	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
967	301	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
205	269	4	Vector3D.java	normalize	s	double	0	DEF	$ == 0
206	293	4	Vector3D.java	orthogonal	threshold	double	0	DEF	$ == 0
207	297	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
207	297	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
207	297	4	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
207	297	4	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
208	300	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
208	300	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
208	300	11	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
208	300	11	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
209	323	4	Vector3D.java	angle	normProduct	double	0	DEF	$ == 0
210	329	4	Vector3D.java	angle	dot	double	0	RET	$ > threshold
210	329	4	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
210	329	4	Vector3D.java	angle	threshold	double	0	RET	dot > $
210	329	4	Vector3D.java	angle	threshold	double	0	RET	dot < -$
211	332	6	Vector3D.java	angle	dot	double	0	RET	$ >= 0
212	398	4	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
212	398	4	Vector3D.java	equals	other	Object	0	RET	this == $
213	402	4	Vector3D.java	equals	other	Object	0	RET	$ == null
214	409	6	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
215	431	6	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
155	240	8	Vector3DFormat.java	format	obj	Object	0	RET	$ instanceof Vector3D
156	258	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
157	277	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
157	277	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
157	277	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
158	284	8	Vector3DFormat.java	parse	x	Number	0	RET	$ == null
159	293	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
159	293	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
159	293	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
160	298	8	Vector3DFormat.java	parse	y	Number	0	RET	$ == null
161	307	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
161	307	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
161	307	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
162	312	8	Vector3DFormat.java	parse	z	Number	0	RET	$ == null
163	321	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
163	321	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
163	321	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
977	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
977	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
41665	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
41665	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
41665	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
41666	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
41666	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
978	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
41667	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
41667	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
41668	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
41668	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
41670	41	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
41670	41	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
989	52	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
989	52	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
41671	55	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
41671	55	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
41671	55	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
41672	66	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
41672	66	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
41672	66	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
407	60	8	WeibullDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
408	99	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ < 0.0
408	99	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ > 1.0
409	102	15	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
410	104	16	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
411	117	8	WeibullDistributionImpl.java	setShape	alpha	double	0	IllegalArgumentException	$ <= 0.0
412	129	8	WeibullDistributionImpl.java	setScale	beta	double	0	IllegalArgumentException	$ <= 0.0
413	75	8	ZipfDistributionImpl.java	setNumberOfElements	n	int	0	DEF	$ <= 0
414	102	8	ZipfDistributionImpl.java	setExponent	s	double	0	DEF	$ <= 0.0
415	117	8	ZipfDistributionImpl.java	probability	THIS	ZipfDistributionImpl	0	RET	x > $.getNumberOfElements()
415	117	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ <= 0
415	117	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ > getNumberOfElements()
416	133	8	ZipfDistributionImpl.java	cumulativeProbability	x	int	1	RET	$ <= 0
417	135	15	ZipfDistributionImpl.java	cumulativeProbability	THIS	ZipfDistributionImpl	0	RET	x >= $.getNumberOfElements()
417	135	15	ZipfDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ >= getNumberOfElements()
40942	181	8	ZipfDistributionImpl.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
