id	line	column	filename	methodname	varname	vartype	else	return	right
555	62	8	AVLTree.java	insert	element	T	0	DEF	$ != null
556	63	12	AVLTree.java	insert	THIS	AVLTree	1	DEF	$.top == null
557	82	8	AVLTree.java	delete	element	T	0	RET	$ != null
14862	83	12	AVLTree.java	delete	node	Node	0	NIL-FOR	$ != null
558	86	16	AVLTree.java	delete	THIS	AVLTree	1	RET	node.$.element == element
558	86	16	AVLTree.java	delete	node	Node	1	RET	$.element == element
558	86	16	AVLTree.java	delete	element	T	1	RET	node.element == $
559	89	23	AVLTree.java	delete	THIS	AVLTree	0	RET	node.$.element.compareTo(element) > 0
559	89	23	AVLTree.java	delete	node	Node	0	RET	$.element.compareTo(element) > 0
559	89	23	AVLTree.java	delete	element	T	0	RET	node.element.compareTo($) > 0
14863	153	8	AVLTree.java	getNotSmaller	node	Node	0	NIL-FOR	$ != null
560	154	12	AVLTree.java	getNotSmaller	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) < 0
560	154	12	AVLTree.java	getNotSmaller	node	Node	1	RET	$.element.compareTo(reference) < 0
560	154	12	AVLTree.java	getNotSmaller	reference	T	1	RET	node.element.compareTo($) < 0
561	155	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.right == null
561	155	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.right == null
562	161	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.left == null
562	161	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.left == null
14864	184	8	AVLTree.java	getNotLarger	node	Node	0	NIL-FOR	$ != null
563	185	12	AVLTree.java	getNotLarger	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) > 0
563	185	12	AVLTree.java	getNotLarger	node	Node	1	RET	$.element.compareTo(reference) > 0
563	185	12	AVLTree.java	getNotLarger	reference	T	1	RET	node.element.compareTo($) > 0
564	186	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.left == null
564	186	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.left == null
565	192	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.right == null
565	192	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.right == null
1526	77	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ <= 0
1527	81	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ <= 0
1528	99	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NullArgumentException	$ == null
1529	102	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1529	102	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$.length == 0
1530	105	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d[0].length == 0
1530	105	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$[0].length == 0
1531	121	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1531	121	8	AbstractFieldMatrix.java	extractField	d	T[]	0	NoDataException	$.length == 0
15362	184	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
15362	184	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
15363	185	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
15363	185	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
15364	202	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
15364	202	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
15365	203	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
15365	203	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
15366	217	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
15366	217	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
15367	218	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
15367	218	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
15368	231	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
15368	231	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
15369	232	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
15369	232	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
15370	250	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
15370	250	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
15371	251	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
15371	251	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
15372	253	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
15372	253	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1532	272	8	AbstractFieldMatrix.java	power	p	int	0	NotPositiveException	$ < 0
1533	276	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NonSquareMatrixException	$.isSquare()
1534	280	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 0
1535	284	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 1
15373	301	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
15373	301	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
15373	301	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1536	302	12	AbstractFieldMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1536	302	12	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
15374	313	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
15374	313	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
15374	313	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
15375	332	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
15375	332	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
15375	332	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
15376	334	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
15376	334	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
15376	334	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
15377	350	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
15377	350	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
15378	351	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
15378	351	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1537	395	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1537	395	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1537	395	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1537	395	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1537	395	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1537	395	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1538	436	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1538	436	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1538	436	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1538	436	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1538	436	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
1538	436	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
15379	445	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
15379	445	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
15379	445	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
15380	447	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
15380	447	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
15380	447	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1539	459	8	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	NullArgumentException	$ == null
1540	463	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1541	468	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
15381	472	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
15381	472	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1542	473	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1542	473	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1542	473	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1542	473	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[r].length != nCols
15382	483	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
15382	483	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
15383	484	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
15383	484	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
15384	495	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
15384	495	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1543	508	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1543	508	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1543	508	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
15385	514	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
15385	514	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
15386	527	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
15386	527	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1544	540	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1544	540	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1544	540	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
15387	546	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
15387	546	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1545	563	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1545	563	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nCols
15388	567	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
15388	567	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1546	585	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1546	585	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nRows
15389	589	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
15389	589	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
15390	600	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
15390	600	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1547	613	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1547	613	8	AbstractFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1547	613	8	AbstractFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
15391	616	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
15391	616	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
15392	627	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
15392	627	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1548	640	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1548	640	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1548	640	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
15393	643	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
15393	643	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1549	691	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1549	691	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
15394	695	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
15394	695	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1550	706	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1550	706	8	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1550	706	8	AbstractFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
15395	711	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
15395	711	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
15396	713	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
15396	713	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1551	730	12	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1551	730	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nCols
15397	735	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
15397	735	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
15398	737	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
15398	737	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1552	752	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1552	752	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1552	752	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
15399	757	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
15399	757	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
15400	759	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
15400	759	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1553	776	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1553	776	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nRows
15401	781	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
15401	781	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
15402	783	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
15402	783	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
15403	798	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
15403	798	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
15404	799	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
15404	799	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
15405	813	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
15405	813	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
15406	814	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
15406	814	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
15407	829	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
15407	829	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
15408	830	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
15408	830	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
15409	847	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
15409	847	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
15410	848	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
15410	848	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
15411	860	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
15411	860	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
15412	861	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
15412	861	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
15413	875	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
15413	875	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
15414	876	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
15414	876	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
15415	891	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
15415	891	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
15416	892	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
15416	892	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
15417	909	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
15417	909	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
15418	910	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
15418	910	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
15419	956	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
15419	956	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1554	957	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
15420	961	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
15420	961	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1555	962	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
1556	984	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
1556	984	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
1557	987	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix<?> == false
1558	993	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getRowDimension() != nRows
1558	993	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getColumnDimension() != nCols
1558	993	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1558	993	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
15421	996	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
15421	996	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
15422	997	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
15422	997	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1559	998	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
1559	998	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
1559	998	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
1559	998	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
15423	1018	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
15423	1018	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
15424	1019	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
15424	1019	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1560	1033	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1560	1033	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1560	1033	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= getRowDimension()
1561	1047	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1561	1047	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1561	1047	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= getColumnDimension()
1562	1070	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1562	1070	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1563	1077	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1563	1077	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1564	1095	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1564	1095	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1565	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedColumns.$.length == 0
1565	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedRows.$.length == 0
1565	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1565	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1566	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1566	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1566	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1566	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1567	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1567	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1567	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1567	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1568	1153	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DimensionMismatchException	$.getColumnDimension() != m.getRowDimension()
1568	1153	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DimensionMismatchException	getColumnDimension() != $.getRowDimension()
1006	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	NullArgumentException	$ == null
1007	132	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	NullArgumentException	$ == null
1008	162	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
1008	162	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
14899	164	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
14899	164	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
14899	164	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
1009	169	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
1009	169	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
1085	82	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	NumberIsTooLargeException	x1 < $
1085	82	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	NumberIsTooLargeException	$ < x0
1086	101	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1086	101	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1087	106	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
1088	109	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	1	RET	$ == Integer.MIN_VALUE
1089	110	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	THIS	AbstractIntegerDistribution	0	RET	$.checkedCumulativeProbability(lower) >= p
1089	110	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	RET	checkedCumulativeProbability($) >= p
1089	110	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	checkedCumulativeProbability(lower) >= $
1090	119	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
1091	129	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	0	DEF	$
1092	132	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ > lower
1092	132	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	DEF	tmp > $
1093	137	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ < upper
1093	137	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	upper	int	0	DEF	tmp < $
14909	158	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	NIL-WHILE	$ + 1 < upper
14909	158	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	NIL-WHILE	lower + 1 < $
1094	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ > upper
1094	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ < lower
1094	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	DEF	xm < $
1094	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	DEF	xm > $
1095	170	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	pm	double	1	DEF	$ >= p
1095	170	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	p	double	1	DEF	pm >= $
1096	203	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
14910	208	8	AbstractIntegerDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
14910	208	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1097	229	8	AbstractIntegerDistribution.java	checkedCumulativeProbability	result	double	0	MathInternalError	Double.isNaN($)
3525	232	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y0.$.length != equations.getDimension()
3525	232	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y0.length != $.getDimension()
3525	232	8	AbstractIntegrator.java	integrate	y0	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
3526	235	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y.$.length != equations.getDimension()
3526	235	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y.length != $.getDimension()
3526	235	8	AbstractIntegrator.java	integrate	y	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
3527	321	12	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.statesInitialized
3528	340	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.state.evaluateStep(interpolator)
3528	340	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	state.evaluateStep($)
16879	346	12	AbstractIntegrator.java	acceptStep	occuringEvents	SortedSet<EventState>	0	NIL-WHILE	$.isEmpty()
3529	380	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	RET	$.isLastStep
3530	390	16	AbstractIntegrator.java	acceptStep	needReset	boolean	0	RET	$
3531	406	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	DEF	$.evaluateStep(interpolator)
3531	406	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	currentEvent.evaluateStep($)
3532	451	8	AbstractIntegrator.java	sanityChecks	threshold	double	0	NumberIsTooSmallException	dt <= $
3532	451	8	AbstractIntegrator.java	sanityChecks	dt	double	0	NumberIsTooSmallException	$ <= threshold
16585	172	8	AbstractLeastSquaresOptimizer.java	computeSigma	i	int	0	NIL-FOR	$ < nC
16585	172	8	AbstractLeastSquaresOptimizer.java	computeSigma	nC	int	0	NIL-FOR	i < $
3099	217	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	objectiveValue.$.length != target.$.length
3099	217	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	DimensionMismatchException	objectiveValue.length != $.length
3099	217	8	AbstractLeastSquaresOptimizer.java	computeResiduals	objectiveValue	double[]	0	DimensionMismatchException	$.length != target.length
16586	223	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < target.$.length
16586	223	8	AbstractLeastSquaresOptimizer.java	computeResiduals	i	int	0	NIL-FOR	$ < target.length
16586	223	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	NIL-FOR	i < $.length
3100	249	12	AbstractLeastSquaresOptimizer.java	parseOptimizationData	THIS	AbstractLeastSquaresOptimizer	0	DEF	$.data instanceof Weight
3101	265	8	AbstractLeastSquaresOptimizer.java	squareRoot	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
16587	268	12	AbstractLeastSquaresOptimizer.java	squareRoot	i	int	0	NIL-FOR	$ < dim
16587	268	12	AbstractLeastSquaresOptimizer.java	squareRoot	dim	int	0	NIL-FOR	i < $
15867	172	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	i	int	0	NIL-FOR	$ < nC
15867	172	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nC	int	0	NIL-FOR	i < $
1951	177	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	dsValue.$.length != nR
1951	177	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	dsValue	DerivativeStructure[]	0	DimensionMismatchException	$.length != nR
1951	177	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nR	int	0	DimensionMismatchException	dsValue.length != $
15868	181	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	i	int	0	NIL-FOR	$ < nR
15868	181	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nR	int	0	NIL-FOR	i < $
15869	183	12	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	j	int	0	NIL-FOR	$ < nC
15869	183	12	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nC	int	0	NIL-FOR	j < $
1952	372	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NumberIsTooSmallException	$.rows <= $.cols
15870	379	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
15870	379	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
15870	379	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
15871	405	8	AbstractLeastSquaresOptimizer.java	computeSigma	i	int	0	NIL-FOR	$ < nC
15871	405	8	AbstractLeastSquaresOptimizer.java	computeSigma	nC	int	0	NIL-FOR	i < $
1953	542	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	objectiveValue.$.length != target.$.length
1953	542	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	DimensionMismatchException	objectiveValue.length != $.length
1953	542	8	AbstractLeastSquaresOptimizer.java	computeResiduals	objectiveValue	double[]	0	DimensionMismatchException	$.length != target.length
15872	548	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < target.$.length
15872	548	8	AbstractLeastSquaresOptimizer.java	computeResiduals	i	int	0	NIL-FOR	$ < target.length
15872	548	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	NIL-FOR	i < $.length
1954	562	8	AbstractLeastSquaresOptimizer.java	squareRoot	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
15873	565	12	AbstractLeastSquaresOptimizer.java	squareRoot	i	int	0	NIL-FOR	$ < dim
15873	565	12	AbstractLeastSquaresOptimizer.java	squareRoot	dim	int	0	NIL-FOR	i < $
1881	131	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxCountExceededException	++$.iterations > $.maxIterations
2599	116	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	NullArgumentException	$ == null
2600	119	8	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	data.$.length != nobs * (nvars + 1)
2600	119	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DimensionMismatchException	$.length != nobs * (nvars + 1)
2600	119	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DimensionMismatchException	data.length != $ * (nvars + 1)
2600	119	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DimensionMismatchException	data.length != nobs * ($ + 1)
2601	122	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NumberIsTooSmallException	$ <= nvars
2601	122	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NumberIsTooSmallException	nobs <= $
16275	129	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
16275	129	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
2602	131	12	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	$.noIntercept
16276	134	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < cols
16276	134	12	AbstractMultipleLinearRegression.java	newSampleData	cols	int	0	NIL-FOR	j < $
2603	150	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NullArgumentException	$ == null
2604	153	8	AbstractMultipleLinearRegression.java	newYSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	y.$.length == 0
2604	153	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NoDataException	$.length == 0
2605	185	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NullArgumentException	$ == null
2606	188	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2606	188	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NoDataException	$.length == 0
2607	191	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	$.noIntercept
16277	196	12	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NIL-FOR	i < x.$.length
16277	196	12	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	NIL-FOR	$ < x.length
16277	196	12	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NIL-FOR	i < $.length
2608	197	16	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x[i].length != nVars
2608	197	16	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	DimensionMismatchException	x[$].length != nVars
2608	197	16	AbstractMultipleLinearRegression.java	newXSampleData	nVars	int	0	DimensionMismatchException	x[i].length != $
2608	197	16	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DimensionMismatchException	$[i].length != nVars
2609	226	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NullArgumentException	$ == null
2609	226	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	NullArgumentException	$ == null
2610	229	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != y.$.length
2610	229	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DimensionMismatchException	$.length != y.length
2610	229	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DimensionMismatchException	x.length != $.length
2611	232	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2611	232	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NoDataException	$.length == 0
2612	235	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	MathIllegalArgumentException	x[0].length + 1 > x.$.length
2612	235	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	MathIllegalArgumentException	$[0].length + 1 > $.length
2613	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != covariance.$.length
2613	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DimensionMismatchException	$.length != covariance.length
2613	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DimensionMismatchException	x.length != $.length
2614	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length != covariance[0].length
2614	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length > 0
2614	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length != $[0].length
2614	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length > 0
16278	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
16278	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
1248	61	8	AbstractMultivariateRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
14956	66	8	AbstractMultivariateRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
14956	66	8	AbstractMultivariateRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
3579	59	12	AbstractParameterizable.java	isSupported	THIS	AbstractParameterizable	0	RET	$.supportedName.equals(name)
3579	59	12	AbstractParameterizable.java	isSupported	name	String	0	RET	supportedName.equals($)
3580	73	8	AbstractParameterizable.java	complainIfNotSupported	THIS	AbstractParameterizable	0	UnknownParameterException	$.isSupported(name)
3580	73	8	AbstractParameterizable.java	complainIfNotSupported	name	String	0	UnknownParameterException	isSupported($)
16617	108	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
16617	108	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
16617	108	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
16618	110	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
3129	111	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
3130	115	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
3130	115	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
3130	115	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
3131	157	8	AbstractRandomGenerator.java	nextInt	n	int	0	NotStrictlyPositiveException	$ <= 0
3132	253	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
16619	261	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
3133	266	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
1277	112	8	AbstractRealDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1277	112	8	AbstractRealDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
1278	157	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1278	157	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1279	162	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
1280	167	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
1281	177	8	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	DEF	$ == Double.NEGATIVE_INFINITY
1282	178	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
14970	182	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(lowerBound) >= p
14970	182	16	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	cumulativeProbability($) >= p
14970	182	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(lowerBound) >= $
1283	188	8	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	DEF	$ == Double.POSITIVE_INFINITY
1284	189	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
14971	193	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(upperBound) < p
14971	193	16	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	cumulativeProbability($) < p
14971	193	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(upperBound) < $
1285	211	8	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.isSupportConnected()
1286	214	12	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	x - dx >= $.getSupportLowerBound()
1286	214	12	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	x - $ >= getSupportLowerBound()
1286	214	12	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	$ - dx >= getSupportLowerBound()
1287	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.cumulativeProbability(x - dx) == px
1287	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	0	RET	cumulativeProbability(x - dx) == $
1287	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	cumulativeProbability(x - $) == px
1287	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	cumulativeProbability($ - dx) == px
14972	218	20	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	NIL-WHILE	upperBound - lowerBound > $
14972	218	20	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	upperBound - $ > dx
14972	218	20	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	$ - lowerBound > dx
1288	220	24	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	1	DEF	$.cumulativeProbability(midPoint) < px
1288	220	24	AbstractRealDistribution.java	inverseCumulativeProbability	midPoint	double	1	DEF	cumulativeProbability($) < px
1288	220	24	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	1	DEF	cumulativeProbability(midPoint) < $
1289	269	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
14973	274	8	AbstractRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
14973	274	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1408	68	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ < 1
1409	71	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ < 1
15186	84	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
15186	84	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
15187	85	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
15187	85	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
15188	101	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
15188	101	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
15189	102	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
15189	102	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
15190	115	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
15190	115	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
15191	116	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
15191	116	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
15192	129	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
15192	129	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
15193	130	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
15193	130	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
15194	147	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
15194	147	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
15195	148	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
15195	148	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
15196	150	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
15196	150	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1410	169	8	AbstractRealMatrix.java	power	p	int	0	NotPositiveException	$ < 0
1411	173	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NonSquareMatrixException	$.isSquare()
1412	177	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 0
1413	181	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 1
15197	198	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
15197	198	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
15197	198	8	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1414	199	12	AbstractRealMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1414	199	12	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
1415	204	16	AbstractRealMatrix.java	power	maxI	int	0	DEF	$ == -1
15198	213	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ <= maxI
15198	213	8	AbstractRealMatrix.java	power	maxI	int	0	NIL-FOR	i <= $
15199	230	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
15199	230	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
15199	230	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
15200	232	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
15200	232	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
15200	232	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
15201	312	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
15201	312	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
15202	313	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
15202	313	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1416	351	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1416	351	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1416	351	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1416	351	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1416	351	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1416	351	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
15203	356	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < rowsCount
15203	356	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	NIL-FOR	i < $
1417	357	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[i].length < columnsCount
1417	357	12	AbstractRealMatrix.java	copySubMatrix	i	int	0	MatrixDimensionMismatchException	destination[$].length < columnsCount
1417	357	12	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[i].length < $
1417	357	12	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[i].length < columnsCount
1418	396	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1418	396	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < nCols
1418	396	8	AbstractRealMatrix.java	copySubMatrix	nCols	int	0	MatrixDimensionMismatchException	destination[0].length < $
1418	396	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1418	396	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
1418	396	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < nCols
15204	402	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
15204	402	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
15204	402	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
1419	404	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destinationI.$.length < nCols
1419	404	12	AbstractRealMatrix.java	copySubMatrix	destinationI	double[]	0	MatrixDimensionMismatchException	$.length < nCols
1419	404	12	AbstractRealMatrix.java	copySubMatrix	nCols	int	0	MatrixDimensionMismatchException	destinationI.length < $
15205	408	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
15205	408	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
15205	408	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1420	420	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1421	425	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
15206	429	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
15206	429	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1422	430	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1422	430	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1422	430	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1422	430	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[r].length != nCols
15207	440	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
15207	440	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
15208	441	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
15208	441	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
15209	452	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
15209	452	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1423	464	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1423	464	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1423	464	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
15210	470	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
15210	470	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
15211	481	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
15211	481	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1424	493	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1424	493	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1424	493	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
15212	499	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
15212	499	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1425	515	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1425	515	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nCols
15213	519	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
15213	519	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1426	535	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1426	535	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nRows
15214	539	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
15214	539	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
15215	549	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
15215	549	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1427	561	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1427	561	8	AbstractRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1427	561	8	AbstractRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
15216	564	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
15216	564	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
15217	574	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
15217	574	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1428	586	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1428	586	8	AbstractRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1428	586	8	AbstractRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
15218	589	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
15218	589	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1429	651	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1429	651	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
15219	655	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
15219	655	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1430	666	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1430	666	8	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1430	666	8	AbstractRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
15220	671	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
15220	671	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
15221	673	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
15221	673	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1431	691	12	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1431	691	12	AbstractRealMatrix.java	operate	v	RealVector	0	DimensionMismatchException	$.getDimension() != nCols
15222	696	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
15222	696	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
15223	698	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
15223	698	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1432	713	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1432	713	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1432	713	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
15224	718	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
15224	718	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
15225	720	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
15225	720	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1433	737	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1433	737	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DimensionMismatchException	$.getDimension() != nRows
15226	742	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
15226	742	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
15227	744	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
15227	744	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
15228	759	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
15228	759	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
15229	760	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
15229	760	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
15230	774	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
15230	774	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
15231	775	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
15231	775	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
15232	790	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
15232	790	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
15233	791	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
15233	791	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
15234	808	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
15234	808	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
15235	809	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
15235	809	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
15236	821	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
15236	821	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
15237	822	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
15237	822	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
15238	836	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
15238	836	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
15239	837	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
15239	837	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
15240	852	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
15240	852	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
15241	853	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
15241	853	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
15242	870	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
15242	870	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
15243	871	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
15243	871	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
1434	930	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
1434	930	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
1435	933	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
1436	939	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
1436	939	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
1436	939	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1436	939	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
15244	942	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
15244	942	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
15245	943	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
15245	943	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1437	944	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
1437	944	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
1437	944	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
1437	944	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
15246	964	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
15246	964	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
15247	965	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
15247	965	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
593	92	8	AbstractRegion.java	AbstractRegion	boundary	Collection<SubHyperplane<S>>	1	DEF	$.size() == 0
594	143	8	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	1	DEF	hyperplanes.$.length == 0
594	143	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$ == null
594	143	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$.length == 0
595	154	16	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	0	DEF	node.insertCut($.hyperplane)
595	154	16	AbstractRegion.java	AbstractRegion	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
14871	181	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
14871	181	8	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	NIL-WHILE	$ == null
596	183	12	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	DEF	node.insertCut($.copySelf())
596	183	12	AbstractRegion.java	insertCuts	node	BSPTree<S>	0	DEF	$.insertCut(inserted.copySelf())
597	188	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	RET	$.hasNext()
14872	195	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
598	237	8	AbstractRegion.java	isEmpty	node	BSPTree<S>	0	RET	$.getCut() == null
599	266	8	AbstractRegion.java	checkPoint	cell	BSPTree<S>	0	RET	$.getCut() == null
600	280	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getCut() != null
600	280	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getAttribute() == null
600	280	8	AbstractRegion.java	getTree	includeBoundaryAttributes	boolean	0	DEF	$
601	412	8	AbstractRegion.java	getSize	THIS	AbstractRegion	0	DEF	$.barycenter == null
602	427	8	AbstractRegion.java	getBarycenter	THIS	AbstractRegion	0	DEF	$.barycenter == null
603	471	8	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	RET	$.getCut() == null
604	472	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getAttribute()
605	484	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
605	484	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
605	484	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
606	485	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
606	485	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
607	489	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
607	489	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
608	493	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
608	493	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
609	499	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
609	499	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
609	499	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
610	500	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
610	500	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
611	504	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
611	504	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
612	508	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
612	508	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
613	520	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
613	520	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
614	526	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())
614	526	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().getHyperplane().sameOrientationAs($.getHyperplane())
615	527	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
615	527	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
616	530	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
616	530	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
617	534	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
617	534	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
618	537	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
618	537	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
619	602	8	AbstractRegion.java	recurseIntersection	node	BSPTree<S>	0	RET	$.getCut() == null
620	616	12	AbstractRegion.java	recurseIntersection	plus	SubHyperplane<S>	1	RET	$ == null
621	618	19	AbstractRegion.java	recurseIntersection	minus	SubHyperplane<S>	1	RET	$ == null
622	652	8	AbstractRegion.java	recurseTransform	node	BSPTree<S>	0	RET	$.getCut() == null
623	659	8	AbstractRegion.java	recurseTransform	attribute	BoundaryAttribute<S>	0	DEF	$ != null
2803	98	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
2804	101	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
2804	101	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
16320	109	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
16320	109	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
16321	111	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
16321	111	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
2805	112	16	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
2805	112	16	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
2806	133	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
2806	133	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
16322	145	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
16322	145	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
16322	145	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
2807	149	12	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
2807	149	12	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
16323	152	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
16323	152	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
16324	155	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
16324	155	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
2808	156	20	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
2808	156	20	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
2808	156	20	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
2809	161	16	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
2810	168	12	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
16325	170	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
16325	170	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
2811	217	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
2811	217	8	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
16326	226	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
16326	226	8	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
16327	229	12	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
16327	229	12	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
16328	247	8	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
16328	247	8	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
2812	250	12	AbstractSimplex.java	evaluate	vertex	PointValuePair	0	DEF	Double.isNaN($.getValue())
16329	268	8	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
16329	268	8	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
2813	269	12	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
2813	269	12	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
2813	269	12	AbstractSimplex.java	replaceWorstPoint	pointValuePair	PointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
2813	269	12	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<PointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
2814	296	8	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
2814	296	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
2814	296	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
2815	311	8	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
2815	311	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
2815	311	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
2816	325	8	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
2816	325	8	AbstractSimplex.java	setPoints	points	PointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
16330	341	8	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
16330	341	8	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
1965	100	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
1966	103	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
1966	103	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
15889	111	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
15889	111	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
15890	113	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
15890	113	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
1967	114	16	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
1967	114	16	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
1968	135	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
1968	135	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
15891	147	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
15891	147	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
15891	147	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
1969	151	12	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
1969	151	12	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
15892	154	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
15892	154	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
15893	157	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
15893	157	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1970	158	20	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
1970	158	20	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
1970	158	20	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
1971	163	16	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
1972	170	12	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
15894	172	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
15894	172	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1973	219	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
1973	219	8	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
15895	228	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
15895	228	8	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
15896	231	12	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
15896	231	12	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
15897	249	8	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
15897	249	8	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
1974	252	12	AbstractSimplex.java	evaluate	vertex	PointValuePair	0	DEF	Double.isNaN($.getValue())
15898	270	8	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
15898	270	8	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
1975	271	12	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
1975	271	12	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
1975	271	12	AbstractSimplex.java	replaceWorstPoint	pointValuePair	PointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
1975	271	12	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<PointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
1976	298	8	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1976	298	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1976	298	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
1977	313	8	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1977	313	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
1977	313	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1978	327	8	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
1978	327	8	AbstractSimplex.java	setPoints	points	PointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
15899	343	8	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
15899	343	8	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
3389	181	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState == null
3389	181	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState == null
16745	194	6	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.interpolatedSecondaryState.$.length
16745	194	6	AbstractStepInterpolator.java	AbstractStepInterpolator	i	int	0	NIL-FOR	$ < interpolatedSecondaryState.length
3390	213	6	AbstractStepInterpolator.java	allocateInterpolatedArrays	dimension	int	1	DEF	$ < 0
3391	225	10	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	1	DEF	$.secondaryMappers == null
16746	231	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
16746	231	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	i	int	0	NIL-FOR	$ < secondaryMappers.length
3392	407	6	AbstractStepInterpolator.java	evaluateCompleteInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
3393	489	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
3394	520	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
3395	537	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
16747	538	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
16747	538	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
16748	582	4	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
16748	582	4	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < secondaryMappers.length
3396	587	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
16749	591	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
16749	591	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
2240	61	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2241	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
2241	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2241	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
2241	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
2242	131	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	NullArgumentException	$ == null
2243	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
2243	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
2243	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
2243	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
16106	152	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
16106	152	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
2244	167	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
2244	167	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
2245	170	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
649	125	8	AbstractSubHyperplane.java	recurseTransform	node	BSPTree<T>	0	RET	$.getCut() == null
650	132	8	AbstractSubHyperplane.java	recurseTransform	attribute	BoundaryAttribute<T>	0	DEF	$ != null
2363	85	8	AbstractUnivariateStatistic.java	setData	values	double[]	0	NullArgumentException	$ == null
2364	89	8	AbstractUnivariateStatistic.java	setData	begin	int	0	NotPositiveException	$ < 0
2365	93	8	AbstractUnivariateStatistic.java	setData	length	int	0	NotPositiveException	$ < 0
2366	97	8	AbstractUnivariateStatistic.java	setData	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
2366	97	8	AbstractUnivariateStatistic.java	setData	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
2366	97	8	AbstractUnivariateStatistic.java	setData	begin	int	0	NumberIsTooLargeException	$ + length > values.length
2366	97	8	AbstractUnivariateStatistic.java	setData	length	int	0	NumberIsTooLargeException	begin + $ > values.length
2367	186	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
2368	190	8	AbstractUnivariateStatistic.java	test	begin	int	0	NotPositiveException	$ < 0
2369	194	8	AbstractUnivariateStatistic.java	test	length	int	0	NotPositiveException	$ < 0
2370	198	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
2370	198	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
2370	198	8	AbstractUnivariateStatistic.java	test	begin	int	0	NumberIsTooLargeException	$ + length > values.length
2370	198	8	AbstractUnivariateStatistic.java	test	length	int	0	NumberIsTooLargeException	begin + $ > values.length
2371	203	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
2371	203	8	AbstractUnivariateStatistic.java	test	allowEmpty	boolean	0	RET	$
2372	284	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
2372	284	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	NullArgumentException	$ == null
2373	288	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DimensionMismatchException	weights.$.length != values.$.length
2373	288	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DimensionMismatchException	weights.length != $.length
2373	288	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DimensionMismatchException	$.length != values.length
16137	293	8	AbstractUnivariateStatistic.java	test	i	int	0	NIL-FOR	$ < begin + length
16137	293	8	AbstractUnivariateStatistic.java	test	begin	int	0	NIL-FOR	i < $ + length
16137	293	8	AbstractUnivariateStatistic.java	test	length	int	0	NIL-FOR	i < begin + $
2374	294	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isNaN(weights[$])
2374	294	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isNaN($[i])
2375	297	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isInfinite(weights[$])
2375	297	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
2376	300	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	weights[$] < 0
2376	300	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	$[i] < 0
2377	303	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] > 0.0
2377	303	12	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
2377	303	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] > 0.0
2378	308	8	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	MathIllegalArgumentException	$
16606	111	8	AbstractWell.java	AbstractWell	j	int	0	NIL-FOR	$ < r
16606	111	8	AbstractWell.java	AbstractWell	r	int	0	NIL-FOR	j < $
3112	154	8	AbstractWell.java	setSeed	seed	int[]	0	RET	$ == null
3113	161	8	AbstractWell.java	setSeed	THIS	AbstractWell	0	DEF	seed.$.length < $.v.$.length
3113	161	8	AbstractWell.java	setSeed	seed	int[]	0	DEF	$.length < v.length
16607	162	12	AbstractWell.java	setSeed	THIS	AbstractWell	0	NIL-FOR	i < $.v.$.length
16607	162	12	AbstractWell.java	setSeed	i	int	0	NIL-FOR	$ < v.length
16805	227	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-DOWHILE	$.isLastStep
16806	230	12	AdamsBashforthIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
16807	236	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.mainSetDimension
16807	236	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < mainSetDimension
3473	246	16	AdamsBashforthIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
16808	273	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
16808	273	12	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
16808	273	12	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
3474	287	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.isLastStep
3475	292	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.resetOccurred
3476	308	16	AdamsBashforthIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
16801	244	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-DOWHILE	$.isLastStep
16802	247	12	AdamsMoultonIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
16803	267	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
16803	267	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
16803	267	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
3469	276	16	AdamsMoultonIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
16804	290	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
16804	290	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
16804	290	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
3470	305	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.isLastStep
3471	310	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.resetOccurred
3472	327	16	AdamsMoultonIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
16866	167	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
16867	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
16867	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
3523	193	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
16868	227	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
16868	227	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
16868	227	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
16869	232	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
16869	232	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
16869	232	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
16870	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < y.$.length
16870	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < y.length
16870	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	y	double[][]	0	NIL-FOR	i < $.length
16871	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < aI.$.length
16871	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < aI.length
16871	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	aI	double[]	0	NIL-FOR	j < $.length
16872	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < yI.$.length
16872	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < yI.length
16872	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	yI	double[]	0	NIL-FOR	j < $.length
16873	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
16873	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
16873	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
16874	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
16874	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
16874	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
3508	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
3508	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
3508	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
3508	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
3509	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance.$.length != $.mainSetDimension
3509	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance != null
3510	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance.$.length != $.mainSetDimension
3510	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance != null
3511	253	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
16854	263	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
16854	263	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
16854	263	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
3512	272	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
16855	277	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
16855	277	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
16855	277	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
16856	284	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
16856	284	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
16856	284	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
3513	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
3513	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
3514	301	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
3514	301	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
3515	304	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
3516	325	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	NumberIsTooSmallException	FastMath.abs(h) < $.minStep
3516	325	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	NumberIsTooSmallException	FastMath.abs($) < minStep
3517	326	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
3518	334	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
3518	334	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
3519	336	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
3519	336	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
2381	307	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
2382	311	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
16138	321	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
2383	323	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
2383	323	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
2383	323	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
2384	326	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
2384	326	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
2384	326	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
2385	338	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
2386	340	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
3355	43	8	ArgUtils.java	flatten	array	Object[]	0	DEF	$ != null
3356	45	16	ArgUtils.java	flatten	THIS	ArgUtils	1	DEF	$.o instanceof Object[]
11	67	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
11	67	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
12	116	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	$ == k
12	116	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	n == $
12	116	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
13	119	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
13	119	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
13	119	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
14	123	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
14	123	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
15	133	8	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
14770	136	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
14770	136	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
16	140	15	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
14771	144	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
14771	144	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
14772	160	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
14772	160	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
17	197	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
17	197	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
17	197	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
18	200	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
18	200	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
18	200	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
19	203	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
19	203	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
20	206	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
14773	211	8	ArithmeticUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
14773	211	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
21	242	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
21	242	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
21	242	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
22	245	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
22	245	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
22	245	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
23	253	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
24	261	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
25	265	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
25	265	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
14774	275	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
14774	275	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
14775	280	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
14775	280	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
26	312	8	ArithmeticUtils.java	factorial	n	int	0	NotPositiveException	$ < 0
27	316	8	ArithmeticUtils.java	factorial	n	int	0	MathArithmeticException	$ > 20
28	336	8	ArithmeticUtils.java	factorialDouble	n	int	0	NotPositiveException	$ < 0
29	340	8	ArithmeticUtils.java	factorialDouble	n	int	0	RET	$ < 21
30	354	8	ArithmeticUtils.java	factorialLog	n	int	0	NotPositiveException	$ < 0
31	358	8	ArithmeticUtils.java	factorialLog	n	int	0	RET	$ < 21
14776	362	8	ArithmeticUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
14776	362	8	ArithmeticUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
32	401	8	ArithmeticUtils.java	gcd	a	int	0	MathArithmeticException:RET	$ == 0
32	401	8	ArithmeticUtils.java	gcd	b	int	0	MathArithmeticException:RET	$ == 0
33	403	12	ArithmeticUtils.java	gcd	a	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
33	403	12	ArithmeticUtils.java	gcd	b	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
34	414	8	ArithmeticUtils.java	gcd	a	int	0	DEF	$ < 0
35	415	12	ArithmeticUtils.java	gcd	a	int	1	DEF	Integer.MIN_VALUE == $
36	422	8	ArithmeticUtils.java	gcd	b	int	0	DEF	$ < 0
37	423	12	ArithmeticUtils.java	gcd	b	int	1	DEF	Integer.MIN_VALUE == $
38	430	8	ArithmeticUtils.java	gcd	useLong	boolean	0	MathArithmeticException:RET	$
39	431	12	ArithmeticUtils.java	gcd	al	long	0	MathArithmeticException	$ == bl
39	431	12	ArithmeticUtils.java	gcd	bl	long	0	MathArithmeticException	al == $
40	438	12	ArithmeticUtils.java	gcd	al	long	0	MathArithmeticException:RET	$ == 0
41	439	16	ArithmeticUtils.java	gcd	bl	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
42	477	8	ArithmeticUtils.java	gcdPositive	a	int	1	RET	$ == 0
43	480	13	ArithmeticUtils.java	gcdPositive	b	int	0	RET	$ == 0
14777	497	8	ArithmeticUtils.java	gcdPositive	a	int	0	NIL-WHILE	$ != b
14777	497	8	ArithmeticUtils.java	gcdPositive	b	int	0	NIL-WHILE	a != $
44	542	8	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException:RET	$ == 0
44	542	8	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException:RET	$ == 0
45	543	12	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException	$ == Long.MIN_VALUE
45	543	12	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException	$ == Long.MIN_VALUE
46	554	8	ArithmeticUtils.java	gcd	u	long	0	DEF	$ > 0
47	557	8	ArithmeticUtils.java	gcd	v	long	0	DEF	$ > 0
14778	562	8	ArithmeticUtils.java	gcd	u	long	0	NIL-WHILE	($ & 1) == 0
14778	562	8	ArithmeticUtils.java	gcd	v	long	0	NIL-WHILE	($ & 1) == 0
14778	562	8	ArithmeticUtils.java	gcd	k	int	0	NIL-WHILE	$ < 63
48	568	8	ArithmeticUtils.java	gcd	k	int	0	MathArithmeticException	$ == 63
14779	577	8	ArithmeticUtils.java	gcd	t	long	0	NIL-DOWHILE	$ != 0
14780	580	12	ArithmeticUtils.java	gcd	t	long	0	NIL-WHILE	($ & 1) == 0
49	584	12	ArithmeticUtils.java	gcd	t	long	1	DEF	$ > 0
50	620	8	ArithmeticUtils.java	lcm	a	int	0	RET	$ == 0
50	620	8	ArithmeticUtils.java	lcm	b	int	0	RET	$ == 0
51	624	8	ArithmeticUtils.java	lcm	lcm	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
52	654	8	ArithmeticUtils.java	lcm	a	long	0	RET	$ == 0
52	654	8	ArithmeticUtils.java	lcm	b	long	0	RET	$ == 0
53	658	8	ArithmeticUtils.java	lcm	lcm	long	0	MathArithmeticException	$ == Long.MIN_VALUE
54	677	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
54	677	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
55	695	8	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ > b
55	695	8	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a > $
56	699	12	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ < 0
57	700	16	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ < 0
58	702	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
58	702	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
59	707	23	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ > 0
60	709	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
60	709	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
61	719	19	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ > 0
62	724	16	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
62	724	16	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
63	749	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
63	749	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
64	767	8	ArithmeticUtils.java	subAndCheck	b	long	1	MathArithmeticException	$ == Long.MIN_VALUE
65	768	12	ArithmeticUtils.java	subAndCheck	a	long	1	DEF	$ < 0
66	789	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
14781	795	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
67	796	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
68	815	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
14782	821	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
69	822	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
70	841	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
14783	847	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
71	848	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
72	867	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
14784	873	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
73	874	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
74	893	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
75	909	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
14785	915	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
76	916	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
77	936	8	ArithmeticUtils.java	pow	e	BigInteger	0	NotPositiveException	$.compareTo(BigInteger.ZERO) < 0
14786	942	8	ArithmeticUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
78	943	12	ArithmeticUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
79	974	8	ArithmeticUtils.java	stirlingS2	k	int	0	NotPositiveException	$ < 0
80	977	8	ArithmeticUtils.java	stirlingS2	n	int	0	NumberIsTooLargeException	k > $
80	977	8	ArithmeticUtils.java	stirlingS2	k	int	0	NumberIsTooLargeException	$ > n
81	983	8	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	0	DEF	$ == null
14787	992	12	ArithmeticUtils.java	stirlingS2	THIS	ArithmeticUtils	0	NIL-FOR	i < stirlingS2.$.length
14787	992	12	ArithmeticUtils.java	stirlingS2	i	int	0	NIL-FOR	$ < stirlingS2.length
14787	992	12	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	0	NIL-FOR	i < $.length
14788	997	16	ArithmeticUtils.java	stirlingS2	j	int	0	NIL-FOR	$ < i
14788	997	16	ArithmeticUtils.java	stirlingS2	i	int	0	NIL-FOR	j < $
82	1007	8	ArithmeticUtils.java	stirlingS2	THIS	ArithmeticUtils	1	RET	n < stirlingS2.$.length
82	1007	8	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	1	RET	n < $.length
82	1007	8	ArithmeticUtils.java	stirlingS2	n	int	1	RET	$ < stirlingS2.length
83	1012	12	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 0
84	1014	19	ArithmeticUtils.java	stirlingS2	n	int	1	RET	k == $
84	1014	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 1
84	1014	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == n
85	1016	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 2
86	1018	19	ArithmeticUtils.java	stirlingS2	n	int	1	RET	k == $ - 1
86	1018	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == n - 1
14789	1024	16	ArithmeticUtils.java	stirlingS2	j	int	0	NIL-FOR	$ <= k
14789	1024	16	ArithmeticUtils.java	stirlingS2	k	int	0	NIL-FOR	j <= $
87	1027	20	ArithmeticUtils.java	stirlingS2	sum	long	0	MathArithmeticException	$ < 0
88	1052	8	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ > b
88	1052	8	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a > $
89	1058	12	ArithmeticUtils.java	addAndCheck	a	long	1	MathArithmeticException	$ < 0
90	1059	16	ArithmeticUtils.java	addAndCheck	b	long	1	MathArithmeticException	$ < 0
91	1061	20	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
91	1061	20	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
92	1075	16	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
92	1075	16	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
93	1094	8	ArithmeticUtils.java	checkBinomial	n	int	0	NumberIsTooLargeException	$ < k
93	1094	8	ArithmeticUtils.java	checkBinomial	k	int	0	NumberIsTooLargeException	n < $
94	1098	8	ArithmeticUtils.java	checkBinomial	n	int	0	NotPositiveException	$ < 0
1509	157	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
1510	162	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NoDataException	$ == 0
1511	166	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
15325	169	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
15325	169	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
1512	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	d[r].length != nCols
1512	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1512	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1512	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DimensionMismatchException	$[r].length != nCols
15326	202	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
15326	202	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
15327	237	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
15327	237	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
15328	241	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
15328	241	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
15329	265	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
15329	265	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
15330	269	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
15330	269	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
15331	295	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
15331	295	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
15332	298	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
15332	298	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
15333	300	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
15333	300	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1513	333	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DimensionMismatchException	$.data == null
1514	334	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1515	337	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1516	341	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1517	346	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
15334	350	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
15334	350	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1518	351	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1518	351	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1518	351	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1518	351	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[i].length != nCols
1519	419	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1519	419	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1519	419	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
15335	423	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
15335	423	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
15336	426	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
15336	426	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1520	439	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1520	439	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1520	439	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
15337	444	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
15337	444	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
15338	446	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
15338	446	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
15339	461	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
15339	461	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
15340	463	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
15340	463	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
15341	476	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
15341	476	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
15342	478	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
15342	478	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
15343	494	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
15343	494	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
15344	496	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
15344	496	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
15345	512	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
15345	512	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
15346	514	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
15346	514	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
15347	527	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
15347	527	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
15348	528	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
15348	528	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
15349	542	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
15349	542	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
15350	543	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
15350	543	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
15351	559	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
15351	559	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
15352	560	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
15352	560	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
15353	577	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
15353	577	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
15354	578	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
15354	578	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
15355	594	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
15355	594	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1692	102	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
1693	105	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullArgumentException	$ == null
1694	109	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NoDataException	$ == 0
1695	113	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	NoDataException	$ == 0
15628	116	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
15628	116	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
1696	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	d[r].length != nCols
1696	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1696	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1696	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DimensionMismatchException	$[r].length != nCols
15629	135	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
15629	135	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
15630	170	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
15630	170	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
15631	174	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
15631	174	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
15632	197	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
15632	197	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
15633	201	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
15633	201	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
15634	231	8	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
15634	231	8	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
15635	234	12	Array2DRowRealMatrix.java	multiply	mRow	int	0	NIL-FOR	$ < nSum
15635	234	12	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	mRow < $
15636	238	12	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
15636	238	12	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
15637	241	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
15637	241	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1697	272	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DimensionMismatchException	$.data == null
1698	273	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1699	276	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1700	281	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1701	286	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
15638	290	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
15638	290	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1702	291	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1702	291	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1702	291	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1702	291	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[i].length != nCols
1703	354	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1703	354	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1703	354	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
15639	358	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
15639	358	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
15640	361	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
15640	361	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1704	375	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1704	375	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1704	375	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
15641	380	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
15641	380	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
15642	382	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
15642	382	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
15643	398	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
15643	398	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
15644	400	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
15644	400	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
15645	413	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
15645	413	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
15646	415	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
15646	415	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
15647	431	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
15647	431	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
15648	433	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
15648	433	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
15649	449	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
15649	449	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
15650	451	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
15650	451	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
15651	464	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
15651	464	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
15652	465	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
15652	465	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
15653	479	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
15653	479	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
15654	480	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
15654	480	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
15655	496	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
15655	496	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
15656	497	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
15656	497	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
15657	514	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
15657	514	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
15658	515	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
15658	515	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
15659	531	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
15659	531	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1794	149	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	d.$.length == 0
1794	149	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	ZeroException	$.length == 0
1795	191	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1795	191	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1795	191	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1795	191	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1796	213	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1796	213	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1796	213	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1796	213	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
15753	232	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15753	232	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
1797	394	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1797	394	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1797	394	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
1798	418	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1798	418	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1798	418	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
15754	445	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15754	445	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
15755	463	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15755	463	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
15756	477	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15756	477	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
15757	495	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15757	495	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
15758	504	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15758	504	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
15759	512	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15759	512	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
15760	521	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15760	521	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
15761	529	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15761	529	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
15762	538	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15762	538	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
15763	546	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15763	546	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
15764	557	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15764	557	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
15765	567	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15765	567	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
15766	577	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15766	577	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
15767	590	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15767	590	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
15768	608	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15768	608	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
15769	626	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15769	626	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
15770	640	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15770	640	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
15771	663	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15771	663	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
15772	695	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15772	695	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
15773	713	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15773	713	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
15774	745	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
15774	745	12	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
15775	746	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
15775	746	16	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
15776	763	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
15776	763	8	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
15777	764	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
15777	764	12	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1799	810	8	ArrayFieldVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
15778	838	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
15778	838	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
15778	838	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
1800	894	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DimensionMismatchException	$.data.$.length != n
1800	894	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1801	908	8	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
1801	908	8	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
1802	911	8	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
1803	918	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
1803	918	12	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
15779	922	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
15779	922	12	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1804	923	16	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
1804	923	16	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
1804	923	16	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
1805	955	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	OutOfRangeException	index >= $.getDimension()
1805	955	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1805	955	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1364	105	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1365	123	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1366	126	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1366	126	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NumberIsTooLargeException	$.length < pos + size
1366	126	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1366	126	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
15123	140	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
15123	140	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
15123	140	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
1367	157	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NullArgumentException	$ == null
1368	160	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1368	160	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NumberIsTooLargeException	$.length < pos + size
1368	160	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1368	160	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
15124	164	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
15124	164	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
15124	164	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
1369	176	8	ArrayRealVector.java	ArrayRealVector	v	RealVector	0	NullArgumentException	$ == null
15125	180	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15125	180	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
15126	227	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l2
15126	227	8	ArrayRealVector.java	ArrayRealVector	l2	int	0	NIL-FOR	i < $
15127	241	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l1
15127	241	8	ArrayRealVector.java	ArrayRealVector	l1	int	0	NIL-FOR	i < $
1370	296	8	ArrayRealVector.java	add	v	RealVector	1	RET	$ instanceof ArrayRealVector
15128	302	12	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < dim
15128	302	12	ArrayRealVector.java	add	dim	int	0	NIL-FOR	i < $
15129	310	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1371	322	8	ArrayRealVector.java	subtract	v	RealVector	1	RET	$ instanceof ArrayRealVector
15130	328	12	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < dim
15130	328	12	ArrayRealVector.java	subtract	dim	int	0	NIL-FOR	i < $
15131	336	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
15132	353	8	ArrayRealVector.java	mapToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15132	353	8	ArrayRealVector.java	mapToSelf	i	int	0	NIL-FOR	$ < data.length
15133	362	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15133	362	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
15134	371	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15134	371	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
15135	380	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15135	380	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
15136	389	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15136	389	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
1372	399	8	ArrayRealVector.java	ebeMultiply	v	RealVector	1	RET	$ instanceof ArrayRealVector
15137	405	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < dim
15137	405	12	ArrayRealVector.java	ebeMultiply	dim	int	0	NIL-FOR	i < $
15138	412	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15138	412	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
1373	423	8	ArrayRealVector.java	ebeDivide	v	RealVector	1	RET	$ instanceof ArrayRealVector
15139	429	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < dim
15139	429	12	ArrayRealVector.java	ebeDivide	dim	int	0	NIL-FOR	i < $
15140	436	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15140	436	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
1374	456	8	ArrayRealVector.java	dotProduct	v	RealVector	0	RET	$ instanceof ArrayRealVector
15141	460	12	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15141	460	12	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
1375	501	8	ArrayRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
15142	505	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15142	505	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
15143	513	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15143	513	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
1376	525	8	ArrayRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof ArrayRealVector
15144	529	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15144	529	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
15145	537	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15145	537	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
1377	549	8	ArrayRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
15146	553	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15146	553	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
15147	561	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15147	561	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
1378	572	8	ArrayRealVector.java	outerProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
15148	577	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
15148	577	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
15149	578	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
15149	578	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
15150	587	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
15150	587	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
15151	588	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
15151	588	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1379	646	8	ArrayRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
1380	685	8	ArrayRealVector.java	setSubVector	v	RealVector	1	DEF	$ instanceof ArrayRealVector
15152	689	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
15152	689	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
15152	689	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
1381	758	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DimensionMismatchException	$.data.$.length != n
1381	758	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1382	772	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
1383	788	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
1384	793	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
1385	804	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
1385	804	8	ArrayRealVector.java	equals	other	Object	0	RET	this == $
1386	808	8	ArrayRealVector.java	equals	other	Object	0	RET	$ instanceof RealVector
1387	813	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
1387	813	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
1388	817	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
15153	821	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15153	821	8	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1389	822	12	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
1389	822	12	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
1389	822	12	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
1390	834	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
1391	851	8	ArrayRealVector.java	combineToSelf	y	RealVector	1	DEF	$ instanceof ArrayRealVector
15154	854	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
15154	854	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
15155	859	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
15155	859	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
15156	870	8	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15156	870	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
15157	883	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
15157	883	8	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
15158	915	8	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
15158	915	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
15159	928	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
15159	928	8	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
16381	295	8	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
16381	295	8	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
2857	299	12	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= -$.initialTrustRegionRadius
2857	299	12	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= -initialTrustRegionRadius
2858	300	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= ZERO
2858	300	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= ZERO
2859	311	19	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(j) <= $.initialTrustRegionRadius
2859	311	19	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	upperDifference.getEntry($) <= initialTrustRegionRadius
2860	312	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.upperDifference.getEntry(j) <= ZERO
2860	312	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	upperDifference.getEntry($) <= ZERO
16382	406	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16382	406	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2861	443	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex != kbase
2861	443	12	BOBYQAOptimizer.java	bobyqb	kbase	int	0	DEF	trustRegionCenterInterpolationPointIndex != $
16383	445	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16383	445	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
16384	446	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
16384	446	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2862	447	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2862	447	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
2863	454	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() > npt
2863	454	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	getEvaluations() > $
16385	455	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16385	455	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16386	457	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16386	457	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
16387	461	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16387	461	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2864	494	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
2864	494	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
2865	499	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
2865	499	16	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
2866	513	16	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
2866	513	16	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
2866	513	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
2866	513	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
16388	518	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16388	518	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2867	520	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.lowerDifference.getEntry(j)
2867	520	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2868	523	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.upperDifference.getEntry(j)
2868	523	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2869	526	20	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2869	526	20	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
16389	528	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16389	528	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2870	534	24	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2870	534	24	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
2871	553	12	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
2871	553	12	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
16390	558	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16390	558	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16391	561	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16391	561	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
16392	567	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16392	567	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
16393	571	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
16393	571	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
16394	582	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
16394	582	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
16395	585	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16395	585	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16396	590	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16396	590	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
16397	592	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16397	592	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16398	596	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16398	596	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16399	602	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16399	602	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
16400	605	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
16400	605	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
16401	617	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16401	617	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
16402	619	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16402	619	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16403	623	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
16403	623	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
16404	632	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16404	632	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2872	641	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
16405	673	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16405	673	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
16406	684	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16406	684	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16407	688	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16407	688	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
16408	698	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
16408	698	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
16409	700	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16409	700	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16410	704	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16410	704	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16411	711	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16411	711	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
16412	716	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16412	716	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16413	721	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16413	721	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2873	740	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
2874	744	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
2874	744	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
2874	744	16	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
16414	745	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16414	745	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
16415	763	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16415	763	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2875	764	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2875	764	20	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
16416	768	20	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
16416	768	20	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
16417	777	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16417	777	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2876	786	20	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2876	786	20	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2876	786	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
16418	807	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16418	807	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2877	815	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.lowerDifference.getEntry(i)
2877	815	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2878	818	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.upperDifference.getEntry(i)
2878	818	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2879	825	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
2880	827	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
16419	838	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16419	838	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
16420	840	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
16420	840	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2881	842	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
2881	842	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
16421	849	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16421	849	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2882	859	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
2882	859	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
2883	865	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
2884	866	16	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
2885	871	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
2886	874	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
2887	881	16	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2887	881	16	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2888	887	16	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2888	887	16	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
16422	894	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16422	894	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16423	896	24	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
16423	896	24	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
16424	905	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16424	905	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2889	914	24	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2889	914	24	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2889	914	24	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
2890	925	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
2890	925	20	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
16425	940	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16425	940	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
16426	942	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
16426	942	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
16427	947	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
16427	947	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
16428	949	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16428	949	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16429	958	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16429	958	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
16430	962	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16430	962	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16431	964	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
16431	964	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
16432	968	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16432	968	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
16433	972	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16433	972	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
16434	976	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16434	976	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2891	982	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2891	982	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
16435	986	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16435	986	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
16436	991	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
16436	991	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2892	992	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2892	992	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
16437	999	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16437	999	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16438	1001	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16438	1001	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
16439	1005	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16439	1005	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2893	1015	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
16440	1016	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16440	1016	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16441	1020	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
16441	1020	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
16442	1022	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16442	1022	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16443	1025	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16443	1025	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16444	1029	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16444	1029	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16445	1031	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16445	1031	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
16446	1039	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16446	1039	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
16447	1041	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16447	1041	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2894	1045	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2894	1045	20	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2895	1053	27	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2895	1053	27	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
2896	1074	16	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
2896	1074	16	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
2897	1077	16	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
16448	1078	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
16448	1078	20	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
2898	1079	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
2898	1079	24	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
2899	1082	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
2899	1082	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
2900	1085	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
2900	1085	24	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
2901	1097	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
2902	1100	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
2902	1100	12	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
2902	1100	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
16449	1117	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16449	1117	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16450	1119	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16450	1119	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2903	1124	16	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
2903	1124	16	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
2904	1136	12	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
2905	1138	16	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2906	1141	20	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2906	1141	20	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2907	1153	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2908	1156	12	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
2909	1159	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta, dnorm) > $
2909	1159	12	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($, dnorm) > rho
2909	1159	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta, $) > rho
2910	1168	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
2910	1168	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
2911	1171	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
2912	1173	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
2913	1187	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2914	1193	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
2914	1193	12	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= $
16451	1194	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16451	1194	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2915	1202	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2915	1202	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2916	1205	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2916	1205	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
16452	1268	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
16452	1268	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
16453	1271	8	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
16453	1271	8	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
16454	1273	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
16454	1273	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
16455	1282	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16455	1282	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
16456	1285	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
16456	1285	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
16457	1287	12	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
16457	1287	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
16458	1291	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16458	1291	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
16459	1307	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
16459	1307	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
2917	1308	12	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2917	1308	12	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
16460	1313	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16460	1313	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
16461	1326	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16461	1326	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2918	1328	16	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
2919	1329	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2919	1329	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2919	1329	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2919	1329	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2920	1333	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2920	1333	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2920	1333	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2920	1333	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2921	1339	23	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
2922	1340	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2922	1340	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2922	1340	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2922	1340	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2923	1344	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2923	1344	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2923	1344	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2923	1344	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2924	1359	12	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
2924	1359	12	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
2925	1363	16	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
2925	1363	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
2926	1371	16	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
2926	1371	16	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
2927	1373	20	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
2927	1373	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
2928	1385	16	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
2928	1385	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
2929	1390	16	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
2929	1390	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
2930	1402	12	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
2930	1402	12	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
16462	1412	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16462	1412	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2931	1417	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
2932	1420	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
16463	1435	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16463	1435	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2933	1438	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.max($.trustRegionCenterOffset.getEntry(i) - $.upperDifference.getEntry(i), glagValue) < ZERO
2933	1438	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.min($.trustRegionCenterOffset.getEntry(i) - $.lowerDifference.getEntry(i), glagValue) > ZERO
2933	1438	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
2933	1438	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
2933	1438	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
2933	1438	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
2934	1445	12	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
2935	1451	12	BOBYQAOptimizer.java	altmov	tmp1	double	0	DEF	$ > ZERO
16464	1454	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16464	1454	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2936	1455	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
2936	1455	20	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
2936	1455	20	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
2937	1457	24	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 <= $.lowerDifference.getEntry(i)
2937	1457	24	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= lowerDifference.getEntry(i)
2937	1457	24	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= lowerDifference.getEntry($)
2938	1462	31	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 >= $.upperDifference.getEntry(i)
2938	1462	31	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= upperDifference.getEntry(i)
2938	1462	31	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= upperDifference.getEntry($)
16465	1480	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16465	1480	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2939	1482	16	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
2939	1482	16	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
2939	1482	16	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
2940	1487	23	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
2940	1487	23	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2941	1489	23	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
16466	1503	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
16466	1503	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
16467	1505	16	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
16467	1505	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
2942	1510	12	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
2943	1513	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
2943	1513	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
2943	1513	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
2943	1513	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
16468	1516	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16468	1516	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2944	1534	12	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
16469	1535	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16469	1535	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2945	1545	8	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
2945	1545	8	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
16470	1546	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16470	1546	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
16471	1592	8	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
16471	1592	8	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
16472	1594	12	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
16472	1594	12	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
16473	1597	12	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
16473	1597	12	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
16474	1601	8	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
16474	1601	8	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
16475	1604	8	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
16475	1604	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
16476	1606	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
16476	1606	12	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
16477	1618	8	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
16477	1618	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
2946	1625	12	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= 2 * n
2946	1625	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= 2 * $
2947	1626	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ >= 1
2947	1626	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= n
2947	1626	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= $
2948	1629	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfmm) == ZERO
2948	1629	20	BOBYQAOptimizer.java	prelim	nfmm	int	0	DEF	upperDifference.getEntry($) == ZERO
2949	1634	23	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	$ > n
2949	1634	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	nfm > $
2950	1637	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.lowerDifference.getEntry(nfxm) == ZERO
2950	1637	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	lowerDifference.getEntry($) == ZERO
2951	1641	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfxm) == ZERO
2951	1641	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	upperDifference.getEntry($) == ZERO
2952	1651	16	BOBYQAOptimizer.java	prelim	n	int	0	DEF	ipt > $
2952	1651	16	BOBYQAOptimizer.java	prelim	ipt	int	0	DEF	$ > n
16478	1666	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
16478	1666	12	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
2953	1670	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.lowerDifference.getEntry(j)
2953	1670	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == lowerDifference.getEntry($)
2953	1670	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == lowerDifference.getEntry(j)
2954	1673	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.upperDifference.getEntry(j)
2954	1673	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == upperDifference.getEntry($)
2954	1673	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == upperDifference.getEntry(j)
2955	1683	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
2956	1686	19	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex)
2956	1686	19	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
2957	1696	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= 2 * n + 1
2957	1696	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= 2 * $ + 1
2958	1697	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ >= 2
2958	1697	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= n + 1
2958	1697	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= $ + 1
2959	1700	20	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	npt < $ + n
2959	1700	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	npt < numEval + $
2959	1700	20	BOBYQAOptimizer.java	prelim	npt	int	0	DEF	$ < numEval + n
2960	1707	23	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
2960	1707	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
2961	1713	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry(nfm - n)
2961	1713	20	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fAtInterpolationPoints.getEntry($ - n)
2961	1713	20	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
2961	1713	20	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
2961	1713	20	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(nfm - n)
2961	1713	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fAtInterpolationPoints.getEntry(nfm - $)
2962	1716	24	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
2962	1716	24	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
16479	1842	8	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16479	1842	8	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2963	1844	12	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) <= $.lowerDifference.getEntry(i)
2963	1844	12	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	trustRegionCenterOffset.getEntry($) <= lowerDifference.getEntry($)
2964	1845	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) >= ZERO
2964	1845	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) >= ZERO
2965	1848	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) >= $.upperDifference.getEntry(i)
2965	1848	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) <= ZERO
2965	1848	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	trustRegionCenterOffset.getEntry($) >= upperDifference.getEntry($)
2965	1848	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) <= ZERO
2966	1852	12	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
2966	1852	12	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
16480	1878	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16480	1878	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2967	1879	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
2967	1879	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
2968	1881	23	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
2969	1890	12	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
2970	1893	12	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
2971	1897	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
2971	1897	12	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
2971	1897	12	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
16481	1913	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16481	1913	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2972	1914	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2972	1914	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2973	1922	12	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
2974	1926	12	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
2975	1932	12	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
16482	1941	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16482	1941	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2976	1942	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
2976	1942	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
2977	1944	20	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
2977	1944	20	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
2978	1949	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
2978	1949	20	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
2979	1959	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
2980	1962	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
2980	1962	16	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2981	1964	20	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
16483	1970	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16483	1970	16	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2982	1972	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2982	1972	20	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2983	1987	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
2984	1990	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
2984	1990	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
2985	1996	16	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
2986	2005	12	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
2986	2005	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
2987	2006	16	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
2987	2006	16	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
2988	2009	16	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
2988	2009	16	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
2989	2027	12	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
2989	2027	12	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
16484	2033	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16484	2033	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2990	2034	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2990	2034	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2991	2056	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
2991	2056	12	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
16485	2060	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16485	2060	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2992	2061	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2992	2061	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
16486	2076	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16486	2076	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2993	2077	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2993	2077	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2994	2080	20	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
2995	2084	27	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
2996	2097	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2997	2099	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
2997	2099	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
2997	2099	24	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
2998	2108	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2999	2110	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
2999	2110	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
2999	2110	24	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
16487	2128	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16487	2128	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3000	2129	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3000	2129	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
16488	2144	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
16488	2144	12	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
3001	2149	16	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
3001	2149	16	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
3002	2153	23	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
3002	2153	23	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
3003	2162	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
3004	2165	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
3004	2165	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
3005	2173	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
16489	2183	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16489	2183	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3006	2185	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3006	2185	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
3007	2195	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
3007	2195	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
3007	2195	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
3008	2204	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
3008	2204	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
16490	2211	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16490	2211	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3009	2217	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
3009	2217	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
3010	2220	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
3010	2220	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
16491	2237	12	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
16491	2237	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
16492	2239	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
16492	2239	16	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
3011	2240	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
3011	2240	20	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
16493	2248	12	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
16493	2248	12	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
3012	2249	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.modelSecondDerivativesParameters.getEntry(k) != ZERO
3012	2249	16	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	modelSecondDerivativesParameters.getEntry($) != ZERO
16494	2250	20	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16494	2250	20	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3013	2255	12	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
3014	2258	12	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
3014	2258	12	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
16495	2261	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16495	2261	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
16496	2302	8	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
16496	2302	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
16497	2303	12	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
16497	2303	12	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
16498	2312	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
16498	2312	8	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
3015	2314	12	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
3015	2314	12	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
16499	2322	16	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
16499	2322	16	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
16500	2334	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
16500	2334	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
16501	2346	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
16501	2346	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
16502	2353	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
16502	2353	8	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
16503	2358	12	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
16503	2358	12	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
3016	2361	16	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
3016	2361	16	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
3017	2382	8	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
3018	2387	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
3018	2387	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
3018	2387	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
3018	2387	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
16504	2400	8	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
16504	2400	8	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
3019	2404	8	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
3019	2404	8	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
15951	300	8	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
15951	300	8	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
2029	304	12	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= -$.initialTrustRegionRadius
2029	304	12	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= -initialTrustRegionRadius
2030	305	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= ZERO
2030	305	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= ZERO
2031	316	19	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(j) <= $.initialTrustRegionRadius
2031	316	19	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	upperDifference.getEntry($) <= initialTrustRegionRadius
2032	317	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.upperDifference.getEntry(j) <= ZERO
2032	317	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	upperDifference.getEntry($) <= ZERO
15952	411	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
15952	411	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2033	448	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex != kbase
2033	448	12	BOBYQAOptimizer.java	bobyqb	kbase	int	0	DEF	trustRegionCenterInterpolationPointIndex != $
15953	450	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
15953	450	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
15954	451	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
15954	451	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2034	452	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2034	452	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
2035	459	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() > npt
2035	459	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	getEvaluations() > $
15955	460	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
15955	460	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
15956	462	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
15956	462	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
15957	466	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
15957	466	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2036	499	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
2036	499	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
2037	504	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
2037	504	16	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
2038	518	16	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
2038	518	16	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
2038	518	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
2038	518	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
15958	523	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
15958	523	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2039	525	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.lowerDifference.getEntry(j)
2039	525	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2040	528	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.upperDifference.getEntry(j)
2040	528	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2041	531	20	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2041	531	20	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
15959	533	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
15959	533	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2042	539	24	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2042	539	24	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
2043	558	12	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
2043	558	12	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
15960	563	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
15960	563	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
15961	566	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
15961	566	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
15962	572	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
15962	572	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
15963	576	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
15963	576	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
15964	587	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
15964	587	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
15965	590	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
15965	590	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
15966	595	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
15966	595	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
15967	597	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
15967	597	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
15968	601	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
15968	601	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
15969	607	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
15969	607	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
15970	610	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
15970	610	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
15971	622	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
15971	622	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
15972	624	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
15972	624	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
15973	628	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
15973	628	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
15974	637	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
15974	637	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2044	646	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
15975	678	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
15975	678	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
15976	689	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
15976	689	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
15977	693	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
15977	693	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
15978	703	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
15978	703	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
15979	705	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
15979	705	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
15980	709	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
15980	709	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
15981	716	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
15981	716	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
15982	721	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
15982	721	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
15983	726	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
15983	726	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2045	745	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
2046	749	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
2046	749	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
2046	749	16	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
15984	750	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
15984	750	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
15985	768	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
15985	768	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2047	769	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2047	769	20	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
15986	773	20	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
15986	773	20	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
15987	782	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
15987	782	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2048	791	20	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2048	791	20	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2048	791	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
15988	812	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
15988	812	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2049	820	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.lowerDifference.getEntry(i)
2049	820	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2050	823	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.upperDifference.getEntry(i)
2050	823	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2051	830	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
2052	832	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
15989	843	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
15989	843	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
15990	845	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
15990	845	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2053	847	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
2053	847	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
15991	854	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
15991	854	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2054	864	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
2054	864	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
2055	870	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
2056	871	16	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
2057	876	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
2058	879	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
2059	886	16	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2059	886	16	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2060	892	16	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2060	892	16	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
15992	899	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
15992	899	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
15993	901	24	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
15993	901	24	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
15994	910	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
15994	910	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2061	919	24	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2061	919	24	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2061	919	24	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
2062	930	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
2062	930	20	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
15995	945	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
15995	945	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
15996	947	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
15996	947	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
15997	952	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
15997	952	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
15998	954	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
15998	954	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
15999	963	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
15999	963	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
16000	967	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16000	967	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16001	969	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
16001	969	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
16002	973	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16002	973	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
16003	977	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16003	977	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
16004	981	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16004	981	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2063	987	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2063	987	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
16005	991	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16005	991	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
16006	996	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
16006	996	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2064	997	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2064	997	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
16007	1004	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16007	1004	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16008	1006	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16008	1006	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
16009	1010	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16009	1010	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2065	1020	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
16010	1021	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16010	1021	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16011	1025	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
16011	1025	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
16012	1027	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16012	1027	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16013	1030	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16013	1030	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16014	1034	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16014	1034	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16015	1036	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16015	1036	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
16016	1044	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16016	1044	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
16017	1046	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16017	1046	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2066	1050	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2066	1050	20	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2067	1058	27	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2067	1058	27	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
2068	1079	16	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
2068	1079	16	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
2069	1082	16	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
16018	1083	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
16018	1083	20	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
2070	1084	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
2070	1084	24	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
2071	1087	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
2071	1087	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
2072	1090	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
2072	1090	24	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
2073	1102	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
2074	1105	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
2074	1105	12	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
2074	1105	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
16019	1122	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
16019	1122	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
16020	1124	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
16020	1124	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2075	1129	16	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
2075	1129	16	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
2076	1141	12	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
2077	1143	16	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2078	1146	20	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2078	1146	20	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2079	1158	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2080	1161	12	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
2081	1164	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta, dnorm) > $
2081	1164	12	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($, dnorm) > rho
2081	1164	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta, $) > rho
2082	1173	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
2082	1173	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
2083	1176	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
2084	1178	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
2085	1192	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2086	1198	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
2086	1198	12	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= $
16021	1199	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
16021	1199	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2087	1207	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2087	1207	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2088	1210	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2088	1210	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
16022	1273	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
16022	1273	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
16023	1276	8	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
16023	1276	8	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
16024	1278	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
16024	1278	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
16025	1287	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16025	1287	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
16026	1290	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
16026	1290	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
16027	1292	12	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
16027	1292	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
16028	1296	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16028	1296	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
16029	1312	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
16029	1312	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
2089	1313	12	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2089	1313	12	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
16030	1318	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16030	1318	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
16031	1331	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16031	1331	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2090	1333	16	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
2091	1334	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2091	1334	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2091	1334	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2091	1334	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2092	1338	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2092	1338	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2092	1338	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2092	1338	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2093	1344	23	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
2094	1345	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2094	1345	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2094	1345	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2094	1345	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2095	1349	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2095	1349	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2095	1349	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2095	1349	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2096	1364	12	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
2096	1364	12	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
2097	1368	16	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
2097	1368	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
2098	1376	16	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
2098	1376	16	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
2099	1378	20	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
2099	1378	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
2100	1390	16	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
2100	1390	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
2101	1395	16	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
2101	1395	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
2102	1407	12	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
2102	1407	12	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
16032	1417	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16032	1417	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2103	1422	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
2104	1425	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
16033	1440	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16033	1440	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2105	1443	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.min($.trustRegionCenterOffset.getEntry(i) - $.lowerDifference.getEntry(i), glagValue) > ZERO
2105	1443	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.max($.trustRegionCenterOffset.getEntry(i) - $.upperDifference.getEntry(i), glagValue) < ZERO
2105	1443	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
2105	1443	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
2105	1443	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
2105	1443	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
2106	1450	12	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
2107	1456	12	BOBYQAOptimizer.java	altmov	tmp1	double	0	DEF	$ > ZERO
16034	1459	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16034	1459	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2108	1460	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
2108	1460	20	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
2108	1460	20	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
2109	1462	24	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 <= $.lowerDifference.getEntry(i)
2109	1462	24	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= lowerDifference.getEntry(i)
2109	1462	24	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= lowerDifference.getEntry($)
2110	1467	31	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 >= $.upperDifference.getEntry(i)
2110	1467	31	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= upperDifference.getEntry(i)
2110	1467	31	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= upperDifference.getEntry($)
16035	1485	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16035	1485	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2111	1487	16	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
2111	1487	16	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
2111	1487	16	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
2112	1492	23	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
2112	1492	23	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2113	1494	23	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
16036	1508	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
16036	1508	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
16037	1510	16	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
16037	1510	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
2114	1515	12	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
2115	1518	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
2115	1518	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
2115	1518	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
2115	1518	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
16038	1521	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16038	1521	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2116	1539	12	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
16039	1540	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16039	1540	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2117	1550	8	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
2117	1550	8	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
16040	1551	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
16040	1551	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
16041	1597	8	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
16041	1597	8	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
16042	1599	12	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
16042	1599	12	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
16043	1602	12	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
16043	1602	12	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
16044	1606	8	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
16044	1606	8	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
16045	1609	8	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
16045	1609	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
16046	1611	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
16046	1611	12	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
16047	1623	8	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
16047	1623	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
2118	1630	12	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= 2 * n
2118	1630	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= 2 * $
2119	1631	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= n
2119	1631	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ >= 1
2119	1631	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= $
2120	1634	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfmm) == ZERO
2120	1634	20	BOBYQAOptimizer.java	prelim	nfmm	int	0	DEF	upperDifference.getEntry($) == ZERO
2121	1639	23	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	$ > n
2121	1639	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	nfm > $
2122	1642	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.lowerDifference.getEntry(nfxm) == ZERO
2122	1642	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	lowerDifference.getEntry($) == ZERO
2123	1646	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfxm) == ZERO
2123	1646	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	upperDifference.getEntry($) == ZERO
2124	1656	16	BOBYQAOptimizer.java	prelim	n	int	0	DEF	ipt > $
2124	1656	16	BOBYQAOptimizer.java	prelim	ipt	int	0	DEF	$ > n
16048	1671	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
16048	1671	12	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
2125	1675	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.lowerDifference.getEntry(j)
2125	1675	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == lowerDifference.getEntry($)
2125	1675	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == lowerDifference.getEntry(j)
2126	1678	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.upperDifference.getEntry(j)
2126	1678	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == upperDifference.getEntry($)
2126	1678	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == upperDifference.getEntry(j)
2127	1688	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
2128	1691	19	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex)
2128	1691	19	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
2129	1701	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= 2 * n + 1
2129	1701	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= 2 * $ + 1
2130	1702	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= n + 1
2130	1702	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ >= 2
2130	1702	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= $ + 1
2131	1705	20	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	npt < $ + n
2131	1705	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	npt < numEval + $
2131	1705	20	BOBYQAOptimizer.java	prelim	npt	int	0	DEF	$ < numEval + n
2132	1712	23	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
2132	1712	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
2133	1718	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry(nfm - n)
2133	1718	20	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fAtInterpolationPoints.getEntry($ - n)
2133	1718	20	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
2133	1718	20	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
2133	1718	20	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(nfm - n)
2133	1718	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fAtInterpolationPoints.getEntry(nfm - $)
2134	1721	24	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
2134	1721	24	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
16049	1847	8	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16049	1847	8	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2135	1849	12	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) <= $.lowerDifference.getEntry(i)
2135	1849	12	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	trustRegionCenterOffset.getEntry($) <= lowerDifference.getEntry($)
2136	1850	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) >= ZERO
2136	1850	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) >= ZERO
2137	1853	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) <= ZERO
2137	1853	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) >= $.upperDifference.getEntry(i)
2137	1853	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) <= ZERO
2137	1853	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	trustRegionCenterOffset.getEntry($) >= upperDifference.getEntry($)
2138	1857	12	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
2138	1857	12	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
16050	1883	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16050	1883	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2139	1884	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
2139	1884	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
2140	1886	23	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
2141	1895	12	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
2142	1898	12	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
2143	1902	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
2143	1902	12	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
2143	1902	12	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
16051	1918	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16051	1918	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2144	1919	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2144	1919	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2145	1927	12	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
2146	1931	12	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
2147	1937	12	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
16052	1946	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16052	1946	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2148	1947	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
2148	1947	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
2149	1949	20	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
2149	1949	20	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
2150	1954	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
2150	1954	20	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
2151	1964	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
2152	1967	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
2152	1967	16	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2153	1969	20	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
16053	1975	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16053	1975	16	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2154	1977	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2154	1977	20	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2155	1992	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
2156	1995	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
2156	1995	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
2157	2001	16	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
2158	2010	12	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
2158	2010	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
2159	2011	16	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
2159	2011	16	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
2160	2014	16	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
2160	2014	16	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
2161	2032	12	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
2161	2032	12	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
16054	2038	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16054	2038	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2162	2039	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2162	2039	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2163	2061	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
2163	2061	12	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
16055	2065	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16055	2065	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2164	2066	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2164	2066	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
16056	2081	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16056	2081	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2165	2082	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2165	2082	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2166	2085	20	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
2167	2089	27	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
2168	2102	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2169	2104	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
2169	2104	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
2169	2104	24	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
2170	2113	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2171	2115	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
2171	2115	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
2171	2115	24	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
16057	2133	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16057	2133	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2172	2134	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2172	2134	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
16058	2149	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
16058	2149	12	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
2173	2154	16	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
2173	2154	16	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
2174	2158	23	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
2174	2158	23	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
2175	2167	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
2176	2170	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
2176	2170	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
2177	2178	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
16059	2188	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16059	2188	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2178	2190	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2178	2190	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2179	2200	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
2179	2200	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
2179	2200	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
2180	2209	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
2180	2209	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
16060	2216	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16060	2216	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2181	2222	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
2181	2222	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
2182	2225	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
2182	2225	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
16061	2242	12	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
16061	2242	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
16062	2244	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
16062	2244	16	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
2183	2245	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
2183	2245	20	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
16063	2253	12	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
16063	2253	12	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
2184	2254	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.modelSecondDerivativesParameters.getEntry(k) != ZERO
2184	2254	16	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	modelSecondDerivativesParameters.getEntry($) != ZERO
16064	2255	20	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16064	2255	20	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2185	2260	12	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
2186	2263	12	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
2186	2263	12	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
16065	2266	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
16065	2266	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
16066	2307	8	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
16066	2307	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
16067	2308	12	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
16067	2308	12	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
16068	2317	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
16068	2317	8	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
2187	2319	12	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
2187	2319	12	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
16069	2327	16	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
16069	2327	16	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
16070	2339	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
16070	2339	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
16071	2351	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
16071	2351	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
16072	2358	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
16072	2358	8	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
16073	2363	12	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
16073	2363	12	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
2188	2366	16	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
2188	2366	16	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
2189	2387	8	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
2190	2392	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
2190	2392	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
2190	2392	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
2190	2392	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
16074	2405	8	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
16074	2405	8	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
2191	2409	8	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
2191	2409	8	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
626	150	8	BSPTree.java	insertCut	THIS	BSPTree	0	DEF	$.cut != null
627	156	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$ == null
627	156	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$.isEmpty()
628	181	8	BSPTree.java	copySelf	THIS	BSPTree	0	RET	$.cut == null
629	242	8	BSPTree.java	visit	THIS	BSPTree	1	DEF	$.cut == null
14873	293	8	BSPTree.java	fitToCell	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
14873	293	8	BSPTree.java	fitToCell	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
630	294	12	BSPTree.java	fitToCell	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
630	294	12	BSPTree.java	fitToCell	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
631	312	8	BSPTree.java	getCell	THIS	BSPTree	0	RET	$.cut == null
632	319	8	BSPTree.java	getCell	offset	double	1	RET	FastMath.abs($) < 1.0e-10
633	321	15	BSPTree.java	getCell	offset	double	1	RET	$ <= 0
634	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.cut != null
634	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.attribute == null
634	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.cut == null
634	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute == null
634	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute.equals($.minus.$.attribute)
634	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.cut == null
634	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute != null
635	385	8	BSPTree.java	merge	THIS	BSPTree	1	RET	$.cut == null
636	388	15	BSPTree.java	merge	THIS	BSPTree	1	RET	tree.$.cut == null
636	388	15	BSPTree.java	merge	tree	BSPTree<S>	1	RET	$.cut == null
637	394	12	BSPTree.java	merge	parentTree	BSPTree<S>	0	DEF	$ != null
638	396	16	BSPTree.java	merge	isPlusChild	boolean	1	DEF	$
639	407	12	BSPTree.java	merge	THIS	BSPTree	0	DEF	merged.$.cut != null
639	407	12	BSPTree.java	merge	merged	BSPTree<S>	0	DEF	$.cut != null
640	489	8	BSPTree.java	split	THIS	BSPTree	0	RET	$.cut == null
641	500	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
641	500	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
642	516	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
642	516	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
643	568	8	BSPTree.java	insertInTree	parentTree	BSPTree<S>	0	DEF	$ != null
644	569	12	BSPTree.java	insertInTree	isPlusChild	boolean	1	DEF	$
645	577	8	BSPTree.java	insertInTree	THIS	BSPTree	0	DEF	$.cut != null
14874	580	12	BSPTree.java	insertInTree	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
14874	580	12	BSPTree.java	insertInTree	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
646	587	16	BSPTree.java	insertInTree	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
646	587	16	BSPTree.java	insertInTree	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
647	614	8	BSPTree.java	chopOffMinus	THIS	BSPTree	0	DEF	$.cut != null
648	628	8	BSPTree.java	chopOffPlus	THIS	BSPTree	0	DEF	$.cut != null
2206	223	12	BaseAbstractMultivariateOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.data instanceof InitialGuess
2207	227	12	BaseAbstractMultivariateOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.data instanceof SimpleBounds
2208	276	8	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooLargeException	$.start != null
2209	278	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooSmallException	$.lowerBound != null
2210	279	16	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DimensionMismatchException	$.lowerBound.$.length != dim
2210	279	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	lowerBound.length != $
16088	282	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
16088	282	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2211	285	20	BaseAbstractMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooSmallException	$ < lo
2211	285	20	BaseAbstractMultivariateOptimizer.java	checkParameters	lo	double	0	NumberIsTooSmallException	v < $
2212	290	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooLargeException	$.upperBound != null
2213	291	16	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DimensionMismatchException	$.upperBound.$.length != dim
2213	291	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	upperBound.length != $
16089	294	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
16089	294	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2214	297	20	BaseAbstractMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooLargeException	$ > hi
2214	297	20	BaseAbstractMultivariateOptimizer.java	checkParameters	hi	double	0	NumberIsTooLargeException	v > $
2215	305	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.lowerBound == null
16090	307	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
16090	307	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2216	311	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.upperBound == null
16091	313	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
16091	313	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
1979	183	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	f	FUNC	0	NullArgumentException	$ == null
1980	186	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	t	double[]	0	NullArgumentException	$ == null
1981	189	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	w	double[]	0	NullArgumentException	$ == null
1982	192	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	startPoint	double[]	0	NullArgumentException	$ == null
1983	195	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	t.$.length != w.$.length
1983	195	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	t	double[]	0	DimensionMismatchException	$.length != w.length
1983	195	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	w	double[]	0	DimensionMismatchException	t.length != $.length
15900	323	8	BaseAbstractMultivariateVectorOptimizer.java	setUp	i	int	0	NIL-FOR	$ < dim
15900	323	8	BaseAbstractMultivariateVectorOptimizer.java	setUp	dim	int	0	NIL-FOR	i < $
1984	343	12	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof Target
1985	347	12	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof Weight
1986	351	12	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof InitialGuess
1987	365	8	BaseAbstractMultivariateVectorOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	$.target.$.length != $.weightMatrix.getColumnDimension()
4285	120	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NotStrictlyPositiveException	$ <= 0
4286	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NumberIsTooSmallException	maximalIterationCount <= $
4286	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	maximalIterationCount	int	0	NumberIsTooSmallException	$ <= minimalIterationCount
1822	119	8	BaseAbstractUnivariateOptimizer.java	optimize	f	UnivariateFunction	0	NullArgumentException	$ == null
1823	122	8	BaseAbstractUnivariateOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
2780	84	8	BaseMultiStartMultivariateOptimizer.java	BaseMultiStartMultivariateOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
16312	146	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	NIL-FOR	i < $.optimData.$.length
16312	146	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < optimData.length
2781	147	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	DEF	$.optimData[i] instanceof MaxEval
2781	147	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof MaxEval
2782	151	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	DEF	$.optimData[i] instanceof InitialGuess
2782	151	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof InitialGuess
2783	157	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	MathIllegalStateException	$.maxEvalIndex == -1
2784	160	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	MathIllegalStateException	$.initialGuessIndex == -1
16313	174	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	NIL-FOR	i < $.starts
16313	174	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < starts
2785	181	16	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	1	DEF	$ == 0
16314	185	20	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	NIL-WHILE	$ == null
2786	186	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	TooManyEvaluationsException	attempts++ >= $.getMaxEvaluations()
2786	186	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	attempts	int	0	TooManyEvaluationsException	$++ >= getMaxEvaluations()
16315	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	NIL-FOR	k < s.$.length
16315	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < s.length
16315	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	NIL-FOR	k < $.length
16315	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	NIL-FOR	$ != null
2787	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	k	int	0	DEF	s[$] > max[$]
2787	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	k	int	0	DEF	s[$] < min[$]
2787	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	DEF	$[k] > max[k]
2787	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	DEF	$[k] < min[k]
2787	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	min	double[]	0	DEF	s[k] < $[k]
2787	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	min	double[]	0	DEF	$ != null
2787	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	max	double[]	0	DEF	$ != null
2787	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	max	double[]	0	DEF	s[k] > $[k]
2788	211	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	DEF	optima.$.length == 0
2788	211	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	optima	PAIR[]	0	DEF	$.length == 0
1812	75	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	optimizer	BaseMultivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1812	75	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1813	79	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1814	115	8	BaseMultivariateMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
15786	148	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
15786	148	8	BaseMultivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1815	164	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
2789	87	12	BaseMultivariateOptimizer.java	parseOptimizationData	THIS	BaseMultivariateOptimizer	0	DEF	$.data instanceof InitialGuess
2790	91	12	BaseMultivariateOptimizer.java	parseOptimizationData	THIS	BaseMultivariateOptimizer	0	DEF	$.data instanceof SimpleBounds
2791	128	8	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	NumberIsTooLargeException	$.start != null
2792	130	12	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	NumberIsTooSmallException	$.lowerBound != null
2793	131	16	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	DimensionMismatchException	$.lowerBound.$.length != dim
2793	131	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	lowerBound.length != $
16316	134	16	BaseMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
16316	134	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2794	137	20	BaseMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooSmallException	$ < lo
2794	137	20	BaseMultivariateOptimizer.java	checkParameters	lo	double	0	NumberIsTooSmallException	v < $
2795	142	12	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	NumberIsTooLargeException	$.upperBound != null
2796	143	16	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	DimensionMismatchException	$.upperBound.$.length != dim
2796	143	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	upperBound.length != $
16317	146	16	BaseMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
16317	146	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2797	149	20	BaseMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooLargeException	$ > hi
2797	149	20	BaseMultivariateOptimizer.java	checkParameters	hi	double	0	NumberIsTooLargeException	v > $
1818	75	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	optimizer	BaseMultivariateVectorOptimizer<FUNC>	0	NullArgumentException	$ == null
1818	75	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1819	79	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1820	116	8	BaseMultivariateVectorMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateVectorMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
15787	149	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	NIL-FOR	i < $.starts
15787	149	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1821	168	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	DEF	$.optima[0] == null
2676	191	12	BaseOptimizer.java	parseOptimizationData	THIS	BaseOptimizer	0	DEF	$.data instanceof MaxEval
2677	195	12	BaseOptimizer.java	parseOptimizationData	THIS	BaseOptimizer	0	DEF	$.data instanceof MaxIter
4274	58	8	BaseRuleFactory.java	getRule	numberOfPoints	int	0	NotStrictlyPositiveException	$ <= 0
4275	66	8	BaseRuleFactory.java	getRule	cached	Pair<double[],double[]>	0	DEF	$ == null
4276	96	8	BaseRuleFactory.java	getRuleInternal	rule	Pair<T[],T[]>	0	RET	$ == null
4277	112	8	BaseRuleFactory.java	addRule	THIS	BaseRuleFactory	0	DimensionMismatchException	rule.getFirst().length != rule.getSecond().length
4277	112	8	BaseRuleFactory.java	addRule	rule	Pair<T[],T[]>	0	DimensionMismatchException	$.getFirst().length != $.getSecond().length
17211	147	8	BaseRuleFactory.java	convertToDouble	i	int	0	NIL-FOR	$ < len
17211	147	8	BaseRuleFactory.java	convertToDouble	len	int	0	NIL-FOR	i < $
4041	146	8	BaseSecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
4042	149	8	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
4043	174	12	BaseSecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
4044	179	12	BaseSecantSolver.java	doSolve	fx	double	1	DEF	f1 * $ < 0
4044	179	12	BaseSecantSolver.java	doSolve	f1	double	1	DEF	$ * fx < 0
4045	196	20	BaseSecantSolver.java	doSolve	x	double	0	ConvergenceException	$ == x1
4045	196	20	BaseSecantSolver.java	doSolve	x1	double	0	ConvergenceException	x == $
4046	212	12	BaseSecantSolver.java	doSolve	f1	double	0	MathInternalError:RET	FastMath.abs($) <= ftol
4046	212	12	BaseSecantSolver.java	doSolve	ftol	double	0	MathInternalError:RET	FastMath.abs(f1) <= $
4047	217	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
4048	222	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
4049	227	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ <= 0
4050	232	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ >= 0
4051	243	12	BaseSecantSolver.java	doSolve	x0	double	0	MathInternalError:RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
4051	243	12	BaseSecantSolver.java	doSolve	x1	double	0	MathInternalError:RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
4051	243	12	BaseSecantSolver.java	doSolve	atol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
4051	243	12	BaseSecantSolver.java	doSolve	rtol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
3305	187	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
3305	187	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
3305	187	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
3305	187	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
3305	187	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
3305	187	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
3305	187	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
3306	195	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
3306	195	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
3306	195	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
3307	272	8	Beta.java	logGammaSum	a	double	0	OutOfRangeException	$ < 1.0
3307	272	8	Beta.java	logGammaSum	a	double	0	OutOfRangeException	$ > 2.0
3308	275	8	Beta.java	logGammaSum	b	double	0	OutOfRangeException	$ < 1.0
3308	275	8	Beta.java	logGammaSum	b	double	0	OutOfRangeException	$ > 2.0
3309	280	8	Beta.java	logGammaSum	x	double	1	RET	$ <= 0.5
3310	282	15	Beta.java	logGammaSum	x	double	1	RET	$ <= 1.5
3311	305	8	Beta.java	logGammaMinusLogGammaSum	a	double	0	NumberIsTooSmallException	$ < 0.0
3312	308	8	Beta.java	logGammaMinusLogGammaSum	b	double	0	NumberIsTooSmallException	$ < 10.0
3313	317	8	Beta.java	logGammaMinusLogGammaSum	a	double	1	DEF	$ <= b
3313	317	8	Beta.java	logGammaMinusLogGammaSum	b	double	1	DEF	a <= $
3314	345	8	Beta.java	deltaMinusDeltaSum	a	double	0	OutOfRangeException	$ > b
3314	345	8	Beta.java	deltaMinusDeltaSum	a	double	0	OutOfRangeException	$ < 0
3314	345	8	Beta.java	deltaMinusDeltaSum	b	double	0	OutOfRangeException	a > $
3315	348	8	Beta.java	deltaMinusDeltaSum	b	double	0	NumberIsTooSmallException	$ < 10
16699	361	8	Beta.java	deltaMinusDeltaSum	THIS	Beta	0	NIL-FOR	i < s.$.length
16699	361	8	Beta.java	deltaMinusDeltaSum	i	int	0	NIL-FOR	$ < s.length
16699	361	8	Beta.java	deltaMinusDeltaSum	s	double[]	0	NIL-FOR	i < $.length
16700	370	8	Beta.java	deltaMinusDeltaSum	i	int	0	NIL-FOR	$ >= 0
3316	391	8	Beta.java	sumDeltaMinusDeltaSum	p	double	0	NumberIsTooSmallException	$ < 10.0
3317	394	8	Beta.java	sumDeltaMinusDeltaSum	q	double	0	NumberIsTooSmallException	$ < 10.0
16701	403	8	Beta.java	sumDeltaMinusDeltaSum	i	int	0	NIL-FOR	$ >= 0
3318	420	8	Beta.java	logBeta	p	double	0	RET	$ <= 0.0
3318	420	8	Beta.java	logBeta	p	double	0	RET	Double.isNaN($)
3318	420	8	Beta.java	logBeta	q	double	0	RET	$ <= 0.0
3318	420	8	Beta.java	logBeta	q	double	0	RET	Double.isNaN($)
3319	426	8	Beta.java	logBeta	a	double	1	RET	$ >= 10.0
3320	432	12	Beta.java	logBeta	u	double	1	RET	$ <= v
3320	432	12	Beta.java	logBeta	v	double	1	RET	u <= $
3321	437	15	Beta.java	logBeta	a	double	1	RET	$ > 2.0
3322	438	12	Beta.java	logBeta	b	double	1	RET	$ > 1000.0
16702	442	16	Beta.java	logBeta	i	int	0	NIL-FOR	$ < n
16702	442	16	Beta.java	logBeta	n	int	0	NIL-FOR	i < $
16703	452	16	Beta.java	logBeta	ared	double	0	NIL-WHILE	$ > 2.0
3323	457	16	Beta.java	logBeta	b	double	1	RET	$ < 10.0
16704	460	20	Beta.java	logBeta	bred	double	0	NIL-WHILE	$ > 2.0
3324	475	15	Beta.java	logBeta	a	double	1	RET	$ >= 1.0
3325	476	12	Beta.java	logBeta	b	double	1	RET	$ > 2.0
3326	477	16	Beta.java	logBeta	b	double	1	RET	$ < 10.0
16705	480	20	Beta.java	logBeta	bred	double	0	NIL-WHILE	$ > 2.0
3327	498	12	Beta.java	logBeta	b	double	1	RET	$ >= 10.0
1139	120	8	BetaDistribution.java	recomputeZ	THIS	BetaDistribution	0	DEF	Double.isNaN($.z)
1140	128	8	BetaDistribution.java	density	x	double	1	RET	$ < 0
1140	128	8	BetaDistribution.java	density	x	double	1	RET	$ > 1
1141	130	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 0
1142	131	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.alpha < 1
1143	135	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 1
1144	136	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.beta < 1
1145	149	8	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ <= 0
1146	151	15	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ >= 1
1569	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
1569	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
1570	90	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
15425	100	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
15425	100	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
15426	105	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
15426	105	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
1571	108	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
1571	108	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
1571	108	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
15427	109	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
15427	109	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
15428	111	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
15428	111	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
15429	116	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
15429	116	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
1572	122	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
1573	139	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
15430	144	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
15430	144	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
1574	146	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
1574	146	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
1575	147	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
1576	151	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1576	151	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
1577	171	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
15431	181	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
15431	181	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
15432	186	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
15432	186	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
1578	189	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
1578	189	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
15433	190	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
15433	190	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
15434	192	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
15434	192	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
15435	197	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
15435	197	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
1579	203	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
15436	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
15436	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
15437	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
15437	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1580	272	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
15438	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
15438	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
15439	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
15439	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
15440	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
15440	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1581	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
1581	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
15441	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
15441	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
1582	297	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
15442	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
15442	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
15443	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
15443	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
15444	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
15444	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
15445	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
15445	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
15446	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
15446	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1583	336	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
15447	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
15447	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
15448	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
15448	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
15449	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
15449	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1584	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
1584	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
15450	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
15450	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
1585	361	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
15451	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
15451	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
15452	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
15452	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
15453	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
15453	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
3965	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3965	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3965	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3965	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3965	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$.length == 0
3965	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$[0].length == 0
3966	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3966	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3966	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	xLen != $.length
3967	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3967	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3967	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	xLen != $.length
3968	116	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3968	116	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3968	116	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	xLen != $.length
3969	119	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3969	119	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3969	119	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	xLen != $.length
17006	133	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
17006	133	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3970	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3970	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3970	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3970	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	$[i].length != yLen
3971	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3971	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3971	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3971	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	$[i].length != yLen
3972	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3972	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3972	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3972	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
3973	143	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3973	143	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3973	143	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3973	143	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
17007	147	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
17007	147	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3974	251	8	BicubicSplineInterpolatingFunction.java	partialDerivative	THIS	BicubicSplineInterpolatingFunction	0	DEF	$.partialDerivatives == null
17008	272	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < lastI
17008	272	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastI	int	0	NIL-FOR	i < $
17009	273	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < lastJ
17009	273	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastJ	int	0	NIL-FOR	j < $
3975	295	8	BicubicSplineInterpolatingFunction.java	searchIndex	THIS	BicubicSplineInterpolatingFunction	0	OutOfRangeException	r == -val.$.length - 1
3975	295	8	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	OutOfRangeException	$ == -1
3975	295	8	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	OutOfRangeException	$ == -val.length - 1
3975	295	8	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	OutOfRangeException	r == -$.length - 1
3976	300	8	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	RET	$ < 0
3977	306	8	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	RET	$ == last
3977	306	8	BicubicSplineInterpolatingFunction.java	searchIndex	last	int	0	RET	r == $
17010	348	8	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < NUM_COEFF
17011	351	12	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < NUM_COEFF
17012	396	8	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	i	int	0	NIL-FOR	$ < N
17013	397	12	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	j	int	0	NIL-FOR	$ < N
3978	407	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3978	407	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3979	410	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
3979	410	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
17014	435	8	BicubicSplineInterpolatingFunction.java	apply	i	int	0	NIL-FOR	$ < N
17015	436	12	BicubicSplineInterpolatingFunction.java	apply	j	int	0	NIL-FOR	$ < N
3980	448	8	BicubicSplineInterpolatingFunction.java	partialDerivativeX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeX == null
3981	458	8	BicubicSplineInterpolatingFunction.java	partialDerivativeY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeY == null
3982	468	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXX == null
3983	478	8	BicubicSplineInterpolatingFunction.java	partialDerivativeYY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeYY == null
3984	488	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXY == null
17016	505	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < N
17017	506	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < N
3962	43	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3962	43	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3962	43	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3962	43	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3962	43	8	BicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3962	43	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3963	46	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3963	46	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3963	46	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
16994	61	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
16994	61	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3964	62	12	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3964	62	12	BicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3964	62	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3964	62	12	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
16995	66	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
16995	66	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
16996	76	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
16996	76	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
16997	83	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
16997	83	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
16998	89	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
16998	89	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
16999	91	12	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
16999	91	12	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
17000	98	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
17000	98	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
17001	100	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
17001	100	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
17002	107	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
17002	107	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
17003	110	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
17003	110	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
953	123	8	BigFraction.java	BigFraction	den	BigInteger	0	ZeroException	BigInteger.ZERO.equals($)
954	126	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
955	133	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
956	139	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
957	173	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isNaN($)
958	176	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isInfinite($)
959	185	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
960	189	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
14896	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
14896	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
961	198	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
962	275	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
962	275	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
963	281	8	BigFraction.java	BigFraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
963	281	8	BigFraction.java	BigFraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
963	281	8	BigFraction.java	BigFraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
14897	297	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
964	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
964	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
964	303	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
964	303	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
965	308	12	BigFraction.java	BigFraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
965	308	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
965	308	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
965	308	12	BigFraction.java	BigFraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
965	308	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
965	308	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
965	308	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
966	322	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
966	322	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
967	326	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
967	326	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
968	433	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
969	508	8	BigFraction.java	add	fraction	BigFraction	0	NullArgumentException	$ == null
970	511	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
971	518	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
971	518	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
972	612	8	BigFraction.java	divide	bg	BigInteger	0	NullArgumentException	$ == null
973	615	8	BigFraction.java	divide	bg	BigInteger	0	MathArithmeticException	BigInteger.ZERO.equals($)
974	661	8	BigFraction.java	divide	fraction	BigFraction	0	NullArgumentException	$ == null
975	664	8	BigFraction.java	divide	THIS	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals(fraction.$.numerator)
975	664	8	BigFraction.java	divide	fraction	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals($.numerator)
976	683	8	BigFraction.java	doubleValue	result	double	0	DEF	Double.isNaN($)
977	713	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
977	713	8	BigFraction.java	equals	other	Object	1	DEF	this == $
978	715	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
979	736	8	BigFraction.java	floatValue	result	float	0	DEF	Double.isNaN($)
980	865	8	BigFraction.java	multiply	bg	BigInteger	0	NullArgumentException	$ == null
981	910	8	BigFraction.java	multiply	fraction	BigFraction	0	NullArgumentException	$ == null
982	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	fraction.$.numerator.equals(BigInteger.ZERO)
982	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
982	913	8	BigFraction.java	multiply	fraction	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
983	957	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
984	974	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
985	993	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
986	1052	8	BigFraction.java	subtract	bg	BigInteger	0	NullArgumentException	$ == null
987	1095	8	BigFraction.java	subtract	fraction	BigFraction	0	NullArgumentException	$ == null
988	1098	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
989	1104	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
989	1104	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
990	1127	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
991	1129	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
992	169	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
993	171	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
994	173	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
995	194	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
996	216	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
997	249	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
14898	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
14898	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
14898	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
14898	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
220	306	8	BigReal.java	equals	THIS	BigReal	0	RET	$ == other
220	306	8	BigReal.java	equals	other	Object	0	RET	this == $
221	310	8	BigReal.java	equals	other	Object	0	RET	$ instanceof BigReal
3238	56	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
3238	56	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
16663	71	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
16663	71	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
3239	80	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
3240	85	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
3240	85	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
16664	89	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
16664	89	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
3241	90	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
3241	90	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
3241	90	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
3252	41	8	BinaryMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof BinaryChromosome
1211	70	8	BinomialDistribution.java	BinomialDistribution	trials	int	0	NotPositiveException	$ < 0
1212	74	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ > 1
1212	74	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ < 0
1213	103	8	BinomialDistribution.java	probability	THIS	BinomialDistribution	1	DEF	x > $.numberOfTrials
1213	103	8	BinomialDistribution.java	probability	x	int	1	DEF	$ < 0
1213	103	8	BinomialDistribution.java	probability	x	int	1	DEF	$ > numberOfTrials
1214	116	8	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
1215	118	15	BinomialDistribution.java	cumulativeProbability	THIS	BinomialDistribution	1	DEF	x >= $.numberOfTrials
1215	118	15	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= numberOfTrials
4116	78	12	BisectionSolver.java	doSolve	fm	double	1	DEF	$ * fmin > 0
4116	78	12	BisectionSolver.java	doSolve	fmin	double	1	DEF	fm * $ > 0
4117	86	12	BisectionSolver.java	doSolve	min	double	0	RET	FastMath.abs(max - $) <= absoluteAccuracy
4117	86	12	BisectionSolver.java	doSolve	max	double	0	RET	FastMath.abs($ - min) <= absoluteAccuracy
4117	86	12	BisectionSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(max - min) <= $
16625	73	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
16625	73	8	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
16626	82	8	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
16626	82	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
16626	82	8	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
3151	104	8	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
3152	143	8	BitsStreamGenerator.java	nextInt	n	int	0	RET	$ > 0
3153	144	12	BitsStreamGenerator.java	nextInt	n	int	0	RET	($ & -$) == $
16627	149	12	BitsStreamGenerator.java	nextInt	bits	int	0	NIL-DOWHILE	$ - val + (n - 1) < 0
16627	149	12	BitsStreamGenerator.java	nextInt	val	int	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
16627	149	12	BitsStreamGenerator.java	nextInt	n	int	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
3154	177	8	BitsStreamGenerator.java	nextLong	n	long	0	RET	$ > 0
16628	180	12	BitsStreamGenerator.java	nextLong	bits	long	0	NIL-DOWHILE	$ - val + (n - 1) < 0
16628	180	12	BitsStreamGenerator.java	nextLong	val	long	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
16628	180	12	BitsStreamGenerator.java	nextLong	n	long	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
1311	161	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
14989	170	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
14989	170	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
14990	172	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
14990	172	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1312	173	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1312	173	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1312	173	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1312	173	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1312	173	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1313	177	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
14991	217	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
14991	217	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
14991	217	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
1314	219	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1314	219	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
14992	228	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
14992	228	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
14993	232	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
14993	232	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
14994	243	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
14994	243	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
14995	277	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
14995	277	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
14996	281	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
14996	281	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
14997	310	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
14997	310	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
14998	332	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
14998	332	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
14998	332	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
14999	333	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
14999	333	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
14999	333	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
15000	343	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
15000	343	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
15001	344	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
15001	344	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
15002	377	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
15002	377	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
15002	377	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
15003	381	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
15003	381	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
15003	381	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
15004	404	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
15004	404	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
15004	404	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
15005	405	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
15005	405	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
15005	405	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
15006	415	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
15006	415	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
15007	416	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
15007	416	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
15008	447	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
15008	447	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
15008	447	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
15009	451	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
15009	451	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
15009	451	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
15010	465	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
15010	465	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
15010	465	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
15011	468	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
15011	468	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
15011	468	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
15012	483	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
15012	483	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
15012	483	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
15013	486	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
15013	486	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
15013	486	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
15014	510	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
15014	510	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
15014	510	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
15015	515	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
15015	515	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
15015	515	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
15016	524	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
15016	524	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
15017	529	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
15017	529	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
15018	532	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
15018	532	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
15019	535	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
15019	535	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
15020	573	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
15020	573	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
15020	573	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
15021	578	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
15021	578	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
15021	578	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
15022	588	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
15022	588	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
15023	593	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
15023	593	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
15024	596	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
15024	596	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
15025	600	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
15025	600	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
15026	609	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
15026	609	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
15027	634	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
15027	634	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
15028	639	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
15028	639	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
15029	643	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
15029	643	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
15030	677	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
15030	677	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
15030	677	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
15031	680	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
15031	680	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
15031	680	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
1315	691	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1316	693	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1317	725	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
15032	775	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
15032	775	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1318	791	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1319	798	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1319	798	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
15033	810	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
15033	810	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
15034	816	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
15034	816	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
15035	825	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
15035	825	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
15036	848	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
15036	848	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1320	852	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1320	852	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1321	892	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1321	892	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1321	892	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
15037	905	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
15037	905	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1322	909	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1322	909	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
15038	935	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
15038	935	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
15039	938	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
15039	938	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1323	939	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
1323	939	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1323	939	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
1324	976	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1324	976	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1324	976	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
15040	990	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
15040	990	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
15041	993	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
15041	993	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1325	994	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
1325	994	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1325	994	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
15042	1014	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
15042	1014	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
15043	1047	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
15043	1047	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
15044	1050	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
15044	1050	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
15045	1079	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
15045	1079	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1326	1095	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1326	1095	8	BlockFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1326	1095	8	BlockFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
15046	1103	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
15046	1103	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
15047	1122	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
15047	1122	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
15048	1125	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
15048	1125	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1327	1139	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1327	1139	8	BlockFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1327	1139	8	BlockFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
15049	1148	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
15049	1148	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
15050	1151	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
15050	1151	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
15051	1228	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
15051	1228	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
15052	1229	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
15052	1229	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
15053	1239	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
15053	1239	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
15054	1242	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
15054	1242	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1328	1273	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.columns
1328	1273	8	BlockFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != columns
15055	1280	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
15055	1280	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
15056	1283	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
15056	1283	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
15057	1288	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
15057	1288	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
15058	1291	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
15058	1291	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
15059	1300	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
15059	1300	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1329	1315	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.rows
1329	1315	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != rows
15060	1322	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
15060	1322	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
15061	1329	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
15061	1329	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
15062	1333	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
15062	1333	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
15063	1337	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
15063	1337	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
15064	1346	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
15064	1346	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
15065	1362	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
15065	1362	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
15066	1365	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
15066	1365	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
15067	1366	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
15067	1366	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
15068	1372	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
15068	1372	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
15069	1386	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
15069	1386	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
15070	1389	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
15070	1389	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
15071	1390	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
15071	1390	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
15072	1396	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
15072	1396	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
15073	1414	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
15073	1414	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
15074	1418	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
15074	1418	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
15075	1419	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
15075	1419	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
15076	1426	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
15076	1426	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
15077	1444	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
15077	1444	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
15078	1448	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
15078	1448	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
15079	1449	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
15079	1449	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
15080	1456	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
15080	1456	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
15081	1471	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
15081	1471	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
15082	1474	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
15082	1474	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
15083	1479	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
15083	1479	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
15084	1480	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
15084	1480	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
15085	1496	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
15085	1496	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
15086	1499	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
15086	1499	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
15087	1504	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
15087	1504	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
15088	1505	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
15088	1505	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
15089	1524	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
15089	1524	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
15090	1528	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
15090	1528	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
15091	1534	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
15091	1534	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
15092	1536	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
15092	1536	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
15093	1554	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
15093	1554	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
15094	1558	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
15094	1558	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
15095	1564	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
15095	1564	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
15096	1566	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
15096	1566	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
1668	157	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
15506	166	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15506	166	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
15507	168	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15507	168	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1669	169	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1669	169	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1669	169	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1669	169	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1669	169	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1670	173	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
15508	209	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
15508	209	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
15508	209	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
1671	211	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1671	211	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
15509	219	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
15509	219	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
15510	223	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
15510	223	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
15511	234	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
15511	234	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
15512	263	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
15512	263	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
15513	267	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
15513	267	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
15514	294	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
15514	294	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
15515	315	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
15515	315	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
15515	315	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15516	316	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
15516	316	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
15516	316	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15517	326	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
15517	326	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
15518	327	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
15518	327	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
15519	357	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
15519	357	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
15519	357	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
15520	361	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
15520	361	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
15520	361	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
15521	383	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
15521	383	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
15521	383	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15522	384	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
15522	384	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
15522	384	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15523	394	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
15523	394	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
15524	395	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
15524	395	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
15525	425	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
15525	425	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
15525	425	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
15526	429	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
15526	429	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
15526	429	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
15527	444	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
15527	444	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
15527	444	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
15528	447	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
15528	447	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
15528	447	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
15529	461	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
15529	461	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
15529	461	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
15530	464	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
15530	464	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
15530	464	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
15531	486	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
15531	486	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
15531	486	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15532	490	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
15532	490	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
15532	490	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15533	498	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
15533	498	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
15534	503	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
15534	503	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
15535	506	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
15535	506	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
15536	509	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
15536	509	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
15537	543	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
15537	543	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
15537	543	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15538	548	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
15538	548	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
15538	548	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15539	558	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
15539	558	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
15540	563	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
15540	563	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
15541	566	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
15541	566	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
15542	570	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
15542	570	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
15543	578	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
15543	578	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
15544	601	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15544	601	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
15545	606	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
15545	606	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
15546	610	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
15546	610	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
15547	628	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15547	628	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
15548	631	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15548	631	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
15549	634	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
15549	634	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
15550	636	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
15550	636	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
15551	642	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
15551	642	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
15552	653	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
15552	653	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
15553	682	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
15553	682	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
15553	682	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15554	685	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
15554	685	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
15554	685	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
1672	696	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1673	698	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1674	730	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
15555	780	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
15555	780	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1675	796	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1676	803	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1676	803	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
15556	815	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
15556	815	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
15557	821	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
15557	821	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
15558	830	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
15558	830	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
15559	853	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15559	853	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1677	857	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1677	857	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1678	897	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1678	897	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1678	897	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
15560	910	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15560	910	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1679	914	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1679	914	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
15561	940	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15561	940	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
15562	943	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
15562	943	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1680	944	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
1680	944	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1680	944	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
1681	981	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1681	981	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1681	981	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
15563	995	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15563	995	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
15564	998	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
15564	998	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1682	999	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
1682	999	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1682	999	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
15565	1019	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15565	1019	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
15566	1052	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15566	1052	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
15567	1055	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
15567	1055	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
15568	1084	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15568	1084	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1683	1100	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1683	1100	8	BlockRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1683	1100	8	BlockRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
15569	1108	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15569	1108	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
15570	1127	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15570	1127	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
15571	1130	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
15571	1130	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1684	1144	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1684	1144	8	BlockRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1684	1144	8	BlockRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
15572	1153	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15572	1153	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
15573	1156	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
15573	1156	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
15574	1221	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
15574	1221	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
15575	1222	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
15575	1222	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
15576	1231	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
15576	1231	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
15577	1234	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
15577	1234	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1685	1264	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.columns
1685	1264	8	BlockRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != columns
15578	1270	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15578	1270	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
15579	1273	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15579	1273	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
15580	1278	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
15580	1278	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
15581	1281	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
15581	1281	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
15582	1289	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
15582	1289	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1686	1304	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.rows
1686	1304	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != rows
15583	1310	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15583	1310	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
15584	1317	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15584	1317	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
15585	1321	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
15585	1321	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
15586	1325	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
15586	1325	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
15587	1333	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
15587	1333	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
15588	1349	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15588	1349	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
15589	1352	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
15589	1352	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
15590	1353	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15590	1353	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
15591	1359	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
15591	1359	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
15592	1373	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15592	1373	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
15593	1376	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
15593	1376	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
15594	1377	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15594	1377	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
15595	1383	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
15595	1383	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
15596	1401	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
15596	1401	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
15597	1405	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
15597	1405	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
15598	1406	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
15598	1406	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
15599	1413	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
15599	1413	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
15600	1431	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
15600	1431	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
15601	1435	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
15601	1435	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
15602	1436	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
15602	1436	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
15603	1443	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
15603	1443	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
15604	1458	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15604	1458	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
15605	1461	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15605	1461	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
15606	1466	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
15606	1466	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
15607	1467	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
15607	1467	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
15608	1483	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
15608	1483	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
15609	1486	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
15609	1486	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
15610	1491	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
15610	1491	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
15611	1492	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
15611	1492	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
15612	1512	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
15612	1512	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
15613	1516	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
15613	1516	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
15614	1522	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
15614	1522	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
15615	1524	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
15615	1524	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
15616	1543	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
15616	1543	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
15617	1547	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
15617	1547	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
15618	1553	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
15618	1553	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
15619	1555	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
15619	1555	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
624	47	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusOutside() != null
625	50	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusInside() != null
2683	91	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
2684	94	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
2685	118	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
2685	118	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
2685	118	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
16285	134	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
16285	134	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
16285	134	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
2686	145	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
2686	145	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
2686	145	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
2687	147	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
2687	147	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
2687	147	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
2688	155	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
2688	155	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
2688	155	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
2689	164	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
2689	164	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
2689	164	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
2690	167	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
2690	167	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
2690	167	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
2691	169	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
2691	169	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
2691	169	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
2692	199	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
1824	93	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
1825	96	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
1826	120	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
1826	120	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
1826	120	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
15788	136	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
15788	136	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
15788	136	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
1827	147	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
1827	147	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
1827	147	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
1828	149	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
1828	149	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
1828	149	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
1829	157	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
1829	157	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
1829	157	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
1830	166	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
1830	166	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
1830	166	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
1831	169	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
1831	169	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
1831	169	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
1832	171	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
1832	171	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
1832	171	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
1833	201	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
4071	85	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
4072	105	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
4073	127	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
4074	159	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[1], 0.0, 1)
4075	166	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[0], 0.0, 1)
4076	173	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[0] * $[1] < 0
4077	183	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[2], 0.0, 1)
4078	188	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[1] * $[2] < 0
4079	217	12	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	MathInternalError:RET	FastMath.max(absYA, absYB) < $.getFunctionValueAccuracy()
4079	217	12	BracketingNthOrderBrentSolver.java	doSolve	xTol	double	0	MathInternalError:RET	(xB - xA) <= $
4079	217	12	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	MathInternalError:RET	(xB - $) <= xTol
4079	217	12	BracketingNthOrderBrentSolver.java	doSolve	absYA	double	0	MathInternalError:RET	FastMath.max($, absYB) < getFunctionValueAccuracy()
4079	217	12	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	MathInternalError:RET	($ - xA) <= xTol
4079	217	12	BracketingNthOrderBrentSolver.java	doSolve	absYB	double	0	MathInternalError:RET	FastMath.max(absYA, $) < getFunctionValueAccuracy()
4080	237	12	BracketingNthOrderBrentSolver.java	doSolve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
4081	243	19	BracketingNthOrderBrentSolver.java	doSolve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
17076	258	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	NIL-DOWHILE	Double.isNaN($)
17076	258	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	0	NIL-DOWHILE	end - $ > 1
17076	258	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	0	NIL-DOWHILE	$ - start > 1
4082	264	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ > xA
4082	264	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ < xB
4082	264	16	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	DEF	nextX > $
4082	264	16	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	DEF	nextX < $
4083	270	20	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
4083	270	20	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
4083	270	20	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	1	DEF	$ - start >= end - $
4084	285	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	Double.isNaN($)
4085	294	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	0	RET	Precision.equals($, 0.0, 1)
4086	300	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	end - $ != nbPoints
4086	300	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	$ - start != nbPoints
4086	300	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	$ > 2
4086	300	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	end - start != $
4087	309	20	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	nbPoints == x.$.length
4087	309	20	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	nbPoints == $.length
4087	309	20	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	0	DEF	$ == x.length
4088	315	16	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
4088	315	16	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
4088	315	16	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
4089	333	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	1	DEF	$ * yA <= 0
4089	333	12	BracketingNthOrderBrentSolver.java	doSolve	yA	double	1	DEF	nextY * $ <= 0
17077	375	8	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	$ < end - 1
17077	375	8	BracketingNthOrderBrentSolver.java	guessX	end	int	0	NIL-FOR	i < $ - 1
17078	377	12	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ > i
17078	377	12	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	j > $
17079	384	8	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ >= start
17079	384	8	BracketingNthOrderBrentSolver.java	guessX	start	int	0	NIL-FOR	j >= $
3832	78	8	BracketingNthOrderBrentSolverDFP.java	BracketingNthOrderBrentSolverDFP	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3833	202	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[1].isZero()
3834	210	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[0].isZero()
3835	217	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[0].multiply($[1]).negativeOrNull()
3836	228	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[2].isZero()
3837	233	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[1].multiply($[2]).negativeOrNull()
3838	266	12	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	MathInternalError:RET	maxY.lessThan($.functionValueAccuracy)
3838	266	12	BracketingNthOrderBrentSolverDFP.java	solve	maxY	Dfp	0	MathInternalError:RET	$.lessThan(functionValueAccuracy)
3838	266	12	BracketingNthOrderBrentSolverDFP.java	solve	xTol	Dfp	0	MathInternalError:RET	xB.subtract(xA).subtract($).negativeOrNull()
3838	266	12	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	MathInternalError:RET	xB.subtract($).subtract(xTol).negativeOrNull()
3838	266	12	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	MathInternalError:RET	$.subtract(xA).subtract(xTol).negativeOrNull()
3839	287	12	BracketingNthOrderBrentSolverDFP.java	solve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
3840	290	19	BracketingNthOrderBrentSolverDFP.java	solve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
16947	302	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	NIL-DOWHILE	$.isNaN()
16947	302	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	0	NIL-DOWHILE	end - $ > 1
16947	302	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	0	NIL-DOWHILE	$ - start > 1
3841	308	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.greaterThan(xA)
3841	308	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.lessThan(xB)
3841	308	16	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	DEF	nextX.greaterThan($)
3841	308	16	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	DEF	nextX.lessThan($)
3842	314	20	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
3842	314	20	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
3842	314	20	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	1	DEF	$ - start >= end - $
3843	329	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.isNaN()
3844	339	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	0	RET	$.isZero()
3845	345	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	end - $ != nbPoints
3845	345	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	$ - start != nbPoints
3845	345	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	end - start != $
3845	345	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	$ > 2
3846	354	20	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	nbPoints == x.$.length
3846	354	20	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	nbPoints == $.length
3846	354	20	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	0	DEF	$ == x.length
3847	360	16	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
3847	360	16	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
3847	360	16	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
3848	378	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	1	DEF	$.multiply(yA).negativeOrNull()
3848	378	12	BracketingNthOrderBrentSolverDFP.java	solve	yA	Dfp	1	DEF	nextY.multiply($).negativeOrNull()
16948	420	8	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	$ < end - 1
16948	420	8	BracketingNthOrderBrentSolverDFP.java	guessX	end	int	0	NIL-FOR	i < $ - 1
16949	422	12	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ > i
16949	422	12	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	j > $
16950	429	8	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ >= start
16950	429	8	BracketingNthOrderBrentSolverDFP.java	guessX	start	int	0	NIL-FOR	j >= $
2697	83	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
2698	86	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
2699	127	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
2699	127	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
2700	141	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
2701	161	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
2702	167	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
2702	167	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
2703	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
2704	182	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
2704	182	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
2704	182	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
2704	182	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
2704	182	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
2704	182	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
2704	182	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
2704	182	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
2704	182	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
2704	182	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
2704	182	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
2705	190	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
2705	190	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
2705	190	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
2705	190	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
2705	190	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
2705	190	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
2706	191	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
2706	191	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
2707	199	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
2707	199	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
2708	208	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
2708	208	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
2709	217	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
2709	217	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
2710	218	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
2711	228	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
2712	241	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$.converged(iter, previous, current)
2712	241	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$ != null
2712	241	16	BrentOptimizer.java	doOptimize	previous	UnivariatePointValuePair	0	RET	checker.converged(iter, $, current)
2712	241	16	BrentOptimizer.java	doOptimize	current	UnivariatePointValuePair	0	RET	checker.converged(iter, previous, $)
2712	241	16	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
2713	246	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
2713	246	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
2714	247	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
2714	247	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
2715	259	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
2715	259	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
2716	264	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
2716	264	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	Precision.equals(w, $)
2716	264	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	Precision.equals($, x)
2716	264	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
2717	270	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
2717	270	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	Precision.equals(v, $)
2717	270	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, w)
2717	270	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, x)
2717	270	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	Precision.equals(v, $)
2717	270	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
2718	302	8	BrentOptimizer.java	best	a	UnivariatePointValuePair	0	RET	$ == null
2719	305	8	BrentOptimizer.java	best	b	UnivariatePointValuePair	0	RET	$ == null
2720	309	8	BrentOptimizer.java	best	isMinim	boolean	1	RET	$
1836	85	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1837	88	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
1838	129	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
1838	129	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
1839	143	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1840	163	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
1841	169	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
1841	169	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
1842	175	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
1843	184	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
1843	184	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
1843	184	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
1843	184	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
1843	184	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
1843	184	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
1843	184	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
1843	184	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
1843	184	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
1843	184	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
1843	184	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
1844	192	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
1844	192	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
1844	192	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
1844	192	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
1844	192	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
1844	192	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
1845	193	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
1845	193	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
1846	201	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1846	201	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1847	210	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1847	210	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1848	219	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
1848	219	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
1849	220	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
1850	230	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1851	243	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$ != null
1851	243	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$.converged(iter, previous, current)
1851	243	16	BrentOptimizer.java	doOptimize	previous	UnivariatePointValuePair	0	RET	checker.converged(iter, $, current)
1851	243	16	BrentOptimizer.java	doOptimize	current	UnivariatePointValuePair	0	RET	checker.converged(iter, previous, $)
1851	243	16	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1852	248	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
1852	248	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
1853	249	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1853	249	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1854	261	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1854	261	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1855	266	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
1855	266	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	Precision.equals(w, $)
1855	266	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	Precision.equals($, x)
1855	266	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
1856	272	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
1856	272	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	Precision.equals(v, $)
1856	272	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, x)
1856	272	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, w)
1856	272	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	Precision.equals(v, $)
1856	272	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
1857	304	8	BrentOptimizer.java	best	a	UnivariatePointValuePair	0	RET	$ == null
1858	307	8	BrentOptimizer.java	best	b	UnivariatePointValuePair	0	RET	$ == null
1859	311	8	BrentOptimizer.java	best	isMinim	boolean	1	RET	$
4125	97	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
4125	97	8	BrentSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4126	103	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
4126	103	8	BrentSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4127	108	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
4127	108	8	BrentSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
4128	114	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
4128	114	8	BrentSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4129	119	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
4129	119	8	BrentSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
4130	157	12	BrentSolver.java	brent	fb	double	0	DEF	FastMath.abs(fc) < FastMath.abs($)
4130	157	12	BrentSolver.java	brent	fc	double	0	DEF	FastMath.abs($) < FastMath.abs(fb)
4131	169	12	BrentSolver.java	brent	tol	double	0	RET	FastMath.abs(m) <= $
4131	169	12	BrentSolver.java	brent	m	double	0	RET	FastMath.abs($) <= tol
4131	169	12	BrentSolver.java	brent	fb	double	0	RET	Precision.equals($, 0)
4132	173	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(e) < $
4132	173	12	BrentSolver.java	brent	fa	double	1	DEF	FastMath.abs($) <= FastMath.abs(fb)
4132	173	12	BrentSolver.java	brent	fb	double	1	DEF	FastMath.abs(fa) <= FastMath.abs($)
4132	173	12	BrentSolver.java	brent	e	double	1	DEF	FastMath.abs($) < tol
4133	185	16	BrentSolver.java	brent	a	double	1	DEF	$ == c
4133	185	16	BrentSolver.java	brent	c	double	1	DEF	a == $
4134	196	16	BrentSolver.java	brent	p	double	1	DEF	$ > 0
4135	203	16	BrentSolver.java	brent	s	double	1	DEF	p >= FastMath.abs(0.5 * $ * q)
4135	203	16	BrentSolver.java	brent	p	double	1	DEF	$ >= FastMath.abs(0.5 * s * q)
4135	203	16	BrentSolver.java	brent	p	double	1	DEF	$ >= 1.5 * m * q - FastMath.abs(tol * q)
4135	203	16	BrentSolver.java	brent	q	double	1	DEF	p >= FastMath.abs(0.5 * s * $)
4135	203	16	BrentSolver.java	brent	q	double	1	DEF	p >= 1.5 * m * $ - FastMath.abs(tol * $)
4135	203	16	BrentSolver.java	brent	tol	double	1	DEF	p >= 1.5 * m * q - FastMath.abs($ * q)
4135	203	16	BrentSolver.java	brent	m	double	1	DEF	p >= 1.5 * $ * q - FastMath.abs(tol * q)
4136	217	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(d) > $
4136	217	12	BrentSolver.java	brent	d	double	1	DEF	FastMath.abs($) > tol
4137	219	19	BrentSolver.java	brent	m	double	1	DEF	$ > 0
4138	225	12	BrentSolver.java	brent	fb	double	0	DEF	$ > 0
4138	225	12	BrentSolver.java	brent	fb	double	0	DEF	$ <= 0
4138	225	12	BrentSolver.java	brent	fc	double	0	DEF	$ <= 0
4138	225	12	BrentSolver.java	brent	fc	double	0	DEF	$ > 0
16333	387	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
16334	395	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
16334	395	12	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
16335	397	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount + 1
16335	397	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount + 1
2819	398	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
2820	405	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
2820	405	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
2820	405	20	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
2820	405	20	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
2821	428	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
2822	437	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
2822	437	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
2823	442	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, optimum, lastResult)
2823	442	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
2823	442	16	CMAESOptimizer.java	doOptimize	optimum	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
2823	442	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, optimum, $)
2823	442	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
2824	449	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopFitness : -$.stopFitness)
2824	449	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopFitness != 0
2824	449	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopFitness : -stopFitness)
16336	454	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
16336	454	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
2825	455	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > $.stopTolX
2825	455	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * Math.max(Math.abs(pcCol[$]), sqrtDiagC[$]) > stopTolX
2825	455	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * Math.max(Math.abs(pcCol[i]), $[i]) > stopTolX
2825	455	16	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma * Math.max(Math.abs($[i]), sqrtDiagC[i]) > stopTolX
2826	458	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension - 1
2826	458	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension - 1
16337	462	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
16337	462	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
2827	463	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * sqrtDiagC[i] > $.stopTolUpX
2827	463	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * sqrtDiagC[$] > stopTolUpX
2827	463	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * $[i] > stopTolUpX
2828	469	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2828	469	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < $.stopTolFun
2828	469	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
2828	469	12	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
2828	469	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
2828	469	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
2829	474	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
2829	474	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst - historyBest < $.stopTolHistFun
2829	474	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst - $ < stopTolHistFun
2829	474	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$ - historyBest < stopTolHistFun
2830	479	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) / $.min($.diagD) > 1e7
2831	483	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
2832	487	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, current, lastResult)
2832	487	16	CMAESOptimizer.java	doOptimize	current	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
2832	487	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
2832	487	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, current, $)
2833	494	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1+$.lambda/4.)]]
2833	494	12	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1+lambda/4.)]]
2833	494	12	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1+lambda/4.)]]
2833	494	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1+lambda/4.)]]
2834	497	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2834	497	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
2834	497	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
2834	497	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
2835	504	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
2836	532	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof Sigma
2837	536	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof PopulationSize
2838	553	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
2839	554	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	DimensionMismatchException	$.inputSigma.$.length != init.$.length
2839	554	12	CMAESOptimizer.java	checkParameters	init	double[]	0	DimensionMismatchException	inputSigma.length != $.length
16338	557	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
16338	557	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
16338	557	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
2840	558	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > uB[i] - lB[i]
2840	558	16	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > uB[$] - lB[$]
2840	558	16	CMAESOptimizer.java	checkParameters	lB	double[]	0	OutOfRangeException	inputSigma[i] > uB[i] - $[i]
2840	558	16	CMAESOptimizer.java	checkParameters	uB	double[]	0	OutOfRangeException	inputSigma[i] > $[i] - lB[i]
2841	571	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NotStrictlyPositiveException	$.lambda <= 0
16339	576	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
16339	576	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
16339	576	8	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
16340	594	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
16340	594	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
16341	631	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
16341	631	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
2842	653	8	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
2843	676	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
2843	676	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
2844	701	8	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
2845	709	12	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
2846	732	16	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
2846	732	16	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
2847	764	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1
2847	764	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
2847	764	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
2847	764	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
2848	773	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
16342	774	16	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
16342	774	16	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
2849	775	20	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i, 0) < 0
2849	775	20	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($, 0) < 0
2850	783	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
16343	801	8	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
16344	815	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
16344	815	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
16344	815	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
16345	820	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
16345	820	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
16345	820	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
16346	980	8	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
16346	980	8	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
16347	981	12	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
16347	981	12	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
16348	994	8	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
16348	994	8	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
16349	995	12	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
16349	995	12	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
16350	1008	8	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
16350	1008	8	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
16351	1009	12	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
16351	1009	12	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
16352	1024	8	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
16352	1024	8	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
16353	1025	12	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
16353	1025	12	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
16354	1039	8	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
16354	1039	8	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
16355	1040	12	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
16355	1040	12	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
16356	1054	8	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
16356	1054	8	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
16357	1055	12	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
16357	1055	12	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
16357	1055	12	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
16358	1069	8	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
16358	1069	8	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
16359	1070	12	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
16359	1070	12	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
16360	1083	8	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
16360	1083	8	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
16361	1085	12	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
16361	1085	12	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
2851	1099	8	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
16362	1101	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
16362	1101	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
16363	1107	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
16363	1107	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
16364	1124	8	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
16364	1124	8	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
16365	1136	8	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
16365	1136	8	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
16366	1150	8	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
16366	1150	8	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
2852	1151	12	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
2852	1151	12	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
16367	1177	8	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
16367	1177	8	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
16367	1177	8	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
16368	1178	12	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
16368	1178	12	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
16368	1178	12	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
16369	1195	8	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
16369	1195	8	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
16370	1208	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
16370	1208	8	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
16371	1209	12	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
16371	1209	12	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2853	1211	16	CMAESOptimizer.java	max	e	double	0	DEF	max < $
2853	1211	16	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
16372	1225	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
16372	1225	8	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
16373	1226	12	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
16373	1226	12	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2854	1228	16	CMAESOptimizer.java	min	e	double	0	DEF	min > $
2854	1228	16	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
16374	1242	8	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
16374	1242	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
16374	1242	8	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
2855	1243	12	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
2855	1243	12	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
2855	1243	12	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
16375	1256	8	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
16375	1256	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
16375	1256	8	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
2856	1257	12	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
2856	1257	12	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
2856	1257	12	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
16376	1270	8	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
16376	1270	8	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
16376	1270	8	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
16377	1282	8	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
16377	1282	8	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
16377	1282	8	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
16378	1294	8	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
16378	1294	8	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
16379	1307	8	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
16379	1307	8	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
16380	1308	12	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
16380	1308	12	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
15903	515	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
15904	521	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
15904	521	12	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
15905	523	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount + 1
15905	523	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount + 1
1990	524	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1991	531	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
1991	531	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
1991	531	20	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
1991	531	20	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
1992	554	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1993	563	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
1993	563	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
1994	568	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, optimum, lastResult)
1994	568	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1994	568	16	CMAESOptimizer.java	doOptimize	optimum	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1994	568	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, optimum, $)
1994	568	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
1995	575	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopFitness != 0
1995	575	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopFitness : -$.stopFitness)
1995	575	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopFitness : -stopFitness)
15906	580	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
15906	580	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1996	581	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > $.stopTolX
1996	581	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * Math.max(Math.abs(pcCol[$]), sqrtDiagC[$]) > stopTolX
1996	581	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * Math.max(Math.abs(pcCol[i]), $[i]) > stopTolX
1996	581	16	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma * Math.max(Math.abs($[i]), sqrtDiagC[i]) > stopTolX
1997	584	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension - 1
1997	584	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension - 1
15907	588	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
15907	588	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1998	589	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * sqrtDiagC[i] > $.stopTolUpX
1998	589	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * sqrtDiagC[$] > stopTolUpX
1998	589	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * $[i] > stopTolUpX
1999	595	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < $.stopTolFun
1999	595	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1999	595	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
1999	595	12	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
1999	595	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
1999	595	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
2000	600	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst-historyBest < $.stopTolHistFun
2000	600	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
2000	600	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst-$ < stopTolHistFun
2000	600	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$-historyBest < stopTolHistFun
2001	605	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD)/$.min($.diagD) > 1e7
2002	609	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
2003	613	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, current, lastResult)
2003	613	16	CMAESOptimizer.java	doOptimize	current	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
2003	613	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
2003	613	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, current, $)
2004	620	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1+$.lambda/4.)]]
2004	620	12	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1+lambda/4.)]]
2004	620	12	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1+lambda/4.)]]
2004	620	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1+lambda/4.)]]
2005	623	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2005	623	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
2005	623	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
2005	623	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
2006	630	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
2007	654	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof Sigma
2008	658	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof PopulationSize
2009	673	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
2010	674	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	DimensionMismatchException	$.inputSigma.$.length != init.$.length
2010	674	12	CMAESOptimizer.java	checkParameters	init	double[]	0	DimensionMismatchException	inputSigma.length != $.length
15908	677	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
15908	677	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
15908	677	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
2011	678	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NotPositiveException	$.inputSigma[i] < 0
2011	678	16	CMAESOptimizer.java	checkParameters	i	int	0	NotPositiveException	inputSigma[$] < 0
2012	682	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > uB[i] - lB[i]
2012	682	16	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > uB[$] - lB[$]
2012	682	16	CMAESOptimizer.java	checkParameters	lB	double[]	0	OutOfRangeException	inputSigma[i] > uB[i] - $[i]
2012	682	16	CMAESOptimizer.java	checkParameters	uB	double[]	0	OutOfRangeException	inputSigma[i] > $[i] - lB[i]
2013	695	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	DEF	$.lambda <= 0
15909	702	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
15909	702	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
15909	702	8	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
15910	722	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
15910	722	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
15911	759	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
15911	759	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
2014	781	8	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
2015	804	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
2015	804	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
2016	829	8	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
2017	837	12	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
2018	860	16	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
2018	860	16	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
2019	892	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
2019	892	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1
2019	892	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
2019	892	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
2020	901	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
15912	902	16	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
15912	902	16	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
2021	903	20	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i, 0) < 0
2021	903	20	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($, 0) < 0
2022	911	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
15913	929	8	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
15914	943	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
15914	943	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
15914	943	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
15915	948	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
15915	948	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
15915	948	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
15916	1108	8	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
15916	1108	8	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
15917	1109	12	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
15917	1109	12	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
15918	1122	8	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
15918	1122	8	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
15919	1123	12	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
15919	1123	12	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
15920	1136	8	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
15920	1136	8	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
15921	1137	12	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
15921	1137	12	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
15922	1152	8	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
15922	1152	8	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
15923	1153	12	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
15923	1153	12	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
15924	1167	8	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
15924	1167	8	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
15925	1168	12	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
15925	1168	12	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
15926	1182	8	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
15926	1182	8	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
15927	1183	12	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
15927	1183	12	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
15927	1183	12	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
15928	1197	8	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
15928	1197	8	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
15929	1198	12	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
15929	1198	12	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
15930	1211	8	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
15930	1211	8	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
15931	1213	12	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
15931	1213	12	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
2023	1227	8	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
15932	1229	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
15932	1229	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
15933	1235	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
15933	1235	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
15934	1252	8	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
15934	1252	8	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
15935	1264	8	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
15935	1264	8	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
15936	1278	8	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
15936	1278	8	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
2024	1279	12	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
2024	1279	12	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
15937	1305	8	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
15937	1305	8	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
15937	1305	8	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
15938	1306	12	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
15938	1306	12	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
15938	1306	12	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
15939	1323	8	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
15939	1323	8	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
15940	1336	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
15940	1336	8	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
15941	1337	12	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
15941	1337	12	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2025	1339	16	CMAESOptimizer.java	max	e	double	0	DEF	max < $
2025	1339	16	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
15942	1353	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
15942	1353	8	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
15943	1354	12	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
15943	1354	12	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2026	1356	16	CMAESOptimizer.java	min	e	double	0	DEF	min > $
2026	1356	16	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
15944	1370	8	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
15944	1370	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
15944	1370	8	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
2027	1371	12	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
2027	1371	12	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
2027	1371	12	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
15945	1384	8	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
15945	1384	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
15945	1384	8	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
2028	1385	12	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
2028	1385	12	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
2028	1385	12	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
15946	1398	8	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
15946	1398	8	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
15946	1398	8	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
15947	1410	8	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
15947	1410	8	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
15947	1410	8	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
15948	1422	8	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
15948	1422	8	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
15949	1435	8	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
15949	1435	8	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
15950	1436	12	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
15950	1436	12	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
16675	35	8	CanberraDistance.java	compute	THIS	CanberraDistance	0	NIL-FOR	i < a.$.length
16675	35	8	CanberraDistance.java	compute	i	int	0	NIL-FOR	$ < a.length
16675	35	8	CanberraDistance.java	compute	a	double[]	0	NIL-FOR	i < $.length
1198	100	8	CauchyDistribution.java	CauchyDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1199	146	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0
1199	146	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1
1200	148	15	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1201	150	16	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
2408	85	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length < 2
2408	85	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length < 2
2409	88	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length != observed.$.length
2409	88	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length != observed.length
2409	88	8	ChiSquareTest.java	chiSquare	observed	long[]	0	DimensionMismatchException	expected.length != $.length
16145	96	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
16145	96	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
16145	96	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2410	102	8	ChiSquareTest.java	chiSquare	sumExpected	double	0	DEF	FastMath.abs($ - sumObserved) > 10E-6
2410	102	8	ChiSquareTest.java	chiSquare	sumObserved	double	0	DEF	FastMath.abs(sumExpected - $) > 10E-6
16146	107	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
16146	107	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
16146	107	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2411	108	12	ChiSquareTest.java	chiSquare	rescale	boolean	1	DEF	$
2412	208	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
2412	208	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
16147	256	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
16147	256	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
16148	257	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
16148	257	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
16149	267	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
16149	267	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
16150	268	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
16150	268	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
2413	363	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
2413	363	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
2414	414	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length < 2
2414	414	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
2415	417	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
2415	417	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
2415	417	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
16151	430	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
16151	430	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
16151	430	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2416	435	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
2416	435	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
2417	440	8	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
16152	448	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
16152	448	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
16152	448	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2418	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
2418	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
2418	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
2418	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
2419	454	16	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
2420	566	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
2420	566	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
2421	588	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in.$.length < 2
2421	588	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$.length < 2
2422	592	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in[0].length < 2
2422	592	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$[0].length < 2
1521	107	8	CholeskyDecomposition.java	CholeskyDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
15356	118	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
15356	118	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
15357	122	12	CholeskyDecomposition.java	CholeskyDecomposition	j	int	0	NIL-FOR	$ < order
15357	122	12	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	j < $
1522	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lIJ	double	0	NonSymmetricMatrixException	FastMath.abs($ - lJI) > maxDelta
1522	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lJI	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - $) > maxDelta
1522	128	16	CholeskyDecomposition.java	CholeskyDecomposition	maxDelta	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - lJI) > $
15358	136	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
15358	136	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
1523	141	12	CholeskyDecomposition.java	CholeskyDecomposition	ltI	double[]	0	NonPositiveDefiniteMatrixException	$[i] <= absolutePositivityThreshold
1523	141	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	ltI[$] <= absolutePositivityThreshold
1523	141	12	CholeskyDecomposition.java	CholeskyDecomposition	absolutePositivityThreshold	double	0	NonPositiveDefiniteMatrixException	ltI[i] <= $
15359	148	12	CholeskyDecomposition.java	CholeskyDecomposition	q	int	0	NIL-FOR	$ > i
15359	148	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	q > $
15360	151	16	CholeskyDecomposition.java	CholeskyDecomposition	p	int	0	NIL-FOR	$ < order
15360	151	16	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	p < $
1524	164	8	CholeskyDecomposition.java	getL	THIS	CholeskyDecomposition	0	DEF	$.cachedL == null
1525	177	8	CholeskyDecomposition.java	getLT	THIS	CholeskyDecomposition	0	DEF	$.cachedLT == null
15361	191	8	CholeskyDecomposition.java	getDeterminant	THIS	CholeskyDecomposition	0	NIL-FOR	i < $.lTData.$.length
15361	191	8	CholeskyDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
3218	43	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == NO_FITNESS
3219	85	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
3220	100	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
3507	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	1	DEF	$.previousState != null
3507	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
16852	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16852	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
16853	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16853	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
892	116	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN
893	119	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
894	122	8	Complex.java	abs	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
895	123	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
896	129	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
897	158	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
897	158	8	Complex.java	add	THIS	Complex	0	RET	addend.$.isNaN
897	158	8	Complex.java	add	addend	Complex	0	RET	$.isNaN
898	175	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
898	175	8	Complex.java	add	addend	double	0	RET	Double.isNaN($)
899	197	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN
900	249	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
900	249	8	Complex.java	divide	THIS	Complex	0	RET	divisor.$.isNaN
900	249	8	Complex.java	divide	divisor	Complex	0	RET	$.isNaN
901	255	8	Complex.java	divide	c	double	0	RET	$ == 0.0
901	255	8	Complex.java	divide	d	double	0	RET	$ == 0.0
902	259	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
902	259	8	Complex.java	divide	divisor	Complex	0	RET	$.isInfinite()
903	263	8	Complex.java	divide	c	double	1	RET	FastMath.abs($) < FastMath.abs(d)
903	263	8	Complex.java	divide	d	double	1	RET	FastMath.abs(c) < FastMath.abs($)
904	285	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
904	285	8	Complex.java	divide	divisor	double	0	RET	Double.isNaN($)
905	288	8	Complex.java	divide	divisor	double	0	RET	$ == 0d
906	291	8	Complex.java	divide	divisor	double	0	RET	Double.isInfinite($)
907	300	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isNaN
908	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.real == 0.0
908	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.imaginary == 0.0
909	308	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isInfinite
910	312	8	Complex.java	reciprocal	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
911	340	8	Complex.java	equals	THIS	Complex	0	RET	$ == other
911	340	8	Complex.java	equals	other	Object	0	RET	this == $
912	343	8	Complex.java	equals	other	Object	0	RET	$ instanceof Complex
913	345	12	Complex.java	equals	THIS	Complex	1	RET	c.$.isNaN
913	345	12	Complex.java	equals	c	Complex	1	RET	$.isNaN
914	363	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN
915	439	8	Complex.java	multiply	THIS	Complex	0	RET	factor.$.isNaN
915	439	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
915	439	8	Complex.java	multiply	factor	Complex	0	RET	$.isNaN
916	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
916	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.imaginary)
916	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.real)
916	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
916	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.imaginary)
916	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.real)
917	462	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
918	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
918	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
919	481	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
919	481	8	Complex.java	multiply	factor	double	0	RET	Double.isNaN($)
920	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
920	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
920	484	8	Complex.java	multiply	factor	double	0	RET	Double.isInfinite($)
921	501	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN
922	529	8	Complex.java	subtract	THIS	Complex	0	RET	subtrahend.$.isNaN
922	529	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
922	529	8	Complex.java	subtract	subtrahend	Complex	0	RET	$.isNaN
923	546	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
923	546	8	Complex.java	subtract	subtrahend	double	0	RET	Double.isNaN($)
924	569	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN
925	593	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN
926	617	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN
927	658	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN
928	698	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN
929	739	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN
930	784	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN
931	862	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN
932	902	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN
933	945	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN
934	949	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
934	949	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
935	954	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
936	1016	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN
936	1016	8	Complex.java	tan	THIS	Complex	0	RET	Double.isInfinite($.real)
937	1019	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary > 20.0
938	1022	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary < -20.0
939	1067	8	Complex.java	tanh	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
939	1067	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN
940	1070	8	Complex.java	tanh	THIS	Complex	0	RET	$.real > 20.0
941	1073	8	Complex.java	tanh	THIS	Complex	0	RET	$.real < -20.0
942	1131	8	Complex.java	nthRoot	n	int	0	NotPositiveException	$ <= 0
943	1138	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN
944	1142	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
14895	1154	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
14895	1154	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
945	1188	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
945	1188	8	Complex.java	valueOf	imaginaryPart	double	0	RET	Double.isNaN($)
946	1202	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
876	67	8	ComplexFormat.java	ComplexFormat	format	NumberFormat	0	NullArgumentException	$ == null
877	85	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
878	88	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
879	146	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NullArgumentException	$ == null
880	149	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NoDataException	$.length() == 0
881	152	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
882	155	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
883	214	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
884	219	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
884	219	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
885	245	8	ComplexFormat.java	formatImaginary	toAppendTo	StringBuffer	0	DEF	$.toString().equals("1")
886	272	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
887	274	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
888	354	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
889	377	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
890	413	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
891	421	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	CompositeFormat.parseFixedstring(source, $.getImaginaryCharacter(), pos)
891	421	8	ComplexFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, getImaginaryCharacter(), pos)
891	421	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), $)
868	63	8	ComplexUtils.java	polar2Complex	r	double	0	MathIllegalArgumentException	$ < 0
14893	81	8	ComplexUtils.java	convertToComplex	THIS	ComplexUtils	0	NIL-FOR	i < real.$.length
14893	81	8	ComplexUtils.java	convertToComplex	i	int	0	NIL-FOR	$ < real.length
14893	81	8	ComplexUtils.java	convertToComplex	real	double[]	0	NIL-FOR	i < $.length
506	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
506	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
14853	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
14853	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
14853	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
507	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
507	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
508	121	8	CompositeFormat.java	parseNumber	sb	StringBuilder	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
508	121	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
508	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
508	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
508	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
508	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
509	147	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
509	147	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
14854	152	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
14854	152	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
14854	152	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
510	154	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
511	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
511	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
511	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
511	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
511	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
511	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
511	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
511	176	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
512	210	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
512	210	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
1773	176	8	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	1	DEF	$ == null
1774	185	8	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1774	185	8	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
1775	195	12	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	0	DEF	$ != null
1776	199	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1776	199	12	ConjugateGradient.java	solveInPlace	rhoNext	double	0	DEF	$ <= 0.
1777	207	12	ConjugateGradient.java	solveInPlace	manager	IterationManager	1	DEF	$.getIterations() == 2
1778	214	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1778	214	12	ConjugateGradient.java	solveInPlace	pq	double	0	DEF	$ <= 0.
1779	230	12	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1779	230	12	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
95	129	8	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(hPrev, 0.0, $)
95	129	8	ContinuedFraction.java	evaluate	hPrev	double	0	DEF	Precision.equals($, 0.0, small)
14790	138	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
14790	138	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
96	143	12	ContinuedFraction.java	evaluate	dN	double	0	DEF	Precision.equals($, 0.0, small)
96	143	12	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(dN, 0.0, $)
97	147	12	ContinuedFraction.java	evaluate	cN	double	0	DEF	Precision.equals($, 0.0, small)
97	147	12	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(cN, 0.0, $)
98	155	12	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isInfinite($)
99	159	12	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isNaN($)
100	164	12	ContinuedFraction.java	evaluate	deltaN	double	0	DEF	FastMath.abs($ - 1.0) < epsilon
100	164	12	ContinuedFraction.java	evaluate	epsilon	double	0	DEF	FastMath.abs(deltaN - 1.0) < $
101	174	8	ContinuedFraction.java	evaluate	n	int	0	MaxCountExceededException	$ >= maxIterations
101	174	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxCountExceededException	n >= $
3560	133	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
3560	133	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
3561	137	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
3562	142	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DimensionMismatchException	$.getInterpolatedState().length != model.getInterpolatedState().length
3562	142	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DimensionMismatchException	getInterpolatedState().length != $.getInterpolatedState().length
3563	147	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	MathIllegalArgumentException	$.forward ^ model.$.forward
3563	147	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	MathIllegalArgumentException	forward ^ $.forward
3564	156	6	ContinuousOutputModel.java	append	step	double	0	MathIllegalArgumentException	FastMath.abs(gap) > 1.0e-3 * FastMath.abs($)
3564	156	6	ContinuousOutputModel.java	append	gap	double	0	MathIllegalArgumentException	FastMath.abs($) > 1.0e-3 * FastMath.abs(step)
3565	192	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
3566	199	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
3567	257	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
3567	257	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
3567	257	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
3568	262	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
3568	262	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
3568	262	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
16886	269	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
16886	269	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
3569	274	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
3570	277	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
3571	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs(tMax - $) < 1e-6
3571	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs($ - tMin) < 1e-6
3571	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	FastMath.abs(tMed - $) < 1e-6
3571	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	FastMath.abs($ - tMed) < 1e-6
3572	314	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
3572	314	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
3573	316	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
3573	316	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
16887	324	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
16887	324	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
16887	324	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
16887	324	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
3574	365	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
3575	366	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
3575	366	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
3576	368	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
3576	368	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
3577	374	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
3577	374	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
3578	376	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
3578	376	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
3108	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
3108	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
3108	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
16595	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
16595	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
16596	168	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.normalized.$.length
16596	168	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < normalized.length
16597	174	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
16597	174	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
16597	174	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
16598	176	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.root.getColumnDimension()
16598	176	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < root.getColumnDimension()
16193	173	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
16193	173	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
16194	174	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
16194	174	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
2479	245	8	Covariance.java	covariance	THIS	Covariance	1	MathIllegalArgumentException	length != yArray.$.length
2479	245	8	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ != yArray.length
2479	245	8	Covariance.java	covariance	yArray	double[]	1	MathIllegalArgumentException	length != $.length
2480	248	15	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ < 2
16195	254	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
16195	254	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
2481	290	8	Covariance.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2481	290	8	Covariance.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 1
1864	187	8	CurveFitter.java	fit	THIS	CurveFitter	1	DEF	$.optimizer == null
3208	106	8	CycleCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3208	106	8	CycleCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3209	124	8	CycleCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3209	124	8	CycleCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
16656	144	8	CycleCrossover.java	mate	length	int	0	NIL-WHILE	visitedIndices.size() < $
16656	144	8	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.size() < length
16657	150	12	CycleCrossover.java	mate	indices	List<Integer>	0	NIL-WHILE	idx != $.get(0)
16657	150	12	CycleCrossover.java	mate	idx	int	0	NIL-WHILE	$ != indices.get(0)
3210	160	12	CycleCrossover.java	mate	cycle	int	0	DEF	$++ % 2 != 0
16658	171	12	CycleCrossover.java	mate	length	int	0	NIL-WHILE	visitedIndices.size() < $
16658	171	12	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.contains(idx)
16658	171	12	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.size() < length
16658	171	12	CycleCrossover.java	mate	idx	int	0	NIL-WHILE	visitedIndices.contains($)
3211	173	16	CycleCrossover.java	mate	length	int	0	DEF	idx >= $
3211	173	16	CycleCrossover.java	mate	idx	int	0	DEF	$ >= length
3259	101	8	DBSCANClusterer.java	DBSCANClusterer	eps	double	0	NotPositiveException	$ < 0.0d
3260	104	8	DBSCANClusterer.java	DBSCANClusterer	minPts	int	0	NotPositiveException	$ < 0
3261	143	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	0	DEF	visited.get($.point) != null
3261	143	12	DBSCANClusterer.java	cluster	visited	Map<Clusterable,PointStatus>	0	DEF	$.get(point) != null
3262	147	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	1	DEF	neighbors.size() >= $.minPts
3262	147	12	DBSCANClusterer.java	cluster	neighbors	List<T>	1	DEF	$.size() >= minPts
16676	179	8	DBSCANClusterer.java	expandCluster	seeds	List<T>	0	NIL-WHILE	index < $.size()
16676	179	8	DBSCANClusterer.java	expandCluster	index	int	0	NIL-WHILE	$ < seeds.size()
3263	183	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ == null
3264	185	16	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	currentNeighbors.size() >= $.minPts
3264	185	16	DBSCANClusterer.java	expandCluster	currentNeighbors	List<T>	0	DEF	$.size() >= minPts
3265	190	12	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	pStatus != $.PointStatus.PART_OF_CLUSTER
3265	190	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ != PointStatus.PART_OF_CLUSTER
3266	210	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	$.distance($.neighbor, point) <= $.eps
3266	210	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	point != $.neighbor
3266	210	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	distance(neighbor, $) <= eps
3266	210	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	$ != neighbor
3267	227	12	DBSCANClusterer.java	merge	THIS	DBSCANClusterer	0	DEF	oneSet.contains($.item)
3267	227	12	DBSCANClusterer.java	merge	oneSet	Set<T>	0	DEF	$.contains(item)
2436	89	8	DBSCANClusterer.java	DBSCANClusterer	eps	double	0	NotPositiveException	$ < 0.0d
2437	92	8	DBSCANClusterer.java	DBSCANClusterer	minPts	int	0	NotPositiveException	$ < 0
2438	137	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	0	DEF	visited.get($.point) != null
2438	137	12	DBSCANClusterer.java	cluster	visited	Map<Clusterable<T>,PointStatus>	0	DEF	$.get(point) != null
2439	141	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	1	DEF	neighbors.size() >= $.minPts
2439	141	12	DBSCANClusterer.java	cluster	neighbors	List<T>	1	DEF	$.size() >= minPts
16164	173	8	DBSCANClusterer.java	expandCluster	seeds	List<T>	0	NIL-WHILE	index < $.size()
16164	173	8	DBSCANClusterer.java	expandCluster	index	int	0	NIL-WHILE	$ < seeds.size()
2440	177	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ == null
2441	179	16	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	currentNeighbors.size() >= $.minPts
2441	179	16	DBSCANClusterer.java	expandCluster	currentNeighbors	List<T>	0	DEF	$.size() >= minPts
2442	184	12	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	pStatus != $.PointStatus.PART_OF_CLUSTER
2442	184	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ != PointStatus.PART_OF_CLUSTER
2443	204	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	point != $.neighbor
2443	204	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	$.neighbor.distanceFrom(point) <= $.eps
2443	204	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	$ != neighbor
2443	204	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	neighbor.distanceFrom($) <= eps
2444	221	12	DBSCANClusterer.java	merge	THIS	DBSCANClusterer	0	DEF	oneSet.contains($.item)
2444	221	12	DBSCANClusterer.java	merge	oneSet	Set<T>	0	DEF	$.contains(item)
4141	196	8	DSCompiler.java	getCompiler	THIS	DSCompiler	0	RET	cache[parameters].length > order
4141	196	8	DSCompiler.java	getCompiler	THIS	DSCompiler	0	RET	cache.$.length > parameters
4141	196	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$[parameters][order] != null
4141	196	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$[parameters].length > order
4141	196	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$.length > parameters
4141	196	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$ != null
4141	196	8	DSCompiler.java	getCompiler	parameters	int	0	RET	cache[$][order] != null
4141	196	8	DSCompiler.java	getCompiler	parameters	int	0	RET	cache[$].length > order
4141	196	8	DSCompiler.java	getCompiler	parameters	int	0	RET	cache.length > $
4141	196	8	DSCompiler.java	getCompiler	order	int	0	RET	cache[parameters][$] != null
4141	196	8	DSCompiler.java	getCompiler	order	int	0	RET	cache[parameters].length > $
4142	207	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	DEF	$ != null
17086	209	12	DSCompiler.java	getCompiler	THIS	DSCompiler	0	NIL-FOR	i < cache.$.length
17086	209	12	DSCompiler.java	getCompiler	i	int	0	NIL-FOR	$ < cache.length
17086	209	12	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	NIL-FOR	i < $.length
17087	215	8	DSCompiler.java	getCompiler	diag	int	0	NIL-FOR	$ <= parameters + order
17087	215	8	DSCompiler.java	getCompiler	parameters	int	0	NIL-FOR	diag <= $ + order
17087	215	8	DSCompiler.java	getCompiler	order	int	0	NIL-FOR	diag <= parameters + $
17088	216	12	DSCompiler.java	getCompiler	o	int	0	NIL-FOR	$ <= FastMath.min(order, diag)
17088	216	12	DSCompiler.java	getCompiler	diag	int	0	NIL-FOR	o <= FastMath.min(order, $)
17088	216	12	DSCompiler.java	getCompiler	order	int	0	NIL-FOR	o <= FastMath.min($, diag)
4143	218	16	DSCompiler.java	getCompiler	p	int	0	DEF	newCache[$][o] == null
4143	218	16	DSCompiler.java	getCompiler	o	int	0	DEF	newCache[p][$] == null
4143	218	16	DSCompiler.java	getCompiler	newCache	DSCompiler[][]	0	DEF	$[p][o] == null
4144	243	8	DSCompiler.java	compileSizes	parameters	int	1	DEF	$ == 0
17089	248	12	DSCompiler.java	compileSizes	i	int	0	NIL-FOR	$ < order
17089	248	12	DSCompiler.java	compileSizes	order	int	0	NIL-FOR	i < $
4145	268	8	DSCompiler.java	compileDerivativesIndirection	parameters	int	0	RET	$ == 0
4145	268	8	DSCompiler.java	compileDerivativesIndirection	order	int	0	RET	$ == 0
17090	277	8	DSCompiler.java	compileDerivativesIndirection	i	int	0	NIL-FOR	$ < vSize
17090	277	8	DSCompiler.java	compileDerivativesIndirection	vSize	int	0	NIL-FOR	i < $
17091	285	8	DSCompiler.java	compileDerivativesIndirection	i	int	0	NIL-FOR	$ < dSize
17091	285	8	DSCompiler.java	compileDerivativesIndirection	dSize	int	0	NIL-FOR	i < $
4146	316	8	DSCompiler.java	compileLowerIndirection	parameters	int	0	RET	$ == 0
4146	316	8	DSCompiler.java	compileLowerIndirection	order	int	0	RET	$ <= 1
17092	325	8	DSCompiler.java	compileLowerIndirection	i	int	0	NIL-FOR	$ < dSize
17092	325	8	DSCompiler.java	compileLowerIndirection	dSize	int	0	NIL-FOR	i < $
4147	351	8	DSCompiler.java	compileMultiplicationIndirection	parameters	int	0	RET	$ == 0
4147	351	8	DSCompiler.java	compileMultiplicationIndirection	order	int	0	RET	$ == 0
17093	362	8	DSCompiler.java	compileMultiplicationIndirection	i	int	0	NIL-FOR	$ < dSize
17093	362	8	DSCompiler.java	compileMultiplicationIndirection	dSize	int	0	NIL-FOR	i < $
17094	365	12	DSCompiler.java	compileMultiplicationIndirection	THIS	DSCompiler	0	NIL-FOR	j < dRow.$.length
17094	365	12	DSCompiler.java	compileMultiplicationIndirection	j	int	0	NIL-FOR	$ < dRow.length
17094	365	12	DSCompiler.java	compileMultiplicationIndirection	dRow	int[][]	0	NIL-FOR	j < $.length
17095	372	12	DSCompiler.java	compileMultiplicationIndirection	j	int	0	NIL-FOR	$ < row.size()
17095	372	12	DSCompiler.java	compileMultiplicationIndirection	row	List<int[]>	0	NIL-FOR	j < $.size()
4148	374	16	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[0] > 0
17096	375	20	DSCompiler.java	compileMultiplicationIndirection	k	int	0	NIL-FOR	$ < row.size()
17096	375	20	DSCompiler.java	compileMultiplicationIndirection	row	List<int[]>	0	NIL-FOR	k < $.size()
4149	377	24	DSCompiler.java	compileMultiplicationIndirection	termK	int[]	0	DEF	termJ[1] == $[1]
4149	377	24	DSCompiler.java	compileMultiplicationIndirection	termK	int[]	0	DEF	termJ[2] == $[2]
4149	377	24	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[1] == termK[1]
4149	377	24	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[2] == termK[2]
4150	418	8	DSCompiler.java	compileCompositionIndirection	parameters	int	0	RET	$ == 0
4150	418	8	DSCompiler.java	compileCompositionIndirection	order	int	0	RET	$ == 0
17097	433	8	DSCompiler.java	compileCompositionIndirection	i	int	0	NIL-FOR	$ < dSize
17097	433	8	DSCompiler.java	compileCompositionIndirection	dSize	int	0	NIL-FOR	i < $
17098	446	16	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	j < $.term.$.length
17098	446	16	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < term.length
17099	457	16	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	l < $.term.$.length
17099	457	16	DSCompiler.java	compileCompositionIndirection	l	int	0	NIL-FOR	$ < term.length
17100	461	20	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	j < $.term.$.length
17100	461	20	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < term.length
4151	467	24	DSCompiler.java	compileCompositionIndirection	j	int	0	DEF	$ == l
4151	467	24	DSCompiler.java	compileCompositionIndirection	l	int	0	DEF	j == $
17101	482	12	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < row.size()
17101	482	12	DSCompiler.java	compileCompositionIndirection	row	List<int[]>	0	NIL-FOR	j < $.size()
4152	484	16	DSCompiler.java	compileCompositionIndirection	termJ	int[]	0	DEF	$[0] > 0
17102	485	20	DSCompiler.java	compileCompositionIndirection	k	int	0	NIL-FOR	$ < row.size()
17102	485	20	DSCompiler.java	compileCompositionIndirection	row	List<int[]>	0	NIL-FOR	k < $.size()
17103	488	24	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	l < termJ.$.length
17103	488	24	DSCompiler.java	compileCompositionIndirection	l	int	0	NIL-FOR	$ < termJ.length
17103	488	24	DSCompiler.java	compileCompositionIndirection	equals	boolean	0	NIL-FOR	$
17103	488	24	DSCompiler.java	compileCompositionIndirection	termJ	int[]	0	NIL-FOR	l < $.length
4153	491	24	DSCompiler.java	compileCompositionIndirection	equals	boolean	0	DEF	$
4154	546	8	DSCompiler.java	getPartialDerivativeIndex	THIS	DSCompiler	0	DimensionMismatchException	orders.$.length != $.getFreeParameters()
4154	546	8	DSCompiler.java	getPartialDerivativeIndex	orders	int	0	DimensionMismatchException	$.length != getFreeParameters()
17104	573	8	DSCompiler.java	getPartialDerivativeIndex	i	int	0	NIL-FOR	$ >= 0
4155	580	12	DSCompiler.java	getPartialDerivativeIndex	ordersSum	int	0	NumberIsTooLargeException	$ > order
4155	580	12	DSCompiler.java	getPartialDerivativeIndex	order	int	0	NumberIsTooLargeException	ordersSum > $
17105	584	12	DSCompiler.java	getPartialDerivativeIndex	derivativeOrder	int	0	NIL-WHILE	$-- > 0
17106	670	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
17106	670	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
17107	695	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
17107	695	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
17108	726	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
17108	726	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
17109	747	8	DSCompiler.java	add	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
17109	747	8	DSCompiler.java	add	i	int	0	NIL-FOR	$ < getSize()
17110	763	8	DSCompiler.java	subtract	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
17110	763	8	DSCompiler.java	subtract	i	int	0	NIL-FOR	$ < getSize()
17111	781	8	DSCompiler.java	multiply	THIS	DSCompiler	0	NIL-FOR	i < $.multIndirection.$.length
17111	781	8	DSCompiler.java	multiply	i	int	0	NIL-FOR	$ < multIndirection.length
17112	784	12	DSCompiler.java	multiply	THIS	DSCompiler	0	NIL-FOR	j < mappingI.$.length
17112	784	12	DSCompiler.java	multiply	j	int	0	NIL-FOR	$ < mappingI.length
17112	784	12	DSCompiler.java	multiply	mappingI	int[][]	0	NIL-FOR	j < $.length
17113	832	8	DSCompiler.java	remainder	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
17113	832	8	DSCompiler.java	remainder	i	int	0	NIL-FOR	$ < getSize()
17114	854	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ > 0
17115	860	8	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
17115	860	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
4156	882	8	DSCompiler.java	pow	n	int	0	RET	$ == 0
4157	893	8	DSCompiler.java	pow	n	int	1	DEF	$ > 0
17116	897	12	DSCompiler.java	pow	i	int	0	NIL-FOR	$ > 0
17117	906	12	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
17117	906	12	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
17118	913	8	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
17118	913	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
4158	959	8	DSCompiler.java	rootN	n	int	1	DEF	$ == 2
4159	962	15	DSCompiler.java	rootN	n	int	1	DEF	$ == 3
17119	971	8	DSCompiler.java	rootN	THIS	DSCompiler	0	NIL-FOR	i <= $.order
17119	971	8	DSCompiler.java	rootN	i	int	0	NIL-FOR	$ <= order
4160	1036	8	DSCompiler.java	log	THIS	DSCompiler	0	DEF	$.order > 0
17120	1039	12	DSCompiler.java	log	THIS	DSCompiler	0	NIL-FOR	i <= $.order
17120	1039	12	DSCompiler.java	log	i	int	0	NIL-FOR	$ <= order
4161	1063	8	DSCompiler.java	log1p	THIS	DSCompiler	0	DEF	$.order > 0
17121	1066	12	DSCompiler.java	log1p	THIS	DSCompiler	0	NIL-FOR	i <= $.order
17121	1066	12	DSCompiler.java	log1p	i	int	0	NIL-FOR	$ <= order
4162	1090	8	DSCompiler.java	log10	THIS	DSCompiler	0	DEF	$.order > 0
17122	1093	12	DSCompiler.java	log10	THIS	DSCompiler	0	NIL-FOR	i <= $.order
17122	1093	12	DSCompiler.java	log10	i	int	0	NIL-FOR	$ <= order
4163	1118	8	DSCompiler.java	cos	THIS	DSCompiler	0	DEF	$.order > 0
17123	1120	12	DSCompiler.java	cos	THIS	DSCompiler	0	NIL-FOR	i <= $.order
17123	1120	12	DSCompiler.java	cos	i	int	0	NIL-FOR	$ <= order
4164	1144	8	DSCompiler.java	sin	THIS	DSCompiler	0	DEF	$.order > 0
17124	1146	12	DSCompiler.java	sin	THIS	DSCompiler	0	NIL-FOR	i <= $.order
17124	1146	12	DSCompiler.java	sin	i	int	0	NIL-FOR	$ <= order
4165	1172	8	DSCompiler.java	tan	THIS	DSCompiler	0	DEF	$.order > 0
17125	1184	12	DSCompiler.java	tan	THIS	DSCompiler	0	NIL-FOR	n <= $.order
17125	1184	12	DSCompiler.java	tan	n	int	0	NIL-FOR	$ <= order
17126	1189	16	DSCompiler.java	tan	k	int	0	NIL-FOR	$ >= 0
4166	1191	20	DSCompiler.java	tan	k	int	1	DEF	$ > 2
4167	1193	27	DSCompiler.java	tan	k	int	0	DEF	$ == 2
4168	1197	16	DSCompiler.java	tan	n	int	0	DEF	($ & 0x1) == 0
4169	1226	8	DSCompiler.java	acos	THIS	DSCompiler	0	DEF	$.order > 0
17127	1240	12	DSCompiler.java	acos	THIS	DSCompiler	0	NIL-FOR	n <= $.order
17127	1240	12	DSCompiler.java	acos	n	int	0	NIL-FOR	$ <= order
17128	1245	16	DSCompiler.java	acos	k	int	0	NIL-FOR	$ >= 0
4170	1247	20	DSCompiler.java	acos	k	int	1	DEF	$ > 2
4171	1249	27	DSCompiler.java	acos	k	int	0	DEF	$ == 2
4172	1253	16	DSCompiler.java	acos	n	int	0	DEF	($ & 0x1) == 0
4173	1283	8	DSCompiler.java	asin	THIS	DSCompiler	0	DEF	$.order > 0
17129	1297	12	DSCompiler.java	asin	THIS	DSCompiler	0	NIL-FOR	n <= $.order
17129	1297	12	DSCompiler.java	asin	n	int	0	NIL-FOR	$ <= order
17130	1302	16	DSCompiler.java	asin	k	int	0	NIL-FOR	$ >= 0
4174	1304	20	DSCompiler.java	asin	k	int	1	DEF	$ > 2
4175	1306	27	DSCompiler.java	asin	k	int	0	DEF	$ == 2
4176	1310	16	DSCompiler.java	asin	n	int	0	DEF	($ & 0x1) == 0
4177	1340	8	DSCompiler.java	atan	THIS	DSCompiler	0	DEF	$.order > 0
17131	1354	12	DSCompiler.java	atan	THIS	DSCompiler	0	NIL-FOR	n <= $.order
17131	1354	12	DSCompiler.java	atan	n	int	0	NIL-FOR	$ <= order
17132	1359	16	DSCompiler.java	atan	k	int	0	NIL-FOR	$ >= 0
4178	1361	20	DSCompiler.java	atan	k	int	1	DEF	$ > 2
4179	1363	27	DSCompiler.java	atan	k	int	0	DEF	$ == 2
4180	1367	16	DSCompiler.java	atan	n	int	0	DEF	($ & 0x1) == 0
4181	1404	8	DSCompiler.java	atan2	x	double[]	1	DEF	$[xOffset] >= 0
4181	1404	8	DSCompiler.java	atan2	xOffset	int	1	DEF	x[$] >= 0
17133	1410	12	DSCompiler.java	atan2	THIS	DSCompiler	0	NIL-FOR	i < tmp2.$.length
17133	1410	12	DSCompiler.java	atan2	i	int	0	NIL-FOR	$ < tmp2.length
17133	1410	12	DSCompiler.java	atan2	tmp2	double[]	0	NIL-FOR	i < $.length
17134	1422	12	DSCompiler.java	atan2	THIS	DSCompiler	0	NIL-FOR	i < tmp2.$.length
17134	1422	12	DSCompiler.java	atan2	i	int	0	NIL-FOR	$ < tmp2.length
17134	1422	12	DSCompiler.java	atan2	tmp2	double[]	0	NIL-FOR	i < $.length
4182	1447	8	DSCompiler.java	cosh	THIS	DSCompiler	0	DEF	$.order > 0
17135	1449	12	DSCompiler.java	cosh	THIS	DSCompiler	0	NIL-FOR	i <= $.order
17135	1449	12	DSCompiler.java	cosh	i	int	0	NIL-FOR	$ <= order
4183	1473	8	DSCompiler.java	sinh	THIS	DSCompiler	0	DEF	$.order > 0
17136	1475	12	DSCompiler.java	sinh	THIS	DSCompiler	0	NIL-FOR	i <= $.order
17136	1475	12	DSCompiler.java	sinh	i	int	0	NIL-FOR	$ <= order
4184	1501	8	DSCompiler.java	tanh	THIS	DSCompiler	0	DEF	$.order > 0
17137	1513	12	DSCompiler.java	tanh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
17137	1513	12	DSCompiler.java	tanh	n	int	0	NIL-FOR	$ <= order
17138	1518	16	DSCompiler.java	tanh	k	int	0	NIL-FOR	$ >= 0
4185	1520	20	DSCompiler.java	tanh	k	int	1	DEF	$ > 2
4186	1522	27	DSCompiler.java	tanh	k	int	0	DEF	$ == 2
4187	1526	16	DSCompiler.java	tanh	n	int	0	DEF	($ & 0x1) == 0
4188	1555	8	DSCompiler.java	acosh	THIS	DSCompiler	0	DEF	$.order > 0
17139	1569	12	DSCompiler.java	acosh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
17139	1569	12	DSCompiler.java	acosh	n	int	0	NIL-FOR	$ <= order
17140	1574	16	DSCompiler.java	acosh	k	int	0	NIL-FOR	$ >= 0
4189	1576	20	DSCompiler.java	acosh	k	int	1	DEF	$ > 2
4190	1578	27	DSCompiler.java	acosh	k	int	0	DEF	$ == 2
4191	1582	16	DSCompiler.java	acosh	n	int	0	DEF	($ & 0x1) == 0
4192	1612	8	DSCompiler.java	asinh	THIS	DSCompiler	0	DEF	$.order > 0
17141	1626	12	DSCompiler.java	asinh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
17141	1626	12	DSCompiler.java	asinh	n	int	0	NIL-FOR	$ <= order
17142	1631	16	DSCompiler.java	asinh	k	int	0	NIL-FOR	$ >= 0
4193	1633	20	DSCompiler.java	asinh	k	int	1	DEF	$ > 2
4194	1635	27	DSCompiler.java	asinh	k	int	0	DEF	$ == 2
4195	1639	16	DSCompiler.java	asinh	n	int	0	DEF	($ & 0x1) == 0
4196	1669	8	DSCompiler.java	atanh	THIS	DSCompiler	0	DEF	$.order > 0
17143	1683	12	DSCompiler.java	atanh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
17143	1683	12	DSCompiler.java	atanh	n	int	0	NIL-FOR	$ <= order
17144	1688	16	DSCompiler.java	atanh	k	int	0	NIL-FOR	$ >= 0
4197	1690	20	DSCompiler.java	atanh	k	int	1	DEF	$ > 2
4198	1692	27	DSCompiler.java	atanh	k	int	0	DEF	$ == 2
4199	1696	16	DSCompiler.java	atanh	n	int	0	DEF	($ & 0x1) == 0
17145	1723	8	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	i < $.compIndirection.$.length
17145	1723	8	DSCompiler.java	compose	i	int	0	NIL-FOR	$ < compIndirection.length
17146	1726	12	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	j < mappingI.$.length
17146	1726	12	DSCompiler.java	compose	j	int	0	NIL-FOR	$ < mappingI.length
17146	1726	12	DSCompiler.java	compose	mappingI	int[][]	0	NIL-FOR	j < $.length
17147	1729	16	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	k < mappingIJ.$.length
17147	1729	16	DSCompiler.java	compose	k	int	0	NIL-FOR	$ < mappingIJ.length
17147	1729	16	DSCompiler.java	compose	mappingIJ	int[]	0	NIL-FOR	k < $.length
17148	1748	8	DSCompiler.java	taylor	i	int	0	NIL-FOR	$ >= 0
17149	1751	12	DSCompiler.java	taylor	THIS	DSCompiler	0	NIL-FOR	k < orders.$.length
17149	1751	12	DSCompiler.java	taylor	k	int	0	NIL-FOR	$ < orders.length
17149	1751	12	DSCompiler.java	taylor	orders	int[]	0	NIL-FOR	k < $.length
4200	1752	16	DSCompiler.java	taylor	k	int	0	MathInternalError	orders[$] > 0
4200	1752	16	DSCompiler.java	taylor	orders	int[]	0	MathInternalError	$[k] > 0
4201	1773	8	DSCompiler.java	checkCompatibility	THIS	DSCompiler	0	DimensionMismatchException	$.parameters != compiler.$.parameters
4201	1773	8	DSCompiler.java	checkCompatibility	compiler	DSCompiler	0	DimensionMismatchException	parameters != $.parameters
4202	1776	8	DSCompiler.java	checkCompatibility	THIS	DSCompiler	0	DimensionMismatchException	$.order != compiler.$.order
4202	1776	8	DSCompiler.java	checkCompatibility	compiler	DSCompiler	0	DimensionMismatchException	order != $.order
551	247	8	Decimal64.java	equals	obj	Object	0	RET	$ instanceof Decimal64
552	443	8	Decimal64.java	rootN	THIS	Decimal64	1	RET	$.value < 0
553	603	8	Decimal64.java	linearCombination	THIS	Decimal64	0	DimensionMismatchException	a.$.length != b.$.length
553	603	8	Decimal64.java	linearCombination	a	Decimal64[]	0	DimensionMismatchException	$.length != b.length
553	603	8	Decimal64.java	linearCombination	b	Decimal64[]	0	DimensionMismatchException	a.length != $.length
14860	608	8	Decimal64.java	linearCombination	THIS	Decimal64	0	NIL-FOR	i < a.$.length
14860	608	8	Decimal64.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
14860	608	8	Decimal64.java	linearCombination	a	Decimal64[]	0	NIL-FOR	i < $.length
554	620	8	Decimal64.java	linearCombination	THIS	Decimal64	0	DimensionMismatchException	a.$.length != b.$.length
554	620	8	Decimal64.java	linearCombination	a	double[]	0	DimensionMismatchException	$.length != b.length
554	620	8	Decimal64.java	linearCombination	b	Decimal64[]	0	DimensionMismatchException	a.length != $.length
14861	624	8	Decimal64.java	linearCombination	THIS	Decimal64	0	NIL-FOR	i < a.$.length
14861	624	8	Decimal64.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
14861	624	8	Decimal64.java	linearCombination	a	double[]	0	NIL-FOR	i < $.length
1793	114	8	DefaultIterativeLinearSolverEvent.java	getResidual	THIS	DefaultIterativeLinearSolverEvent	0	RET	$.r != null
525	50	8	DefaultTransformer.java	transform	o	Object	0	NullArgumentException	$ == null
526	54	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
527	69	8	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
527	69	8	DefaultTransformer.java	equals	other	Object	0	RET	this == $
4207	121	8	DerivativeStructure.java	DerivativeStructure	parameters	int	0	NumberIsTooLargeException	index >= $
4207	121	8	DerivativeStructure.java	DerivativeStructure	index	int	0	NumberIsTooLargeException	$ >= parameters
4208	125	8	DerivativeStructure.java	DerivativeStructure	order	int	0	DEF	$ > 0
4209	207	8	DerivativeStructure.java	DerivativeStructure	THIS	DerivativeStructure	0	DimensionMismatchException	derivatives.$.length != $.data.$.length
4209	207	8	DerivativeStructure.java	DerivativeStructure	derivatives	double	0	DimensionMismatchException	$.length != data.length
17153	323	8	DerivativeStructure.java	multiply	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
17153	323	8	DerivativeStructure.java	multiply	i	int	0	NIL-FOR	$ < ds.data.length
17153	323	8	DerivativeStructure.java	multiply	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
17154	346	8	DerivativeStructure.java	divide	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
17154	346	8	DerivativeStructure.java	divide	i	int	0	NIL-FOR	$ < ds.data.length
17154	346	8	DerivativeStructure.java	divide	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
17155	387	8	DerivativeStructure.java	negate	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
17155	387	8	DerivativeStructure.java	negate	i	int	0	NIL-FOR	$ < ds.data.length
17155	387	8	DerivativeStructure.java	negate	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
4210	397	8	DerivativeStructure.java	abs	THIS	DerivativeStructure	1	RET	Double.doubleToLongBits($.data[0]) < 0
4211	452	8	DerivativeStructure.java	copySign	m	long	0	RET	$ < 0
4211	452	8	DerivativeStructure.java	copySign	m	long	0	RET	$ >= 0
4211	452	8	DerivativeStructure.java	copySign	s	long	0	RET	$ < 0
4211	452	8	DerivativeStructure.java	copySign	s	long	0	RET	$ >= 0
4212	464	8	DerivativeStructure.java	copySign	m	long	0	RET	$ >= 0
4212	464	8	DerivativeStructure.java	copySign	m	long	0	RET	$ < 0
4212	464	8	DerivativeStructure.java	copySign	s	long	0	RET	$ >= 0
4212	464	8	DerivativeStructure.java	copySign	s	long	0	RET	$ < 0
17156	487	8	DerivativeStructure.java	scalb	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
17156	487	8	DerivativeStructure.java	scalb	i	int	0	NIL-FOR	$ < ds.data.length
17156	487	8	DerivativeStructure.java	scalb	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
4213	503	8	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isInfinite(y.$.data[0])
4213	503	8	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isInfinite($.data[0])
4213	503	8	DerivativeStructure.java	hypot	y	DerivativeStructure	1	RET	Double.isInfinite($.data[0])
4214	507	15	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isNaN(y.$.data[0])
4214	507	15	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isNaN($.data[0])
4214	507	15	DerivativeStructure.java	hypot	y	DerivativeStructure	1	RET	Double.isNaN($.data[0])
4215	515	12	DerivativeStructure.java	hypot	expX	int	1	RET	$ > expY + 27
4215	515	12	DerivativeStructure.java	hypot	expY	int	1	RET	expX > $ + 27
4216	518	19	DerivativeStructure.java	hypot	expX	int	1	RET	expY > $ + 27
4216	518	19	DerivativeStructure.java	hypot	expY	int	1	RET	$ > expX + 27
4217	574	8	DerivativeStructure.java	compose	THIS	DerivativeStructure	0	DimensionMismatchException	f.$.length != $.getOrder() + 1
4217	574	8	DerivativeStructure.java	compose	f	double	0	DimensionMismatchException	$.length != getOrder() + 1
17157	847	8	DerivativeStructure.java	toDegrees	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
17157	847	8	DerivativeStructure.java	toDegrees	i	int	0	NIL-FOR	$ < ds.data.length
17157	847	8	DerivativeStructure.java	toDegrees	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
17158	858	8	DerivativeStructure.java	toRadians	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
17158	858	8	DerivativeStructure.java	toRadians	i	int	0	NIL-FOR	$ < ds.data.length
17158	858	8	DerivativeStructure.java	toRadians	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
17159	883	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < a.$.length
17159	883	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
17159	883	8	DerivativeStructure.java	linearCombination	a	DerivativeStructure[]	0	NIL-FOR	i < $.length
17160	887	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < b.$.length
17160	887	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < b.length
17160	887	8	DerivativeStructure.java	linearCombination	b	DerivativeStructure[]	0	NIL-FOR	i < $.length
17161	894	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < a.$.length
17161	894	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
17161	894	8	DerivativeStructure.java	linearCombination	a	DerivativeStructure[]	0	NIL-FOR	i < $.length
17162	915	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < b.$.length
17162	915	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < b.length
17162	915	8	DerivativeStructure.java	linearCombination	b	DerivativeStructure[]	0	NIL-FOR	i < $.length
17163	922	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < a.$.length
17163	922	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
17163	922	8	DerivativeStructure.java	linearCombination	a	double[]	0	NIL-FOR	i < $.length
4218	1096	8	DerivativeStructure.java	equals	THIS	DerivativeStructure	0	RET	$ == other
4218	1096	8	DerivativeStructure.java	equals	other	Object	0	RET	this == $
4219	1100	8	DerivativeStructure.java	equals	other	Object	0	RET	$ instanceof DerivativeStructure
2308	140	8	DescriptiveStatistics.java	DescriptiveStatistics	initialDoubleArray	double[]	0	DEF	$ != null
2309	165	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
2310	166	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
2311	168	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
2312	252	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
2313	253	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
2314	356	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ != INFINITE_WINDOW
2314	356	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ < 1
2315	366	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
2315	366	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
2315	366	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
2316	427	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
3609	219	8	Dfp.java	Dfp	x	long	0	DEF	$ == Long.MIN_VALUE
3610	227	8	Dfp.java	Dfp	x	long	1	DEF	$ < 0
16893	235	8	Dfp.java	Dfp	x	long	0	NIL-WHILE	$ != 0
3611	242	8	Dfp.java	Dfp	isLongMin	boolean	0	DEF	$
16894	245	12	Dfp.java	Dfp	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
16894	245	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < mant.length - 1
3612	246	16	Dfp.java	Dfp	THIS	Dfp	0	DEF	$.mant[i] != 0
3612	246	16	Dfp.java	Dfp	i	int	0	DEF	mant[$] != 0
3613	271	8	Dfp.java	Dfp	exponent	int	0	RET	$ == -1023
3614	273	12	Dfp.java	Dfp	x	double	0	RET	$ == 0
3615	275	16	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
16895	284	12	Dfp.java	Dfp	mantissa	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
3616	291	8	Dfp.java	Dfp	exponent	int	0	RET	$ == 1024
3617	293	12	Dfp.java	Dfp	x	double	1	DEF	$ != $
3618	296	19	Dfp.java	Dfp	x	double	1	DEF	$ < 0
3619	310	8	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
3620	351	8	Dfp.java	Dfp	s	String	0	RET	$.equals(POS_INFINITY_STRING)
3621	357	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NEG_INFINITY_STRING)
3622	363	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NAN_STRING)
3623	371	8	Dfp.java	Dfp	p	int	0	DEF	$ == -1
3624	377	8	Dfp.java	Dfp	p	int	1	DEF	$ != -1
16896	383	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$<fpexp.length()
16896	383	12	Dfp.java	Dfp	fpexp	String	0	NIL-FOR	i<$.length()
3625	385	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) == '-'
3625	385	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) == '-'
3626	390	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) <= '9'
3626	390	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) >= '0'
3626	390	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) <= '9'
3626	390	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) >= '0'
3627	395	12	Dfp.java	Dfp	negative	boolean	0	DEF	$
3628	404	8	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.indexOf("-") != -1
3629	414	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) <= '9'
3629	414	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) >= '1'
3629	414	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) <= '9'
3629	414	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) >= '1'
3630	418	12	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
3630	418	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '0'
3630	418	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '0'
3631	422	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
3631	422	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
3632	428	12	Dfp.java	Dfp	p	int	0	DEF	$ == fpdecimal.length()
3632	428	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == $.length()
3633	441	12	Dfp.java	Dfp	p	int	0	DEF	$ == (fpdecimal.length())
3633	441	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == ($.length())
3634	446	12	Dfp.java	Dfp	THIS	Dfp	0	DEF	q == $.mant.$.length*rsize+offset+1
3634	446	12	Dfp.java	Dfp	rsize	int	0	DEF	q == mant.length*$+offset+1
3634	446	12	Dfp.java	Dfp	offset	int	0	DEF	q == mant.length*rsize+$+1
3634	446	12	Dfp.java	Dfp	q	int	0	DEF	$ == mant.length*rsize+offset+1
3635	450	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
3635	450	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
3636	457	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) > '9'
3636	457	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) < '0'
3636	457	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) > '9'
3636	457	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) < '0'
3637	470	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
3637	470	8	Dfp.java	Dfp	offset	int	0	DEF	q != $
3637	470	8	Dfp.java	Dfp	q	int	0	DEF	$ != offset
3638	473	16	Dfp.java	Dfp	offset	int	0	DEF	q == $
3638	473	16	Dfp.java	Dfp	q	int	0	DEF	$ == offset
3639	476	16	Dfp.java	Dfp	striped	char[]	1	DEF	$[q] == '0'
3639	476	16	Dfp.java	Dfp	q	int	1	DEF	striped[$] == '0'
3640	485	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
3640	485	8	Dfp.java	Dfp	significantDigits	int	0	DEF	$ == 0
3641	490	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
16897	498	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	$ > q
16897	498	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	p > $
3642	499	12	Dfp.java	Dfp	striped	char[]	0	DEF	$[p] != '0'
3642	499	12	Dfp.java	Dfp	p	int	0	DEF	striped[$] != '0'
16898	511	8	Dfp.java	Dfp	THIS	Dfp	0	NIL-WHILE	(p - q) < ($.mant.$.length * rsize)
16898	511	8	Dfp.java	Dfp	rsize	int	0	NIL-WHILE	(p - q) < (mant.length * $)
16898	511	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	($ - q) < (mant.length * rsize)
16898	511	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	(p - $) < (mant.length * rsize)
16899	512	12	Dfp.java	Dfp	rsize	int	0	NIL-FOR	i < $
16899	512	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < rsize
16900	519	8	Dfp.java	Dfp	i	int	0	NIL-FOR	$ >= 0
3643	530	8	Dfp.java	Dfp	THIS	Dfp	0	DEF	q < striped.$.length
3643	530	8	Dfp.java	Dfp	striped	char[]	0	DEF	q < $.length
3643	530	8	Dfp.java	Dfp	q	int	0	DEF	$ < striped.length
3644	599	8	Dfp.java	newInstance	THIS	Dfp	0	RET	$.field.getRadixDigits() != d.$.field.getRadixDigits()
3644	599	8	Dfp.java	newInstance	d	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
16901	671	8	Dfp.java	shiftLeft	i	int	0	NIL-FOR	$ > 0
16902	683	8	Dfp.java	shiftRight	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
16902	683	8	Dfp.java	shiftRight	i	int	0	NIL-FOR	$ < mant.length - 1
3645	705	8	Dfp.java	align	adiff	int	0	DEF	$ < 0
3646	709	8	Dfp.java	align	diff	int	0	RET	$ == 0
3647	713	8	Dfp.java	align	THIS	Dfp	0	RET	adiff > ($.mant.$.length + 1)
3647	713	8	Dfp.java	align	adiff	int	0	RET	$ > (mant.length + 1)
16903	724	8	Dfp.java	align	i	int	0	NIL-FOR	$ < adiff
16903	724	8	Dfp.java	align	adiff	int	0	NIL-FOR	i < $
3648	725	12	Dfp.java	align	diff	int	1	DEF	$ < 0
3649	730	16	Dfp.java	align	lostdigit	int	0	DEF	$ != 0
3650	742	8	Dfp.java	align	inexact	boolean	0	DEF	$
3651	758	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3651	758	8	Dfp.java	lessThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3652	767	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.isNaN()
3652	767	8	Dfp.java	lessThan	x	Dfp	0	RET	$.isNaN()
3653	783	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3653	783	8	Dfp.java	greaterThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3654	792	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.isNaN()
3654	792	8	Dfp.java	greaterThan	x	Dfp	0	RET	$.isNaN()
3655	806	8	Dfp.java	negativeOrNull	THIS	Dfp	0	RET	$.isNaN()
3656	821	8	Dfp.java	strictlyNegative	THIS	Dfp	0	RET	$.isNaN()
3657	836	8	Dfp.java	positiveOrNull	THIS	Dfp	0	RET	$.isNaN()
3658	851	8	Dfp.java	strictlyPositive	THIS	Dfp	0	RET	$.isNaN()
3659	890	8	Dfp.java	isZero	THIS	Dfp	0	RET	$.isNaN()
3660	907	8	Dfp.java	equals	other	Object	0	RET	$ instanceof Dfp
3661	909	12	Dfp.java	equals	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3661	909	12	Dfp.java	equals	THIS	Dfp	0	RET	$.isNaN()
3661	909	12	Dfp.java	equals	x	Dfp	0	RET	$.isNaN()
3661	909	12	Dfp.java	equals	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3662	934	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3662	934	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.isNaN()
3662	934	8	Dfp.java	unequal	x	Dfp	0	RET	$.isNaN()
3662	934	8	Dfp.java	unequal	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3663	949	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
3663	949	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length - 1] == 0
3663	949	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[a.$.mant.$.length - 1] == 0
3663	949	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
3663	949	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
3663	949	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
3663	949	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
3663	949	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
3664	954	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.sign != b.$.sign
3664	954	8	Dfp.java	compare	a	Dfp	0	RET	$.sign != b.sign
3664	954	8	Dfp.java	compare	b	Dfp	0	RET	a.sign != $.sign
3665	955	12	Dfp.java	compare	THIS	Dfp	1	RET	a.$.sign == -1
3665	955	12	Dfp.java	compare	a	Dfp	1	RET	$.sign == -1
3666	963	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
3666	963	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
3666	963	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
3666	963	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
3667	967	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
3667	967	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
3667	967	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
3667	967	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
3668	971	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
3668	971	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
3668	971	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
3668	971	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
3669	976	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[b.$.mant.$.length-1] != 0
3669	976	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length-1] != 0
3669	976	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[b.mant.length-1] != 0
3669	976	8	Dfp.java	compare	b	Dfp	0	RET	a.mant[$.mant.length-1] != 0
3669	976	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length-1] != 0
3670	977	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp < b.$.exp
3670	977	12	Dfp.java	compare	a	Dfp	0	RET	$.exp < b.exp
3670	977	12	Dfp.java	compare	b	Dfp	0	RET	a.exp < $.exp
3671	981	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp > b.$.exp
3671	981	12	Dfp.java	compare	a	Dfp	0	RET	$.exp > b.exp
3671	981	12	Dfp.java	compare	b	Dfp	0	RET	a.exp > $.exp
16904	987	8	Dfp.java	compare	i	int	0	NIL-FOR	$ >= 0
3672	988	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] > b.$.mant[i]
3672	988	12	Dfp.java	compare	i	int	0	RET	a.mant[$] > b.mant[$]
3672	988	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] > b.mant[i]
3672	988	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] > $.mant[i]
3673	992	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] < b.$.mant[i]
3673	992	12	Dfp.java	compare	i	int	0	RET	a.mant[$] < b.mant[$]
3673	992	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] < b.mant[i]
3673	992	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] < $.mant[i]
3674	1039	8	Dfp.java	remainder	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3674	1039	8	Dfp.java	remainder	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3675	1054	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.isNaN()
3676	1058	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.nans == INFINITE
3677	1062	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3678	1069	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp < 0
3679	1080	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp >= $.mant.$.length
16905	1088	8	Dfp.java	trunc	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length-result.$.exp
16905	1088	8	Dfp.java	trunc	i	int	0	NIL-FOR	$ < mant.length-result.exp
16905	1088	8	Dfp.java	trunc	result	Dfp	0	NIL-FOR	i < mant.length-$.exp
3680	1093	8	Dfp.java	trunc	changed	boolean	0	RET	$
3681	1096	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == -1
3681	1096	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == -1
3682	1103	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == 1
3682	1103	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == 1
3683	1114	20	Dfp.java	trunc	half	Dfp	0	DEF	a.greaterThan($)
3683	1114	20	Dfp.java	trunc	a	Dfp	0	DEF	$.greaterThan(half)
3684	1121	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.exp > 0
3684	1121	20	Dfp.java	trunc	THIS	Dfp	0	DEF	(result.$.mant[$.mant.$.length-result.$.exp]&1) != 0
3684	1121	20	Dfp.java	trunc	half	Dfp	0	DEF	a.equals($)
3684	1121	20	Dfp.java	trunc	a	Dfp	0	DEF	$.equals(half)
3684	1121	20	Dfp.java	trunc	result	Dfp	0	DEF	$.exp > 0
3684	1121	20	Dfp.java	trunc	result	Dfp	0	DEF	($.mant[mant.length-$.exp]&1) != 0
3685	1147	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.greaterThan($.newInstance(2147483647))
3685	1147	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.greaterThan(newInstance(2147483647))
3686	1151	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.lessThan($.newInstance(-2147483648))
3686	1151	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.lessThan(newInstance(-2147483648))
16906	1155	8	Dfp.java	intValue	THIS	Dfp	0	NIL-FOR	i >= $.mant.$.length - rounded.$.exp
16906	1155	8	Dfp.java	intValue	i	int	0	NIL-FOR	$ >= mant.length - rounded.exp
16906	1155	8	Dfp.java	intValue	rounded	Dfp	0	NIL-FOR	i >= mant.length - $.exp
3687	1159	8	Dfp.java	intValue	THIS	Dfp	0	DEF	rounded.$.sign == -1
3687	1159	8	Dfp.java	intValue	rounded	Dfp	0	DEF	$.sign == -1
3688	1190	8	Dfp.java	intLog10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 1000
3689	1193	8	Dfp.java	intLog10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 100
3690	1196	8	Dfp.java	intLog10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 10
3691	1209	8	Dfp.java	power10	e	int	1	DEF	$ >= 0
16907	1240	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
16907	1240	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
16908	1246	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
16908	1246	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
3692	1262	8	Dfp.java	add	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3692	1262	8	Dfp.java	add	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3693	1270	8	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans != FINITE
3693	1270	8	Dfp.java	add	THIS	Dfp	0	RET	$.nans != FINITE
3693	1270	8	Dfp.java	add	x	Dfp	0	RET	$.nans != FINITE
3694	1271	12	Dfp.java	add	THIS	Dfp	0	RET	$.isNaN()
3695	1275	12	Dfp.java	add	x	Dfp	0	RET	$.isNaN()
3696	1279	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == FINITE
3696	1279	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
3696	1279	12	Dfp.java	add	x	Dfp	0	RET	$.nans == FINITE
3697	1283	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
3697	1283	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == FINITE
3697	1283	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
3698	1287	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
3698	1287	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
3698	1287	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign == x.$.sign
3698	1287	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
3698	1287	12	Dfp.java	add	x	Dfp	0	RET	sign == $.sign
3699	1291	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
3699	1291	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
3699	1291	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign != x.$.sign
3699	1291	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
3699	1291	12	Dfp.java	add	x	Dfp	0	RET	sign != $.sign
3700	1316	8	Dfp.java	add	THIS	Dfp	0	DEF	$.compare(a, b) > 0
3700	1316	8	Dfp.java	add	a	Dfp	0	DEF	compare($, b) > 0
3700	1316	8	Dfp.java	add	b	Dfp	0	DEF	compare(a, $) > 0
3701	1323	8	Dfp.java	add	THIS	Dfp	0	DEF	b.$.mant[$.mant.$.length-1] == 0
3701	1323	8	Dfp.java	add	b	Dfp	0	DEF	$.mant[mant.length-1] == 0
3702	1327	8	Dfp.java	add	THIS	Dfp	0	DEF	a.$.mant[$.mant.$.length-1] == 0
3702	1327	8	Dfp.java	add	a	Dfp	0	DEF	$.mant[mant.length-1] == 0
3703	1334	8	Dfp.java	add	THIS	Dfp	1	DEF	a.$.exp < b.$.exp
3703	1334	8	Dfp.java	add	a	Dfp	1	DEF	$.exp < b.exp
3703	1334	8	Dfp.java	add	b	Dfp	1	DEF	a.exp < $.exp
3704	1341	8	Dfp.java	add	asign	byte	0	DEF	$ != bsign
3704	1341	8	Dfp.java	add	bsign	byte	0	DEF	asign != $
3705	1342	12	Dfp.java	add	asign	byte	1	DEF	$ == rsign
3705	1342	12	Dfp.java	add	rsign	byte	1	DEF	asign == $
16909	1351	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
16909	1351	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
3706	1362	8	Dfp.java	add	asign	byte	0	DEF	$ == bsign
3706	1362	8	Dfp.java	add	bsign	byte	0	DEF	asign == $
3706	1362	8	Dfp.java	add	rh	int	0	DEF	$ != 0
3707	1367	12	Dfp.java	add	excp	int	0	DEF	$ != 0
16910	1373	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
16910	1373	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
3708	1374	12	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] != 0
3708	1374	12	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] != 0
3709	1378	12	Dfp.java	add	i	int	0	DEF	$ == 0
3710	1386	8	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3710	1386	8	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3711	1389	12	Dfp.java	add	asign	byte	0	DEF	$ != bsign
3711	1389	12	Dfp.java	add	bsign	byte	0	DEF	asign != $
3712	1397	8	Dfp.java	add	excp	int	0	DEF	$ != 0
3713	1462	8	Dfp.java	round	inc	boolean	0	DEF	$
16911	1465	12	Dfp.java	round	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
16911	1465	12	Dfp.java	round	i	int	0	NIL-FOR	$ < mant.length
3714	1471	12	Dfp.java	round	rh	int	0	DEF	$ != 0
3715	1478	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp < MIN_EXP
3716	1484	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp > MAX_EXP
3717	1490	8	Dfp.java	round	n	int	0	RET	$ != 0
3718	1507	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3718	1507	8	Dfp.java	multiply	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3719	1517	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
3719	1517	8	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans != FINITE
3719	1517	8	Dfp.java	multiply	x	Dfp	0	RET	$.nans != FINITE
3720	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
3721	1522	12	Dfp.java	multiply	x	Dfp	0	RET	$.isNaN()
3722	1526	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
3722	1526	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
3722	1526	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] != 0
3722	1526	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
3722	1526	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] != 0
3723	1532	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] != 0
3723	1532	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
3723	1532	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
3723	1532	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
3724	1538	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
3724	1538	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
3724	1538	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
3725	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
3725	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
3725	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] == 0
3725	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
3725	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
3725	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3725	1544	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
3725	1544	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] == 0
3725	1544	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
16912	1556	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
16912	1556	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
16913	1558	12	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	j<$.mant.$.length
16913	1558	12	Dfp.java	multiply	j	int	0	NIL-FOR	$<mant.length
16914	1570	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ >= 0
3726	1571	12	Dfp.java	multiply	i	int	0	DEF	product[$] != 0
3726	1571	12	Dfp.java	multiply	product	int[]	0	DEF	$[i] != 0
16915	1578	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
16915	1578	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
3727	1586	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3727	1586	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3728	1592	8	Dfp.java	multiply	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
3728	1592	8	Dfp.java	multiply	md	int	1	DEF	$ > (mant.length-1)
3729	1598	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
3730	1611	8	Dfp.java	multiply	x	int	1	RET	$ >= 0
3730	1611	8	Dfp.java	multiply	x	int	1	RET	$ < RADIX
3731	1627	8	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans != FINITE
3732	1628	12	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.isNaN()
3733	1632	12	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans == INFINITE
3733	1632	12	Dfp.java	multiplyFast	x	int	0	RET	$ != 0
3734	1637	12	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans == INFINITE
3734	1637	12	Dfp.java	multiplyFast	x	int	0	RET	$ == 0
3735	1647	8	Dfp.java	multiplyFast	x	int	0	RET	$ >= RADIX
3735	1647	8	Dfp.java	multiplyFast	x	int	0	RET	$ < 0
16916	1656	8	Dfp.java	multiplyFast	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
16916	1656	8	Dfp.java	multiplyFast	i	int	0	NIL-FOR	$ < mant.length
3736	1663	8	Dfp.java	multiplyFast	rh	int	0	DEF	$ != 0
3737	1669	8	Dfp.java	multiplyFast	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3737	1669	8	Dfp.java	multiplyFast	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3738	1674	8	Dfp.java	multiplyFast	excp	int	0	DEF	$ != 0
3739	1698	8	Dfp.java	divide	THIS	Dfp	0	RET	$.field.getRadixDigits() != divisor.$.field.getRadixDigits()
3739	1698	8	Dfp.java	divide	divisor	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3740	1708	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans != FINITE
3740	1708	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
3740	1708	8	Dfp.java	divide	divisor	Dfp	0	RET	$.nans != FINITE
3741	1709	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
3742	1713	12	Dfp.java	divide	divisor	Dfp	0	RET	$.isNaN()
3743	1717	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == FINITE
3743	1717	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3743	1717	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == FINITE
3744	1723	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == FINITE
3744	1723	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
3744	1723	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
3745	1729	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
3745	1729	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3745	1729	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
3746	1739	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.mant[$.mant.$.length-1] == 0
3746	1739	8	Dfp.java	divide	divisor	Dfp	0	RET	$.mant[mant.length-1] == 0
16917	1762	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
16917	1762	8	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
16918	1770	8	Dfp.java	divide	qd	int	0	NIL-FOR	$ >= 0
16919	1779	12	Dfp.java	divide	trialgood	boolean	0	NIL-WHILE	$
16920	1785	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
16920	1785	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
16921	1794	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
16921	1794	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
3747	1801	16	Dfp.java	divide	rh	int	0	DEF	$ == 0
3748	1811	16	Dfp.java	divide	minadj	int	0	DEF	$ >= 2
16922	1819	16	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3749	1820	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] > remainder[i]
3749	1820	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] > remainder[$]
3749	1820	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] > $[i]
3749	1820	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] > remainder[i]
3750	1823	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] < remainder[i]
3750	1823	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] < remainder[$]
3750	1823	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] < $[i]
3750	1823	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] < remainder[i]
3751	1828	16	Dfp.java	divide	THIS	Dfp	0	DEF	remainder[$.mant.$.length] != 0
3751	1828	16	Dfp.java	divide	remainder	int[]	0	DEF	$[mant.length] != 0
3752	1832	16	Dfp.java	divide	trialgood	boolean	0	DEF	$ == false
3753	1839	12	Dfp.java	divide	nsqd	int	0	DEF	$ != 0
3753	1839	12	Dfp.java	divide	trial	int	0	DEF	$ != 0
3754	1843	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd == $.mant.$.length
3754	1843	12	Dfp.java	divide	THIS	Dfp	0	DEF	$.field.getRoundingMode() == DfpField.$.RoundingMode.ROUND_DOWN
3754	1843	12	Dfp.java	divide	nsqd	int	0	DEF	$ == mant.length
3755	1848	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd > $.mant.$.length
3755	1848	12	Dfp.java	divide	nsqd	int	0	DEF	$ > mant.length
16923	1855	12	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
16923	1855	12	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
16924	1862	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3756	1863	12	Dfp.java	divide	i	int	0	DEF	quotient[$] != 0
3756	1863	12	Dfp.java	divide	quotient	int[]	0	DEF	$[i] != 0
16925	1870	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i<$.mant.$.length
16925	1870	8	Dfp.java	divide	i	int	0	NIL-FOR	$<mant.length
3757	1878	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3757	1878	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3758	1882	8	Dfp.java	divide	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
3758	1882	8	Dfp.java	divide	md	int	1	DEF	$ > (mant.length-1)
3759	1888	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
3760	1903	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
3761	1904	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
3762	1908	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3763	1914	8	Dfp.java	divide	divisor	int	0	RET	$ == 0
3764	1924	8	Dfp.java	divide	divisor	int	0	RET	$ < 0
3764	1924	8	Dfp.java	divide	divisor	int	0	RET	$ >= RADIX
16926	1935	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3765	1942	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3765	1942	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3766	1952	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
3767	1972	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == FINITE
3767	1972	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3768	1977	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans != FINITE
3769	1978	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == INFINITE
3769	1978	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == 1
3770	1983	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == QNAN
3771	1987	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == SNAN
3772	1997	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == -1
3773	2011	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp < -1
3773	2011	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp > 1
3773	2011	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp < -1
3773	2011	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp > 1
16927	2037	8	Dfp.java	sqrt	x	Dfp	0	NIL-WHILE	$.unequal(px)
16927	2037	8	Dfp.java	sqrt	px	Dfp	0	NIL-WHILE	x.unequal($)
3774	2046	12	Dfp.java	sqrt	x	Dfp	0	DEF	$.equals(ppx)
3774	2046	12	Dfp.java	sqrt	ppx	Dfp	0	DEF	x.equals($)
3775	2053	12	Dfp.java	sqrt	THIS	Dfp	0	DEF	dx.$.mant[$.mant.$.length-1] == 0
3775	2053	12	Dfp.java	sqrt	dx	Dfp	0	DEF	$.mant[mant.length-1] == 0
3776	2067	8	Dfp.java	toString	THIS	Dfp	0	RET	$.nans != FINITE
3777	2069	12	Dfp.java	toString	THIS	Dfp	1	RET	$.nans == INFINITE
3778	2076	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp > $.mant.$.length
3778	2076	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp < -1
16928	2098	8	Dfp.java	dfp2sci	i	int	0	NIL-FOR	$ >= 0
16929	2106	8	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-FOR	p < rawdigits.$.length
16929	2106	8	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-FOR	p < $.length
16929	2106	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ < rawdigits.length
3779	2107	12	Dfp.java	dfp2sci	rawdigits	char[]	0	DEF	$[p] != '0'
3779	2107	12	Dfp.java	dfp2sci	p	int	0	DEF	rawdigits[$] != '0'
3780	2115	8	Dfp.java	dfp2sci	THIS	Dfp	0	DEF	$.sign == -1
3781	2119	8	Dfp.java	dfp2sci	THIS	Dfp	1	DEF	p != rawdigits.$.length
3781	2119	8	Dfp.java	dfp2sci	rawdigits	char[]	1	DEF	p != $.length
3781	2119	8	Dfp.java	dfp2sci	p	int	1	DEF	$ != rawdigits.length
16930	2124	12	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-WHILE	p<rawdigits.$.length
16930	2124	12	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-WHILE	p<$.length
16930	2124	12	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$<rawdigits.length
3782	2142	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
16931	2147	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ > ae
16931	2147	8	Dfp.java	dfp2sci	ae	int	0	NIL-FOR	p > $
3783	2151	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
16932	2155	8	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$ > 0
3784	2177	8	Dfp.java	dfp2string	e	int	0	DEF	$ <= 0
16933	2183	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ < 0
16934	2191	8	Dfp.java	dfp2string	i	int	0	NIL-FOR	$ >= 0
3785	2196	12	Dfp.java	dfp2string	e	int	0	DEF	--$ == 0
16935	2202	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ > 0
3786	2210	8	Dfp.java	dfp2string	pointInserted	boolean	0	DEF	$
16936	2217	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[q] == '0'
16936	2217	8	Dfp.java	dfp2string	q	int	0	NIL-WHILE	buffer[$] == '0'
3787	2220	8	Dfp.java	dfp2string	buffer	char[]	0	DEF	$[q] == '.'
3787	2220	8	Dfp.java	dfp2string	q	int	0	DEF	buffer[$] == '.'
16937	2225	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[p-1] == '0'
16937	2225	8	Dfp.java	dfp2string	p	int	0	NIL-WHILE	buffer[$-1] == '0'
3788	2230	8	Dfp.java	dfp2string	THIS	Dfp	0	DEF	$.sign < 0
3789	2256	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
3789	2256	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] != 0
3790	2263	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
3790	2263	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] == 0
3791	2269	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == QNAN
3791	2269	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
3792	2274	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == SNAN
3792	2274	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
3793	2281	16	Dfp.java	dotrap	THIS	Dfp	1	DEF	(result.$.exp+$.mant.$.length) < MIN_EXP
3793	2281	16	Dfp.java	dotrap	result	Dfp	1	DEF	($.exp+mant.length) < MIN_EXP
3794	2346	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3794	2346	8	Dfp.java	nextAfter	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3795	2355	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan(x)
3795	2355	8	Dfp.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
3796	2359	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.compare(this, x) == 0
3796	2359	8	Dfp.java	nextAfter	x	Dfp	0	RET	compare(this, $) == 0
3797	2363	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan($.getZero())
3798	2369	8	Dfp.java	nextAfter	up	boolean	1	DEF	$
3799	2374	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
3800	2384	12	Dfp.java	nextAfter	THIS	Dfp	1	DEF	$.equals(inc)
3800	2384	12	Dfp.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
3801	2390	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
3802	2397	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.classify() != INFINITE
3802	2397	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
3803	2402	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	result.equals($.getZero())
3803	2402	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero()) == false
3803	2402	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
3804	2417	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isInfinite()
3805	2418	12	Dfp.java	toDouble	THIS	Dfp	1	RET	$.lessThan($.getZero())
3806	2425	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isNaN()
3807	2432	8	Dfp.java	toDouble	cmp0	int	1	RET	$ == 0
3808	2434	15	Dfp.java	toDouble	cmp0	int	0	DEF	$ < 0
3809	2442	8	Dfp.java	toDouble	exponent	int	0	DEF	$ < 0
16938	2447	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.equals($)
16938	2447	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.lessThan($)
16938	2447	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.equals(y)
16938	2447	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.lessThan(y)
3810	2456	8	Dfp.java	toDouble	exponent	int	0	DEF	$ > -1023
3811	2460	8	Dfp.java	toDouble	exponent	int	0	RET	$ < -1074
3812	2464	8	Dfp.java	toDouble	exponent	int	0	RET	$ > 1023
3813	2474	8	Dfp.java	toDouble	mantissa	long	0	DEF	$ == 4503599627370496L
3814	2481	8	Dfp.java	toDouble	exponent	int	0	DEF	$ <= -1023
16939	2485	8	Dfp.java	toDouble	exponent	int	0	NIL-WHILE	$ < -1023
3815	2493	8	Dfp.java	toDouble	negate	boolean	0	DEF	$
3816	2568	8	Dfp.java	signum	THIS	Dfp	1	RET	$.isNaN()
3816	2568	8	Dfp.java	signum	THIS	Dfp	1	RET	$.isZero()
3817	2579	8	Dfp.java	copySign	THIS	Dfp	0	RET	s.$.sign < 0
3817	2579	8	Dfp.java	copySign	THIS	Dfp	0	RET	s.$.sign >= 0
3817	2579	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign >= 0
3817	2579	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign < 0
3817	2579	8	Dfp.java	copySign	s	Dfp	0	RET	$.sign < 0
3817	2579	8	Dfp.java	copySign	s	Dfp	0	RET	$.sign >= 0
3818	2590	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign >= 0
3818	2590	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign < 0
3818	2590	8	Dfp.java	copySign	sb	long	0	RET	$ >= 0
3818	2590	8	Dfp.java	copySign	sb	long	0	RET	$ < 0
3819	2745	8	Dfp.java	atan2	THIS	Dfp	1	RET	x.$.sign >= 0
3819	2745	8	Dfp.java	atan2	x	Dfp	1	RET	$.sign >= 0
3820	2810	8	Dfp.java	linearCombination	THIS	Dfp	0	DimensionMismatchException	a.$.length != b.$.length
3820	2810	8	Dfp.java	linearCombination	a	Dfp[]	0	DimensionMismatchException	$.length != b.length
3820	2810	8	Dfp.java	linearCombination	b	Dfp[]	0	DimensionMismatchException	a.length != $.length
16940	2814	8	Dfp.java	linearCombination	THIS	Dfp	0	NIL-FOR	i < a.$.length
16940	2814	8	Dfp.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
16940	2814	8	Dfp.java	linearCombination	a	Dfp[]	0	NIL-FOR	i < $.length
3821	2825	8	Dfp.java	linearCombination	THIS	Dfp	0	DimensionMismatchException	a.$.length != b.$.length
3821	2825	8	Dfp.java	linearCombination	a	double[]	0	DimensionMismatchException	$.length != b.length
3821	2825	8	Dfp.java	linearCombination	b	Dfp[]	0	DimensionMismatchException	a.length != $.length
16941	2829	8	Dfp.java	linearCombination	THIS	Dfp	0	NIL-FOR	i < a.$.length
16941	2829	8	Dfp.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
16941	2829	8	Dfp.java	linearCombination	a	double[]	0	NIL-FOR	i < $.length
3588	131	8	DfpDec.java	newInstance	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != d.getField().getRadixDigits()
3588	131	8	DfpDec.java	newInstance	d	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
3589	168	8	DfpDec.java	round	msb	int	0	RET	$ == 0
16889	175	8	DfpDec.java	round	msb	int	0	NIL-WHILE	lsbthreshold > $
16889	175	8	DfpDec.java	round	lsbthreshold	int	0	NIL-WHILE	$ > msb
16890	186	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsbshift % 4
16890	186	8	DfpDec.java	round	lsbshift	int	0	NIL-FOR	i < $ % 4
3590	192	8	DfpDec.java	round	THIS	DfpDec	0	RET	digits == 4 * $.mant.$.length - 3
3590	192	8	DfpDec.java	round	lsbthreshold	int	0	RET	$ <= 1
3590	192	8	DfpDec.java	round	digits	int	0	RET	$ == 4 * mant.length - 3
3591	198	8	DfpDec.java	round	lsbthreshold	int	1	DEF	$ == 1
16891	208	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsd
16891	208	8	DfpDec.java	round	lsd	int	0	NIL-FOR	i < $
3592	255	8	DfpDec.java	round	inc	boolean	0	DEF	$
16892	258	12	DfpDec.java	round	THIS	DfpDec	0	NIL-FOR	i < $.mant.$.length
16892	258	12	DfpDec.java	round	i	int	0	NIL-FOR	$ < mant.length
3593	264	12	DfpDec.java	round	rh	int	0	DEF	$ != 0
3594	271	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp < MIN_EXP
3595	277	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp > MAX_EXP
3596	283	8	DfpDec.java	round	discarded	int	0	RET	$ != 0
3596	283	8	DfpDec.java	round	n	int	0	RET	$ != 0
3597	298	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != x.getField().getRadixDigits()
3597	298	8	DfpDec.java	nextAfter	x	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
3598	310	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan(x)
3598	310	8	DfpDec.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
3599	314	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.equals(x)
3599	314	8	DfpDec.java	nextAfter	x	Dfp	0	RET	equals($)
3600	318	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan($.getZero())
3601	322	8	DfpDec.java	nextAfter	up	boolean	1	DEF	$
3602	326	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
3603	330	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
3603	330	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
3604	339	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	$.equals(inc)
3604	339	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
3605	345	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
3606	349	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
3606	349	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
3607	356	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.classify() != INFINITE
3607	356	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
3608	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero()) == false
3608	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	result.equals($.getZero())
3608	361	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
3822	200	8	DfpField.java	DfpField	computeConstants	boolean	1	DEF	$
16942	537	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
16942	537	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
16942	537	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
3823	540	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '1'
3823	540	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3823	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '1'
3823	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
3824	544	8	DfpField.java	split	i	int	0	DEF	buf[$] == '.'
3824	544	8	DfpField.java	split	buf	char[]	0	DEF	$[i] == '.'
3825	549	8	DfpField.java	split	THIS	DfpField	0	DEF	sig == ($.radixDigits / 2) * 4
3825	549	8	DfpField.java	split	sig	int	0	DEF	$ == (radixDigits / 2) * 4
3826	554	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
3826	554	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3826	554	8	DfpField.java	split	leading	boolean	0	DEF	$
3826	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
3826	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
16943	561	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
16943	561	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
16943	561	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
3827	563	8	DfpField.java	split	i	int	0	DEF	$ < sp
3827	563	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
3827	563	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3827	563	8	DfpField.java	split	sp	int	0	DEF	i < $
3827	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
3827	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
3828	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String.length() < highPrecisionDecimalDigits - 3
3828	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String == null
3828	578	8	DfpField.java	computeStringConstants	highPrecisionDecimalDigits	int	0	DEF	sqr2String.length() < $ - 3
16944	623	8	DfpField.java	computePi	i	int	0	NIL-FOR	$ < 20
3829	637	12	DfpField.java	computePi	ykM1	Dfp	0	DEF	yk.equals($)
3829	637	12	DfpField.java	computePi	yk	Dfp	0	DEF	$.equals(ykM1)
16945	659	8	DfpField.java	computeExp	i	int	0	NIL-FOR	$ < 10000
3830	664	12	DfpField.java	computeExp	y	Dfp	0	DEF	$.equals(py)
3830	664	12	DfpField.java	computeExp	py	Dfp	0	DEF	y.equals($)
16946	742	8	DfpField.java	computeLn	i	int	0	NIL-FOR	$ < 10000
3831	748	12	DfpField.java	computeLn	y	Dfp	0	DEF	$.equals(py)
3831	748	12	DfpField.java	computeLn	py	Dfp	0	DEF	y.equals($)
16951	54	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
16951	54	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
16951	54	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
3849	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3849	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '1'
3849	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3849	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '1'
3850	61	12	DfpMath.java	split	i	int	0	DEF	buf[$] == '.'
3850	61	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] == '.'
3851	66	12	DfpMath.java	split	sig	int	0	DEF	$ == (field.getRadixDigits() / 2) * 4
3851	66	12	DfpMath.java	split	field	DfpField	0	DEF	sig == ($.getRadixDigits() / 2) * 4
3852	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3852	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
3852	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3852	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
3852	71	12	DfpMath.java	split	leading	boolean	0	DEF	$
16952	78	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
16952	78	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
16952	78	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
3853	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3853	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
3853	80	12	DfpMath.java	split	i	int	0	DEF	$ < sp
3853	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3853	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
3853	80	12	DfpMath.java	split	sp	int	0	DEF	i < $
3854	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].classify() == Dfp.INFINITE
3854	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].equals($[1])
3855	162	8	DfpMath.java	splitPow	a	int	0	RET	$ == 0
3856	167	8	DfpMath.java	splitPow	a	int	0	DEF	$ < 0
16953	174	8	DfpMath.java	splitPow	a	int	0	NIL-DOWHILE	$ >= 1
3857	183	16	DfpMath.java	splitPow	trial	int	0	DEF	$ > a
3857	183	16	DfpMath.java	splitPow	a	int	0	DEF	trial > $
3858	198	8	DfpMath.java	splitPow	invert	boolean	0	DEF	$
3859	217	8	DfpMath.java	pow	a	int	0	RET	$ == 0
3860	222	8	DfpMath.java	pow	a	int	0	DEF	$ < 0
16954	228	8	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$ >= 1
16955	234	12	DfpMath.java	pow	trial	int	0	NIL-DOWHILE	a>$
16955	234	12	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$>trial
3861	249	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3862	270	8	DfpMath.java	exp	ia	int	0	RET	$ > 2147483646
3863	275	8	DfpMath.java	exp	ia	int	0	RET	$ < -2147483646
16956	297	8	DfpMath.java	expInternal	i	int	0	NIL-FOR	$ < 90
3864	301	12	DfpMath.java	expInternal	y	Dfp	0	DEF	$.equals(py)
3864	301	12	DfpMath.java	expInternal	py	Dfp	0	DEF	y.equals($)
3865	324	8	DfpMath.java	log	a	Dfp	0	RET	$.equals($.getZero())
3865	324	8	DfpMath.java	log	a	Dfp	0	RET	$.isNaN()
3865	324	8	DfpMath.java	log	a	Dfp	0	RET	$.lessThan($.getZero())
3866	330	8	DfpMath.java	log	a	Dfp	0	RET	$.classify() == Dfp.INFINITE
16957	340	8	DfpMath.java	log	ix	int	0	NIL-WHILE	$ > 2
16958	353	8	DfpMath.java	log	spx	Dfp[]	0	NIL-WHILE	$[0].add($[1]).greaterThan(spy[0])
16958	353	8	DfpMath.java	log	spy	Dfp[]	0	NIL-WHILE	spx[0].add(spx[1]).greaterThan($[0])
16959	447	8	DfpMath.java	logInternal	i	int	0	NIL-FOR	$ < 10000
3867	453	12	DfpMath.java	logInternal	y	Dfp	0	DEF	$.equals(py)
3867	453	12	DfpMath.java	logInternal	py	Dfp	0	DEF	y.equals($)
3868	508	8	DfpMath.java	pow	x	Dfp	0	RET	$.getField().getRadixDigits() != y.getField().getRadixDigits()
3868	508	8	DfpMath.java	pow	y	Dfp	0	RET	x.getField().getRadixDigits() != $.getField().getRadixDigits()
3869	522	8	DfpMath.java	pow	zero	Dfp	0	RET	y.equals($)
3869	522	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(zero)
3870	526	8	DfpMath.java	pow	one	Dfp	0	RET	y.equals($)
3870	526	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(one)
3871	527	12	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
3872	535	8	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
3872	535	8	DfpMath.java	pow	y	Dfp	0	RET	$.isNaN()
3873	542	8	DfpMath.java	pow	zero	Dfp	0	RET	x.equals($)
3873	542	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(zero)
3874	543	12	DfpMath.java	pow	zero	Dfp	1	RET	Dfp.copysign(one, x).greaterThan($)
3874	543	12	DfpMath.java	pow	one	Dfp	1	RET	Dfp.copysign($, x).greaterThan(zero)
3874	543	12	DfpMath.java	pow	x	Dfp	1	RET	Dfp.copysign(one, $).greaterThan(zero)
3875	545	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3875	545	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3876	552	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3876	552	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3876	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3876	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3876	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3877	554	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3877	554	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3878	561	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3878	561	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3879	570	8	DfpMath.java	pow	zero	Dfp	0	DEF	x.lessThan($)
3879	570	8	DfpMath.java	pow	x	Dfp	0	DEF	$.lessThan(zero)
3880	576	8	DfpMath.java	pow	one	Dfp	0	RET	x.greaterThan($)
3880	576	8	DfpMath.java	pow	x	Dfp	0	RET	$.greaterThan(one)
3880	576	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3881	577	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3881	577	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3882	584	8	DfpMath.java	pow	one	Dfp	0	RET	x.lessThan($)
3882	584	8	DfpMath.java	pow	x	Dfp	0	RET	$.lessThan(one)
3882	584	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3883	585	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3883	585	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3884	592	8	DfpMath.java	pow	one	Dfp	0	RET	x.equals($)
3884	592	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(one)
3884	592	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3885	597	8	DfpMath.java	pow	x	Dfp	0	RET	$.classify() == Dfp.INFINITE
3886	599	12	DfpMath.java	pow	invert	boolean	1	RET	$
3887	601	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3887	601	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3887	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3887	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3887	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3888	603	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3888	603	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3889	610	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3889	610	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3890	618	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3890	618	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3891	626	8	DfpMath.java	pow	invert	boolean	0	RET	$
3891	626	8	DfpMath.java	pow	y	Dfp	0	RET	$.rint().equals($)
3892	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.lessThan($.newInstance(100000000))
3892	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.greaterThan($.newInstance(-100000000))
3892	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.lessThan(x.newInstance(100000000))
3892	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.greaterThan(x.newInstance(-100000000))
3893	640	12	DfpMath.java	pow	v	Dfp	1	DEF	$.unequal(zero)
3893	640	12	DfpMath.java	pow	zero	Dfp	1	DEF	v.unequal($)
3894	656	8	DfpMath.java	pow	zero	Dfp	0	DEF	y.remainder(two).equals($)
3894	656	8	DfpMath.java	pow	two	Dfp	0	DEF	y.remainder($).equals(zero)
3894	656	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3894	656	8	DfpMath.java	pow	y	Dfp	0	DEF	$.remainder(two).equals(zero)
3894	656	8	DfpMath.java	pow	y	Dfp	0	DEF	$.rint().equals($)
16960	679	8	DfpMath.java	sinInternal	i	int	0	NIL-FOR	$ < 90
3895	685	12	DfpMath.java	sinInternal	y	Dfp	0	DEF	$.equals(py)
3895	685	12	DfpMath.java	sinInternal	py	Dfp	0	DEF	y.equals($)
16961	712	8	DfpMath.java	cosInternal	i	int	0	NIL-FOR	$ < 90
3896	719	12	DfpMath.java	cosInternal	y	Dfp	0	DEF	$.equals(py)
3896	719	12	DfpMath.java	cosInternal	py	Dfp	0	DEF	y.equals($)
3897	743	8	DfpMath.java	sin	zero	Dfp	0	DEF	x.lessThan($)
3897	743	8	DfpMath.java	sin	x	Dfp	0	DEF	$.lessThan(zero)
3898	752	8	DfpMath.java	sin	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3898	752	8	DfpMath.java	sin	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3899	757	8	DfpMath.java	sin	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3899	757	8	DfpMath.java	sin	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3900	772	8	DfpMath.java	sin	neg	boolean	0	DEF	$
3901	794	8	DfpMath.java	cos	zero	Dfp	0	DEF	x.lessThan($)
3901	794	8	DfpMath.java	cos	x	Dfp	0	DEF	$.lessThan(zero)
3902	802	8	DfpMath.java	cos	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3902	802	8	DfpMath.java	cos	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3903	808	8	DfpMath.java	cos	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3903	808	8	DfpMath.java	cos	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3904	822	8	DfpMath.java	cos	neg	boolean	0	DEF	$
16962	848	8	DfpMath.java	atanInternal	i	int	0	NIL-FOR	$ < 90
3905	853	12	DfpMath.java	atanInternal	y	Dfp	0	DEF	$.equals(py)
3905	853	12	DfpMath.java	atanInternal	py	Dfp	0	DEF	y.equals($)
3906	888	8	DfpMath.java	atan	zero	Dfp	0	DEF	x.lessThan($)
3906	888	8	DfpMath.java	atan	x	Dfp	0	DEF	$.lessThan(zero)
3907	893	8	DfpMath.java	atan	one	Dfp	0	DEF	x.greaterThan($)
3907	893	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(one)
3908	898	8	DfpMath.java	atan	ty	Dfp	0	DEF	x.greaterThan($)
3908	898	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(ty)
3909	921	8	DfpMath.java	atan	sub	boolean	0	DEF	$
3910	925	8	DfpMath.java	atan	recp	boolean	0	DEF	$
3911	929	8	DfpMath.java	atan	neg	boolean	0	DEF	$
3912	953	8	DfpMath.java	acos	a	Dfp	0	DEF	$.lessThan($.getZero())
3913	961	8	DfpMath.java	acos	negative	boolean	0	DEF	$
1392	97	8	DiagonalMatrix.java	createMatrix	rowDimension	int	0	DimensionMismatchException	$ != columnDimension
1392	97	8	DiagonalMatrix.java	createMatrix	columnDimension	int	0	DimensionMismatchException	rowDimension != $
15160	125	8	DiagonalMatrix.java	add	i	int	0	NIL-FOR	$ < dim
15160	125	8	DiagonalMatrix.java	add	dim	int	0	NIL-FOR	i < $
15161	146	8	DiagonalMatrix.java	subtract	i	int	0	NIL-FOR	$ < dim
15161	146	8	DiagonalMatrix.java	subtract	dim	int	0	NIL-FOR	i < $
15162	167	8	DiagonalMatrix.java	multiply	i	int	0	NIL-FOR	$ < dim
15162	167	8	DiagonalMatrix.java	multiply	dim	int	0	NIL-FOR	i < $
1393	184	8	DiagonalMatrix.java	multiply	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
15163	191	12	DiagonalMatrix.java	multiply	r	int	0	NIL-FOR	$ < nRows
15163	191	12	DiagonalMatrix.java	multiply	nRows	int	0	NIL-FOR	r < $
15164	192	16	DiagonalMatrix.java	multiply	c	int	0	NIL-FOR	$ < nCols
15164	192	16	DiagonalMatrix.java	multiply	nCols	int	0	NIL-FOR	c < $
15165	206	8	DiagonalMatrix.java	getData	i	int	0	NIL-FOR	$ < dim
15165	206	8	DiagonalMatrix.java	getData	dim	int	0	NIL-FOR	i < $
1394	236	8	DiagonalMatrix.java	setEntry	row	int	1	DEF	$ == column
1394	236	8	DiagonalMatrix.java	setEntry	column	int	1	DEF	row == $
1395	252	8	DiagonalMatrix.java	addToEntry	row	int	1	DEF	$ == column
1395	252	8	DiagonalMatrix.java	addToEntry	column	int	1	DEF	row == $
1396	267	8	DiagonalMatrix.java	multiplyEntry	row	int	0	DEF	$ == column
1396	267	8	DiagonalMatrix.java	multiplyEntry	column	int	0	DEF	row == $
1397	304	8	DiagonalMatrix.java	ensureZero	value	double	0	NumberIsTooLargeException	Precision.equals(0.0, $, 1)
17004	110	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
17004	110	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
17005	111	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
17005	111	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
17005	111	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
16800	144	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < $.mainSetDimension
16800	144	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
3414	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
3414	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
3415	172	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
3416	174	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
16766	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16766	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3417	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	1	DEF	$.previousState != null
3417	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
16767	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16767	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
16768	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16768	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
16799	258	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < $.mainSetDimension
16799	258	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
3468	279	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
3488	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
3488	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
16820	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
16820	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
16821	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
16821	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
16822	294	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
16822	294	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
16823	299	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
16823	299	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
3489	320	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
3490	322	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
16824	324	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
16825	333	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16825	333	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
16826	351	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < D.$.length
16826	351	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < D.length
3491	373	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	1	DEF	$.previousState != null
3491	373	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
16827	374	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16827	374	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
16828	388	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16828	388	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3492	409	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
16829	419	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
16829	419	6	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
16830	428	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
16830	428	6	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
16831	438	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
16831	438	6	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
16832	465	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
16832	465	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
16833	488	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
16833	488	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
16688	56	8	DoublePoint.java	DoublePoint	THIS	DoublePoint	0	NIL-FOR	i < point.$.length
16688	56	8	DoublePoint.java	DoublePoint	i	int	0	NIL-FOR	$ < point.length
16688	56	8	DoublePoint.java	DoublePoint	point	int[]	0	NIL-FOR	i < $.length
3292	69	8	DoublePoint.java	equals	other	Object	0	RET	$ instanceof DoublePoint
1438	121	8	EigenDecomposition.java	EigenDecomposition	THIS	EigenDecomposition	1	DEF	$.isSymmetric
15248	164	8	EigenDecomposition.java	EigenDecomposition	i	int	0	NIL-FOR	$ < size
15248	164	8	EigenDecomposition.java	EigenDecomposition	size	int	0	NIL-FOR	i < $
1439	199	8	EigenDecomposition.java	getV	THIS	EigenDecomposition	0	DEF	$.cachedV == null
15249	202	12	EigenDecomposition.java	getV	k	int	0	NIL-FOR	$ < m
15249	202	12	EigenDecomposition.java	getV	m	int	0	NIL-FOR	k < $
1440	223	8	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	$.cachedD == null
15250	227	12	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
15250	227	12	EigenDecomposition.java	getD	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1441	228	16	EigenDecomposition.java	getD	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) > 0
1441	228	16	EigenDecomposition.java	getD	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) > 0
1442	230	23	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0
1442	230	23	EigenDecomposition.java	getD	i	int	0	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0
1443	250	8	EigenDecomposition.java	getVT	THIS	EigenDecomposition	0	DEF	$.cachedVt == null
15251	253	12	EigenDecomposition.java	getVT	k	int	0	NIL-FOR	$ < m
15251	253	12	EigenDecomposition.java	getVT	m	int	0	NIL-FOR	k < $
15252	272	8	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
15252	272	8	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1444	273	12	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	RET	Precision.equals($.imagEigenvalues[i], 0.0, EPSILON)
1444	273	12	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	RET	Precision.equals(imagEigenvalues[$], 0.0, EPSILON)
1445	375	8	EigenDecomposition.java	getSquareRoot	THIS	EigenDecomposition	0	MathUnsupportedOperationException	$.isSymmetric
15253	380	8	EigenDecomposition.java	getSquareRoot	THIS	EigenDecomposition	0	NIL-FOR	i < $.realEigenvalues.$.length
15253	380	8	EigenDecomposition.java	getSquareRoot	i	int	0	NIL-FOR	$ < realEigenvalues.length
1446	382	12	EigenDecomposition.java	getSquareRoot	eigen	double	0	MathUnsupportedOperationException	$ <= 0
1447	406	8	EigenDecomposition.java	getSolver	THIS	EigenDecomposition	0	MathUnsupportedOperationException	$.hasComplexEigenvalues()
15254	578	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n - 1
15254	578	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $ - 1
15255	587	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
15255	587	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1448	588	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1448	588	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1448	588	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1449	591	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) > maxAbsoluteValue
1449	591	12	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) > maxAbsoluteValue
1449	591	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) > $
1450	596	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0
15256	597	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
15256	597	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1451	598	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue
1451	598	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) <= Precision.EPSILON * maxAbsoluteValue
1451	598	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * $
1452	601	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) <= Precision.EPSILON * maxAbsoluteValue
1452	601	16	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) <= Precision.EPSILON * maxAbsoluteValue
1452	601	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) <= Precision.EPSILON * $
15257	607	8	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
15257	607	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
15258	610	12	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-DOWHILE	$ != j
15258	610	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-DOWHILE	m != $
15259	611	16	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-FOR	$ < n - 1
15259	611	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	m < $ - 1
1453	614	20	EigenDecomposition.java	findEigenVectors	delta	double	0	DEF	FastMath.abs(e[m]) + $ == $
1453	614	20	EigenDecomposition.java	findEigenVectors	m	int	0	DEF	FastMath.abs(e[$]) + delta == delta
1453	614	20	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[m]) + delta == delta
1454	618	16	EigenDecomposition.java	findEigenVectors	m	int	0	MaxCountExceededException	$ != j
1454	618	16	EigenDecomposition.java	findEigenVectors	j	int	0	MaxCountExceededException	m != $
1455	619	20	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	MaxCountExceededException	its == $.maxIter
1455	619	20	EigenDecomposition.java	findEigenVectors	its	int	0	MaxCountExceededException	$ == maxIter
1456	626	20	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	$ < 0.0
15260	635	20	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ >= j
15260	635	20	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	i >= $
1457	638	24	EigenDecomposition.java	findEigenVectors	p	double	1	DEF	FastMath.abs($) >= FastMath.abs(q)
1457	638	24	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	FastMath.abs(p) >= FastMath.abs($)
1458	651	24	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	e[$ + 1] == 0.0
1458	651	24	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	$[i + 1] == 0.0
15261	661	24	EigenDecomposition.java	findEigenVectors	ia	int	0	NIL-FOR	$ < n
15261	661	24	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	ia < $
1459	667	20	EigenDecomposition.java	findEigenVectors	t	double	0	DEF	$ == 0.0
1459	667	20	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	$ >= j
1459	667	20	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	i >= $
15262	678	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
15262	678	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
15263	681	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
15263	681	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
1460	682	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.realEigenvalues[j] > p
1460	682	16	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	realEigenvalues[$] > p
1460	682	16	EigenDecomposition.java	findEigenVectors	p	double	0	DEF	realEigenvalues[j] > $
1461	687	12	EigenDecomposition.java	findEigenVectors	k	int	0	DEF	$ != i
1461	687	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	k != $
15264	690	16	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
15264	690	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
15265	700	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
15265	700	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1462	701	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1462	701	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1462	701	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1463	706	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0.0
15266	707	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
15266	707	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1464	708	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue
1464	708	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) < Precision.EPSILON * maxAbsoluteValue
1464	708	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * $
15267	715	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
15267	715	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
15268	716	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
15268	716	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
15269	736	8	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	0	NIL-FOR	i < $.realEigenvalues.$.length
15269	736	8	EigenDecomposition.java	transformToSchur	i	int	0	NIL-FOR	$ < realEigenvalues.length
1465	737	12	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	1	DEF	i == ($.realEigenvalues.$.length - 1)
1465	737	12	EigenDecomposition.java	transformToSchur	i	int	1	DEF	Precision.equals(matT[$ + 1][$], 0.0, EPSILON)
1465	737	12	EigenDecomposition.java	transformToSchur	i	int	1	DEF	$ == (realEigenvalues.length - 1)
1465	737	12	EigenDecomposition.java	transformToSchur	matT	double[][]	1	DEF	Precision.equals($[i + 1][i], 0.0, EPSILON)
15270	783	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
15270	783	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
15271	784	11	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
15271	784	11	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
1466	790	8	EigenDecomposition.java	findEigenVectorsFromSchur	norm	double	0	MathArithmeticException	Precision.equals($, 0.0, EPSILON)
15272	800	8	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	$ >= 0
1467	804	12	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	Precision.equals($, 0.0)
15273	808	16	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
15274	811	20	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
15274	811	20	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1468	814	20	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0.0
1468	814	20	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
1469	819	24	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.equals($.imagEigenvalues[i], 0.0)
1469	819	24	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$], 0.0)
1470	820	28	EigenDecomposition.java	findEigenVectorsFromSchur	w	double	1	DEF	$ != 0.0
1471	833	28	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > FastMath.abs(z)
1471	833	28	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > FastMath.abs($)
1472	842	24	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
15275	843	28	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
15275	843	28	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1473	849	19	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	0	DEF	$ < 0.0
1474	854	16	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	1	DEF	FastMath.abs(matrixT[$][$ - 1]) > FastMath.abs(matrixT[$ - 1][$])
1474	854	16	EigenDecomposition.java	findEigenVectorsFromSchur	matrixT	double[][]	1	DEF	FastMath.abs($[idx][idx - 1]) > FastMath.abs($[idx - 1][idx])
15276	867	16	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
15277	870	20	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
15277	870	20	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1475	876	20	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0.0
1475	876	20	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
1476	882	24	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.equals($.imagEigenvalues[i], 0.0)
1476	882	24	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$], 0.0)
1477	893	28	EigenDecomposition.java	findEigenVectorsFromSchur	vr	double	0	DEF	Precision.equals($, 0.0)
1477	893	28	EigenDecomposition.java	findEigenVectorsFromSchur	vi	double	0	DEF	Precision.equals($, 0.0)
1478	903	28	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > (FastMath.abs(z) + FastMath.abs(q))
1478	903	28	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs($))
1478	903	28	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > (FastMath.abs($) + FastMath.abs(q))
1479	919	24	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
15278	920	28	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
15278	920	28	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
15279	931	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
15279	931	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
1480	932	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	DEF	$ < 0 | $ > n - 1
1480	932	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	DEF	i < 0 | i > $ - 1
15280	933	16	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
15280	933	16	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
15281	940	8	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ >= 0
15282	941	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ <= n - 1
15282	941	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i <= $ - 1
15283	943	16	EigenDecomposition.java	findEigenVectorsFromSchur	k	int	0	NIL-FOR	$ <= FastMath.min(j, n - 1)
15283	943	16	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	k <= FastMath.min($, n - 1)
15283	943	16	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	k <= FastMath.min(j, $ - 1)
15284	952	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
15284	952	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
15285	953	12	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
15285	953	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
16652	93	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$ < oldChromosomes.size()
16652	93	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i < $.size()
3203	106	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ > 1
3203	106	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ < 0
16811	223	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
16812	229	6	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
3478	231	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
3478	231	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3479	236	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3480	238	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance == null
16813	239	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
16813	239	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
16813	239	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
16814	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
16814	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
16814	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
3481	253	8	EmbeddedRungeKuttaIntegrator.java	integrate	forward	boolean	1	DEF	$
3482	254	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize >= t
3482	254	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize >= $
3483	258	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize <= t
3483	258	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize <= $
16815	264	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
16815	264	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
16816	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
16816	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
16816	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
16817	268	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
16817	268	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
16818	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
16818	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
16818	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
16819	281	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
16819	281	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
3484	289	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
3485	306	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.isLastStep
3486	311	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
3487	326	10	EmbeddedRungeKuttaIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
3116	262	12	EmpiricalDistribution.java	load	THIS	EmpiricalDistribution	0	ZeroException	$.sampleStats.getN() == 0
3117	434	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	DEF	$.binStats.isEmpty()
16610	437	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
16610	437	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
16611	449	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount-1
16611	449	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
3118	477	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	MathIllegalStateException	$.loaded
16612	485	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
16612	485	8	EmpiricalDistribution.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
3119	486	11	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	RET	x <= $.upperBounds[i]
3119	486	11	EmpiricalDistribution.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
3119	486	11	EmpiricalDistribution.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
3120	488	15	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
3121	489	19	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
16613	547	8	EmpiricalDistribution.java	getUpperBounds	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount - 1
16613	547	8	EmpiricalDistribution.java	getUpperBounds	i	int	0	NIL-FOR	$ < binCount - 1
3122	616	8	EmpiricalDistribution.java	density	THIS	EmpiricalDistribution	0	RET	x < $.min
3122	616	8	EmpiricalDistribution.java	density	THIS	EmpiricalDistribution	0	RET	x > $.max
3122	616	8	EmpiricalDistribution.java	density	x	double	0	RET	$ < min
3122	616	8	EmpiricalDistribution.java	density	x	double	0	RET	$ > max
3123	638	8	EmpiricalDistribution.java	cumulativeProbability	THIS	EmpiricalDistribution	1	RET	x < $.min
3123	638	8	EmpiricalDistribution.java	cumulativeProbability	x	double	1	RET	$ < min
3124	640	15	EmpiricalDistribution.java	cumulativeProbability	THIS	EmpiricalDistribution	0	RET	x >= $.max
3124	640	15	EmpiricalDistribution.java	cumulativeProbability	x	double	0	RET	$ >= max
3125	676	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
3125	676	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
3126	680	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
3127	684	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
16614	689	8	EmpiricalDistribution.java	inverseCumulativeProbability	THIS	EmpiricalDistribution	0	NIL-WHILE	$.cumBinP(i) < p
16614	689	8	EmpiricalDistribution.java	inverseCumulativeProbability	i	int	0	NIL-WHILE	cumBinP($) < p
16614	689	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumBinP(i) < $
3128	701	8	EmpiricalDistribution.java	inverseCumulativeProbability	pCrit	double	0	RET	$ <= 0
14921	110	8	EnumeratedDistribution.java	EnumeratedDistribution	i	int	0	NIL-FOR	$ < pmf.size()
14921	110	8	EnumeratedDistribution.java	EnumeratedDistribution	pmf	List<Pair<T,Double>>	0	NIL-FOR	i < $.size()
1102	114	12	EnumeratedDistribution.java	EnumeratedDistribution	p	double	0	NotPositiveException	$ < 0
1103	117	12	EnumeratedDistribution.java	EnumeratedDistribution	p	double	0	NotFiniteNumberException	Double.isInfinite($)
1104	120	12	EnumeratedDistribution.java	EnumeratedDistribution	p	double	0	NotANumberException	Double.isNaN($)
14922	153	8	EnumeratedDistribution.java	probability	THIS	EnumeratedDistribution	0	NIL-FOR	i < $.probabilities.$.length
14922	153	8	EnumeratedDistribution.java	probability	i	int	0	NIL-FOR	$ < probabilities.length
1105	154	12	EnumeratedDistribution.java	probability	THIS	EnumeratedDistribution	0	DEF	$.singletons.get(i) == null
1105	154	12	EnumeratedDistribution.java	probability	THIS	EnumeratedDistribution	0	DEF	x.equals($.singletons.get(i))
1105	154	12	EnumeratedDistribution.java	probability	i	int	0	DEF	singletons.get($) == null
1105	154	12	EnumeratedDistribution.java	probability	i	int	0	DEF	x.equals(singletons.get($))
1105	154	12	EnumeratedDistribution.java	probability	x	T	0	DEF	$ != null
1105	154	12	EnumeratedDistribution.java	probability	x	T	0	DEF	$ == null
1105	154	12	EnumeratedDistribution.java	probability	x	T	0	DEF	$.equals(singletons.get(i))
14923	176	8	EnumeratedDistribution.java	getPmf	THIS	EnumeratedDistribution	0	NIL-FOR	i < $.probabilities.$.length
14923	176	8	EnumeratedDistribution.java	getPmf	i	int	0	NIL-FOR	$ < probabilities.length
14924	192	8	EnumeratedDistribution.java	sample	THIS	EnumeratedDistribution	0	NIL-FOR	i < $.probabilities.$.length
14924	192	8	EnumeratedDistribution.java	sample	i	int	0	NIL-FOR	$ < probabilities.length
1106	194	12	EnumeratedDistribution.java	sample	randomValue	double	0	RET	$ < sum
1106	194	12	EnumeratedDistribution.java	sample	sum	double	0	RET	randomValue < $
1107	214	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
14925	221	8	EnumeratedDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
14925	221	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1108	243	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
1109	247	8	EnumeratedDistribution.java	sample	array	T[]	0	NullArgumentException	$ == null
1110	252	8	EnumeratedDistribution.java	sample	THIS	EnumeratedDistribution	1	DEF	array.$.length < sampleSize
1110	252	8	EnumeratedDistribution.java	sample	sampleSize	int	1	DEF	array.length < $
1110	252	8	EnumeratedDistribution.java	sample	array	T[]	1	DEF	$.length < sampleSize
14926	260	8	EnumeratedDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
14926	260	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1115	90	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	THIS	EnumeratedIntegerDistribution	0	DimensionMismatchException	singletons.$.length != probabilities.$.length
1115	90	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	singletons	int[]	0	DimensionMismatchException	$.length != probabilities.length
1115	90	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	probabilities	double[]	0	DimensionMismatchException	singletons.length != $.length
14927	96	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	THIS	EnumeratedIntegerDistribution	0	NIL-FOR	i < singletons.$.length
14927	96	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	i	int	0	NIL-FOR	$ < singletons.length
14927	96	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	singletons	int[]	0	NIL-FOR	i < $.length
1116	117	12	EnumeratedIntegerDistribution.java	cumulativeProbability	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getKey() <= x
1116	117	12	EnumeratedIntegerDistribution.java	cumulativeProbability	x	int	0	DEF	sample.getKey() <= $
1117	167	12	EnumeratedIntegerDistribution.java	getSupportLowerBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getKey() < min
1117	167	12	EnumeratedIntegerDistribution.java	getSupportLowerBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getValue() > 0
1117	167	12	EnumeratedIntegerDistribution.java	getSupportLowerBound	min	int	0	DEF	sample.getKey() < $
1118	185	12	EnumeratedIntegerDistribution.java	getSupportUpperBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getValue() > 0
1118	185	12	EnumeratedIntegerDistribution.java	getSupportUpperBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getKey() > max
1118	185	12	EnumeratedIntegerDistribution.java	getSupportUpperBound	max	int	0	DEF	sample.getKey() > $
1233	90	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	THIS	EnumeratedRealDistribution	0	DimensionMismatchException	singletons.$.length != probabilities.$.length
1233	90	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	singletons	double[]	0	DimensionMismatchException	$.length != probabilities.length
1233	90	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	probabilities	double[]	0	DimensionMismatchException	singletons.length != $.length
14949	96	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	THIS	EnumeratedRealDistribution	0	NIL-FOR	i < singletons.$.length
14949	96	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	i	int	0	NIL-FOR	$ < singletons.length
14949	96	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	singletons	double[]	0	NIL-FOR	i < $.length
1234	131	12	EnumeratedRealDistribution.java	cumulativeProbability	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getKey() <= x
1234	131	12	EnumeratedRealDistribution.java	cumulativeProbability	x	double	0	DEF	sample.getKey() <= $
1235	181	12	EnumeratedRealDistribution.java	getSupportLowerBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getKey() < min
1235	181	12	EnumeratedRealDistribution.java	getSupportLowerBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getValue() > 0
1235	181	12	EnumeratedRealDistribution.java	getSupportLowerBound	min	double	0	DEF	sample.getKey() < $
1236	199	12	EnumeratedRealDistribution.java	getSupportUpperBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getValue() > 0
1236	199	12	EnumeratedRealDistribution.java	getSupportUpperBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getKey() > max
1236	199	12	EnumeratedRealDistribution.java	getSupportUpperBound	max	double	0	DEF	sample.getKey() > $
3534	77	8	EquationsMapper.java	extractEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
3534	77	8	EquationsMapper.java	extractEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
3535	92	8	EquationsMapper.java	insertEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
3535	92	8	EquationsMapper.java	insertEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
3299	67	8	Erf.java	erf	x	double	0	RET	FastMath.abs($) > 40
3300	98	8	Erf.java	erfc	x	double	0	RET	FastMath.abs($) > 40
3301	116	8	Erf.java	erf	x1	double	0	RET	$ > x2
3301	116	8	Erf.java	erf	x2	double	0	RET	x1 > $
3302	152	8	Erf.java	erfInv	w	double	1	DEF	$ < 6.25
3303	177	15	Erf.java	erfInv	w	double	1	DEF	$ < 16.0
3304	198	15	Erf.java	erfInv	w	double	1	DEF	Double.isInfinite($)
16162	56	12	EuclideanDoublePoint.java	centroidOf	THIS	EuclideanDoublePoint	0	NIL-FOR	i < centroid.$.length
16162	56	12	EuclideanDoublePoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
16162	56	12	EuclideanDoublePoint.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
16163	60	8	EuclideanDoublePoint.java	centroidOf	THIS	EuclideanDoublePoint	0	NIL-FOR	i < centroid.$.length
16163	60	8	EuclideanDoublePoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
16163	60	8	EuclideanDoublePoint.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
2435	74	8	EuclideanDoublePoint.java	equals	other	Object	0	RET	$ instanceof EuclideanDoublePoint
16174	68	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
16174	68	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
16174	68	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
16175	72	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
16175	72	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
16175	72	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
2469	81	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
3520	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	1	DEF	$.previousState != null
3520	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
16857	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16857	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
16858	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16858	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3536	110	8	EventFilter.java	g	THIS	EventFilter	1	RET	$.forward
3537	112	12	EventFilter.java	g	THIS	EventFilter	1	RET	$.extremeT < t
3537	112	12	EventFilter.java	g	t	double	1	RET	extremeT < $
3538	118	16	EventFilter.java	g	previous	Transformer	0	DEF	next != $
3538	118	16	EventFilter.java	g	next	Transformer	0	DEF	$ != previous
16880	140	16	EventFilter.java	g	i	int	0	NIL-FOR	$ > 0
3539	141	20	EventFilter.java	g	THIS	EventFilter	0	RET	$.updates[i] <= t
3539	141	20	EventFilter.java	g	i	int	0	RET	updates[$] <= t
3539	141	20	EventFilter.java	g	t	double	0	RET	updates[i] <= $
3540	151	12	EventFilter.java	g	THIS	EventFilter	1	RET	t < $.extremeT
3540	151	12	EventFilter.java	g	t	double	1	RET	$ < extremeT
3541	157	16	EventFilter.java	g	previous	Transformer	0	DEF	next != $
3541	157	16	EventFilter.java	g	next	Transformer	0	DEF	$ != previous
16881	179	16	EventFilter.java	g	THIS	EventFilter	0	NIL-FOR	i < $.updates.$.length - 1
16881	179	16	EventFilter.java	g	i	int	0	NIL-FOR	$ < updates.length - 1
3542	180	20	EventFilter.java	g	THIS	EventFilter	0	RET	t <= $.updates[i]
3542	180	20	EventFilter.java	g	i	int	0	RET	t <= updates[$]
3542	180	20	EventFilter.java	g	t	double	0	RET	$ <= updates[i]
3543	173	8	EventState.java	reinitializeBegin	THIS	EventState	0	DEF	$.g0 == 0
3544	232	12	EventState.java	evaluateStep	THIS	EventState	0	RET	FastMath.abs(dt) < $.convergence
3544	232	12	EventState.java	evaluateStep	dt	double	0	RET	FastMath.abs($) < convergence
16882	252	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
16882	252	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
3545	260	16	EventState.java	evaluateStep	THIS	EventState	1	RET	$.g0Positive ^ (gb >= 0)
3545	260	16	EventState.java	evaluateStep	gb	double	1	RET	g0Positive ^ ($ >= 0)
3546	268	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	$.solver instanceof BracketedUnivariateSolver<?>
3547	289	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Double.isNaN($.previousEventTime)
3547	289	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - ta) <= $.convergence
3547	289	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - $.previousEventTime) <= $.convergence
3547	289	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - ta) <= convergence
3547	289	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - previousEventTime) <= convergence
3547	289	20	EventState.java	evaluateStep	ta	double	1	DEF	FastMath.abs(root - $) <= convergence
3548	297	27	EventState.java	evaluateStep	THIS	EventState	1	RET	Double.isNaN($.previousEventTime)
3548	297	27	EventState.java	evaluateStep	THIS	EventState	1	RET	FastMath.abs($.previousEventTime - root) > $.convergence
3548	297	27	EventState.java	evaluateStep	root	double	1	RET	FastMath.abs(previousEventTime - $) > convergence
3549	348	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	FastMath.abs($.pendingEventTime - t) <= $.convergence
3549	348	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
3549	348	8	EventState.java	stepAccepted	t	double	1	DEF	FastMath.abs(pendingEventTime - $) <= convergence
3550	376	8	EventState.java	reset	THIS	EventState	0	RET	FastMath.abs($.pendingEventTime - t) <= $.convergence
3550	376	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
3550	376	8	EventState.java	reset	t	double	0	RET	FastMath.abs(pendingEventTime - $) <= convergence
3551	380	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.$.Action.RESET_STATE
16711	174	8	ExceptionContext.java	buildMessage	i	int	0	NIL-FOR	$ < len
16711	174	8	ExceptionContext.java	buildMessage	len	int	0	NIL-FOR	i < $
3357	180	12	ExceptionContext.java	buildMessage	count	int	0	DEF	++$ < len
3357	180	12	ExceptionContext.java	buildMessage	len	int	0	DEF	++count < $
16712	228	8	ExceptionContext.java	serializeMessages	i	int	0	NIL-FOR	$ < len
16712	228	8	ExceptionContext.java	serializeMessages	len	int	0	NIL-FOR	i < $
16713	236	12	ExceptionContext.java	serializeMessages	j	int	0	NIL-FOR	$ < aLen
16713	236	12	ExceptionContext.java	serializeMessages	aLen	int	0	NIL-FOR	j < $
3358	237	16	ExceptionContext.java	serializeMessages	j	int	1	DEF	args[$] instanceof Serializable
3358	237	16	ExceptionContext.java	serializeMessages	args	Object[]	1	DEF	$[j] instanceof Serializable
16714	263	8	ExceptionContext.java	deSerializeMessages	i	int	0	NIL-FOR	$ < len
16714	263	8	ExceptionContext.java	deSerializeMessages	len	int	0	NIL-FOR	i < $
16715	270	12	ExceptionContext.java	deSerializeMessages	j	int	0	NIL-FOR	$ < aLen
16715	270	12	ExceptionContext.java	deSerializeMessages	aLen	int	0	NIL-FOR	j < $
3359	293	12	ExceptionContext.java	serializeContext	value	Object	1	DEF	$ instanceof Serializable
16716	316	8	ExceptionContext.java	deSerializeContext	i	int	0	NIL-FOR	$ < len
16716	316	8	ExceptionContext.java	deSerializeContext	len	int	0	NIL-FOR	i < $
3583	97	8	ExpandableStatefulODE.java	getTotalDimension	THIS	ExpandableStatefulODE	1	RET	$.components.isEmpty()
3584	140	8	ExpandableStatefulODE.java	addSecondaryEquations	THIS	ExpandableStatefulODE	1	DEF	$.components.isEmpty()
16888	169	8	ExpandableStatefulODE.java	getSecondaryMappers	THIS	ExpandableStatefulODE	0	NIL-FOR	i < mappers.$.length
16888	169	8	ExpandableStatefulODE.java	getSecondaryMappers	i	int	0	NIL-FOR	$ < mappers.length
16888	169	8	ExpandableStatefulODE.java	getSecondaryMappers	mappers	EquationsMapper[]	0	NIL-FOR	i < $.length
3585	197	8	ExpandableStatefulODE.java	setPrimaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	primaryState.$.length != $.primaryState.length
3585	197	8	ExpandableStatefulODE.java	setPrimaryState	primaryState	double[]	0	DimensionMismatchException	$.length != this.primaryState.length
3586	234	8	ExpandableStatefulODE.java	setSecondaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	secondaryState.$.length != localArray.$.length
3586	234	8	ExpandableStatefulODE.java	setSecondaryState	localArray	double[]	0	DimensionMismatchException	secondaryState.length != $.length
3586	234	8	ExpandableStatefulODE.java	setSecondaryState	secondaryState	double[]	0	DimensionMismatchException	$.length != localArray.length
3587	270	8	ExpandableStatefulODE.java	setCompleteState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	completeState.$.length != $.getTotalDimension()
3587	270	8	ExpandableStatefulODE.java	setCompleteState	completeState	double[]	0	DimensionMismatchException	$.length != getTotalDimension()
1147	130	8	ExponentialDistribution.java	ExponentialDistribution	mean	double	0	NotStrictlyPositiveException	$ <= 0
1148	148	8	ExponentialDistribution.java	density	x	double	0	RET	$ < 0
1149	166	8	ExponentialDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
1150	184	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
1150	184	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
1151	186	15	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
14929	213	8	ExponentialDistribution.java	sample	u	double	0	NIL-WHILE	$ < 0.5
1152	222	8	ExponentialDistribution.java	sample	u	double	0	RET	$ <= EXPONENTIAL_SA_QI[0]
14930	232	8	ExponentialDistribution.java	sample	u	double	0	NIL-DOWHILE	$ > EXPONENTIAL_SA_QI[i]
14930	232	8	ExponentialDistribution.java	sample	i	int	0	NIL-DOWHILE	u > EXPONENTIAL_SA_QI[$]
1153	236	12	ExponentialDistribution.java	sample	u2	double	0	DEF	$ < umin
1153	236	12	ExponentialDistribution.java	sample	umin	double	0	DEF	u2 < $
1205	110	8	FDistribution.java	FDistribution	numeratorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1206	114	8	FDistribution.java	FDistribution	denominatorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1207	154	8	FDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1208	203	8	FDistribution.java	getNumericalMean	denominatorDF	double	0	RET	$ > 2
1209	224	8	FDistribution.java	getNumericalVariance	THIS	FDistribution	0	DEF	$.numericalVarianceIsCalculated
1210	239	8	FDistribution.java	calculateNumericalVariance	denominatorDF	double	0	RET	$ > 4
3360	93	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	type == $.TransformType.FORWARD
3360	93	8	FastCosineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
3361	94	12	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
3362	102	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	1	DEF	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
3363	142	8	FastCosineTransformer.java	fct	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
3364	147	8	FastCosineTransformer.java	fct	n	int	0	RET	$ == 1
16717	159	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
16717	159	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
16718	174	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
16718	174	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
16731	135	8	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	NIL-FOR	$ < n
16731	135	8	FastFourierTransformer.java	bitReversalShuffle2	n	int	0	NIL-FOR	i < $
3376	136	12	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	DEF	$ < j
3376	136	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	DEF	i < $
16732	148	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ <= j
16732	148	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ > 0
16732	148	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	NIL-WHILE	k <= $
3377	173	16	FastFourierTransformer.java	normalizeTransformedData	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
3377	173	16	FastFourierTransformer.java	normalizeTransformedData	type	TransformType	0	DEF	$ == TransformType.INVERSE
16733	175	20	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
16733	175	20	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
16734	183	16	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
16734	183	16	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
3378	218	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataRI.$.length != 2
3378	218	8	FastFourierTransformer.java	transformInPlace	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
3379	223	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataR.$.length != dataI.$.length
3379	223	8	FastFourierTransformer.java	transformInPlace	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
3379	223	8	FastFourierTransformer.java	transformInPlace	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
3380	228	8	FastFourierTransformer.java	transformInPlace	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
3381	234	8	FastFourierTransformer.java	transformInPlace	n	int	1	RET	$ == 1
3382	236	15	FastFourierTransformer.java	transformInPlace	n	int	0	RET	$ == 2
3383	256	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	1	DEF	type == $.TransformType.INVERSE
3383	256	8	FastFourierTransformer.java	transformInPlace	type	TransformType	1	DEF	$ == TransformType.INVERSE
16735	257	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
16735	257	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
16736	286	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
16736	286	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
16737	318	8	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-WHILE	lastN0 < $
16737	318	8	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-WHILE	$ < n
3384	323	12	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
3384	323	12	FastFourierTransformer.java	transformInPlace	type	TransformType	0	DEF	$ == TransformType.INVERSE
16738	328	12	FastFourierTransformer.java	transformInPlace	destEvenStartIndex	int	0	NIL-FOR	$ < n
16738	328	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	destEvenStartIndex < $
16739	334	16	FastFourierTransformer.java	transformInPlace	r	int	0	NIL-FOR	$ < lastN0
16739	334	16	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-FOR	r < $
16740	442	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
16740	442	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
16740	442	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
3385	464	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
3385	464	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
3385	464	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
16741	466	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
16741	466	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
16741	466	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
16742	474	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
16742	474	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
16742	474	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
3386	481	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
3386	481	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
3386	481	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
16743	487	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
16743	487	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
16743	487	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
16743	487	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
3368	52	8	FastHadamardTransformer.java	transform	THIS	FastHadamardTransformer	0	RET	type == $.TransformType.FORWARD
3368	52	8	FastHadamardTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
3369	234	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
16723	248	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
16723	248	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
16724	256	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
16724	256	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
16725	261	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
16725	261	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
3370	285	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
16726	299	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
16726	299	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
16727	307	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
16727	307	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
16728	312	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
16728	312	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
263	371	8	FastMath.java	doubleHighPart	d	double	0	RET	$ < Precision.SAFE_MIN
263	371	8	FastMath.java	doubleHighPart	d	double	0	RET	$ > -Precision.SAFE_MIN
264	393	6	FastMath.java	cosh	x	double	0	RET	$ != $
265	402	6	FastMath.java	cosh	x	double	1	RET	$ > 20
266	403	10	FastMath.java	cosh	x	double	1	RET	$ >= LOG_MAX_VALUE
267	410	13	FastMath.java	cosh	x	double	0	RET	$ < -20
268	411	10	FastMath.java	cosh	x	double	1	RET	$ <= -LOG_MAX_VALUE
269	421	6	FastMath.java	cosh	x	double	0	DEF	$ < 0.0
270	463	6	FastMath.java	sinh	x	double	0	RET	$ != $
271	472	6	FastMath.java	sinh	x	double	1	RET	$ > 20
272	473	10	FastMath.java	sinh	x	double	1	RET	$ >= LOG_MAX_VALUE
273	480	13	FastMath.java	sinh	x	double	0	RET	$ < -20
274	481	10	FastMath.java	sinh	x	double	1	RET	$ <= -LOG_MAX_VALUE
275	490	6	FastMath.java	sinh	x	double	0	RET	$ == 0
276	494	6	FastMath.java	sinh	x	double	0	DEF	$ < 0.0
277	501	6	FastMath.java	sinh	x	double	1	DEF	$ > 0.25
278	575	6	FastMath.java	sinh	negate	boolean	0	DEF	$
279	589	6	FastMath.java	tanh	x	double	0	RET	$ != $
280	599	6	FastMath.java	tanh	x	double	0	RET	$ > 20.0
281	603	6	FastMath.java	tanh	x	double	0	RET	$ < -20
282	607	6	FastMath.java	tanh	x	double	0	RET	$ == 0
283	611	6	FastMath.java	tanh	x	double	0	DEF	$ < 0.0
284	617	6	FastMath.java	tanh	x	double	1	DEF	$ >= 0.5
285	699	6	FastMath.java	tanh	negate	boolean	0	DEF	$
286	720	8	FastMath.java	asinh	a	double	0	DEF	$ < 0
287	726	8	FastMath.java	asinh	a	double	1	DEF	$ > 0.167
288	730	12	FastMath.java	asinh	a	double	1	DEF	$ > 0.097
289	732	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.036
290	734	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.0036
291	750	8	FastMath.java	atanh	a	double	0	DEF	$ < 0
292	756	8	FastMath.java	atanh	a	double	1	DEF	$ > 0.15
293	760	12	FastMath.java	atanh	a	double	1	DEF	$ > 0.087
294	762	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.031
295	764	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.003
296	856	8	FastMath.java	exp	x	double	1	RET	$ < 0.0
297	859	12	FastMath.java	exp	intVal	int	0	RET	$ > 746
298	860	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
299	867	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
300	870	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
301	877	12	FastMath.java	exp	intVal	int	0	RET	$ == 709
302	880	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
303	896	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
304	897	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
305	949	8	FastMath.java	exp	extra	double	1	DEF	$ != 0.0
306	955	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
307	978	8	FastMath.java	expm1	x	double	0	RET	$ == 0.0
307	978	8	FastMath.java	expm1	x	double	0	RET	$ != $
308	982	8	FastMath.java	expm1	x	double	0	RET	$ >= 1.0
308	982	8	FastMath.java	expm1	x	double	0	RET	$ <= -1.0
309	987	12	FastMath.java	expm1	x	double	1	RET	$ > 0.0
310	1002	8	FastMath.java	expm1	x	double	0	DEF	$ < 0.0
311	1078	8	FastMath.java	expm1	negative	boolean	0	DEF	$
312	1111	8	FastMath.java	expm1	hiPrecOut	double	0	DEF	$ != null
313	1136	8	FastMath.java	log	x	double	0	RET	$==0
314	1142	8	FastMath.java	log	bits	long	0	RET	($ & 0x8000000000000000L) != 0
314	1142	8	FastMath.java	log	x	double	0	RET	$ != $
314	1142	8	FastMath.java	log	x	double	0	RET	$ != 0.0
315	1143	12	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
316	1151	8	FastMath.java	log	x	double	0	RET	$ == Double.POSITIVE_INFINITY
317	1152	12	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
318	1162	8	FastMath.java	log	bits	long	0	RET	($ & 0x7ff0000000000000L) == 0
319	1164	12	FastMath.java	log	x	double	0	RET	$ == 0
320	1166	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
14847	1175	12	FastMath.java	log	bits	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
321	1182	8	FastMath.java	log	exp	int	0	RET	$ == 0
321	1182	8	FastMath.java	log	exp	int	0	RET	$ == -1
321	1182	8	FastMath.java	log	x	double	0	RET	$ > 0.99
321	1182	8	FastMath.java	log	x	double	0	RET	$ < 1.01
321	1182	8	FastMath.java	log	hiPrec	double[]	0	RET	$ == null
14848	1199	12	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
322	1246	8	FastMath.java	log	hiPrec	double[]	1	DEF	$ != null
14849	1265	12	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
323	1349	8	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
324	1364	8	FastMath.java	log1p	x	double	0	RET	$ == -1
325	1368	8	FastMath.java	log1p	x	double	0	RET	$ == Double.POSITIVE_INFINITY
326	1372	8	FastMath.java	log1p	x	double	1	RET	$ < -1e-6
326	1372	8	FastMath.java	log1p	x	double	1	RET	$ > 1e-6
327	1379	12	FastMath.java	log1p	lores	double	0	RET	Double.isInfinite($)
328	1403	8	FastMath.java	log10	lores	double	0	RET	Double.isInfinite($)
329	1447	8	FastMath.java	pow	y	double	0	RET	$ == 0.0
330	1451	8	FastMath.java	pow	x	double	0	RET	$ != $
331	1456	8	FastMath.java	pow	x	double	0	RET	$ == 0
332	1458	12	FastMath.java	pow	bits	long	0	RET	($ & 0x8000000000000000L) != 0
333	1462	16	FastMath.java	pow	yi	long	0	RET	y == $
333	1462	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
333	1462	16	FastMath.java	pow	y	double	0	RET	$ == yi
333	1462	16	FastMath.java	pow	y	double	0	RET	$ < 0
334	1466	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
334	1466	16	FastMath.java	pow	yi	long	0	RET	y == $
334	1466	16	FastMath.java	pow	y	double	0	RET	$ == yi
334	1466	16	FastMath.java	pow	y	double	0	RET	$ > 0
335	1471	12	FastMath.java	pow	y	double	0	RET	$ < 0
336	1474	12	FastMath.java	pow	y	double	0	RET	$ > 0
337	1481	8	FastMath.java	pow	x	double	0	RET	$ == Double.POSITIVE_INFINITY
338	1482	12	FastMath.java	pow	y	double	0	RET	$ != $
339	1485	12	FastMath.java	pow	y	double	1	RET	$ < 0.0
340	1492	8	FastMath.java	pow	y	double	0	RET	$ == Double.POSITIVE_INFINITY
341	1493	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
342	1497	12	FastMath.java	pow	x	double	1	RET	$ * $ > 1.0
343	1504	8	FastMath.java	pow	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
344	1505	12	FastMath.java	pow	y	double	0	RET	$ != $
345	1509	12	FastMath.java	pow	y	double	0	RET	$ < 0
346	1511	16	FastMath.java	pow	yi	long	0	RET	y == $
346	1511	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
346	1511	16	FastMath.java	pow	y	double	0	RET	$ == yi
347	1518	12	FastMath.java	pow	y	double	0	RET	$ > 0
348	1520	16	FastMath.java	pow	yi	long	0	RET	y == $
348	1520	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
348	1520	16	FastMath.java	pow	y	double	0	RET	$ == yi
349	1528	8	FastMath.java	pow	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
350	1530	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
351	1534	12	FastMath.java	pow	x	double	1	RET	$ * $ < 1.0
352	1542	8	FastMath.java	pow	x	double	0	RET	$ < 0
353	1544	12	FastMath.java	pow	THIS	FastMath	0	RET	y >= $.TWO_POWER_53
353	1544	12	FastMath.java	pow	THIS	FastMath	0	RET	y <= -$.TWO_POWER_53
353	1544	12	FastMath.java	pow	y	double	0	RET	$ >= TWO_POWER_53
353	1544	12	FastMath.java	pow	y	double	0	RET	$ <= -TWO_POWER_53
354	1548	12	FastMath.java	pow	y	double	1	RET	$ == (long) $
355	1559	8	FastMath.java	pow	y	double	1	DEF	$ > -8e298
355	1559	8	FastMath.java	pow	y	double	1	DEF	$ < 8e298
356	1572	8	FastMath.java	pow	lores	double	0	RET	Double.isInfinite($)
357	1615	8	FastMath.java	pow	e	int	1	RET	$ == 0
358	1617	15	FastMath.java	pow	e	int	0	DEF	$ < 0
14850	1638	8	FastMath.java	pow	e	int	0	NIL-WHILE	$ != 0
359	1640	12	FastMath.java	pow	e	int	0	DEF	($ & 0x1) != 0
360	1821	8	FastMath.java	sinQ	xb	double	0	DEF	$ != 0.0
361	1951	8	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
362	1984	8	FastMath.java	tanQ	xb	double	0	DEF	$ != 0.0
363	1988	12	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
364	2030	8	FastMath.java	reducePayneHanek	shift	int	1	DEF	$ != 0
365	2061	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
365	2061	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
365	2061	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
365	2061	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
365	2061	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
366	2075	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
366	2075	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
366	2075	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
366	2075	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
366	2075	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
367	2095	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
367	2095	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
367	2095	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
367	2095	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
367	2095	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
368	2147	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
368	2147	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
368	2147	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
368	2147	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
368	2147	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
369	2161	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
369	2161	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
369	2161	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
369	2161	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
369	2161	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
370	2181	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
370	2181	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
370	2181	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
370	2181	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
370	2181	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
371	2203	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
371	2203	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
371	2203	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
371	2203	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
371	2203	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
372	2235	8	FastMath.java	sin	x	double	0	DEF	$ < 0
373	2241	8	FastMath.java	sin	xa	double	0	RET	$ == 0.0
374	2243	12	FastMath.java	sin	bits	long	0	RET	$ < 0
375	2249	8	FastMath.java	sin	xa	double	0	RET	$ != $
375	2249	8	FastMath.java	sin	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
376	2254	8	FastMath.java	sin	xa	double	1	DEF	$ > 3294198.0
377	2263	15	FastMath.java	sin	xa	double	0	DEF	$ > 1.5707963267948966
378	2270	8	FastMath.java	sin	negative	boolean	0	DEF	$
379	2299	8	FastMath.java	cos	x	double	0	DEF	$ < 0
380	2303	8	FastMath.java	cos	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
380	2303	8	FastMath.java	cos	xa	double	0	RET	$ != $
381	2309	8	FastMath.java	cos	xa	double	1	DEF	$ > 3294198.0
382	2318	15	FastMath.java	cos	xa	double	0	DEF	$ > 1.5707963267948966
383	2354	8	FastMath.java	tan	x	double	0	DEF	$ < 0
384	2360	8	FastMath.java	tan	xa	double	0	RET	$ == 0.0
385	2362	12	FastMath.java	tan	bits	long	0	RET	$ < 0
386	2368	8	FastMath.java	tan	xa	double	0	RET	$ != $
386	2368	8	FastMath.java	tan	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
387	2374	8	FastMath.java	tan	xa	double	1	DEF	$ > 3294198.0
388	2383	15	FastMath.java	tan	xa	double	0	DEF	$ > 1.5707963267948966
389	2390	8	FastMath.java	tan	xa	double	0	DEF	$ > 1.5
390	2406	8	FastMath.java	tan	quadrant	int	1	DEF	($ & 1) == 0
391	2412	8	FastMath.java	tan	negative	boolean	0	DEF	$
392	2438	8	FastMath.java	atan	xa	double	0	RET	$ == 0.0
393	2442	8	FastMath.java	atan	xa	double	0	DEF	$ < 0
394	2449	8	FastMath.java	atan	xa	double	0	RET	$ > 1.633123935319537E16
395	2454	8	FastMath.java	atan	xa	double	1	DEF	$ < 1
396	2476	8	FastMath.java	atan	idx	int	1	DEF	$ == 0
397	2554	8	FastMath.java	atan	leftPlane	boolean	0	DEF	$
398	2568	8	FastMath.java	atan	negate	boolean	0	DEF	$ ^ leftPlane
398	2568	8	FastMath.java	atan	leftPlane	boolean	0	DEF	negate ^ $
399	2582	8	FastMath.java	atan2	y	double	0	RET	$ != $
399	2582	8	FastMath.java	atan2	x	double	0	RET	$ != $
400	2586	8	FastMath.java	atan2	y	double	0	RET	$ == 0
401	2591	12	FastMath.java	atan2	invx	double	0	RET	$ == 0
402	2592	16	FastMath.java	atan2	x	double	1	RET	$ > 0
403	2599	12	FastMath.java	atan2	invx	double	1	RET	$ < 0
403	2599	12	FastMath.java	atan2	x	double	1	RET	$ < 0
404	2600	16	FastMath.java	atan2	invy	double	1	RET	$ < 0
404	2600	16	FastMath.java	atan2	y	double	1	RET	$ < 0
405	2612	8	FastMath.java	atan2	y	double	0	RET	$ == Double.POSITIVE_INFINITY
406	2613	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
407	2617	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
408	2624	8	FastMath.java	atan2	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
409	2625	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
410	2629	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
411	2636	8	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
412	2637	12	FastMath.java	atan2	y	double	0	RET	$ > 0
412	2637	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
413	2641	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
413	2641	12	FastMath.java	atan2	y	double	0	RET	$ < 0
414	2646	8	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
415	2648	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0.0
415	2648	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
416	2652	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
416	2652	12	FastMath.java	atan2	y	double	0	RET	$ < 0
417	2659	8	FastMath.java	atan2	x	double	0	RET	$ == 0
418	2660	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
418	2660	12	FastMath.java	atan2	y	double	0	RET	$ > 0
419	2664	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
419	2664	12	FastMath.java	atan2	y	double	0	RET	$ < 0
420	2671	8	FastMath.java	atan2	r	double	0	RET	Double.isInfinite($)
421	2688	8	FastMath.java	atan2	ra	double	0	DEF	$ == 0
422	2703	6	FastMath.java	asin	x	double	0	RET	$ != $
423	2707	6	FastMath.java	asin	x	double	0	RET	$ < -1.0
423	2707	6	FastMath.java	asin	x	double	0	RET	$ > 1.0
424	2711	6	FastMath.java	asin	x	double	0	RET	$ == 1.0
425	2715	6	FastMath.java	asin	x	double	0	RET	$ == -1.0
426	2719	6	FastMath.java	asin	x	double	0	RET	$ == 0.0
427	2779	6	FastMath.java	acos	x	double	0	RET	$ != $
428	2783	6	FastMath.java	acos	x	double	0	RET	$ < -1.0
428	2783	6	FastMath.java	acos	x	double	0	RET	$ > 1.0
429	2787	6	FastMath.java	acos	x	double	0	RET	$ == -1.0
430	2791	6	FastMath.java	acos	x	double	0	RET	$ == 1.0
431	2795	6	FastMath.java	acos	x	double	0	RET	$ == 0
432	2839	6	FastMath.java	acos	r	double	0	RET	Double.isInfinite($)
433	2866	6	FastMath.java	cbrt	exponent	int	0	RET	$ == -1023
434	2867	10	FastMath.java	cbrt	x	double	0	RET	$ == 0
435	2878	6	FastMath.java	cbrt	exponent	int	0	RET	$ == 1024
436	2933	6	FastMath.java	cbrt	subnormal	boolean	0	DEF	$
437	2947	8	FastMath.java	toRadians	x	double	0	RET	$ == 0.0
437	2947	8	FastMath.java	toRadians	x	double	0	RET	Double.isInfinite($)
438	2959	8	FastMath.java	toRadians	result	double	0	DEF	$ == 0
439	2972	8	FastMath.java	toDegrees	x	double	0	RET	$ == 0.0
439	2972	8	FastMath.java	toDegrees	x	double	0	RET	Double.isInfinite($)
440	3034	8	FastMath.java	ulp	x	double	0	RET	Double.isInfinite($)
441	3046	8	FastMath.java	ulp	x	float	0	RET	Float.isInfinite($)
442	3061	8	FastMath.java	scalb	n	int	0	RET	$ < 1024
442	3061	8	FastMath.java	scalb	n	int	0	RET	$ > -1023
443	3066	8	FastMath.java	scalb	d	double	0	RET	$ == 0
443	3066	8	FastMath.java	scalb	d	double	0	RET	Double.isInfinite($)
443	3066	8	FastMath.java	scalb	d	double	0	RET	Double.isNaN($)
444	3069	8	FastMath.java	scalb	n	int	0	RET	$ < -2098
445	3072	8	FastMath.java	scalb	n	int	0	RET	$ > 2097
446	3085	8	FastMath.java	scalb	n	int	1	RET	$ < 0
447	3087	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
448	3090	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -53
449	3099	16	FastMath.java	scalb	mostSignificantLostBit	long	0	DEF	$ != 0
450	3111	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
14851	3114	16	FastMath.java	scalb	mantissa	long	0	NIL-WHILE	($ >>> 52) != 1
451	3121	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
452	3127	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
453	3145	8	FastMath.java	scalb	n	int	0	RET	$ > -127
453	3145	8	FastMath.java	scalb	n	int	0	RET	$ < 128
454	3150	8	FastMath.java	scalb	f	float	0	RET	Float.isNaN($)
454	3150	8	FastMath.java	scalb	f	float	0	RET	$ == 0f
454	3150	8	FastMath.java	scalb	f	float	0	RET	Float.isInfinite($)
455	3153	8	FastMath.java	scalb	n	int	0	RET	$ < -277
456	3156	8	FastMath.java	scalb	n	int	0	RET	$ > 276
457	3169	8	FastMath.java	scalb	n	int	1	RET	$ < 0
458	3171	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
459	3174	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -24
460	3183	16	FastMath.java	scalb	mostSignificantLostBit	int	0	DEF	$ != 0
461	3195	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
14852	3198	16	FastMath.java	scalb	mantissa	int	0	NIL-WHILE	($ >>> 23) != 1
462	3205	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
463	3211	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
464	3254	8	FastMath.java	nextAfter	d	double	1	RET	Double.isNaN($)
464	3254	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
465	3256	15	FastMath.java	nextAfter	d	double	1	RET	$ == direction
465	3256	15	FastMath.java	nextAfter	direction	double	1	RET	d == $
466	3258	15	FastMath.java	nextAfter	d	double	1	RET	Double.isInfinite($)
467	3260	15	FastMath.java	nextAfter	d	double	0	RET	$ == 0
468	3268	8	FastMath.java	nextAfter	sign	long	1	RET	(direction < d) ^ ($ == 0L)
468	3268	8	FastMath.java	nextAfter	d	double	1	RET	(direction < $) ^ (sign == 0L)
468	3268	8	FastMath.java	nextAfter	direction	double	1	RET	($ < d) ^ (sign == 0L)
469	3310	8	FastMath.java	nextAfter	f	float	1	RET	Double.isNaN($)
469	3310	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
470	3312	15	FastMath.java	nextAfter	f	float	1	RET	$ == direction
470	3312	15	FastMath.java	nextAfter	direction	double	1	RET	f == $
471	3314	15	FastMath.java	nextAfter	f	float	1	RET	Float.isInfinite($)
472	3316	15	FastMath.java	nextAfter	f	float	0	RET	$ == 0f
473	3324	8	FastMath.java	nextAfter	sign	int	1	RET	(direction < f) ^ ($ == 0)
473	3324	8	FastMath.java	nextAfter	f	float	1	RET	(direction < $) ^ (sign == 0)
473	3324	8	FastMath.java	nextAfter	direction	double	1	RET	($ < f) ^ (sign == 0)
474	3339	8	FastMath.java	floor	x	double	0	RET	$ != $
475	3343	8	FastMath.java	floor	THIS	FastMath	0	RET	x >= $.TWO_POWER_52
475	3343	8	FastMath.java	floor	THIS	FastMath	0	RET	x <= -$.TWO_POWER_52
475	3343	8	FastMath.java	floor	x	double	0	RET	$ >= TWO_POWER_52
475	3343	8	FastMath.java	floor	x	double	0	RET	$ <= -TWO_POWER_52
476	3348	8	FastMath.java	floor	y	long	0	DEF	$ != x
476	3348	8	FastMath.java	floor	x	double	0	DEF	y != $
476	3348	8	FastMath.java	floor	x	double	0	DEF	$ < 0
477	3352	8	FastMath.java	floor	y	long	0	RET	$ == 0
478	3366	8	FastMath.java	ceil	x	double	0	RET	$ != $
479	3371	8	FastMath.java	ceil	y	double	0	RET	$ == x
479	3371	8	FastMath.java	ceil	x	double	0	RET	y == $
480	3377	8	FastMath.java	ceil	y	double	0	RET	$ == 0
481	3392	8	FastMath.java	rint	d	double	0	RET	$ > 0.5
482	3393	12	FastMath.java	rint	y	double	0	RET	$ == -1.0
483	3398	8	FastMath.java	rint	d	double	0	RET	$ < 0.5
484	3447	8	FastMath.java	min	a	float	0	RET	$ > b
484	3447	8	FastMath.java	min	b	float	0	RET	a > $
485	3450	8	FastMath.java	min	a	float	0	RET	$ < b
485	3450	8	FastMath.java	min	b	float	0	RET	a < $
486	3454	8	FastMath.java	min	a	float	0	RET	$ != b
486	3454	8	FastMath.java	min	b	float	0	RET	a != $
487	3460	8	FastMath.java	min	bits	int	0	RET	$ == 0x80000000
488	3472	8	FastMath.java	min	a	double	0	RET	$ > b
488	3472	8	FastMath.java	min	b	double	0	RET	a > $
489	3475	8	FastMath.java	min	a	double	0	RET	$ < b
489	3475	8	FastMath.java	min	b	double	0	RET	a < $
490	3479	8	FastMath.java	min	a	double	0	RET	$ != b
490	3479	8	FastMath.java	min	b	double	0	RET	a != $
491	3485	8	FastMath.java	min	bits	long	0	RET	$ == 0x8000000000000000L
492	3515	8	FastMath.java	max	a	float	0	RET	$ > b
492	3515	8	FastMath.java	max	b	float	0	RET	a > $
493	3518	8	FastMath.java	max	a	float	0	RET	$ < b
493	3518	8	FastMath.java	max	b	float	0	RET	a < $
494	3522	8	FastMath.java	max	a	float	0	RET	$ != b
494	3522	8	FastMath.java	max	b	float	0	RET	a != $
495	3528	8	FastMath.java	max	bits	int	0	RET	$ == 0x80000000
496	3540	8	FastMath.java	max	a	double	0	RET	$ > b
496	3540	8	FastMath.java	max	b	double	0	RET	a > $
497	3543	8	FastMath.java	max	a	double	0	RET	$ < b
497	3543	8	FastMath.java	max	b	double	0	RET	a < $
498	3547	8	FastMath.java	max	a	double	0	RET	$ != b
498	3547	8	FastMath.java	max	b	double	0	RET	a != $
499	3553	8	FastMath.java	max	bits	long	0	RET	$ == 0x8000000000000000L
500	3574	8	FastMath.java	hypot	x	double	1	RET	Double.isInfinite($)
500	3574	8	FastMath.java	hypot	y	double	1	RET	Double.isInfinite($)
501	3576	15	FastMath.java	hypot	x	double	1	RET	Double.isNaN($)
501	3576	15	FastMath.java	hypot	y	double	1	RET	Double.isNaN($)
502	3582	12	FastMath.java	hypot	expX	int	1	RET	$ > expY + 27
502	3582	12	FastMath.java	hypot	expY	int	1	RET	expX > $ + 27
503	3585	19	FastMath.java	hypot	expX	int	1	RET	expY > $ + 27
503	3585	19	FastMath.java	hypot	expY	int	1	RET	$ > expX + 27
504	3647	8	FastMath.java	copySign	m	long	0	RET	($^s) >= 0
504	3647	8	FastMath.java	copySign	s	long	0	RET	(m^$) >= 0
505	3668	8	FastMath.java	copySign	m	int	0	RET	($^s) >= 0
505	3668	8	FastMath.java	copySign	s	int	0	RET	(m^$) >= 0
14833	108	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 7
14834	121	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
174	128	12	FastMathCalc.java	buildSinCosTables	i	int	1	DEF	($ & 1) == 0
14835	177	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
14836	215	8	FastMathCalc.java	slowCos	i	int	0	NIL-FOR	$ >= 0
175	219	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 1) != 0
176	226	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 2) != 0
177	235	8	FastMathCalc.java	slowCos	result	double	0	DEF	$ != null
14837	259	8	FastMathCalc.java	slowSin	i	int	0	NIL-FOR	$ >= 0
178	263	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 1) == 0
179	270	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 2) != 0
180	279	8	FastMathCalc.java	slowSin	result	double	0	DEF	$ != null
14838	303	8	FastMathCalc.java	slowexp	i	int	0	NIL-FOR	$ >= 0
181	316	8	FastMathCalc.java	slowexp	result	double	0	DEF	$ != null
182	330	8	FastMathCalc.java	split	d	double	1	DEF	$ > -8e298
182	330	8	FastMathCalc.java	split	d	double	1	DEF	$ < 8e298
183	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ < 8e298
183	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ > -8e298
184	407	8	FastMathCalc.java	splitReciprocal	in	double	0	DEF	$[0] == 0.0
185	415	8	FastMathCalc.java	splitReciprocal	result	double	0	DEF	$[1] != $[1]
14839	422	8	FastMathCalc.java	splitReciprocal	i	int	0	NIL-FOR	$ < 2
14840	510	8	FastMathCalc.java	expint	p	int	0	NIL-WHILE	$ > 0
186	511	12	FastMathCalc.java	expint	p	int	0	DEF	($ & 1) != 0
187	522	8	FastMathCalc.java	expint	result	double	0	DEF	$ != null
14841	578	8	FastMathCalc.java	slowLog	i	int	0	NIL-FOR	$ >= 0
188	639	8	FastMathCalc.java	format	d	double	1	RET	$ != $
189	654	8	FastMathCalc.java	checkLen	expectedLen	int	0	DimensionMismatchException	$ != actual
189	654	8	FastMathCalc.java	checkLen	actual	int	0	DimensionMismatchException	expectedLen != $
3371	97	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	$.normalization == $.DstNormalization.ORTHOGONAL_DST_I
3372	101	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	type == $.TransformType.FORWARD
3372	101	8	FastSineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
3373	141	8	FastSineTransformer.java	fst	THIS	FastSineTransformer	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo(f.$.length)
3373	141	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($.length)
3374	146	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	$[0] != 0.0
3375	152	8	FastSineTransformer.java	fst	n	int	0	RET	$ == 1
16729	161	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
16729	161	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
16730	174	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
16730	174	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
17020	97	8	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	NIL-FOR	i < value.$.length
17020	97	8	FieldHermiteInterpolator.java	addSamplePoint	i	int	0	NIL-FOR	$ < value.length
17020	97	8	FieldHermiteInterpolator.java	addSamplePoint	value	T[]	0	NIL-FOR	i < $.length
3988	100	12	FieldHermiteInterpolator.java	addSamplePoint	i	int	0	DEF	$ > 1
17021	103	16	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	NIL-FOR	j < y.$.length
17021	103	16	FieldHermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < y.length
17021	103	16	FieldHermiteInterpolator.java	addSamplePoint	y	T[]	0	NIL-FOR	j < $.length
17022	112	12	FieldHermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < n
17022	112	12	FieldHermiteInterpolator.java	addSamplePoint	n	int	0	NIL-FOR	j < $
3989	114	16	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	ZeroException	x.equals($.abscissae.get(n - (j + 1)))
3989	114	16	FieldHermiteInterpolator.java	addSamplePoint	j	int	0	ZeroException	x.equals(abscissae.get(n - ($ + 1)))
3989	114	16	FieldHermiteInterpolator.java	addSamplePoint	n	int	0	ZeroException	x.equals(abscissae.get($ - (j + 1)))
3989	114	16	FieldHermiteInterpolator.java	addSamplePoint	x	T	0	ZeroException	$.equals(abscissae.get(n - (j + 1)))
17023	118	16	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	NIL-FOR	k < y.$.length
17023	118	16	FieldHermiteInterpolator.java	addSamplePoint	k	int	0	NIL-FOR	$ < y.length
17023	118	16	FieldHermiteInterpolator.java	addSamplePoint	y	T[]	0	NIL-FOR	k < $.length
3990	144	8	FieldHermiteInterpolator.java	value	THIS	FieldHermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
17024	150	8	FieldHermiteInterpolator.java	value	THIS	FieldHermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
17024	150	8	FieldHermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
17025	152	12	FieldHermiteInterpolator.java	value	THIS	FieldHermiteInterpolator	0	NIL-FOR	k < value.$.length
17025	152	12	FieldHermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
17025	152	12	FieldHermiteInterpolator.java	value	value	T[]	0	NIL-FOR	k < $.length
3991	175	8	FieldHermiteInterpolator.java	derivatives	THIS	FieldHermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
17026	183	8	FieldHermiteInterpolator.java	derivatives	i	int	0	NIL-FOR	$ < order
17026	183	8	FieldHermiteInterpolator.java	derivatives	order	int	0	NIL-FOR	i < $
17027	191	8	FieldHermiteInterpolator.java	derivatives	THIS	FieldHermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
17027	191	8	FieldHermiteInterpolator.java	derivatives	i	int	0	NIL-FOR	$ < topDiagonal.size()
17028	194	12	FieldHermiteInterpolator.java	derivatives	j	int	0	NIL-FOR	$ >= 0
17029	195	16	FieldHermiteInterpolator.java	derivatives	THIS	FieldHermiteInterpolator	0	NIL-FOR	k < derivatives[j].length
17029	195	16	FieldHermiteInterpolator.java	derivatives	k	int	0	NIL-FOR	$ < derivatives[j].length
17029	195	16	FieldHermiteInterpolator.java	derivatives	j	int	0	NIL-FOR	k < derivatives[$].length
17029	195	16	FieldHermiteInterpolator.java	derivatives	derivatives	T[][]	0	NIL-FOR	k < $[j].length
3992	200	16	FieldHermiteInterpolator.java	derivatives	j	int	0	DEF	$ > 0
1631	86	8	FieldLUDecomposition.java	FieldLUDecomposition	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
15477	100	8	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
15477	100	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
15478	107	8	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	$ < m
15478	107	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	col < $
15479	112	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < col
15479	112	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	row < $
15480	115	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < row
15480	115	16	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	i < $
15481	123	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
15481	123	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
15482	126	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < col
15482	126	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	i < $
1632	131	16	FieldLUDecomposition.java	FieldLUDecomposition	THIS	FieldLUDecomposition	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
1632	131	16	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
1632	131	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
1633	138	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	RET	$ >= m
1633	138	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	RET	nonZero >= $
1634	144	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	$ != col
1634	144	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	nonZero != $
15483	146	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < m
15483	146	16	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	i < $
15484	159	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
15484	159	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
1635	173	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.singular
1635	173	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.cachedL == null
15485	176	12	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
15485	176	12	FieldLUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
15486	178	16	FieldLUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
15486	178	16	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1636	193	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.singular
1636	193	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.cachedU == null
15487	196	12	FieldLUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
15487	196	12	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
15488	198	16	FieldLUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
15488	198	16	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1637	216	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.cachedP == null
1637	216	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.singular
15489	219	12	FieldLUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
15489	219	12	FieldLUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1638	240	8	FieldLUDecomposition.java	getDeterminant	THIS	FieldLUDecomposition	1	RET	$.singular
15490	245	12	FieldLUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
15490	245	12	FieldLUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
666	78	8	FieldRotation.java	FieldRotation	needsNormalization	boolean	1	DEF	$
667	120	8	FieldRotation.java	FieldRotation	norm	T	0	MathIllegalArgumentException	$.getReal() == 0
668	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m[1].length != 3
668	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m[2].length != 3
668	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m[0].length != 3
668	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m.$.length != 3
668	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$[1].length != 3
668	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$[2].length != 3
668	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$[0].length != 3
668	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$.length != 3
669	184	8	FieldRotation.java	FieldRotation	det	T	0	NotARotationMatrixException	$.getReal() < 0.0
670	268	8	FieldRotation.java	FieldRotation	normProduct	T	0	MathArithmeticException	$.getReal() == 0
671	274	8	FieldRotation.java	FieldRotation	normProduct	T	1	DEF	dot.getReal() < ((2.0e-15 - 1.0) * $.getReal())
671	274	8	FieldRotation.java	FieldRotation	dot	T	1	DEF	$.getReal() < ((2.0e-15 - 1.0) * normProduct.getReal())
672	346	8	FieldRotation.java	mat2quat	s	T	1	DEF	$.getReal() > -0.19
673	355	12	FieldRotation.java	mat2quat	s	T	1	DEF	$.getReal() > -0.19
674	364	16	FieldRotation.java	mat2quat	s	T	1	DEF	$.getReal() > -0.19
675	432	8	FieldRotation.java	getAxis	squaredSine	T	1	RET	$.getReal() == 0
676	435	15	FieldRotation.java	getAxis	THIS	FieldRotation	0	RET	$.q0.getReal() < 0
677	448	8	FieldRotation.java	getAngle	THIS	FieldRotation	1	RET	$.q0.getReal() < -0.1
677	448	8	FieldRotation.java	getAngle	THIS	FieldRotation	1	RET	$.q0.getReal() > 0.1
678	450	15	FieldRotation.java	getAngle	THIS	FieldRotation	0	RET	$.q0.getReal() < 0
679	494	8	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
680	503	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
680	503	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
681	510	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
682	519	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
682	519	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
683	526	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
684	535	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
684	535	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
685	542	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
686	551	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
686	551	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
687	558	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
688	567	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
688	567	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
689	574	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
690	583	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
690	583	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
691	590	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
692	599	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
692	599	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
693	606	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
694	615	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
694	615	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
695	622	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
696	631	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
696	631	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
697	638	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
698	647	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
698	647	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
699	654	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
700	663	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
700	663	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
701	679	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
701	679	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
14877	1090	8	FieldRotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
702	1131	12	FieldRotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
702	1131	12	FieldRotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
702	1131	12	FieldRotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
775	73	8	FieldVector3D.java	FieldVector3D	THIS	FieldVector3D	0	DimensionMismatchException	v.$.length != 3
775	73	8	FieldVector3D.java	FieldVector3D	v	T[]	0	DimensionMismatchException	$.length != 3
776	376	8	FieldVector3D.java	getNormInf	xAbs	T	1	RET	$.getReal() <= yAbs.getReal()
776	376	8	FieldVector3D.java	getNormInf	yAbs	T	1	RET	xAbs.getReal() <= $.getReal()
777	377	12	FieldVector3D.java	getNormInf	yAbs	T	1	RET	$.getReal() <= zAbs.getReal()
777	377	12	FieldVector3D.java	getNormInf	zAbs	T	1	RET	yAbs.getReal() <= $.getReal()
778	383	12	FieldVector3D.java	getNormInf	xAbs	T	1	RET	$.getReal() <= zAbs.getReal()
778	383	12	FieldVector3D.java	getNormInf	zAbs	T	1	RET	xAbs.getReal() <= $.getReal()
779	525	8	FieldVector3D.java	normalize	s	T	0	MathArithmeticException	$.getReal() == 0
780	549	8	FieldVector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
781	553	8	FieldVector3D.java	orthogonal	THIS	FieldVector3D	1	RET	FastMath.abs($.x.getReal()) <= threshold
781	553	8	FieldVector3D.java	orthogonal	threshold	double	1	RET	FastMath.abs(x.getReal()) <= $
782	556	15	FieldVector3D.java	orthogonal	THIS	FieldVector3D	1	RET	FastMath.abs($.y.getReal()) <= threshold
782	556	15	FieldVector3D.java	orthogonal	threshold	double	1	RET	FastMath.abs(y.getReal()) <= $
783	582	8	FieldVector3D.java	angle	normProduct	T	0	MathArithmeticException	$.getReal() == 0
784	588	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() < -threshold
784	588	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() > threshold
784	588	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() < -$
784	588	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() > $
785	591	12	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() >= 0
786	618	8	FieldVector3D.java	angle	normProduct	T	0	MathArithmeticException	$.getReal() == 0
787	624	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() < -threshold
787	624	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() > threshold
787	624	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() < -$
787	624	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() > $
788	627	12	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() >= 0
789	718	8	FieldVector3D.java	equals	THIS	FieldVector3D	0	RET	$ == other
789	718	8	FieldVector3D.java	equals	other	Object	0	RET	this == $
790	722	8	FieldVector3D.java	equals	other	Object	0	RET	$ instanceof FieldVector3D
791	725	12	FieldVector3D.java	equals	rhs	FieldVector3D<T>	0	RET	$.isNaN()
792	744	8	FieldVector3D.java	hashCode	THIS	FieldVector3D	0	RET	$.isNaN()
793	865	8	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dy.getReal()
793	865	8	FieldVector3D.java	distanceInf	dy	T	1	RET	dx.getReal() <= $.getReal()
794	866	12	FieldVector3D.java	distanceInf	dy	T	1	RET	$.getReal() <= dz.getReal()
794	866	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dy.getReal() <= $.getReal()
795	872	12	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dz.getReal()
795	872	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dx.getReal() <= $.getReal()
796	891	8	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dy.getReal()
796	891	8	FieldVector3D.java	distanceInf	dy	T	1	RET	dx.getReal() <= $.getReal()
797	892	12	FieldVector3D.java	distanceInf	dy	T	1	RET	$.getReal() <= dz.getReal()
797	892	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dy.getReal() <= $.getReal()
798	898	12	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dz.getReal()
798	898	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dx.getReal() <= $.getReal()
4203	145	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	nbPoints	int	0	NumberIsTooSmallException	$ <= 1
4204	150	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	stepSize	double	0	NotPositiveException	$ <= 0
4205	156	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	THIS	FiniteDifferencesDifferentiator	0	NumberIsTooLargeException	2 * $.halfSampleSpan >= tUpper - tLower
4205	156	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	tLower	double	0	NumberIsTooLargeException	2 * halfSampleSpan >= tUpper - $
4205	156	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	tUpper	double	0	NumberIsTooLargeException	2 * halfSampleSpan >= $ - tLower
17150	201	8	FiniteDifferencesDifferentiator.java	evaluate	THIS	FiniteDifferencesDifferentiator	0	NIL-FOR	i < $.nbPoints
17150	201	8	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	$ < nbPoints
17151	205	12	FiniteDifferencesDifferentiator.java	evaluate	j	int	0	NIL-FOR	$ <= i
17151	205	12	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	j <= $
17152	221	8	FiniteDifferencesDifferentiator.java	evaluate	THIS	FiniteDifferencesDifferentiator	0	NIL-FOR	i < $.nbPoints
17152	221	8	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	$ < nbPoints
4206	222	12	FiniteDifferencesDifferentiator.java	evaluate	i	int	1	DEF	$ == 0
2298	103	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
3250	58	8	FixedElapsedTime.java	FixedElapsedTime	maxTime	long	0	NumberIsTooSmallException	$ < 0
3251	72	8	FixedElapsedTime.java	isSatisfied	THIS	FixedElapsedTime	0	DEF	$.endTime < 0
3236	43	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	NumberIsTooSmallException	$ <= 0
3237	57	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
2276	89	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
1026	181	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(a0) > $
1026	181	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	FastMath.abs($) > overflow
1027	187	8	Fraction.java	Fraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
1027	187	8	Fraction.java	Fraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
1027	187	8	Fraction.java	Fraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
14900	203	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
1028	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(q2) > $
1028	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(p2) > $
1028	209	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	FastMath.abs($) > overflow
1028	209	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	FastMath.abs($) > overflow
1029	214	12	Fraction.java	Fraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
1029	214	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
1029	214	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
1029	214	12	Fraction.java	Fraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
1029	214	12	Fraction.java	Fraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
1029	214	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
1029	214	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
1030	226	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
1030	226	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
1031	230	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
1031	230	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
1032	257	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == 0
1033	261	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ < 0
1034	262	12	Fraction.java	Fraction	num	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
1034	262	12	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
1035	272	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
1036	278	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
1037	292	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
1038	333	8	Fraction.java	equals	THIS	Fraction	0	RET	$ == other
1038	333	8	Fraction.java	equals	other	Object	0	RET	this == $
1039	336	8	Fraction.java	equals	other	Object	0	RET	$ instanceof Fraction
1040	406	8	Fraction.java	negate	THIS	Fraction	0	MathArithmeticException	$.numerator==Integer.MIN_VALUE
1041	477	8	Fraction.java	addSub	fraction	Fraction	0	NullArgumentException	$ == null
1042	481	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
1043	484	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
1043	484	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
1044	490	8	Fraction.java	addSub	d1	int	0	RET	$==1
1045	514	8	Fraction.java	addSub	w	BigInteger	0	MathArithmeticException	$.bitLength() > 31
1046	534	8	Fraction.java	multiply	fraction	Fraction	0	NullArgumentException	$ == null
1047	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
1047	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
1047	537	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
1048	569	8	Fraction.java	divide	fraction	Fraction	0	NullArgumentException	$ == null
1049	572	8	Fraction.java	divide	THIS	Fraction	0	MathArithmeticException	fraction.$.numerator == 0
1049	572	8	Fraction.java	divide	fraction	Fraction	0	MathArithmeticException	$.numerator == 0
1050	612	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ == 0
1051	616	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
1052	620	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
1052	620	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
1053	623	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ < 0
1054	624	12	Fraction.java	getReducedFraction	numerator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
1054	624	12	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
1055	651	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
1056	653	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
1010	177	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
1011	179	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
1012	199	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1013	221	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
1014	254	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
16212	90	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2502	132	8	Frequency.java	incrementValue	v	Comparable<?>	0	DEF	$ instanceof Integer
2503	137	12	Frequency.java	incrementValue	count	Long	1	DEF	$ == null
16213	228	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
2504	242	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
2505	248	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
2506	308	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
2507	359	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
2508	362	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
2509	366	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
2510	373	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
2511	380	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
2511	380	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
2511	380	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
2512	384	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
2512	384	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
2512	384	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
16214	389	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2513	391	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
2513	391	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
2513	391	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
2514	451	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
16215	511	8	Frequency.java	merge	iter	Iterator<Entry<Comparable<?>,Long>>	0	NIL-WHILE	$.hasNext()
2515	577	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
2515	577	8	Frequency.java	equals	obj	Object	0	RET	this == $
2516	580	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
2517	584	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
2518	585	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
2518	585	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
2519	588	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
2519	588	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
4139	427	8	FunctionUtils.java	sample	n	int	0	NotStrictlyPositiveException	$ <= 0
4140	432	8	FunctionUtils.java	sample	min	double	0	NumberIsTooLargeException	$ >= max
4140	432	8	FunctionUtils.java	sample	max	double	0	NumberIsTooLargeException	min >= $
17082	438	8	FunctionUtils.java	sample	i	int	0	NIL-FOR	$ < n
17082	438	8	FunctionUtils.java	sample	n	int	0	NIL-FOR	i < $
3293	146	8	FuzzyKMeansClusterer.java	FuzzyKMeansClusterer	fuzziness	double	0	NumberIsTooSmallException	$ <= 1.0d
3294	211	8	FuzzyKMeansClusterer.java	getMembershipMatrix	THIS	FuzzyKMeansClusterer	0	MathIllegalStateException	$.membershipMatrix == null
3295	242	8	FuzzyKMeansClusterer.java	getObjectiveFunctionValue	THIS	FuzzyKMeansClusterer	0	MathIllegalStateException	$.points == null
3295	242	8	FuzzyKMeansClusterer.java	getObjectiveFunctionValue	THIS	FuzzyKMeansClusterer	0	MathIllegalStateException	$.clusters == null
3296	277	8	FuzzyKMeansClusterer.java	cluster	THIS	FuzzyKMeansClusterer	0	NumberIsTooSmallException	size < $.k
3296	277	8	FuzzyKMeansClusterer.java	cluster	size	int	0	NumberIsTooSmallException	$ < k
3297	288	8	FuzzyKMeansClusterer.java	cluster	size	int	0	RET	$ == 0
16689	296	8	FuzzyKMeansClusterer.java	cluster	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.k
16689	296	8	FuzzyKMeansClusterer.java	cluster	i	int	0	NIL-FOR	$ < k
16690	304	8	FuzzyKMeansClusterer.java	cluster	THIS	FuzzyKMeansClusterer	0	NIL-DOWHILE	difference > $.epsilon
16690	304	8	FuzzyKMeansClusterer.java	cluster	iteration	int	0	NIL-DOWHILE	++$ < max
16690	304	8	FuzzyKMeansClusterer.java	cluster	max	int	0	NIL-DOWHILE	++iteration < $
16690	304	8	FuzzyKMeansClusterer.java	cluster	difference	double	0	NIL-DOWHILE	$ > epsilon
16691	328	16	FuzzyKMeansClusterer.java	updateClusterCenters	THIS	FuzzyKMeansClusterer	0	NIL-FOR	idx < arr.$.length
16691	328	16	FuzzyKMeansClusterer.java	updateClusterCenters	idx	int	0	NIL-FOR	$ < arr.length
16691	328	16	FuzzyKMeansClusterer.java	updateClusterCenters	arr	double[]	0	NIL-FOR	idx < $.length
16692	347	8	FuzzyKMeansClusterer.java	updateMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
16692	347	8	FuzzyKMeansClusterer.java	updateMembershipMatrix	i	int	0	NIL-FOR	$ < points.size()
16693	351	12	FuzzyKMeansClusterer.java	updateMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	j < $.clusters.size()
16693	351	12	FuzzyKMeansClusterer.java	updateMembershipMatrix	j	int	0	NIL-FOR	$ < clusters.size()
3298	362	16	FuzzyKMeansClusterer.java	updateMembershipMatrix	THIS	FuzzyKMeansClusterer	0	DEF	$.membershipMatrix[i][j] > maxMembership
3298	362	16	FuzzyKMeansClusterer.java	updateMembershipMatrix	j	int	0	DEF	membershipMatrix[i][$] > maxMembership
3298	362	16	FuzzyKMeansClusterer.java	updateMembershipMatrix	maxMembership	double	0	DEF	membershipMatrix[i][j] > $
3298	362	16	FuzzyKMeansClusterer.java	updateMembershipMatrix	i	int	0	DEF	membershipMatrix[$][j] > maxMembership
16694	375	8	FuzzyKMeansClusterer.java	initializeMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
16694	375	8	FuzzyKMeansClusterer.java	initializeMembershipMatrix	i	int	0	NIL-FOR	$ < points.size()
16695	376	12	FuzzyKMeansClusterer.java	initializeMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	j < $.k
16695	376	12	FuzzyKMeansClusterer.java	initializeMembershipMatrix	j	int	0	NIL-FOR	$ < k
16696	392	8	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
16696	392	8	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	i	int	0	NIL-FOR	$ < points.size()
16697	393	12	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	THIS	FuzzyKMeansClusterer	0	NIL-FOR	j < $.clusters.size()
16697	393	12	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	j	int	0	NIL-FOR	$ < clusters.size()
16698	407	8	FuzzyKMeansClusterer.java	saveMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
16698	407	8	FuzzyKMeansClusterer.java	saveMembershipMatrix	i	int	0	NIL-FOR	$ < points.size()
2524	80	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
2423	81	8	GTest.java	g	THIS	GTest	0	DimensionMismatchException	expected.$.length < 2
2423	81	8	GTest.java	g	expected	double[]	0	DimensionMismatchException	$.length < 2
2424	84	8	GTest.java	g	THIS	GTest	0	DimensionMismatchException	expected.$.length != observed.$.length
2424	84	8	GTest.java	g	expected	double[]	0	DimensionMismatchException	$.length != observed.length
2424	84	8	GTest.java	g	observed	long[]	0	DimensionMismatchException	expected.length != $.length
16153	92	8	GTest.java	g	THIS	GTest	0	NIL-FOR	i < observed.$.length
16153	92	8	GTest.java	g	i	int	0	NIL-FOR	$ < observed.length
16153	92	8	GTest.java	g	observed	long[]	0	NIL-FOR	i < $.length
2425	98	8	GTest.java	g	sumExpected	double	0	DEF	Math.abs($ - sumObserved) > 10E-6
2425	98	8	GTest.java	g	sumObserved	double	0	DEF	Math.abs(sumExpected - $) > 10E-6
16154	103	8	GTest.java	g	THIS	GTest	0	NIL-FOR	i < observed.$.length
16154	103	8	GTest.java	g	i	int	0	NIL-FOR	$ < observed.length
16154	103	8	GTest.java	g	observed	long[]	0	NIL-FOR	i < $.length
2426	242	8	GTest.java	gTest	alpha	double	0	OutOfRangeException	$ <= 0
2426	242	8	GTest.java	gTest	alpha	double	0	OutOfRangeException	$ > 0.5
16155	264	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
16155	264	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
16155	264	8	GTest.java	entropy	k	long[][]	0	NIL-FOR	i < $.length
16156	265	12	GTest.java	entropy	THIS	GTest	0	NIL-FOR	j < k[i].length
16156	265	12	GTest.java	entropy	j	int	0	NIL-FOR	$ < k[i].length
16156	265	12	GTest.java	entropy	i	int	0	NIL-FOR	j < k[$].length
16156	265	12	GTest.java	entropy	k	long[][]	0	NIL-FOR	j < $[i].length
16157	269	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
16157	269	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
16157	269	8	GTest.java	entropy	k	long[][]	0	NIL-FOR	i < $.length
16158	270	12	GTest.java	entropy	THIS	GTest	0	NIL-FOR	j < k[i].length
16158	270	12	GTest.java	entropy	j	int	0	NIL-FOR	$ < k[i].length
16158	270	12	GTest.java	entropy	i	int	0	NIL-FOR	j < k[$].length
16158	270	12	GTest.java	entropy	k	long[][]	0	NIL-FOR	j < $[i].length
2427	271	16	GTest.java	entropy	j	int	0	DEF	k[i][$] != 0
2427	271	16	GTest.java	entropy	i	int	0	DEF	k[$][j] != 0
2427	271	16	GTest.java	entropy	k	long[][]	0	DEF	$[i][j] != 0
16159	294	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
16159	294	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
16159	294	8	GTest.java	entropy	k	long[]	0	NIL-FOR	i < $.length
16160	297	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
16160	297	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
16160	297	8	GTest.java	entropy	k	long[]	0	NIL-FOR	i < $.length
2428	298	12	GTest.java	entropy	i	int	0	DEF	k[$] != 0
2428	298	12	GTest.java	entropy	k	long[]	0	DEF	$[i] != 0
2429	352	8	GTest.java	gDataSetsComparison	THIS	GTest	0	DimensionMismatchException	observed1.$.length < 2
2429	352	8	GTest.java	gDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
2430	355	8	GTest.java	gDataSetsComparison	THIS	GTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
2430	355	8	GTest.java	gDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
2430	355	8	GTest.java	gDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
16161	371	8	GTest.java	gDataSetsComparison	THIS	GTest	0	NIL-FOR	i < observed1.$.length
16161	371	8	GTest.java	gDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
16161	371	8	GTest.java	gDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2431	372	12	GTest.java	gDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
2431	372	12	GTest.java	gDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
2431	372	12	GTest.java	gDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
2431	372	12	GTest.java	gDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
2432	383	8	GTest.java	gDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
2432	383	8	GTest.java	gDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
2433	426	8	GTest.java	rootLogLikelihoodRatio	k11	long	0	DEF	(double) $ / ($ + k12) < (double) k21 / (k21 + k22)
2433	426	8	GTest.java	rootLogLikelihoodRatio	k12	long	0	DEF	(double) k11 / (k11 + $) < (double) k21 / (k21 + k22)
2433	426	8	GTest.java	rootLogLikelihoodRatio	k21	long	0	DEF	(double) k11 / (k11 + k12) < (double) $ / ($ + k22)
2433	426	8	GTest.java	rootLogLikelihoodRatio	k22	long	0	DEF	(double) k11 / (k11 + k12) < (double) k21 / (k21 + $)
2434	531	8	GTest.java	gTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
2434	531	8	GTest.java	gTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
3328	247	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
3328	247	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
3329	249	15	Gamma.java	logGamma	x	double	1	RET	$ < 0.5
3330	251	15	Gamma.java	logGamma	x	double	1	RET	$ <= 2.5
3331	253	15	Gamma.java	logGamma	x	double	1	RET	$ <= 8.0
16706	256	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ <= n
16706	256	12	Gamma.java	logGamma	n	int	0	NIL-FOR	i <= $
3332	316	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
3332	316	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
3332	316	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
3332	316	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
3333	318	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
3334	320	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x >= $ + 1
3334	320	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ >= a + 1
16707	329	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
16707	329	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	FastMath.abs($/sum) > epsilon
16707	329	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	FastMath.abs(an/$) > epsilon
16707	329	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	$ < Double.POSITIVE_INFINITY
16707	329	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	FastMath.abs(an/sum) > $
16707	329	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
3335	339	12	Gamma.java	regularizedGammaP	n	double	1	MaxCountExceededException	$ >= maxIterations
3335	339	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxCountExceededException	n >= $
3336	341	19	Gamma.java	regularizedGammaP	sum	double	1	DEF	Double.isInfinite($)
3337	394	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
3337	394	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
3337	394	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
3337	394	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
3338	396	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
3339	398	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $ + 1.0
3339	398	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a + 1.0
3340	446	8	Gamma.java	digamma	x	double	0	RET	$ > 0
3340	446	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
3341	452	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
3342	476	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
3342	476	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
3343	480	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
16708	514	8	Gamma.java	lanczos	i	int	0	NIL-FOR	$ > 0
3344	534	8	Gamma.java	invGamma1pm1	x	double	0	NumberIsTooSmallException	$ < -0.5
3345	537	8	Gamma.java	invGamma1pm1	x	double	0	NumberIsTooLargeException	$ > 1.5
3346	543	8	Gamma.java	invGamma1pm1	t	double	1	DEF	$ < 0.0
3347	569	12	Gamma.java	invGamma1pm1	x	double	1	DEF	$ > 0.5
3348	604	12	Gamma.java	invGamma1pm1	x	double	1	DEF	$ > 0.5
3349	628	8	Gamma.java	logGamma1p	x	double	0	NumberIsTooSmallException	$ < -0.5
3350	631	8	Gamma.java	logGamma1p	x	double	0	NumberIsTooLargeException	$ > 1.5
3351	650	8	Gamma.java	gamma	x	double	0	RET	$ == FastMath.rint($)
3351	650	8	Gamma.java	gamma	x	double	0	RET	$ <= 0.0
3352	656	8	Gamma.java	gamma	absX	double	1	DEF	$ <= 20.0
3353	657	12	Gamma.java	gamma	x	double	1	DEF	$ >= 1.0
16709	668	16	Gamma.java	gamma	t	double	0	NIL-WHILE	$ > 2.5
16710	683	16	Gamma.java	gamma	t	double	0	NIL-WHILE	$ < -0.5
3354	694	12	Gamma.java	gamma	x	double	1	DEF	$ > 0.0
1256	134	8	GammaDistribution.java	GammaDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1257	137	8	GammaDistribution.java	GammaDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1258	238	8	GammaDistribution.java	density	x	double	0	RET	$ < 0
1259	242	8	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	FastMath.log(y) >= $.maxLogY
1259	242	8	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	y <= $.minY
1259	242	8	GammaDistribution.java	density	y	double	0	RET	FastMath.log($) >= maxLogY
1259	242	8	GammaDistribution.java	density	y	double	0	RET	$ <= minY
1260	276	8	GammaDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1261	374	8	GammaDistribution.java	sample	THIS	GammaDistribution	0	RET	$.shape < 1
1262	383	16	GammaDistribution.java	sample	p	double	1	RET	$ <= 1
1263	389	20	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.exp(-$)
1263	389	20	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.exp(-x)
1264	401	20	GammaDistribution.java	sample	THIS	GammaDistribution	1	DEF	u2 > FastMath.pow(x, $.shape - 1)
1264	401	20	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.pow($, shape - 1)
1264	401	20	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.pow(x, shape - 1)
1265	420	12	GammaDistribution.java	sample	v	double	0	DEF	$ <= 0
1266	428	12	GammaDistribution.java	sample	x2	double	0	RET	u < 1 - 0.0331 * $ * $
1266	428	12	GammaDistribution.java	sample	u	double	0	RET	$ < 1 - 0.0331 * x2 * x2
1267	432	12	GammaDistribution.java	sample	v	double	0	RET	FastMath.log(u) < 0.5 * x2 + d * (1 - $ + FastMath.log($))
1267	432	12	GammaDistribution.java	sample	x2	double	0	RET	FastMath.log(u) < 0.5 * $ + d * (1 - v + FastMath.log(v))
1267	432	12	GammaDistribution.java	sample	u	double	0	RET	FastMath.log($) < 0.5 * x2 + d * (1 - v + FastMath.log(v))
1267	432	12	GammaDistribution.java	sample	d	double	0	RET	FastMath.log(u) < 0.5 * x2 + $ * (1 - v + FastMath.log(v))
4269	53	8	GaussIntegrator.java	GaussIntegrator	THIS	GaussIntegrator	0	DimensionMismatchException	points.$.length != weights.$.length
4269	53	8	GaussIntegrator.java	GaussIntegrator	points	double[]	0	DimensionMismatchException	$.length != weights.length
4269	53	8	GaussIntegrator.java	GaussIntegrator	weights	double[]	0	DimensionMismatchException	points.length != $.length
17205	92	8	GaussIntegrator.java	integrate	THIS	GaussIntegrator	0	NIL-FOR	i < $.points.$.length
17205	92	8	GaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < points.length
17212	138	8	GaussIntegratorFactory.java	transform	THIS	GaussIntegratorFactory	0	NIL-FOR	i < points.$.length
17212	138	8	GaussIntegratorFactory.java	transform	i	int	0	NIL-FOR	$ < points.length
17212	138	8	GaussIntegratorFactory.java	transform	points	double[]	0	NIL-FOR	i < $.length
3102	87	8	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	NullArgumentException	$ == null
16588	97	8	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
16588	97	8	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
16589	106	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
16590	120	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
16590	120	12	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
16591	128	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
16591	128	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
16592	133	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
16592	133	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
16593	136	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < nC
16593	136	20	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	l < $
16594	150	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nC
16594	150	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	i < $
3103	158	12	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	$ != null
3104	160	16	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	RET	$
3105	175	8	GaussNewtonOptimizer.java	checkParameters	THIS	GaussNewtonOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
3105	175	8	GaussNewtonOptimizer.java	checkParameters	THIS	GaussNewtonOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
1962	110	8	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	NullArgumentException	$ == null
15882	120	8	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
15882	120	8	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
15883	130	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
15884	144	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
15884	144	12	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
15885	152	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
15885	152	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
15886	157	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
15886	157	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
15887	160	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < nC
15887	160	20	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	l < $
15888	174	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nC
15888	174	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	i < $
1963	182	12	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	$ != null
1964	184	16	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	RET	$
4022	63	8	Gaussian.java	Gaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
4023	229	8	Gaussian.java	value	coeff	double	1	DEF	$ <= Precision.SAFE_MIN
17065	233	12	Gaussian.java	value	THIS	Gaussian	0	NIL-FOR	n < f.$.length
17065	233	12	Gaussian.java	value	n	int	0	NIL-FOR	$ < f.length
17065	233	12	Gaussian.java	value	f	double[]	0	NIL-FOR	n < $.length
17066	238	16	Gaussian.java	value	k	int	0	NIL-FOR	$ >= 0
4024	240	20	Gaussian.java	value	k	int	1	DEF	$ > 2
4025	242	27	Gaussian.java	value	k	int	0	DEF	$ == 2
4026	246	16	Gaussian.java	value	n	int	0	DEF	($ & 0x1) == 1
3231	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ < 0
3231	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ > 1
3232	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ > 1
3232	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ < 0
16661	120	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
16661	120	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
16662	154	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
3233	159	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
3233	159	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
3234	165	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
3234	165	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
3235	175	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
1216	60	8	GeometricDistribution.java	GeometricDistribution	p	double	0	OutOfRangeException	$ > 1
1216	60	8	GeometricDistribution.java	GeometricDistribution	p	double	0	OutOfRangeException	$ <= 0
1217	79	8	GeometricDistribution.java	probability	x	int	1	DEF	$ < 0
1218	91	8	GeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
2296	114	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
2297	208	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	MathIllegalStateException	$.getN() > 0
3477	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	1	DEF	$.previousState != null
3477	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
16809	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16809	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
16810	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16810	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
17164	46	8	GradientFunction.java	value	THIS	GradientFunction	0	NIL-FOR	i < point.$.length
17164	46	8	GradientFunction.java	value	i	int	0	NIL-FOR	$ < point.length
17164	46	8	GradientFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
17165	56	8	GradientFunction.java	value	THIS	GradientFunction	0	NIL-FOR	i < point.$.length
17165	56	8	GradientFunction.java	value	i	int	0	NIL-FOR	$ < point.length
17165	56	8	GradientFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
3042	95	12	GradientMultivariateOptimizer.java	parseOptimizationData	THIS	GradientMultivariateOptimizer	0	DEF	$.data instanceof ObjectiveFunctionGradient
3418	228	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ < 0.0001
3418	228	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ > 0.9999
3419	263	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ < 0.0001
3419	263	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ > 0.9999
3420	269	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ < 0.0001
3420	269	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ > 0.9999
3421	275	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ > 0.9999
3421	275	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ < 0.0001
3422	281	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ > 999.9
3422	281	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ < 1.0001
3423	315	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ <= 6
3423	315	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ % 2 != 0
3424	319	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ > 0.9999
3424	319	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ < 0.0001
3425	325	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ < 0.0001
3425	325	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ > 0.9999
3426	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
3426	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
3426	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
16769	377	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
16769	377	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
16770	384	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
16770	384	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
16771	389	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
16771	389	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
16772	391	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
16772	391	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
3427	414	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ <= 0
3427	414	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ >= 7
3428	428	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
16773	429	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
16773	429	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
16773	429	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
16774	434	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
16774	434	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
16774	434	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
16775	470	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
16775	470	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
16775	470	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
16776	477	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
16776	477	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
3429	479	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
3429	479	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
16777	485	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
16777	485	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
16777	485	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
3430	494	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
3430	494	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
3430	494	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
3430	494	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
3430	494	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
16778	496	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
16778	496	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
16778	496	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
16779	501	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
16779	501	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
16779	501	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
3431	505	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * FastMath.max(1.0e-15, $)
3431	505	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * FastMath.max(1.0e-15, initialNorm)
16780	513	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
16780	513	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
16780	513	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
16781	532	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
16781	532	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
16782	533	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
16782	533	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
16782	533	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
16783	541	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
16783	541	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
16783	541	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
16784	567	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
16784	567	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
16785	573	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
16785	573	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
16786	580	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
16786	580	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
16786	580	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
3432	586	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
3432	586	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
16787	624	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-DOWHILE	$.isLastStep
3433	629	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
3434	634	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
3435	638	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3436	650	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
3436	650	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
3436	650	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
3436	650	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
3436	650	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
3436	650	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
16788	659	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
3437	664	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3437	664	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
3437	664	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3437	664	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
3437	664	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
3437	664	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3437	664	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
3437	664	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3437	664	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3437	664	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3438	677	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
16789	686	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < $.mainSetDimension
16789	686	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < mainSetDimension
3439	692	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
3439	692	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
3439	692	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
3439	692	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
3440	713	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3440	713	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
3441	716	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
3442	725	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
3442	725	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
3443	731	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
3443	731	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3443	731	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3444	743	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
3445	751	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
3445	751	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
3446	756	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
3446	756	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3446	756	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3447	767	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
3448	769	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
3448	769	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3448	769	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3449	780	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.isLastStep
3449	780	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
3449	780	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3450	792	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
3451	799	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
16790	802	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
16790	802	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
16791	808	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
16791	808	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
16792	814	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
16792	814	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
16792	814	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
16793	817	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
16793	817	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
16793	817	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
16794	820	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
16794	820	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
16794	820	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
16795	825	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
16795	825	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
16795	825	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
16796	830	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
16796	830	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
16797	831	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
16797	831	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
16798	832	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
16798	832	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
16798	832	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
3452	840	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
3453	847	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
3454	852	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
3455	862	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
3456	875	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
3457	877	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
3458	880	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
3458	880	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
3459	882	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
3459	882	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3460	884	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
3460	884	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
3461	889	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
3461	889	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
3461	889	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
3462	893	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
3462	893	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
3462	893	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
3463	898	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
3464	905	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
3464	905	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
3465	908	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
3465	908	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
3465	908	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
3465	908	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
3466	927	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
3467	933	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
3493	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynomials == null
3493	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials == null
16834	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynomials.$.length
16834	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynomials.length
3494	192	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
3495	199	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials != null
16835	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
16835	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
16835	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
16836	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
16836	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
16836	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
3496	212	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
16837	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
16837	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
16838	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
16838	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
3497	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials == null
3497	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials.$.length <= (mu + 4)
3497	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynomials.length <= ($ + 4)
16839	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
16839	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
3498	264	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
3499	272	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
3500	276	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
3501	280	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
16840	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
16840	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
3502	304	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
16841	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < scale.$.length
16841	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < scale.length
16841	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	scale	double[]	0	NIL-FOR	i < $.length
16842	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
16842	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
3503	339	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
16843	342	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
3504	353	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
16844	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
16844	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
16845	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
16845	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
16846	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
16846	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
16847	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
16847	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
3114	110	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	THIS	HaltonSequenceGenerator	0	OutOfRangeException	dimension > bases.$.length
3114	110	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	dimension	int	0	OutOfRangeException	$ > bases.length
3114	110	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	dimension	int	0	OutOfRangeException	$ < 1
3114	110	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	bases	int[]	0	OutOfRangeException	dimension > $.length
3115	114	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	THIS	HaltonSequenceGenerator	0	DimensionMismatchException	weights.$.length != bases.$.length
3115	114	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	bases	int[]	0	DimensionMismatchException	weights.length != $.length
3115	114	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	weights	int[]	0	DimensionMismatchException	$ != null
3115	114	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	weights	int[]	0	DimensionMismatchException	$.length != bases.length
16608	127	8	HaltonSequenceGenerator.java	nextVector	THIS	HaltonSequenceGenerator	0	NIL-FOR	i < $.dimension
16608	127	8	HaltonSequenceGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
16609	132	12	HaltonSequenceGenerator.java	nextVector	index	int	0	NIL-WHILE	$ > 0
4027	172	8	HarmonicOscillator.java	value	THIS	HarmonicOscillator	0	DEF	f.$.length > 1
4027	172	8	HarmonicOscillator.java	value	f	double[]	0	DEF	$.length > 1
17067	175	12	HarmonicOscillator.java	value	THIS	HarmonicOscillator	0	NIL-FOR	i < f.$.length
17067	175	12	HarmonicOscillator.java	value	i	int	0	NIL-FOR	$ < f.length
17067	175	12	HarmonicOscillator.java	value	f	double[]	0	NIL-FOR	i < $.length
16981	90	8	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	i < value.$.length
16981	90	8	HermiteInterpolator.java	addSamplePoint	i	int	0	NIL-FOR	$ < value.length
16981	90	8	HermiteInterpolator.java	addSamplePoint	value	double[]	0	NIL-FOR	i < $.length
3951	93	12	HermiteInterpolator.java	addSamplePoint	i	int	0	DEF	$ > 1
16982	95	16	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	j < y.$.length
16982	95	16	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < y.length
16982	95	16	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	j < $.length
16983	104	12	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < n
16983	104	12	HermiteInterpolator.java	addSamplePoint	n	int	0	NIL-FOR	j < $
3952	107	16	HermiteInterpolator.java	addSamplePoint	inv	double	0	ZeroException	Double.isInfinite($)
16984	110	16	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	k < y.$.length
16984	110	16	HermiteInterpolator.java	addSamplePoint	k	int	0	NIL-FOR	$ < y.length
16984	110	16	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	k < $.length
16985	139	8	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < polynomials.$.length
16985	139	8	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < polynomials.length
16985	139	8	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	i < $.length
16986	145	8	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
16986	145	8	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < topDiagonal.size()
16987	147	12	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	k < polynomials.$.length
16987	147	12	HermiteInterpolator.java	getPolynomials	k	int	0	NIL-FOR	$ < polynomials.length
16987	147	12	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	k < $.length
16988	176	8	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
16988	176	8	HermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
16989	178	12	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	k < value.$.length
16989	178	12	HermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
16989	178	12	HermiteInterpolator.java	value	value	double[]	0	NIL-FOR	k < $.length
16990	209	8	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
16990	209	8	HermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
16991	211	12	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	k < value.$.length
16991	211	12	HermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
16991	211	12	HermiteInterpolator.java	value	value	DerivativeStructure[]	0	NIL-FOR	k < $.length
3953	227	8	HermiteInterpolator.java	checkInterpolation	THIS	HermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
1398	61	8	HessenbergTransformer.java	HessenbergTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1399	84	8	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.cachedP == null
15166	89	12	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ < n
15166	89	12	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	i < $
15167	90	16	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ < n
15167	90	16	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	j < $
15168	95	12	HessenbergTransformer.java	getP	m	int	0	NIL-FOR	$ >= 1
1400	96	16	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.householderVectors[m][m - 1] != 0.0
1400	96	16	HessenbergTransformer.java	getP	m	int	0	DEF	householderVectors[$][$ - 1] != 0.0
15169	97	20	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
15169	97	20	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
15170	101	20	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ <= high
15170	101	20	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	j <= $
15171	104	24	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
15171	104	24	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
15172	111	24	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
15172	111	24	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
1401	130	8	HessenbergTransformer.java	getPT	THIS	HessenbergTransformer	0	DEF	$.cachedPt == null
1402	144	8	HessenbergTransformer.java	getH	THIS	HessenbergTransformer	0	DEF	$.cachedH == null
15173	147	12	HessenbergTransformer.java	getH	i	int	0	NIL-FOR	$ < m
15173	147	12	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	i < $
1403	148	16	HessenbergTransformer.java	getH	i	int	0	DEF	$ > 0
15174	154	16	HessenbergTransformer.java	getH	j	int	0	NIL-FOR	$ < m
15174	154	16	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	j < $
15175	184	8	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	$ <= high - 1
15175	184	8	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	m <= $ - 1
15176	187	12	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
15176	187	12	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
1404	191	12	HessenbergTransformer.java	transform	scale	double	0	DEF	Precision.equals($, 0)
15177	194	16	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
15177	194	16	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
15178	206	16	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ < n
15178	206	16	HessenbergTransformer.java	transform	n	int	0	NIL-FOR	j < $
15179	208	20	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
15179	208	20	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
15180	212	20	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
15180	212	20	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
15181	217	16	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
15181	217	16	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
15182	219	20	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ >= m
15182	219	20	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	j >= $
15183	223	20	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ <= high
15183	223	20	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	j <= $
16877	117	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < $.mainSetDimension
16877	117	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
16878	119	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < STATIC_E.$.length
16878	119	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < STATIC_E.length
3524	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	1	DEF	$.previousState != null
3524	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
16875	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16875	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
16876	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16876	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1128	86	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NotStrictlyPositiveException	$ <= 0
1129	90	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NotPositiveException	$ < 0
1130	94	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NotPositiveException	$ < 0
1131	99	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	numberOfSuccesses > $
1131	99	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NumberIsTooLargeException	$ > populationSize
1132	103	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	sampleSize > $
1132	103	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NumberIsTooLargeException	$ > populationSize
1133	118	8	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
1133	118	8	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
1134	120	15	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
1134	120	15	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
1135	199	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x < $[0]
1135	199	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x > $[1]
1135	199	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ < domain[0]
1135	199	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ > domain[1]
1136	228	8	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x <= $[0]
1136	228	8	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ <= domain[0]
1137	230	15	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
1137	230	15	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
14928	254	8	HypergeometricDistribution.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
14928	254	8	HypergeometricDistribution.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
1138	279	8	HypergeometricDistribution.java	getNumericalVariance	THIS	HypergeometricDistribution	0	DEF	$.numericalVarianceIsCalculated
3109	121	8	ISAACRandom.java	setSeed	seed	int[]	0	RET	$ == null
3110	128	8	ISAACRandom.java	setSeed	seedLen	int	0	DEF	$ < rslLen
3110	128	8	ISAACRandom.java	setSeed	rslLen	int	0	DEF	seedLen < $
16599	129	12	ISAACRandom.java	setSeed	j	int	0	NIL-FOR	$ < rslLen
16599	129	12	ISAACRandom.java	setSeed	rslLen	int	0	NIL-FOR	j < $
3111	140	8	ISAACRandom.java	next	THIS	ISAACRandom	0	DEF	$.count < 0
16600	152	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacI < H_SIZE
16601	156	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacJ < H_SIZE
16602	193	8	ISAACRandom.java	initState	THIS	ISAACRandom	0	NIL-FOR	j < $.arr.$.length
16602	193	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < arr.length
16603	196	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < 4
16604	200	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
16605	213	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
190	81	8	Incrementor.java	Incrementor	cb	MaxCountExceededCallback	0	NullArgumentException	$ == null
14842	136	8	Incrementor.java	incrementCount	i	int	0	NIL-FOR	$ < value
14842	136	8	Incrementor.java	incrementCount	value	int	0	NIL-FOR	i < $
191	155	8	Incrementor.java	incrementCount	THIS	Incrementor	0	DEF	++$.count > $.maximalCount
801	121	8	Interval.java	checkPoint	THIS	Interval	1	RET	point < $.lower - tolerance
801	121	8	Interval.java	checkPoint	THIS	Interval	1	RET	point > $.upper + tolerance
801	121	8	Interval.java	checkPoint	point	double	1	RET	$ < lower - tolerance
801	121	8	Interval.java	checkPoint	point	double	1	RET	$ > upper + tolerance
801	121	8	Interval.java	checkPoint	tolerance	double	1	RET	point < lower - $
801	121	8	Interval.java	checkPoint	tolerance	double	1	RET	point > upper + $
802	123	15	Interval.java	checkPoint	THIS	Interval	1	RET	point > $.lower + tolerance
802	123	15	Interval.java	checkPoint	THIS	Interval	1	RET	point < $.upper - tolerance
802	123	15	Interval.java	checkPoint	point	double	1	RET	$ > lower + tolerance
802	123	15	Interval.java	checkPoint	point	double	1	RET	$ < upper - tolerance
802	123	15	Interval.java	checkPoint	tolerance	double	1	RET	point > lower + $
802	123	15	Interval.java	checkPoint	tolerance	double	1	RET	point < upper - $
808	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	$ < 0
808	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	Double.isInfinite($)
809	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
809	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
810	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
810	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
811	139	8	IntervalsSet.java	computeGeometricalProperties	THIS	IntervalsSet	1	DEF	$.getTree(false).getCut() == null
812	150	12	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	Double.isInfinite($)
813	152	19	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	$ >= Precision.SAFE_MIN
14882	169	8	IntervalsSet.java	getInf	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
14883	186	8	IntervalsSet.java	getSup	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
814	224	8	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	1	DEF	$.getCut() == null
815	225	12	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	0	DEF	(Boolean) $.getAttribute()
816	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(high, loc) == $.Location.INSIDE
816	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(low, loc) == $.Location.INSIDE
816	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(high, $) == Location.INSIDE
816	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(low, $) == Location.INSIDE
816	241	12	IntervalsSet.java	recurseList	low	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
816	241	12	IntervalsSet.java	recurseList	high	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
4278	68	8	IterativeLegendreGaussIntegrator.java	IterativeLegendreGaussIntegrator	n	int	0	NotStrictlyPositiveException	$ <= 0
4279	129	12	IterativeLegendreGaussIntegrator.java	doIntegrate	THIS	IterativeLegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
4279	129	12	IterativeLegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
4279	129	12	IterativeLegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
17213	165	8	IterativeLegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
17213	165	8	IterativeLegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
1361	81	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != $.getColumnDimension()
1362	85	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	b.getDimension() != $.getRowDimension()
1362	85	8	IterativeLinearSolver.java	checkParameters	b	RealVector	0	DimensionMismatchException	$.getDimension() != a.getRowDimension()
1363	89	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	x0.getDimension() != $.getColumnDimension()
1363	89	8	IterativeLinearSolver.java	checkParameters	x0	RealVector	0	DimensionMismatchException	$.getDimension() != a.getColumnDimension()
1330	63	8	JacobiPreconditioner.java	create	n	int	0	NonSquareOperatorException	a.getRowDimension() != $
1330	63	8	JacobiPreconditioner.java	create	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != n
1331	67	8	JacobiPreconditioner.java	create	a	RealLinearOperator	1	DEF	$ instanceof AbstractRealMatrix
15097	69	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
15097	69	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
15098	74	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
15098	74	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
17083	48	8	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	i < point.$.length
17083	48	8	JacobianFunction.java	value	i	int	0	NIL-FOR	$ < point.length
17083	48	8	JacobianFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
17084	58	8	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	i < dsY.$.length
17084	58	8	JacobianFunction.java	value	i	int	0	NIL-FOR	$ < dsY.length
17084	58	8	JacobianFunction.java	value	dsY	DerivativeStructure[]	0	NIL-FOR	i < $.length
17085	59	12	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	j < point.$.length
17085	59	12	JacobianFunction.java	value	j	int	0	NIL-FOR	$ < point.length
17085	59	12	JacobianFunction.java	value	point	double[]	0	NIL-FOR	j < $.length
3552	133	8	JacobianMatrices.java	JacobianMatrices	parameters	String	1	DEF	$ == null
16883	138	12	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < parameters.$.length
16883	138	12	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < parameters.length
16883	138	12	JacobianMatrices.java	JacobianMatrices	parameters	String	0	NIL-FOR	i < $.length
16884	150	8	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
16884	150	8	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < stateDim
3553	171	8	JacobianMatrices.java	registerVariationalEquations	ode	FirstOrderDifferentialEquations	0	MismatchedEquations	expandable.getPrimary() != $
3553	171	8	JacobianMatrices.java	registerVariationalEquations	expandable	ExpandableStatefulODE	0	MismatchedEquations	$.getPrimary() != ode
3554	217	12	JacobianMatrices.java	setParameterStep	THIS	JacobianMatrices	0	RET	parameter.equals($.param.getParameterName())
3554	217	12	JacobianMatrices.java	setParameterStep	parameter	String	0	RET	$.equals(param.getParameterName())
3555	250	8	JacobianMatrices.java	setInitialMainStateJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
3556	275	12	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	RET	pName.equals($.param.getParameterName())
3556	275	12	JacobianMatrices.java	setInitialParameterJacobian	pName	String	0	RET	$.equals(param.getParameterName())
3557	277	16	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
16885	298	8	JacobianMatrices.java	getCurrentMainSetJacobian	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
16885	298	8	JacobianMatrices.java	getCurrentMainSetJacobian	i	int	0	NIL-FOR	$ < stateDim
3558	316	12	JacobianMatrices.java	getCurrentParameterJacobian	THIS	JacobianMatrices	0	RET	$.param.getParameterName().equals(pName)
3558	316	12	JacobianMatrices.java	getCurrentParameterJacobian	pName	String	0	RET	param.getParameterName().equals($)
3559	333	8	JacobianMatrices.java	checkDimension	arrayDimension	int	0	DimensionMismatchException	$ != expected
3559	333	8	JacobianMatrices.java	checkDimension	expected	int	0	DimensionMismatchException	arrayDimension != $
3106	104	12	JacobianMultivariateVectorOptimizer.java	parseOptimizationData	THIS	JacobianMultivariateVectorOptimizer	0	DEF	$.data instanceof ModelFunctionJacobian
3270	203	8	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	NumberIsTooSmallException	points.size() < $.k
3270	203	8	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
16678	217	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
16678	217	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
3271	222	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
3272	247	12	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
3272	247	12	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
3273	269	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
3273	269	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
3273	269	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
16679	319	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
16679	319	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
3274	320	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
3274	320	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
16680	326	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	THIS	KMeansPlusPlusClusterer	0	NIL-WHILE	resultSet.size() < $.k
16680	326	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<CentroidCluster<T>>	0	NIL-WHILE	$.size() < k
16681	332	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
16681	332	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
3275	333	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
3275	333	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
16682	348	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
16682	348	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
3276	349	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
3276	349	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
3277	351	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
3277	351	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
3278	361	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
16683	362	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
3279	363	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
3279	363	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
3280	371	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
3281	380	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	THIS	KMeansPlusPlusClusterer	0	DEF	resultSet.size() < $.k
3281	380	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<CentroidCluster<T>>	0	DEF	$.size() < k
16684	383	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
16684	383	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
3282	385	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
3282	385	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
3283	388	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
3283	388	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
3283	388	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
3284	419	12	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
3285	430	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
3285	430	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
3286	439	8	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
3287	467	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
3287	467	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
3288	475	8	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
16685	502	12	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
16685	502	12	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
3289	504	16	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
3289	504	16	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
3290	514	8	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster<T>	0	ConvergenceException	$ == null
3291	535	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
3291	535	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
16686	555	12	KMeansPlusPlusClusterer.java	centroidOf	THIS	KMeansPlusPlusClusterer	0	NIL-FOR	i < centroid.$.length
16686	555	12	KMeansPlusPlusClusterer.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
16686	555	12	KMeansPlusPlusClusterer.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
16687	559	8	KMeansPlusPlusClusterer.java	centroidOf	THIS	KMeansPlusPlusClusterer	0	NIL-FOR	i < centroid.$.length
16687	559	8	KMeansPlusPlusClusterer.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
16687	559	8	KMeansPlusPlusClusterer.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
16165	113	8	KMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
16165	113	8	KMeansPlusPlusClusterer.java	cluster	numTrials	int	0	NIL-FOR	i < $
2445	121	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2446	134	12	KMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
2446	134	12	KMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
2447	168	8	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
2447	168	8	KMeansPlusPlusClusterer.java	cluster	k	int	0	NumberIsTooSmallException	points.size() < $
16166	182	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
16166	182	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
2448	187	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
2449	212	12	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
2449	212	12	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
2450	235	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
2450	235	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
2450	235	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
16167	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
16167	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2451	290	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
2451	290	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
16168	296	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
16168	296	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
16169	302	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
16169	302	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2452	303	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2452	303	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
16170	318	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
16170	318	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2453	319	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2453	319	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2454	321	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
2454	321	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
2455	331	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
16171	332	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
2456	333	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2456	333	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2457	341	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
2458	350	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	DEF	$.size() < k
2458	350	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	DEF	resultSet.size() < $
16172	353	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
16172	353	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
2459	355	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
2459	355	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
2460	358	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
2460	358	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
2460	358	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
2461	389	12	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2462	400	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
2462	400	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
2463	409	8	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
2464	436	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
2464	436	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
2465	444	8	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
16173	471	12	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
16173	471	12	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
2466	473	16	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
2466	473	16	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
2467	483	8	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster<T>	0	ConvergenceException	$ == null
2468	506	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
2468	506	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
0	136	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getControlMatrix() == null
1	156	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialStateEstimate() == null
2	162	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	DimensionMismatchException	$.transitionMatrix.getColumnDimension() != $.stateEstimation.getDimension()
3	169	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialErrorCovariance() == null
4	178	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	NonSquareMatrixException	$.transitionMatrix.isSquare()
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix != null
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() != $.transitionMatrix.getRowDimension()
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() > 0
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() != 1
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() > 0
6	199	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.measurementMatrix.getColumnDimension() != $.transitionMatrix.getRowDimension()
7	207	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	measNoise.getRowDimension() != $.measurementMatrix.getRowDimension()
7	207	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != measurementMatrix.getRowDimension()
7	207	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
8	298	8	KalmanFilter.java	predict	THIS	KalmanFilter	0	DimensionMismatchException	u.getDimension() != $.controlMatrix.getColumnDimension()
8	298	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$ != null
8	298	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$.getDimension() != controlMatrix.getColumnDimension()
9	309	8	KalmanFilter.java	predict	u	RealVector	0	DEF	$ != null
10	354	8	KalmanFilter.java	correct	THIS	KalmanFilter	0	DimensionMismatchException	z.getDimension() != $.measurementMatrix.getRowDimension()
10	354	8	KalmanFilter.java	correct	z	RealVector	0	DimensionMismatchException	$.getDimension() != measurementMatrix.getRowDimension()
1268	86	8	KolmogorovSmirnovDistribution.java	KolmogorovSmirnovDistribution	n	int	0	NotStrictlyPositiveException	$ <= 0
1269	154	8	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	d <= $
1269	154	8	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninvhalf
1270	158	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	d <= $
1270	158	15	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	$ < d
1270	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninv
1270	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	ninvhalf < $
14958	164	12	KolmogorovSmirnovDistribution.java	cdf	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
14958	164	12	KolmogorovSmirnovDistribution.java	cdf	i	int	0	NIL-FOR	$ <= n
1271	170	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	1 - $ <= d
1271	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	1 - ninv <= $
1271	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ < 1
1272	174	15	KolmogorovSmirnovDistribution.java	cdf	d	double	0	RET	1 <= $
14959	203	8	KolmogorovSmirnovDistribution.java	exactK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
14959	203	8	KolmogorovSmirnovDistribution.java	exactK	i	int	0	NIL-FOR	$ <= n
14960	238	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ < m
14960	238	8	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	i < $
14961	239	12	KolmogorovSmirnovDistribution.java	roundedK	j	int	0	NIL-FOR	$ < m
14961	239	12	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	j < $
14962	248	8	KolmogorovSmirnovDistribution.java	roundedK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
14962	248	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ <= n
1273	274	8	KolmogorovSmirnovDistribution.java	createH	hDouble	double	0	NumberIsTooLargeException	$ >= 1
14963	295	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
14963	295	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
14964	296	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < m
14964	296	12	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	j < $
1274	297	16	KolmogorovSmirnovDistribution.java	createH	j	int	1	DEF	i - $ + 1 < 0
1274	297	16	KolmogorovSmirnovDistribution.java	createH	i	int	1	DEF	$ - j + 1 < 0
14965	311	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
14965	311	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
14966	318	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
14966	318	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
1275	328	8	KolmogorovSmirnovDistribution.java	createH	h	BigFraction	0	DEF	$.compareTo(BigFraction.ONE_HALF) == 1
14967	343	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
14967	343	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
14968	344	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < i + 1
14968	344	12	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	j < $ + 1
1276	345	16	KolmogorovSmirnovDistribution.java	createH	j	int	0	DEF	i - $ + 1 > 0
1276	345	16	KolmogorovSmirnovDistribution.java	createH	i	int	0	DEF	$ - j + 1 > 0
14969	346	20	KolmogorovSmirnovDistribution.java	createH	g	int	0	NIL-FOR	$ <= i - j + 1
14969	346	20	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	g <= i - $ + 1
14969	346	20	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	g <= $ - j + 1
2291	101	8	Kurtosis.java	increment	THIS	Kurtosis	0	DEF	$.incMoment
2292	112	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
2293	114	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
2293	114	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
2294	132	8	Kurtosis.java	clear	THIS	Kurtosis	0	DEF	$.incMoment
2295	167	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
2295	167	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2295	167	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
2295	167	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
2295	167	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
16124	178	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16124	178	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16124	178	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1303	87	8	LUDecomposition.java	LUDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
14975	100	8	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
14975	100	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
14976	107	8	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	$ < m
14976	107	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	col < $
14977	110	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < col
14977	110	12	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	row < $
14978	113	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < row
14978	113	16	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	i < $
14979	122	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
14979	122	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
14980	125	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < col
14980	125	16	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	i < $
1304	131	16	LUDecomposition.java	LUDecomposition	sum	double	0	DEF	FastMath.abs($) > largest
1304	131	16	LUDecomposition.java	LUDecomposition	largest	double	0	DEF	FastMath.abs(sum) > $
1305	138	12	LUDecomposition.java	LUDecomposition	THIS	LUDecomposition	0	RET	FastMath.abs($.lu[max][col]) < singularityThreshold
1305	138	12	LUDecomposition.java	LUDecomposition	max	int	0	RET	FastMath.abs(lu[$][col]) < singularityThreshold
1305	138	12	LUDecomposition.java	LUDecomposition	col	int	0	RET	FastMath.abs(lu[max][$]) < singularityThreshold
1305	138	12	LUDecomposition.java	LUDecomposition	singularityThreshold	double	0	RET	FastMath.abs(lu[max][col]) < $
1306	144	12	LUDecomposition.java	LUDecomposition	max	int	0	DEF	$ != col
1306	144	12	LUDecomposition.java	LUDecomposition	col	int	0	DEF	max != $
14981	148	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < m
14981	148	16	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	i < $
14982	161	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
14982	161	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
1307	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.cachedL == null
1307	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.singular
14983	176	12	LUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
14983	176	12	LUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
14984	178	16	LUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
14984	178	16	LUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1308	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.singular
1308	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.cachedU == null
14985	196	12	LUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
14985	196	12	LUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
14986	198	16	LUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
14986	198	16	LUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1309	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.singular
1309	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.cachedP == null
14987	219	12	LUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
14987	219	12	LUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1310	240	8	LUDecomposition.java	getDeterminant	THIS	LUDecomposition	1	RET	$.singular
14988	245	12	LUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
14988	245	12	LUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
4118	105	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
4118	105	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4119	111	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
4119	111	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4120	116	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
4120	116	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
4121	122	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
4121	122	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4122	127	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
4122	127	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
4123	161	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	1	RET	$.complexSolver.isRoot(lo, hi, z)
4123	161	8	LaguerreSolver.java	laguerre	z	Complex	1	RET	complexSolver.isRoot(lo, hi, $)
4123	161	8	LaguerreSolver.java	laguerre	lo	double	1	RET	complexSolver.isRoot($, hi, z)
4123	161	8	LaguerreSolver.java	laguerre	hi	double	1	RET	complexSolver.isRoot(lo, $, z)
17081	167	12	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
17081	167	12	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < root.length
17081	167	12	LaguerreSolver.java	laguerre	root	Complex[]	0	NIL-FOR	i < $.length
4124	168	16	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	DEF	$.complexSolver.isRoot(lo, hi, root[i])
4124	168	16	LaguerreSolver.java	laguerre	i	int	0	DEF	complexSolver.isRoot(lo, hi, root[$])
4124	168	16	LaguerreSolver.java	laguerre	root	Complex[]	0	DEF	complexSolver.isRoot(lo, hi, $[i])
4124	168	16	LaguerreSolver.java	laguerre	lo	double	0	DEF	complexSolver.isRoot($, hi, root[i])
4124	168	16	LaguerreSolver.java	laguerre	hi	double	0	DEF	complexSolver.isRoot(lo, $, root[i])
2798	114	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
2798	114	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
2798	114	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
2799	148	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
2799	148	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
2799	148	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
2800	161	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
2800	161	8	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
16318	164	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
16318	164	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
16318	164	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
2801	170	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
16319	171	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
16319	171	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
16319	171	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
2802	175	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
1913	114	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
1913	114	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
1913	114	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
1914	144	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
1914	144	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
1914	144	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
1915	157	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
1915	157	8	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
15814	160	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
15814	160	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
15814	160	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1916	166	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
15815	167	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
15815	167	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
15815	167	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1917	171	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
4287	224	12	LegendreGaussIntegrator.java	doIntegrate	THIS	LegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
4287	224	12	LegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
4287	224	12	LegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
17215	255	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
17215	255	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
17216	256	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
17216	256	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
4265	68	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
17200	85	8	LegendreHighPrecisionRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
17200	85	8	LegendreHighPrecisionRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
17201	98	12	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
17201	98	12	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
17202	136	12	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
17203	142	16	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
17203	142	16	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4266	159	16	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	DEF	$
4267	160	20	LegendreHighPrecisionRuleFactory.java	computeRule	pa	BigDecimal	1	DEF	$.signum() * pc.signum() <= 0
4267	160	20	LegendreHighPrecisionRuleFactory.java	computeRule	pc	BigDecimal	1	DEF	pa.signum() * $.signum() <= 0
4268	192	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 != 0
17204	194	12	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
17204	194	12	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4270	39	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
17206	56	8	LegendreRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
17206	56	8	LegendreRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
17207	69	12	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
17207	69	12	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
17208	89	12	LegendreRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
17209	93	16	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
17209	93	16	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4271	100	16	LegendreRuleFactory.java	computeRule	done	boolean	0	DEF	$
4272	101	20	LegendreRuleFactory.java	computeRule	pa	double	1	DEF	$ * pc <= 0
4272	101	20	LegendreRuleFactory.java	computeRule	pc	double	1	DEF	pa * $ <= 0
4273	127	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 != 0
17210	129	12	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
17210	129	12	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
16534	334	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
16534	334	12	LevenbergMarquardtOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
16535	343	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
16535	343	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
3065	348	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
16536	352	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
16536	352	16	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
3066	354	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
3067	369	12	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	$ != 0
16537	370	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16537	370	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3068	373	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
16538	375	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
16538	375	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
3069	382	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
3069	382	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
16539	389	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
16539	389	12	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
16540	394	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
16541	397	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16541	397	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
16542	414	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16542	414	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3070	423	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
3071	435	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost < $
3071	435	16	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ < previousCost
16543	442	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16543	442	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
16544	446	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
16544	446	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
16545	451	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16545	451	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3072	464	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
3073	467	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
3073	467	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost >= $
3073	467	24	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ >= previousCost
3074	472	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
3074	472	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
3075	478	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
16546	482	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
16546	482	20	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
3076	489	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	checker.converged($.getIterations(), previous, current)
3076	489	20	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(getIterations(), $, current)
3076	489	20	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(getIterations(), previous, $)
3076	489	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$.converged(getIterations(), previous, current)
3076	489	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$ != null
16547	496	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16547	496	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3077	511	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
3077	511	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
3077	511	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
3077	511	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
3077	511	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
3077	511	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
3077	511	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
3077	511	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
3078	520	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= TWO_EPS
3078	520	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= TWO_EPS
3078	520	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
3079	525	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= TWO_EPS * xNorm
3079	525	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= TWO_EPS * $
3080	528	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= TWO_EPS
16548	564	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
16548	564	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
16549	567	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < nC
16549	567	8	LevenbergMarquardtOptimizer.java	determineLMParameter	nC	int	0	NIL-FOR	j < $
16550	570	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
16551	573	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
16551	573	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
16552	582	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16552	582	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
3081	590	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
3081	590	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
3082	600	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
16553	601	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16553	601	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
16554	606	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16554	606	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
16555	609	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
16555	609	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
16556	621	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16556	621	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
16557	624	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
16557	624	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
3083	632	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
3084	639	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
16558	643	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
3085	646	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
16559	650	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16559	650	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
16560	657	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16560	657	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
3086	669	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
3086	669	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
3086	669	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
3086	669	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
3086	669	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
3086	669	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
16561	675	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16561	675	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
16562	679	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16562	679	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
16563	683	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
16563	683	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
16564	688	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16564	688	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
3087	695	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
3088	697	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
16565	732	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16565	732	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
16566	734	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
16566	734	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
16567	742	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16567	742	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
3089	748	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
16568	757	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
16568	757	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
3090	762	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
3090	762	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
3091	767	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
3091	767	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
3091	767	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
16569	785	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
16569	785	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
16570	803	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
16570	803	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
3092	804	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
3092	804	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
3092	804	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
3092	804	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
3093	807	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
3093	807	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
3094	811	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
16571	812	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
16572	815	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
16572	815	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
16573	823	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
16573	823	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
16574	861	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
16574	861	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
16575	864	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nR
16575	864	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	i < $
16576	872	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
16576	872	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
16577	877	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nC
16577	877	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	i < $
16578	879	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
16578	879	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
3095	883	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
3095	883	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
3096	887	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
3096	887	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
3097	892	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
3097	892	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
16579	911	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
16580	913	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
16580	913	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
16581	917	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
16581	917	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
16582	934	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < nC
16582	934	8	LevenbergMarquardtOptimizer.java	qTy	nC	int	0	NIL-FOR	k < $
16583	937	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
16583	937	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
16584	941	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
16584	941	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
3098	952	8	LevenbergMarquardtOptimizer.java	checkParameters	THIS	LevenbergMarquardtOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
3098	952	8	LevenbergMarquardtOptimizer.java	checkParameters	THIS	LevenbergMarquardtOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
15816	326	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
15816	326	12	LevenbergMarquardtOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
15817	335	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
15817	335	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
1918	340	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
15818	344	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
15818	344	16	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
1919	346	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1920	361	12	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	$ != 0
15819	362	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15819	362	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1921	365	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
15820	367	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
15820	367	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1922	374	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1922	374	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
15821	383	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
15821	383	12	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
15822	388	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
15823	391	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15823	391	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
15824	408	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15824	408	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1923	417	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1924	429	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost < $
1924	429	16	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ < previousCost
15825	436	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15825	436	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
15826	440	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
15826	440	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
15827	445	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15827	445	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1925	458	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1926	461	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1926	461	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost >= $
1926	461	24	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ >= previousCost
1927	466	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1927	466	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1928	472	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
15828	476	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
15828	476	20	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
1929	483	20	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(iter, $, current)
1929	483	20	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(iter, previous, $)
1929	483	20	LevenbergMarquardtOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1929	483	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$.converged(iter, previous, current)
1929	483	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$ != null
15829	492	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15829	492	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1930	507	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
1930	507	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1930	507	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1930	507	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
1930	507	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1930	507	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1930	507	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1930	507	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1931	519	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= 2.2204e-16
1931	519	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= 2.2204e-16
1931	519	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
1932	522	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= 2.2204e-16 * xNorm
1932	522	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= 2.2204e-16 * $
1933	525	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= 2.2204e-16
15830	561	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
15830	561	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
15831	564	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < nC
15831	564	8	LevenbergMarquardtOptimizer.java	determineLMParameter	nC	int	0	NIL-FOR	j < $
15832	567	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
15833	570	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
15833	570	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
15834	579	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15834	579	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1934	587	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1934	587	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1935	597	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
15835	598	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15835	598	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
15836	603	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15836	603	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
15837	606	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
15837	606	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
15838	618	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15838	618	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
15839	621	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
15839	621	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1936	629	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1937	637	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
15840	641	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1938	644	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
15841	648	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15841	648	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
15842	655	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15842	655	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1939	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1939	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1939	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1939	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
1939	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1939	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
15843	673	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15843	673	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
15844	677	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15844	677	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
15845	681	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
15845	681	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
15846	686	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15846	686	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1940	693	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1941	695	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
15847	730	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15847	730	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
15848	732	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
15848	732	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
15849	740	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15849	740	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1942	746	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
15850	755	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
15850	755	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1943	760	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1943	760	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1944	765	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
1944	765	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
1944	765	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
15851	783	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
15851	783	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
15852	801	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
15852	801	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1945	802	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1945	802	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1945	802	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1945	802	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1946	805	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1946	805	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1947	809	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
15853	810	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
15854	813	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
15854	813	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
15855	821	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
15855	821	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
15856	859	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
15856	859	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
15857	862	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nR
15857	862	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	i < $
15858	870	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
15858	870	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
15859	875	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nC
15859	875	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	i < $
15860	877	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
15860	877	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
1948	881	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
1948	881	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
1949	885	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1949	885	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1950	890	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
1950	890	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
15861	909	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
15862	911	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
15862	911	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
15863	915	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
15863	915	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
15864	932	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < nC
15864	932	8	LevenbergMarquardtOptimizer.java	qTy	nC	int	0	NIL-FOR	k < $
15865	935	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
15865	935	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
15866	939	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
15866	939	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
1202	73	8	LevyDistribution.java	density	THIS	LevyDistribution	0	RET	x < $.mu
1202	73	8	LevyDistribution.java	density	x	double	0	RET	$ < mu
1203	91	8	LevyDistribution.java	cumulativeProbability	THIS	LevyDistribution	0	RET	x < $.mu
1203	91	8	LevyDistribution.java	cumulativeProbability	x	double	0	RET	$ < mu
1204	100	8	LevyDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1204	100	8	LevyDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
707	76	8	Line.java	reset	norm2	double	0	MathIllegalArgumentException	$ == 0.0
708	177	8	Line.java	distance	n	double	0	RET	$ < Precision.SAFE_MIN
709	197	8	Line.java	closestPoint	n	double	0	RET	$ < Precision.EPSILON
819	132	8	Line.java	reset	d	double	1	DEF	$ == 0.0
820	159	8	Line.java	revertSelf	THIS	Line	1	DEF	$.angle < FastMath.PI
821	199	8	Line.java	intersection	d	double	0	RET	FastMath.abs($) < 1.0e-10
16288	124	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
16288	124	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
16288	124	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
2728	188	8	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
2728	188	8	LinearConstraint.java	equals	other	Object	0	RET	this == $
2729	191	8	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
15790	130	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
15790	130	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
15790	130	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
1865	192	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
1865	192	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
1866	196	6	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
3916	50	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3916	50	8	LinearInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3916	50	8	LinearInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3917	54	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	NumberIsTooSmallException	x.$.length < 2
3917	54	8	LinearInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 2
16967	66	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
16967	66	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
16968	72	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
16968	72	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
2744	111	8	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
2744	111	8	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
2745	114	8	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
1882	109	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
1882	109	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
1883	113	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
2746	118	12	LinearOptimizer.java	parseOptimizationData	THIS	LinearOptimizer	0	DEF	$.data instanceof LinearObjectiveFunction
2747	122	12	LinearOptimizer.java	parseOptimizationData	THIS	LinearOptimizer	0	DEF	$.data instanceof LinearConstraintSet
2748	126	12	LinearOptimizer.java	parseOptimizationData	THIS	LinearOptimizer	0	DEF	$.data instanceof NonNegativeConstraint
3221	69	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
3222	72	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ <= 0
3223	75	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
3223	75	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NumberIsTooLargeException	chromosomes.size() > $
3224	99	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
3225	102	8	ListPopulation.java	setChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	chromosomes.size() > $.populationLimit
3225	102	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
3226	118	8	ListPopulation.java	addChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() + chromosomeColl.size() > $.populationLimit
3226	118	8	ListPopulation.java	addChromosomes	chromosomeColl	Collection<Chromosome>	0	NumberIsTooLargeException	chromosomes.size() + $.size() > populationLimit
3227	150	8	ListPopulation.java	addChromosome	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() >= $.populationLimit
3228	165	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
3228	165	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
3229	189	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NotPositiveException	$ <= 0
3230	192	8	ListPopulation.java	setPopulationLimit	THIS	ListPopulation	0	NumberIsTooSmallException	populationLimit < $.chromosomes.size()
3230	192	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NumberIsTooSmallException	$ < chromosomes.size()
3997	151	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ > 1
3997	151	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ < 0
3998	156	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	NotPositiveException	$ < 0
3999	221	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
3999	221	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
3999	221	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
4000	227	8	LoessInterpolator.java	smooth	n	int	0	NoDataException	$ == 0
4001	237	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
4002	241	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
4003	247	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	NumberIsTooSmallException	$ < 2
17048	264	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
17048	264	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
17049	267	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
17049	267	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
4004	272	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
4005	282	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
4005	282	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
4005	282	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
4005	282	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
17050	301	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
17050	301	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
4006	320	16	LoessInterpolator.java	smooth	THIS	LoessInterpolator	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < $.accuracy
4006	320	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
4006	320	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
4007	334	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
4007	334	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
4008	347	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	FastMath.abs(medianResidual) < $.accuracy
4008	347	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	FastMath.abs($) < accuracy
17051	351	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
17051	351	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
4009	353	16	LoessInterpolator.java	smooth	arg	double	1	DEF	$ >= 1
4010	388	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
4010	388	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
4010	388	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
4011	422	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	nextRight < xval.$.length
4011	422	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[nextRight] - xval[i] < xval[i] - xval[$]
4011	422	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	xval[$] - xval[i] < xval[i] - xval[left]
4011	422	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	$ < xval.length
4011	422	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[nextRight] - $[i] < $[i] - $[left]
4011	422	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	nextRight < $.length
4011	422	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[nextRight] - xval[$] < xval[$] - xval[left]
17052	439	8	LoessInterpolator.java	nextNonzero	THIS	LoessInterpolator	0	NIL-WHILE	j < weights.$.length
17052	439	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	$ < weights.length
17052	439	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	weights[$] == 0
17052	439	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	j < $.length
17052	439	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	$[j] == 0
4012	455	8	LoessInterpolator.java	tricube	absX	double	0	RET	$ >= 1.0
17053	470	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
17053	470	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
17053	470	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
1290	132	8	LogNormalDistribution.java	LogNormalDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1291	171	8	LogNormalDistribution.java	density	x	double	0	RET	$ <= 0
1292	195	8	LogNormalDistribution.java	cumulativeProbability	x	double	0	RET	$ <= 0
1293	199	8	LogNormalDistribution.java	cumulativeProbability	THIS	LogNormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.shape
1293	199	8	LogNormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * shape
1294	221	8	LogNormalDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1294	221	8	LogNormalDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
1295	225	8	LogNormalDistribution.java	probability	x0	double	0	RET	$ <= 0
1295	225	8	LogNormalDistribution.java	probability	x1	double	0	RET	$ <= 0
4033	72	8	Logistic.java	Logistic	n	double	0	NotStrictlyPositiveException	$ <= 0
4018	162	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
4018	162	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
4018	162	8	Logit.java	value	lo	double	0	OutOfRangeException	x < $
4018	162	8	Logit.java	value	hi	double	0	OutOfRangeException	x > $
4019	175	8	Logit.java	value	THIS	Logit	0	OutOfRangeException	x > $.hi
4019	175	8	Logit.java	value	THIS	Logit	0	OutOfRangeException	x < $.lo
4019	175	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
4019	175	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
4020	183	8	Logit.java	value	f	double[]	1	DEF	Double.isInfinite($[0])
4021	185	12	Logit.java	value	THIS	Logit	0	DEF	f.$.length > 1
4021	185	12	Logit.java	value	f	double[]	0	DEF	$.length > 1
17063	193	12	Logit.java	value	THIS	Logit	0	NIL-FOR	i < f.$.length
17063	193	12	Logit.java	value	i	int	0	NIL-FOR	$ < f.length
17063	193	12	Logit.java	value	f	double[]	0	NIL-FOR	i < $.length
17064	204	12	Logit.java	value	THIS	Logit	0	NIL-FOR	i < f.$.length
17064	204	12	Logit.java	value	i	int	0	NIL-FOR	$ < f.length
17064	204	12	Logit.java	value	f	double[]	0	NIL-FOR	i < $.length
2397	74	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2397	74	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2398	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	y.$.length == 0
2398	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	x.$.length == 0
2398	78	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2398	78	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
16144	140	8	MannWhitneyUTest.java	mannWhitneyU	THIS	MannWhitneyUTest	0	NIL-FOR	i < x.$.length
16144	140	8	MannWhitneyUTest.java	mannWhitneyU	i	int	0	NIL-FOR	$ < x.length
16144	140	8	MannWhitneyUTest.java	mannWhitneyU	x	double[]	0	NIL-FOR	i < $.length
14797	87	8	MathArrays.java	scale	THIS	MathArrays	0	NIL-FOR	i < arr.$.length
14797	87	8	MathArrays.java	scale	i	int	0	NIL-FOR	$ < arr.length
14797	87	8	MathArrays.java	scale	arr	double[]	0	NIL-FOR	i < $.length
14798	103	8	MathArrays.java	scaleInPlace	THIS	MathArrays	0	NIL-FOR	i < arr.$.length
14798	103	8	MathArrays.java	scaleInPlace	i	int	0	NIL-FOR	$ < arr.length
14798	103	8	MathArrays.java	scaleInPlace	arr	double[]	0	NIL-FOR	i < $.length
113	120	8	MathArrays.java	ebeAdd	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
113	120	8	MathArrays.java	ebeAdd	a	double[]	0	DimensionMismatchException	$.length != b.length
113	120	8	MathArrays.java	ebeAdd	b	double[]	0	DimensionMismatchException	a.length != $.length
14799	125	8	MathArrays.java	ebeAdd	THIS	MathArrays	0	NIL-FOR	i < a.$.length
14799	125	8	MathArrays.java	ebeAdd	i	int	0	NIL-FOR	$ < a.length
14799	125	8	MathArrays.java	ebeAdd	a	double[]	0	NIL-FOR	i < $.length
114	142	8	MathArrays.java	ebeSubtract	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
114	142	8	MathArrays.java	ebeSubtract	a	double[]	0	DimensionMismatchException	$.length != b.length
114	142	8	MathArrays.java	ebeSubtract	b	double[]	0	DimensionMismatchException	a.length != $.length
14800	147	8	MathArrays.java	ebeSubtract	THIS	MathArrays	0	NIL-FOR	i < a.$.length
14800	147	8	MathArrays.java	ebeSubtract	i	int	0	NIL-FOR	$ < a.length
14800	147	8	MathArrays.java	ebeSubtract	a	double[]	0	NIL-FOR	i < $.length
115	164	8	MathArrays.java	ebeMultiply	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
115	164	8	MathArrays.java	ebeMultiply	a	double[]	0	DimensionMismatchException	$.length != b.length
115	164	8	MathArrays.java	ebeMultiply	b	double[]	0	DimensionMismatchException	a.length != $.length
14801	169	8	MathArrays.java	ebeMultiply	THIS	MathArrays	0	NIL-FOR	i < a.$.length
14801	169	8	MathArrays.java	ebeMultiply	i	int	0	NIL-FOR	$ < a.length
14801	169	8	MathArrays.java	ebeMultiply	a	double[]	0	NIL-FOR	i < $.length
116	186	8	MathArrays.java	ebeDivide	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
116	186	8	MathArrays.java	ebeDivide	a	double[]	0	DimensionMismatchException	$.length != b.length
116	186	8	MathArrays.java	ebeDivide	b	double[]	0	DimensionMismatchException	a.length != $.length
14802	191	8	MathArrays.java	ebeDivide	THIS	MathArrays	0	NIL-FOR	i < a.$.length
14802	191	8	MathArrays.java	ebeDivide	i	int	0	NIL-FOR	$ < a.length
14802	191	8	MathArrays.java	ebeDivide	a	double[]	0	NIL-FOR	i < $.length
14803	206	8	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
14803	206	8	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
14803	206	8	MathArrays.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
14804	221	6	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
14804	221	6	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
14804	221	6	MathArrays.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
14805	236	8	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
14805	236	8	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
14805	236	8	MathArrays.java	distance	p1	double[]	0	NIL-FOR	i < $.length
14806	252	6	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
14806	252	6	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
14806	252	6	MathArrays.java	distance	p1	int[]	0	NIL-FOR	i < $.length
14807	268	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
14807	268	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
14807	268	8	MathArrays.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
14808	283	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
14808	283	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
14808	283	8	MathArrays.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
14809	313	8	MathArrays.java	isMonotonic	i	int	0	NIL-FOR	$ < max
14809	313	8	MathArrays.java	isMonotonic	max	int	0	NIL-FOR	i < $
117	318	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
118	319	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
119	323	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
120	330	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
121	331	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
122	335	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
14810	381	8	MathArrays.java	checkOrder	max	int	0	NIL-FOR	index < $
14810	381	8	MathArrays.java	checkOrder	index	int	0	NIL-FOR	$ < max
123	384	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
124	385	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] <= $
124	385	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] <= previous
124	385	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] <= previous
125	389	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] < $
125	389	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] < previous
125	389	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] < previous
126	395	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
127	396	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] >= $
127	396	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] >= previous
127	396	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] >= previous
128	400	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] > $
128	400	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] > previous
128	400	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] > previous
129	413	8	MathArrays.java	checkOrder	max	int	0	RET	index == $
129	413	8	MathArrays.java	checkOrder	index	int	0	RET	$ == max
130	419	8	MathArrays.java	checkOrder	abort	boolean	1	NonMonotonicSequenceException	$
14811	462	8	MathArrays.java	checkRectangular	THIS	MathArrays	0	NIL-FOR	i < in.$.length
14811	462	8	MathArrays.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
14811	462	8	MathArrays.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
131	463	12	MathArrays.java	checkRectangular	THIS	MathArrays	0	DimensionMismatchException	in[i].length != in[0].length
131	463	12	MathArrays.java	checkRectangular	i	int	0	DimensionMismatchException	in[$].length != in[0].length
131	463	12	MathArrays.java	checkRectangular	in	long[][]	0	DimensionMismatchException	$[i].length != $[0].length
14812	481	8	MathArrays.java	checkPositive	THIS	MathArrays	0	NIL-FOR	i < in.$.length
14812	481	8	MathArrays.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
14812	481	8	MathArrays.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
132	482	12	MathArrays.java	checkPositive	i	int	0	NotStrictlyPositiveException	in[$] <= 0
132	482	12	MathArrays.java	checkPositive	in	double[]	0	NotStrictlyPositiveException	$[i] <= 0
14813	497	8	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	i < in.$.length
14813	497	8	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
14813	497	8	MathArrays.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
133	498	12	MathArrays.java	checkNonNegative	i	int	0	NotPositiveException	in[$] < 0
133	498	12	MathArrays.java	checkNonNegative	in	long[]	0	NotPositiveException	$[i] < 0
14814	513	8	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	i < in.$.length
14814	513	8	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
14814	513	8	MathArrays.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
14815	514	12	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	j < in[i].length
14815	514	12	MathArrays.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
14815	514	12	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
14815	514	12	MathArrays.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
134	515	16	MathArrays.java	checkNonNegative	j	int	0	NotPositiveException	in[i][$] < 0
134	515	16	MathArrays.java	checkNonNegative	i	int	0	NotPositiveException	in[$][j] < 0
134	515	16	MathArrays.java	checkNonNegative	in	long[][]	0	NotPositiveException	$[i][j] < 0
14816	592	8	MathArrays.java	safeNorm	THIS	MathArrays	0	NIL-FOR	i < v.$.length
14816	592	8	MathArrays.java	safeNorm	i	int	0	NIL-FOR	$ < v.length
14816	592	8	MathArrays.java	safeNorm	v	double[]	0	NIL-FOR	i < $.length
135	594	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ < rdwarf
135	594	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > agiant
135	594	12	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs < $
135	594	12	MathArrays.java	safeNorm	agiant	double	1	DEF	xabs > $
136	595	16	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > rdwarf
136	595	16	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs > $
137	596	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x1max
137	596	20	MathArrays.java	safeNorm	x1max	double	1	DEF	xabs > $
138	605	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x3max
138	605	20	MathArrays.java	safeNorm	x3max	double	1	DEF	xabs > $
139	610	24	MathArrays.java	safeNorm	xabs	double	0	DEF	$ != 0
140	621	8	MathArrays.java	safeNorm	s1	double	1	DEF	$ != 0
141	624	12	MathArrays.java	safeNorm	s2	double	1	DEF	$ == 0
142	627	16	MathArrays.java	safeNorm	s2	double	1	DEF	$ >= x3max
142	627	16	MathArrays.java	safeNorm	x3max	double	1	DEF	s2 >= $
143	679	8	MathArrays.java	sortInPlace	x	double[]	0	NullArgumentException	$ == null
14817	688	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
14817	688	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
14818	690	12	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
14818	690	12	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
144	692	16	MathArrays.java	sortInPlace	y	double[]	0	NullArgumentException	$ == null
145	695	16	MathArrays.java	sortInPlace	THIS	MathArrays	0	DimensionMismatchException	y.$.length != len
145	695	16	MathArrays.java	sortInPlace	y	double[]	0	DimensionMismatchException	$.length != len
145	695	16	MathArrays.java	sortInPlace	len	int	0	DimensionMismatchException	y.length != $
14819	725	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
14819	725	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
14820	729	12	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
14820	729	12	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
146	805	8	MathArrays.java	linearCombination	THIS	MathArrays	0	DimensionMismatchException	len != b.$.length
146	805	8	MathArrays.java	linearCombination	len	int	0	DimensionMismatchException	$ != b.length
146	805	8	MathArrays.java	linearCombination	b	double[]	0	DimensionMismatchException	len != $.length
14821	812	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
14821	812	8	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
14822	838	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < lenMinusOne
14822	838	8	MathArrays.java	linearCombination	lenMinusOne	int	0	NIL-FOR	i < $
147	848	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
14823	852	12	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
14823	852	12	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
148	928	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
149	1025	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
150	1144	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
151	1164	8	MathArrays.java	equals	x	float[]	0	RET	$ == null
151	1164	8	MathArrays.java	equals	y	float[]	0	RET	$ == null
152	1167	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
152	1167	8	MathArrays.java	equals	x	float[]	0	RET	$.length != y.length
152	1167	8	MathArrays.java	equals	y	float[]	0	RET	x.length != $.length
14824	1170	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
14824	1170	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
14824	1170	8	MathArrays.java	equals	x	float[]	0	NIL-FOR	i < $.length
153	1171	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
153	1171	12	MathArrays.java	equals	x	float[]	0	RET	Precision.equals($[i], y[i])
153	1171	12	MathArrays.java	equals	y	float[]	0	RET	Precision.equals(x[i], $[i])
154	1190	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$ == null
154	1190	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	$ == null
155	1193	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
155	1193	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$.length != y.length
155	1193	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	x.length != $.length
14825	1196	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
14825	1196	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
14825	1196	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	NIL-FOR	i < $.length
156	1197	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
156	1197	12	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
156	1197	12	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
157	1215	8	MathArrays.java	equals	x	double[]	0	RET	$ == null
157	1215	8	MathArrays.java	equals	y	double[]	0	RET	$ == null
158	1218	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
158	1218	8	MathArrays.java	equals	x	double[]	0	RET	$.length != y.length
158	1218	8	MathArrays.java	equals	y	double[]	0	RET	x.length != $.length
14826	1221	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
14826	1221	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
14826	1221	8	MathArrays.java	equals	x	double[]	0	NIL-FOR	i < $.length
159	1222	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
159	1222	12	MathArrays.java	equals	x	double[]	0	RET	Precision.equals($[i], y[i])
159	1222	12	MathArrays.java	equals	y	double[]	0	RET	Precision.equals(x[i], $[i])
160	1241	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$ == null
160	1241	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	$ == null
161	1244	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
161	1244	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$.length != y.length
161	1244	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	x.length != $.length
14827	1247	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
14827	1247	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
14827	1247	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	NIL-FOR	i < $.length
162	1248	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
162	1248	12	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
162	1248	12	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
163	1279	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isInfinite($)
164	1282	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isNaN($)
14828	1288	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
14828	1288	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
165	1289	13	MathArrays.java	normalizeArray	i	int	0	MathIllegalArgumentException	Double.isInfinite(values[$])
165	1289	13	MathArrays.java	normalizeArray	values	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
166	1292	13	MathArrays.java	normalizeArray	i	int	0	DEF	Double.isNaN(values[$])
166	1292	13	MathArrays.java	normalizeArray	values	double[]	0	DEF	Double.isNaN($[i])
167	1296	9	MathArrays.java	normalizeArray	sum	double	0	MathArithmeticException	$ == 0
14829	1299	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
14829	1299	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
168	1300	13	MathArrays.java	normalizeArray	i	int	1	DEF	Double.isNaN(values[$])
168	1300	13	MathArrays.java	normalizeArray	values	double[]	1	DEF	Double.isNaN($[i])
169	1341	9	MathArrays.java	buildArray	columns	int	1	DEF	$ < 0
14830	1349	13	MathArrays.java	buildArray	i	int	0	NIL-FOR	$ < rows
14830	1349	13	MathArrays.java	buildArray	rows	int	0	NIL-FOR	i < $
14831	1389	9	MathArrays.java	convolve	n	int	0	NIL-FOR	$ < totalLength
14831	1389	9	MathArrays.java	convolve	totalLength	int	0	NIL-FOR	n < $
14832	1391	13	MathArrays.java	convolve	k	int	0	NIL-FOR	$ < M
171	1393	17	MathArrays.java	convolve	j	int	0	DEF	$ < N
171	1393	17	MathArrays.java	convolve	j	int	0	DEF	$ > -1
513	129	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ >= 0
513	129	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ < 0
513	129	8	MathUtils.java	copySign	sign	byte	1	RET	$ >= 0
513	129	8	MathUtils.java	copySign	sign	byte	1	RET	$ < 0
514	132	15	MathUtils.java	copySign	magnitude	byte	1	MathArithmeticException	$ == Byte.MIN_VALUE
514	132	15	MathUtils.java	copySign	sign	byte	1	MathArithmeticException	$ >= 0
515	152	8	MathUtils.java	copySign	magnitude	short	1	RET	$ < 0
515	152	8	MathUtils.java	copySign	magnitude	short	1	RET	$ >= 0
515	152	8	MathUtils.java	copySign	sign	short	1	RET	$ < 0
515	152	8	MathUtils.java	copySign	sign	short	1	RET	$ >= 0
516	155	15	MathUtils.java	copySign	magnitude	short	1	MathArithmeticException	$ == Short.MIN_VALUE
516	155	15	MathUtils.java	copySign	sign	short	1	MathArithmeticException	$ >= 0
517	175	8	MathUtils.java	copySign	magnitude	int	1	RET	$ >= 0
517	175	8	MathUtils.java	copySign	magnitude	int	1	RET	$ < 0
517	175	8	MathUtils.java	copySign	sign	int	1	RET	$ < 0
517	175	8	MathUtils.java	copySign	sign	int	1	RET	$ >= 0
518	178	15	MathUtils.java	copySign	magnitude	int	1	MathArithmeticException	$ == Integer.MIN_VALUE
518	178	15	MathUtils.java	copySign	sign	int	1	MathArithmeticException	$ >= 0
519	198	8	MathUtils.java	copySign	magnitude	long	1	RET	$ >= 0
519	198	8	MathUtils.java	copySign	magnitude	long	1	RET	$ < 0
519	198	8	MathUtils.java	copySign	sign	long	1	RET	$ < 0
519	198	8	MathUtils.java	copySign	sign	long	1	RET	$ >= 0
520	201	15	MathUtils.java	copySign	magnitude	long	1	MathArithmeticException	$ == Long.MIN_VALUE
520	201	15	MathUtils.java	copySign	sign	long	1	MathArithmeticException	$ >= 0
521	217	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
521	217	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
14855	231	8	MathUtils.java	checkFinite	THIS	MathUtils	0	NIL-FOR	i < val.$.length
14855	231	8	MathUtils.java	checkFinite	i	int	0	NIL-FOR	$ < val.length
14855	231	8	MathUtils.java	checkFinite	val	double[]	0	NIL-FOR	i < $.length
522	233	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
522	233	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
523	251	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
524	264	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
1586	130	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$[0] == null
1586	130	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$ == null
1587	159	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$ == null
1587	159	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$[0] == null
15454	177	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
15454	177	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
15455	198	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
15455	198	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
15456	216	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
15456	216	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
15456	216	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
15457	235	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
15457	235	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
15457	235	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
1588	251	8	MatrixUtils.java	createRealVector	data	double[]	0	NullArgumentException	$ == null
1589	269	8	MatrixUtils.java	createFieldVector	data	T[]	0	NullArgumentException	$ == null
1590	272	8	MatrixUtils.java	createFieldVector	THIS	MatrixUtils	0	ZeroException	data.$.length == 0
1590	272	8	MatrixUtils.java	createFieldVector	data	T[]	0	ZeroException	$.length == 0
1591	289	8	MatrixUtils.java	createRowRealMatrix	rowData	double[]	0	NullArgumentException	$ == null
15458	294	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
15458	294	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
1592	313	8	MatrixUtils.java	createRowFieldMatrix	rowData	T[]	0	NullArgumentException	$ == null
1593	317	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
15459	321	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
15459	321	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
1594	338	8	MatrixUtils.java	createColumnRealMatrix	columnData	double[]	0	NullArgumentException	$ == null
15460	343	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
15460	343	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
1595	362	8	MatrixUtils.java	createColumnFieldMatrix	columnData	T[]	0	NullArgumentException	$ == null
1596	366	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NoDataException	$ == 0
15461	370	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
15461	370	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
1597	391	8	MatrixUtils.java	isSymmetricInternal	rows	int	0	NonSquareMatrixException:RET	$ != matrix.getColumnDimension()
1597	391	8	MatrixUtils.java	isSymmetricInternal	matrix	RealMatrix	0	NonSquareMatrixException:RET	rows != $.getColumnDimension()
1598	392	12	MatrixUtils.java	isSymmetricInternal	raiseException	boolean	1	NonSquareMatrixException	$
15462	398	8	MatrixUtils.java	isSymmetricInternal	i	int	0	NIL-FOR	$ < rows
15462	398	8	MatrixUtils.java	isSymmetricInternal	rows	int	0	NIL-FOR	i < $
15463	399	12	MatrixUtils.java	isSymmetricInternal	j	int	0	NIL-FOR	$ < rows
15463	399	12	MatrixUtils.java	isSymmetricInternal	rows	int	0	NIL-FOR	j < $
1599	402	16	MatrixUtils.java	isSymmetricInternal	mij	double	0	NonSymmetricMatrixException:RET	FastMath.abs($ - mji) > FastMath.max(FastMath.abs($), FastMath.abs(mji)) * relativeTolerance
1599	402	16	MatrixUtils.java	isSymmetricInternal	mji	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - $) > FastMath.max(FastMath.abs(mij), FastMath.abs($)) * relativeTolerance
1599	402	16	MatrixUtils.java	isSymmetricInternal	relativeTolerance	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - mji) > FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * $
1600	404	20	MatrixUtils.java	isSymmetricInternal	raiseException	boolean	1	NonSymmetricMatrixException	$
1601	467	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1601	467	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= m.getRowDimension()
1601	467	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1602	483	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1602	483	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1602	483	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= m.getColumnDimension()
1603	508	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1603	508	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1604	515	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1604	515	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1605	540	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1606	543	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1607	546	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedRows.$.length == 0
1607	546	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1608	549	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedColumns.$.length == 0
1608	549	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1609	571	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1609	571	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1609	571	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1609	571	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1610	588	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1610	588	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1610	588	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1610	588	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1611	606	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DimensionMismatchException	$.getColumnDimension() != right.getRowDimension()
1611	606	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DimensionMismatchException	left.getColumnDimension() != $.getRowDimension()
15464	745	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
15464	745	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
15465	776	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
15465	776	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
15466	848	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
15466	848	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
15467	849	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
15467	849	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
15468	882	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
15468	882	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
15469	884	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
15469	884	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1612	930	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$ == null
1612	930	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$.getRowDimension() != b.getDimension()
1612	930	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	DimensionMismatchException	rm.getRowDimension() != $.getDimension()
1612	930	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	DimensionMismatchException	$ == null
1613	935	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
15470	940	8	MatrixUtils.java	solveLowerTriangularSystem	i	int	0	NIL-FOR	$ < rows
15470	940	8	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	i < $
1614	942	12	MatrixUtils.java	solveLowerTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
15471	947	12	MatrixUtils.java	solveLowerTriangularSystem	j	int	0	NIL-FOR	$< rows
15471	947	12	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	j< $
1615	975	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$ == null
1615	975	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$.getRowDimension() != b.getDimension()
1615	975	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	DimensionMismatchException	rm.getRowDimension() != $.getDimension()
1615	975	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	DimensionMismatchException	$ == null
1616	980	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
15472	985	8	MatrixUtils.java	solveUpperTriangularSystem	i	int	0	NIL-FOR	$ >-1
1617	987	12	MatrixUtils.java	solveUpperTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
15473	992	12	MatrixUtils.java	solveUpperTriangularSystem	j	int	0	NIL-FOR	$>-1
1618	1013	8	MatrixUtils.java	blockInverse	n	int	0	NonSquareMatrixException	m.getColumnDimension() != $
1618	1013	8	MatrixUtils.java	blockInverse	m	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != n
1619	1027	8	MatrixUtils.java	blockInverse	aSolver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
1620	1034	8	MatrixUtils.java	blockInverse	dSolver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
1621	1042	8	MatrixUtils.java	blockInverse	tmp1Solver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
1622	1050	8	MatrixUtils.java	blockInverse	tmp2Solver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
2341	78	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
2341	78	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
2341	78	8	Max.java	increment	d	double	0	DEF	$ > value
2342	134	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
2342	134	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2342	134	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
2342	134	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
16130	136	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16130	136	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16130	136	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2343	137	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2343	137	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
2778	36	8	MaxEval.java	MaxEval	max	int	0	NotStrictlyPositiveException	$ <= 0
2779	36	8	MaxIter.java	MaxIter	max	int	0	NotStrictlyPositiveException	$ <= 0
2272	114	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
2273	124	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
2274	163	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
2274	163	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
2274	163	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
2274	163	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
16116	172	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16116	172	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16116	172	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2275	211	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, weights, begin, length)
2275	211	8	Mean.java	evaluate	values	double[]	0	RET	test($, weights, begin, length)
2275	211	8	Mean.java	evaluate	weights	double[]	0	RET	test(values, $, begin, length)
2275	211	8	Mean.java	evaluate	begin	int	0	RET	test(values, weights, $, length)
2275	211	8	Mean.java	evaluate	length	int	0	RET	test(values, weights, begin, $)
16117	220	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16117	220	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16117	220	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
16620	147	8	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
3146	167	8	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
16621	176	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
3147	182	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
3148	186	12	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
3148	186	12	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
3148	186	12	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
16622	191	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
3149	197	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
3150	233	8	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
16623	235	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
16624	241	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
3954	154	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$ == null
3954	154	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	NullArgumentException	$ == null
3955	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NoDataException	xval.$.length == 0
3955	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NoDataException	$.length == 0
3956	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xval.$.length != yval.$.length
3956	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DimensionMismatchException	$.length != yval.length
3956	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3957	164	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$[0] == null
16992	173	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NIL-FOR	i < xval.$.length
16992	173	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < xval.length
16992	173	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NIL-FOR	i < $.length
3958	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	NullArgumentException	$ == null
3959	178	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xvalI.$.length != $.dimension
3959	178	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	DimensionMismatchException	$.length != dimension
16993	188	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < microsphereElements
16993	188	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	microsphereElements	int	0	NIL-FOR	i < $
3960	213	12	MicrosphereInterpolatingFunction.java	value	diffNorm	double	0	RET	FastMath.abs($) < FastMath.ulp(1d)
3961	232	12	MicrosphereInterpolatingFunction.java	value	sd	Entry<RealVector,Double>	0	DEF	$ != null
3985	77	8	MicrosphereInterpolator.java	MicrosphereInterpolator	exponent	int	0	NotPositiveException	$ < 0
3986	80	8	MicrosphereInterpolator.java	MicrosphereInterpolator	elements	int	0	NotStrictlyPositiveException	$ <= 0
3505	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	1	DEF	$.previousState != null
3505	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
16848	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16848	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
16849	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16849	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2525	102	8	MillerUpdatingRegression.java	MillerUpdatingRegression	numberOfVariables	int	0	ModelSpecificationException	$ < 1
2526	105	8	MillerUpdatingRegression.java	MillerUpdatingRegression	includeConstant	boolean	1	DEF	$
16220	122	8	MillerUpdatingRegression.java	MillerUpdatingRegression	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
16220	122	8	MillerUpdatingRegression.java	MillerUpdatingRegression	i	int	0	NIL-FOR	$ < this.nvars
2527	125	8	MillerUpdatingRegression.java	MillerUpdatingRegression	errorTolerance	double	1	DEF	$ > 0
2528	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != $.nvars
2528	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2528	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2528	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length + 1 != $.nvars
2528	170	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length != nvars
2528	170	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length + 1 != nvars
2529	175	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
2530	195	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != y.$.length
2530	195	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2530	195	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2530	195	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2530	195	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
2531	201	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length == 0
2531	201	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length == 0
2532	205	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x[0].length + 1 > x.$.length
2532	205	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$[0].length + 1 > $.length
16221	210	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
16221	210	8	MillerUpdatingRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
16221	210	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
16222	242	8	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
16222	242	8	MillerUpdatingRegression.java	include	i	int	0	NIL-FOR	$ < x.length
16222	242	8	MillerUpdatingRegression.java	include	x	double[]	0	NIL-FOR	i < $.length
2533	243	12	MillerUpdatingRegression.java	include	w	double	0	RET	$ == 0.0
2534	248	12	MillerUpdatingRegression.java	include	xi	double	0	DEF	$ == 0.0
2535	255	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2536	258	16	MillerUpdatingRegression.java	include	tmp	double	0	DEF	FastMath.abs($) > Precision.EPSILON
16223	266	12	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	k < $.nvars
16223	266	12	MillerUpdatingRegression.java	include	k	int	0	NIL-FOR	$ < nvars
2537	269	16	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2538	278	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2539	297	8	MillerUpdatingRegression.java	smartAdd	_a	double	1	RET	$ > _b
2539	297	8	MillerUpdatingRegression.java	smartAdd	_b	double	1	RET	_a > $
2540	299	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_b > $
2540	299	12	MillerUpdatingRegression.java	smartAdd	_b	double	0	RET	$ > eps
2541	305	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_a > $
2541	305	12	MillerUpdatingRegression.java	smartAdd	_a	double	0	RET	$ > eps
16224	326	8	MillerUpdatingRegression.java	clear	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
16224	326	8	MillerUpdatingRegression.java	clear	i	int	0	NIL-FOR	$ < nvars
16225	344	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
16225	344	8	MillerUpdatingRegression.java	tolset	i	int	0	NIL-FOR	$ < nvars
16226	348	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
16226	348	8	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	$ < nvars
16227	351	12	MillerUpdatingRegression.java	tolset	row	int	0	NIL-FOR	$ < col
16227	351	12	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	row < $
2542	373	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ < 1
2543	376	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	ModelSpecificationException	nreq > $.nvars
2543	376	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ > this.nvars
2544	380	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.tol_set
16228	385	8	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ > -1
2545	386	12	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[i]) < $.tol[i]
2545	386	12	MillerUpdatingRegression.java	regcf	i	int	1	DEF	Math.sqrt(d[$]) < tol[$]
16229	393	16	MillerUpdatingRegression.java	regcf	j	int	0	NIL-FOR	$ < nreq
16229	393	16	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	j < $
2546	399	8	MillerUpdatingRegression.java	regcf	rankProblem	boolean	0	DEF	$
16230	400	12	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ < nreq
16230	400	12	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	i < $
2547	401	16	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2547	401	16	MillerUpdatingRegression.java	regcf	i	int	0	DEF	this.lindep[$]
16231	415	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
16231	415	8	MillerUpdatingRegression.java	singcheck	i	int	0	NIL-FOR	$ < nvars
16232	418	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
16232	418	8	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	$ < nvars
16233	424	12	MillerUpdatingRegression.java	singcheck	row	int	0	NIL-FOR	$ < col - 1
16233	424	12	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	row < $ - 1
2548	425	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	Math.abs($.r[pos]) * $.work_sing[row] < temp
2548	425	16	MillerUpdatingRegression.java	singcheck	row	int	0	DEF	Math.abs(r[pos]) * work_sing[$] < temp
2548	425	16	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	Math.abs(r[pos]) * work_sing[row] < $
2548	425	16	MillerUpdatingRegression.java	singcheck	pos	int	0	DEF	Math.abs(r[$]) * work_sing[row] < temp
2549	434	12	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	$.work_sing[col] < temp
2549	434	12	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	work_sing[col] < $
2549	434	12	MillerUpdatingRegression.java	singcheck	col	int	0	DEF	work_sing[$] < temp
2550	436	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	1	DEF	col < $.nvars - 1
2550	436	16	MillerUpdatingRegression.java	singcheck	col	int	1	DEF	$ < nvars - 1
16234	439	20	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	_xi < $.nvars
16234	439	20	MillerUpdatingRegression.java	singcheck	_xi	int	0	NIL-FOR	$ < nvars
16235	467	8	MillerUpdatingRegression.java	ss	i	int	0	NIL-FOR	$ > 0
2551	493	8	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	RET	$.nobs <= nreq
2551	493	8	MillerUpdatingRegression.java	cov	nreq	int	0	RET	this.nobs <= $
16236	497	8	MillerUpdatingRegression.java	cov	i	int	0	NIL-FOR	$ < nreq
16236	497	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	i < $
2552	498	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2552	498	12	MillerUpdatingRegression.java	cov	i	int	0	DEF	this.lindep[$]
16237	511	8	MillerUpdatingRegression.java	cov	row	int	0	NIL-FOR	$ < nreq
16237	511	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	row < $
2553	513	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[row]
2553	513	12	MillerUpdatingRegression.java	cov	row	int	0	DEF	this.lindep[$]
16238	514	16	MillerUpdatingRegression.java	cov	col	int	0	NIL-FOR	$ < nreq
16238	514	16	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	col < $
2554	515	20	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	1	DEF	$.lindep[col]
2554	515	20	MillerUpdatingRegression.java	cov	col	int	1	DEF	this.lindep[$]
2555	517	24	MillerUpdatingRegression.java	cov	col	int	1	DEF	row == $
2555	517	24	MillerUpdatingRegression.java	cov	row	int	1	DEF	$ == col
16239	522	24	MillerUpdatingRegression.java	cov	k	int	0	NIL-FOR	$ < nreq
16239	522	24	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	k < $
2556	523	28	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2556	523	28	MillerUpdatingRegression.java	cov	k	int	0	DEF	this.lindep[$]
16240	553	8	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	$ > 0
2557	554	12	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	1	DEF	$.lindep[row]
2557	554	12	MillerUpdatingRegression.java	inverse	row	int	1	DEF	this.lindep[$]
16241	556	16	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	$ > row
16241	556	16	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	col > $
16242	560	20	MillerUpdatingRegression.java	inverse	k	int	0	NIL-FOR	$ < col - 1
16242	560	20	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	k < $ - 1
2558	562	24	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2558	562	24	MillerUpdatingRegression.java	inverse	k	int	0	DEF	this.lindep[$]
2559	622	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	RET	in >= $.nvars
2559	622	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ < -1
2559	622	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ >= nvars
2560	627	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	DEF	$.d[in] > 0.0
2560	627	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	DEF	d[$] > 0.0
16243	630	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
16243	630	8	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	$ < nvars
16244	633	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col
16244	633	12	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	row < $
2561	637	12	MillerUpdatingRegression.java	getPartialCorrelations	sumxx	double	1	DEF	$ > 0.0
16245	644	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	row < $.nvars
16245	644	8	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < nvars
2562	647	8	MillerUpdatingRegression.java	getPartialCorrelations	sumyy	double	0	DEF	$ > 0.0
16246	651	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col1 < $.nvars
16246	651	8	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	$ < nvars
16247	655	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col1
16247	655	12	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	row < $
16248	657	16	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
16248	657	16	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
16249	665	12	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
16249	665	12	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
2563	703	8	MillerUpdatingRegression.java	vmove	from	int	0	RET	$ == to
2563	703	8	MillerUpdatingRegression.java	vmove	to	int	0	RET	from == $
2564	706	8	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	$.rss_set
2565	710	8	MillerUpdatingRegression.java	vmove	from	int	1	DEF	$ < to
2565	710	8	MillerUpdatingRegression.java	vmove	to	int	1	DEF	from < $
16250	722	8	MillerUpdatingRegression.java	vmove	count	int	0	NIL-WHILE	idx < $
16250	722	8	MillerUpdatingRegression.java	vmove	idx	int	0	NIL-WHILE	$ < count
2566	730	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d1 > $.epsilon
2566	730	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 > $.epsilon
2566	730	12	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	$ > this.epsilon
2566	730	12	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ > this.epsilon
2567	732	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	Math.abs(X) * Math.sqrt(d1) < $.tol[mp1]
2567	732	16	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	Math.abs(X) * Math.sqrt($) < tol[mp1]
2567	732	16	MillerUpdatingRegression.java	vmove	mp1	int	0	DEF	Math.abs(X) * Math.sqrt(d1) < tol[$]
2568	735	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	Math.abs(X) < $.epsilon
2568	735	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	d1 < $.epsilon
2568	735	16	MillerUpdatingRegression.java	vmove	d1	double	1	DEF	$ < this.epsilon
16251	739	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
16251	739	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2569	751	23	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 < $.epsilon
2569	751	23	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ < this.epsilon
16252	754	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	_i < m1 + $.nvars - m - 1
16252	754	20	MillerUpdatingRegression.java	vmove	_i	int	0	NIL-FOR	$ < m1 + nvars - m - 1
16252	754	20	MillerUpdatingRegression.java	vmove	m1	int	0	NIL-FOR	_i < $ + nvars - m - 1
16252	754	20	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	_i < m1 + nvars - $ - 1
2570	761	16	MillerUpdatingRegression.java	vmove	bSkipTo40	boolean	0	DEF	$
16253	769	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
16253	769	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2571	781	12	MillerUpdatingRegression.java	vmove	m	int	0	DEF	$ > 0
16254	783	16	MillerUpdatingRegression.java	vmove	row	int	0	NIL-FOR	$ < m
16254	783	16	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	row < $
2572	824	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length < 1
2572	824	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length > $.nvars + 1 - pos1
2572	824	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length < 1
2572	824	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length > nvars + 1 - pos1
2572	824	8	MillerUpdatingRegression.java	reorderRegressors	pos1	int	0	RET	list.length > nvars + 1 - $
16255	829	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-WHILE	i < $.nvars
16255	829	8	MillerUpdatingRegression.java	reorderRegressors	i	int	0	NIL-WHILE	$ < nvars
16256	831	12	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-FOR	j < list.$.length
16256	831	12	MillerUpdatingRegression.java	reorderRegressors	j	int	0	NIL-FOR	$ < list.length
16256	831	12	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	NIL-FOR	j < $.length
2573	832	16	MillerUpdatingRegression.java	reorderRegressors	j	int	0	RET	l == list[$]
2573	832	16	MillerUpdatingRegression.java	reorderRegressors	next	int	0	RET	i > $
2573	832	16	MillerUpdatingRegression.java	reorderRegressors	i	int	0	RET	$ > next
2573	832	16	MillerUpdatingRegression.java	reorderRegressors	l	int	0	RET	$ == list[j]
2573	832	16	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	l == $[j]
2574	835	20	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	1	RET	next >= list.$.length + pos1
2574	835	20	MillerUpdatingRegression.java	reorderRegressors	next	int	1	RET	$ >= list.length + pos1
2574	835	20	MillerUpdatingRegression.java	reorderRegressors	list	int[]	1	RET	next >= $.length + pos1
2574	835	20	MillerUpdatingRegression.java	reorderRegressors	pos1	int	1	RET	next >= list.length + $
2575	858	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	RET	row_data.$.length > $.nvars
2575	858	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row_data	double[]	0	RET	$.length > nvars
2576	862	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
16257	870	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	NIL-FOR	col < xrow.$.length
16257	870	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	$ < xrow.length
16257	870	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	xrow	double[]	0	NIL-FOR	col < $.length
2577	871	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[col]) < $.tol[col]
2577	871	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	1	DEF	Math.sqrt(d[$]) < tol[$]
16258	876	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row	int	0	NIL-FOR	$ < col
16258	876	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	row < $
2578	920	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= numberOfRegressors
2578	920	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	this.nobs <= $
2579	925	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	numberOfRegressors > $.nvars
2579	925	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	$ > this.nvars
16259	940	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
16259	940	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2580	941	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2580	941	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
16260	947	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < numberOfRegressors
16260	947	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	i < $
2581	948	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != i
2581	948	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != $
2582	953	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
16261	962	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
16261	962	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < nvars
16262	963	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < numberOfRegressors
16262	963	16	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	j < $
2583	964	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == i
2583	964	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == i
2583	964	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == $
16263	975	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
16263	975	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
16263	975	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
16264	977	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
16264	977	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2584	979	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2584	979	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2585	1006	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	variablesToInclude.$.length > $.nvars
2585	1006	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > this.nvars
2586	1010	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= $.nvars
16265	1017	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
16265	1017	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
16265	1017	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2587	1018	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	i >= $.nvars
2587	1018	12	MillerUpdatingRegression.java	regress	i	int	0	ModelSpecificationException	$ >= this.nvars
2588	1022	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] == variablesToInclude[$ - 1]
2588	1022	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	$ > 0
2588	1022	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] == $[i - 1]
2589	1028	8	MillerUpdatingRegression.java	regress	iExclude	int	1	DEF	$ > 0
16266	1031	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
16266	1031	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
16266	1031	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2590	1032	16	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] > -1
2590	1032	16	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] > -1
16267	1052	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
16267	1052	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2591	1053	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2591	1053	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
16268	1059	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
16268	1059	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.nvars
2592	1060	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != series[i]
2592	1060	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != series[$]
2592	1060	12	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[i] != $[i]
2593	1065	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
16269	1072	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < series.$.length
16269	1072	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < series.length
16269	1072	12	MillerUpdatingRegression.java	regress	series	int[]	0	NIL-FOR	i < $.length
16270	1073	16	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	j < $.vorder.length
16270	1073	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < this.vorder.length
2594	1074	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == series[i]
2594	1074	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == series[i]
2594	1074	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == series[$]
2594	1074	20	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[j] == $[i]
16271	1085	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
16271	1085	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
16271	1085	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
16272	1087	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
16272	1087	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2595	1089	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2595	1089	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2338	78	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
2338	78	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
2338	78	8	Min.java	increment	d	double	0	DEF	$ < value
2339	134	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
2339	134	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2339	134	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
2339	134	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
16129	136	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16129	136	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16129	136	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2340	137	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2340	137	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
14931	88	8	MixtureMultivariateNormalDistribution.java	createComponents	THIS	MixtureMultivariateNormalDistribution	0	NIL-FOR	i < weights.$.length
14931	88	8	MixtureMultivariateNormalDistribution.java	createComponents	i	int	0	NIL-FOR	$ < weights.length
14931	88	8	MixtureMultivariateNormalDistribution.java	createComponents	weights	double[]	0	NIL-FOR	i < $.length
14950	72	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	i	int	0	NIL-FOR	$ < numComp
14950	72	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	numComp	int	0	NIL-FOR	i < $
1237	74	12	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	comp	Pair<Double,T>	0	DimensionMismatchException	$.getSecond().getDimension() != dim
1237	74	12	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	dim	int	0	DimensionMismatchException	comp.getSecond().getDimension() != $
1238	77	12	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	comp	Pair<Double,T>	0	NotPositiveException	$.getFirst() < 0
1239	84	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	weightSum	double	0	MathArithmeticException	Double.isInfinite($)
14951	91	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	i	int	0	NIL-FOR	$ < numComp
14951	91	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	numComp	int	0	NIL-FOR	i < $
14952	101	8	MixtureMultivariateRealDistribution.java	density	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
14952	101	8	MixtureMultivariateRealDistribution.java	density	i	int	0	NIL-FOR	$ < weight.length
14953	116	8	MixtureMultivariateRealDistribution.java	sample	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
14953	116	8	MixtureMultivariateRealDistribution.java	sample	i	int	0	NIL-FOR	$ < weight.length
1240	118	12	MixtureMultivariateRealDistribution.java	sample	randomValue	double	0	DEF	$ <= sum
1240	118	12	MixtureMultivariateRealDistribution.java	sample	sum	double	0	DEF	randomValue <= $
1241	125	8	MixtureMultivariateRealDistribution.java	sample	vals	double[]	0	DEF	$ == null
14954	141	8	MixtureMultivariateRealDistribution.java	reseedRandomGenerator	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.distribution.size()
14954	141	8	MixtureMultivariateRealDistribution.java	reseedRandomGenerator	i	int	0	NIL-FOR	$ < distribution.size()
14955	156	8	MixtureMultivariateRealDistribution.java	getComponents	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
14955	156	8	MixtureMultivariateRealDistribution.java	getComponents	i	int	0	NIL-FOR	$ < weight.length
4104	98	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMin) < $
4104	98	8	MullerSolver.java	doSolve	fMin	double	0	RET	FastMath.abs($) < functionValueAccuracy
4105	102	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMax) < $
4105	102	8	MullerSolver.java	doSolve	fMax	double	0	RET	FastMath.abs($) < functionValueAccuracy
4106	106	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fInitial) < $
4106	106	8	MullerSolver.java	doSolve	fInitial	double	0	RET	FastMath.abs($) < functionValueAccuracy
4107	112	8	MullerSolver.java	doSolve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial)
4107	112	8	MullerSolver.java	doSolve	min	double	1	RET	isBracketing($, initial)
4107	112	8	MullerSolver.java	doSolve	initial	double	1	RET	isBracketing(min, $)
4108	169	12	MullerSolver.java	solve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
4108	169	12	MullerSolver.java	solve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4108	169	12	MullerSolver.java	solve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
4108	169	12	MullerSolver.java	solve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
4108	169	12	MullerSolver.java	solve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
4109	182	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
4110	192	16	MullerSolver.java	solve	ym	double	1	DEF	FastMath.signum(y0) + FastMath.signum($) == 0.0
4110	192	16	MullerSolver.java	solve	y0	double	1	DEF	FastMath.signum($) + FastMath.signum(ym) == 0.0
4098	103	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y0) < $
4098	103	8	MullerSolver2.java	doSolve	y0	double	0	RET	FastMath.abs($) < functionValueAccuracy
4099	108	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y1) < $
4099	108	8	MullerSolver2.java	doSolve	y1	double	0	RET	FastMath.abs($) < functionValueAccuracy
4100	112	8	MullerSolver2.java	doSolve	y0	double	0	NoBracketingException	$ * y1 > 0
4100	112	8	MullerSolver2.java	doSolve	y1	double	0	NoBracketingException	y0 * $ > 0
4101	129	12	MullerSolver2.java	doSolve	delta	double	1	DEF	$ >= 0.0
4102	138	12	MullerSolver2.java	doSolve	denominator	double	1	DEF	$ != 0
17080	142	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x2
17080	142	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x1
17080	142	16	MullerSolver2.java	doSolve	x1	double	0	NIL-WHILE	x == $
17080	142	16	MullerSolver2.java	doSolve	x2	double	0	NIL-WHILE	x == $
4103	154	12	MullerSolver2.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
4103	154	12	MullerSolver2.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4103	154	12	MullerSolver2.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
4103	154	12	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
4103	154	12	MullerSolver2.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
2817	163	8	MultiDirectionalSimplex.java	iterate	best	PointValuePair	0	RET	comparator.compare(reflected, $) < 0
2817	163	8	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare($, best) < 0
2817	163	8	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(reflected, best) < 0
2818	168	12	MultiDirectionalSimplex.java	iterate	expanded	PointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
2818	168	12	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	DEF	comparator.compare($, expanded) <= 0
2818	168	12	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
16331	202	8	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
16331	202	8	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
16332	205	12	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
16332	205	12	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
1988	166	8	MultiDirectionalSimplex.java	iterate	best	PointValuePair	0	RET	comparator.compare(reflected, $) < 0
1988	166	8	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare($, best) < 0
1988	166	8	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(reflected, best) < 0
1989	171	12	MultiDirectionalSimplex.java	iterate	expanded	PointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
1989	171	12	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	DEF	comparator.compare($, expanded) <= 0
1989	171	12	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
15901	205	8	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
15901	205	8	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
15902	208	12	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
15902	208	12	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
16677	88	8	MultiKMeansPlusPlusClusterer.java	cluster	THIS	MultiKMeansPlusPlusClusterer	0	NIL-FOR	i < $.numTrials
16677	88	8	MultiKMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
3268	96	16	MultiKMeansPlusPlusClusterer.java	cluster	THIS	MultiKMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
3269	109	12	MultiKMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
3269	109	12	MultiKMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
2721	81	8	MultiStartUnivariateOptimizer.java	MultiStartUnivariateOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
2722	119	8	MultiStartUnivariateOptimizer.java	getOptima	THIS	MultiStartUnivariateOptimizer	0	MathIllegalStateException	$.optima == null
16286	147	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	NIL-FOR	i < $.optimData.$.length
16286	147	8	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < optimData.length
2723	148	12	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	DEF	$.optimData[i] instanceof MaxEval
2723	148	12	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof MaxEval
2724	153	12	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	DEF	$.optimData[i] instanceof SearchInterval
2724	153	12	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof SearchInterval
2725	159	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	MathIllegalStateException	$.maxEvalIndex == -1
2726	162	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	MathIllegalStateException	$.searchIntervalIndex == -1
16287	176	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	NIL-FOR	i < $.starts
16287	176	8	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < starts
2727	199	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	DEF	$.optima[0] == null
14791	173	8	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
14791	173	8	MultidimensionalCounter.java	MultidimensionalCounter	i	int	0	NIL-FOR	$ < last
14792	175	12	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	j < $.dimension
14792	175	12	MultidimensionalCounter.java	MultidimensionalCounter	j	int	0	NIL-FOR	$ < dimension
109	183	8	MultidimensionalCounter.java	MultidimensionalCounter	tS	int	0	NotStrictlyPositiveException	$ <= 0
110	217	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.totalSize
110	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ < 0
110	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ >= totalSize
14793	225	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
14793	225	8	MultidimensionalCounter.java	getCounts	i	int	0	NIL-FOR	$ < last
14794	228	12	MultidimensionalCounter.java	getCounts	count	int	0	NIL-WHILE	$ <= index
14794	228	12	MultidimensionalCounter.java	getCounts	index	int	0	NIL-WHILE	count <= $
111	255	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	DimensionMismatchException	c.$.length != $.dimension
111	255	8	MultidimensionalCounter.java	getCount	c	int	0	DimensionMismatchException	$.length != dimension
14795	259	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
14795	259	8	MultidimensionalCounter.java	getCount	i	int	0	NIL-FOR	$ < dimension
112	261	12	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.size[i]
112	261	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ < 0
112	261	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ >= size[i]
112	261	12	MultidimensionalCounter.java	getCount	i	int	0	OutOfRangeException	index >= size[$]
14796	293	8	MultidimensionalCounter.java	toString	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
14796	293	8	MultidimensionalCounter.java	toString	i	int	0	NIL-FOR	$ < dimension
3581	120	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	NumberIsTooSmallException	$ < 2
3582	232	12	MultistepIntegrator.java	start	THIS	MultistepIntegrator	1	DEF	$.starter instanceof AbstractIntegrator
3049	104	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
3049	104	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
3049	104	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
16522	107	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < lower.$.length
16522	107	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < lower.length
16522	107	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NIL-FOR	i < $.length
3050	109	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
3050	109	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
3050	109	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
16523	116	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
16523	116	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < mappers.length
3051	117	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(lower[$])
3051	117	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	1	DEF	Double.isInfinite($[i])
3052	118	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
3052	118	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
3053	126	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
3053	126	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
16524	146	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
16524	146	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	i	int	0	NIL-FOR	$ < mappers.length
16525	162	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
16525	162	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	i	int	0	NIL-FOR	$ < mappers.length
2227	105	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2227	105	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2227	105	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
16096	108	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < lower.$.length
16096	108	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < lower.length
16096	108	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NIL-FOR	i < $.length
2228	110	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2228	110	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2228	110	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
16097	117	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
16097	117	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < mappers.length
2229	118	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(lower[$])
2229	118	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	1	DEF	Double.isInfinite($[i])
2230	119	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2230	119	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
2231	127	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2231	127	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
16098	147	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
16098	147	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	i	int	0	NIL-FOR	$ < mappers.length
16099	163	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
16099	163	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	i	int	0	NIL-FOR	$ < mappers.length
3043	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
3043	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
3043	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
3044	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != scale.$.length
3044	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != scale.length
3044	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	scale	double[]	0	DimensionMismatchException	lower.length != $.length
16519	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < lower.$.length
16519	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NIL-FOR	$ < lower.length
16519	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NIL-FOR	i < $.length
3045	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
3045	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
3045	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
16520	164	8	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < $.scale.$.length
16520	164	8	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	NIL-FOR	$ < scale.length
3046	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] > $.upper[i]
3046	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] < $.lower[i]
3046	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] > upper[$]
3046	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] < lower[$]
3046	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] > upper[i]
3046	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] < lower[i]
16521	168	16	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	j < $.scale.$.length
16521	168	16	MultivariateFunctionPenaltyAdapter.java	value	j	int	0	NIL-FOR	$ < scale.length
3047	170	20	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] < $.lower[j]
3047	170	20	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] < lower[$]
3047	170	20	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] < lower[j]
3048	172	27	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] > $.upper[j]
3048	172	27	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] > upper[$]
3048	172	27	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] > upper[j]
2221	133	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2221	133	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2221	133	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
2222	136	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != scale.$.length
2222	136	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != scale.length
2222	136	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	scale	double[]	0	DimensionMismatchException	lower.length != $.length
16093	139	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < lower.$.length
16093	139	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NIL-FOR	$ < lower.length
16093	139	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NIL-FOR	i < $.length
2223	141	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2223	141	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2223	141	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
16094	166	8	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < $.scale.$.length
16094	166	8	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	NIL-FOR	$ < scale.length
2224	167	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] < $.lower[i]
2224	167	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] > $.upper[i]
2224	167	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] < lower[$]
2224	167	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] > upper[$]
2224	167	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] < lower[i]
2224	167	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] > upper[i]
16095	170	16	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	j < $.scale.$.length
16095	170	16	MultivariateFunctionPenaltyAdapter.java	value	j	int	0	NIL-FOR	$ < scale.length
2225	172	20	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] < $.lower[j]
2225	172	20	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] < lower[$]
2225	172	20	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] < lower[j]
2226	174	27	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] > $.upper[j]
2226	174	27	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] > upper[$]
2226	174	27	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] > upper[j]
1098	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	covariances.$.length != dim
1098	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	DimensionMismatchException	covariances.length != $
1098	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covariances	double[][]	0	DimensionMismatchException	$.length != dim
14911	111	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NIL-FOR	$ < dim
14911	111	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	i < $
1099	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	dim != covariances[i].length
1099	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	DimensionMismatchException	dim != covariances[$].length
1099	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	DimensionMismatchException	$ != covariances[i].length
1099	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covariances	double[][]	0	DimensionMismatchException	dim != $[i].length
14912	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < covMatEigenvalues.$.length
14912	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NIL-FOR	$ < covMatEigenvalues.length
14912	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covMatEigenvalues	double[]	0	NIL-FOR	i < $.length
1100	133	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NonPositiveDefiniteMatrixException	covMatEigenvalues[$] < 0
1100	133	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covMatEigenvalues	double[]	0	NonPositiveDefiniteMatrixException	$[i] < 0
14913	140	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	v	int	0	NIL-FOR	$ < dim
14913	140	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	v < $
14914	148	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	row	int	0	NIL-FOR	$ < dim
14914	148	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	row < $
14915	150	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	col	int	0	NIL-FOR	$ < dim
14915	150	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	col < $
1101	179	8	MultivariateNormalDistribution.java	density	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	vals.$.length != dim
1101	179	8	MultivariateNormalDistribution.java	density	dim	int	0	DimensionMismatchException	vals.length != $
1101	179	8	MultivariateNormalDistribution.java	density	vals	double[]	0	DimensionMismatchException	$.length != dim
14916	198	8	MultivariateNormalDistribution.java	getStandardDeviations	i	int	0	NIL-FOR	$ < dim
14916	198	8	MultivariateNormalDistribution.java	getStandardDeviations	dim	int	0	NIL-FOR	i < $
14917	209	8	MultivariateNormalDistribution.java	sample	i	int	0	NIL-FOR	$ < dim
14917	209	8	MultivariateNormalDistribution.java	sample	dim	int	0	NIL-FOR	i < $
14918	215	8	MultivariateNormalDistribution.java	sample	i	int	0	NIL-FOR	$ < dim
14918	215	8	MultivariateNormalDistribution.java	sample	dim	int	0	NIL-FOR	i < $
14919	230	8	MultivariateNormalDistribution.java	getExponentTerm	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < centered.$.length
14919	230	8	MultivariateNormalDistribution.java	getExponentTerm	i	int	0	NIL-FOR	$ < centered.length
14919	230	8	MultivariateNormalDistribution.java	getExponentTerm	centered	double[]	0	NIL-FOR	i < $.length
14920	235	8	MultivariateNormalDistribution.java	getExponentTerm	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < preMultiplied.$.length
14920	235	8	MultivariateNormalDistribution.java	getExponentTerm	i	int	0	NIL-FOR	$ < preMultiplied.length
14920	235	8	MultivariateNormalDistribution.java	getExponentTerm	preMultiplied	double[]	0	NIL-FOR	i < $.length
1179	89	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	NotStrictlyPositiveException	data.$.length < 1
1179	89	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	NotStrictlyPositiveException	$.length < 1
14932	95	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	NIL-FOR	i < data.$.length
14932	95	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	i	int	0	NIL-FOR	$ < data.length
14932	95	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	NIL-FOR	i < $.length
1180	96	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	DimensionMismatchException	data[i].length != data[0].length
1180	96	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	i	int	0	DimensionMismatchException	data[$].length != data[0].length
1180	96	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	DimensionMismatchException	$[i].length != $[0].length
1181	101	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	NumberIsTooSmallException	data[i].length < 2
1181	101	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	i	int	0	NumberIsTooSmallException	data[$].length < 2
1181	101	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	NumberIsTooSmallException	$[i].length < 2
1182	137	8	MultivariateNormalMixtureExpectationMaximization.java	fit	maxIterations	int	0	NotStrictlyPositiveException	$ < 1
1183	141	8	MultivariateNormalMixtureExpectationMaximization.java	fit	threshold	double	0	NotStrictlyPositiveException	$ < Double.MIN_VALUE
1184	155	8	MultivariateNormalMixtureExpectationMaximization.java	fit	numCols	int	0	DimensionMismatchException	numMeanColumns != $
1184	155	8	MultivariateNormalMixtureExpectationMaximization.java	fit	numMeanColumns	int	0	DimensionMismatchException	$ != numCols
14933	167	8	MultivariateNormalMixtureExpectationMaximization.java	fit	THIS	MultivariateNormalMixtureExpectationMaximization	0	NIL-WHILE	Math.abs(previousLogLikelihood - $.logLikelihood) > threshold
14933	167	8	MultivariateNormalMixtureExpectationMaximization.java	fit	numIterations	int	0	NIL-WHILE	$++ <= maxIterations
14933	167	8	MultivariateNormalMixtureExpectationMaximization.java	fit	previousLogLikelihood	double	0	NIL-WHILE	Math.abs($ - logLikelihood) > threshold
14933	167	8	MultivariateNormalMixtureExpectationMaximization.java	fit	maxIterations	int	0	NIL-WHILE	numIterations++ <= $
14933	167	8	MultivariateNormalMixtureExpectationMaximization.java	fit	threshold	double	0	NIL-WHILE	Math.abs(previousLogLikelihood - logLikelihood) > $
14934	181	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
14934	181	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
14935	198	12	MultivariateNormalMixtureExpectationMaximization.java	fit	i	int	0	NIL-FOR	$ < n
14935	198	12	MultivariateNormalMixtureExpectationMaximization.java	fit	n	int	0	NIL-FOR	i < $
14936	202	16	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
14936	202	16	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
14937	206	20	MultivariateNormalMixtureExpectationMaximization.java	fit	col	int	0	NIL-FOR	$ < numCols
14937	206	20	MultivariateNormalMixtureExpectationMaximization.java	fit	numCols	int	0	NIL-FOR	col < $
14938	219	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
14938	219	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
14939	221	16	MultivariateNormalMixtureExpectationMaximization.java	fit	col	int	0	NIL-FOR	$ < numCols
14939	221	16	MultivariateNormalMixtureExpectationMaximization.java	fit	numCols	int	0	NIL-FOR	col < $
14940	228	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
14940	228	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
14941	231	12	MultivariateNormalMixtureExpectationMaximization.java	fit	i	int	0	NIL-FOR	$ < n
14941	231	12	MultivariateNormalMixtureExpectationMaximization.java	fit	n	int	0	NIL-FOR	i < $
14942	232	16	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
14942	232	16	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
14943	243	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
14943	243	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
1185	254	8	MultivariateNormalMixtureExpectationMaximization.java	fit	THIS	MultivariateNormalMixtureExpectationMaximization	0	ConvergenceException	Math.abs(previousLogLikelihood - $.logLikelihood) > threshold
1185	254	8	MultivariateNormalMixtureExpectationMaximization.java	fit	previousLogLikelihood	double	0	ConvergenceException	Math.abs($ - logLikelihood) > threshold
1185	254	8	MultivariateNormalMixtureExpectationMaximization.java	fit	threshold	double	0	ConvergenceException	Math.abs(previousLogLikelihood - logLikelihood) > $
1186	305	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	THIS	MultivariateNormalMixtureExpectationMaximization	0	NotStrictlyPositiveException	data.$.length < 2
1186	305	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	data	double[][]	0	NotStrictlyPositiveException	$.length < 2
1187	308	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numComponents	int	0	NumberIsTooSmallException	$ < 2
1188	311	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	THIS	MultivariateNormalMixtureExpectationMaximization	0	NumberIsTooLargeException	numComponents > data.$.length
1188	311	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	data	double[][]	0	NumberIsTooLargeException	numComponents > $.length
1188	311	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numComponents	int	0	NumberIsTooLargeException	$ > data.length
14944	320	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	i	int	0	NIL-FOR	$ < numRows
14944	320	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numRows	int	0	NIL-FOR	i < $
14945	333	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	binIndex	int	0	NIL-FOR	$ < numComponents
14945	333	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numComponents	int	0	NIL-FOR	binIndex < $
14946	350	12	MultivariateNormalMixtureExpectationMaximization.java	estimate	i	int	0	NIL-FOR	$ < maxIndex
14946	350	12	MultivariateNormalMixtureExpectationMaximization.java	estimate	maxIndex	int	0	NIL-FOR	i < $
14947	351	16	MultivariateNormalMixtureExpectationMaximization.java	estimate	j	int	0	NIL-FOR	$ < numCols
14947	351	16	MultivariateNormalMixtureExpectationMaximization.java	estimate	numCols	int	0	NIL-FOR	j < $
3040	86	12	MultivariateOptimizer.java	parseOptimizationData	THIS	MultivariateOptimizer	0	DEF	$.data instanceof GoalType
3041	90	12	MultivariateOptimizer.java	parseOptimizationData	THIS	MultivariateOptimizer	0	DEF	$.data instanceof ObjectiveFunction
16100	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
16100	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
16101	150	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
16101	150	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
16102	187	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
16102	187	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
16102	187	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
2233	246	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
2234	248	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
16103	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
16103	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
16104	336	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
16104	336	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
16104	336	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
2235	337	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
16105	350	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
16105	350	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
2236	370	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
2236	370	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
2237	373	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
2238	620	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	MathIllegalStateException	$.n > 0
2239	632	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
2239	632	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
3061	136	12	MultivariateVectorOptimizer.java	parseOptimizationData	THIS	MultivariateVectorOptimizer	0	DEF	$.data instanceof ModelFunction
3062	140	12	MultivariateVectorOptimizer.java	parseOptimizationData	THIS	MultivariateVectorOptimizer	0	DEF	$.data instanceof Target
3063	144	12	MultivariateVectorOptimizer.java	parseOptimizationData	THIS	MultivariateVectorOptimizer	0	DEF	$.data instanceof Weight
3064	161	8	MultivariateVectorOptimizer.java	checkParameters	THIS	MultivariateVectorOptimizer	0	DimensionMismatchException	$.target.$.length != $.weightMatrix.getColumnDimension()
3204	68	8	NPointCrossover.java	NPointCrossover	crossoverPoints	int	0	NotStrictlyPositiveException	$ <= 0
3205	111	8	NPointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3205	111	8	NPointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3206	131	8	NPointCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3206	131	8	NPointCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
3207	134	8	NPointCrossover.java	mate	THIS	NPointCrossover	0	NumberIsTooLargeException	$.crossoverPoints >= length
3207	134	8	NPointCrossover.java	mate	length	int	0	NumberIsTooLargeException	crossoverPoints >= $
16653	152	8	NPointCrossover.java	mate	THIS	NPointCrossover	0	NIL-FOR	i < $.crossoverPoints
16653	152	8	NPointCrossover.java	mate	i	int	0	NIL-FOR	$ < crossoverPoints
16654	157	12	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < crossoverIndex
16654	157	12	NPointCrossover.java	mate	crossoverIndex	int	0	NIL-FOR	j < $
16655	171	8	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < length
16655	171	8	NPointCrossover.java	mate	length	int	0	NIL-FOR	j < $
16201	196	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
16201	196	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
16201	196	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
2491	217	16	NaturalRanking.java	rank	nanPositions	List<Integer>	0	NotANumberException	$.size() > 0
16202	235	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
16202	235	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
16202	235	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2492	236	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
2492	236	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
2493	239	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2494	250	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2495	253	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
2496	267	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
2496	267	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
16203	272	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
16203	272	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
16203	272	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2497	273	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
2497	273	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
16204	275	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
16204	275	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
16204	275	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
16205	297	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
16205	297	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
16205	297	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2498	298	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2498	298	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
16206	312	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
16206	312	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
16206	312	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2499	313	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
2499	313	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
16207	355	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
16208	366	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
16209	384	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
2500	396	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
16210	400	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
16211	414	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
16211	414	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
16211	414	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2501	415	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2501	415	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
16509	200	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
16509	200	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
16510	202	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
16510	202	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
16511	207	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
16511	207	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
16512	213	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
16512	213	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3029	219	8	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare($, reflected) <= 0
3029	219	8	NelderMeadSimplex.java	iterate	secondBest	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
3029	219	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, secondBest) < 0
3029	219	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(best, $) <= 0
3029	219	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
3029	219	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(best, reflected) <= 0
3030	223	15	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
3030	223	15	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, best) < 0
3030	223	15	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, best) < 0
16513	226	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
16513	226	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3031	232	12	NelderMeadSimplex.java	iterate	expanded	PointValuePair	1	DEF	comparator.compare($, reflected) < 0
3031	232	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(expanded, $) < 0
3031	232	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
3032	240	12	NelderMeadSimplex.java	iterate	worst	PointValuePair	1	RET	comparator.compare(reflected, $) < 0
3032	240	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	RET	comparator.compare($, worst) < 0
3032	240	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	RET	$.compare(reflected, worst) < 0
16514	243	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
16514	243	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3033	248	16	NelderMeadSimplex.java	iterate	outContracted	PointValuePair	0	RET	comparator.compare($, reflected) <= 0
3033	248	16	NelderMeadSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
3033	248	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
16515	256	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
16515	256	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3034	262	16	NelderMeadSimplex.java	iterate	inContracted	PointValuePair	0	RET	comparator.compare($, worst) < 0
3034	262	16	NelderMeadSimplex.java	iterate	worst	PointValuePair	0	RET	comparator.compare(inContracted, $) < 0
3034	262	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(inContracted, worst) < 0
16516	271	12	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
16516	271	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
16517	273	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
16517	273	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
16079	203	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
16079	203	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
16080	205	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
16080	205	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
16081	210	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
16081	210	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
16082	216	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
16082	216	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2200	222	8	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare($, reflected) <= 0
2200	222	8	NelderMeadSimplex.java	iterate	secondBest	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
2200	222	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(best, $) <= 0
2200	222	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, secondBest) < 0
2200	222	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(best, reflected) <= 0
2200	222	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
2201	226	15	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
2201	226	15	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, best) < 0
2201	226	15	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, best) < 0
16083	229	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
16083	229	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2202	235	12	NelderMeadSimplex.java	iterate	expanded	PointValuePair	1	DEF	comparator.compare($, reflected) < 0
2202	235	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(expanded, $) < 0
2202	235	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
2203	243	12	NelderMeadSimplex.java	iterate	worst	PointValuePair	1	RET	comparator.compare(reflected, $) < 0
2203	243	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	RET	comparator.compare($, worst) < 0
2203	243	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	RET	$.compare(reflected, worst) < 0
16084	246	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
16084	246	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2204	251	16	NelderMeadSimplex.java	iterate	outContracted	PointValuePair	0	RET	comparator.compare($, reflected) <= 0
2204	251	16	NelderMeadSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
2204	251	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
16085	259	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
16085	259	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2205	265	16	NelderMeadSimplex.java	iterate	inContracted	PointValuePair	0	RET	comparator.compare($, worst) < 0
2205	265	16	NelderMeadSimplex.java	iterate	worst	PointValuePair	0	RET	comparator.compare(inContracted, $) < 0
2205	265	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(inContracted, worst) < 0
16086	274	12	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
16086	274	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
16087	276	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
16087	276	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
856	78	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	MathIllegalArgumentException	$[0] == null
14890	88	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	0	NIL-FOR	i < loop.$.length
14890	88	8	NestedLoops.java	NestedLoops	i	int	0	NIL-FOR	$ < loop.length
14890	88	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	NIL-FOR	i < $.length
857	99	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	1	DEF	Double.isInfinite($.polygon.getSize())
858	126	12	NestedLoops.java	add	THIS	NestedLoops	0	RET	$.child.$.polygon.contains(node.$.polygon)
858	126	12	NestedLoops.java	add	node	NestedLoops	0	RET	child.polygon.contains($.polygon)
14891	133	8	NestedLoops.java	add	iterator	Iterator<NestedLoops>	0	NIL-FOR	$.hasNext()
859	135	12	NestedLoops.java	add	THIS	NestedLoops	0	DEF	node.$.polygon.contains(child.$.polygon)
859	135	12	NestedLoops.java	add	child	NestedLoops	0	DEF	node.polygon.contains($.polygon)
859	135	12	NestedLoops.java	add	node	NestedLoops	0	DEF	$.polygon.contains(child.polygon)
860	144	12	NestedLoops.java	add	THIS	NestedLoops	0	MathIllegalArgumentException	factory.intersection(node.$.polygon, $.child.$.polygon).isEmpty()
860	144	12	NestedLoops.java	add	factory	RegionFactory<Euclidean2D>	0	MathIllegalArgumentException	$.intersection(node.polygon, child.polygon).isEmpty()
860	144	12	NestedLoops.java	add	node	NestedLoops	0	MathIllegalArgumentException	factory.intersection($.polygon, child.polygon).isEmpty()
861	170	8	NestedLoops.java	setClockWise	THIS	NestedLoops	0	DEF	$.originalIsClockwise ^ clockwise
861	170	8	NestedLoops.java	setClockWise	clockwise	boolean	0	DEF	originalIsClockwise ^ $
14892	174	12	NestedLoops.java	setClockWise	min	int	0	NIL-WHILE	++$ < --max
14892	174	12	NestedLoops.java	setClockWise	max	int	0	NIL-WHILE	++min < --$
4069	86	12	NewtonRaphsonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
4069	86	12	NewtonRaphsonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
4069	86	12	NewtonRaphsonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
4070	86	12	NewtonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
4070	86	12	NewtonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
4070	86	12	NewtonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
3054	198	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
3054	198	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
16526	199	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
16526	199	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
16527	209	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
16527	209	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3055	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	RET	checker.converged($.getIterations(), previous, current)
3055	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	$ != null
3055	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	checker.converged(getIterations(), $, current)
3055	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	RET	$.converged(getIterations(), previous, current)
3055	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	current	PointValuePair	0	RET	checker.converged(getIterations(), previous, $)
16528	236	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < point.$.length
16528	236	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
16528	236	12	NonLinearConjugateGradientOptimizer.java	doOptimize	point	double[]	0	NIL-FOR	i < $.length
3056	241	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
3056	241	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
16529	242	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
16529	242	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
16530	251	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
16530	251	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
16531	262	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
16531	262	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
16531	262	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
3057	274	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.getIterations() % n == 0
3057	274	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
3057	274	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	getIterations() % $ == 0
16532	280	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
16532	280	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3058	305	12	NonLinearConjugateGradientOptimizer.java	parseOptimizationData	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.data instanceof BracketingStep
16533	329	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
3059	332	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
3059	332	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
3060	399	8	NonLinearConjugateGradientOptimizer.java	checkParameters	THIS	NonLinearConjugateGradientOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3060	399	8	NonLinearConjugateGradientOptimizer.java	checkParameters	THIS	NonLinearConjugateGradientOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
1955	141	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
1956	156	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1956	156	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
15874	157	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
15874	157	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
15875	167	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
15875	167	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1957	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	$ != null
1957	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	checker.converged(iter, $, current)
1957	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	RET	$.converged(iter, previous, current)
1957	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	current	PointValuePair	0	RET	checker.converged(iter, previous, $)
1957	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
15876	195	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
15876	195	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
1958	200	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1958	200	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
15877	201	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
15877	201	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
15878	210	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
15878	210	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1959	215	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
15879	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
15879	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
15879	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
1960	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
1960	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	iter % $ == 0
1960	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	1	DEF	$ % n == 0
15880	233	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
15880	233	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
15881	253	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
1961	256	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
1961	256	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
3403	86	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
3403	86	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
3404	89	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
3404	89	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
3405	92	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
3405	92	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
16751	151	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
16751	151	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
16752	157	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
16752	157	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
16752	157	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
16753	160	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
16753	160	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
16753	160	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
16754	201	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
16755	205	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
16755	205	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
16755	205	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
16756	212	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
16756	212	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
3406	234	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
16757	238	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
16757	238	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
3407	243	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
3408	268	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
16758	270	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
16758	270	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
3409	278	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
3410	284	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
3410	284	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
1111	107	8	NormalDistribution.java	NormalDistribution	sd	double	0	NotStrictlyPositiveException	$ <= 0
1112	150	8	NormalDistribution.java	cumulativeProbability	THIS	NormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.standardDeviation
1112	150	8	NormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * standardDeviation
1113	161	8	NormalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1113	161	8	NormalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1114	183	8	NormalDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1114	183	8	NormalDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
16273	112	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
16273	112	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
16274	113	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
16274	113	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
2596	114	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
2596	114	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
2596	114	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
2596	114	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
2597	143	8	OLSMultipleLinearRegression.java	calculateTotalSumOfSquares	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2598	198	8	OLSMultipleLinearRegression.java	calculateAdjustedRSquared	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
3253	82	8	OnePointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3253	82	8	OnePointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3254	100	8	OnePointCrossover.java	crossover	length	int	0	DimensionMismatchException	$ != second.getLength()
3254	100	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
16671	115	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
16671	115	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
16672	120	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
16672	120	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
2399	251	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ <= 0
2399	251	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ > 0.5
2400	279	8	OneWayAnova.java	anovaStats	allowOneElementData	boolean	0	DimensionMismatchException	$
2401	281	12	OneWayAnova.java	anovaStats	categoryData	Collection<SummaryStatistics>	0	DimensionMismatchException	$.size() < 2
2402	288	16	OneWayAnova.java	anovaStats	THIS	OneWayAnova	0	DimensionMismatchException	$.array.getN() <= 1
240	150	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
241	155	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
241	155	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
242	179	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
242	179	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
242	179	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
243	183	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
243	183	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
14843	188	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
14843	188	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
244	191	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
244	191	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
244	191	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
245	209	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
245	209	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
245	209	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
246	213	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
246	213	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
14844	218	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
14844	218	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
247	221	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
247	221	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
247	221	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
248	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
248	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
249	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
249	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
249	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
249	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
249	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
250	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
250	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
251	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
251	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
251	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
251	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
251	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
252	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
252	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
253	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
253	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
254	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
254	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
255	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
255	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
255	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
255	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
255	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
256	353	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
256	353	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
256	353	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
257	357	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
257	357	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
14845	362	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
14845	362	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
258	365	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
258	365	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
258	365	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
259	410	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
260	418	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
261	420	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
14846	444	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
14846	444	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
262	445	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
262	445	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
528	163	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
529	168	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
529	168	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
530	192	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
530	192	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
530	192	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
531	196	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
531	196	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
14856	201	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
14856	201	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
532	204	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
532	204	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
532	204	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
533	222	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
533	222	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
533	222	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
534	226	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
534	226	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
14857	231	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
14857	231	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
535	234	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
535	234	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
535	234	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
536	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
536	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
537	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
537	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
537	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
537	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
537	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
538	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
538	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
539	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
539	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
539	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
539	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
539	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
540	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
540	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
541	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
541	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
542	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
542	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
543	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
543	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
543	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
543	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
543	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
544	366	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
544	366	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
544	366	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
545	370	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
545	370	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
14858	375	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
14858	375	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
546	378	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
546	378	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
546	378	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
547	423	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
548	431	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
549	433	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
14859	457	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
14859	457	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
550	458	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
550	458	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
1806	66	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lRow	long	0	NumberIsTooLargeException	$ * lCol >= Integer.MAX_VALUE
1806	66	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lCol	long	0	NumberIsTooLargeException	lRow * $ >= Integer.MAX_VALUE
15780	123	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
15781	158	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
15782	186	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
15783	192	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
15783	192	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
15784	218	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
15785	224	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
15785	224	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
1807	226	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
1807	226	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
1807	226	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
1808	230	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
1809	262	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
1810	277	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
1811	292	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
15705	144	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
15705	144	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
15705	144	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
1741	146	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1741	146	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
15706	173	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
15706	173	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
15706	173	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
1742	175	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1742	175	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
15707	201	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
15707	201	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
1743	203	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1743	203	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
1744	235	8	OpenMapRealVector.java	add	v	RealVector	1	RET	$ instanceof OpenMapRealVector
15708	257	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1745	260	12	OpenMapRealVector.java	add	key	int	1	DEF	randomAccess.containsKey($)
1745	260	12	OpenMapRealVector.java	add	randomAccess	OpenIntToDoubleHashMap	1	DEF	$.containsKey(key)
15709	277	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1746	287	8	OpenMapRealVector.java	append	v	RealVector	1	RET	$ instanceof OpenMapRealVector
15710	291	12	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < v.getDimension()
15710	291	12	OpenMapRealVector.java	append	v	RealVector	0	NIL-FOR	i < $.getDimension()
15711	350	8	OpenMapRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < n
15711	350	8	OpenMapRealVector.java	ebeDivide	n	int	0	NIL-FOR	i < $
15712	363	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
1747	374	8	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isNaN()
1747	374	8	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isInfinite()
15713	376	12	OpenMapRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < n
15713	376	12	OpenMapRealVector.java	ebeMultiply	n	int	0	NIL-FOR	i < $
1748	378	16	OpenMapRealVector.java	ebeMultiply	y	double	1	DEF	Double.isNaN($)
1749	380	23	OpenMapRealVector.java	ebeMultiply	y	double	0	DEF	Double.isInfinite($)
1750	394	8	OpenMapRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
15714	401	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1751	404	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
1751	404	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
1751	404	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
1751	404	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
15715	429	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
15716	437	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1752	440	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1752	440	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
1753	452	8	OpenMapRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
15717	481	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
15718	487	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1754	490	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1754	490	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
1755	503	8	OpenMapRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
15719	522	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1756	525	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
1756	525	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
15720	530	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1757	533	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1757	533	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
1757	533	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
1757	533	12	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
1758	545	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
15721	557	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
1759	560	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
1760	563	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
15722	574	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
1761	576	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
15723	592	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
15723	592	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
1762	603	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isDefaultValue(value)
1762	603	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isDefaultValue($)
1763	605	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
1763	605	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
15724	616	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.getDimension()
15724	616	8	OpenMapRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < $.getDimension()
15725	624	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
15725	624	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
15726	641	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1764	644	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
1764	644	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1765	658	8	OpenMapRealVector.java	subtract	v	RealVector	1	RET	$ instanceof OpenMapRealVector
1766	677	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	MathArithmeticException	$.isDefaultValue(norm)
1766	677	8	OpenMapRealVector.java	unitize	norm	double	0	MathArithmeticException	isDefaultValue($)
15727	681	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
15728	692	8	OpenMapRealVector.java	toArray	iter	Iterator	0	NIL-WHILE	$.hasNext()
15729	714	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1767	730	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
1767	730	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
1768	733	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
1769	737	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
1769	737	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
1770	740	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
1770	740	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
15730	745	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1771	748	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
1771	748	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
15731	753	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1772	756	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
1772	756	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
1772	756	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
3255	74	8	OrderedCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3255	74	8	OrderedCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3256	92	8	OrderedCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3256	92	8	OrderedCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
16673	110	8	OrderedCrossover.java	mate	a	int	0	NIL-DOWHILE	$ == b
16673	110	8	OrderedCrossover.java	mate	b	int	0	NIL-DOWHILE	a == $
16674	124	8	OrderedCrossover.java	mate	i	int	0	NIL-FOR	$ <= length
16674	124	8	OrderedCrossover.java	mate	length	int	0	NIL-FOR	i <= $
3257	132	12	OrderedCrossover.java	mate	item2	T	0	DEF	child1Set.contains($)
3257	132	12	OrderedCrossover.java	mate	child1Set	Set<T>	0	DEF	$.contains(item2)
3258	138	12	OrderedCrossover.java	mate	item1	T	0	DEF	child2Set.contains($)
3258	138	12	OrderedCrossover.java	mate	child2Set	Set<T>	0	DEF	$.contains(item1)
14865	139	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	NIL-FOR	i < components.$.length
14865	139	8	OrderedTuple.java	OrderedTuple	i	int	0	NIL-FOR	$ < components.length
14865	139	8	OrderedTuple.java	OrderedTuple	components	double	0	NIL-FOR	i < $.length
566	140	12	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isInfinite(components[$])
566	140	12	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isInfinite($[i])
567	141	16	OrderedTuple.java	OrderedTuple	i	int	1	DEF	components[$] < 0
567	141	16	OrderedTuple.java	OrderedTuple	components	double	1	DEF	$[i] < 0
568	146	19	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isNaN(components[$])
568	146	19	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isNaN($[i])
569	151	16	OrderedTuple.java	OrderedTuple	m	long	0	DEF	$ != 0
570	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.negInf
570	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.posInf
571	166	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	1	DEF	$.lsb <= msb
571	166	8	OrderedTuple.java	OrderedTuple	msb	int	1	DEF	lsb <= $
572	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding.$.length == 1
572	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding != null
572	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding[0] == 0x0L
14866	202	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	eIndex < $.encoding.$.length
14866	202	8	OrderedTuple.java	encode	eIndex	int	0	NIL-FOR	$ < encoding.length
14867	203	12	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	vIndex < $.components.$.length
14867	203	12	OrderedTuple.java	encode	vIndex	int	0	NIL-FOR	$ < components.length
573	204	16	OrderedTuple.java	encode	THIS	OrderedTuple	0	DEF	$.getBit(vIndex, k) != 0
573	204	16	OrderedTuple.java	encode	vIndex	int	0	DEF	getBit($, k) != 0
573	204	16	OrderedTuple.java	encode	k	int	0	DEF	getBit(vIndex, $) != 0
574	207	16	OrderedTuple.java	encode	shift	int	0	DEF	$-- == 0
575	248	8	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.components.$.length == ot.$.components.$.length
575	248	8	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	components.length == $.components.length
576	249	12	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.nan
577	251	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.nan
577	251	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.nan
578	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.posInf
578	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.negInf
578	253	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.posInf
579	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.negInf
579	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.posInf
579	255	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.negInf
580	259	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	DEF	$.offset < ot.$.offset
580	259	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	DEF	offset < $.offset
581	261	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	DEF	$.offset > ot.$.offset
581	261	23	OrderedTuple.java	compareTo	ot	OrderedTuple	0	DEF	offset > $.offset
14868	266	16	OrderedTuple.java	compareTo	i	int	0	NIL-FOR	$ < limit
14868	266	16	OrderedTuple.java	compareTo	limit	int	0	NIL-FOR	i < $
582	267	20	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding[i] < ot.$.encoding[i]
582	267	20	OrderedTuple.java	compareTo	i	int	1	RET	encoding[$] < ot.encoding[$]
582	267	20	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding[i] < $.encoding[i]
583	269	27	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.encoding[i] > ot.$.encoding[i]
583	269	27	OrderedTuple.java	compareTo	i	int	0	RET	encoding[$] > ot.encoding[$]
583	269	27	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	encoding[i] > $.encoding[i]
584	274	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length < ot.$.encoding.$.length
584	274	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length < $.encoding.length
585	276	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length > ot.$.encoding.$.length
585	276	23	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length > $.encoding.length
586	292	8	OrderedTuple.java	equals	THIS	OrderedTuple	1	RET	$ == other
586	292	8	OrderedTuple.java	equals	other	Object	1	RET	this == $
587	294	15	OrderedTuple.java	equals	other	Object	1	RET	$ instanceof OrderedTuple
14869	369	8	OrderedTuple.java	computeMSB	scale	int	0	NIL-WHILE	$ != 0
588	370	12	OrderedTuple.java	computeMSB	ll	long	0	DEF	($ & mask) != $
588	370	12	OrderedTuple.java	computeMSB	mask	long	0	DEF	(ll & $) != ll
14870	395	8	OrderedTuple.java	computeLSB	scale	int	0	NIL-WHILE	$ != 0
589	396	12	OrderedTuple.java	computeLSB	ll	long	0	DEF	($ & mask) == $
589	396	12	OrderedTuple.java	computeLSB	mask	long	0	DEF	(ll & $) == ll
590	417	8	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k > $.offset
590	417	8	OrderedTuple.java	getBit	e	int	1	RET	k < $
590	417	8	OrderedTuple.java	getBit	k	int	1	RET	$ < e
590	417	8	OrderedTuple.java	getBit	k	int	1	RET	$ > offset
591	419	15	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k == $.offset
591	419	15	OrderedTuple.java	getBit	k	int	1	RET	$ == offset
592	421	15	OrderedTuple.java	getBit	e	int	1	RET	k > ($ + 52)
592	421	15	OrderedTuple.java	getBit	k	int	1	RET	$ > (e + 52)
14879	72	8	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	NIL-FOR	i < outline.$.length
14879	72	8	OutlineExtractor.java	getOutline	i	int	0	NIL-FOR	$ < outline.length
14879	72	8	OutlineExtractor.java	getOutline	outline	Vector2D[][]	0	NIL-FOR	i < $.length
14880	76	12	OutlineExtractor.java	getOutline	end	int	0	NIL-WHILE	j < $
14880	76	12	OutlineExtractor.java	getOutline	j	int	0	NIL-WHILE	$ < end
762	77	16	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	1	DEF	$.pointIsBetween(rawLoop, end, j)
762	77	16	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	1	DEF	pointIsBetween($, end, j)
762	77	16	OutlineExtractor.java	getOutline	end	int	1	DEF	pointIsBetween(rawLoop, $, j)
762	77	16	OutlineExtractor.java	getOutline	j	int	1	DEF	pointIsBetween(rawLoop, end, $)
14881	79	20	OutlineExtractor.java	getOutline	k	int	0	NIL-FOR	$ < (end - 1)
14881	79	20	OutlineExtractor.java	getOutline	end	int	0	NIL-FOR	k < ($ - 1)
763	88	12	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	DEF	end != rawLoop.$.length
763	88	12	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	0	DEF	end != $.length
763	88	12	OutlineExtractor.java	getOutline	end	int	0	DEF	$ != rawLoop.length
172	106	8	Pair.java	equals	THIS	Pair	0	RET	$ == o
172	106	8	Pair.java	equals	o	Object	0	RET	this == $
173	109	8	Pair.java	equals	o	Object	1	RET	$ instanceof Pair
3387	60	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	name	String	0	DEF	pode.isSupported($)
3387	60	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	pode	ParameterizedODE	0	DEF	$.isSupported(name)
3388	82	8	ParameterJacobianWrapper.java	computeParameterJacobian	THIS	ParameterJacobianWrapper	1	DEF	$.pode.isSupported(paramName)
3388	82	8	ParameterJacobianWrapper.java	computeParameterJacobian	paramName	String	1	DEF	pode.isSupported($)
16744	90	12	ParameterJacobianWrapper.java	computeParameterJacobian	i	int	0	NIL-FOR	$ < n
16744	90	12	ParameterJacobianWrapper.java	computeParameterJacobian	n	int	0	NIL-FOR	i < $
3533	75	8	ParameterizedWrapper.java	getParameter	THIS	ParameterizedWrapper	0	UnknownParameterException	$.isSupported(name)
3533	75	8	ParameterizedWrapper.java	getParameter	name	String	0	UnknownParameterException	isSupported($)
1242	116	8	ParetoDistribution.java	ParetoDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1243	120	8	ParetoDistribution.java	ParetoDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1244	158	8	ParetoDistribution.java	density	THIS	ParetoDistribution	0	RET	x < $.scale
1244	158	8	ParetoDistribution.java	density	x	double	0	RET	$ < scale
1245	174	8	ParetoDistribution.java	cumulativeProbability	THIS	ParetoDistribution	0	RET	x <= $.scale
1245	174	8	ParetoDistribution.java	cumulativeProbability	x	double	0	RET	$ <= scale
1246	208	8	ParetoDistribution.java	getNumericalMean	THIS	ParetoDistribution	0	RET	$.shape <= 1
1247	224	8	ParetoDistribution.java	getNumericalVariance	THIS	ParetoDistribution	0	RET	$.shape <= 2
1160	105	8	PascalDistribution.java	PascalDistribution	r	int	0	NotStrictlyPositiveException	$ <= 0
1161	109	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ > 1
1161	109	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ < 0
1162	138	8	PascalDistribution.java	probability	x	int	1	DEF	$ < 0
1163	152	8	PascalDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
2474	95	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	NullArgumentException	$ == null
16184	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
16184	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
16185	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
16185	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
16186	167	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
16186	167	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
16187	168	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
16187	168	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
2475	169	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
2475	169	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
16188	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
16188	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
16189	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
16189	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
2476	229	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2476	229	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2476	229	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2477	231	15	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2477	231	15	PearsonsCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
16190	235	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
16190	235	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
16190	235	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
16191	256	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
16191	256	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
16192	259	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
16192	259	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
2478	279	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2478	279	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
2344	136	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2345	149	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2346	269	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ <= 0
2346	269	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ > 100
2347	273	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
2348	276	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
2349	286	8	Percentile.java	evaluate	THIS	Percentile	1	DEF	values == $.getDataRef()
2349	286	8	Percentile.java	evaluate	values	double[]	1	DEF	$ == getDataRef()
2350	296	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
2351	299	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
2351	299	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
16131	324	8	Percentile.java	select	begin	int	0	NIL-WHILE	end - $ > MIN_SELECT_SIZE
16131	324	8	Percentile.java	select	end	int	0	NIL-WHILE	$ - begin > MIN_SELECT_SIZE
2352	327	12	Percentile.java	select	THIS	Percentile	1	DEF	node < pivotsHeap.$.length
2352	327	12	Percentile.java	select	node	int	1	DEF	$ < pivotsHeap.length
2352	327	12	Percentile.java	select	node	int	1	DEF	pivotsHeap[$] >= 0
2352	327	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	node < $.length
2352	327	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	$[node] >= 0
2353	334	16	Percentile.java	select	THIS	Percentile	0	DEF	node < pivotsHeap.$.length
2353	334	16	Percentile.java	select	node	int	0	DEF	$ < pivotsHeap.length
2353	334	16	Percentile.java	select	pivotsHeap	int[]	0	DEF	node < $.length
2354	339	12	Percentile.java	select	pivot	int	1	RET	k == $
2354	339	12	Percentile.java	select	k	int	1	RET	$ == pivot
2355	342	19	Percentile.java	select	pivot	int	1	DEF	k < $
2355	342	19	Percentile.java	select	k	int	1	DEF	$ < pivot
2356	376	8	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wMiddle
2356	376	8	Percentile.java	medianOf3	wMiddle	double	1	RET	wBegin < $
2357	377	12	Percentile.java	medianOf3	wMiddle	double	1	RET	$ < wEnd
2357	377	12	Percentile.java	medianOf3	wEnd	double	1	RET	wMiddle < $
2358	383	12	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wEnd
2358	383	12	Percentile.java	medianOf3	wEnd	double	1	RET	wBegin < $
16132	412	8	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
16132	412	8	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
16133	413	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[j] > $
16133	413	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
16133	413	12	Percentile.java	partition	j	int	0	NIL-WHILE	work[$] > value
16133	413	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
16133	413	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[j] > value
16134	416	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[i] < $
16134	416	12	Percentile.java	partition	i	int	0	NIL-WHILE	work[$] < value
16134	416	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
16134	416	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
16134	416	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[i] < value
2359	420	12	Percentile.java	partition	i	int	0	DEF	$ < j
2359	420	12	Percentile.java	partition	j	int	0	DEF	i < $
2360	427	8	Percentile.java	partition	value	double	0	DEF	work[i] > $
2360	427	8	Percentile.java	partition	i	int	0	DEF	$ >= end
2360	427	8	Percentile.java	partition	i	int	0	DEF	work[$] > value
2360	427	8	Percentile.java	partition	work	double[]	0	DEF	$[i] > value
2360	427	8	Percentile.java	partition	end	int	0	DEF	i >= $
16135	443	8	Percentile.java	insertionSort	j	int	0	NIL-FOR	$ < end
16135	443	8	Percentile.java	insertionSort	end	int	0	NIL-FOR	j < $
16136	446	12	Percentile.java	insertionSort	saved	double	0	NIL-WHILE	$ < work[i]
16136	446	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	$ >= begin
16136	446	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	saved < work[$]
16136	446	12	Percentile.java	insertionSort	work	double[]	0	NIL-WHILE	saved < $[i]
16136	446	12	Percentile.java	insertionSort	begin	int	0	NIL-WHILE	i >= $
2361	473	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ <= 0
2361	473	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ > 100
2362	504	8	Percentile.java	copy	THIS	Percentile	0	DEF	source.$.cachedPivots != null
2362	504	8	Percentile.java	copy	source	Percentile	0	DEF	$.cachedPivots != null
703	140	8	Plane.java	setNormal	norm	double	0	MathArithmeticException	$ < 1.0e-10
704	310	8	Plane.java	intersection	dot	double	0	RET	FastMath.abs($) < 1.0e-10
705	325	8	Plane.java	intersection	direction	Vector3D	0	RET	$.getNorm() < 1.0e-10
706	362	8	Plane.java	intersection	determinant	double	0	RET	FastMath.abs($) < 1.0e-10
1219	112	8	PoissonDistribution.java	PoissonDistribution	p	double	0	NotStrictlyPositiveException	$ <= 0
1220	165	8	PoissonDistribution.java	probability	x	int	1	DEF	$ == Integer.MAX_VALUE
1220	165	8	PoissonDistribution.java	probability	x	int	1	DEF	$ < 0
1221	167	15	PoissonDistribution.java	probability	x	int	1	DEF	$ == 0
1222	179	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ < 0
1223	182	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
1224	292	8	PoissonDistribution.java	nextPoisson	pivot	double	1	RET	meanPoisson < $
1224	292	8	PoissonDistribution.java	nextPoisson	meanPoisson	double	1	RET	$ < pivot
14948	298	12	PoissonDistribution.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * meanPoisson
14948	298	12	PoissonDistribution.java	nextPoisson	meanPoisson	double	0	NIL-WHILE	n < 1000 * $
1225	301	16	PoissonDistribution.java	nextPoisson	p	double	1	DEF	r >= $
1225	301	16	PoissonDistribution.java	nextPoisson	r	double	1	DEF	$ >= p
1226	333	16	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ <= p1
1226	333	16	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u <= $
1227	336	20	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	x < -$
1227	336	20	PoissonDistribution.java	nextPoisson	delta	double	0	DEF	x > $
1227	336	20	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ < -lambda
1227	336	20	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ > delta
1228	343	20	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
1228	343	20	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u > $ + p2
1228	343	20	PoissonDistribution.java	nextPoisson	p2	double	1	DEF	u > p1 + $
1229	354	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < -t
1229	354	16	PoissonDistribution.java	nextPoisson	a	int	0	DEF	$ == 0
1229	354	16	PoissonDistribution.java	nextPoisson	t	double	0	DEF	v < -$
1230	360	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < qa
1230	360	16	PoissonDistribution.java	nextPoisson	qa	double	0	DEF	v < $
1231	364	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ > qr
1231	364	16	PoissonDistribution.java	nextPoisson	qr	double	0	DEF	v > $
1232	367	16	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + $)) + logLambdaFactorial
1232	367	16	PoissonDistribution.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1232	367	16	PoissonDistribution.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + $
1232	367	16	PoissonDistribution.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - ArithmeticUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
1232	367	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1078	46	8	PollardRho.java	primeFactors	n	int	0	RET	1 == $
1079	50	8	PollardRho.java	primeFactors	n	int	0	RET	SmallPrimes.millerRabinPrimeTest($)
14905	81	12	PollardRho.java	rhoBrent	i	int	0	NIL-FOR	$ < r
14905	81	12	PollardRho.java	rhoBrent	r	int	0	NIL-FOR	i < $
14906	86	12	PollardRho.java	rhoBrent	k	int	0	NIL-DOWHILE	$ < r
14906	86	12	PollardRho.java	rhoBrent	r	int	0	NIL-DOWHILE	k < $
14907	89	16	PollardRho.java	rhoBrent	i	int	0	NIL-FOR	$ < bound
14907	89	16	PollardRho.java	rhoBrent	bound	int	0	NIL-FOR	i < $
1080	93	20	PollardRho.java	rhoBrent	divisor	long	0	DEF	0 == $
1081	102	20	PollardRho.java	rhoBrent	q	int	0	RET	0 == $
1082	107	16	PollardRho.java	rhoBrent	out	int	0	RET	1 != $
1083	136	8	PollardRho.java	gcdPositive	a	int	1	RET	$ == 0
1084	138	15	PollardRho.java	gcdPositive	b	int	0	RET	$ == 0
14908	153	8	PollardRho.java	gcdPositive	a	int	0	NIL-WHILE	$ != b
14908	153	8	PollardRho.java	gcdPositive	b	int	0	NIL-WHILE	a != $
826	177	8	PolygonsSet.java	verticesToTree	n	int	0	RET	$ == 0
14884	184	8	PolygonsSet.java	verticesToTree	i	int	0	NIL-FOR	$ < n
14884	184	8	PolygonsSet.java	verticesToTree	n	int	0	NIL-FOR	i < $
14885	190	8	PolygonsSet.java	verticesToTree	i	int	0	NIL-FOR	$ < n
14885	190	8	PolygonsSet.java	verticesToTree	n	int	0	NIL-FOR	i < $
827	200	12	PolygonsSet.java	verticesToTree	line	Line	0	DEF	$ == null
828	209	16	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	FastMath.abs(line.getOffset($.vertex.getLocation())) <= hyperplaneThickness
828	209	16	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	$.vertex != start
828	209	16	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	$.vertex != end
828	209	16	PolygonsSet.java	verticesToTree	start	Vertex	0	DEF	vertex != $
828	209	16	PolygonsSet.java	verticesToTree	end	Vertex	0	DEF	vertex != $
828	209	16	PolygonsSet.java	verticesToTree	line	Line	0	DEF	FastMath.abs($.getOffset(vertex.getLocation())) <= hyperplaneThickness
828	209	16	PolygonsSet.java	verticesToTree	hyperplaneThickness	double	0	DEF	FastMath.abs(line.getOffset(vertex.getLocation())) <= $
14886	240	8	PolygonsSet.java	insertEdges	index	int	0	NIL-WHILE	$ < edges.size()
14886	240	8	PolygonsSet.java	insertEdges	inserted	Edge	0	NIL-WHILE	$ == null
14886	240	8	PolygonsSet.java	insertEdges	edges	List<Edge>	0	NIL-WHILE	index < $.size()
829	242	12	PolygonsSet.java	insertEdges	inserted	Edge	1	DEF	$.getNode() == null
830	243	16	PolygonsSet.java	insertEdges	inserted	Edge	1	DEF	node.insertCut($.getLine())
830	243	16	PolygonsSet.java	insertEdges	node	BSPTree<Euclidean2D>	1	DEF	$.insertCut(inserted.getLine())
831	253	8	PolygonsSet.java	insertEdges	inserted	Edge	0	RET	$ == null
832	257	12	PolygonsSet.java	insertEdges	parent	BSPTree<Euclidean2D>	1	DEF	$ == null
832	257	12	PolygonsSet.java	insertEdges	parent	BSPTree<Euclidean2D>	1	DEF	node == $.getMinus()
832	257	12	PolygonsSet.java	insertEdges	node	BSPTree<Euclidean2D>	1	DEF	$ == parent.getMinus()
833	270	12	PolygonsSet.java	insertEdges	THIS	PolygonsSet	0	DEF	$.edge != inserted
833	270	12	PolygonsSet.java	insertEdges	inserted	Edge	0	DEF	edge != $
834	279	24	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.MINUS
834	279	24	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.MINUS
835	289	24	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.PLUS
835	289	24	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.PLUS
836	299	24	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.PLUS
836	299	24	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.PLUS
837	301	31	PolygonsSet.java	insertEdges	THIS	PolygonsSet	0	DEF	endSide == $.Side.MINUS
837	301	31	PolygonsSet.java	insertEdges	endSide	Side	0	DEF	$ == Side.MINUS
838	310	8	PolygonsSet.java	insertEdges	plusList	List<Edge>	1	DEF	$.isEmpty()
839	315	8	PolygonsSet.java	insertEdges	minusList	List<Edge>	1	DEF	$.isEmpty()
840	525	8	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	v.$.length == 0
840	525	8	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$.length == 0
841	527	12	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree<Euclidean2D>	1	DEF	(Boolean) $.getAttribute()
841	527	12	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree<Euclidean2D>	1	DEF	$.getCut() == null
842	535	15	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$[0][0] == null
843	561	12	PolygonsSet.java	computeGeometricalProperties	sum	double	1	DEF	$ < 0
844	598	8	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	$.vertices == null
845	599	12	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.getTree(false).getCut() == null
14887	611	16	PolygonsSet.java	getVertices	sorted	AVLTree<ComparableSegment>	0	NIL-WHILE	$.isEmpty()
846	614	20	PolygonsSet.java	getVertices	loop	List<ComparableSegment>	0	DEF	$ != null
847	624	20	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.size() < 2
848	632	27	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.get(0).getStart() == null
849	638	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == 0
850	646	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j < (array.$.length - 1)
850	646	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j < ($.length - 1)
850	646	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ < (array.length - 1)
851	651	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j == (array.$.length - 1)
851	651	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j == ($.length - 1)
851	651	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == (array.length - 1)
14888	697	8	PolygonsSet.java	followLoop	globalStart	Vector2D	0	NIL-WHILE	$.distance(end) > 1.0e-10
14888	697	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	globalStart.distance($) > 1.0e-10
14888	697	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	$ != null
14888	697	8	PolygonsSet.java	followLoop	open	boolean	0	NIL-WHILE	$
14889	705	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$.getElement().compareTo(upperRight) <= 0
14889	705	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$ != null
14889	705	12	PolygonsSet.java	followLoop	upperRight	ComparableSegment	0	NIL-FOR	n.getElement().compareTo($) <= 0
852	710	16	PolygonsSet.java	followLoop	distance	double	0	DEF	$ < selectedDistance
852	710	16	PolygonsSet.java	followLoop	selectedDistance	double	0	DEF	distance < $
853	717	12	PolygonsSet.java	followLoop	selectedDistance	double	0	RET	$ > 1.0e-10
854	730	8	PolygonsSet.java	followLoop	loop	ArrayList<ComparableSegment>	0	RET	$.size() == 2
854	730	8	PolygonsSet.java	followLoop	open	boolean	0	RET	$
855	735	8	PolygonsSet.java	followLoop	end	Vector2D	0	MathInternalError	$ == null
855	735	8	PolygonsSet.java	followLoop	open	boolean	0	MathInternalError	$
764	137	8	PolyhedronsSet.java	computeGeometricalProperties	THIS	PolyhedronsSet	1	DEF	$.getSize() < 0
765	235	8	PolyhedronsSet.java	recurseFirstIntersection	cut	SubHyperplane<Euclidean3D>	0	RET	$ == null
766	247	8	PolyhedronsSet.java	recurseFirstIntersection	offset	double	1	DEF	$ < 0
767	255	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
768	258	12	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
769	265	8	PolyhedronsSet.java	recurseFirstIntersection	crossed	SubHyperplane<Euclidean3D>	0	RET	$ != null
770	269	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
771	272	12	PolyhedronsSet.java	recurseFirstIntersection	hit3D	Vector3D	0	RET	$ != null
772	274	16	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
773	297	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
773	297	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
773	297	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusOutside() != null
773	297	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
774	301	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
774	301	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
774	301	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
774	301	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusInside() != null
4237	72	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NoDataException	$ == 0
17176	75	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	$ > 1
17176	75	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	c[$ - 1] == 0
17176	75	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[n - 1] == 0
4238	132	8	PolynomialFunction.java	evaluate	n	int	0	NoDataException	$ == 0
17177	136	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >= 0
4239	152	8	PolynomialFunction.java	value	n	int	0	NoDataException	$ == 0
17178	157	8	PolynomialFunction.java	value	j	int	0	NIL-FOR	$ >= 0
17179	176	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
17179	176	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
17180	201	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
17180	201	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
4240	204	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
4240	204	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
17181	205	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
17181	205	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
17182	223	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
17182	223	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
17183	238	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
17183	238	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
17183	238	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
17184	240	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < FastMath.min($.coefficients.$.length, i + 1)
17184	240	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < FastMath.min(coefficients.length, i + 1)
17184	240	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < FastMath.min(coefficients.length, $ + 1)
4241	262	8	PolynomialFunction.java	differentiate	n	int	0	NoDataException	$ == 0
4242	265	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
17185	269	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
4243	311	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
4244	312	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
17186	319	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
17186	319	8	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
4245	320	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
4245	320	12	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
4246	321	16	PolynomialFunction.java	toString	s	StringBuilder	1	DEF	$.length() > 0
4247	322	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
4247	322	20	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
4248	328	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
4248	328	20	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
4249	334	16	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
4250	340	16	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
4251	358	8	PolynomialFunction.java	toString	c	String	1	RET	$.endsWith(".0")
4252	377	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
4252	377	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
4253	380	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
4254	384	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
4254	384	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
4229	80	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.verifyInterpolationArray(x, y, false)
4229	80	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	x	double	0	DEF	verifyInterpolationArray($, y, false)
4229	80	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	y	double	0	DEF	verifyInterpolationArray(x, $, false)
4230	149	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
4231	175	8	PolynomialFunctionLagrangeForm.java	evaluate	THIS	PolynomialFunctionLagrangeForm	0	RET	$.verifyInterpolationArray(x, y, false)
4231	175	8	PolynomialFunctionLagrangeForm.java	evaluate	x	double	0	RET	verifyInterpolationArray($, y, false)
4231	175	8	PolynomialFunctionLagrangeForm.java	evaluate	y	double	0	RET	verifyInterpolationArray(x, $, false)
17167	213	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
17167	213	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
4232	219	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	dist	double	0	DEF	$ < min_dist
4232	219	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	min_dist	double	0	DEF	dist < $
17168	228	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
17168	228	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
17169	229	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	j	int	0	NIL-FOR	$ < n-i
17169	229	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	j < n-$
17169	229	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	j < $-i
4233	239	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	1	DEF	nearest < 0.5*(n-$+1)
4233	239	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	nearest	int	1	DEF	$ < 0.5*(n-i+1)
4233	239	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	1	DEF	nearest < 0.5*($-i+1)
17170	259	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
17170	259	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
17171	266	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
17171	266	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
17172	267	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
17173	275	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
17173	275	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
17174	278	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
17174	278	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
4234	279	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
4234	279	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
17175	289	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
4235	318	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DimensionMismatchException	x.$.length != y.$.length
4235	318	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DimensionMismatchException	$.length != y.length
4235	318	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DimensionMismatchException	x.length != $.length
4236	321	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	NumberIsTooSmallException	x.$.length < 2
4236	321	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	NumberIsTooSmallException	$.length < 2
17195	109	8	PolynomialFunctionNewtonForm.java	value	i	int	0	NIL-FOR	$ >= 0
4257	160	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
17196	188	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
17197	203	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
17197	203	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
17198	208	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
17199	209	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
4258	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	c.$.length == 0
4258	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	a.$.length == 0
4258	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	NoDataException	$.length == 0
4258	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	NoDataException	$.length == 0
4259	240	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DimensionMismatchException	a.$.length != c.$.length + 1
4259	240	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DimensionMismatchException	$.length != c.length + 1
4259	240	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DimensionMismatchException	a.length != $.length + 1
4220	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NullArgumentException	$ == null
4220	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	NullArgumentException	$ == null
4221	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	NumberIsTooSmallException	knots.$.length < 2
4221	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NumberIsTooSmallException	$.length < 2
4222	113	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DimensionMismatchException	knots.$.length - 1 != polynomials.$.length
4222	113	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DimensionMismatchException	$.length - 1 != polynomials.length
4222	113	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DimensionMismatchException	knots.length - 1 != $.length
4223	137	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v < $.knots[0]
4223	137	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v > $.knots[$.n]
4223	137	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ < knots[0]
4223	137	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ > knots[n]
4224	141	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
4225	147	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
4225	147	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
17166	169	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
17166	169	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
4226	181	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	t0 > $.knots[$.n]
4226	181	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	t0 < $.knots[0]
4226	181	8	PolynomialSplineFunction.java	value	t0	double	0	OutOfRangeException	$ > knots[n]
4226	181	8	PolynomialSplineFunction.java	value	t0	double	0	OutOfRangeException	$ < knots[0]
4227	185	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
4228	191	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
4228	191	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
4255	219	8	PolynomialsUtils.java	createJacobiPolynomial	key	JacobiKey	0	DEF	JACOBI_COEFFICIENTS.containsKey($)
17187	329	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
17187	329	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
17188	330	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ <= i
17188	330	12	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	j <= $
17189	336	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
17189	336	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
17190	342	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < d
17190	342	8	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	i < $
17191	343	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ < d
17191	343	12	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	j < $
4256	365	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
4256	365	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
17192	381	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
17192	381	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
17193	401	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
17193	401	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
17194	417	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
17194	417	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
3020	124	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
3021	127	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
16505	181	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
16505	181	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
16506	200	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
16506	200	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3022	211	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
3022	211	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
3022	211	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
3023	224	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
3023	224	12	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	DEF	$ != null
3024	227	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
3025	228	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
3025	228	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
16507	237	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
16507	237	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3026	245	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
3026	245	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
3027	252	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
16508	283	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
16508	283	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
3028	373	8	PowellOptimizer.java	checkParameters	THIS	PowellOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3028	373	8	PowellOptimizer.java	checkParameters	THIS	PowellOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
2192	114	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
2193	117	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
16075	170	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
16075	170	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
16076	190	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
16076	190	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2194	201	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
2194	201	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
2194	201	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
2195	214	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
2195	214	12	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	DEF	$ != null
2196	217	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
2197	218	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
2197	218	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
16077	227	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
16077	227	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2198	235	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
2198	235	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
2199	242	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
16078	273	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
16078	273	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
222	96	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, eps)
222	96	8	Precision.java	compareTo	x	double	1	RET	equals($, y, eps)
222	96	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, eps)
222	96	8	Precision.java	compareTo	eps	double	1	RET	equals(x, y, $)
223	98	15	Precision.java	compareTo	x	double	0	RET	$ < y
223	98	15	Precision.java	compareTo	y	double	0	RET	x < $
224	122	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, maxUlps)
224	122	8	Precision.java	compareTo	x	double	1	RET	equals($, y, maxUlps)
224	122	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, maxUlps)
224	122	8	Precision.java	compareTo	maxUlps	int	1	RET	equals(x, y, $)
225	124	15	Precision.java	compareTo	x	double	0	RET	$ < y
225	124	15	Precision.java	compareTo	y	double	0	RET	x < $
226	207	8	Precision.java	equals	xInt	int	0	DEF	$ < 0
227	210	8	Precision.java	equals	yInt	int	0	DEF	$ < 0
228	288	8	Precision.java	equalsWithRelativeTolerance	THIS	Precision	0	RET	$.equals(x, y, 1)
228	288	8	Precision.java	equalsWithRelativeTolerance	x	double	0	RET	equals($, y, 1)
228	288	8	Precision.java	equalsWithRelativeTolerance	y	double	0	RET	equals(x, $, 1)
229	335	8	Precision.java	equals	xInt	long	0	DEF	$ < 0
230	338	8	Precision.java	equals	yInt	long	0	DEF	$ < 0
231	400	12	Precision.java	round	x	double	1	RET	Double.isInfinite($)
232	460	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
233	470	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
234	479	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
235	488	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
236	490	19	Precision.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
237	494	16	Precision.java	roundUnscaled	unscaled	double	1	DEF	FastMath.floor($) / 2.0 == FastMath.floor(Math .floor($) / 2.0)
238	506	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
239	514	12	Precision.java	roundUnscaled	unscaled	double	0	MathArithmeticException	$ != FastMath.floor($)
1481	144	8	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$ != null
1482	145	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	NonSquareOperatorException	$.getColumnDimension() != $.getRowDimension()
1483	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	m.getRowDimension() != $.getRowDimension()
1483	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$.getRowDimension() != a.getRowDimension()
1057	55	8	Primes.java	isPrime	n	int	0	RET	$ < 2
1058	60	12	Primes.java	isPrime	THIS	Primes	0	RET	0 == (n % $.p)
1058	60	12	Primes.java	isPrime	n	int	0	RET	0 == ($ % p)
1059	75	8	Primes.java	nextPrime	n	int	0	MathIllegalArgumentException	$ < 0
1060	78	8	Primes.java	nextPrime	n	int	0	RET	$ == 2
1061	82	8	Primes.java	nextPrime	n	int	0	RET	$ == 1
1062	86	8	Primes.java	nextPrime	THIS	Primes	0	RET	$.isPrime(n)
1062	86	8	Primes.java	nextPrime	n	int	0	RET	isPrime($)
1063	93	8	Primes.java	nextPrime	rem	int	1	DEF	0 == $
1064	95	15	Primes.java	nextPrime	rem	int	0	DEF	1 == $
1065	100	12	Primes.java	nextPrime	THIS	Primes	0	RET	$.isPrime(n)
1065	100	12	Primes.java	nextPrime	n	int	0	RET	isPrime($)
1066	104	12	Primes.java	nextPrime	THIS	Primes	0	RET	$.isPrime(n)
1066	104	12	Primes.java	nextPrime	n	int	0	RET	isPrime($)
1067	120	8	Primes.java	primeFactors	n	int	0	MathIllegalArgumentException	$ < 2
2250	125	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length, true)
2250	125	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2250	125	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2250	125	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
16111	127	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16111	127	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16111	127	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2251	165	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, weights, begin, length, true)
2251	165	8	Product.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
2251	165	8	Product.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
2251	165	8	Product.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
2251	165	8	Product.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
16112	167	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16112	167	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16112	167	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1015	100	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
1016	103	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
1017	138	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
1018	149	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
1019	162	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
1020	170	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
1021	201	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
1022	209	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
1023	216	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
1024	220	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
1025	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
998	101	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
999	138	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
1000	149	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
1001	162	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
1002	170	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
1003	201	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
1004	209	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
1005	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
15311	112	8	QRDecomposition.java	decompose	THIS	QRDecomposition	0	NIL-FOR	minor < FastMath.min($.qrt.$.length, $.qrt[0].length)
15311	112	8	QRDecomposition.java	decompose	minor	int	0	NIL-FOR	$ < FastMath.min(qrt.length, qrt[0].length)
15312	134	8	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	row < qrtMinor.$.length
15312	134	8	QRDecomposition.java	performHouseholderReflection	row	int	0	NIL-FOR	$ < qrtMinor.length
15312	134	8	QRDecomposition.java	performHouseholderReflection	qrtMinor	double[]	0	NIL-FOR	row < $.length
1503	141	8	QRDecomposition.java	performHouseholderReflection	a	double	0	DEF	$ != 0.0
15313	165	12	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	col < $.qrt.$.length
15313	165	12	QRDecomposition.java	performHouseholderReflection	col	int	0	NIL-FOR	$ < qrt.length
15314	168	16	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	row < qrtCol.$.length
15314	168	16	QRDecomposition.java	performHouseholderReflection	row	int	0	NIL-FOR	$ < qrtCol.length
15314	168	16	QRDecomposition.java	performHouseholderReflection	qrtCol	double[]	0	NIL-FOR	row < $.length
15315	174	16	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	row < qrtCol.$.length
15315	174	16	QRDecomposition.java	performHouseholderReflection	row	int	0	NIL-FOR	$ < qrtCol.length
15315	174	16	QRDecomposition.java	performHouseholderReflection	qrtCol	double[]	0	NIL-FOR	row < $.length
1504	189	8	QRDecomposition.java	getR	THIS	QRDecomposition	0	DEF	$.cachedR == null
15316	196	12	QRDecomposition.java	getR	row	int	0	NIL-FOR	$ >= 0
15317	198	16	QRDecomposition.java	getR	col	int	0	NIL-FOR	$ < n
15317	198	16	QRDecomposition.java	getR	n	int	0	NIL-FOR	col < $
1505	215	8	QRDecomposition.java	getQ	THIS	QRDecomposition	0	DEF	$.cachedQ == null
1506	227	8	QRDecomposition.java	getQT	THIS	QRDecomposition	0	DEF	$.cachedQT == null
15318	239	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= FastMath.min(m, n)
15318	239	12	QRDecomposition.java	getQT	n	int	0	NIL-FOR	minor >= FastMath.min(m, $)
15318	239	12	QRDecomposition.java	getQT	m	int	0	NIL-FOR	minor >= FastMath.min($, n)
15319	243	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= 0
1507	246	16	QRDecomposition.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
1507	246	16	QRDecomposition.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
15320	247	20	QRDecomposition.java	getQT	col	int	0	NIL-FOR	$ < m
15320	247	20	QRDecomposition.java	getQT	m	int	0	NIL-FOR	col < $
15321	249	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
15321	249	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
15322	254	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
15322	254	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
1508	275	8	QRDecomposition.java	getH	THIS	QRDecomposition	0	DEF	$.cachedH == null
15323	280	12	QRDecomposition.java	getH	i	int	0	NIL-FOR	$ < m
15323	280	12	QRDecomposition.java	getH	m	int	0	NIL-FOR	i < $
15324	281	16	QRDecomposition.java	getH	j	int	0	NIL-FOR	$ < FastMath.min(i + 1, n)
15324	281	16	QRDecomposition.java	getH	i	int	0	NIL-FOR	j < FastMath.min($ + 1, n)
15324	281	16	QRDecomposition.java	getH	n	int	0	NIL-FOR	j < FastMath.min(i + 1, $)
947	90	8	Quaternion.java	Quaternion	THIS	Quaternion	0	DimensionMismatchException	v.$.length != 3
947	90	8	Quaternion.java	Quaternion	v	double[]	0	DimensionMismatchException	$.length != 3
948	254	8	Quaternion.java	normalize	norm	double	0	ZeroException	$ < Precision.SAFE_MIN
949	269	8	Quaternion.java	equals	THIS	Quaternion	0	RET	$ == other
949	269	8	Quaternion.java	equals	other	Object	0	RET	this == $
950	272	8	Quaternion.java	equals	other	Object	0	RET	$ instanceof Quaternion
951	343	8	Quaternion.java	getPositivePolarForm	THIS	Quaternion	1	RET	$.getQ0() < 0
952	365	8	Quaternion.java	getInverse	squareNorm	double	0	ZeroException	$ < Precision.SAFE_MIN
15099	88	8	RRQRDecomposition.java	decompose	THIS	RRQRDecomposition	0	NIL-FOR	i < $.p.$.length
15099	88	8	RRQRDecomposition.java	decompose	i	int	0	NIL-FOR	$ < p.length
15100	103	8	RRQRDecomposition.java	performHouseholderReflection	THIS	RRQRDecomposition	0	NIL-FOR	i < qrt.$.length
15100	103	8	RRQRDecomposition.java	performHouseholderReflection	i	int	0	NIL-FOR	$ < qrt.length
15100	103	8	RRQRDecomposition.java	performHouseholderReflection	qrt	double[][]	0	NIL-FOR	i < $.length
15101	105	12	RRQRDecomposition.java	performHouseholderReflection	THIS	RRQRDecomposition	0	NIL-FOR	j < qrt[i].length
15101	105	12	RRQRDecomposition.java	performHouseholderReflection	j	int	0	NIL-FOR	$ < qrt[i].length
15101	105	12	RRQRDecomposition.java	performHouseholderReflection	i	int	0	NIL-FOR	j < qrt[$].length
15101	105	12	RRQRDecomposition.java	performHouseholderReflection	qrt	double[][]	0	NIL-FOR	j < $[i].length
1332	108	12	RRQRDecomposition.java	performHouseholderReflection	l2NormSquared	double	0	DEF	$ > l2NormSquaredMax
1332	108	12	RRQRDecomposition.java	performHouseholderReflection	l2NormSquaredMax	double	0	DEF	l2NormSquared > $
1333	114	8	RRQRDecomposition.java	performHouseholderReflection	l2NormSquaredMaxIndex	int	0	DEF	$ != minor
1333	114	8	RRQRDecomposition.java	performHouseholderReflection	minor	int	0	DEF	l2NormSquaredMaxIndex != $
1334	136	8	RRQRDecomposition.java	getP	THIS	RRQRDecomposition	0	DEF	$.cachedP == null
15102	139	12	RRQRDecomposition.java	getP	i	int	0	NIL-FOR	$ < n
15102	139	12	RRQRDecomposition.java	getP	n	int	0	NIL-FOR	i < $
15103	172	8	RRQRDecomposition.java	getRank	rows	int	0	NIL-WHILE	rank < FastMath.min($, columns)
15103	172	8	RRQRDecomposition.java	getRank	columns	int	0	NIL-WHILE	rank < FastMath.min(rows, $)
15103	172	8	RRQRDecomposition.java	getRank	rank	int	0	NIL-WHILE	$ < FastMath.min(rows, columns)
1335	174	12	RRQRDecomposition.java	getRank	thisNorm	double	0	DEF	($ / lastNorm) * rNorm < dropThreshold
1335	174	12	RRQRDecomposition.java	getRank	thisNorm	double	0	DEF	$ == 0
1335	174	12	RRQRDecomposition.java	getRank	lastNorm	double	0	DEF	(thisNorm / $) * rNorm < dropThreshold
1335	174	12	RRQRDecomposition.java	getRank	rNorm	double	0	DEF	(thisNorm / lastNorm) * $ < dropThreshold
1335	174	12	RRQRDecomposition.java	getRank	dropThreshold	double	0	DEF	(thisNorm / lastNorm) * rNorm < $
3143	178	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
3144	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
3145	193	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
3155	161	8	RandomDataGenerator.java	nextHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
16629	176	8	RandomDataGenerator.java	nextHexString	THIS	RandomDataGenerator	0	NIL-FOR	i < randomBytes.$.length
16629	176	8	RandomDataGenerator.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
16629	176	8	RandomDataGenerator.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
3156	187	12	RandomDataGenerator.java	nextHexString	hex	String	0	DEF	$.length() == 1
3157	197	8	RandomDataGenerator.java	nextInt	lower	int	0	NumberIsTooLargeException	$ >= upper
3157	197	8	RandomDataGenerator.java	nextInt	upper	int	0	NumberIsTooLargeException	lower >= $
3158	202	8	RandomDataGenerator.java	nextInt	max	int	1	RET	$ <= 0
3159	208	16	RandomDataGenerator.java	nextInt	r	int	0	RET	$ <= upper
3159	208	16	RandomDataGenerator.java	nextInt	r	int	0	RET	$ >= lower
3159	208	16	RandomDataGenerator.java	nextInt	lower	int	0	RET	r >= $
3159	208	16	RandomDataGenerator.java	nextInt	upper	int	0	RET	r <= $
3160	220	8	RandomDataGenerator.java	nextLong	lower	long	0	NumberIsTooLargeException	$ >= upper
3160	220	8	RandomDataGenerator.java	nextLong	upper	long	0	NumberIsTooLargeException	lower >= $
3161	225	8	RandomDataGenerator.java	nextLong	max	long	1	RET	$ <= 0
3162	231	16	RandomDataGenerator.java	nextLong	r	long	0	RET	$ <= upper
3162	231	16	RandomDataGenerator.java	nextLong	r	long	0	RET	$ >= lower
3162	231	16	RandomDataGenerator.java	nextLong	lower	long	0	RET	r >= $
3162	231	16	RandomDataGenerator.java	nextLong	upper	long	0	RET	r <= $
3163	235	15	RandomDataGenerator.java	nextLong	max	long	1	RET	$ < Integer.MAX_VALUE
3164	257	8	RandomDataGenerator.java	nextLong	n	long	0	RET	$ > 0
16630	261	12	RandomDataGenerator.java	nextLong	bits	long	0	NIL-DOWHILE	$ - val + (n - 1) < 0
16630	261	12	RandomDataGenerator.java	nextLong	val	long	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
16630	261	12	RandomDataGenerator.java	nextLong	n	long	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
3165	293	8	RandomDataGenerator.java	nextSecureHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
16631	312	8	RandomDataGenerator.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
16631	312	8	RandomDataGenerator.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
16632	321	12	RandomDataGenerator.java	nextSecureHexString	THIS	RandomDataGenerator	0	NIL-FOR	i < hash.$.length
16632	321	12	RandomDataGenerator.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
16632	321	12	RandomDataGenerator.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
3166	332	16	RandomDataGenerator.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
3167	343	8	RandomDataGenerator.java	nextSecureInt	lower	int	0	NumberIsTooLargeException	$ >= upper
3167	343	8	RandomDataGenerator.java	nextSecureInt	upper	int	0	NumberIsTooLargeException	lower >= $
3168	348	8	RandomDataGenerator.java	nextSecureInt	max	int	1	RET	$ <= 0
3169	354	16	RandomDataGenerator.java	nextSecureInt	r	int	0	RET	$ >= lower
3169	354	16	RandomDataGenerator.java	nextSecureInt	r	int	0	RET	$ <= upper
3169	354	16	RandomDataGenerator.java	nextSecureInt	lower	int	0	RET	r >= $
3169	354	16	RandomDataGenerator.java	nextSecureInt	upper	int	0	RET	r <= $
3170	366	8	RandomDataGenerator.java	nextSecureLong	lower	long	0	NumberIsTooLargeException	$ >= upper
3170	366	8	RandomDataGenerator.java	nextSecureLong	upper	long	0	NumberIsTooLargeException	lower >= $
3171	371	8	RandomDataGenerator.java	nextSecureLong	max	long	1	RET	$ <= 0
3172	377	16	RandomDataGenerator.java	nextSecureLong	r	long	0	RET	$ <= upper
3172	377	16	RandomDataGenerator.java	nextSecureLong	r	long	0	RET	$ >= lower
3172	377	16	RandomDataGenerator.java	nextSecureLong	lower	long	0	RET	r >= $
3172	377	16	RandomDataGenerator.java	nextSecureLong	upper	long	0	RET	r <= $
3173	381	15	RandomDataGenerator.java	nextSecureLong	max	long	1	RET	$ < Integer.MAX_VALUE
3174	403	8	RandomDataGenerator.java	nextLong	n	long	0	RET	$ > 0
16633	407	12	RandomDataGenerator.java	nextLong	bits	long	0	NIL-DOWHILE	$ - val + (n - 1) < 0
16633	407	12	RandomDataGenerator.java	nextLong	val	long	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
16633	407	12	RandomDataGenerator.java	nextLong	n	long	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
3175	443	8	RandomDataGenerator.java	nextGaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
3176	658	8	RandomDataGenerator.java	nextUniform	lower	double	0	NumberIsTooLargeException	$ >= upper
3176	658	8	RandomDataGenerator.java	nextUniform	upper	double	0	NumberIsTooLargeException	lower >= $
3177	663	8	RandomDataGenerator.java	nextUniform	lower	double	0	NotFiniteNumberException	Double.isInfinite($)
3178	666	8	RandomDataGenerator.java	nextUniform	upper	double	0	NotFiniteNumberException	Double.isInfinite($)
3179	670	8	RandomDataGenerator.java	nextUniform	lower	double	0	NotANumberException	Double.isNaN($)
3179	670	8	RandomDataGenerator.java	nextUniform	upper	double	0	NotANumberException	Double.isNaN($)
16634	678	8	RandomDataGenerator.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
16634	678	8	RandomDataGenerator.java	nextUniform	lowerInclusive	boolean	0	NIL-WHILE	$
3180	698	8	RandomDataGenerator.java	nextPermutation	n	int	0	NumberIsTooLargeException	k > $
3180	698	8	RandomDataGenerator.java	nextPermutation	k	int	0	NumberIsTooLargeException	$ > n
3181	702	8	RandomDataGenerator.java	nextPermutation	k	int	0	NotStrictlyPositiveException	$ <= 0
16635	710	8	RandomDataGenerator.java	nextPermutation	i	int	0	NIL-FOR	$ < k
16635	710	8	RandomDataGenerator.java	nextPermutation	k	int	0	NIL-FOR	i < $
3182	733	8	RandomDataGenerator.java	nextSample	len	int	0	NumberIsTooLargeException	k > $
3182	733	8	RandomDataGenerator.java	nextSample	k	int	0	NumberIsTooLargeException	$ > len
3183	737	8	RandomDataGenerator.java	nextSample	k	int	0	NotStrictlyPositiveException	$ <= 0
16636	744	8	RandomDataGenerator.java	nextSample	i	int	0	NIL-FOR	$ < k
16636	744	8	RandomDataGenerator.java	nextSample	k	int	0	NIL-FOR	i < $
3184	828	8	RandomDataGenerator.java	getRandomGenerator	THIS	RandomDataGenerator	0	DEF	$.rand == null
3185	852	8	RandomDataGenerator.java	getSecRan	THIS	RandomDataGenerator	0	DEF	$.secRand == null
16637	868	8	RandomDataGenerator.java	shuffle	i	int	0	NIL-FOR	$ >= end
16637	868	8	RandomDataGenerator.java	shuffle	end	int	0	NIL-FOR	i >= $
3186	869	12	RandomDataGenerator.java	shuffle	i	int	1	DEF	$ == 0
16638	889	8	RandomDataGenerator.java	getNatural	i	int	0	NIL-FOR	$ < n
16638	889	8	RandomDataGenerator.java	getNatural	n	int	0	NIL-FOR	i < $
3242	121	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	representation.size() != $
3242	121	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	DimensionMismatchException	$.size() != l
3243	124	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	sortedRepr.size() != $
3243	124	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	DimensionMismatchException	$.size() != l
16665	133	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
16665	133	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
3244	151	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
3245	156	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
3245	156	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
16666	165	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
16666	165	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
3246	166	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
3246	166	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
3246	166	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
3247	182	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
3247	182	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
16667	199	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
16667	199	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
16668	214	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
16668	214	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
3248	262	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	DimensionMismatchException	$.size() != permutedData.size()
3248	262	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	DimensionMismatchException	originalData.size() != $.size()
16669	270	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
16669	270	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
3249	272	12	RandomKey.java	inducedPermutation	index	int	0	MathIllegalArgumentException	$ == -1
16670	294	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
16670	294	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
3217	40	8	RandomKeyMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof RandomKey<?>
15104	256	8	RealMatrixFormat.java	format	i	int	0	NIL-FOR	$ < rows
15104	256	8	RealMatrixFormat.java	format	rows	int	0	NIL-FOR	i < $
15105	258	12	RealMatrixFormat.java	format	j	int	0	NIL-FOR	$ < matrix.getColumnDimension()
15105	258	12	RealMatrixFormat.java	format	matrix	RealMatrix	0	NIL-FOR	j < $.getColumnDimension()
1336	259	16	RealMatrixFormat.java	format	j	int	0	DEF	$ > 0
1337	265	12	RealMatrixFormat.java	format	i	int	0	DEF	$ < rows - 1
1337	265	12	RealMatrixFormat.java	format	rows	int	0	DEF	i < $ - 1
1338	287	8	RealMatrixFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1339	314	8	RealMatrixFormat.java	parse	trimmedPrefix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1339	314	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1339	314	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
15106	321	8	RealMatrixFormat.java	parse	loop	boolean	0	NIL-FOR	$
1340	323	12	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	RET	$.isEmpty()
1341	325	16	RealMatrixFormat.java	parse	trimmedColumnSeparator	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1341	325	16	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedColumnSeparator, pos)
1341	325	16	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, $)
1342	326	20	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	$.length() != 0
1342	326	20	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	CompositeFormat.parseFixedstring(source, $, pos)
1342	326	20	RealMatrixFormat.java	parse	source	String	1	RET	CompositeFormat.parseFixedstring($, trimmedRowSuffix, pos)
1342	326	20	RealMatrixFormat.java	parse	pos	ParsePosition	1	RET	CompositeFormat.parseFixedstring(source, trimmedRowSuffix, $)
1343	331	24	RealMatrixFormat.java	parse	trimmedRowSeparator	String	1	DEF	CompositeFormat.parseFixedstring(source, $, pos)
1343	331	24	RealMatrixFormat.java	parse	source	String	1	DEF	CompositeFormat.parseFixedstring($, trimmedRowSeparator, pos)
1343	331	24	RealMatrixFormat.java	parse	pos	ParsePosition	1	DEF	CompositeFormat.parseFixedstring(source, trimmedRowSeparator, $)
1344	342	16	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	$.length() != 0
1344	342	16	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1344	342	16	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedRowPrefix, pos)
1344	342	16	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedRowPrefix, $)
1345	348	12	RealMatrixFormat.java	parse	loop	boolean	0	RET	$
1346	351	16	RealMatrixFormat.java	parse	component	Number	1	DEF	$ != null
1347	354	20	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	DEF	$.isEmpty()
1348	367	8	RealMatrixFormat.java	parse	rowComponents	List<Number>	0	DEF	$.isEmpty()
1349	373	8	RealMatrixFormat.java	parse	trimmedSuffix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1349	373	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1349	373	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
1350	378	8	RealMatrixFormat.java	parse	matrix	List<List<Number>>	0	RET	$.isEmpty()
15107	388	12	RealMatrixFormat.java	parse	THIS	RealMatrixFormat	0	NIL-FOR	i < $.rowList.size()
15107	388	12	RealMatrixFormat.java	parse	i	int	0	NIL-FOR	$ < rowList.size()
1780	178	8	RealVector.java	checkVectorDimensions	d	int	0	DimensionMismatchException	$ != n
1780	178	8	RealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	d != $
1781	190	8	RealVector.java	checkIndex	THIS	RealVector	0	OutOfRangeException	index >= $.getDimension()
1781	190	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1781	190	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1782	209	8	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	start >= $
1782	209	8	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ >= dim
1782	209	8	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ < 0
1783	213	8	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	end >= $
1783	213	8	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ >= dim
1783	213	8	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ < 0
1784	217	8	RealVector.java	checkIndices	start	int	0	NumberIsTooSmallException	end < $
1784	217	8	RealVector.java	checkIndices	end	int	0	NumberIsTooSmallException	$ < start
15732	237	8	RealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
15733	258	8	RealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1785	285	8	RealVector.java	mapAddToSelf	d	double	0	RET	$ != 0
15734	310	8	RealVector.java	dotProduct	i	int	0	NIL-FOR	$ < n
15734	310	8	RealVector.java	dotProduct	n	int	0	NIL-FOR	i < $
1786	332	8	RealVector.java	cosine	norm	double	0	MathArithmeticException	$ == 0
1786	332	8	RealVector.java	cosine	vNorm	double	0	MathArithmeticException	$ == 0
15735	399	8	RealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
15736	420	8	RealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
15737	441	8	RealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
15738	461	8	RealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
15739	484	8	RealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
15740	510	8	RealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
15741	527	8	RealVector.java	getMinIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1787	529	12	RealVector.java	getMinIndex	entry	Entry	0	DEF	$.getValue() <= minValue
1787	529	12	RealVector.java	getMinIndex	minValue	double	0	DEF	entry.getValue() <= $
15742	558	8	RealVector.java	getMaxIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1788	560	12	RealVector.java	getMaxIndex	entry	Entry	0	DEF	$.getValue() >= maxValue
1788	560	12	RealVector.java	getMaxIndex	maxValue	double	0	DEF	entry.getValue() >= $
1789	656	8	RealVector.java	outerProduct	v	RealVector	1	DEF	$ instanceof SparseRealVector
15743	661	8	RealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
15743	661	8	RealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
15744	662	12	RealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
15744	662	12	RealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1790	682	8	RealVector.java	projection	norm2	double	0	MathArithmeticException	$ == 0.0
15745	695	8	RealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
15746	711	8	RealVector.java	toArray	i	int	0	NIL-FOR	$ < dim
15746	711	8	RealVector.java	toArray	dim	int	0	NIL-FOR	i < $
1791	726	8	RealVector.java	unitVector	norm	double	0	MathArithmeticException	$ == 0
1792	740	8	RealVector.java	unitize	norm	double	0	MathArithmeticException	$ == 0
15747	845	8	RealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
15748	885	8	RealVector.java	combineToSelf	THIS	RealVector	0	NIL-FOR	i < $.getDimension()
15748	885	8	RealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < getDimension()
15749	906	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
15749	906	8	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
15750	930	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
15750	930	8	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
15751	986	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
15751	986	8	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
15752	1010	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
15752	1010	8	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
15474	202	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
15474	202	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
1623	203	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
1624	226	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1625	246	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
1625	246	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1625	246	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
15475	252	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
1626	254	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
1627	256	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
1627	256	16	RealVectorFormat.java	parse	source	String	0	DEF	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
1627	256	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
1628	261	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
1629	264	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
1630	278	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
1630	278	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1630	278	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
15476	284	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
15476	284	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
15476	284	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
15620	90	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
15620	90	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
15621	95	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	loop	boolean	0	NIL-FOR	$
15622	99	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
15622	99	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1687	102	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ii	int	0	DEF	c[$][$] > c[isr][isr]
1687	102	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	isr	int	0	DEF	c[ii][ii] > c[$][$]
1687	102	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	DEF	$[ii][ii] > $[isr][isr]
1688	109	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	swapR	int	0	DEF	$ != r
1688	109	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	DEF	swapR != $
1689	120	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ir	int	1	NonPositiveDefiniteMatrixException	c[$][$] <= small
1689	120	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	1	NonPositiveDefiniteMatrixException	$[ir][ir] <= small
1689	120	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	1	NonPositiveDefiniteMatrixException	c[ir][ir] <= $
1690	122	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NonPositiveDefiniteMatrixException	$ == 0
15623	127	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
15623	127	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1691	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1691	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	NonPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1691	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	index	int[]	0	NonPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1691	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	0	NonPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
15624	146	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
15624	146	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
15625	151	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < i
15625	151	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	j < $
15626	167	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
15626	167	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
15627	168	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < r
15627	168	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NIL-FOR	j < $
651	44	8	RegionFactory.java	buildConvex	THIS	RegionFactory	0	RET	hyperplanes.$.length == 0
651	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$.length == 0
651	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$ == null
652	55	12	RegionFactory.java	buildConvex	THIS	RegionFactory	0	DEF	node.insertCut($.hyperplane)
652	55	12	RegionFactory.java	buildConvex	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
653	137	8	RegionFactory.java	recurseComplement	node	BSPTree<S>	0	RET	$.getCut() == null
654	143	8	RegionFactory.java	recurseComplement	attribute	BoundaryAttribute<S>	0	DEF	$ != null
2615	100	8	RegressionResults.java	RegressionResults	copyData	boolean	1	DEF	$
16279	103	12	RegressionResults.java	RegressionResults	THIS	RegressionResults	0	NIL-FOR	i < varcov.$.length
16279	103	12	RegressionResults.java	RegressionResults	i	int	0	NIL-FOR	$ < varcov.length
16279	103	12	RegressionResults.java	RegressionResults	varcov	double[][]	0	NIL-FOR	i < $.length
2616	117	8	RegressionResults.java	RegressionResults	rank	int	0	DEF	$ > 0
2617	129	8	RegressionResults.java	RegressionResults	containsConstant	boolean	1	DEF	$
2618	151	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2619	154	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2619	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ < 0
2619	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2620	171	8	RegressionResults.java	getParameterEstimates	THIS	RegressionResults	0	RET	$.parameters == null
2621	188	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2622	191	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2622	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ < 0
2622	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2623	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	$ > Double.MIN_VALUE
2623	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	Double.isNaN($)
2624	213	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	RET	$.parameters == null
16280	217	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	NIL-FOR	i < $.parameters.length
16280	217	8	RegressionResults.java	getStdErrorOfEstimates	i	int	0	NIL-FOR	$ < this.parameters.length
2625	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	Double.isNaN($)
2625	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	$ > Double.MIN_VALUE
2626	241	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2627	244	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	i >= $.parameters.length
2627	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ >= this.parameters.length
2627	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ < 0
2628	247	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	j >= $.parameters.length
2628	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ < 0
2628	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ >= this.parameters.length
2629	262	8	RegressionResults.java	getNumberOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2630	401	8	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.isSymmetricVCD
2631	402	12	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.varCovData.length > 1
2632	404	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ == j
2632	404	16	RegressionResults.java	getVcvElement	j	int	1	RET	i == $
2633	406	23	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	i >= $.varCovData[j].length
2633	406	23	RegressionResults.java	getVcvElement	i	int	1	RET	$ >= varCovData[j].length
2633	406	23	RegressionResults.java	getVcvElement	j	int	1	RET	i >= varCovData[$].length
2634	412	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ > j
2634	412	16	RegressionResults.java	getVcvElement	j	int	1	RET	i > $
192	401	8	ResizableDoubleArray.java	ResizableDoubleArray	initialCapacity	int	0	NotStrictlyPositiveException	$ <= 0
193	414	8	ResizableDoubleArray.java	ResizableDoubleArray	data	double	0	DEF	$ != null
194	441	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.internalArray.$.length <= $.startIndex + $.numElements
195	481	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
196	491	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
197	509	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	MathIllegalStateException	$.numElements < 1
198	555	8	ResizableDoubleArray.java	checkContractExpand	contraction	double	0	DEF	$ < expansion
198	555	8	ResizableDoubleArray.java	checkContractExpand	expansion	double	0	DEF	contraction < $
199	562	8	ResizableDoubleArray.java	checkContractExpand	contraction	double	0	DEF	$ <= 1
200	569	8	ResizableDoubleArray.java	checkContractExpand	expansion	double	0	DEF	$ <= 1
201	655	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	MathIllegalArgumentException	i > $.numElements
201	655	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ > numElements
202	659	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ < 0
203	666	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
204	670	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
205	691	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == $.ExpansionMode.MULTIPLICATIVE
206	760	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	ArrayIndexOutOfBoundsException	index >= $.numElements
206	760	8	ResizableDoubleArray.java	getElement	index	int	1	ArrayIndexOutOfBoundsException	$ >= numElements
207	762	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
208	960	8	ResizableDoubleArray.java	setElement	index	int	0	ArrayIndexOutOfBoundsException	$ < 0
209	963	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
209	963	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
210	966	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
210	966	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
211	1004	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != ADDITIVE_MODE
211	1004	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != MULTIPLICATIVE_MODE
212	1011	12	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	1	DEF	$ == MULTIPLICATIVE_MODE
213	1013	19	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ == ADDITIVE_MODE
214	1055	8	ResizableDoubleArray.java	setNumElements	i	int	0	MathIllegalArgumentException	$ < 0
215	1064	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	newSize > $.internalArray.$.length
215	1064	8	ResizableDoubleArray.java	setNumElements	newSize	int	0	DEF	$ > internalArray.length
216	1079	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == $.ExpansionMode.MULTIPLICATIVE
217	1162	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
217	1162	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
218	1165	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
219	1177	16	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
4090	82	8	RiddersSolver.java	doSolve	y1	double	0	RET	$ == 0
4091	85	8	RiddersSolver.java	doSolve	y2	double	0	RET	$ == 0
4092	99	12	RiddersSolver.java	doSolve	y3	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4092	99	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y3) <= $
4093	110	12	RiddersSolver.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
4093	110	12	RiddersSolver.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
4093	110	12	RiddersSolver.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
4094	113	12	RiddersSolver.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4094	113	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
4095	119	12	RiddersSolver.java	doSolve	correction	double	1	DEF	$ > 0.0
4096	120	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y1) + FastMath.signum($) == 0.0
4096	120	16	RiddersSolver.java	doSolve	y1	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
4097	130	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y2) + FastMath.signum($) == 0.0
4097	130	16	RiddersSolver.java	doSolve	y2	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
4288	64	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
4289	86	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
17217	124	12	RombergIntegrator.java	doIntegrate	j	int	0	NIL-FOR	$ <= i
17217	124	12	RombergIntegrator.java	doIntegrate	i	int	0	NIL-FOR	j <= $
4290	131	12	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	i >= $.getMinimalIterationCount()
4290	131	12	RombergIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
4291	134	16	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4291	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4291	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4291	134	16	RombergIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
869	91	8	RootsOfUnity.java	isCounterClockWise	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
870	119	8	RootsOfUnity.java	computeRoots	n	int	0	ZeroException	$ == 0
871	129	8	RootsOfUnity.java	computeRoots	THIS	RootsOfUnity	0	RET	absN == $.omegaCount
871	129	8	RootsOfUnity.java	computeRoots	absN	int	0	RET	$ == omegaCount
14894	143	8	RootsOfUnity.java	computeRoots	i	int	0	NIL-FOR	$ < absN
14894	143	8	RootsOfUnity.java	computeRoots	absN	int	0	NIL-FOR	i < $
872	165	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
873	169	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
873	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ >= omegaCount
873	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ < 0
874	192	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
875	196	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
875	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ >= omegaCount
875	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ < 0
710	138	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
711	178	4	Rotation.java	Rotation	norm	double	0	MathIllegalArgumentException	$ == 0
712	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
712	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
712	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
712	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
712	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
712	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
712	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
712	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
713	240	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
714	331	4	Rotation.java	Rotation	normProduct	double	0	MathArithmeticException	$ == 0
715	337	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
715	337	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
716	409	6	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
717	418	10	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
718	427	14	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
719	495	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
720	497	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
721	510	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
721	510	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
722	512	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
723	556	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
724	565	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
724	565	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
725	574	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
726	583	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
726	583	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
727	592	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
728	601	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
728	601	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
729	610	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
730	619	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
730	619	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
731	628	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
732	637	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
732	637	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
733	646	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
734	655	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
734	655	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
735	664	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
736	673	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
736	673	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
737	682	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
738	691	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
738	691	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
739	700	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
740	709	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
740	709	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
741	718	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
742	727	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
742	727	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
743	736	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
744	745	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
744	745	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
745	763	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
745	763	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
14878	961	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
746	1002	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
746	1002	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
746	1002	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
16859	108	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
16859	108	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
16860	127	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
16861	135	6	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
16861	135	6	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
16862	137	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
16862	137	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
16862	137	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
16863	139	14	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
16863	139	14	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
16864	150	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
16864	150	6	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
16864	150	6	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
16865	152	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
16865	152	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
3521	164	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	$.isLastStep
3522	172	10	RungeKuttaIntegrator.java	integrate	nextIsLast	boolean	0	DEF	$
3411	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
3411	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
16759	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
16759	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
16759	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
16760	157	4	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
16760	157	4	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
16761	163	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
16761	163	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
16762	164	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
16762	164	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
3412	183	4	RungeKuttaStepInterpolator.java	readExternal	n	int	1	DEF	$ < 0
16763	187	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
16763	187	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
16764	194	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
16764	194	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
16765	196	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
16765	196	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
3413	203	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
1249	109	8	SaddlePointExpansion.java	getStirlingError	z	double	1	DEF	$ < 15.0
1250	111	12	SaddlePointExpansion.java	getStirlingError	z2	double	1	DEF	FastMath.floor($) == $
1251	147	8	SaddlePointExpansion.java	getDeviancePart	x	double	1	DEF	FastMath.abs($ - mu) < 0.1 * ($ + mu)
1251	147	8	SaddlePointExpansion.java	getDeviancePart	mu	double	1	DEF	FastMath.abs(x - $) < 0.1 * (x + $)
14957	155	12	SaddlePointExpansion.java	getDeviancePart	s1	double	0	NIL-WHILE	$ != s
14957	155	12	SaddlePointExpansion.java	getDeviancePart	s	double	0	NIL-WHILE	s1 != $
1252	180	8	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == 0
1253	181	12	SaddlePointExpansion.java	logBinomialProbability	p	double	1	DEF	$ < 0.1
1254	186	15	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == n
1254	186	15	SaddlePointExpansion.java	logBinomialProbability	n	int	1	DEF	x == $
1255	187	12	SaddlePointExpansion.java	logBinomialProbability	q	double	1	DEF	$ < 0.1
1639	70	8	SchurTransformer.java	SchurTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1640	93	8	SchurTransformer.java	getP	THIS	SchurTransformer	0	DEF	$.cachedP == null
1641	106	8	SchurTransformer.java	getPT	THIS	SchurTransformer	0	DEF	$.cachedPt == null
1642	120	8	SchurTransformer.java	getT	THIS	SchurTransformer	0	DEF	$.cachedT == null
15491	144	8	SchurTransformer.java	transform	iu	int	0	NIL-WHILE	$ >= 0
1643	150	12	SchurTransformer.java	transform	il	int	1	DEF	$ == iu
1643	150	12	SchurTransformer.java	transform	iu	int	1	DEF	il == $
1644	155	19	SchurTransformer.java	transform	il	int	1	DEF	$ == iu - 1
1644	155	19	SchurTransformer.java	transform	iu	int	1	DEF	il == $ - 1
1645	162	16	SchurTransformer.java	transform	q	double	0	DEF	$ >= 0
1646	164	20	SchurTransformer.java	transform	p	double	1	DEF	$ >= 0
15492	178	20	SchurTransformer.java	transform	j	int	0	NIL-FOR	$ < n
15492	178	20	SchurTransformer.java	transform	n	int	0	NIL-FOR	j < $
15493	185	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= iu
15493	185	20	SchurTransformer.java	transform	iu	int	0	NIL-FOR	i <= $
15494	192	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= n - 1
15494	192	20	SchurTransformer.java	transform	n	int	0	NIL-FOR	i <= $ - 1
1647	205	16	SchurTransformer.java	transform	iteration	int	0	MaxCountExceededException	++$ > MAX_ITERATIONS
15495	226	8	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	i < $.matrixT.$.length
15495	226	8	SchurTransformer.java	getNorm	i	int	0	NIL-FOR	$ < matrixT.length
15496	228	12	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	j < $.matrixT.$.length
15496	228	12	SchurTransformer.java	getNorm	j	int	0	NIL-FOR	$ < matrixT.length
15497	244	8	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	NIL-WHILE	$ > 0
1648	246	12	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	$ == 0.0
1649	249	12	SchurTransformer.java	findSmallSubDiagonalElement	THIS	SchurTransformer	0	DEF	FastMath.abs($.matrixT[l][l - 1]) < $.epsilon * s
1649	249	12	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	FastMath.abs(matrixT[l][l - 1]) < epsilon * $
1649	249	12	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	DEF	FastMath.abs(matrixT[$][$ - 1]) < epsilon * s
1650	269	8	SchurTransformer.java	computeShift	l	int	0	DEF	$ < idx
1650	269	8	SchurTransformer.java	computeShift	idx	int	0	DEF	l < $
1651	275	8	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 10
15498	277	12	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
15498	277	12	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
1652	287	8	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 30
1653	290	12	SchurTransformer.java	computeShift	s	double	0	DEF	$ > 0.0
1654	292	16	SchurTransformer.java	computeShift	THIS	SchurTransformer	0	DEF	shift.$.y < shift.$.x
1654	292	16	SchurTransformer.java	computeShift	shift	ShiftInfo	0	DEF	$.y < $.x
15499	296	16	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
15499	296	16	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
15500	317	8	SchurTransformer.java	initQRStep	im	int	0	NIL-WHILE	$ >= il
15500	317	8	SchurTransformer.java	initQRStep	il	int	0	NIL-WHILE	im >= $
1655	325	12	SchurTransformer.java	initQRStep	im	int	0	DEF	$ == il
1655	325	12	SchurTransformer.java	initQRStep	il	int	0	DEF	im == $
1656	334	12	SchurTransformer.java	initQRStep	THIS	SchurTransformer	0	DEF	lhs < $.epsilon * rhs
1656	334	12	SchurTransformer.java	initQRStep	lhs	double	0	DEF	$ < epsilon * rhs
1656	334	12	SchurTransformer.java	initQRStep	rhs	double	0	DEF	lhs < epsilon * $
15501	360	8	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	$ <= iu - 1
15501	360	8	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	k <= $ - 1
1657	362	12	SchurTransformer.java	performDoubleQRStep	k	int	0	DEF	$ != im
1657	362	12	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	k != $
1658	367	16	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	Precision.equals(shift.$.x, 0.0, $.epsilon)
1658	367	16	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	Precision.equals($.x, 0.0, epsilon)
1659	373	12	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	shift.$.x == 0.0
1659	373	12	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	$.x == 0.0
1660	377	12	SchurTransformer.java	performDoubleQRStep	p	double	0	DEF	$ < 0.0
1661	380	12	SchurTransformer.java	performDoubleQRStep	s	double	0	DEF	$ != 0.0
1662	381	16	SchurTransformer.java	performDoubleQRStep	k	int	1	DEF	$ != im
1662	381	16	SchurTransformer.java	performDoubleQRStep	im	int	1	DEF	k != $
1663	383	23	SchurTransformer.java	performDoubleQRStep	il	int	0	DEF	$ != im
1663	383	23	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	il != $
15502	394	16	SchurTransformer.java	performDoubleQRStep	j	int	0	NIL-FOR	$ < n
15502	394	16	SchurTransformer.java	performDoubleQRStep	n	int	0	NIL-FOR	j < $
1664	396	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
15503	405	16	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= FastMath.min(iu, k + 3)
15503	405	16	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	i <= FastMath.min(iu, $ + 3)
15503	405	16	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	i <= FastMath.min($, k + 3)
1665	407	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
15504	417	16	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= high
15504	417	16	SchurTransformer.java	performDoubleQRStep	high	int	0	NIL-FOR	i <= $
1666	419	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
15505	430	8	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= iu
15505	430	8	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	i <= $
1667	432	12	SchurTransformer.java	performDoubleQRStep	i	int	0	DEF	$ > im + 2
1667	432	12	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	i > $ + 2
2695	49	8	SearchInterval.java	SearchInterval	lo	double	0	NumberIsTooLargeException	$ >= hi
2695	49	8	SearchInterval.java	SearchInterval	hi	double	0	NumberIsTooLargeException	lo >= $
2696	52	8	SearchInterval.java	SearchInterval	lo	double	0	OutOfRangeException	init < $
2696	52	8	SearchInterval.java	SearchInterval	hi	double	0	OutOfRangeException	init > $
2696	52	8	SearchInterval.java	SearchInterval	init	double	0	OutOfRangeException	$ > hi
2696	52	8	SearchInterval.java	SearchInterval	init	double	0	OutOfRangeException	$ < lo
4111	87	8	SecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
4112	90	8	SecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
4113	111	12	SecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
4114	124	12	SecantSolver.java	doSolve	f1	double	0	RET	FastMath.abs($) <= ftol
4114	124	12	SecantSolver.java	doSolve	ftol	double	0	RET	FastMath.abs(f1) <= $
4115	130	12	SecantSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
4115	130	12	SecantSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
4115	130	12	SecantSolver.java	doSolve	atol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
4115	130	12	SecantSolver.java	doSolve	rtol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
2290	82	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
825	97	8	Segment.java	distance	r	double	1	RET	$ < 0
825	97	8	Segment.java	distance	r	double	1	RET	$ > 1
2300	268	8	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 0
2300	268	8	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 0
2301	271	12	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 1
2301	271	12	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 1
16125	278	16	SemiVariance.java	evaluate	i	int	0	NIL-FOR	$ < length
16125	278	16	SemiVariance.java	evaluate	length	int	0	NIL-FOR	i < $
2302	279	20	SemiVariance.java	evaluate	i	int	0	DEF	(values[$] > cutoff) == booleanDirection
2302	279	20	SemiVariance.java	evaluate	booleanDirection	boolean	0	DEF	(values[i] > cutoff) == $
2302	279	20	SemiVariance.java	evaluate	values	double[]	0	DEF	($[i] > cutoff) == booleanDirection
2302	279	20	SemiVariance.java	evaluate	cutoff	double	0	DEF	(values[i] > $) == booleanDirection
2303	285	16	SemiVariance.java	evaluate	corrected	boolean	1	RET	$
4034	172	8	Sigmoid.java	value	exp	double	1	DEF	Double.isInfinite($)
17072	190	12	Sigmoid.java	value	THIS	Sigmoid	0	NIL-FOR	n < f.$.length
17072	190	12	Sigmoid.java	value	n	int	0	NIL-FOR	$ < f.length
17072	190	12	Sigmoid.java	value	f	double[]	0	NIL-FOR	n < $.length
17073	195	16	Sigmoid.java	value	k	int	0	NIL-FOR	$ >= 0
4035	197	20	Sigmoid.java	value	k	int	1	DEF	$ > 1
2772	90	8	SimplePointChecker.java	SimplePointChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2773	116	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	iteration >= $.maxIterationCount
2773	116	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2773	116	8	SimplePointChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
16310	122	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	NIL-FOR	i < p.$.length
16310	122	8	SimplePointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
16310	122	8	SimplePointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
2774	127	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > $.getAbsoluteThreshold()
2774	127	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > size * $.getRelativeThreshold()
2774	127	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
2774	127	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
2774	127	12	SimplePointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
1907	102	8	SimplePointChecker.java	SimplePointChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1908	128	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1908	128	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	iteration >= $.maxIterationCount
1908	128	8	SimplePointChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
15812	134	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	NIL-FOR	i < p.$.length
15812	134	8	SimplePointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
15812	134	8	SimplePointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1909	139	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > size * $.getRelativeThreshold()
1909	139	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > $.getAbsoluteThreshold()
1909	139	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1909	139	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1909	139	12	SimplePointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
2635	133	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
2636	137	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2637	149	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2638	173	8	SimpleRegression.java	append	THIS	SimpleRegression	1	DEF	$.n == 0
2639	180	12	SimpleRegression.java	append	THIS	SimpleRegression	1	DEF	$.hasIntercept
2640	215	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
2641	216	12	SimpleRegression.java	removeData	THIS	SimpleRegression	1	DEF	$.hasIntercept
16281	259	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
16281	259	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
16281	259	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
2642	260	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	ModelSpecificationException	data[i].length < 2
2642	260	12	SimpleRegression.java	addData	i	int	0	ModelSpecificationException	data[$].length < 2
2642	260	12	SimpleRegression.java	addData	data	double[][]	0	ModelSpecificationException	$[i].length < 2
2643	278	8	SimpleRegression.java	addObservation	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length == 0
2643	278	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$ == null
2643	278	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length == 0
2644	295	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length != y.$.length
2644	295	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2644	295	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2644	295	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2644	295	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
16282	302	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
16282	302	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
16282	302	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
2645	303	12	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	DEF	x[i].length == 0
2645	303	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$].length == 0
2645	303	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$] == null
2645	303	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i].length == 0
2645	303	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i] == null
2646	307	8	SimpleRegression.java	addObservations	obsOk	boolean	0	ModelSpecificationException	$
16283	312	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
16283	312	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
16283	312	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
16284	331	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
16284	331	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
16284	331	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
16284	331	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
2647	376	8	SimpleRegression.java	predict	THIS	SimpleRegression	0	RET	$.hasIntercept
2648	432	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
2649	435	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	FastMath.abs($.sumXX) < 10 * Double.MIN_VALUE
2650	485	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2651	499	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2652	545	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
2653	568	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
2654	606	8	SimpleRegression.java	getInterceptStdErr	THIS	SimpleRegression	0	RET	$.hasIntercept
2655	687	8	SimpleRegression.java	getSlopeConfidenceInterval	THIS	SimpleRegression	0	RET	$.n < 3
2656	690	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ <= 0
2656	690	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ >= 1
2657	723	8	SimpleRegression.java	getSignificance	THIS	SimpleRegression	0	RET	$.n < 3
2658	743	6	SimpleRegression.java	getIntercept	THIS	SimpleRegression	0	RET	$.hasIntercept
2659	772	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	NoDataException:RET	$.hasIntercept
2660	773	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 3
2661	776	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	FastMath.abs( $.sumXX ) > Precision.SAFE_MIN
2662	799	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 2
2663	802	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	Double.isNaN($.sumXX)
2664	827	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	MathIllegalArgumentException	variablesToInclude.$.length == 0
2664	827	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$ == null
2664	827	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$.length == 0
2665	830	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 1
2665	830	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	$.hasIntercept
2665	830	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 2
2665	830	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 1
2665	830	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 2
2666	836	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	$.hasIntercept
2667	837	12	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	variablesToInclude.$.length == 2
2667	837	12	SimpleRegression.java	regress	variablesToInclude	int[]	1	OutOfRangeException:RET	$.length == 2
2668	838	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	ModelSpecificationException	$[0] == 1
2669	840	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2670	843	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[1] != 1
2671	848	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 1
2671	848	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2672	853	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	RET	$[0] == 0
2673	861	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	RET	$[0] == 1
2674	867	20	SimpleRegression.java	regress	_sxx	double	1	RET	Double.isNaN($)
2675	883	12	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2693	91	8	SimpleUnivariateValueChecker.java	SimpleUnivariateValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2694	117	8	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2694	117	8	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	iteration >= $.maxIterationCount
2694	117	8	SimpleUnivariateValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
1834	103	8	SimpleUnivariateValueChecker.java	SimpleUnivariateValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1835	129	8	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1835	129	8	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	iteration >= $.maxIterationCount
1835	129	8	SimpleUnivariateValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
2678	89	8	SimpleValueChecker.java	SimpleValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2679	115	8	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2679	115	8	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	iteration >= $.maxIterationCount
2679	115	8	SimpleValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
1816	100	8	SimpleValueChecker.java	SimpleValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1817	126	8	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1817	126	8	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	iteration >= $.maxIterationCount
1817	126	8	SimpleValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
2775	91	8	SimpleVectorValueChecker.java	SimpleVectorValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2776	117	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	iteration >= $.maxIterationCount
2776	117	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2776	117	8	SimpleVectorValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
16311	123	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	NIL-FOR	i < p.$.length
16311	123	8	SimpleVectorValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
16311	123	8	SimpleVectorValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
2777	128	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > size * $.getRelativeThreshold()
2777	128	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > $.getAbsoluteThreshold()
2777	128	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
2777	128	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
2777	128	12	SimpleVectorValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
1910	102	8	SimpleVectorValueChecker.java	SimpleVectorValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1911	128	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	iteration >= $.maxIterationCount
1911	128	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1911	128	8	SimpleVectorValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
15813	134	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	NIL-FOR	i < p.$.length
15813	134	8	SimpleVectorValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
15813	134	8	SimpleVectorValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1912	139	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > size * $.getRelativeThreshold()
1912	139	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > $.getAbsoluteThreshold()
1912	139	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1912	139	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1912	139	12	SimpleVectorValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
3035	158	12	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	RET	$.getIterations() > 0
16518	160	16	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
16518	160	16	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
3036	165	16	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
3037	197	12	SimplexOptimizer.java	parseOptimizationData	THIS	SimplexOptimizer	0	DEF	$.data instanceof AbstractSimplex
3038	213	8	SimplexOptimizer.java	checkParameters	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
3039	216	8	SimplexOptimizer.java	checkParameters	THIS	SimplexOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3039	216	8	SimplexOptimizer.java	checkParameters	THIS	SimplexOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
2217	172	12	SimplexOptimizer.java	parseOptimizationData	THIS	SimplexOptimizer	0	DEF	$.data instanceof AbstractSimplex
2218	182	8	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
2219	214	12	SimplexOptimizer.java	doOptimize	iteration	int	0	RET	$ > 0
16092	216	16	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
16092	216	16	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
2220	221	16	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
16289	126	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
16289	126	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
2730	130	12	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	$ < minValue
2730	130	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	entry < $
16290	149	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
16290	149	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
2731	153	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	Precision.compareTo(entry, 0d, $.maxUlps) > 0
2731	153	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	Precision.compareTo($, 0d, maxUlps) > 0
2732	158	16	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
2733	160	23	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
2734	168	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
2735	170	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
2736	174	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
16291	176	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
16291	176	20	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
2737	179	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
2737	179	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	Precision.equals(entry, 1d, $.maxUlps)
2737	179	24	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
2737	179	24	SimplexSolver.java	getPivotRow	entry	double	0	RET	Precision.equals($, 1d, maxUlps)
2737	179	24	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
2738	195	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.getEvaluations() < $.getMaxEvaluations() / 2
16292	201	20	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	NIL-FOR	$.row.equals(minRow)
16292	201	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < varEnd
16292	201	20	SimplexSolver.java	getPivotRow	minRow	Integer	0	NIL-FOR	row.equals($)
16292	201	20	SimplexSolver.java	getPivotRow	varEnd	int	0	NIL-FOR	i < $
2739	203	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	basicRow.equals($.row)
2739	203	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$ != null
2739	203	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$.equals(row)
2739	203	24	SimplexSolver.java	getPivotRow	i	int	0	DEF	$ < minIndex
2739	203	24	SimplexSolver.java	getPivotRow	minIndex	int	0	DEF	i < $
2740	230	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
16293	239	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
16293	239	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
2741	240	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
2741	240	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
2742	261	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
16294	265	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
2743	270	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, $.epsilon)
2743	270	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	Precision.equals($.getEntry(0, $.getRhsOffset()), 0d, epsilon)
16295	293	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
15791	75	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
15791	75	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
1867	79	12	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	$ < minValue
1867	79	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	entry < $
15792	97	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
15792	97	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1868	101	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	Precision.compareTo(entry, 0d, $.maxUlps) > 0
1868	101	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	Precision.compareTo($, 0d, maxUlps) > 0
1869	106	16	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
1870	108	23	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
1871	116	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
1872	118	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
1873	122	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
15793	124	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
15793	124	20	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
1874	127	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
1874	127	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	Precision.equals(entry, 1d, $.maxUlps)
1874	127	24	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
1874	127	24	SimplexSolver.java	getPivotRow	entry	double	0	RET	Precision.equals($, 1d, maxUlps)
1874	127	24	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
1875	143	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.getIterations() < $.getMaxIterations() / 2
15794	149	20	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	NIL-FOR	$.row.equals(minRow)
15794	149	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < varEnd
15794	149	20	SimplexSolver.java	getPivotRow	minRow	Integer	0	NIL-FOR	row.equals($)
15794	149	20	SimplexSolver.java	getPivotRow	varEnd	int	0	NIL-FOR	i < $
1876	151	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	basicRow.equals($.row)
1876	151	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$ != null
1876	151	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$.equals(row)
1876	151	24	SimplexSolver.java	getPivotRow	i	int	0	DEF	$ < minIndex
1876	151	24	SimplexSolver.java	getPivotRow	minIndex	int	0	DEF	i < $
1877	176	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
15795	185	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
15795	185	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1878	186	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
1878	186	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
1879	204	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
15796	208	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1880	213	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, $.epsilon)
1880	213	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	Precision.equals($.getEntry(0, $.getRhsOffset()), 0d, epsilon)
15797	233	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
2749	179	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
16296	183	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
16296	183	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
2750	186	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
16297	189	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
16297	189	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
16298	192	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
16298	192	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
2751	212	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
2752	223	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
16299	231	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
16299	231	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
2753	239	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
2754	248	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
2754	248	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
2755	250	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
2755	250	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
2756	255	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
2756	255	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
2756	255	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
2756	255	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
2757	285	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
2758	310	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
2758	310	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
16300	337	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
16300	337	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
2759	339	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	Precision.equals(entry, 1d, $.maxUlps)
2759	339	12	SimplexTableau.java	getBasicRow	entry	double	1	DEF	Precision.equals($, 1d, maxUlps)
2759	339	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
2760	341	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	Precision.equals(entry, 0d, $.maxUlps)
2760	341	19	SimplexTableau.java	getBasicRow	entry	double	0	RET	Precision.equals($, 0d, maxUlps)
2761	353	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
16301	361	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
16301	361	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
2762	363	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	Precision.compareTo(entry, 0d, $.epsilon) > 0
2762	363	12	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	Precision.compareTo($, 0d, epsilon) > 0
16302	369	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
16302	369	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
2763	371	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
2763	371	12	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
16303	377	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
16303	377	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
16304	379	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
16304	379	12	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
2764	380	16	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
2764	380	16	SimplexTableau.java	dropPhase1Objective	columnsToDrop	Set<Integer>	0	DEF	$.contains(j)
16305	388	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
16306	409	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
16306	409	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
2765	411	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	Precision.compareTo(entry, 0d, $.epsilon) < 0
2765	411	12	SimplexTableau.java	isOptimal	entry	double	0	RET	Precision.compareTo($, 0d, epsilon) < 0
16307	429	8	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
16307	429	8	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
16307	429	8	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
2766	431	12	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
2767	436	12	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ == 0
2767	436	12	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ != null
2768	441	19	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
2768	441	19	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
16308	465	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
16308	465	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
16309	482	8	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth()
16309	482	8	SimplexTableau.java	subtractRow	i	int	0	NIL-FOR	$ < getWidth()
2769	485	12	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	DEF	FastMath.abs(result) < $.cutOff
2769	485	12	SimplexTableau.java	subtractRow	result	double	0	DEF	FastMath.abs($) < cutOff
2770	602	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
2770	602	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
2771	606	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
1884	158	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
15798	162	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
15798	162	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
1885	165	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
15799	168	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
15799	168	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
15800	171	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
15800	171	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1886	191	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
1887	202	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
15801	210	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
15801	210	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
1888	218	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
1889	227	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
1889	227	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
1890	229	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1890	229	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1891	234	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
1891	234	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1891	234	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
1891	234	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1892	264	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
1893	289	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
1893	289	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
15802	316	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
15802	316	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
1894	318	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	Precision.equals(entry, 1d, $.maxUlps)
1894	318	12	SimplexTableau.java	getBasicRow	entry	double	1	DEF	Precision.equals($, 1d, maxUlps)
1894	318	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
1895	320	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	Precision.equals(entry, 0d, $.maxUlps)
1895	320	19	SimplexTableau.java	getBasicRow	entry	double	0	RET	Precision.equals($, 0d, maxUlps)
1896	332	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
15803	340	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
15803	340	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
1897	342	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	Precision.compareTo(entry, 0d, $.epsilon) > 0
1897	342	12	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	Precision.compareTo($, 0d, epsilon) > 0
15804	348	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
15804	348	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1898	350	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
1898	350	12	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
15805	356	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
15805	356	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
15806	358	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
15806	358	12	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
1899	359	16	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
1899	359	16	SimplexTableau.java	dropPhase1Objective	columnsToDrop	Set<Integer>	0	DEF	$.contains(j)
15807	367	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
15808	388	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
15808	388	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
1900	390	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	Precision.compareTo(entry, 0d, $.epsilon) < 0
1900	390	12	SimplexTableau.java	isOptimal	entry	double	0	RET	Precision.compareTo($, 0d, epsilon) < 0
15809	408	6	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
15809	408	6	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
15809	408	6	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
1901	410	10	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
1902	415	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ != null
1902	415	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ == 0
1903	420	17	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
1903	420	17	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
15810	444	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
15810	444	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
15811	461	8	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth()
15811	461	8	SimplexTableau.java	subtractRow	i	int	0	NIL-FOR	$ < getWidth()
1904	464	12	SimplexTableau.java	subtractRow	result	double	0	DEF	FastMath.abs($) < CUTOFF_THRESHOLD
1905	581	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
1905	581	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
1906	585	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
4260	63	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
4261	85	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
4262	105	8	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.getMinimalIterationCount() == 1
4263	116	12	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.iterations.getCount() >= $.getMinimalIterationCount()
4264	120	16	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4264	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4264	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4264	120	16	SimpsonIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
4028	88	8	Sinc.java	value	scaledX	double	1	RET	FastMath.abs($) <= SHORTCUT
4029	117	8	Sinc.java	value	scaledX	double	1	DEF	FastMath.abs($) <= SHORTCUT
17068	119	12	Sinc.java	value	THIS	Sinc	0	NIL-FOR	i < f.$.length
17068	119	12	Sinc.java	value	i	int	0	NIL-FOR	$ < f.length
17068	119	12	Sinc.java	value	f	double[]	0	NIL-FOR	i < $.length
4030	121	16	Sinc.java	value	i	int	1	DEF	($ & 0x1) == 0
17069	154	12	Sinc.java	value	THIS	Sinc	0	NIL-FOR	n < f.$.length
17069	154	12	Sinc.java	value	n	int	0	NIL-FOR	$ < f.length
17069	154	12	Sinc.java	value	f	double[]	0	NIL-FOR	n < $.length
4031	161	16	Sinc.java	value	n	int	1	DEF	($ & 0x1) == 0
17070	173	16	Sinc.java	value	k	int	0	NIL-FOR	$ > 1
4032	194	8	Sinc.java	value	THIS	Sinc	0	DEF	$.normalized
17071	196	12	Sinc.java	value	THIS	Sinc	0	NIL-FOR	i < f.$.length
17071	196	12	Sinc.java	value	i	int	0	NIL-FOR	$ < f.length
17071	196	12	Sinc.java	value	f	double[]	0	NIL-FOR	i < $.length
1705	92	8	SingularValueDecomposition.java	SingularValueDecomposition	matrix	RealMatrix	1	DEF	$.getRowDimension() < $.getColumnDimension()
15660	113	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ < FastMath.max(nct, nrt)
15660	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	NIL-FOR	k < FastMath.max($, nrt)
15660	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	NIL-FOR	k < FastMath.max(nct, $)
1706	114	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1706	114	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
15661	119	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15661	119	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1707	122	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1707	122	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1708	123	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	A[$][$] < 0
15662	126	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15662	126	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
15663	133	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
15663	133	12	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
1709	134	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1709	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1709	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1709	134	16	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
15664	138	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15664	138	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
15665	142	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15665	142	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1710	150	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1710	150	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
15666	153	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15666	153	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1711	157	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1711	157	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
15667	162	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
15667	162	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1712	165	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1712	165	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1713	166	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$ + 1] < 0
1713	166	20	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k + 1] < 0
15668	169	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
15668	169	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1714	175	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k + 1 < $.m
1714	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ + 1 < m
1714	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1714	175	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
15669	178	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15669	178	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
15670	181	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
15670	181	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
15671	182	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15671	182	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
15672	186	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
15672	186	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
15673	188	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15673	188	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
15674	196	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
15674	196	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1715	203	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	nct < $.n
1715	203	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	$ < n
1716	206	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.m < p
1716	206	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	m < $
1717	209	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	$ + 1 < p
1717	209	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	nrt + 1 < $
15675	215	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
15675	215	8	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
15676	216	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15676	216	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
15677	221	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1718	222	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.singularValues[k] != 0
1718	222	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	singularValues[$] != 0
15678	223	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
15678	223	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
15679	225	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15679	225	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
15680	229	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15680	229	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
15681	233	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15681	233	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
15682	237	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < k - 1
15682	237	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	i < $ - 1
15683	241	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15683	241	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
15684	249	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1719	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1719	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1719	250	12	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1719	250	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
15685	252	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
15685	252	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
15686	254	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
15686	254	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
15687	258	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
15687	258	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
15688	263	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
15688	263	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
15689	272	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-WHILE	$ > 0
15690	284	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1720	295	16	SingularValueDecomposition.java	SingularValueDecomposition	threshold	double	0	DEF	FastMath.abs(e[k]) > $
1720	295	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	FastMath.abs(e[$]) > threshold
1720	295	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	FastMath.abs($[k]) > threshold
1721	302	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	$ == p - 2
1721	302	12	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	k == $ - 2
15691	306	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	NIL-FOR	$ >= k
15691	306	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	ks >= $
1722	307	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	$ == k
1722	307	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	ks == $
1723	312	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	FastMath.abs($.singularValues[ks]) <= TINY + EPS * t
1723	312	20	SingularValueDecomposition.java	SingularValueDecomposition	t	double	0	DEF	FastMath.abs(singularValues[ks]) <= TINY + EPS * $
1723	312	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	FastMath.abs(singularValues[$]) <= TINY + EPS * t
1724	317	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == k
1724	317	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	ks == $
1725	319	23	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == p - 1
1725	319	23	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	ks == $ - 1
15692	333	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ >= k
15692	333	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	j >= $
1726	338	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1726	338	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
15693	343	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
15693	343	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
15694	355	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p
15694	355	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $
15695	363	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15695	363	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1727	388	20	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ != 0
1727	388	20	SingularValueDecomposition.java	SingularValueDecomposition	c	double	0	DEF	$ != 0
1728	391	24	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ < 0
15696	399	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p - 1
15696	399	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $ - 1
1729	403	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1729	403	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
15697	411	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
15697	411	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1730	424	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	j < $.m - 1
1730	424	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ < m - 1
15698	425	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15698	425	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1731	439	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] <= 0
1731	439	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] <= 0
15699	442	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ <= pp
15699	442	24	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-FOR	i <= $
15700	447	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-WHILE	$ < pp
15700	447	20	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-WHILE	k < $
1732	448	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] >= $.singularValues[k + 1]
1732	448	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] >= singularValues[$ + 1]
1733	454	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.n - 1
1733	454	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < n - 1
15701	455	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
15701	455	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1734	461	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.m - 1
1734	461	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < m - 1
15702	462	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
15702	462	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1735	481	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.transposed
1736	509	8	SingularValueDecomposition.java	getUT	THIS	SingularValueDecomposition	0	DEF	$.cachedUt == null
1737	523	8	SingularValueDecomposition.java	getS	THIS	SingularValueDecomposition	0	DEF	$.cachedS == null
1738	558	8	SingularValueDecomposition.java	getVT	THIS	SingularValueDecomposition	0	DEF	$.cachedVt == null
15703	580	8	SingularValueDecomposition.java	getCovariance	THIS	SingularValueDecomposition	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
15703	580	8	SingularValueDecomposition.java	getCovariance	p	int	0	NIL-WHILE	dimension < $
15703	580	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	$ < p
15703	580	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
15703	580	8	SingularValueDecomposition.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
1739	585	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NumberIsTooLargeException	$ == 0
15704	644	8	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.singularValues.$.length
15704	644	8	SingularValueDecomposition.java	getRank	i	int	0	NIL-FOR	$ < singularValues.length
1740	645	12	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	DEF	$.singularValues[i] > $.tol
1740	645	12	SingularValueDecomposition.java	getRank	i	int	0	DEF	singularValues[$] > tol
2277	96	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
2278	111	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
2279	115	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
2280	136	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
2281	164	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
2281	164	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2281	164	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
2281	164	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
2281	164	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
16118	174	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16118	174	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16118	174	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
16119	182	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16119	182	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16119	182	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
14901	85	12	SmallPrimes.java	smallTrialDivision	THIS	SmallPrimes	0	NIL-WHILE	0 == n % $.p
14901	85	12	SmallPrimes.java	smallTrialDivision	n	int	0	NIL-WHILE	0 == $ % p
14902	103	8	SmallPrimes.java	boundedTrialDivision	f	int	0	NIL-WHILE	$ <= maxFactor
14902	103	8	SmallPrimes.java	boundedTrialDivision	maxFactor	int	0	NIL-WHILE	f <= $
1068	104	12	SmallPrimes.java	boundedTrialDivision	f	int	0	DEF	0 == n % $
1068	104	12	SmallPrimes.java	boundedTrialDivision	n	int	0	DEF	0 == $ % f
1069	110	12	SmallPrimes.java	boundedTrialDivision	f	int	0	DEF	0 == n % $
1069	110	12	SmallPrimes.java	boundedTrialDivision	n	int	0	DEF	0 == $ % f
1070	117	8	SmallPrimes.java	boundedTrialDivision	n	int	0	DEF	$ != 1
1071	131	8	SmallPrimes.java	trialDivision	n	int	0	RET	1 == $
1072	155	8	SmallPrimes.java	millerRabinPrimeTest	n	int	0	DEF	$ >= 2047
1073	158	8	SmallPrimes.java	millerRabinPrimeTest	n	int	0	DEF	$ >= 1373653
1074	161	8	SmallPrimes.java	millerRabinPrimeTest	n	int	0	DEF	$ >= 25326001
14903	167	8	SmallPrimes.java	millerRabinPrimeTest	i	int	0	NIL-FOR	$ < t
14903	167	8	SmallPrimes.java	millerRabinPrimeTest	t	int	0	NIL-FOR	i < $
1075	171	12	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	$ != nMinus1
1075	171	12	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	1 != $
1075	171	12	SmallPrimes.java	millerRabinPrimeTest	nMinus1	int	0	RET	y != $
14904	173	16	SmallPrimes.java	millerRabinPrimeTest	j	int	0	NIL-WHILE	$ <= s - 1
14904	173	16	SmallPrimes.java	millerRabinPrimeTest	y	int	0	NIL-WHILE	nMinus1 != $
14904	173	16	SmallPrimes.java	millerRabinPrimeTest	nMinus1	int	0	NIL-WHILE	$ != y
14904	173	16	SmallPrimes.java	millerRabinPrimeTest	s	int	0	NIL-WHILE	j <= $ - 1
1076	176	20	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	1 == $
1077	181	16	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	nMinus1 != $
1077	181	16	SmallPrimes.java	millerRabinPrimeTest	nMinus1	int	0	RET	$ != y
4013	75	8	SmoothingPolynomialBicubicSplineInterpolator.java	SmoothingPolynomialBicubicSplineInterpolator	xDegree	int	0	NotPositiveException	$ < 0
4014	78	8	SmoothingPolynomialBicubicSplineInterpolator.java	SmoothingPolynomialBicubicSplineInterpolator	yDegree	int	0	NotPositiveException	$ < 0
4015	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
4015	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
4015	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
4015	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
4015	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
4015	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
4016	104	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
4016	104	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
4016	104	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
17054	111	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
17054	111	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
4017	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
4017	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
4017	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
4017	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
17055	123	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
17055	123	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
17056	125	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
17056	125	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
17057	137	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
17057	137	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
17058	139	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
17058	139	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
17059	147	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
17059	147	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
17060	149	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
17060	149	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
17061	161	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
17061	161	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
17062	163	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
17062	163	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
3188	93	8	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	OutOfRangeException	$ < 1
3188	93	8	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	OutOfRangeException	$ > MAX_DIMENSION
3189	99	8	SobolSequenceGenerator.java	SobolSequenceGenerator	is	InputStream	0	MathInternalError	$ == null
3190	160	8	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	NotStrictlyPositiveException	$ < 1
3191	172	8	SobolSequenceGenerator.java	SobolSequenceGenerator	lastDimension	int	0	OutOfRangeException	$ < dimension
3191	172	8	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	OutOfRangeException	lastDimension < $
16640	191	8	SobolSequenceGenerator.java	initFromStream	i	int	0	NIL-FOR	$ <= BITS
16641	206	12	SobolSequenceGenerator.java	initFromStream	line	String	0	NIL-WHILE	($ = reader.readLine()) != null
16641	206	12	SobolSequenceGenerator.java	initFromStream	reader	BufferedReader	0	NIL-WHILE	(line = $.readLine()) != null
3192	210	20	SobolSequenceGenerator.java	initFromStream	THIS	SobolSequenceGenerator	0	DEF	dim <= $.dimension
3192	210	20	SobolSequenceGenerator.java	initFromStream	dim	int	0	DEF	$ <= dimension
3192	210	20	SobolSequenceGenerator.java	initFromStream	dim	int	0	DEF	$ >= 2
16642	214	24	SobolSequenceGenerator.java	initFromStream	i	int	0	NIL-FOR	$ <= s
16642	214	24	SobolSequenceGenerator.java	initFromStream	s	int	0	NIL-FOR	i <= $
3193	220	20	SobolSequenceGenerator.java	initFromStream	THIS	SobolSequenceGenerator	0	RET	dim > $.dimension
3193	220	20	SobolSequenceGenerator.java	initFromStream	dim	int	0	RET	$ > dimension
16643	246	8	SobolSequenceGenerator.java	initDirectionVector	i	int	0	NIL-FOR	$ <= s
16643	246	8	SobolSequenceGenerator.java	initDirectionVector	s	int	0	NIL-FOR	i <= $
16644	249	8	SobolSequenceGenerator.java	initDirectionVector	i	int	0	NIL-FOR	$ <= BITS
16645	251	12	SobolSequenceGenerator.java	initDirectionVector	k	int	0	NIL-FOR	$ <= s - 1
16645	251	12	SobolSequenceGenerator.java	initDirectionVector	s	int	0	NIL-FOR	k <= $ - 1
3194	260	8	SobolSequenceGenerator.java	nextVector	THIS	SobolSequenceGenerator	0	RET	$.count == 0
16646	268	8	SobolSequenceGenerator.java	nextVector	value	int	0	NIL-WHILE	($ & 1) == 1
16647	273	8	SobolSequenceGenerator.java	nextVector	THIS	SobolSequenceGenerator	0	NIL-FOR	i < $.dimension
16647	273	8	SobolSequenceGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
3195	291	8	SobolSequenceGenerator.java	skipTo	index	int	1	DEF	$ == 0
16648	297	12	SobolSequenceGenerator.java	skipTo	THIS	SobolSequenceGenerator	0	NIL-FOR	j < $.dimension
16648	297	12	SobolSequenceGenerator.java	skipTo	j	int	0	NIL-FOR	$ < dimension
16649	299	16	SobolSequenceGenerator.java	skipTo	k	int	0	NIL-FOR	$ <= BITS
3196	301	20	SobolSequenceGenerator.java	skipTo	shift	long	0	DEF	$ == 0
15184	97	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rows
15184	97	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rows
15185	98	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columns
15185	98	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columns
1405	111	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1405	111	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
1406	157	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1406	157	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
1407	170	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1407	170	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
15286	120	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
15286	120	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
15286	120	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
15287	159	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1484	163	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1484	163	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
15288	182	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1485	191	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
15289	196	12	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < n
15289	196	12	SparseFieldVector.java	append	n	int	0	NIL-FOR	i < $
15290	223	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
15291	236	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
15292	249	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
1486	285	8	SparseFieldVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
15293	293	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1487	296	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
1487	296	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
1487	296	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
1487	296	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
15294	310	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
15294	310	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
15295	326	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
15296	340	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
15296	340	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
15297	354	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
15298	380	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
15299	383	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
1488	393	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
15300	399	12	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
15301	403	16	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < n
15301	403	16	SparseFieldVector.java	outerProduct	n	int	0	NIL-FOR	col < $
15302	423	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
15302	423	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
15303	443	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < n
15303	443	8	SparseFieldVector.java	setSubVector	n	int	0	NIL-FOR	i < $
15304	460	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1489	463	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1489	463	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1490	475	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
15305	481	12	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < n
15305	481	12	SparseFieldVector.java	subtract	n	int	0	NIL-FOR	i < $
1491	482	16	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
1491	482	16	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
15306	496	8	SparseFieldVector.java	toArray	iter	Iterator	0	NIL-WHILE	$.hasNext()
1492	510	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	OutOfRangeException	index >= $.getDimension()
1492	510	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1492	510	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1493	523	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DimensionMismatchException	$.getDimension() != n
1493	523	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	getDimension() != $
1494	530	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
15307	537	12	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < n
15307	537	12	SparseFieldVector.java	add	n	int	0	NIL-FOR	i < $
15308	552	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1495	565	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
1495	565	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
1496	569	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector<?>
1497	576	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
1498	577	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
1498	577	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
1499	580	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
1499	580	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
1500	583	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
1500	583	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
15309	588	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1501	591	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
1501	591	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
15310	596	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1502	599	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
1502	599	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
1502	599	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
2482	165	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2482	165	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2482	165	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2483	167	15	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2483	167	15	SpearmansCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
2484	173	12	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	0	DEF	$.rankingAlgorithm instanceof NaturalRanking
2484	173	12	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	0	DEF	$.NaNStrategy.REMOVED == ((NaturalRanking) $.rankingAlgorithm).getNanStrategy()
2485	197	8	SpearmansCorrelation.java	rankTransform	THIS	SpearmansCorrelation	0	DEF	((NaturalRanking) $.rankingAlgorithm).getNanStrategy() == $.NaNStrategy.REMOVED
2485	197	8	SpearmansCorrelation.java	rankTransform	THIS	SpearmansCorrelation	0	DEF	$.rankingAlgorithm instanceof NaturalRanking
16196	200	12	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
16196	200	12	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
2486	205	12	SpearmansCorrelation.java	rankTransform	nanPositions	Set<Integer>	0	DEF	$.isEmpty()
16197	208	16	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < transformed.getColumnDimension()
16197	208	16	SpearmansCorrelation.java	rankTransform	transformed	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
2487	214	8	SpearmansCorrelation.java	rankTransform	transformed	RealMatrix	0	DEF	$ == null
16198	218	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < transformed.getColumnDimension()
16198	218	8	SpearmansCorrelation.java	rankTransform	transformed	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
16199	233	8	SpearmansCorrelation.java	getNaNPositions	THIS	SpearmansCorrelation	0	NIL-FOR	i < input.$.length
16199	233	8	SpearmansCorrelation.java	getNaNPositions	i	int	0	NIL-FOR	$ < input.length
16199	233	8	SpearmansCorrelation.java	getNaNPositions	input	double[]	0	NIL-FOR	i < $.length
2488	234	12	SpearmansCorrelation.java	getNaNPositions	i	int	0	DEF	Double.isNaN(input[$])
2488	234	12	SpearmansCorrelation.java	getNaNPositions	input	double[]	0	DEF	Double.isNaN($[i])
2489	249	8	SpearmansCorrelation.java	removeValues	indices	Set<Integer>	0	RET	$.isEmpty()
16200	253	8	SpearmansCorrelation.java	removeValues	THIS	SpearmansCorrelation	0	NIL-FOR	i < input.$.length
16200	253	8	SpearmansCorrelation.java	removeValues	i	int	0	NIL-FOR	$ < input.length
16200	253	8	SpearmansCorrelation.java	removeValues	input	double[]	0	NIL-FOR	i < $.length
2490	254	12	SpearmansCorrelation.java	removeValues	i	int	0	DEF	indices.contains($)
2490	254	12	SpearmansCorrelation.java	removeValues	indices	Set<Integer>	0	DEF	$.contains(i)
747	246	8	SphericalCoordinates.java	computeJacobian	THIS	SphericalCoordinates	0	DEF	$.jacobian == null
748	280	8	SphericalCoordinates.java	computeHessians	THIS	SphericalCoordinates	0	DEF	$.rHessian == null
3914	70	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3914	70	8	SplineInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3914	70	8	SplineInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3915	74	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	NumberIsTooSmallException	x.$.length < 3
3915	74	8	SplineInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 3
16963	86	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
16963	86	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
16964	95	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
16964	95	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
16965	110	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
16966	118	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
16966	118	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
3134	61	8	StableRandomGenerator.java	StableRandomGenerator	generator	RandomGenerator	0	NullArgumentException	$ == null
3135	65	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ > 0d
3135	65	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ <= 2d
3136	70	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ >= -1d
3136	70	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ <= 1d
3137	78	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	1	DEF	$ < 2d
3137	78	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	1	DEF	$ != 0d
3138	96	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	RET	$.alpha == 2d
3139	103	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.beta == 0d
3140	105	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.alpha == 1d
3141	117	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	FastMath.abs($.alpha - 1d) > 1e-8
3142	128	16	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	DEF	$.alpha != 1d
2520	703	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2520	703	8	StatUtils.java	sumDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2520	703	8	StatUtils.java	sumDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2521	706	8	StatUtils.java	sumDifference	n	int	0	NoDataException	$ <= 0
16216	710	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
16216	710	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
2522	752	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2522	752	8	StatUtils.java	varianceDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2522	752	8	StatUtils.java	varianceDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2523	755	8	StatUtils.java	varianceDifference	n	int	0	NumberIsTooSmallException	$ < 2
16217	758	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
16217	758	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
16218	777	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
16218	777	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
16218	777	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
16219	788	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
16219	788	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
16219	788	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
2379	134	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
2379	134	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
2380	137	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
4036	65	8	StepFunction.java	StepFunction	x	double[]	0	NullArgumentException	$ == null
4036	65	8	StepFunction.java	StepFunction	y	double[]	0	NullArgumentException	$ == null
4037	69	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	x.$.length == 0
4037	69	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	y.$.length == 0
4037	69	8	StepFunction.java	StepFunction	x	double[]	0	NoDataException	$.length == 0
4037	69	8	StepFunction.java	StepFunction	y	double[]	0	NoDataException	$.length == 0
4038	73	8	StepFunction.java	StepFunction	THIS	StepFunction	0	DimensionMismatchException	y.$.length != x.$.length
4038	73	8	StepFunction.java	StepFunction	x	double[]	0	DimensionMismatchException	y.length != $.length
4038	73	8	StepFunction.java	StepFunction	y	double[]	0	DimensionMismatchException	$.length != x.length
4039	87	8	StepFunction.java	value	index	int	1	DEF	$ < -1
4040	90	15	StepFunction.java	value	index	int	1	DEF	$ >= 0
3397	206	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
3398	215	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
3399	224	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	Precision.equals(nextTime, $.lastTime, 1)
3399	224	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.mode == $.StepNormalizerMode.MULTIPLES
3399	224	8	StepNormalizer.java	handleStep	nextTime	double	0	DEF	Precision.equals($, lastTime, 1)
16750	231	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
3400	243	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
3401	250	12	StepNormalizer.java	handleStep	addLast	boolean	0	DEF	$
3402	278	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.firstTime == $.lastTime
3402	278	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.bounds.firstIncluded()
2472	128	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	0	NumberIsTooSmallException	$.n < 2
2473	132	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	1	RET	$.biasCorrected
16176	82	8	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
16176	82	8	StorelessCovariance.java	initializeMatrix	i	int	0	NIL-FOR	$ < dimension
16177	83	12	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
16177	83	12	StorelessCovariance.java	initializeMatrix	j	int	0	NIL-FOR	$ < dimension
2470	151	8	StorelessCovariance.java	increment	THIS	StorelessCovariance	0	DimensionMismatchException	length != $.dimension
2470	151	8	StorelessCovariance.java	increment	length	int	0	DimensionMismatchException	$ != dimension
16178	157	8	StorelessCovariance.java	increment	i	int	0	NIL-FOR	$ < length
16178	157	8	StorelessCovariance.java	increment	length	int	0	NIL-FOR	i < $
16179	158	12	StorelessCovariance.java	increment	j	int	0	NIL-FOR	$ < length
16179	158	12	StorelessCovariance.java	increment	length	int	0	NIL-FOR	j < $
2471	175	8	StorelessCovariance.java	append	THIS	StorelessCovariance	0	DimensionMismatchException	sc.$.dimension != $.dimension
2471	175	8	StorelessCovariance.java	append	sc	StorelessCovariance	0	DimensionMismatchException	$.dimension != dimension
16180	181	8	StorelessCovariance.java	append	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
16180	181	8	StorelessCovariance.java	append	i	int	0	NIL-FOR	$ < dimension
16181	182	12	StorelessCovariance.java	append	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
16181	182	12	StorelessCovariance.java	append	j	int	0	NIL-FOR	$ < dimension
16182	207	8	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
16182	207	8	StorelessCovariance.java	getData	i	int	0	NIL-FOR	$ < dimension
16183	208	12	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
16183	208	12	StorelessCovariance.java	getData	j	int	0	NIL-FOR	$ < dimension
749	121	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
822	125	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
823	159	8	SubLine.java	side	crossing	Vector2D	0	RET	$ == null
824	180	8	SubLine.java	split	crossing	Vector2D	0	RET	$ == null
660	60	8	SubPlane.java	side	inter	Line	0	RET	$ == null
661	77	8	SubPlane.java	side	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
661	77	8	SubPlane.java	side	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
662	103	8	SubPlane.java	split	inter	Line	0	RET	$ == null
663	115	8	SubPlane.java	split	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
663	115	8	SubPlane.java	split	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
2247	124	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length, true)
2247	124	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2247	124	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2247	124	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
16108	126	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16108	126	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16108	126	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2248	163	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, weights, begin, length, true)
2248	163	8	Sum.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
2248	163	8	Sum.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
2248	163	8	Sum.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
2248	163	8	Sum.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
16109	165	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16109	165	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16109	165	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2249	135	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length, true)
2249	135	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2249	135	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2249	135	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
16110	137	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16110	137	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16110	137	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2246	123	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length, true)
2246	123	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2246	123	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2246	123	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
16107	125	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16107	125	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16107	125	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2317	159	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2318	162	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2319	165	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl != $.geoMean
2320	218	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
2321	219	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
2322	354	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2323	357	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2324	371	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
2324	371	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
2325	374	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
2326	645	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	MathIllegalStateException	$.n > 0
2327	684	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getVarianceImpl() instanceof Variance
2328	689	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.meanImpl instanceof Mean
2328	689	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.meanImpl instanceof Mean
2329	694	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
2330	702	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
2330	702	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
2331	707	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
2331	707	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
2332	712	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
2332	712	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
2333	717	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
2333	717	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
2334	722	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
2334	722	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
2335	727	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
2335	727	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
2336	732	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
2336	732	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
2337	737	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
2337	737	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
1359	1168	8	SymmLQ.java	solveInPlace	state	State	0	RET	$.bEqualsNullVector()
1360	1177	8	SymmLQ.java	solveInPlace	earlyStop	boolean	0	DEF	$
15122	1178	12	SymmLQ.java	solveInPlace	state	State	0	NIL-DOWHILE	$.hasConverged()
1154	91	8	TDistribution.java	TDistribution	degreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1155	122	8	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ == 0
1156	130	12	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
1157	158	8	TDistribution.java	getNumericalMean	df	double	0	RET	$ > 1
1158	179	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 2
1159	183	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 1
1159	183	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ <= 2
2403	1133	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ > 0.5
2403	1133	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ <= 0
2404	1150	8	TTest.java	checkSampleData	data	double[]	0	NullArgumentException	$ == null
2405	1153	8	TTest.java	checkSampleData	THIS	TTest	0	NumberIsTooSmallException	data.$.length < 2
2405	1153	8	TTest.java	checkSampleData	data	double[]	0	NumberIsTooSmallException	$.length < 2
2406	1171	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NullArgumentException	$ == null
2407	1174	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NumberIsTooSmallException	$.getN() < 2
2299	90	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
3506	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	1	DEF	$.previousState != null
3506	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
16850	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16850	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
16851	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
16851	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3212	72	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	MathIllegalArgumentException	population.getPopulationSize() < $.arity
3212	72	8	TournamentSelection.java	tournament	population	ListPopulation	0	MathIllegalArgumentException	$.getPopulationSize() < this.arity
16659	86	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
16659	86	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
16719	62	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
16719	62	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
16719	62	8	TransformUtils.java	scaleArray	f	double[]	0	NIL-FOR	i < $.length
16720	78	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
16720	78	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
16720	78	8	TransformUtils.java	scaleArray	f	Complex[]	0	NIL-FOR	i < $.length
16721	102	8	TransformUtils.java	createRealImaginaryArray	THIS	TransformUtils	0	NIL-FOR	i < dataC.$.length
16721	102	8	TransformUtils.java	createRealImaginaryArray	i	int	0	NIL-FOR	$ < dataC.length
16721	102	8	TransformUtils.java	createRealImaginaryArray	dataC	Complex[]	0	NIL-FOR	i < $.length
3365	127	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataRI.$.length != 2
3365	127	8	TransformUtils.java	createComplexArray	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
3366	132	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataR.$.length != dataI.$.length
3366	132	8	TransformUtils.java	createComplexArray	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
3366	132	8	TransformUtils.java	createComplexArray	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
16722	138	8	TransformUtils.java	createComplexArray	i	int	0	NIL-FOR	$ < n
16722	138	8	TransformUtils.java	createComplexArray	n	int	0	NIL-FOR	i < $
3367	157	8	TransformUtils.java	exactLog2	index	int	0	MathIllegalArgumentException	$ < 0
102	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
102	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
103	148	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
104	159	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
104	159	8	TransformerMap.java	equals	other	Object	0	RET	this == $
105	162	8	TransformerMap.java	equals	other	Object	0	RET	$ instanceof TransformerMap
106	164	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
106	164	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
107	167	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
107	167	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
108	171	16	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
108	171	16	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
4280	66	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
4281	88	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
4282	120	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
17214	135	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
17214	135	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
4283	155	12	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	i >= $.getMinimalIterationCount()
4283	155	12	TrapezoidIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
4284	159	16	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4284	159	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4284	159	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4284	159	16	TrapezoidIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
1351	63	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1352	86	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
1353	98	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
15108	103	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
1354	106	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
1354	106	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
15109	110	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
15109	110	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
15110	113	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
15110	113	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
15111	115	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
15111	115	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
15112	120	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
15112	120	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
1355	139	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
15113	142	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
15113	142	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
1356	144	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
1357	147	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1357	147	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
15114	195	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
15114	195	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
15115	201	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
15115	201	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1358	207	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
15116	218	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
15116	218	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
15117	222	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
15117	222	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
15118	232	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
15118	232	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
15119	238	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
15119	238	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
15120	244	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
15120	244	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
15121	246	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
15121	246	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1164	82	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooLargeException	$ >= b
1164	82	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	a >= $
1165	87	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooSmallException	c < $
1165	87	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooSmallException	$ < a
1166	91	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooLargeException	$ > b
1166	91	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	c > $
1167	142	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.a
1167	142	8	TriangularDistribution.java	density	x	double	0	RET	$ < a
1168	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.a <= x
1168	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.c
1168	145	8	TriangularDistribution.java	density	x	double	0	RET	a <= $
1168	145	8	TriangularDistribution.java	density	x	double	0	RET	$ < c
1169	150	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x == $.c
1169	150	8	TriangularDistribution.java	density	x	double	0	RET	$ == c
1170	153	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.c < x
1170	153	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x <= $.b
1170	153	8	TriangularDistribution.java	density	x	double	0	RET	c < $
1170	153	8	TriangularDistribution.java	density	x	double	0	RET	$ <= b
1171	175	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.a
1171	175	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < a
1172	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.a <= x
1172	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.c
1172	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	a <= $
1172	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < c
1173	183	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x == $.c
1173	183	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ == c
1174	186	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.c < x
1174	186	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x <= $.b
1174	186	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	c < $
1174	186	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ <= b
1175	262	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0
1175	262	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1
1176	265	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
1177	268	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1178	271	8	TriangularDistribution.java	inverseCumulativeProbability	THIS	TriangularDistribution	0	RET	p < ($.c - $.a) / ($.b - $.a)
1178	271	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ < (c - a) / (b - a)
3918	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3918	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	z.$.length == 0
3918	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3918	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3918	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3918	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	z	double[]	0	NoDataException	$.length == 0
3918	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$.length == 0
3918	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$[0].length == 0
3919	158	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3919	158	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3919	158	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	xLen != $.length
3920	161	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3920	161	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3920	161	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	xLen != $.length
3921	164	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3921	164	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3921	164	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3922	167	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdZ.$.length
3922	167	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdZ.length
3922	167	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3923	170	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3923	170	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3923	170	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3924	173	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdZ.$.length
3924	173	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdZ.length
3924	173	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3925	176	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdYdZ.$.length
3925	176	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdYdZ.length
3925	176	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3926	179	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d3FdXdYdZ.$.length
3926	179	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d3FdXdYdZ.length
3926	179	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
16969	196	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
16969	196	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3927	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3927	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3927	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3927	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3928	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3928	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3928	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3928	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3929	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3929	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3929	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3929	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3930	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i].length != yLen
3930	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$].length != yLen
3930	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdZ[i].length != $
3930	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3931	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3931	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3931	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3931	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3932	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i].length != yLen
3932	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$].length != yLen
3932	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdZ[i].length != $
3932	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3933	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i].length != yLen
3933	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$].length != yLen
3933	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdYdZ[i].length != $
3933	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3934	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i].length != yLen
3934	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$].length != yLen
3934	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d3FdXdYdZ[i].length != $
3934	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
16970	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
16970	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3935	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i][j].length != zLen
3935	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	f[i][$].length != zLen
3935	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$][j].length != zLen
3935	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	f[i][j].length != $
3935	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3936	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i][j].length != zLen
3936	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdX[i][$].length != zLen
3936	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$][j].length != zLen
3936	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdX[i][j].length != $
3936	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3937	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i][j].length != zLen
3937	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdY[i][$].length != zLen
3937	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$][j].length != zLen
3937	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdY[i][j].length != $
3937	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3938	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i][j].length != zLen
3938	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdZ[i][$].length != zLen
3938	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$][j].length != zLen
3938	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdZ[i][j].length != $
3938	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3939	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i][j].length != zLen
3939	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdY[i][$].length != zLen
3939	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$][j].length != zLen
3939	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdY[i][j].length != $
3939	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3940	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i][j].length != zLen
3940	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdZ[i][$].length != zLen
3940	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$][j].length != zLen
3940	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdZ[i][j].length != $
3940	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3941	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i][j].length != zLen
3941	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdYdZ[i][$].length != zLen
3941	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$][j].length != zLen
3941	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdYdZ[i][j].length != $
3941	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3942	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != zLen
3942	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d3FdXdYdZ[i][$].length != zLen
3942	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$][j].length != zLen
3942	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != $
3942	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
16971	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	k	int	0	NIL-FOR	$ < lastK
16971	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastK	int	0	NIL-FOR	k < $
3943	309	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
3944	313	8	TricubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
3945	317	8	TricubicSplineInterpolatingFunction.java	value	k	int	0	OutOfRangeException	$ == -1
3946	335	8	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
3946	335	8	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
16972	340	8	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
16972	340	8	TricubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
3947	341	12	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
3947	341	12	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
3947	341	12	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
16973	401	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < sz
16973	401	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	i < $
16974	404	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < sz
16974	404	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	j < $
16975	430	8	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	i	int	0	NIL-FOR	$ < N
16976	431	12	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	j	int	0	NIL-FOR	$ < N
16977	432	16	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	k	int	0	NIL-FOR	$ < N
3948	449	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3948	449	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3949	452	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
3949	452	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
3950	455	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ < 0
3950	455	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ > 1
16978	472	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	NIL-FOR	$ < N
16979	473	12	TricubicSplineInterpolatingFunction.java	value	j	int	0	NIL-FOR	$ < N
16980	474	16	TricubicSplineInterpolatingFunction.java	value	k	int	0	NIL-FOR	$ < N
3993	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3993	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3993	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	zval.$.length == 0
3993	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3993	42	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3993	42	8	TricubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3993	42	8	TricubicSplineInterpolator.java	interpolate	zval	double[]	0	NoDataException	$.length == 0
3993	42	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	NoDataException	$.length == 0
3994	45	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3994	45	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3994	45	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	xval.length != $.length
17030	62	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
17030	62	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3995	63	12	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3995	63	12	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3995	63	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3995	63	12	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i].length != yLen
17031	67	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
17031	67	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
3996	68	16	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i][j].length != zLen
3996	68	16	TricubicSplineInterpolator.java	interpolate	j	int	0	DimensionMismatchException	fval[i][$].length != zLen
3996	68	16	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$][j].length != zLen
3996	68	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	DimensionMismatchException	fval[i][j].length != $
3996	68	16	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
17032	72	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
17032	72	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
17033	85	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
17033	85	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
17034	92	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
17034	92	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
17035	99	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
17035	99	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
17036	107	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
17036	107	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
17037	109	12	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
17037	109	12	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
17038	111	16	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
17038	111	16	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
17039	123	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
17039	123	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
17040	125	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
17040	125	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
17041	127	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
17041	127	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
17042	137	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
17042	137	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
17043	139	12	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
17043	139	12	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
17044	141	16	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
17044	141	16	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
17045	150	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
17045	150	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
17046	153	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
17046	153	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
17047	156	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
17047	156	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
3187	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != standardDeviation.$.length
3187	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != standardDeviation.length
3187	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DimensionMismatchException	mean.length != $.length
16639	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
16639	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
16639	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
3213	64	8	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ > 1.0d
3213	64	8	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ < 0.0d
3214	90	8	UniformCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3214	90	8	UniformCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3215	107	8	UniformCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3215	107	8	UniformCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
16660	120	8	UniformCrossover.java	mate	index	int	0	NIL-FOR	$ < length
16660	120	8	UniformCrossover.java	mate	length	int	0	NIL-FOR	index < $
3216	122	12	UniformCrossover.java	mate	THIS	UniformCrossover	1	DEF	random.nextDouble() < $.ratio
3216	122	12	UniformCrossover.java	mate	random	RandomGenerator	1	DEF	$.nextDouble() < ratio
1189	72	8	UniformIntegerDistribution.java	UniformIntegerDistribution	lower	int	0	NumberIsTooLargeException	$ >= upper
1189	72	8	UniformIntegerDistribution.java	UniformIntegerDistribution	upper	int	0	NumberIsTooLargeException	lower >= $
1190	83	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1190	83	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1190	83	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ > upper
1190	83	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ < lower
1191	91	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1191	91	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ < lower
1192	94	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1192	94	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ > upper
1193	120	8	UniformRealDistribution.java	UniformRealDistribution	lower	double	0	NumberIsTooLargeException	$ >= upper
1193	120	8	UniformRealDistribution.java	UniformRealDistribution	upper	double	0	NumberIsTooLargeException	lower >= $
1194	132	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x > $.upper
1194	132	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x < $.lower
1194	132	8	UniformRealDistribution.java	density	x	double	0	RET	$ > upper
1194	132	8	UniformRealDistribution.java	density	x	double	0	RET	$ < lower
1195	140	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x <= $.lower
1195	140	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ <= lower
1196	143	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x >= $.upper
1196	143	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ >= upper
1197	152	8	UniformRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1197	152	8	UniformRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
16615	68	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
16615	68	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
16616	75	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
16616	75	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
1860	77	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	optimizer	BaseUnivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1860	77	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	generator	RandomGenerator	0	NullArgumentException	$ == null
1861	81	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1862	135	8	UnivariateMultiStartOptimizer.java	getOptima	THIS	UnivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
15789	158	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
15789	158	8	UnivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1863	174	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
2680	100	12	UnivariateOptimizer.java	parseOptimizationData	THIS	UnivariateOptimizer	0	DEF	$.data instanceof SearchInterval
2681	107	12	UnivariateOptimizer.java	parseOptimizationData	THIS	UnivariateOptimizer	0	DEF	$.data instanceof UnivariateObjectiveFunction
2682	111	12	UnivariateOptimizer.java	parseOptimizationData	THIS	UnivariateOptimizer	0	DEF	$.data instanceof GoalType
3987	88	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NumberIsTooSmallException	xval.$.length < $.extend
3987	88	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NumberIsTooSmallException	$.length < extend
17018	98	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < xval.$.length
17018	98	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xval.length
17018	98	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NIL-FOR	i < $.length
17019	105	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < $.extend
17019	105	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < extend
4052	53	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
4053	78	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
4054	107	8	UnivariateSolverUtils.java	forceSide	THIS	UnivariateSolverUtils	0	RET	allowedSolution == $.AllowedSolution.ANY_SIDE
4054	107	8	UnivariateSolverUtils.java	forceSide	allowedSolution	AllowedSolution	0	RET	$ == AllowedSolution.ANY_SIDE
17074	120	8	UnivariateSolverUtils.java	forceSide	remainingEval	int	0	NIL-WHILE	$ > 0
4055	122	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ >= 0
4055	122	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ <= 0
4055	122	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ <= 0
4055	122	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ >= 0
4056	130	12	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ < fHi
4056	130	12	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo < $
4057	132	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ >= 0
4058	137	19	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ > fHi
4058	137	19	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo > $
4059	139	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ <= 0
4060	151	12	UnivariateSolverUtils.java	forceSide	changeLo	boolean	0	DEF	$
4061	158	12	UnivariateSolverUtils.java	forceSide	changeHi	boolean	0	DEF	$
4062	260	8	UnivariateSolverUtils.java	bracket	function	UnivariateFunction	0	NullArgumentException	$ == null
4063	263	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NotStrictlyPositiveException	$ <= 0
17075	274	8	UnivariateSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
17075	274	8	UnivariateSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
17075	274	8	UnivariateSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
17075	274	8	UnivariateSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
17075	274	8	UnivariateSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
17075	274	8	UnivariateSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
17075	274	8	UnivariateSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
17075	274	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
4064	284	8	UnivariateSolverUtils.java	bracket	fa	double	0	NoBracketingException	$ * fb > 0.0
4064	284	8	UnivariateSolverUtils.java	bracket	fb	double	0	NoBracketingException	fa * $ > 0.0
4065	321	8	UnivariateSolverUtils.java	isBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
4066	353	8	UnivariateSolverUtils.java	verifyInterval	lower	double	0	NumberIsTooLargeException	$ >= upper
4066	353	8	UnivariateSolverUtils.java	verifyInterval	upper	double	0	NumberIsTooLargeException	lower >= $
4067	392	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
4068	396	8	UnivariateSolverUtils.java	verifyBracketing	THIS	UnivariateSolverUtils	0	NoBracketingException	$.isBracketing(function, lower, upper)
4068	396	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NoBracketingException	isBracketing($, lower, upper)
4068	396	8	UnivariateSolverUtils.java	verifyBracketing	lower	double	0	NoBracketingException	isBracketing(function, $, upper)
4068	396	8	UnivariateSolverUtils.java	verifyBracketing	upper	double	0	NoBracketingException	isBracketing(function, lower, $)
16650	159	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
16650	159	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
16650	159	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
16651	177	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
16651	177	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
3197	291	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
3198	308	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
3199	383	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution == null
3199	383	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution.getBinStats().size() == 0
3200	411	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
3201	414	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
3201	414	8	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
3202	418	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
3202	418	12	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
2252	171	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
2253	181	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
2254	183	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
2255	186	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
2256	206	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
2257	229	8	Variance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2258	261	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
2258	261	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2258	261	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
2258	261	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
2259	263	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2260	265	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
2261	321	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights,begin, length)
2261	321	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights,begin, length)
2261	321	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $,begin, length)
2261	321	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights,$, length)
2261	321	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights,begin, $)
2262	323	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2263	325	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
2264	408	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
2264	408	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2264	408	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
2264	408	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
2265	409	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2266	411	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
16113	415	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16113	415	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16113	415	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2267	421	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
2268	511	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights, begin, length)
2268	511	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
2268	511	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
2268	511	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
2268	511	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
2269	512	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2270	514	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
16114	518	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16114	518	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16114	518	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
16115	525	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
16115	525	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
16115	525	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2271	529	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
803	188	8	Vector1D.java	normalize	s	double	0	MathArithmeticException	$ == 0
804	305	8	Vector1D.java	equals	THIS	Vector1D	0	RET	$ == other
804	305	8	Vector1D.java	equals	other	Object	0	RET	this == $
805	309	8	Vector1D.java	equals	other	Object	0	RET	$ instanceof Vector1D
806	311	12	Vector1D.java	equals	rhs	Vector1D	0	RET	$.isNaN()
807	329	8	Vector1D.java	hashCode	THIS	Vector1D	0	RET	$.isNaN()
799	118	8	Vector1DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
800	130	8	Vector1DFormat.java	parse	coordinates	double[]	0	RET	$ == null
862	80	8	Vector2D.java	Vector2D	THIS	Vector2D	0	DimensionMismatchException	v.$.length != 2
862	80	8	Vector2D.java	Vector2D	v	double[]	0	DimensionMismatchException	$.length != 2
863	226	8	Vector2D.java	normalize	s	double	0	MathArithmeticException	$ == 0
864	347	8	Vector2D.java	equals	THIS	Vector2D	0	RET	$ == other
864	347	8	Vector2D.java	equals	other	Object	0	RET	this == $
865	351	8	Vector2D.java	equals	other	Object	0	RET	$ instanceof Vector2D
866	353	12	Vector2D.java	equals	rhs	Vector2D	0	RET	$.isNaN()
867	371	8	Vector2D.java	hashCode	THIS	Vector2D	0	RET	$.isNaN()
817	121	8	Vector2DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
818	133	8	Vector2DFormat.java	parse	coordinates	double[]	0	RET	$ == null
750	108	8	Vector3D.java	Vector3D	THIS	Vector3D	0	DimensionMismatchException	v.$.length != 3
750	108	8	Vector3D.java	Vector3D	v	double[]	0	DimensionMismatchException	$.length != 3
751	298	8	Vector3D.java	normalize	s	double	0	MathArithmeticException	$ == 0
752	322	8	Vector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
753	326	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	FastMath.abs($.x) <= threshold
753	326	8	Vector3D.java	orthogonal	threshold	double	1	RET	FastMath.abs(x) <= $
754	329	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	FastMath.abs($.y) <= threshold
754	329	15	Vector3D.java	orthogonal	threshold	double	0	RET	FastMath.abs(y) <= $
755	352	8	Vector3D.java	angle	normProduct	double	0	MathArithmeticException	$ == 0
756	358	8	Vector3D.java	angle	dot	double	0	RET	$ > threshold
756	358	8	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
756	358	8	Vector3D.java	angle	threshold	double	0	RET	dot > $
756	358	8	Vector3D.java	angle	threshold	double	0	RET	dot < -$
757	361	12	Vector3D.java	angle	dot	double	0	RET	$ >= 0
758	414	8	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
758	414	8	Vector3D.java	equals	other	Object	0	RET	this == $
759	418	8	Vector3D.java	equals	other	Object	0	RET	$ instanceof Vector3D
760	420	12	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
761	438	8	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
664	133	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
665	150	8	Vector3DFormat.java	parse	coordinates	double[]	0	RET	$ == null
14875	205	8	VectorFormat.java	format	THIS	VectorFormat	0	NIL-FOR	i < coordinates.$.length
14875	205	8	VectorFormat.java	format	i	int	0	NIL-FOR	$ < coordinates.length
14875	205	8	VectorFormat.java	format	coordinates	double	0	NIL-FOR	i < $.length
655	206	12	VectorFormat.java	format	i	int	0	DEF	$ > 0
656	250	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
656	250	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
656	250	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
14876	254	8	VectorFormat.java	parseCoordinates	i	int	0	NIL-FOR	$ < dimension
14876	254	8	VectorFormat.java	parseCoordinates	dimension	int	0	NIL-FOR	i < $
657	260	12	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
657	260	12	VectorFormat.java	parseCoordinates	i	int	0	RET	$ > 0
657	260	12	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
657	260	12	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
658	269	12	VectorFormat.java	parseCoordinates	c	Number	0	RET	$ == null
659	283	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
659	283	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
659	283	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
2282	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
2282	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
16120	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
16120	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
16120	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
16121	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
16121	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
2283	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
16122	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
16122	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
16123	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
16123	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
2284	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
2284	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
2285	139	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
2286	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
2286	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
2287	146	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
2287	146	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
2288	149	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
2288	149	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
2289	152	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
2289	152	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
16126	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
16126	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
2304	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
2304	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
16127	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
16127	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
16127	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
16128	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
16128	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
16128	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
2305	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
2305	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
2306	96	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
2307	100	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
2307	100	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
1119	114	8	WeibullDistribution.java	WeibullDistribution	alpha	double	0	NotStrictlyPositiveException	$ <= 0
1120	118	8	WeibullDistribution.java	WeibullDistribution	beta	double	0	NotStrictlyPositiveException	$ <= 0
1121	147	8	WeibullDistribution.java	density	x	double	0	RET	$ < 0
1122	167	8	WeibullDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
1123	184	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
1123	184	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
1124	186	15	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1125	188	16	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
1126	215	8	WeibullDistribution.java	getNumericalMean	THIS	WeibullDistribution	0	DEF	$.numericalMeanIsCalculated
1127	241	8	WeibullDistribution.java	getNumericalVariance	THIS	WeibullDistribution	0	DEF	$.numericalVarianceIsCalculated
3107	51	8	Weight.java	Weight	weight	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
2232	53	8	Weight.java	Weight	weight	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
2387	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2387	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2388	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	x.$.length == 0
2388	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	y.$.length == 0
2388	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2388	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
2389	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	DimensionMismatchException	y.$.length != x.$.length
2389	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	DimensionMismatchException	y.length != $.length
2389	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	DimensionMismatchException	$.length != x.length
16139	102	8	WilcoxonSignedRankTest.java	calculateDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < x.$.length
16139	102	8	WilcoxonSignedRankTest.java	calculateDifferences	i	int	0	NIL-FOR	$ < x.length
16139	102	8	WilcoxonSignedRankTest.java	calculateDifferences	x	double[]	0	NIL-FOR	i < $.length
2390	120	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NullArgumentException	$ == null
2391	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NoDataException	z.$.length == 0
2391	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NoDataException	$.length == 0
16140	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
16140	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	i	int	0	NIL-FOR	$ < z.length
16140	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NIL-FOR	i < $.length
16141	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
16141	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	NIL-FOR	$ < z.length
16141	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	NIL-FOR	i < $.length
2392	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	DEF	z[$] > 0
2392	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	DEF	$[i] > 0
16142	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	NIL-FOR	$ < m
16142	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	m	int	0	NIL-FOR	i < $
16143	219	12	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	NIL-FOR	$ < N
2393	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	DEF	((i >> $) & 1) == 1
2393	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	DEF	(($ >> j) & 1) == 1
2394	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	rankSum	int	0	DEF	$ >= Wmax
2394	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	Wmax	double	0	DEF	rankSum >= $
2395	314	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	0	NumberIsTooLargeException	$
2396	318	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	1	RET	$
1296	77	8	ZipfDistribution.java	ZipfDistribution	numberOfElements	int	0	NotStrictlyPositiveException	$ <= 0
1297	81	8	ZipfDistribution.java	ZipfDistribution	exponent	double	0	NotStrictlyPositiveException	$ <= 0
1298	110	8	ZipfDistribution.java	probability	THIS	ZipfDistribution	0	RET	x > $.numberOfElements
1298	110	8	ZipfDistribution.java	probability	x	int	0	RET	$ <= 0
1298	110	8	ZipfDistribution.java	probability	x	int	0	RET	$ > numberOfElements
1299	119	8	ZipfDistribution.java	cumulativeProbability	x	int	1	RET	$ <= 0
1300	121	15	ZipfDistribution.java	cumulativeProbability	THIS	ZipfDistribution	0	RET	x >= $.numberOfElements
1300	121	15	ZipfDistribution.java	cumulativeProbability	x	int	0	RET	$ >= numberOfElements
1301	139	8	ZipfDistribution.java	getNumericalMean	THIS	ZipfDistribution	0	DEF	$.numericalMeanIsCalculated
1302	173	8	ZipfDistribution.java	getNumericalVariance	THIS	ZipfDistribution	0	DEF	$.numericalVarianceIsCalculated
14974	207	8	ZipfDistribution.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
