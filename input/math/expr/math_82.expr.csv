id	line	column	filename	methodname	varname	vartype	else	return	right
435	62	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ > 1.0
435	62	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ < 0.0
436	97	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(lowerBound)) < 1E-6
436	97	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	lowerBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
437	100	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(upperBound)) < 1E-6
437	100	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	upperBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
467	61	8	AbstractDistribution.java	cumulativeProbability	x0	double	0	DEF	$ > x1
467	61	8	AbstractDistribution.java	cumulativeProbability	x1	double	0	DEF	x0 > $
39402	86	8	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
39402	86	8	AbstractEstimator.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
39403	89	12	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	j < $.cols
39403	89	12	AbstractEstimator.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1411	110	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	EstimationException	++$.costEvaluations > $.maxCostEval
39404	116	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
39404	116	8	AbstractEstimator.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
39405	140	8	AbstractEstimator.java	getRMS	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
39405	140	8	AbstractEstimator.java	getRMS	i	int	0	NIL-FOR	$ < wm.length
39405	140	8	AbstractEstimator.java	getRMS	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
39406	155	8	AbstractEstimator.java	getChiSquare	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
39406	155	8	AbstractEstimator.java	getChiSquare	i	int	0	NIL-FOR	$ < wm.length
39406	155	8	AbstractEstimator.java	getChiSquare	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
39407	180	8	AbstractEstimator.java	getCovariances	i	int	0	NIL-FOR	$ < cols
39407	180	8	AbstractEstimator.java	getCovariances	cols	int	0	NIL-FOR	i < $
39408	181	12	AbstractEstimator.java	getCovariances	j	int	0	NIL-FOR	$ < cols
39408	181	12	AbstractEstimator.java	getCovariances	cols	int	0	NIL-FOR	j < $
39409	183	16	AbstractEstimator.java	getCovariances	k	int	0	NIL-FOR	$ < max
39409	183	16	AbstractEstimator.java	getCovariances	max	int	0	NIL-FOR	k < $
1412	215	8	AbstractEstimator.java	guessParametersErrors	m	int	0	EstimationException	$ <= p
1412	215	8	AbstractEstimator.java	guessParametersErrors	p	int	0	EstimationException	m <= $
39410	223	8	AbstractEstimator.java	guessParametersErrors	THIS	AbstractEstimator	0	NIL-FOR	i < errors.$.length
39410	223	8	AbstractEstimator.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
39410	223	8	AbstractEstimator.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
672	50	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	DEF	d.$.length == 0
672	50	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	DEF	$.length == 0
673	53	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	DEF	d[0].length == 0
673	53	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	DEF	$[0].length == 0
674	68	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	DEF	d.$.length == 0
674	68	8	AbstractFieldMatrix.java	extractField	d	T[]	0	DEF	$.length == 0
675	89	8	AbstractFieldMatrix.java	buildArray	columns	int	0	RET	$ < 0
38655	95	8	AbstractFieldMatrix.java	buildArray	THIS	AbstractFieldMatrix	0	NIL-FOR	i < array.$.length
38655	95	8	AbstractFieldMatrix.java	buildArray	i	int	0	NIL-FOR	$ < array.length
38655	95	8	AbstractFieldMatrix.java	buildArray	array	T[][]	0	NIL-FOR	i < $.length
676	144	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	DEF	$ <= 0
677	149	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	DEF	$ <= 0
38656	178	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
38656	178	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
38657	179	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
38657	179	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
38658	197	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
38658	197	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
38659	198	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
38659	198	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
38660	213	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
38660	213	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
38661	214	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
38661	214	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
38662	229	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
38662	229	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
38663	230	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
38663	230	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
38664	250	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
38664	250	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
38665	251	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
38665	251	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
38666	253	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
38666	253	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
38667	275	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
38667	275	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
38667	275	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
38668	277	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
38668	277	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
38668	277	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
38669	295	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
38669	295	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
38670	296	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
38670	296	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
678	339	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination.$.length < rowsCount
678	339	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination[0].length < columnsCount
678	339	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	DEF	destination.length < $
678	339	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	DEF	destination[0].length < $
678	339	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$.length < rowsCount
678	339	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$[0].length < columnsCount
679	380	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination.$.length < selectedRows.$.length
679	380	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination[0].length < selectedColumns.$.length
679	380	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	DEF	destination.length < $.length
679	380	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	DEF	destination[0].length < $.length
679	380	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$.length < selectedRows.length
679	380	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$[0].length < selectedColumns.length
38671	389	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
38671	389	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
38671	389	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
38672	391	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
38672	391	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
38672	391	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
680	403	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
681	408	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
38673	412	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
38673	412	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
682	413	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DEF	subMatrix[r].length != nCols
682	413	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
682	413	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
682	413	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DEF	$[r].length != nCols
38674	425	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
38674	425	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
38675	426	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
38675	426	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
38676	440	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
38676	440	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
683	454	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
683	454	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != 1
683	454	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != nCols
38677	460	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
38677	460	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
38678	473	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
38678	473	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
684	487	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
684	487	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != 1
684	487	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != nRows
38679	493	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
38679	493	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
685	511	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	InvalidMatrixException	vector.getDimension() != $
685	511	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	InvalidMatrixException	$.getDimension() != nCols
38680	516	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
38680	516	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
686	534	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	InvalidMatrixException	vector.getDimension() != $
686	534	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	InvalidMatrixException	$.getDimension() != nRows
38681	539	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
38681	539	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
38682	552	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
38682	552	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
687	566	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	InvalidMatrixException	array.$.length != nCols
687	566	8	AbstractFieldMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
687	566	8	AbstractFieldMatrix.java	setRow	array	T[]	0	InvalidMatrixException	$.length != nCols
38683	571	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
38683	571	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
38684	584	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
38684	584	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
688	598	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	InvalidMatrixException	array.$.length != nRows
688	598	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
688	598	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	InvalidMatrixException	$.length != nRows
38685	603	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
38685	603	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
689	661	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
689	661	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
38686	665	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
38686	665	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
690	677	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DEF	v.$.length != nCols
690	677	8	AbstractFieldMatrix.java	operate	nCols	int	0	DEF	v.length != $
690	677	8	AbstractFieldMatrix.java	operate	v	T[]	0	DEF	$.length != nCols
38687	684	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
38687	684	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
38688	686	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
38688	686	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
691	704	12	AbstractFieldMatrix.java	operate	nCols	int	0	DEF	v.getDimension() != $
691	704	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DEF	$.getDimension() != nCols
38689	711	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
38689	711	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
38690	713	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
38690	713	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
692	729	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DEF	v.$.length != nRows
692	729	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
692	729	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DEF	$.length != nRows
38691	736	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
38691	736	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
38692	738	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
38692	738	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
693	757	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DEF	v.getDimension() != $
693	757	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DEF	$.getDimension() != nRows
38693	764	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
38693	764	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
38694	766	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
38694	766	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
38695	783	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
38695	783	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
38696	784	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
38696	784	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
38697	799	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
38697	799	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
38698	800	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
38698	800	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
38699	815	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
38699	815	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
38700	816	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
38700	816	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
38701	833	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
38701	833	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
38702	834	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
38702	834	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
38703	847	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
38703	847	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
38704	848	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
38704	848	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
38705	863	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
38705	863	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
38706	864	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
38706	864	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
38707	879	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
38707	879	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
38708	880	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
38708	880	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
38709	897	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
38709	897	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
38710	898	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
38710	898	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
38711	946	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
38711	946	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
694	947	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
38712	951	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
38712	951	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
695	952	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
696	976	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
696	976	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
697	979	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix == false
698	985	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<T>	0	RET	$.getRowDimension() != nRows
698	985	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<T>	0	RET	$.getColumnDimension() != nCols
698	985	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
698	985	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
38713	988	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
38713	988	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
38714	989	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
38714	989	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
699	990	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
699	990	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
699	990	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
699	990	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<T>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
38715	1010	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
38715	1010	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
38716	1011	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
38716	1011	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
700	1024	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	row >= $.getRowDimension()
700	1024	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
700	1024	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= getRowDimension()
701	1037	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	column >= $.getColumnDimension()
701	1037	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= getColumnDimension()
701	1037	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
702	1057	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	MatrixIndexException	$ > endRow
702	1057	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	MatrixIndexException	startRow > $
703	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	MatrixIndexException	$ > endColumn
703	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	MatrixIndexException	startColumn > $
704	1081	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
704	1081	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
704	1081	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
705	1082	12	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	selectedRows.$.length == 0
705	1082	12	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length == 0
706	1102	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
706	1102	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
706	1102	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	DEF	getRowDimension() != $.getRowDimension()
706	1102	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	DEF	getColumnDimension() != $.getColumnDimension()
707	1117	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
707	1117	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
707	1117	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	DEF	getRowDimension() != $.getRowDimension()
707	1117	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	DEF	getColumnDimension() != $.getColumnDimension()
708	1132	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getColumnDimension() != m.getRowDimension()
708	1132	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DEF	getColumnDimension() != $.getRowDimension()
343	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	DEF	$ == null
344	134	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	DEF	$ == null
345	165	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
345	165	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
38223	167	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
38223	167	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
38223	167	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
346	172	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
346	172	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
394	80	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	0	DEF	$ > x1
394	80	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	double	0	DEF	x0 > $
395	85	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	1	RET	Math.floor($) < $
396	119	8	AbstractIntegerDistribution.java	probability	fl	double	1	RET	$ == x
396	119	8	AbstractIntegerDistribution.java	probability	x	double	1	RET	fl == $
397	138	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	DEF	$ > x1
397	138	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	DEF	x0 > $
398	158	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ < 0.0
398	158	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ > 1.0
38225	168	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	0	NIL-WHILE	$ < x1
38225	168	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	0	NIL-WHILE	x0 < $
399	171	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	1	DEF	$ > p
399	171	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	1	DEF	pm > $
400	173	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x1
400	173	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	1	DEF	xm == $
401	183	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x0
401	183	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	1	DEF	xm == $
38226	196	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	0	NIL-WHILE	$ > p
38226	196	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	pm > $
1617	125	12	AbstractIntegrator.java	requiresDenseOutput	THIS	AbstractIntegrator	0	RET	$.handler.requiresDenseOutput()
1618	180	8	AbstractIntegrator.java	computeDerivatives	THIS	AbstractIntegrator	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1619	199	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	equations.getDimension() != y0.$.length
1619	199	8	AbstractIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y0.length
1619	199	8	AbstractIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	equations.getDimension() != $.length
1620	206	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	equations.getDimension() != y.$.length
1620	206	8	AbstractIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y.length
1620	206	8	AbstractIntegrator.java	sanityChecks	y	double[]	0	IntegratorException	equations.getDimension() != $.length
1621	213	8	AbstractIntegrator.java	sanityChecks	t0	double	0	IntegratorException	Math.abs(t - $) <= 1.0e-12 * Math.max(Math.abs($), Math.abs(t))
1621	213	8	AbstractIntegrator.java	sanityChecks	t	double	0	IntegratorException	Math.abs($ - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs($))
1050	166	8	AbstractLeastSquaresOptimizer.java	incrementIterationsCounter	THIS	AbstractLeastSquaresOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
1051	179	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	FunctionEvaluationException	$.jacobian.$.length != $.rows
39207	183	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
39207	183	8	AbstractLeastSquaresOptimizer.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
39208	186	12	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
39208	186	12	AbstractLeastSquaresOptimizer.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1052	201	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	MaxEvaluationsExceededException	++$.objectiveEvaluations > $.maxEvaluations
1053	206	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	FunctionEvaluationException	$.objective.$.length != $.rows
39209	211	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
39209	211	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
39210	232	8	AbstractLeastSquaresOptimizer.java	getRMS	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
39210	232	8	AbstractLeastSquaresOptimizer.java	getRMS	i	int	0	NIL-FOR	$ < rows
39211	245	8	AbstractLeastSquaresOptimizer.java	getChiSquare	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
39211	245	8	AbstractLeastSquaresOptimizer.java	getChiSquare	i	int	0	NIL-FOR	$ < rows
39212	268	8	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.cols
39212	268	8	AbstractLeastSquaresOptimizer.java	getCovariances	i	int	0	NIL-FOR	$ < cols
39213	269	12	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
39213	269	12	AbstractLeastSquaresOptimizer.java	getCovariances	j	int	0	NIL-FOR	$ < cols
39214	271	16	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	k < $.rows
39214	271	16	AbstractLeastSquaresOptimizer.java	getCovariances	k	int	0	NIL-FOR	$ < rows
1054	301	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	OptimizationException	$.rows <= $.cols
39215	309	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
39215	309	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
39215	309	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
1055	321	8	AbstractLeastSquaresOptimizer.java	optimize	THIS	AbstractLeastSquaresOptimizer	0	OptimizationException	target.$.length != weights.$.length
1055	321	8	AbstractLeastSquaresOptimizer.java	optimize	target	double[]	0	OptimizationException	$.length != weights.length
1055	321	8	AbstractLeastSquaresOptimizer.java	optimize	weights	double[]	0	OptimizationException	target.length != $.length
995	86	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
39337	51	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
39337	51	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
39338	54	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < nvars + 1
39338	54	12	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NIL-FOR	j < $ + 1
1293	89	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	x.$.length != y.$.length
1293	89	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	1	DEF	$.length != y.length
1293	89	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	1	DEF	$ == null
1293	89	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	1	DEF	x.length != $.length
1293	89	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	1	DEF	$ == null
1294	94	15	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length > 0
1294	94	15	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x[0].length > x.$.length
1294	94	15	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$.length > 0
1294	94	15	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$[0].length > $.length
1295	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length != covariance.$.length
1295	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DEF	$.length != covariance.length
1295	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	x.length != $.length
1296	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	covariance.$.length != covariance[0].length
1296	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	covariance.$.length > 0
1296	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	$.length != $[0].length
1296	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	$.length > 0
39339	153	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
39339	153	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
39358	107	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
39358	107	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
39358	107	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
39359	109	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
1322	110	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
1323	114	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
1323	114	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
1323	114	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
1324	156	8	AbstractRandomGenerator.java	nextInt	n	int	0	DEF	$ <= 0
1325	253	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
39360	261	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
1326	266	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
610	56	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	DEF	$ <= 0
611	61	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	DEF	$ <= 0
38535	85	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
38535	85	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
38536	86	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
38536	86	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
38537	104	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
38537	104	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
38538	105	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
38538	105	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
38539	120	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
38539	120	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
38540	121	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
38540	121	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
38541	136	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
38541	136	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
38542	137	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
38542	137	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
38543	157	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
38543	157	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
38544	158	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
38544	158	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
38545	160	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
38545	160	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
38546	182	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
38546	182	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
38546	182	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
38547	184	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
38547	184	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
38547	184	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
38548	268	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
38548	268	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
38549	269	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
38549	269	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
612	312	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination.$.length < rowsCount
612	312	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination[0].length < columnsCount
612	312	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	DEF	destination.length < $
612	312	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	DEF	destination[0].length < $
612	312	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$.length < rowsCount
612	312	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$[0].length < columnsCount
613	353	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination[0].length < selectedColumns.$.length
613	353	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination.$.length < selectedRows.$.length
613	353	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	DEF	destination.length < $.length
613	353	8	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	DEF	destination[0].length < $.length
613	353	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$[0].length < selectedColumns.length
613	353	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$.length < selectedRows.length
38550	362	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
38550	362	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
38550	362	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
38551	364	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
38551	364	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
38551	364	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
614	376	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
615	381	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
38552	385	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
38552	385	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
616	386	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DEF	subMatrix[r].length != nCols
616	386	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
616	386	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
616	386	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[r].length != nCols
38553	398	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
38553	398	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
38554	399	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
38554	399	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
38555	415	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
38555	415	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
617	429	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
617	429	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getRowDimension() != 1
617	429	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getColumnDimension() != nCols
38556	435	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
38556	435	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
38557	448	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
38557	448	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
618	462	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
618	462	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getColumnDimension() != 1
618	462	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getRowDimension() != nRows
38558	468	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
38558	468	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
619	486	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	InvalidMatrixException	vector.getDimension() != $
619	486	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	InvalidMatrixException	$.getDimension() != nCols
38559	491	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
38559	491	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
620	509	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	InvalidMatrixException	vector.getDimension() != $
620	509	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	InvalidMatrixException	$.getDimension() != nRows
38560	514	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
38560	514	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
38561	527	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
38561	527	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
621	541	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	InvalidMatrixException	array.$.length != nCols
621	541	8	AbstractRealMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
621	541	8	AbstractRealMatrix.java	setRow	array	double[]	0	InvalidMatrixException	$.length != nCols
38562	546	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
38562	546	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
38563	559	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
38563	559	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
622	573	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	InvalidMatrixException	array.$.length != nRows
622	573	8	AbstractRealMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
622	573	8	AbstractRealMatrix.java	setColumn	array	double[]	0	InvalidMatrixException	$.length != nRows
38564	578	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
38564	578	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
623	624	8	AbstractRealMatrix.java	inverse	THIS	AbstractRealMatrix	0	DEF	$.lu == null
624	645	8	AbstractRealMatrix.java	isSingular	THIS	AbstractRealMatrix	0	DEF	$.lu == null
625	662	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
625	662	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
38565	666	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
38565	666	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
626	678	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DEF	v.$.length != nCols
626	678	8	AbstractRealMatrix.java	operate	nCols	int	0	DEF	v.length != $
626	678	8	AbstractRealMatrix.java	operate	v	double[]	0	DEF	$.length != nCols
38566	685	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
38566	685	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
38567	687	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
38567	687	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
627	705	12	AbstractRealMatrix.java	operate	nCols	int	0	DEF	v.getDimension() != $
627	705	12	AbstractRealMatrix.java	operate	v	RealVector	0	DEF	$.getDimension() != nCols
38568	712	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
38568	712	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
38569	714	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
38569	714	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
628	730	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DEF	v.$.length != nRows
628	730	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
628	730	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != nRows
38570	737	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
38570	737	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
38571	739	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
38571	739	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
629	758	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DEF	v.getDimension() != $
629	758	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DEF	$.getDimension() != nRows
38572	765	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
38572	765	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
38573	767	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
38573	767	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
38574	784	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
38574	784	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
38575	785	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
38575	785	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
38576	801	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
38576	801	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
38577	802	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
38577	802	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
38578	817	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
38578	817	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
38579	818	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
38579	818	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
38580	836	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
38580	836	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
38581	837	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
38581	837	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
38582	850	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
38582	850	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
38583	851	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
38583	851	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
38584	867	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
38584	867	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
38585	868	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
38585	868	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
38586	883	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
38586	883	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
38587	884	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
38587	884	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
38588	902	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
38588	902	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
38589	903	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
38589	903	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
630	942	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
631	952	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
632	980	8	AbstractRealMatrix.java	luDecompose	THIS	AbstractRealMatrix	0	DEF	$.lu == null
38590	998	8	AbstractRealMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
38590	998	8	AbstractRealMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
633	999	12	AbstractRealMatrix.java	toString	i	int	0	DEF	$ > 0
38591	1003	12	AbstractRealMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
38591	1003	12	AbstractRealMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
634	1004	16	AbstractRealMatrix.java	toString	j	int	0	DEF	$ > 0
635	1027	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
635	1027	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
636	1030	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
637	1036	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
637	1036	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
637	1036	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
637	1036	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
38592	1039	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
38592	1039	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
38593	1040	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
38593	1040	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
638	1041	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
638	1041	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
638	1041	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
638	1041	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
38594	1061	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
38594	1061	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
38595	1062	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
38595	1062	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1067	136	8	AbstractScalarDifferentiableOptimizer.java	incrementIterationsCounter	THIS	AbstractScalarDifferentiableOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
1068	163	8	AbstractScalarDifferentiableOptimizer.java	computeObjectiveValue	THIS	AbstractScalarDifferentiableOptimizer	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1477	150	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState != null
1477	150	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState != null
1478	274	6	AbstractStepInterpolator.java	getInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
1479	289	6	AbstractStepInterpolator.java	getInterpolatedDerivatives	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
1480	343	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
1481	376	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
1482	386	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
39488	387	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
39488	387	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
1483	425	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
39489	429	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
39489	429	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
1103	57	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	$ == null
1104	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1104	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1104	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
1104	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
1105	125	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	$ == null
1106	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1106	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
1106	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
1106	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
39261	146	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
39261	146	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
1107	161	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
1107	161	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
1108	164	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
973	71	8	AbstractUnivariateRealOptimizer.java	checkResultComputed	THIS	AbstractUnivariateRealOptimizer	0	DEF	$.resultComputed
974	136	8	AbstractUnivariateRealOptimizer.java	computeObjectiveValue	THIS	AbstractUnivariateRealOptimizer	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1205	79	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DEF	$ == null
1206	83	8	AbstractUnivariateStatistic.java	test	begin	int	0	DEF	$ < 0
1207	88	8	AbstractUnivariateStatistic.java	test	length	int	0	DEF	$ < 0
1208	93	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DEF	begin + length > values.$.length
1208	93	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DEF	begin + length > $.length
1208	93	8	AbstractUnivariateStatistic.java	test	begin	int	0	DEF	$ + length > values.length
1208	93	8	AbstractUnivariateStatistic.java	test	length	int	0	DEF	begin + $ > values.length
1209	98	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
1566	197	8	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1566	197	8	AdamsBashforthIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
39544	226	8	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
39545	232	12	AdamsBashforthIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
39546	238	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < y0.$.length
39546	238	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
39546	238	16	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
1567	248	16	AdamsBashforthIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
39547	260	20	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
39547	260	20	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
39547	260	20	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1568	271	20	AdamsBashforthIntegrator.java	integrate	interpolatorTmp	NordsieckStepInterpolator	1	DEF	manager.evaluateStep($)
1568	271	20	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolatorTmp)
1569	273	24	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1569	273	24	AdamsBashforthIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1570	312	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	manager.reset($.stepStart, y)
1570	312	12	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1570	312	12	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1570	312	12	AdamsBashforthIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1571	321	12	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1560	215	8	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1560	215	8	AdamsMoultonIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
39540	243	8	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
39541	249	12	AdamsMoultonIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
39542	263	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
39542	263	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
39542	263	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1561	272	16	AdamsMoultonIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
39543	279	20	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
39543	279	20	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
39543	279	20	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1562	289	20	AdamsMoultonIntegrator.java	integrate	interpolatorTmp	NordsieckStepInterpolator	1	DEF	manager.evaluateStep($)
1562	289	20	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolatorTmp)
1563	291	24	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1563	291	24	AdamsMoultonIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1564	330	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	manager.reset($.stepStart, y)
1564	330	12	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1564	330	12	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1564	330	12	AdamsMoultonIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1565	339	12	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	DEF	$
39598	167	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
39599	191	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
39599	191	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
1616	205	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
39600	239	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
39600	239	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
39600	239	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
39601	244	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
39601	244	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
39601	244	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
39602	262	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < multistep.$.length
39602	262	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < multistep.length
39602	262	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	multistep	double[][]	0	NIL-FOR	i < $.length
39603	264	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < first.$.length
39603	264	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < first.length
39603	264	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	first	double[]	0	NIL-FOR	j < $.length
39604	303	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
39604	303	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
39604	303	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
39605	306	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
39605	306	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
39605	306	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
1599	130	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
1599	130	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
1599	130	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
1599	130	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
1600	153	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance != null
1600	153	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance.$.length != y0.$.length
1600	153	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecAbsoluteTolerance.length != $.length
1601	160	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance != null
1601	160	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance.$.length != y0.$.length
1601	160	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecRelativeTolerance.length != $.length
1602	189	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
39586	199	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
39586	199	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
39586	199	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
1603	208	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
39587	213	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
39587	213	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
39587	213	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
39588	220	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
39588	220	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
39588	220	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
1604	234	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
1604	234	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
1605	237	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
1605	237	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
1606	240	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
1607	261	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	Math.abs(h) < $.minStep
1607	261	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	IntegratorException	Math.abs($) < minStep
1608	262	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
1609	271	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
1609	271	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
1610	273	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
1610	273	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
1212	302	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
1213	306	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
39280	316	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
1214	318	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
1214	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
1214	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
1215	321	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
1215	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
1215	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
1216	333	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
1217	335	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
659	106	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
660	109	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	NullPointerException	$ == null
661	113	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	DEF	$ == 0
662	117	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DEF	$ == 0
38624	120	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
38624	120	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
663	121	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DEF	d[r].length != nCols
663	121	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DEF	d[$].length != nCols
663	121	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DEF	d[r].length != $
663	121	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DEF	$[r].length != nCols
38625	143	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
38625	143	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
38626	188	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
38626	188	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
38627	192	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
38627	192	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
38628	228	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
38628	228	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
38629	232	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
38629	232	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
38630	269	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
38630	269	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
38631	272	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
38631	272	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
38632	274	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
38632	274	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
664	306	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DEF	$.data == null
665	307	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	DEF	$ > 0
666	312	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	DEF	$ > 0
667	318	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
668	323	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
38633	327	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
38633	327	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
669	328	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DEF	subMatrix[i].length != nCols
669	328	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
669	328	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
669	328	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DEF	$[i].length != nCols
670	411	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DEF	v.$.length != nCols
670	411	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DEF	v.length != $
670	411	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DEF	$.length != nCols
38634	417	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
38634	417	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
38635	420	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
38635	420	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
671	435	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DEF	v.$.length != nRows
671	435	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
671	435	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DEF	$.length != nRows
38636	442	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
38636	442	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
38637	444	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
38637	444	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
38638	461	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
38638	461	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
38639	463	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
38639	463	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
38640	477	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
38640	477	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
38641	479	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
38641	479	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
38642	495	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
38642	495	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
38643	497	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
38643	497	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
38644	513	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
38644	513	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
38645	515	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
38645	515	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
38646	529	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
38646	529	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
38647	530	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
38647	530	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
38648	545	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
38648	545	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
38649	546	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
38649	546	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
38650	562	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
38650	562	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
38651	563	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
38651	563	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
38652	580	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
38652	580	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
38653	581	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
38653	581	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
38654	597	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
38654	597	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
789	115	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
790	118	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullPointerException	$ == null
791	122	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	DEF	$ == 0
792	126	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DEF	$ == 0
38934	129	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
38934	129	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
793	130	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DEF	d[r].length != nCols
793	130	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DEF	d[$].length != nCols
793	130	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DEF	d[r].length != $
793	130	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DEF	$[r].length != nCols
38935	151	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
38935	151	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
38936	196	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
38936	196	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
38937	200	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
38937	200	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
38938	236	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
38938	236	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
38939	240	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
38939	240	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
38940	277	8	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
38940	277	8	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
38941	280	12	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
38941	280	12	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
38942	282	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
38942	282	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
794	314	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DEF	$.data == null
795	315	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	DEF	$ > 0
796	320	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	DEF	$ > 0
797	326	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
798	331	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
38943	335	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
38943	335	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
799	336	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DEF	subMatrix[i].length != nCols
799	336	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
799	336	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
799	336	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[i].length != nCols
800	419	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DEF	v.$.length != nCols
800	419	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DEF	v.length != $
800	419	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DEF	$.length != nCols
38944	425	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
38944	425	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
38945	428	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
38945	428	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
801	443	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DEF	v.$.length != nRows
801	443	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
801	443	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != nRows
38946	450	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
38946	450	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
38947	452	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
38947	452	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
38948	469	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
38948	469	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
38949	471	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
38949	471	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
38950	485	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
38950	485	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
38951	487	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
38951	487	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
38952	503	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
38952	503	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
38953	505	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
38953	505	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
38954	521	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
38954	521	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
38955	523	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
38955	523	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
38956	537	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
38956	537	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
38957	538	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
38957	538	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
38958	553	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
38958	553	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
38959	554	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
38959	554	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
38960	570	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
38960	570	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
38961	571	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
38961	571	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
38962	588	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
38962	588	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
38963	589	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
38963	589	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
38964	605	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
38964	605	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
940	136	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	DEF	d.$.length < pos + size
940	136	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	DEF	$.length < pos + size
940	136	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	DEF	d.length < $ + size
940	136	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	DEF	d.length < pos + $
39093	153	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39093	153	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
39094	248	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39094	248	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
39095	259	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39095	259	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
39096	283	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39096	283	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
39097	294	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39097	294	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
39098	314	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39098	314	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
39099	322	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39099	322	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
39100	331	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39100	331	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
39101	339	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39101	339	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
39102	348	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39102	348	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
39103	356	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39103	356	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
39104	365	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39104	365	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
39105	373	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39105	373	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
39106	383	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39106	383	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
39107	392	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39107	392	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
39108	406	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39108	406	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
39109	418	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39109	418	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
39110	443	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39110	443	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
39111	455	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39111	455	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
39112	494	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39112	494	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
39113	506	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39113	506	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
39114	551	12	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39114	551	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
39115	552	16	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	j < $.data.$.length
39115	552	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
39116	577	8	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39116	577	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
39117	578	12	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	j < $.data.$.length
39117	578	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
39118	653	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
39118	653	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
39118	653	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
941	716	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DEF	$.data.$.length != n
941	716	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DEF	data.length != $
942	746	6	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
942	746	6	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
943	750	6	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
944	757	10	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
944	757	10	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
39119	761	10	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
39119	761	10	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
945	762	14	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
945	762	14	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
945	762	14	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
946	796	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	MatrixIndexException	index >= $.getDimension()
946	796	8	ArrayFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
946	796	8	ArrayFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
528	97	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullPointerException	$ == null
529	100	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	DEF	d.$.length == 0
529	100	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	DEF	$.length == 0
530	113	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	DEF	d.$.length < pos + size
530	113	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	DEF	$.length < pos + size
530	113	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	DEF	d.length < $ + size
530	113	8	ArrayRealVector.java	ArrayRealVector	size	int	0	DEF	d.length < pos + $
38351	128	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
38351	128	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
38351	128	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
531	140	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	DEF	d.$.length < pos + size
531	140	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	DEF	$.length < pos + size
531	140	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	DEF	d.length < $ + size
531	140	8	ArrayRealVector.java	ArrayRealVector	size	int	0	DEF	d.length < pos + $
38352	146	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
38352	146	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
38352	146	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
38353	157	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38353	157	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
38354	236	12	ArrayRealVector.java	add	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38354	236	12	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < data.length
38355	248	8	ArrayRealVector.java	add	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38355	248	8	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < data.length
38356	273	12	ArrayRealVector.java	subtract	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38356	273	12	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
38357	285	8	ArrayRealVector.java	subtract	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38357	285	8	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
38358	305	8	ArrayRealVector.java	mapAdd	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38358	305	8	ArrayRealVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
38359	313	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38359	313	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
38360	322	8	ArrayRealVector.java	mapSubtract	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38360	322	8	ArrayRealVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
38361	330	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38361	330	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
38362	339	8	ArrayRealVector.java	mapMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38362	339	8	ArrayRealVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
38363	347	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38363	347	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
38364	356	8	ArrayRealVector.java	mapDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38364	356	8	ArrayRealVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
38365	364	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38365	364	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
38366	373	8	ArrayRealVector.java	mapPow	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38366	373	8	ArrayRealVector.java	mapPow	i	int	0	NIL-FOR	$ < data.length
38367	381	8	ArrayRealVector.java	mapPowToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38367	381	8	ArrayRealVector.java	mapPowToSelf	i	int	0	NIL-FOR	$ < data.length
38368	390	8	ArrayRealVector.java	mapExp	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38368	390	8	ArrayRealVector.java	mapExp	i	int	0	NIL-FOR	$ < data.length
38369	398	8	ArrayRealVector.java	mapExpToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38369	398	8	ArrayRealVector.java	mapExpToSelf	i	int	0	NIL-FOR	$ < data.length
38370	407	8	ArrayRealVector.java	mapExpm1	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38370	407	8	ArrayRealVector.java	mapExpm1	i	int	0	NIL-FOR	$ < data.length
38371	415	8	ArrayRealVector.java	mapExpm1ToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38371	415	8	ArrayRealVector.java	mapExpm1ToSelf	i	int	0	NIL-FOR	$ < data.length
38372	424	8	ArrayRealVector.java	mapLog	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38372	424	8	ArrayRealVector.java	mapLog	i	int	0	NIL-FOR	$ < data.length
38373	432	8	ArrayRealVector.java	mapLogToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38373	432	8	ArrayRealVector.java	mapLogToSelf	i	int	0	NIL-FOR	$ < data.length
38374	441	8	ArrayRealVector.java	mapLog10	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38374	441	8	ArrayRealVector.java	mapLog10	i	int	0	NIL-FOR	$ < data.length
38375	449	8	ArrayRealVector.java	mapLog10ToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38375	449	8	ArrayRealVector.java	mapLog10ToSelf	i	int	0	NIL-FOR	$ < data.length
38376	458	8	ArrayRealVector.java	mapLog1p	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38376	458	8	ArrayRealVector.java	mapLog1p	i	int	0	NIL-FOR	$ < data.length
38377	466	8	ArrayRealVector.java	mapLog1pToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38377	466	8	ArrayRealVector.java	mapLog1pToSelf	i	int	0	NIL-FOR	$ < data.length
38378	475	8	ArrayRealVector.java	mapCosh	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38378	475	8	ArrayRealVector.java	mapCosh	i	int	0	NIL-FOR	$ < data.length
38379	483	8	ArrayRealVector.java	mapCoshToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38379	483	8	ArrayRealVector.java	mapCoshToSelf	i	int	0	NIL-FOR	$ < data.length
38380	492	8	ArrayRealVector.java	mapSinh	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38380	492	8	ArrayRealVector.java	mapSinh	i	int	0	NIL-FOR	$ < data.length
38381	500	8	ArrayRealVector.java	mapSinhToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38381	500	8	ArrayRealVector.java	mapSinhToSelf	i	int	0	NIL-FOR	$ < data.length
38382	509	8	ArrayRealVector.java	mapTanh	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38382	509	8	ArrayRealVector.java	mapTanh	i	int	0	NIL-FOR	$ < data.length
38383	517	8	ArrayRealVector.java	mapTanhToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38383	517	8	ArrayRealVector.java	mapTanhToSelf	i	int	0	NIL-FOR	$ < data.length
38384	526	8	ArrayRealVector.java	mapCos	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38384	526	8	ArrayRealVector.java	mapCos	i	int	0	NIL-FOR	$ < data.length
38385	534	8	ArrayRealVector.java	mapCosToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38385	534	8	ArrayRealVector.java	mapCosToSelf	i	int	0	NIL-FOR	$ < data.length
38386	543	8	ArrayRealVector.java	mapSin	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38386	543	8	ArrayRealVector.java	mapSin	i	int	0	NIL-FOR	$ < data.length
38387	551	8	ArrayRealVector.java	mapSinToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38387	551	8	ArrayRealVector.java	mapSinToSelf	i	int	0	NIL-FOR	$ < data.length
38388	560	8	ArrayRealVector.java	mapTan	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38388	560	8	ArrayRealVector.java	mapTan	i	int	0	NIL-FOR	$ < data.length
38389	568	8	ArrayRealVector.java	mapTanToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38389	568	8	ArrayRealVector.java	mapTanToSelf	i	int	0	NIL-FOR	$ < data.length
38390	577	8	ArrayRealVector.java	mapAcos	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38390	577	8	ArrayRealVector.java	mapAcos	i	int	0	NIL-FOR	$ < data.length
38391	585	8	ArrayRealVector.java	mapAcosToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38391	585	8	ArrayRealVector.java	mapAcosToSelf	i	int	0	NIL-FOR	$ < data.length
38392	594	8	ArrayRealVector.java	mapAsin	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38392	594	8	ArrayRealVector.java	mapAsin	i	int	0	NIL-FOR	$ < data.length
38393	602	8	ArrayRealVector.java	mapAsinToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38393	602	8	ArrayRealVector.java	mapAsinToSelf	i	int	0	NIL-FOR	$ < data.length
38394	611	8	ArrayRealVector.java	mapAtan	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38394	611	8	ArrayRealVector.java	mapAtan	i	int	0	NIL-FOR	$ < data.length
38395	619	8	ArrayRealVector.java	mapAtanToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38395	619	8	ArrayRealVector.java	mapAtanToSelf	i	int	0	NIL-FOR	$ < data.length
38396	628	8	ArrayRealVector.java	mapInv	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38396	628	8	ArrayRealVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
38397	636	8	ArrayRealVector.java	mapInvToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38397	636	8	ArrayRealVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
38398	645	8	ArrayRealVector.java	mapAbs	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38398	645	8	ArrayRealVector.java	mapAbs	i	int	0	NIL-FOR	$ < data.length
38399	653	8	ArrayRealVector.java	mapAbsToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38399	653	8	ArrayRealVector.java	mapAbsToSelf	i	int	0	NIL-FOR	$ < data.length
38400	662	8	ArrayRealVector.java	mapSqrt	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38400	662	8	ArrayRealVector.java	mapSqrt	i	int	0	NIL-FOR	$ < data.length
38401	670	8	ArrayRealVector.java	mapSqrtToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38401	670	8	ArrayRealVector.java	mapSqrtToSelf	i	int	0	NIL-FOR	$ < data.length
38402	679	8	ArrayRealVector.java	mapCbrt	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38402	679	8	ArrayRealVector.java	mapCbrt	i	int	0	NIL-FOR	$ < data.length
38403	687	8	ArrayRealVector.java	mapCbrtToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38403	687	8	ArrayRealVector.java	mapCbrtToSelf	i	int	0	NIL-FOR	$ < data.length
38404	696	8	ArrayRealVector.java	mapCeil	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38404	696	8	ArrayRealVector.java	mapCeil	i	int	0	NIL-FOR	$ < data.length
38405	704	8	ArrayRealVector.java	mapCeilToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38405	704	8	ArrayRealVector.java	mapCeilToSelf	i	int	0	NIL-FOR	$ < data.length
38406	713	8	ArrayRealVector.java	mapFloor	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38406	713	8	ArrayRealVector.java	mapFloor	i	int	0	NIL-FOR	$ < data.length
38407	721	8	ArrayRealVector.java	mapFloorToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38407	721	8	ArrayRealVector.java	mapFloorToSelf	i	int	0	NIL-FOR	$ < data.length
38408	730	8	ArrayRealVector.java	mapRint	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38408	730	8	ArrayRealVector.java	mapRint	i	int	0	NIL-FOR	$ < data.length
38409	738	8	ArrayRealVector.java	mapRintToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38409	738	8	ArrayRealVector.java	mapRintToSelf	i	int	0	NIL-FOR	$ < data.length
38410	747	8	ArrayRealVector.java	mapSignum	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38410	747	8	ArrayRealVector.java	mapSignum	i	int	0	NIL-FOR	$ < data.length
38411	755	8	ArrayRealVector.java	mapSignumToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38411	755	8	ArrayRealVector.java	mapSignumToSelf	i	int	0	NIL-FOR	$ < data.length
38412	764	8	ArrayRealVector.java	mapUlp	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38412	764	8	ArrayRealVector.java	mapUlp	i	int	0	NIL-FOR	$ < data.length
38413	772	8	ArrayRealVector.java	mapUlpToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38413	772	8	ArrayRealVector.java	mapUlpToSelf	i	int	0	NIL-FOR	$ < data.length
38414	786	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38414	786	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
38415	798	8	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38415	798	8	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
38416	823	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38416	823	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
38417	835	8	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38417	835	8	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
38418	874	12	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38418	874	12	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
38419	886	8	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38419	886	8	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
38420	938	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38420	938	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
38421	951	8	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38421	951	8	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
38422	984	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38422	984	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
38423	997	8	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38423	997	8	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
38424	1030	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38424	1030	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
38425	1043	8	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38425	1043	8	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
532	1071	8	ArrayRealVector.java	unitVector	norm	double	0	DEF	$ == 0
533	1080	8	ArrayRealVector.java	unitize	norm	double	0	DEF	$ == 0
38426	1083	8	ArrayRealVector.java	unitize	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38426	1083	8	ArrayRealVector.java	unitize	i	int	0	NIL-FOR	$ < data.length
38427	1116	12	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38427	1116	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
38428	1117	16	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	j < $.data.$.length
38428	1117	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
38429	1142	8	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38429	1142	8	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
38430	1143	12	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	j < $.data.$.length
38430	1143	12	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
38431	1218	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
38431	1218	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
38431	1218	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
534	1287	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DEF	$.data.$.length != n
534	1287	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DEF	data.length != $
535	1300	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
536	1315	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
537	1320	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
538	1351	6	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
538	1351	6	ArrayRealVector.java	equals	other	Object	0	RET	this == $
539	1355	6	ArrayRealVector.java	equals	other	Object	0	RET	$ == null
540	1362	10	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
540	1362	10	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
541	1366	10	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
38432	1370	10	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
38432	1370	10	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
542	1371	14	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
542	1371	14	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
542	1371	14	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
543	1391	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
544	1404	8	ArrayRealVector.java	checkIndex	THIS	ArrayRealVector	0	MatrixIndexException	index >= $.getDimension()
544	1404	8	ArrayRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
544	1404	8	ArrayRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
1446	121	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
1446	121	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
1446	121	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
1446	121	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
1446	121	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
1446	121	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
1446	121	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
1447	125	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
1447	125	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
1447	125	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
1448	192	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
1448	192	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
1448	192	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
1448	192	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
468	89	8	BetaDistributionImpl.java	recomputeZ	THIS	BetaDistributionImpl	0	DEF	Double.isNaN($.z)
469	97	8	BetaDistributionImpl.java	density	x	Double	1	RET	$ < 0
469	97	8	BetaDistributionImpl.java	density	x	Double	1	RET	$ > 1
470	99	15	BetaDistributionImpl.java	density	x	Double	1	MathException:RET	$ == 0
471	100	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	MathException	$.alpha < 1
472	104	15	BetaDistributionImpl.java	density	x	Double	1	MathException:RET	$ == 1
473	105	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	MathException	$.beta < 1
474	119	8	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 0
475	121	15	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 1
476	148	8	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ <= 0
477	150	15	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ >= 1
722	73	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
722	73	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
723	88	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
38748	98	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
38748	98	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
38749	103	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
38749	103	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
724	106	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
724	106	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
724	106	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
38750	107	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
38750	107	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
38751	109	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
38751	109	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
38752	114	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
38752	114	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
725	120	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
726	137	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
38753	142	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
38753	142	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
727	144	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
727	144	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
728	145	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
729	149	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
729	149	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
730	169	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
38754	179	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
38754	179	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
38755	184	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
38755	184	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
731	187	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
731	187	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
38756	188	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
38756	188	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
38757	190	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
38757	190	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
38758	195	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
38758	195	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
732	201	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
38759	259	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
38759	259	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
38760	263	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
38760	263	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
733	270	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
38761	272	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
38761	272	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
38762	274	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
38762	274	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
38763	279	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
38763	279	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
734	286	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
734	286	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
38764	289	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
38764	289	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
735	295	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
38765	297	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
38765	297	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
38766	300	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
38766	300	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
38767	304	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
38767	304	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
38768	323	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
38768	323	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
38769	328	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
38769	328	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
736	334	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
38770	336	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
38770	336	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
38771	339	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
38771	339	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
38772	343	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
38772	343	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
737	349	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
737	349	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
38773	353	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
38773	353	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
738	359	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
38774	361	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
38774	361	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
38775	363	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
38775	363	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
38776	368	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
38776	368	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
297	113	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
298	149	8	BigFraction.java	BigFraction	num	BigInteger	0	DEF	$ == null
299	152	8	BigFraction.java	BigFraction	den	BigInteger	0	DEF	$ == null
300	155	8	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.equals($)
301	158	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
302	165	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
303	171	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
304	205	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isNaN($)
305	208	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isInfinite($)
306	217	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
307	221	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
38220	225	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
38220	225	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
308	230	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
309	307	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
309	307	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
310	313	8	BigFraction.java	BigFraction	a0	long	0	RET	Math.abs($ - value) < epsilon
310	313	8	BigFraction.java	BigFraction	value	double	0	RET	Math.abs(a0 - $) < epsilon
310	313	8	BigFraction.java	BigFraction	epsilon	double	0	RET	Math.abs(a0 - value) < $
38221	329	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
311	335	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
311	335	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
311	335	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
311	335	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
312	340	12	BigFraction.java	BigFraction	convergent	double	1	DEF	Math.abs($ - value) > epsilon
312	340	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
312	340	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
312	340	12	BigFraction.java	BigFraction	value	double	1	DEF	Math.abs(convergent - $) > epsilon
312	340	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	Math.abs(convergent - value) > $
312	340	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
312	340	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
313	354	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
313	354	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
314	358	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
314	358	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
315	512	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
316	519	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
316	519	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
317	617	8	BigFraction.java	divide	bg	BigInteger	0	DEF	BigInteger.ZERO.equals($)
318	670	8	BigFraction.java	divide	THIS	BigFraction	0	DEF	BigInteger.ZERO.equals(fraction.$.numerator)
318	670	8	BigFraction.java	divide	fraction	BigFraction	0	DEF	BigInteger.ZERO.equals($.numerator)
319	710	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
319	710	8	BigFraction.java	equals	other	Object	1	DEF	this == $
320	712	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
321	901	8	BigFraction.java	multiply	THIS	BigFraction	0	DEF	$.getNumeratorAsInt() != 0
321	901	8	BigFraction.java	multiply	fraction	BigFraction	0	DEF	$.getNumeratorAsInt() != 0
322	944	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
323	961	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
324	980	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
325	1088	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
326	1094	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
326	1094	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
327	1117	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
328	1119	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
329	168	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
330	170	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
331	172	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
332	194	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
333	218	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
334	251	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
38222	274	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
38222	274	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
38222	274	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
38222	274	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
553	103	8	BigMatrixImpl.java	BigMatrixImpl	rowDimension	int	0	DEF	$ <= 0
554	108	8	BigMatrixImpl.java	BigMatrixImpl	columnDimension	int	0	DEF	$ <= 0
555	150	8	BigMatrixImpl.java	BigMatrixImpl	copyArray	boolean	1	DEF	$
556	153	12	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	NullPointerException	$ == null
557	157	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	DEF	$ == 0
558	162	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	$ == 0
38447	165	12	BigMatrixImpl.java	BigMatrixImpl	r	int	0	NIL-FOR	$ < nRows
38447	165	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	r < $
559	166	16	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	DEF	d[r].length != nCols
559	166	16	BigMatrixImpl.java	BigMatrixImpl	r	int	0	DEF	d[$].length != nCols
559	166	16	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	d[r].length != $
559	166	16	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	DEF	$[r].length != nCols
560	190	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	DEF	$ == 0
561	195	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	$ == 0
38448	198	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
38448	198	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
562	199	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	DEF	d[row].length != nCols
562	199	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	DEF	d[$].length != nCols
562	199	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	d[row].length != $
562	199	12	BigMatrixImpl.java	BigMatrixImpl	d	double[][]	0	DEF	$[row].length != nCols
563	220	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	DEF	$ == 0
564	225	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	$ == 0
38449	228	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
38449	228	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
565	229	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	DEF	d[row].length != nCols
565	229	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	DEF	d[$].length != nCols
565	229	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	d[row].length != $
565	229	12	BigMatrixImpl.java	BigMatrixImpl	d	String[][]	0	DEF	$[row].length != nCols
38450	251	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
38450	251	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
38451	283	12	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
38451	283	12	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
38452	286	16	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
38452	286	16	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
38453	309	8	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
38453	309	8	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
38454	313	12	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
38454	313	12	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
38455	338	12	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
38455	338	12	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
38456	341	16	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
38456	341	16	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
38457	364	8	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
38457	364	8	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
38458	368	12	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
38458	368	12	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
38459	385	8	BigMatrixImpl.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
38459	385	8	BigMatrixImpl.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
38460	388	12	BigMatrixImpl.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
38460	388	12	BigMatrixImpl.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
38461	404	8	BigMatrixImpl.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
38461	404	8	BigMatrixImpl.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
38462	407	12	BigMatrixImpl.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
38462	407	12	BigMatrixImpl.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
38463	433	12	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
38463	433	12	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
38464	436	16	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
38464	436	16	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
38465	438	20	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
38465	438	20	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
38466	464	8	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
38466	464	8	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
38467	467	12	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
38467	467	12	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
38468	469	16	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
38468	469	16	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
38469	512	8	BigMatrixImpl.java	getDataAsDoubleArray	i	int	0	NIL-FOR	$ < nRows
38469	512	8	BigMatrixImpl.java	getDataAsDoubleArray	nRows	int	0	NIL-FOR	i < $
38470	513	12	BigMatrixImpl.java	getDataAsDoubleArray	j	int	0	NIL-FOR	$ < nCols
38470	513	12	BigMatrixImpl.java	getDataAsDoubleArray	nCols	int	0	NIL-FOR	j < $
38471	577	8	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	col < $.getColumnDimension()
38471	577	8	BigMatrixImpl.java	getNorm	col	int	0	NIL-FOR	$ < this.getColumnDimension()
38472	579	12	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	row < $.getRowDimension()
38472	579	12	BigMatrixImpl.java	getNorm	row	int	0	NIL-FOR	$ < this.getRowDimension()
566	605	8	BigMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ > endRow
566	605	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	startRow > $
567	612	8	BigMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ > endColumn
567	612	8	BigMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	startColumn > $
38473	619	8	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
38473	619	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
568	643	8	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
568	643	8	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
568	643	8	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
569	644	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length == 0
569	644	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length == 0
38474	653	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	i < selectedRows.$.length
38474	653	12	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
38474	653	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
38475	656	16	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	j < selectedColumns.$.length
38475	656	16	BigMatrixImpl.java	getSubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
38475	656	16	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
570	704	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	DEF	$ == 0
571	709	8	BigMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	$ == 0
38476	713	8	BigMatrixImpl.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
38476	713	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
572	714	12	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	DEF	subMatrix[r].length != nCols
572	714	12	BigMatrixImpl.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
572	714	12	BigMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
572	714	12	BigMatrixImpl.java	setSubMatrix	subMatrix	BigDecimal[][]	0	DEF	$[r].length != nCols
573	721	8	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	1	DEF	$.data == null
574	722	12	BigMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
575	727	12	BigMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
38477	740	8	BigMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
38477	740	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
38478	776	8	BigMatrixImpl.java	getColumnMatrix	row	int	0	NIL-FOR	$ < nRows
38478	776	8	BigMatrixImpl.java	getColumnMatrix	nRows	int	0	NIL-FOR	row < $
38479	815	8	BigMatrixImpl.java	getRowAsDoubleArray	i	int	0	NIL-FOR	$<ncols
38479	815	8	BigMatrixImpl.java	getRowAsDoubleArray	ncols	int	0	NIL-FOR	i<$
38480	835	8	BigMatrixImpl.java	getColumn	i	int	0	NIL-FOR	$ < nRows
38480	835	8	BigMatrixImpl.java	getColumn	nRows	int	0	NIL-FOR	i < $
38481	856	8	BigMatrixImpl.java	getColumnAsDoubleArray	i	int	0	NIL-FOR	$<nrows
38481	856	8	BigMatrixImpl.java	getColumnAsDoubleArray	nrows	int	0	NIL-FOR	i<$
38482	917	8	BigMatrixImpl.java	transpose	row	int	0	NIL-FOR	$ < nRows
38482	917	8	BigMatrixImpl.java	transpose	nRows	int	0	NIL-FOR	row < $
38483	919	12	BigMatrixImpl.java	transpose	col	int	0	NIL-FOR	$ < nCols
38483	919	12	BigMatrixImpl.java	transpose	nCols	int	0	NIL-FOR	col < $
576	943	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
577	946	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	1	RET	$.isSingular()
38484	950	12	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
38484	950	12	BigMatrixImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < this.getRowDimension()
578	970	8	BigMatrixImpl.java	isSingular	THIS	BigMatrixImpl	1	RET	$.lu == null
579	1009	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
38485	1013	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
38485	1013	8	BigMatrixImpl.java	getTrace	i	int	0	NIL-FOR	$ < this.getRowDimension()
580	1027	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	DEF	v.$.length != $.getColumnDimension()
580	1027	8	BigMatrixImpl.java	operate	v	BigDecimal[]	0	DEF	$.length != getColumnDimension()
38486	1035	8	BigMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
38486	1035	8	BigMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
38487	1037	12	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
38487	1037	12	BigMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
38488	1054	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
38488	1054	8	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < bd.length
38488	1054	8	BigMatrixImpl.java	operate	bd	BigDecimal[]	0	NIL-FOR	i < $.length
581	1069	8	BigMatrixImpl.java	preMultiply	THIS	BigMatrixImpl	0	DEF	v.$.length != nRows
581	1069	8	BigMatrixImpl.java	preMultiply	nRows	int	0	DEF	v.length != $
581	1069	8	BigMatrixImpl.java	preMultiply	v	BigDecimal[]	0	DEF	$.length != nRows
38489	1076	8	BigMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
38489	1076	8	BigMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
38490	1078	12	BigMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
38490	1078	12	BigMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
582	1099	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	DEF	b.$.length != nRows
582	1099	8	BigMatrixImpl.java	solve	nRows	int	0	DEF	b.length != $
582	1099	8	BigMatrixImpl.java	solve	b	BigDecimal[]	0	DEF	$.length != nRows
38491	1107	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRows
38491	1107	8	BigMatrixImpl.java	solve	nRows	int	0	NIL-FOR	row < $
38492	1126	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
38492	1126	8	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < bd.length
38492	1126	8	BigMatrixImpl.java	solve	bd	BigDecimal[]	0	NIL-FOR	i < $.length
583	1144	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	DEF	b.getRowDimension() != $.getRowDimension()
583	1144	8	BigMatrixImpl.java	solve	b	BigMatrix	0	DEF	$.getRowDimension() != getRowDimension()
584	1149	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
585	1152	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	SingularMatrixException	$.isSingular()
38493	1162	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRowB
38493	1162	8	BigMatrixImpl.java	solve	nRowB	int	0	NIL-FOR	row < $
38494	1164	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nColB
38494	1164	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	col < $
38495	1170	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nCol
38495	1170	8	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	col < $
38496	1171	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < nCol
38496	1171	12	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	i < $
38497	1174	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
38497	1174	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
38498	1181	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ >= 0
38499	1184	12	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
38499	1184	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
38500	1187	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < col
38500	1187	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	i < $
38501	1190	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
38501	1190	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
586	1222	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NonSquareMatrixException	$ != nCols
586	1222	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NonSquareMatrixException	nRows != $
38502	1229	8	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
38502	1229	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
38503	1235	8	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	$ < nCols
38503	1235	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	col < $
38504	1240	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < col
38504	1240	12	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	row < $
38505	1243	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < row
38505	1243	16	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	i < $
38506	1252	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
38506	1252	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
38507	1255	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < col
38507	1255	16	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	i < $
587	1261	16	BigMatrixImpl.java	luDecompose	sum	BigDecimal	0	DEF	$.abs().compareTo(largest) == 1
587	1261	16	BigMatrixImpl.java	luDecompose	largest	BigDecimal	0	DEF	sum.abs().compareTo($) == 1
588	1268	12	BigMatrixImpl.java	luDecompose	THIS	BigMatrixImpl	0	SingularMatrixException	$.lu[max][col].abs().compareTo(TOO_SMALL) <= 0
588	1268	12	BigMatrixImpl.java	luDecompose	max	int	0	SingularMatrixException	lu[$][col].abs().compareTo(TOO_SMALL) <= 0
588	1268	12	BigMatrixImpl.java	luDecompose	col	int	0	SingularMatrixException	lu[max][$].abs().compareTo(TOO_SMALL) <= 0
589	1274	12	BigMatrixImpl.java	luDecompose	max	int	0	DEF	$ != col
589	1274	12	BigMatrixImpl.java	luDecompose	col	int	0	DEF	max != $
38508	1276	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < nCols
38508	1276	16	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	i < $
38509	1289	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
38509	1289	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
590	1306	8	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	DEF	$.data != null
38510	1307	12	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	i < $.data.$.length
38510	1307	12	BigMatrixImpl.java	toString	i	int	0	NIL-FOR	$ < data.length
591	1308	16	BigMatrixImpl.java	toString	i	int	0	DEF	$ > 0
38511	1312	16	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	j < $.data[0].length
38511	1312	16	BigMatrixImpl.java	toString	j	int	0	NIL-FOR	$ < data[0].length
592	1313	20	BigMatrixImpl.java	toString	j	int	0	DEF	$ > 0
593	1336	8	BigMatrixImpl.java	equals	THIS	BigMatrixImpl	0	RET	object == $
593	1336	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ == this
594	1339	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ instanceof BigMatrixImpl == false
595	1345	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getColumnDimension() != nCols
595	1345	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getRowDimension() != nRows
595	1345	8	BigMatrixImpl.java	equals	nRows	int	0	RET	m.getRowDimension() != $
595	1345	8	BigMatrixImpl.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
38512	1348	8	BigMatrixImpl.java	equals	row	int	0	NIL-FOR	$ < nRows
38512	1348	8	BigMatrixImpl.java	equals	nRows	int	0	NIL-FOR	row < $
38513	1350	12	BigMatrixImpl.java	equals	col	int	0	NIL-FOR	$ < nCols
38513	1350	12	BigMatrixImpl.java	equals	nCols	int	0	NIL-FOR	col < $
596	1351	16	BigMatrixImpl.java	equals	col	int	0	RET	dataRow[$].equals(m.getEntry(row, $))
596	1351	16	BigMatrixImpl.java	equals	dataRow	BigDecimal[]	0	RET	$[col].equals(m.getEntry(row, col))
596	1351	16	BigMatrixImpl.java	equals	row	int	0	RET	dataRow[col].equals(m.getEntry($, col))
596	1351	16	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	dataRow[col].equals($.getEntry(row, col))
38514	1371	8	BigMatrixImpl.java	hashCode	row	int	0	NIL-FOR	$ < nRows
38514	1371	8	BigMatrixImpl.java	hashCode	nRows	int	0	NIL-FOR	row < $
38515	1373	12	BigMatrixImpl.java	hashCode	col	int	0	NIL-FOR	$ < nCols
38515	1373	12	BigMatrixImpl.java	hashCode	nCols	int	0	NIL-FOR	col < $
597	1411	8	BigMatrixImpl.java	getLUMatrix	THIS	BigMatrixImpl	0	DEF	$.lu == null
38516	1446	8	BigMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
38516	1446	8	BigMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
38517	1475	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
38517	1475	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
38518	1478	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
38518	1478	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
38519	1495	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
38519	1495	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
38520	1498	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
38520	1498	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
38	227	12	BigReal.java	equals	other	Object	0	RET	$ == null
1394	53	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
1394	53	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
39386	66	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
39386	66	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
1395	78	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
1396	82	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
1396	82	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
39387	85	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
39387	85	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
1397	86	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
1397	86	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
1397	86	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
1406	36	8	BinaryMutation.java	mutate	original	Chromosome	0	IllegalArgumentException	$ instanceof BinaryChromosome
428	79	8	BinomialDistributionImpl.java	setNumberOfTrials	trials	int	0	DEF	$ < 0
429	93	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ < 0.0
429	93	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ > 1.0
430	136	8	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
431	138	15	BinomialDistributionImpl.java	cumulativeProbability	THIS	BinomialDistributionImpl	1	DEF	x >= $.getNumberOfTrials()
431	138	15	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= getNumberOfTrials()
432	158	8	BinomialDistributionImpl.java	probability	THIS	BinomialDistributionImpl	1	DEF	x > $.getNumberOfTrials()
432	158	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ > getNumberOfTrials()
432	158	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ < 0
433	186	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
434	189	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
39634	86	8	BisectionSolver.java	solve	THIS	BisectionSolver	0	NIL-WHILE	i < $.maximalIterationCount
39634	86	8	BisectionSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1727	91	12	BisectionSolver.java	solve	fm	double	1	DEF	$ * fmin > 0.0
1727	91	12	BisectionSolver.java	solve	fmin	double	1	DEF	fm * $ > 0.0
1728	99	12	BisectionSolver.java	solve	THIS	BisectionSolver	0	RET	Math.abs(max - min) <= $.absoluteAccuracy
1728	99	12	BisectionSolver.java	solve	min	double	0	RET	Math.abs(max - $) <= absoluteAccuracy
1728	99	12	BisectionSolver.java	solve	max	double	0	RET	Math.abs($ - min) <= absoluteAccuracy
39377	67	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
39377	67	8	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
39378	76	8	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
39378	76	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
39378	76	8	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
1367	98	8	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
1368	124	8	BitsStreamGenerator.java	nextInt	n	int	0	DEF	$ < 1
1369	139	12	BitsStreamGenerator.java	nextInt	random	int	0	RET	$ < n
1369	139	12	BitsStreamGenerator.java	nextInt	n	int	0	RET	random < $
501	159	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
38229	168	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
38229	168	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
38230	170	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
38230	170	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
502	171	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DEF	blockData[index].length != iHeight * $.blockWidth(jBlock)
502	171	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DEF	blockData[index].length != iHeight * blockWidth($)
502	171	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DEF	blockData[index].length != $ * blockWidth(jBlock)
502	171	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DEF	blockData[$].length != iHeight * blockWidth(jBlock)
502	171	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DEF	$[index].length != iHeight * blockWidth(jBlock)
503	176	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
38231	217	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
38231	217	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
38231	217	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
504	219	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DEF	$ != columns
504	219	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DEF	length != $
38232	229	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
38232	229	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
38233	233	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
38233	233	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
38234	243	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
38234	243	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
38235	276	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
38235	276	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
38236	280	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
38236	280	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
38237	307	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
38237	307	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
38238	330	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
38238	330	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
38238	330	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
38239	331	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
38239	331	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
38239	331	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
38240	340	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
38240	340	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
38241	341	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
38241	341	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
38242	373	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
38242	373	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
38242	373	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
38243	377	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
38243	377	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
38243	377	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
38244	401	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
38244	401	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
38244	401	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
38245	402	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
38245	402	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
38245	402	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
38246	411	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
38246	411	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
38247	412	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
38247	412	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
38248	444	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
38248	444	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
38248	444	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
38249	448	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
38249	448	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
38249	448	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
38250	465	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
38250	465	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
38250	465	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
38251	468	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
38251	468	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
38251	468	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
38252	485	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
38252	485	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
38252	485	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
38253	488	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
38253	488	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
38253	488	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
38254	513	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
38254	513	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
38254	513	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
38255	518	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
38255	518	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
38255	518	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
38256	527	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
38256	527	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
38257	531	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
38257	531	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
38258	534	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
38258	534	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
38259	536	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
38259	536	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
38260	574	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
38260	574	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
38260	574	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
38261	579	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
38261	579	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
38261	579	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
38262	589	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
38262	589	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
38263	593	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
38263	593	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
38264	596	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
38264	596	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
38265	600	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
38265	600	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
38266	609	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
38266	609	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
38267	636	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
38267	636	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
38268	641	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
38268	641	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
38269	645	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
38269	645	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
38270	679	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
38270	679	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
38270	679	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
38271	681	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
38271	681	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
38271	681	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
505	692	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
506	694	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
507	726	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
38272	776	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
38272	776	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
508	790	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DEF	$ < 1
509	797	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DEF	$.subRow.$.length != refLength
509	797	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DEF	subRow.length != $
38273	811	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
38273	811	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
38274	817	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
38274	817	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
38275	826	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
38275	826	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
38276	850	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
38276	850	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
510	854	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
510	854	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
511	896	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
511	896	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != 1
511	896	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != nCols
38277	910	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
38277	910	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
512	914	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
512	914	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
38278	942	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
38278	942	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
38279	945	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
38279	945	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
513	946	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
513	946	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
513	946	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
514	985	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
514	985	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != 1
514	985	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != nRows
38280	1000	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
38280	1000	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
38281	1003	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
38281	1003	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
515	1004	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
515	1004	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
515	1004	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
38282	1026	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
38282	1026	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
38283	1061	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
38283	1061	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
38284	1064	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
38284	1064	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
38285	1096	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
38285	1096	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
516	1114	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	InvalidMatrixException	array.$.length != nCols
516	1114	8	BlockFieldMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
516	1114	8	BlockFieldMatrix.java	setRow	array	T[]	0	InvalidMatrixException	$.length != nCols
38286	1124	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
38286	1124	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
38287	1146	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
38287	1146	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
38288	1149	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
38288	1149	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
517	1165	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	InvalidMatrixException	array.$.length != nRows
517	1165	8	BlockFieldMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
517	1165	8	BlockFieldMatrix.java	setColumn	array	T[]	0	InvalidMatrixException	$.length != nRows
38289	1176	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
38289	1176	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
38290	1179	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
38290	1179	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
38291	1266	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
38291	1266	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
38292	1267	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
38292	1267	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
38293	1276	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
38293	1276	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
38294	1278	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
38294	1278	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
518	1310	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DEF	v.$.length != $.columns
518	1310	8	BlockFieldMatrix.java	operate	v	T[]	0	DEF	$.length != columns
38295	1319	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
38295	1319	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
38296	1322	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
38296	1322	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
38297	1326	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
38297	1326	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
38298	1329	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
38298	1329	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
38299	1338	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
38299	1338	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
519	1355	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DEF	v.$.length != $.rows
519	1355	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DEF	$.length != rows
38300	1364	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
38300	1364	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
38301	1371	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
38301	1371	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
38302	1375	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
38302	1375	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
38303	1379	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
38303	1379	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
38304	1388	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
38304	1388	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
38305	1406	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
38305	1406	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
38306	1409	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
38306	1409	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
38307	1410	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
38307	1410	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
38308	1415	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
38308	1415	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
38309	1429	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
38309	1429	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
38310	1432	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
38310	1432	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
38311	1433	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
38311	1433	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
38312	1438	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
38312	1438	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
38313	1455	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
38313	1455	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
38314	1459	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
38314	1459	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
38315	1460	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
38315	1460	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
38316	1466	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
38316	1466	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
38317	1483	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
38317	1483	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
38318	1487	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
38318	1487	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
38319	1488	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
38319	1488	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
38320	1494	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
38320	1494	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
38321	1508	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
38321	1508	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
38322	1511	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
38322	1511	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
38323	1515	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
38323	1515	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
38324	1516	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
38324	1516	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
38325	1530	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
38325	1530	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
38326	1533	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
38326	1533	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
38327	1537	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
38327	1537	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
38328	1538	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
38328	1538	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
38329	1555	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
38329	1555	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
38330	1559	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
38330	1559	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
38331	1565	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
38331	1565	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
38332	1566	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
38332	1566	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
38333	1583	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
38333	1583	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
38334	1587	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
38334	1587	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
38335	1593	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
38335	1593	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
38336	1594	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
38336	1594	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
770	156	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
38820	165	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38820	165	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
38821	167	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38821	167	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
771	168	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DEF	blockData[index].length != iHeight * $.blockWidth(jBlock)
771	168	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DEF	blockData[index].length != iHeight * blockWidth($)
771	168	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DEF	blockData[index].length != $ * blockWidth(jBlock)
771	168	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DEF	blockData[$].length != iHeight * blockWidth(jBlock)
771	168	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DEF	$[index].length != iHeight * blockWidth(jBlock)
772	173	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
38822	212	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
38822	212	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
38822	212	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
773	214	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DEF	$ != columns
773	214	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DEF	length != $
38823	223	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
38823	223	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
38824	227	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
38824	227	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
38825	237	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
38825	237	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
38826	266	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
38826	266	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
38827	270	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
38827	270	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
38828	297	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
38828	297	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
38829	320	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
38829	320	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
38829	320	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38830	321	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
38830	321	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
38830	321	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38831	330	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
38831	330	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
38832	331	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
38832	331	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
38833	363	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
38833	363	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
38833	363	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
38834	367	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
38834	367	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
38834	367	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
38835	391	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
38835	391	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
38835	391	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38836	392	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
38836	392	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
38836	392	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38837	401	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
38837	401	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
38838	402	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
38838	402	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
38839	434	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
38839	434	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
38839	434	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
38840	438	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
38840	438	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
38840	438	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
38841	455	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
38841	455	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
38841	455	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
38842	458	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
38842	458	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
38842	458	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
38843	475	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
38843	475	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
38843	475	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
38844	478	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
38844	478	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
38844	478	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
38845	502	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
38845	502	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
38845	502	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38846	507	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
38846	507	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
38846	507	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38847	516	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
38847	516	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
38848	520	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
38848	520	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
38849	523	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
38849	523	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
38850	525	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
38850	525	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
38851	561	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
38851	561	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
38851	561	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38852	566	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
38852	566	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
38852	566	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38853	576	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
38853	576	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
38854	580	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
38854	580	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
38855	583	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
38855	583	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
38856	587	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
38856	587	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
38857	595	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
38857	595	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
38858	621	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38858	621	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
38859	626	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
38859	626	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
38860	630	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
38860	630	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
38861	649	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38861	649	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
38862	652	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38862	652	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
38863	655	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
38863	655	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
38864	657	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
38864	657	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
38865	663	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
38865	663	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
38866	674	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
38866	674	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
38867	702	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
38867	702	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
38867	702	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38868	704	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
38868	704	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
38868	704	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
774	715	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
775	717	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
776	749	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
38869	799	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
38869	799	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
777	813	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DEF	$ < 1
778	820	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DEF	$.subRow.$.length != refLength
778	820	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DEF	subRow.length != $
38870	834	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
38870	834	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
38871	840	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
38871	840	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
38872	849	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
38872	849	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
38873	873	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38873	873	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
779	877	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
779	877	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
780	919	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
780	919	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getRowDimension() != 1
780	919	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getColumnDimension() != nCols
38874	933	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38874	933	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
781	937	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
781	937	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
38875	965	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38875	965	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
38876	968	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
38876	968	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
782	969	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
782	969	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
782	969	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
783	1008	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
783	1008	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getRowDimension() != nRows
783	1008	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getColumnDimension() != 1
38877	1023	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38877	1023	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
38878	1026	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
38878	1026	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
784	1027	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
784	1027	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
784	1027	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
38879	1049	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38879	1049	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
38880	1084	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38880	1084	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
38881	1087	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
38881	1087	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
38882	1119	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38882	1119	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
785	1137	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	InvalidMatrixException	array.$.length != nCols
785	1137	8	BlockRealMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
785	1137	8	BlockRealMatrix.java	setRow	array	double[]	0	InvalidMatrixException	$.length != nCols
38883	1147	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38883	1147	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
38884	1169	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38884	1169	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
38885	1172	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
38885	1172	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
786	1188	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	InvalidMatrixException	array.$.length != nRows
786	1188	8	BlockRealMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
786	1188	8	BlockRealMatrix.java	setColumn	array	double[]	0	InvalidMatrixException	$.length != nRows
38886	1199	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38886	1199	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
38887	1202	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
38887	1202	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
38888	1287	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
38888	1287	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
38889	1288	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
38889	1288	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
38890	1297	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
38890	1297	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
38891	1299	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
38891	1299	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
787	1331	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DEF	v.$.length != $.columns
787	1331	8	BlockRealMatrix.java	operate	v	double[]	0	DEF	$.length != columns
38892	1339	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38892	1339	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
38893	1342	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38893	1342	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
38894	1346	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
38894	1346	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
38895	1349	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
38895	1349	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
38896	1357	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
38896	1357	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
788	1374	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DEF	v.$.length != $.rows
788	1374	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != rows
38897	1382	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38897	1382	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
38898	1389	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38898	1389	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
38899	1393	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
38899	1393	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
38900	1397	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
38900	1397	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
38901	1405	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
38901	1405	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
38902	1423	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38902	1423	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
38903	1426	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
38903	1426	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
38904	1427	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38904	1427	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
38905	1432	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
38905	1432	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
38906	1446	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38906	1446	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
38907	1449	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
38907	1449	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
38908	1450	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38908	1450	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
38909	1455	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
38909	1455	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
38910	1472	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
38910	1472	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
38911	1476	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
38911	1476	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
38912	1477	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
38912	1477	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
38913	1483	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
38913	1483	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
38914	1500	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
38914	1500	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
38915	1504	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
38915	1504	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
38916	1505	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
38916	1505	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
38917	1511	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
38917	1511	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
38918	1525	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38918	1525	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
38919	1528	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38919	1528	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
38920	1532	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
38920	1532	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
38921	1533	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
38921	1533	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
38922	1547	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
38922	1547	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
38923	1550	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
38923	1550	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
38924	1554	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
38924	1554	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
38925	1555	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
38925	1555	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
38926	1572	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
38926	1572	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
38927	1576	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
38927	1576	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
38928	1582	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
38928	1582	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
38929	1583	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
38929	1583	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
38930	1600	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
38930	1600	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
38931	1604	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
38931	1604	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
38932	1610	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
38932	1610	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
38933	1611	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
38933	1611	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
961	93	8	BrentOptimizer.java	localMin	THIS	BrentOptimizer	0	DEF	goalType == $.GoalType.MAXIMIZE
961	93	8	BrentOptimizer.java	localMin	goalType	GoalType	0	DEF	$ == GoalType.MAXIMIZE
39132	100	8	BrentOptimizer.java	localMin	THIS	BrentOptimizer	0	NIL-WHILE	count < $.maximalIterationCount
39132	100	8	BrentOptimizer.java	localMin	count	int	0	NIL-WHILE	$ < maximalIterationCount
962	106	12	BrentOptimizer.java	localMin	m	double	1	DEF	Math.abs(x - $) > t2 - 0.5 * (b - a)
962	106	12	BrentOptimizer.java	localMin	t2	double	1	DEF	Math.abs(x - m) > $ - 0.5 * (b - a)
962	106	12	BrentOptimizer.java	localMin	x	double	1	DEF	Math.abs($ - m) > t2 - 0.5 * (b - a)
962	106	12	BrentOptimizer.java	localMin	a	double	1	DEF	Math.abs(x - m) > t2 - 0.5 * (b - $)
962	106	12	BrentOptimizer.java	localMin	b	double	1	DEF	Math.abs(x - m) > t2 - 0.5 * ($ - a)
963	113	16	BrentOptimizer.java	localMin	tol	double	0	DEF	Math.abs(e) > $
963	113	16	BrentOptimizer.java	localMin	e	double	0	DEF	Math.abs($) > tol
964	119	20	BrentOptimizer.java	localMin	q	double	1	DEF	$ > 0
965	129	16	BrentOptimizer.java	localMin	p	double	1	DEF	Math.abs($) < Math.abs(0.5 * q * r)
965	129	16	BrentOptimizer.java	localMin	p	double	1	DEF	$ < q * (b - x)
965	129	16	BrentOptimizer.java	localMin	p	double	1	DEF	$ < q * (a - x)
965	129	16	BrentOptimizer.java	localMin	q	double	1	DEF	Math.abs(p) < Math.abs(0.5 * $ * r)
965	129	16	BrentOptimizer.java	localMin	q	double	1	DEF	p < $ * (b - x)
965	129	16	BrentOptimizer.java	localMin	q	double	1	DEF	p < $ * (a - x)
965	129	16	BrentOptimizer.java	localMin	r	double	1	DEF	Math.abs(p) < Math.abs(0.5 * q * $)
965	129	16	BrentOptimizer.java	localMin	x	double	1	DEF	p < q * (b - $)
965	129	16	BrentOptimizer.java	localMin	x	double	1	DEF	p < q * (a - $)
965	129	16	BrentOptimizer.java	localMin	a	double	1	DEF	p < q * ($ - x)
965	129	16	BrentOptimizer.java	localMin	b	double	1	DEF	p < q * ($ - x)
966	135	20	BrentOptimizer.java	localMin	u	double	0	DEF	($ - a) < t2
966	135	20	BrentOptimizer.java	localMin	u	double	0	DEF	(b - $) < t2
966	135	20	BrentOptimizer.java	localMin	t2	double	0	DEF	(u - a) < $
966	135	20	BrentOptimizer.java	localMin	t2	double	0	DEF	(b - u) < $
966	135	20	BrentOptimizer.java	localMin	a	double	0	DEF	(u - $) < t2
966	135	20	BrentOptimizer.java	localMin	b	double	0	DEF	($ - u) < t2
967	146	16	BrentOptimizer.java	localMin	THIS	BrentOptimizer	0	DEF	goalType == $.GoalType.MAXIMIZE
967	146	16	BrentOptimizer.java	localMin	goalType	GoalType	0	DEF	$ == GoalType.MAXIMIZE
968	151	16	BrentOptimizer.java	localMin	fu	double	1	DEF	$ <= fx
968	151	16	BrentOptimizer.java	localMin	fx	double	1	DEF	fu <= $
969	152	20	BrentOptimizer.java	localMin	u	double	1	DEF	$ < x
969	152	20	BrentOptimizer.java	localMin	x	double	1	DEF	u < $
970	164	20	BrentOptimizer.java	localMin	u	double	1	DEF	$ < x
970	164	20	BrentOptimizer.java	localMin	x	double	1	DEF	u < $
971	169	20	BrentOptimizer.java	localMin	fu	double	1	DEF	$ <= fw
971	169	20	BrentOptimizer.java	localMin	x	double	1	DEF	w == $
971	169	20	BrentOptimizer.java	localMin	w	double	1	DEF	$ == x
971	169	20	BrentOptimizer.java	localMin	fw	double	1	DEF	fu <= $
972	174	27	BrentOptimizer.java	localMin	fu	double	0	DEF	$ <= fv
972	174	27	BrentOptimizer.java	localMin	x	double	0	DEF	v == $
972	174	27	BrentOptimizer.java	localMin	v	double	0	DEF	$ == x
972	174	27	BrentOptimizer.java	localMin	v	double	0	DEF	$ == w
972	174	27	BrentOptimizer.java	localMin	w	double	0	DEF	v == $
972	174	27	BrentOptimizer.java	localMin	fv	double	0	DEF	fu <= $
1744	102	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yInitial) <= $.functionValueAccuracy
1744	102	8	BrentSolver.java	solve	yInitial	double	0	RET	Math.abs($) <= functionValueAccuracy
1745	109	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMin) <= $.functionValueAccuracy
1745	109	8	BrentSolver.java	solve	yMin	double	0	RET	Math.abs($) <= functionValueAccuracy
1746	115	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMin < 0
1746	115	8	BrentSolver.java	solve	yMin	double	0	RET	yInitial * $ < 0
1747	121	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMax) <= $.functionValueAccuracy
1747	121	8	BrentSolver.java	solve	yMax	double	0	RET	Math.abs($) <= functionValueAccuracy
1748	127	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMax < 0
1748	127	8	BrentSolver.java	solve	yMax	double	0	RET	yInitial * $ < 0
1749	168	8	BrentSolver.java	solve	sign	double	1	DEF	$ > 0
1750	170	12	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	Math.abs(yMin) <= $.functionValueAccuracy
1750	170	12	BrentSolver.java	solve	yMin	double	1	DEF	Math.abs($) <= functionValueAccuracy
1751	173	19	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	Math.abs(yMax) <= $.functionValueAccuracy
1751	173	19	BrentSolver.java	solve	yMax	double	1	DEF	Math.abs($) <= functionValueAccuracy
1752	183	15	BrentSolver.java	solve	sign	double	1	DEF	$ < 0
1753	188	12	BrentSolver.java	solve	yMin	double	1	DEF	$ == 0.0
39643	225	8	BrentSolver.java	solve	THIS	BrentSolver	0	NIL-WHILE	i < $.maximalIterationCount
39643	225	8	BrentSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1754	226	12	BrentSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
1754	226	12	BrentSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
1755	235	12	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
1755	235	12	BrentSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
1756	245	12	BrentSolver.java	solve	dx	double	0	RET	Math.abs($) <= tolerance
1756	245	12	BrentSolver.java	solve	tolerance	double	0	RET	Math.abs(dx) <= $
1757	249	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(oldDelta) < $
1757	249	12	BrentSolver.java	solve	oldDelta	double	1	DEF	Math.abs($) < tolerance
1757	249	12	BrentSolver.java	solve	y0	double	1	DEF	Math.abs($) <= Math.abs(y1)
1757	249	12	BrentSolver.java	solve	y1	double	1	DEF	Math.abs(y0) <= Math.abs($)
1758	261	16	BrentSolver.java	solve	x0	double	1	DEF	$ == x2
1758	261	16	BrentSolver.java	solve	x2	double	1	DEF	x0 == $
1759	272	16	BrentSolver.java	solve	p	double	1	DEF	$ > 0.0
1760	277	16	BrentSolver.java	solve	p	double	1	DEF	2.0 * $ >= 1.5 * dx * p1 - Math.abs(tolerance * p1)
1760	277	16	BrentSolver.java	solve	p	double	1	DEF	$ >= Math.abs(0.5 * oldDelta * p1)
1760	277	16	BrentSolver.java	solve	p1	double	1	DEF	2.0 * p >= 1.5 * dx * $ - Math.abs(tolerance * $)
1760	277	16	BrentSolver.java	solve	p1	double	1	DEF	p >= Math.abs(0.5 * oldDelta * $)
1760	277	16	BrentSolver.java	solve	dx	double	1	DEF	2.0 * p >= 1.5 * $ * p1 - Math.abs(tolerance * p1)
1760	277	16	BrentSolver.java	solve	tolerance	double	1	DEF	2.0 * p >= 1.5 * dx * p1 - Math.abs($ * p1)
1760	277	16	BrentSolver.java	solve	oldDelta	double	1	DEF	p >= Math.abs(0.5 * $ * p1)
1761	293	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(delta) > $
1761	293	12	BrentSolver.java	solve	delta	double	1	DEF	Math.abs($) > tolerance
1762	295	19	BrentSolver.java	solve	dx	double	1	DEF	$ > 0.0
1763	297	19	BrentSolver.java	solve	dx	double	0	DEF	$ <= 0.0
1764	301	12	BrentSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
1764	301	12	BrentSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
459	102	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ > 1.0
459	102	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ < 0.0
460	105	15	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
461	107	16	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
462	129	8	CauchyDistributionImpl.java	setScale	s	double	0	DEF	$ <= 0.0
463	149	8	CauchyDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
464	171	8	CauchyDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
465	192	8	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
466	194	15	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
1221	66	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	DEF	expected.$.length < 2
1221	66	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	DEF	$.length < 2
1222	71	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	DEF	expected.$.length != observed.$.length
1222	71	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	DEF	$.length != observed.length
1222	71	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	DEF	expected.length != $.length
39282	79	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
39282	79	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
39282	79	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
1223	85	8	ChiSquareTestImpl.java	chiSquare	sumExpected	double	0	DEF	Math.abs($ - sumObserved) > 10E-6
1223	85	8	ChiSquareTestImpl.java	chiSquare	sumObserved	double	0	DEF	Math.abs(sumExpected - $) > 10E-6
39283	91	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
39283	91	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
39283	91	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
1224	92	12	ChiSquareTestImpl.java	chiSquare	rescale	boolean	1	DEF	$
1225	138	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ <= 0
1225	138	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ > 0.5
39284	161	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
39284	161	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
39285	162	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
39285	162	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
39286	172	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
39286	172	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
39287	173	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
39287	173	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
1226	206	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ <= 0
1226	206	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ > 0.5
1227	225	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	DEF	observed1.$.length < 2
1227	225	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	DEF	$.length < 2
1228	230	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	DEF	observed1.$.length != observed2.$.length
1228	230	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	DEF	$.length != observed2.length
1228	230	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	DEF	observed1.length != $.length
39288	245	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
39288	245	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
39288	245	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
1229	250	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum1	long	0	DEF	$ == 0
1230	254	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum2	long	0	DEF	$ == 0
1231	260	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
39289	268	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
39289	268	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
39289	268	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
1232	269	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	DEF	observed2[$] == 0
1232	269	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	DEF	observed1[$] == 0
1232	269	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	1	DEF	$[i] == 0
1232	269	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	1	DEF	$[i] == 0
1233	275	16	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
1234	313	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	DEF	$ > 0.5
1234	313	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	DEF	$ <= 0
1235	331	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	DEF	in.$.length < 2
1235	331	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	DEF	$.length < 2
1236	337	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	DEF	in[0].length < 2
1236	337	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	DEF	$[0].length < 2
39290	358	8	ChiSquareTestImpl.java	checkRectangular	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
39290	358	8	ChiSquareTestImpl.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
39290	358	8	ChiSquareTestImpl.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
1237	359	12	ChiSquareTestImpl.java	checkRectangular	THIS	ChiSquareTestImpl	0	DEF	in[i].length != in[0].length
1237	359	12	ChiSquareTestImpl.java	checkRectangular	i	int	0	DEF	in[$].length != in[0].length
1237	359	12	ChiSquareTestImpl.java	checkRectangular	in	long[][]	0	DEF	$[i].length != $[0].length
39291	374	8	ChiSquareTestImpl.java	checkPositive	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
39291	374	8	ChiSquareTestImpl.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
39291	374	8	ChiSquareTestImpl.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
1238	375	12	ChiSquareTestImpl.java	checkPositive	i	int	0	DEF	in[$] <= 0
1238	375	12	ChiSquareTestImpl.java	checkPositive	in	double[]	0	DEF	$[i] <= 0
39292	390	8	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
39292	390	8	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
39292	390	8	ChiSquareTestImpl.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
1239	391	12	ChiSquareTestImpl.java	checkNonNegative	i	int	0	DEF	in[$] < 0
1239	391	12	ChiSquareTestImpl.java	checkNonNegative	in	long[]	0	DEF	$[i] < 0
39293	406	8	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
39293	406	8	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
39293	406	8	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
39294	407	12	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	j < in[i].length
39294	407	12	ChiSquareTestImpl.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
39294	407	12	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
39294	407	12	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
1240	408	16	ChiSquareTestImpl.java	checkNonNegative	j	int	0	DEF	in[i][$] < 0
1240	408	16	ChiSquareTestImpl.java	checkNonNegative	i	int	0	DEF	in[$][j] < 0
1240	408	16	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	DEF	$[i][j] < 0
455	111	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
456	114	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
457	150	8	ChiSquaredDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
458	176	8	ChiSquaredDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
759	99	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
38800	110	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
38800	110	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
38801	115	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	j	int	0	NIL-FOR	$ < order
38801	115	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	j < $
760	121	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lIJ	double	0	NotSymmetricMatrixException	Math.abs($ - lJI) > maxDelta
760	121	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lJI	double	0	NotSymmetricMatrixException	Math.abs(lIJ - $) > maxDelta
760	121	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	maxDelta	double	0	NotSymmetricMatrixException	Math.abs(lIJ - lJI) > $
38802	129	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
38802	129	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
761	134	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	ltI	double[]	0	NotPositiveDefiniteMatrixException	$[i] < absolutePositivityThreshold
761	134	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NotPositiveDefiniteMatrixException	ltI[$] < absolutePositivityThreshold
761	134	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	absolutePositivityThreshold	double	0	NotPositiveDefiniteMatrixException	ltI[i] < $
38803	141	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	q	int	0	NIL-FOR	$ > i
38803	141	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	q > $
38804	144	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	p	int	0	NIL-FOR	$ < order
38804	144	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	p < $
762	155	8	CholeskyDecompositionImpl.java	getL	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedL == null
763	164	8	CholeskyDecompositionImpl.java	getLT	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedLT == null
38805	176	8	CholeskyDecompositionImpl.java	getDeterminant	THIS	CholeskyDecompositionImpl	0	NIL-FOR	i < $.lTData.$.length
38805	176	8	CholeskyDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
1380	45	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == Double.MIN_VALUE
1381	91	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
1382	106	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
39585	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
39585	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1622	128	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	RET	$.states.isEmpty()
1623	135	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.initialized
1624	152	16	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.evaluateStep(interpolator)
1624	152	16	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	0	DEF	state.evaluateStep($)
1625	153	20	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	1	DEF	$.first == null
1626	156	24	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	1	DEF	$.isForward()
1627	157	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() < $.first.getEventTime()
1628	161	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() > $.first.getEventTime()
1629	216	12	CombinedEventsManager.java	stop	THIS	CombinedEventsManager	0	RET	$.state.stop()
1630	237	16	CombinedEventsManager.java	reset	THIS	CombinedEventsManager	0	DEF	$.state.reset(t, y)
1630	237	16	CombinedEventsManager.java	reset	t	double	0	DEF	state.reset($, y)
1630	237	16	CombinedEventsManager.java	reset	y	double[]	0	DEF	state.reset(t, $)
257	113	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN()
258	117	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
259	121	8	Complex.java	abs	THIS	Complex	1	RET	Math.abs($.real) < Math.abs($.imaginary)
260	122	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
261	128	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
262	173	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN()
263	215	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN()
263	215	8	Complex.java	divide	rhs	Complex	0	RET	$.isNaN()
264	221	8	Complex.java	divide	c	double	0	RET	$ == 0.0
264	221	8	Complex.java	divide	d	double	0	RET	$ == 0.0
265	225	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
265	225	8	Complex.java	divide	rhs	Complex	0	RET	$.isInfinite()
266	229	8	Complex.java	divide	c	double	1	RET	Math.abs($) < Math.abs(d)
266	229	8	Complex.java	divide	d	double	1	RET	Math.abs(c) < Math.abs($)
267	230	12	Complex.java	divide	d	double	0	RET	$ == 0.0
268	238	12	Complex.java	divide	c	double	0	RET	$ == 0.0
269	270	8	Complex.java	equals	THIS	Complex	1	DEF	$ == other
269	270	8	Complex.java	equals	other	Object	1	DEF	this == $
270	272	15	Complex.java	equals	other	Object	1	DEF	$ == null
271	277	16	Complex.java	equals	rhs	Complex	1	DEF	$.isNaN()
272	300	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN()
273	377	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN()
273	377	8	Complex.java	multiply	rhs	Complex	0	RET	$.isNaN()
274	380	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
274	380	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.real)
274	380	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.imaginary)
274	380	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
274	380	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.real)
274	380	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.imaginary)
275	416	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN()
275	416	8	Complex.java	multiply	rhs	double	0	RET	Double.isNaN($)
276	419	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
276	419	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
276	419	8	Complex.java	multiply	rhs	double	0	RET	Double.isInfinite($)
277	436	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN()
278	462	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN()
278	462	8	Complex.java	subtract	rhs	Complex	0	RET	$.isNaN()
279	485	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN()
280	508	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN()
281	531	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN()
282	566	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN()
283	600	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN()
284	635	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN()
285	673	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN()
286	699	8	Complex.java	pow	x	Complex	0	NullPointerException	$ == null
287	732	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN()
288	766	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN()
289	808	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN()
290	812	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
290	812	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
291	817	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
292	874	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN()
293	912	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN()
294	963	8	Complex.java	nthRoot	n	int	0	DEF	$ <= 0
295	971	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN()
296	976	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
38219	988	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
38219	988	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
246	157	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
247	161	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
247	161	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
248	189	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
249	191	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
250	256	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
251	279	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
252	315	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
253	323	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	$.parseFixedstring(source, $.getImaginaryCharacter(), pos)
253	323	8	ComplexFormat.java	parse	source	String	0	RET	parseFixedstring($, getImaginaryCharacter(), pos)
253	323	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, getImaginaryCharacter(), $)
254	351	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	DEF	$ == null
254	351	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	DEF	$.length() == 0
255	365	8	ComplexFormat.java	setImaginaryFormat	imaginaryFormat	NumberFormat	0	DEF	$ == null
256	379	8	ComplexFormat.java	setRealFormat	realFormat	NumberFormat	0	DEF	$ == null
245	63	8	ComplexUtils.java	polar2Complex	r	double	0	DEF	$ < 0
62	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
62	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
38189	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
38189	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
38189	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
63	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
63	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
64	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
64	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
65	122	12	CompositeFormat.java	parseNumber	sb	StringBuffer	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
65	122	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
65	122	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
65	122	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
66	148	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
66	148	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
38190	153	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
38190	153	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
38190	153	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
67	155	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
68	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
68	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
68	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
68	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
68	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
68	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
68	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
68	176	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
69	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
69	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
38184	135	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
38184	135	8	ContinuedFraction.java	evaluate	relativeError	double	0	NIL-WHILE	$ > epsilon
38184	135	8	ContinuedFraction.java	evaluate	epsilon	double	0	NIL-WHILE	relativeError > $
38184	135	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
1	141	12	ContinuedFraction.java	evaluate	p2	double	0	ConvergenceException	Double.isInfinite($)
1	141	12	ContinuedFraction.java	evaluate	q2	double	0	ConvergenceException	Double.isInfinite($)
2	143	16	ContinuedFraction.java	evaluate	a	double	1	DEF	$ != 0.0
3	146	23	ContinuedFraction.java	evaluate	b	double	1	DEF	$ != 0
4	167	8	ContinuedFraction.java	evaluate	n	int	0	MaxIterationsExceededException	$ >= maxIterations
4	167	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxIterationsExceededException	n >= $
1640	108	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
1640	108	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
1641	112	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
1642	117	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DEF	$.getInterpolatedState().length != model.getInterpolatedState().length
1642	117	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DEF	getInterpolatedState().length != $.getInterpolatedState().length
1643	123	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DEF	$.forward ^ model.$.forward
1643	123	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DEF	forward ^ $.forward
1644	133	6	ContinuousOutputModel.java	append	step	double	0	DEF	Math.abs(gap) > 1.0e-3 * Math.abs($)
1644	133	6	ContinuousOutputModel.java	append	gap	double	0	DEF	Math.abs($) > 1.0e-3 * Math.abs(step)
1645	182	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
1646	189	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
1647	247	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
1647	247	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
1647	247	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
1648	252	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
1648	252	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
1648	252	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
39610	259	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
39610	259	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
1649	264	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
1650	267	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
1651	281	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs(tMax - $) < 1e-6
1651	281	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs($ - tMin) < 1e-6
1651	281	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	Math.abs(tMed - $) < 1e-6
1651	281	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	Math.abs($ - tMed) < 1e-6
1652	304	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
1652	304	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
1653	306	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
1653	306	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
39611	314	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
39611	314	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
39611	314	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
39611	314	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
1654	340	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
1655	341	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
1655	341	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
1656	343	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
1656	343	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
1657	349	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
1657	349	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
1658	351	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
1658	351	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
1310	87	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
1310	87	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
1310	87	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
39342	116	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
39342	116	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
39343	181	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
39343	181	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
39344	186	8	CorrelatedRandomVectorGenerator.java	decompose	loop	boolean	0	NIL-FOR	$
39345	190	12	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
39345	190	12	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
1311	193	16	CorrelatedRandomVectorGenerator.java	decompose	ii	int	0	DEF	c[$][$] > c[isi][isi]
1311	193	16	CorrelatedRandomVectorGenerator.java	decompose	isi	int	0	DEF	c[ii][ii] > c[$][$]
1311	193	16	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
1312	200	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	DEF	swap[$.rank] != $.rank
1312	200	12	CorrelatedRandomVectorGenerator.java	decompose	swap	int[]	0	DEF	$[rank] != rank
1313	208	12	CorrelatedRandomVectorGenerator.java	decompose	ir	int	1	NotPositiveDefiniteMatrixException	c[$][$] < small
1313	208	12	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	1	NotPositiveDefiniteMatrixException	$[ir][ir] < small
1313	208	12	CorrelatedRandomVectorGenerator.java	decompose	small	double	1	NotPositiveDefiniteMatrixException	c[ir][ir] < $
1314	210	16	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NotPositiveDefiniteMatrixException	$.rank == 0
39346	215	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
39346	215	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
1315	216	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NotPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1315	216	20	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	NotPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1315	216	20	CorrelatedRandomVectorGenerator.java	decompose	index	int[]	0	NotPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1315	216	20	CorrelatedRandomVectorGenerator.java	decompose	small	double	0	NotPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
39347	234	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
39347	234	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
39348	239	20	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < i
39348	239	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	j < $
39349	256	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
39349	256	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
39350	257	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
39350	257	12	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < rank
39351	271	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.rank
39351	271	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < rank
39352	277	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
39352	277	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
39352	277	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
39353	279	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
39353	279	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < rank
39311	163	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
39311	163	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
39312	164	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
39312	164	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
1255	224	8	Covariance.java	covariance	THIS	Covariance	1	DEF	length == yArray.$.length
1255	224	8	Covariance.java	covariance	length	int	1	DEF	$ == yArray.length
1255	224	8	Covariance.java	covariance	length	int	1	DEF	$ > 1
1255	224	8	Covariance.java	covariance	yArray	double[]	1	DEF	length == $.length
39313	227	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
39313	227	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
1256	267	8	Covariance.java	checkSufficientData	nRows	int	0	DEF	$ < 2
1256	267	8	Covariance.java	checkSufficientData	nCols	int	0	DEF	$ < 2
157	46	8	DefaultTransformer.java	transform	o	Object	0	MathException	$ == null
158	50	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
159	65	8	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
159	65	8	DefaultTransformer.java	equals	other	Object	0	RET	this == $
160	68	8	DefaultTransformer.java	equals	other	Object	0	RET	$ == null
1163	140	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
1164	141	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
1165	143	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
1166	204	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
1167	205	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
1168	303	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < 1
1169	304	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
1170	315	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
1170	315	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
1170	315	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
1171	376	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
39243	144	8	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	$ < n
39243	144	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	i < $
39244	146	12	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	NIL-FOR	$ < i + 1
39244	146	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	j < $ + 1
1081	147	16	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	DEF	steps[$] == 0.0
1081	147	16	DirectSearchOptimizer.java	setStartConfiguration	steps	double[]	0	DEF	$[j] == 0.0
1082	172	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	DEF	$ < 0
39245	180	8	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	$ < n + 1
39245	180	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	i < $ + 1
1083	185	12	DirectSearchOptimizer.java	setStartConfiguration	THIS	DirectSearchOptimizer	0	DEF	refI.$.length != n
1083	185	12	DirectSearchOptimizer.java	setStartConfiguration	refI	double[]	0	DEF	$.length != n
1083	185	12	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	DEF	refI.length != $
39246	190	12	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	NIL-FOR	$ < i
39246	190	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	j < $
39247	193	16	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	NIL-FOR	$ < n
39247	193	16	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	k < $
1084	194	20	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	DEF	refI[$] != refJ[$]
1084	194	20	DirectSearchOptimizer.java	setStartConfiguration	refJ	double[]	0	DEF	refI[k] != $[k]
1084	194	20	DirectSearchOptimizer.java	setStartConfiguration	refI	double[]	0	DEF	$[k] != refJ[k]
1085	199	16	DirectSearchOptimizer.java	setStartConfiguration	allEquals	boolean	0	DEF	$
1086	207	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	DEF	$ > 0
39248	209	16	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	NIL-FOR	$ < n
39248	209	16	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	k < $
1087	265	8	DirectSearchOptimizer.java	optimize	THIS	DirectSearchOptimizer	0	DEF	$.startConfiguration == null
1088	294	12	DirectSearchOptimizer.java	optimize	THIS	DirectSearchOptimizer	0	RET	$.iterations > 0
39249	296	16	DirectSearchOptimizer.java	optimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
39249	296	16	DirectSearchOptimizer.java	optimize	i	int	0	NIL-FOR	$ < simplex.length
1089	299	16	DirectSearchOptimizer.java	optimize	converged	boolean	0	RET	$
1090	319	8	DirectSearchOptimizer.java	incrementIterationsCounter	THIS	DirectSearchOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
1091	345	8	DirectSearchOptimizer.java	evaluate	THIS	DirectSearchOptimizer	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1092	361	8	DirectSearchOptimizer.java	buildSimplex	THIS	DirectSearchOptimizer	0	DEF	n != $.startConfiguration.$.length
1092	361	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	DEF	$ != startConfiguration.length
39250	372	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ < n
39250	372	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i < $
39251	375	12	DirectSearchOptimizer.java	buildSimplex	k	int	0	NIL-FOR	$ < n
39251	375	12	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	k < $
39252	392	8	DirectSearchOptimizer.java	evaluateSimplex	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
39252	392	8	DirectSearchOptimizer.java	evaluateSimplex	i	int	0	NIL-FOR	$ < simplex.length
1093	395	12	DirectSearchOptimizer.java	evaluateSimplex	vertex	RealPointValuePair	0	DEF	Double.isNaN($.getValue())
39253	412	8	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < n
39253	412	8	DirectSearchOptimizer.java	replaceWorstPoint	n	int	0	NIL-FOR	i < $
1094	413	12	DirectSearchOptimizer.java	replaceWorstPoint	THIS	DirectSearchOptimizer	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
1094	413	12	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
1094	413	12	DirectSearchOptimizer.java	replaceWorstPoint	pointValuePair	RealPointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
1094	413	12	DirectSearchOptimizer.java	replaceWorstPoint	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
39617	73	8	DividedDifferenceInterpolator.java	interpolate	THIS	DividedDifferenceInterpolator	0	NIL-FOR	i < c.$.length
39617	73	8	DividedDifferenceInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < c.length
39617	73	8	DividedDifferenceInterpolator.java	interpolate	c	double[]	0	NIL-FOR	i < $.length
39618	107	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
39618	107	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
39619	113	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
39619	113	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
39620	114	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
39620	114	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
39620	114	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
1664	116	16	DividedDifferenceInterpolator.java	computeDividedDifference	denominator	double	0	DuplicateSampleAbscissaException	$ == 0.0
39539	138	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < y0.$.length
39539	138	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
39539	138	4	DormandPrince54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
1497	64	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
1497	64	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
1498	116	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
1499	118	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
39504	128	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
39504	128	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
39505	151	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
39505	151	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
39538	252	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < y0.$.length
39538	252	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
39538	252	4	DormandPrince853Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
1559	273	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
1583	67	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
1583	67	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
39556	78	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
39556	78	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
39557	85	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
39557	85	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
39558	112	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
39558	112	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
39559	117	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
39559	117	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
1584	138	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
1585	140	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
39560	142	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
39561	151	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
39561	151	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
39562	169	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.d.$.length
39562	169	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < d.length
39563	191	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
39563	191	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1586	212	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
39564	221	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
39564	221	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
39565	230	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
39565	230	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
39566	240	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
39566	240	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
39567	264	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
39567	264	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
39568	287	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
39568	287	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
838	165	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	1	DEF	$.isSymmetric(matrix)
838	165	8	EigenDecompositionImpl.java	EigenDecompositionImpl	matrix	RealMatrix	1	DEF	isSymmetric($)
39035	196	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.squaredSecondary.$.length
39035	196	8	EigenDecompositionImpl.java	EigenDecompositionImpl	i	int	0	NIL-FOR	$ < squaredSecondary.length
39036	215	8	EigenDecompositionImpl.java	isSymmetric	i	int	0	NIL-FOR	$ < rows
39036	215	8	EigenDecompositionImpl.java	isSymmetric	rows	int	0	NIL-FOR	i < $
39037	216	12	EigenDecompositionImpl.java	isSymmetric	j	int	0	NIL-FOR	$ < columns
39037	216	12	EigenDecompositionImpl.java	isSymmetric	columns	int	0	NIL-FOR	j < $
839	219	16	EigenDecompositionImpl.java	isSymmetric	mij	double	0	RET	Math.abs($ - mji) > (Math.max(Math.abs($), Math.abs(mji)) * eps)
839	219	16	EigenDecompositionImpl.java	isSymmetric	mji	double	0	RET	Math.abs(mij - $) > (Math.max(Math.abs(mij), Math.abs($)) * eps)
839	219	16	EigenDecompositionImpl.java	isSymmetric	eps	double	0	RET	Math.abs(mij - mji) > (Math.max(Math.abs(mij), Math.abs(mji)) * $)
840	254	8	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.cachedV == null
841	256	12	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
39038	262	12	EigenDecompositionImpl.java	getV	k	int	0	NIL-FOR	$ < m
39038	262	12	EigenDecompositionImpl.java	getV	m	int	0	NIL-FOR	k < $
842	276	8	EigenDecompositionImpl.java	getD	THIS	EigenDecompositionImpl	0	DEF	$.cachedD == null
843	287	8	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.cachedVt == null
844	289	12	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
39039	295	12	EigenDecompositionImpl.java	getVT	k	int	0	NIL-FOR	$ < m
39039	295	12	EigenDecompositionImpl.java	getVT	m	int	0	NIL-FOR	k < $
845	333	8	EigenDecompositionImpl.java	getEigenvector	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
846	353	8	EigenDecompositionImpl.java	getSolver	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
39040	556	8	EigenDecompositionImpl.java	transformToTridiagonal	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.squaredSecondary.$.length
39040	556	8	EigenDecompositionImpl.java	transformToTridiagonal	i	int	0	NIL-FOR	$ < squaredSecondary.length
39041	576	8	EigenDecompositionImpl.java	computeGershgorinCircles	i	int	0	NIL-FOR	$ < m - 1
39041	576	8	EigenDecompositionImpl.java	computeGershgorinCircles	m	int	0	NIL-FOR	i < $ - 1
847	654	16	EigenDecompositionImpl.java	findEigenvalues	chooseLeft	boolean	1	DEF	$
39042	655	20	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < n
39042	655	20	EigenDecompositionImpl.java	findEigenvalues	n	int	0	NIL-FOR	i < $
39043	659	20	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < n
39043	659	20	EigenDecompositionImpl.java	findEigenvalues	n	int	0	NIL-FOR	i < $
39044	670	8	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < j
39044	670	8	EigenDecompositionImpl.java	findEigenvalues	j	int	0	NIL-FOR	i < $
39045	688	8	EigenDecompositionImpl.java	computeSplits	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.secondary.$.length
39045	688	8	EigenDecompositionImpl.java	computeSplits	i	int	0	NIL-FOR	$ < secondary.length
848	692	12	EigenDecompositionImpl.java	computeSplits	THIS	EigenDecompositionImpl	0	DEF	Math.abs($.secondary[i]) <= max
848	692	12	EigenDecompositionImpl.java	computeSplits	max	double	0	DEF	Math.abs(secondary[i]) <= $
848	692	12	EigenDecompositionImpl.java	computeSplits	i	int	0	DEF	Math.abs(secondary[$]) <= max
849	731	8	EigenDecompositionImpl.java	process2RowsBlock	delta	double	0	InvalidMatrixException	$ < 0
850	768	8	EigenDecompositionImpl.java	process3RowsBlock	delta	double	0	InvalidMatrixException	$ >= 0
851	782	8	EigenDecompositionImpl.java	process3RowsBlock	z0	double	0	DEF	$ < z1
851	782	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	z0 < $
852	787	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	$ < z2
852	787	8	EigenDecompositionImpl.java	process3RowsBlock	z2	double	0	DEF	z1 < $
853	792	8	EigenDecompositionImpl.java	process3RowsBlock	z0	double	0	DEF	$ < z1
853	792	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	z0 < $
39046	819	8	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ < n - 1
39046	819	8	EigenDecompositionImpl.java	processGeneralBlock	n	int	0	NIL-FOR	i < $ - 1
854	825	8	EigenDecompositionImpl.java	processGeneralBlock	sumOffDiag	double	0	RET	$ == 0
39047	848	8	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-WHILE	$ > 0
39048	860	12	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ >= 0
855	861	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[i + 2] <= 0
855	861	16	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	DEF	work[$ + 2] <= 0
856	865	16	EigenDecompositionImpl.java	processGeneralBlock	eMax	double	0	DEF	qMin >= 4 * $
856	865	16	EigenDecompositionImpl.java	processGeneralBlock	qMin	double	0	DEF	$ >= 4 * eMax
39049	879	12	EigenDecompositionImpl.java	processGeneralBlock	i0	int	0	NIL-FOR	$ < n0
39049	879	12	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-FOR	i0 < $
857	880	16	EigenDecompositionImpl.java	processGeneralBlock	k	int	0	MaxIterationsExceededException	$ >= maxIter
857	880	16	EigenDecompositionImpl.java	processGeneralBlock	maxIter	int	0	MaxIterationsExceededException	k >= $
858	890	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[4 * n0 - 1] <= $.TOLERANCE_2 * qMax
858	890	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.pingPong == 0
858	890	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[4 * n0 - 2] <= $.TOLERANCE_2 * $.sigma
858	890	16	EigenDecompositionImpl.java	processGeneralBlock	qMax	double	0	DEF	work[4 * n0 - 1] <= TOLERANCE_2 * $
858	890	16	EigenDecompositionImpl.java	processGeneralBlock	i0	int	0	DEF	n0 - $ > 3
858	890	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	work[4 * $ - 1] <= TOLERANCE_2 * qMax
858	890	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	$ - i0 > 3
858	890	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	work[4 * $ - 2] <= TOLERANCE_2 * sigma
39050	897	20	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ < 4 * n0 - 11
39050	897	20	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-FOR	i < 4 * $ - 11
859	898	24	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 2] <= $.TOLERANCE_2 * $.sigma
859	898	24	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 3] <= $.TOLERANCE_2 * $.work[i]
859	898	24	EigenDecompositionImpl.java	processGeneralBlock	i	int	1	DEF	work[$ + 2] <= TOLERANCE_2 * sigma
859	898	24	EigenDecompositionImpl.java	processGeneralBlock	i	int	1	DEF	work[$ + 3] <= TOLERANCE_2 * work[$]
39051	929	8	EigenDecompositionImpl.java	initialSplits	k	int	0	NIL-FOR	$ < 2
39052	933	12	EigenDecompositionImpl.java	initialSplits	i	int	0	NIL-FOR	$ >= 0
860	934	16	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 2] <= $.TOLERANCE_2 * d
860	934	16	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	work[$ + 2] <= TOLERANCE_2 * d
860	934	16	EigenDecompositionImpl.java	initialSplits	d	double	1	DEF	work[i + 2] <= TOLERANCE_2 * $
39053	944	12	EigenDecompositionImpl.java	initialSplits	i	int	0	NIL-FOR	$ < 4 * n - 2
39053	944	12	EigenDecompositionImpl.java	initialSplits	n	int	0	NIL-FOR	i < 4 * $ - 2
861	947	16	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	$.work[i] <= $.TOLERANCE_2 * d
861	947	16	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	work[$] <= TOLERANCE_2 * d
861	947	16	EigenDecompositionImpl.java	initialSplits	d	double	1	DEF	work[i] <= TOLERANCE_2 * $
862	952	23	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[i + 2] < $.work[j]
862	952	23	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j] < $.work[i + 2]
862	952	23	EigenDecompositionImpl.java	initialSplits	j	int	1	DEF	MathUtils.SAFE_MIN * work[i + 2] < work[$]
862	952	23	EigenDecompositionImpl.java	initialSplits	j	int	1	DEF	MathUtils.SAFE_MIN * work[$] < work[i + 2]
862	952	23	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j]
862	952	23	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	MathUtils.SAFE_MIN * work[j] < work[$ + 2]
39054	988	8	EigenDecompositionImpl.java	goodStep	deflating	boolean	0	NIL-FOR	$
863	990	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	RET	start >= $
863	990	12	EigenDecompositionImpl.java	goodStep	start	int	0	RET	$ >= deflatedEnd
864	997	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 5] <= $.TOLERANCE_2 * ($.sigma + $.work[k - 3])
864	997	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 2 * $.pingPong - 4] <= $.TOLERANCE_2 * $.work[k - 7]
864	997	12	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 5] <= TOLERANCE_2 * (sigma + work[$ - 3])
864	997	12	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 2 * pingPong - 4] <= TOLERANCE_2 * work[$ - 7]
864	997	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start != $ - 2
864	997	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start == $ - 1
864	997	12	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ != deflatedEnd - 2
864	997	12	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ == deflatedEnd - 1
865	1006	19	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 2 * $.pingPong - 8] <= $.TOLERANCE_2 * $.work[k - 11]
865	1006	19	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 9] <= $.TOLERANCE_2 * $.sigma
865	1006	19	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 2 * pingPong - 8] <= TOLERANCE_2 * work[$ - 11]
865	1006	19	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 9] <= TOLERANCE_2 * sigma
865	1006	19	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start == $ - 2
865	1006	19	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ == deflatedEnd - 2
866	1011	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.work[k - 3] > $.work[k - 7]
866	1011	16	EigenDecompositionImpl.java	goodStep	k	int	0	DEF	work[$ - 3] > work[$ - 7]
867	1017	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.work[k - 5] > $.TOLERANCE_2 * $.work[k - 3]
867	1017	16	EigenDecompositionImpl.java	goodStep	k	int	0	DEF	work[$ - 5] > TOLERANCE_2 * work[$ - 3]
868	1020	20	EigenDecompositionImpl.java	goodStep	t	double	1	DEF	s <= $
868	1020	20	EigenDecompositionImpl.java	goodStep	s	double	1	DEF	$ <= t
869	1044	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.dMin <= 0
869	1044	8	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	DEF	$ < end
869	1044	8	EigenDecompositionImpl.java	goodStep	end	int	0	DEF	deflatedEnd < $
870	1045	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.flipIfWarranted(deflatedEnd, 1)
870	1045	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	DEF	flipIfWarranted($, 1)
871	1058	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	RET	MathUtils.SAFE_MIN * $.qMax < Math.min($.work[l - 1], Math.min($.work[l - 9], $.dMin2 + $.work[l - 2 * $.pingPong]))
871	1058	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	RET	$.dMin < 0
871	1058	8	EigenDecompositionImpl.java	goodStep	l	int	0	RET	MathUtils.SAFE_MIN * qMax < Math.min(work[$ - 1], Math.min(work[$ - 9], dMin2 + work[$ - 2 * pingPong]))
39055	1066	12	EigenDecompositionImpl.java	goodStep	loop	boolean	0	NIL-FOR	$
872	1072	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin1 > 0
872	1072	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin >= 0
873	1076	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin < 0.0
873	1076	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.work[4 * deflatedEnd - 5 - $.pingPong] < TOLERANCE * ($.sigma + $.dN1)
873	1076	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin1 > 0.0
873	1076	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	Math.abs($.dN) < TOLERANCE * $.sigma
873	1076	23	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	RET	work[4 * $ - 5 - pingPong] < TOLERANCE * (sigma + dN1)
874	1085	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.dMin < 0.0
875	1087	20	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.tType < -22
876	1090	27	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.dMin1 > 0.0
877	1099	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	Double.isNaN($.dMin)
878	1124	8	EigenDecompositionImpl.java	flipIfWarranted	THIS	EigenDecompositionImpl	0	RET	1.5 * $.work[$.pingPong] < $.work[4 * (n - 1) + $.pingPong]
878	1124	8	EigenDecompositionImpl.java	flipIfWarranted	n	int	0	RET	1.5 * work[pingPong] < work[4 * ($ - 1) + pingPong]
39056	1126	12	EigenDecompositionImpl.java	flipIfWarranted	i	int	0	NIL-FOR	$ < j
39056	1126	12	EigenDecompositionImpl.java	flipIfWarranted	j	int	0	NIL-FOR	i < $
39057	1127	16	EigenDecompositionImpl.java	flipIfWarranted	k	int	0	NIL-FOR	$ < 4
39058	1151	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < n
39058	1151	8	EigenDecompositionImpl.java	eigenvaluesRange	n	int	0	NIL-FOR	i < $
39059	1167	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < maxIter
39059	1167	8	EigenDecompositionImpl.java	eigenvaluesRange	maxIter	int	0	NIL-FOR	i < $
879	1170	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))
879	1170	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < absoluteTolerance
879	1170	12	EigenDecompositionImpl.java	eigenvaluesRange	relativeTolerance	double	0	DEF	range < $ * Math.max(Math.abs(left), Math.abs(right))
879	1170	12	EigenDecompositionImpl.java	eigenvaluesRange	absoluteTolerance	double	0	DEF	range < $
879	1170	12	EigenDecompositionImpl.java	eigenvaluesRange	left	double	0	DEF	range < relativeTolerance * Math.max(Math.abs($), Math.abs(right))
879	1170	12	EigenDecompositionImpl.java	eigenvaluesRange	right	double	0	DEF	range < relativeTolerance * Math.max(Math.abs(left), Math.abs($))
880	1177	12	EigenDecompositionImpl.java	eigenvaluesRange	THIS	EigenDecompositionImpl	1	DEF	$.countEigenValues(middle, index, n) >= 1
880	1177	12	EigenDecompositionImpl.java	eigenvaluesRange	middle	double	1	DEF	countEigenValues($, index, n) >= 1
880	1177	12	EigenDecompositionImpl.java	eigenvaluesRange	index	int	1	DEF	countEigenValues(middle, $, n) >= 1
880	1177	12	EigenDecompositionImpl.java	eigenvaluesRange	n	int	1	DEF	countEigenValues(middle, index, $) >= 1
39060	1189	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < maxIter
39060	1189	8	EigenDecompositionImpl.java	eigenvaluesRange	maxIter	int	0	NIL-FOR	i < $
881	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < absoluteTolerance
881	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))
881	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	relativeTolerance	double	0	DEF	range < $ * Math.max(Math.abs(left), Math.abs(right))
881	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	absoluteTolerance	double	0	DEF	range < $
881	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	left	double	0	DEF	range < relativeTolerance * Math.max(Math.abs($), Math.abs(right))
881	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	right	double	0	DEF	range < relativeTolerance * Math.max(Math.abs(left), Math.abs($))
882	1199	12	EigenDecompositionImpl.java	eigenvaluesRange	THIS	EigenDecompositionImpl	1	DEF	$.countEigenValues(middle, index, n) >= n
882	1199	12	EigenDecompositionImpl.java	eigenvaluesRange	middle	double	1	DEF	countEigenValues($, index, n) >= n
882	1199	12	EigenDecompositionImpl.java	eigenvaluesRange	index	int	1	DEF	countEigenValues(middle, $, n) >= n
882	1199	12	EigenDecompositionImpl.java	eigenvaluesRange	n	int	1	DEF	countEigenValues(middle, index, $) >= $
39061	1222	8	EigenDecompositionImpl.java	countEigenValues	i	int	0	NIL-FOR	$ < n
39061	1222	8	EigenDecompositionImpl.java	countEigenValues	n	int	0	NIL-FOR	i < $
883	1224	12	EigenDecompositionImpl.java	countEigenValues	ratio	double	0	DEF	$ <= 0
39062	1245	8	EigenDecompositionImpl.java	ldlTDecomposition	i	int	0	NIL-FOR	$ < n
39062	1245	8	EigenDecompositionImpl.java	ldlTDecomposition	n	int	0	NIL-FOR	i < $
884	1268	8	EigenDecompositionImpl.java	dqds	THIS	EigenDecompositionImpl	1	DEF	$.pingPong == 0
39063	1269	12	EigenDecompositionImpl.java	dqds	j4	int	0	NIL-FOR	$ <= 4 * (end - 3)
39063	1269	12	EigenDecompositionImpl.java	dqds	end	int	0	NIL-FOR	j4 <= 4 * ($ - 3)
39064	1278	12	EigenDecompositionImpl.java	dqds	j4	int	0	NIL-FOR	$ <= 4 * (end - 3)
39064	1278	12	EigenDecompositionImpl.java	dqds	end	int	0	NIL-FOR	j4 <= 4 * ($ - 3)
885	1324	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.pingPong == 0
39065	1325	12	EigenDecompositionImpl.java	dqd	j4	int	0	NIL-FOR	$ < 4 * (end - 3)
39065	1325	12	EigenDecompositionImpl.java	dqd	end	int	0	NIL-FOR	j4 < 4 * ($ - 3)
886	1327	16	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
886	1327	16	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
887	1332	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 + 1] < $.work[j4 - 2]
887	1332	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4 + 1]
887	1332	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 1] < work[$ - 2]
887	1332	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[$ + 1]
39066	1345	12	EigenDecompositionImpl.java	dqd	j4	int	0	NIL-FOR	$ < 4 * (end - 3)
39066	1345	12	EigenDecompositionImpl.java	dqd	end	int	0	NIL-FOR	j4 < 4 * ($ - 3)
888	1347	16	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 3] == 0.0
888	1347	16	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 3] == 0.0
889	1352	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 + 2] < $.work[j4 - 3]
889	1352	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 3] < $.work[j4 + 2]
889	1352	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[$ - 3]
889	1352	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 3] < work[$ + 2]
890	1372	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
890	1372	8	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
891	1377	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4p2 + 2]
891	1377	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4p2 + 2] < $.work[j4 - 2]
891	1377	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[j4p2 + 2]
891	1377	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[j4p2 + 2] < work[$ - 2]
891	1377	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[j4 - 2] < work[$ + 2]
891	1377	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j4 - 2]
892	1392	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
892	1392	8	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
893	1397	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4p2 + 2]
893	1397	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4p2 + 2] < $.work[j4 - 2]
893	1397	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[j4p2 + 2]
893	1397	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[j4p2 + 2] < work[$ - 2]
893	1397	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[j4 - 2] < work[$ + 2]
893	1397	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j4 - 2]
894	1428	8	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.dMin <= 0.0
895	1438	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN
895	1438	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN1
896	1444	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.dMin1 == $.dN1
896	1444	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.dMin == $.dN
897	1448	20	EigenDecompositionImpl.java	computeShiftIncrement	gap1	double	1	DEF	$ > b1
897	1448	20	EigenDecompositionImpl.java	computeShiftIncrement	gap1	double	1	DEF	$ > 0.0
897	1448	20	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	1	DEF	gap1 > $
898	1453	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	DEF	$.dN > b1
898	1453	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	dN > $
899	1456	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	a2 > ($ + b2)
899	1456	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	a2 > (b1 + $)
899	1456	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	$ > (b1 + b2)
900	1468	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN
901	1471	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
901	1471	24	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
902	1480	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 4] > $.work[np - 2]
902	1480	24	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 4] > work[$ - 2]
903	1484	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 9] > $.work[nn - 11]
903	1484	24	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 9] > work[$ - 11]
39067	1493	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
39067	1493	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
39067	1493	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
904	1494	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	$ == 0.0
905	1498	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
905	1498	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
906	1503	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max(b2, $) < a2
906	1503	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max($, b1) < a2
906	1503	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	cnst1 < $
906	1503	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	100 * Math.max(b2, b1) < $
906	1503	24	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	$ < a2
907	1510	20	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	$ < cnst1
907	1510	20	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	a2 < $
908	1516	19	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN2
909	1527	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 8] > b2
909	1527	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 4] > b1
909	1527	16	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 8] > b2
909	1527	16	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 4] > b1
909	1527	16	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	RET	work[np - 4] > $
909	1527	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	work[np - 8] > $
910	1533	16	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	RET	end - $ > 2
910	1533	16	EigenDecompositionImpl.java	computeShiftIncrement	end	int	0	RET	$ - start > 2
39068	1536	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
39068	1536	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
39068	1536	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
911	1537	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	$ == 0.0
912	1541	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
912	1541	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
913	1546	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max(b2, $) < a2
913	1546	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max($, b1) < a2
913	1546	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	cnst1 < $
913	1546	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	100 * Math.max(b2, b1) < $
913	1546	24	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	$ < a2
914	1553	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	$ < cnst1
914	1553	16	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	1	DEF	a2 < $
915	1562	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.tType == -6
916	1564	23	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.tType == -18
917	1576	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin1 == $.dN1
917	1576	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin2 == $.dN2
918	1581	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
918	1581	16	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
919	1586	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	$ != 0.0
39069	1587	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
39069	1587	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
39069	1587	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
920	1589	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
920	1589	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
921	1594	24	EigenDecompositionImpl.java	computeShiftIncrement	oldB1	double	0	DEF	100 * Math.max(b1, $) < b2
921	1594	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max($, oldB1) < b2
921	1594	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max(b1, oldB1) < $
922	1602	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	1	DEF	gap2 > $ * a2
922	1602	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	gap2 > b2 * $
922	1602	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > 0.0
922	1602	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > b2 * a2
923	1612	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	DEF	$.dMin1 == $.dN1
924	1622	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin2 == $.dN2
924	1622	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	2 * $.work[nn - 5] < $.work[nn - 7]
924	1622	12	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	1	RET	2 * work[$ - 5] < work[$ - 7]
925	1625	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
925	1625	16	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
926	1630	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	$ != 0.0
39070	1631	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
39070	1631	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
39070	1631	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
927	1632	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
927	1632	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
928	1637	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * $ < b2
928	1637	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * b1 < $
929	1646	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	1	DEF	gap2 > $ * a2
929	1646	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	gap2 > b2 * $
929	1646	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > 0.0
929	1646	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > b2 * a2
930	1672	8	EigenDecompositionImpl.java	updateSigma	THIS	EigenDecompositionImpl	1	DEF	tau < $.sigma
930	1672	8	EigenDecompositionImpl.java	updateSigma	tau	double	1	DEF	$ < sigma
39071	1697	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < m
39071	1697	8	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	i < $
39072	1706	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < m
39072	1706	8	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	i < $
39073	1734	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m - 1
39073	1734	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $ - 1
931	1737	12	EigenDecompositionImpl.java	findEigenvector	absG	double	0	DEF	$ < minG
931	1737	12	EigenDecompositionImpl.java	findEigenvector	minG	double	0	DEF	absG < $
39074	1749	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ >= 0
39075	1755	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m
39075	1755	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $
39076	1763	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m
39076	1763	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $
39077	1785	8	EigenDecompositionImpl.java	stationaryQuotientDifferenceWithShift	i	int	0	NIL-FOR	$ < nM1
39077	1785	8	EigenDecompositionImpl.java	stationaryQuotientDifferenceWithShift	nM1	int	0	NIL-FOR	i < $
39078	1811	8	EigenDecompositionImpl.java	progressiveQuotientDifferenceWithShift	i	int	0	NIL-FOR	$ >= 0
39382	80	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$<oldChromosomes.size()
39382	80	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i<$.size()
1377	95	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	IllegalArgumentException	$ < 0
1377	95	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	IllegalArgumentException	$ > 1
1572	179	4	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1572	179	4	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1573	187	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
1573	187	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
39549	207	4	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
39550	212	6	EmbeddedRungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1574	214	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1574	214	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1575	219	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1576	221	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance != null
39551	235	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
39551	235	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
39552	237	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
39552	237	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
39552	237	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
39553	239	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
39553	239	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
39554	250	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
39554	250	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
39554	250	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
39555	252	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
39555	252	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1577	260	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1578	264	10	EmbeddedRungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1578	264	10	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1579	266	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1579	266	14	EmbeddedRungeKuttaIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1580	301	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1581	306	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1581	306	6	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1581	306	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1581	306	6	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1582	312	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1316	141	12	EmpiricalDistributionImpl.java	load	THIS	EmpiricalDistributionImpl	0	DEF	$.sampleStats.getN() == 0
39354	356	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i< $.binCount - 1
39354	356	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$< binCount - 1
1317	362	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	DEF	$.binStats.isEmpty()
39355	365	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
39355	365	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
39356	389	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount-1
39356	389	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
1318	418	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	DEF	$.loaded
39357	426	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
39357	426	8	EmpiricalDistributionImpl.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
1319	427	11	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	RET	x <= $.upperBounds[i]
1319	427	11	EmpiricalDistributionImpl.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
1319	427	11	EmpiricalDistributionImpl.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
1320	429	15	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
1321	430	19	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
1445	52	8	Erf.java	erf	x	double	0	DEF	$ < 0
39299	64	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
39299	64	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
39299	64	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
39300	68	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
39300	68	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
39300	68	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
1248	77	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
1249	81	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point.$.length != otherPoint.$.length
1249	81	8	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point.length != $.length
39301	84	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < $.point.$.length
39301	84	8	EuclideanIntegerPoint.java	equals	i	int	0	NIL-FOR	$ < point.length
1250	85	12	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point[i] != otherPoint[i]
1250	85	12	EuclideanIntegerPoint.java	equals	i	int	0	RET	point[$] != otherPoint[$]
1250	85	12	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point[i] != $[i]
39589	83	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
39589	83	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
39609	179	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
39609	179	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
1631	187	16	EventState.java	evaluateStep	THIS	EventState	1	FunctionEvaluationException:RET	$.g0Positive ^ (gb >= 0)
1631	187	16	EventState.java	evaluateStep	gb	double	1	FunctionEvaluationException:RET	g0Positive ^ ($ >= 0)
1632	215	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Math.abs(root - ta) <= $.convergence
1632	215	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Math.abs(root - $.previousEventTime) <= $.convergence
1632	215	20	EventState.java	evaluateStep	root	double	1	DEF	Math.abs($ - ta) <= convergence
1632	215	20	EventState.java	evaluateStep	root	double	1	DEF	Math.abs($ - previousEventTime) <= convergence
1632	215	20	EventState.java	evaluateStep	root	double	1	DEF	Double.isNaN($)
1632	215	20	EventState.java	evaluateStep	ta	double	1	DEF	Math.abs(root - $) <= convergence
1633	221	27	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs($.previousEventTime - root) > $.convergence
1633	221	27	EventState.java	evaluateStep	THIS	EventState	0	RET	Double.isNaN($.previousEventTime)
1633	221	27	EventState.java	evaluateStep	root	double	0	RET	Math.abs(previousEventTime - $) > convergence
1634	224	24	EventState.java	evaluateStep	THIS	EventState	0	RET	$.pendingEvent
1634	224	24	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs(t1 - $.pendingEventTime) <= $.convergence
1634	224	24	EventState.java	evaluateStep	t1	double	0	RET	Math.abs($ - pendingEventTime) <= convergence
1635	252	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ != null
1635	252	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ instanceof DerivativeException
1636	254	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ instanceof EventException
1636	254	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ != null
1637	285	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
1638	316	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
1639	320	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.RESET_STATE
494	53	8	ExponentialDistributionImpl.java	setMean	mean	double	0	DEF	$ <= 0.0
495	75	8	ExponentialDistributionImpl.java	density	x	Double	0	RET	$ < 0
496	98	8	ExponentialDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
497	122	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ < 0.0
497	122	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ > 1.0
498	125	15	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
499	160	8	ExponentialDistributionImpl.java	getDomainUpperBound	p	double	1	RET	$ < .5
500	182	8	ExponentialDistributionImpl.java	getInitialDomain	p	double	1	RET	$ < .5
449	73	8	FDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
450	102	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
451	105	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
452	151	8	FDistributionImpl.java	getInitialDomain	d	double	0	DEF	$ > 2.0
453	165	8	FDistributionImpl.java	setNumeratorDegreesOfFreedom	degreesOfFreedom	double	0	DEF	$ <= 0.0
454	188	8	FDistributionImpl.java	setDenominatorDegreesOfFreedom	degreesOfFreedom	double	0	DEF	$ <= 0.0
39463	240	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (N >> 1)
39464	254	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (N >> 1)
1467	304	8	FastFourierTransformer.java	fft	THIS	FastFourierTransformer	0	RET	f.$.length == 1
1467	304	8	FastFourierTransformer.java	fft	f	double	0	RET	$.length == 1
39473	313	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
39474	323	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
39475	364	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
39476	367	12	FastFourierTransformer.java	fft	j	int	0	NIL-WHILE	$ >= k
39476	367	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	j >= $
39476	367	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	$ > 0
39477	374	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
39478	389	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
39479	391	12	FastFourierTransformer.java	fft	j	int	0	NIL-FOR	$ < N
39480	392	16	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	k < $
39480	392	16	FastFourierTransformer.java	fft	k	int	0	NIL-FOR	$ < i
1470	433	8	FastFourierTransformer.java	sample	n	int	0	DEF	$ <= 0
39481	442	8	FastFourierTransformer.java	sample	i	int	0	NIL-FOR	$ < n
39481	442	8	FastFourierTransformer.java	sample	n	int	0	NIL-FOR	i < $
39482	457	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
39482	457	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
39482	457	8	FastFourierTransformer.java	scaleArray	f	double	0	NIL-FOR	i < $.length
39483	472	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
39483	472	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
39483	472	8	FastFourierTransformer.java	scaleArray	f	Complex	0	NIL-FOR	i < $.length
1471	495	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(d.$.length)
1471	495	8	FastFourierTransformer.java	verifyDataSet	d	double	0	DEF	isPowerOf2($.length)
1472	509	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(o.$.length)
1472	509	8	FastFourierTransformer.java	verifyDataSet	o	Object	0	DEF	isPowerOf2($.length)
1473	526	8	FastFourierTransformer.java	verifyInterval	lower	double	0	DEF	$ >= upper
1473	526	8	FastFourierTransformer.java	verifyInterval	upper	double	0	DEF	lower >= $
39484	553	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
39484	553	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
39484	553	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
1474	573	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
1474	573	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
1474	573	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
39485	575	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
39485	575	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
39485	575	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1475	581	12	FastFourierTransformer.java	mdfft	forward	boolean	1	DEF	$
39486	586	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
39486	586	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
39486	586	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1476	593	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
1476	593	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
1476	593	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
39487	599	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
39487	599	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
39487	599	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
39487	599	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
1463	161	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
39465	173	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
39465	173	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
39466	181	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
39466	181	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
39467	187	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
39467	187	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
1464	212	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
39468	224	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
39468	224	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
39469	232	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
39469	232	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
39470	238	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
39470	238	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
1465	218	8	FastSineTransformer.java	fst	f	double	0	DEF	$[0] != 0.0
39471	233	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (N >> 1)
39472	245	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (N >> 1)
545	74	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
38433	87	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
38433	87	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
38434	94	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	$ < m
38434	94	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	col < $
38435	99	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < col
38435	99	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	row < $
38436	102	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < row
38436	102	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	i < $
38437	110	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
38437	110	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
38438	113	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < col
38438	113	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	i < $
546	118	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	THIS	FieldLUDecompositionImpl	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
546	118	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
546	118	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
547	125	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	RET	$ >= m
547	125	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	RET	nonZero >= $
548	131	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	DEF	$ != col
548	131	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	DEF	nonZero != $
38439	133	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < m
38439	133	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	i < $
38440	146	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
38440	146	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
549	156	8	FieldLUDecompositionImpl.java	getL	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
549	156	8	FieldLUDecompositionImpl.java	getL	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedL == null
38441	159	12	FieldLUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
38441	159	12	FieldLUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
38442	161	16	FieldLUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
38442	161	16	FieldLUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
550	172	8	FieldLUDecompositionImpl.java	getU	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
550	172	8	FieldLUDecompositionImpl.java	getU	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedU == null
38443	175	12	FieldLUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
38443	175	12	FieldLUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
38444	177	16	FieldLUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
38444	177	16	FieldLUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
551	187	8	FieldLUDecompositionImpl.java	getP	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedP == null
551	187	8	FieldLUDecompositionImpl.java	getP	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
38445	190	12	FieldLUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
38445	190	12	FieldLUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
552	204	8	FieldLUDecompositionImpl.java	getDeterminant	THIS	FieldLUDecompositionImpl	1	RET	$.singular
38446	209	12	FieldLUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
38446	209	12	FieldLUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
1156	99	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
1392	42	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	IllegalArgumentException	$ <= 0
1393	56	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
1133	85	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
363	178	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	a0 > $
363	178	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	$ > overflow
364	184	8	Fraction.java	Fraction	a0	long	0	RET	Math.abs($ - value) < epsilon
364	184	8	Fraction.java	Fraction	value	double	0	RET	Math.abs(a0 - $) < epsilon
364	184	8	Fraction.java	Fraction	epsilon	double	0	RET	Math.abs(a0 - value) < $
38224	200	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
365	206	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	q2 > $
365	206	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	p2 > $
365	206	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	$ > overflow
365	206	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	$ > overflow
366	211	12	Fraction.java	Fraction	convergent	double	1	DEF	Math.abs($ - value) > epsilon
366	211	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
366	211	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
366	211	12	Fraction.java	Fraction	value	double	1	DEF	Math.abs(convergent - $) > epsilon
366	211	12	Fraction.java	Fraction	epsilon	double	1	DEF	Math.abs(convergent - value) > $
366	211	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
366	211	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
367	223	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
367	223	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
368	227	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
368	227	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
369	254	8	Fraction.java	Fraction	den	int	0	DEF	$ == 0
370	258	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
371	259	12	Fraction.java	Fraction	num	int	0	DEF	$ == Integer.MIN_VALUE
371	259	12	Fraction.java	Fraction	den	int	0	DEF	$ == Integer.MIN_VALUE
372	268	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
373	274	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
374	288	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
375	331	8	Fraction.java	equals	THIS	Fraction	1	DEF	$ == other
375	331	8	Fraction.java	equals	other	Object	1	DEF	this == $
376	333	15	Fraction.java	equals	other	Object	1	DEF	$ == null
377	411	8	Fraction.java	negate	THIS	Fraction	0	DEF	$.numerator==Integer.MIN_VALUE
378	483	8	Fraction.java	addSub	fraction	Fraction	0	DEF	$ == null
379	487	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
380	490	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
380	490	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
381	496	8	Fraction.java	addSub	d1	int	0	RET	$==1
382	520	8	Fraction.java	addSub	w	BigInteger	0	DEF	$.bitLength() > 31
383	540	8	Fraction.java	multiply	fraction	Fraction	0	DEF	$ == null
384	543	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
384	543	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
384	543	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
385	575	8	Fraction.java	divide	fraction	Fraction	0	DEF	$ == null
386	578	8	Fraction.java	divide	THIS	Fraction	0	DEF	fraction.$.numerator == 0
386	578	8	Fraction.java	divide	fraction	Fraction	0	DEF	$.numerator == 0
387	607	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ == 0
388	612	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
389	616	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
389	616	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
390	619	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ < 0
391	620	12	Fraction.java	getReducedFraction	numerator	int	0	DEF	$==Integer.MIN_VALUE
391	620	12	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
392	648	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
393	650	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
347	175	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
348	177	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
349	205	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
350	229	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
351	262	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
39326	85	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
1268	113	8	Frequency.java	addValue	v	Object	1	DEF	$ instanceof Comparable<?>
1269	134	8	Frequency.java	addValue	v	Comparable<?>	0	DEF	$ instanceof Integer
1270	139	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
39327	216	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
1271	243	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
1272	249	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
1273	316	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
1274	381	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
1275	384	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
1276	388	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
1277	395	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
1278	402	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
1278	402	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
1278	402	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
1279	406	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
1279	406	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
1279	406	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
39328	411	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
1280	413	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
1280	413	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
1280	413	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
1281	491	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
1282	577	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
1282	577	8	Frequency.java	equals	obj	Object	0	RET	this == $
1283	579	8	Frequency.java	equals	obj	Object	0	RET	$ == null
1284	581	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
1285	584	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
1286	585	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
1286	585	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
1287	587	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
1287	587	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
1290	81	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
1449	91	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
1449	91	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
39461	97	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ > 0
1450	159	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
1450	159	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
1450	159	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
1450	159	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
1451	161	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
1452	163	15	Gamma.java	regularizedGammaP	a	double	1	DEF	$ >= 1.0
1452	163	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x > $
1452	163	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ > a
39462	172	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
39462	172	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	Math.abs($) > epsilon
39462	172	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	Math.abs(an) > $
39462	172	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
1453	180	12	Gamma.java	regularizedGammaP	n	double	1	MaxIterationsExceededException	$ >= maxIterations
1453	180	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxIterationsExceededException	n >= $
1454	234	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
1454	234	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
1454	234	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
1454	234	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
1455	236	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
1456	238	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ < 1.0
1456	238	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $
1456	238	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a
1457	292	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
1457	292	8	Gamma.java	digamma	x	double	0	RET	$ > 0
1458	298	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
1459	321	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
1459	321	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
1460	325	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
407	73	8	GammaDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
408	98	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
409	101	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
410	113	8	GammaDistributionImpl.java	setAlpha	alpha	double	0	DEF	$ <= 0.0
411	135	8	GammaDistributionImpl.java	setBeta	beta	double	0	DEF	$ <= 0.0
412	158	8	GammaDistributionImpl.java	density	x	Double	0	RET	$ < 0
413	194	8	GammaDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
414	220	8	GammaDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
39396	172	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs(previous - $.cost) > ($.cost * $.steadyStateThreshold)
39396	172	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs($.cost) > $.convergence
39396	172	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	$.getCostEvaluations() < 2
39396	172	8	GaussNewtonEstimator.java	estimate	previous	double	0	NIL-DOWHILE	Math.abs($ - cost) > (cost * steadyStateThreshold)
39397	178	12	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.measurements.$.length
39397	178	12	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < measurements.length
1409	179	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	DEF	$.measurements [i].isIgnored()
1409	179	16	GaussNewtonEstimator.java	estimate	i	int	0	DEF	measurements [$].isIgnored()
39398	185	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	j < $.parameters.$.length
39398	185	20	GaussNewtonEstimator.java	estimate	j	int	0	NIL-FOR	$ < parameters.length
39399	191	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	k < $.parameters.$.length
39399	191	20	GaussNewtonEstimator.java	estimate	k	int	0	NIL-FOR	$ < parameters.length
39400	193	24	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	l < $.parameters.$.length
39400	193	24	GaussNewtonEstimator.java	estimate	l	int	0	NIL-FOR	$ < parameters.length
39401	211	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.parameters.$.length
39401	211	16	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < parameters.length
39224	68	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
39225	81	12	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.rows
39225	81	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < rows
39226	89	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	j < $.cols
39226	89	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
39227	94	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	k < $.cols
39227	94	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
39228	97	20	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	l < $.cols
39228	97	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < cols
39229	114	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.cols
39229	114	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < cols
1066	123	12	GaussNewtonOptimizer.java	doOptimize	previous	VectorialPointValuePair	0	DEF	$ != null
1387	84	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	IllegalArgumentException	$ > 1
1387	84	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	IllegalArgumentException	$ < 0
1388	87	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	IllegalArgumentException	$ < 0
1388	87	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	IllegalArgumentException	$ > 1
39384	107	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
39384	107	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
39385	140	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
1389	145	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
1389	145	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
1390	151	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
1390	151	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
1391	161	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
1154	107	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
1155	195	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	DEF	$.getN() > 0
39548	101	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
39548	101	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1500	172	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stabilityReduction	double	1	DEF	$ < 0.0001
1500	172	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stabilityReduction	double	1	DEF	$ > 0.9999
1501	207	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl1	double	1	DEF	$ > 0.9999
1501	207	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl1	double	1	DEF	$ < 0.0001
1502	213	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl2	double	1	DEF	$ < 0.0001
1502	213	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl2	double	1	DEF	$ > 0.9999
1503	219	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl3	double	1	DEF	$ > 0.9999
1503	219	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl3	double	1	DEF	$ < 0.0001
1504	225	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl4	double	1	DEF	$ < 1.0001
1504	225	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl4	double	1	DEF	$ > 999.9
1505	259	4	GraggBulirschStoerIntegrator.java	setOrderControl	maxOrder	int	0	DEF	$ % 2 != 0
1505	259	4	GraggBulirschStoerIntegrator.java	setOrderControl	maxOrder	int	0	DEF	$ <= 6
1506	263	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl1	double	1	DEF	$ < 0.0001
1506	263	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl1	double	1	DEF	$ > 0.9999
1507	269	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl2	double	1	DEF	$ > 0.9999
1507	269	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl2	double	1	DEF	$ < 0.0001
1508	311	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
1508	311	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
1508	311	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
1509	320	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
39506	322	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
39506	322	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
39507	327	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
39507	327	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
39508	335	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
39508	335	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
39509	340	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
39509	340	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
39510	342	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
39510	342	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
1510	365	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudif	int	1	DEF	$ <= 0
1510	365	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudif	int	1	DEF	$ >= 7
1511	379	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
39511	380	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
39511	380	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
39511	380	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
39512	385	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
39512	385	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
39512	385	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
39513	421	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
39513	421	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
39513	421	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
39514	428	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
39514	428	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
1512	430	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
1512	430	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
39515	436	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
39515	436	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
39515	436	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
1513	445	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
1513	445	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
1513	445	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
1513	445	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
1513	445	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
39516	447	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
39516	447	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
39516	447	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
39517	452	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
39517	452	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
39517	452	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
1514	456	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * Math.max(1.0e-15, $)
1514	456	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * Math.max(1.0e-15, initialNorm)
39518	464	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
39518	464	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
39518	464	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
39519	483	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
39519	483	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
39520	484	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
39520	484	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
39520	484	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
39521	492	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
39521	492	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
39521	492	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
39522	517	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
39522	517	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
39523	523	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
39523	523	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
39524	530	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
39524	530	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
39524	530	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
1515	536	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1515	536	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1516	542	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
39525	545	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < yMidDots.$.length
39525	545	6	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < yMidDots.length
39525	545	6	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	0	NIL-FOR	j < $.length
1517	566	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
1517	566	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
39526	587	4	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
1518	592	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
1519	597	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
1520	601	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1521	607	10	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1522	620	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
1522	620	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
1522	620	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1522	620	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1522	620	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
1522	620	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
39527	629	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1523	634	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1523	634	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
1523	634	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
1523	634	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
1523	634	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1523	634	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
1523	634	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1523	634	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1523	634	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1523	634	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1524	647	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
39528	656	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < y0.$.length
39528	656	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
39528	656	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1525	662	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
1525	662	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
1525	662	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
1525	662	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
1526	683	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1526	683	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1527	686	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1528	695	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1528	695	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1529	701	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1529	701	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1529	701	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1530	713	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1531	721	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1531	721	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1532	726	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1532	726	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1532	726	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1533	737	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
1534	739	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1534	739	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1534	739	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1535	750	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
1535	750	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1535	750	16	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1536	764	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.denseOutput
1536	764	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
39529	767	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
39529	767	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
39530	776	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
39530	776	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
39531	782	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
39531	782	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
39531	782	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
39532	785	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
39532	785	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
39532	785	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
39533	788	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
39533	788	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
39533	788	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
39534	793	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
39534	793	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
39534	793	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
39535	798	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
39535	798	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
39536	799	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
39536	799	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
39537	800	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
39537	800	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
39537	800	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
1537	808	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
1538	815	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
1539	820	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
1540	827	10	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1541	829	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.evaluateStep(interpolator)
1541	829	12	GraggBulirschStoerIntegrator.java	integrate	interpolator	AbstractStepInterpolator	0	DEF	eventsHandlersManager.evaluateStep($)
1542	831	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	Math.abs(dt) > Math.ulp($.stepStart)
1542	831	16	GraggBulirschStoerIntegrator.java	integrate	dt	double	0	DEF	Math.abs($) > Math.ulp(stepStart)
1543	841	8	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1544	849	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1545	856	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.stop()
1546	867	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.reset($.stepStart, y)
1546	867	8	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1546	867	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	eventsHandlersManager.reset(stepStart, $)
1547	874	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
1548	876	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1549	879	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
1549	879	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
1550	881	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
1550	881	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1551	883	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1551	883	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1552	888	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
1552	888	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
1552	888	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
1553	892	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
1553	892	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
1553	892	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
1554	897	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
1555	904	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
1555	904	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
1556	907	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1556	907	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1556	907	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
1556	907	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
1557	926	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1558	932	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
1587	111	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
1588	118	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms != null
39569	120	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
39569	120	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
39569	120	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
39570	124	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
39570	124	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
39570	124	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
1589	131	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
39571	135	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
39571	135	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
39572	139	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
39572	139	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
1590	210	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynoms == null
1590	210	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms == null
39573	215	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynoms.$.length
39573	215	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynoms.length
1591	238	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms.$.length <= (mu + 4)
1591	238	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms == null
1591	238	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynoms.length <= ($ + 4)
39574	244	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
39574	244	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
1592	257	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
1593	265	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
1594	269	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
1595	273	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
39575	277	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
39575	277	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
1596	297	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
39576	298	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
39576	298	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < currentState.length
39577	324	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
39577	324	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
1597	333	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
39578	336	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
1598	347	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
39579	367	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
39579	367	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
39580	368	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
39580	368	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
39581	389	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
39581	389	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
39582	390	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
39582	390	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
39133	167	8	HarmonicCoefficientsGuesser.java	sortObservations	THIS	HarmonicCoefficientsGuesser	0	NIL-FOR	j < $.observations.$.length
39133	167	8	HarmonicCoefficientsGuesser.java	sortObservations	j	int	0	NIL-FOR	$ < observations.length
977	170	12	HarmonicCoefficientsGuesser.java	sortObservations	prec	WeightedObservedPoint	0	DEF	curr.getX() < $.getX()
977	170	12	HarmonicCoefficientsGuesser.java	sortObservations	curr	WeightedObservedPoint	0	DEF	$.getX() < prec.getX()
39134	174	16	HarmonicCoefficientsGuesser.java	sortObservations	i	int	0	NIL-WHILE	$ >= 0
39134	174	16	HarmonicCoefficientsGuesser.java	sortObservations	mI	WeightedObservedPoint	0	NIL-WHILE	curr.getX() < $.getX()
39134	174	16	HarmonicCoefficientsGuesser.java	sortObservations	curr	WeightedObservedPoint	0	NIL-WHILE	$.getX() < mI.getX()
978	176	20	HarmonicCoefficientsGuesser.java	sortObservations	i	int	1	DEF	$-- != 0
39135	208	8	HarmonicCoefficientsGuesser.java	guessAOmega	THIS	HarmonicCoefficientsGuesser	0	NIL-FOR	i < $.observations.$.length
39135	208	8	HarmonicCoefficientsGuesser.java	guessAOmega	i	int	0	NIL-FOR	$ < observations.length
979	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c1	double	0	OptimizationException	$ / c2 < 0.0
979	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c2	double	0	OptimizationException	$ / c3 < 0.0
979	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c2	double	0	OptimizationException	c1 / $ < 0.0
979	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c3	double	0	OptimizationException	c2 / $ < 0.0
39136	258	8	HarmonicCoefficientsGuesser.java	guessPhi	THIS	HarmonicCoefficientsGuesser	0	NIL-FOR	i < $.observations.$.length
39136	258	8	HarmonicCoefficientsGuesser.java	guessPhi	i	int	0	NIL-FOR	$ < observations.length
975	82	12	HarmonicFitter.java	fit	THIS	HarmonicFitter	0	OptimizationException	$.parameters == null
976	84	16	HarmonicFitter.java	fit	THIS	HarmonicFitter	0	OptimizationException	observations.$.length < 4
976	84	16	HarmonicFitter.java	fit	observations	WeightedObservedPoint[]	0	OptimizationException	$.length < 4
39607	111	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < y0.$.length
39607	111	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
39607	111	4	HighamHall54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
39608	113	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < $.staticE.$.length
39608	113	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < staticE.length
39606	85	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
39606	85	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
478	56	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	DEF	numberOfSuccesses > $
478	56	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	numberOfSuccesses	int	0	DEF	$ > populationSize
479	61	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	DEF	sampleSize > $
479	61	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	sampleSize	int	0	DEF	$ > populationSize
480	85	8	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
480	85	8	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
481	87	15	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
481	87	15	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
482	199	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x < $[0]
482	199	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x > $[1]
482	199	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ < domain[0]
482	199	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ > domain[1]
483	230	8	HypergeometricDistributionImpl.java	setNumberOfSuccesses	num	int	0	DEF	$ < 0
484	244	8	HypergeometricDistributionImpl.java	setPopulationSize	size	int	0	DEF	$ <= 0
485	258	8	HypergeometricDistributionImpl.java	setSampleSize	size	int	0	DEF	$ < 0
486	280	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x < $[0]
486	280	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ < domain[0]
487	282	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
487	282	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
38228	308	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
38228	308	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
39295	61	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
39295	61	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
1244	66	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	newCenter.equals($.cluster.getCenter())
1244	66	16	KMeansPlusPlusClusterer.java	cluster	newCenter	T	0	DEF	$.equals(cluster.getCenter())
1245	71	12	KMeansPlusPlusClusterer.java	cluster	clusteringChanged	boolean	0	RET	$
39296	115	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
39296	115	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
39297	119	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < pointSet.size()
39297	119	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	pointSet	List<T>	0	NIL-FOR	i < $.size()
39298	130	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	THIS	KMeansPlusPlusClusterer	0	NIL-FOR	i < dx2.$.length
39298	130	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < dx2.length
39298	130	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	dx2	double[]	0	NIL-FOR	i < $.length
1246	131	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	dx2[$] >= r
1246	131	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	dx2[i] >= $
1246	131	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	dx2	double[]	0	DEF	$[i] >= r
1247	157	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
1247	157	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
1149	94	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
1150	108	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
1151	110	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
1151	110	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
1152	128	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
1153	166	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
1153	166	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1153	166	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
1153	166	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
1153	166	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
39274	177	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
39274	177	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
39274	177	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
932	80	8	LUDecompositionImpl.java	LUDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
39079	92	8	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
39079	92	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
39080	99	8	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	$ < m
39080	99	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	col < $
39081	104	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < col
39081	104	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	row < $
39082	107	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < row
39082	107	16	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	i < $
39083	116	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
39083	116	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
39084	119	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < col
39084	119	16	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	i < $
933	125	16	LUDecompositionImpl.java	LUDecompositionImpl	sum	double	0	DEF	Math.abs($) > largest
933	125	16	LUDecompositionImpl.java	LUDecompositionImpl	largest	double	0	DEF	Math.abs(sum) > $
934	132	12	LUDecompositionImpl.java	LUDecompositionImpl	THIS	LUDecompositionImpl	0	RET	Math.abs($.lu[max][col]) < singularityThreshold
934	132	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	RET	Math.abs(lu[$][col]) < singularityThreshold
934	132	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	RET	Math.abs(lu[max][$]) < singularityThreshold
934	132	12	LUDecompositionImpl.java	LUDecompositionImpl	singularityThreshold	double	0	RET	Math.abs(lu[max][col]) < $
935	138	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	DEF	$ != col
935	138	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	DEF	max != $
39085	142	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < m
39085	142	16	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	i < $
39086	155	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
39086	155	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
936	164	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.singular
936	164	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.cachedL == null
39087	167	12	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
39087	167	12	LUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
39088	169	16	LUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
39088	169	16	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
937	180	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.singular
937	180	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.cachedU == null
39089	183	12	LUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
39089	183	12	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
39090	185	16	LUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
39090	185	16	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
938	195	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.cachedP == null
938	195	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.singular
39091	198	12	LUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
39091	198	12	LUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
939	212	8	LUDecompositionImpl.java	getDeterminant	THIS	LUDecompositionImpl	1	RET	$.singular
39092	217	12	LUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
39092	217	12	LUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
1729	60	8	LaguerreSolver.java	LaguerreSolver	f	UnivariateRealFunction	1	DEF	$ instanceof PolynomialFunction
1730	120	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1730	120	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1731	121	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1731	121	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1732	122	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1732	122	8	LaguerreSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1733	126	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	1	RET	$.isBracketing(min, initial, f)
1733	126	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1733	126	8	LaguerreSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1733	126	8	LaguerreSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1734	158	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	DEF	$ instanceof PolynomialFunction
1735	163	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1735	163	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1736	164	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1736	164	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
39635	169	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < coefficients.$.length
39635	169	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < coefficients.length
39635	169	8	LaguerreSolver.java	solve	coefficients	double[]	0	NIL-FOR	i < $.length
1737	174	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, z)
1737	174	8	LaguerreSolver.java	solve	z	Complex	0	RET	isRootOK(min, max, $)
1737	174	8	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, z)
1737	174	8	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, z)
39636	181	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
39636	181	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < root.length
39636	181	8	LaguerreSolver.java	solve	root	Complex[]	0	NIL-FOR	i < $.length
1738	182	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, root[i])
1738	182	12	LaguerreSolver.java	solve	i	int	0	RET	isRootOK(min, max, root[$])
1738	182	12	LaguerreSolver.java	solve	root	Complex[]	0	RET	isRootOK(min, max, $[i])
1738	182	12	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, root[i])
1738	182	12	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, root[i])
39637	226	8	LaguerreSolver.java	solveAll	THIS	LaguerreSolver	0	NIL-FOR	i < c.$.length
39637	226	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < c.length
39637	226	8	LaguerreSolver.java	solveAll	c	Complex[]	0	NIL-FOR	i < $.length
1739	250	8	LaguerreSolver.java	solveAll	n	int	0	DEF	$ < 1
39638	255	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ <= n
39638	255	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i <= $
39639	261	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < n
39639	261	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i < $
39640	268	12	LaguerreSolver.java	solveAll	j	int	0	NIL-FOR	$ >= 0
1740	298	8	LaguerreSolver.java	solve	n	int	0	DEF	$ < 1
39641	316	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-WHILE	i <= $.maximalIterationCount
39641	316	8	LaguerreSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
39642	322	12	LaguerreSolver.java	solve	j	int	0	NIL-FOR	$ >= 0
1741	332	12	LaguerreSolver.java	solve	tolerance	double	0	RET	(z.subtract(oldz)).abs() <= $
1741	332	12	LaguerreSolver.java	solve	z	Complex	0	RET	($.subtract(oldz)).abs() <= tolerance
1741	332	12	LaguerreSolver.java	solve	oldz	Complex	0	RET	(z.subtract($)).abs() <= tolerance
1742	337	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	pv.abs() <= $.functionValueAccuracy
1742	337	12	LaguerreSolver.java	solve	pv	Complex	0	RET	$.abs() <= functionValueAccuracy
1743	355	12	LaguerreSolver.java	solve	denominator	Complex	1	DEF	$.equals(new Complex(0.0, 0.0))
1012	114	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DEF	observations.$.length != weights.$.length
1012	114	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DEF	$.length != weights.length
1012	114	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DEF	observations.length != $.length
1013	147	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DEF	observations.$.length != scale.getColumnDimension()
1013	147	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DEF	$.length != scale.getColumnDimension()
1013	147	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DEF	observations.length != $.getColumnDimension()
1014	163	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	FunctionEvaluationException	residuals.$.length != $.observations.$.length
1014	163	8	LeastSquaresConverter.java	value	residuals	double[]	0	FunctionEvaluationException	$.length != observations.length
39154	167	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
39154	167	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
39154	167	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1015	173	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
39155	174	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
39155	174	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
39155	174	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1016	178	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
39676	175	8	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	NIL-FOR	i < $.maximalIterationCount
39676	175	8	LegendreGaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < maximalIterationCount
1814	187	12	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	RET	i + 1 >= $.minimalIterationCount
1814	187	12	LegendreGaussIntegrator.java	integrate	delta	double	0	RET	$ <= limit
1814	187	12	LegendreGaussIntegrator.java	integrate	limit	double	0	RET	delta <= $
1814	187	12	LegendreGaussIntegrator.java	integrate	i	int	0	RET	$ + 1 >= minimalIterationCount
39677	224	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
39677	224	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
39678	225	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
39678	225	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
39411	242	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
39411	242	6	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < solvedCols
1413	247	6	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
39412	252	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
39412	252	8	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
1414	254	10	LevenbergMarquardtEstimator.java	estimate	dk	double	0	DEF	$ == 0
1415	270	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.cost != 0
39413	271	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39413	271	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1416	274	10	LevenbergMarquardtEstimator.java	estimate	s	double	0	DEF	$ != 0
39414	276	12	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
39414	276	12	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
1417	283	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	maxCosine <= $.orthoTolerance
1417	283	6	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	RET	$ <= orthoTolerance
39415	288	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
39415	288	6	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < cols
39416	293	6	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	NIL-FOR	$ < 1.0e-4
39417	296	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39417	296	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
39418	310	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39418	310	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1418	320	8	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
1419	329	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost < previousCost
1419	329	8	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost < $
39419	336	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39419	336	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
39420	340	10	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
39420	340	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
39421	345	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39421	345	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1420	358	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ <= 0.25
1421	361	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost >= previousCost
1421	361	10	LevenbergMarquardtEstimator.java	estimate	tmp	double	0	DEF	$ < 0.1
1421	361	10	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost >= $
1422	366	15	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
1422	366	15	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	DEF	$ >= 0.75
1423	372	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ >= 1.0e-4
39422	376	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
39422	376	10	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
39423	384	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39423	384	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1424	394	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	Math.abs(actRed) <= $.costRelativeTolerance
1424	394	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	preRed <= $.costRelativeTolerance
1424	394	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	delta <= $.parRelativeTolerance * xNorm
1424	394	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	0	RET	Math.abs($) <= costRelativeTolerance
1424	394	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	0	RET	$ <= costRelativeTolerance
1424	394	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	RET	$ <= 2.0
1424	394	8	LevenbergMarquardtEstimator.java	estimate	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1424	394	8	LevenbergMarquardtEstimator.java	estimate	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1425	403	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	1	EstimationException	Math.abs($) <= 2.2204e-16
1425	403	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	1	EstimationException	$ <= 2.2204e-16
1425	403	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	EstimationException	$ <= 2.0
1426	408	15	LevenbergMarquardtEstimator.java	estimate	delta	double	1	EstimationException	$ <= 2.2204e-16 * xNorm
1426	408	15	LevenbergMarquardtEstimator.java	estimate	xNorm	double	1	EstimationException	delta <= 2.2204e-16 * $
1427	413	15	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	EstimationException	$ <= 2.2204e-16
39424	452	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.rank
39424	452	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
39425	455	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
39425	455	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
39426	458	4	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
39427	461	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
39427	461	6	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	i < $
39428	470	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39428	470	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1428	478	4	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1428	478	4	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1429	487	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.rank == $.solvedCols
39429	488	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39429	488	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
39430	493	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39430	493	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
39431	496	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
39431	496	8	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i < $
39432	508	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39432	508	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
39433	511	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
39433	511	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1430	519	4	LevenbergMarquardtEstimator.java	determineLMParameter	paru	double	0	DEF	$ == 0
1431	527	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
39434	531	4	LevenbergMarquardtEstimator.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1432	534	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
39435	538	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39435	538	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
39436	545	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39436	545	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1433	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1433	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1433	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	Math.abs($) <= 0.1 * delta
1433	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1433	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	parl	double	0	RET	$ == 0
1433	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	Math.abs(fp) <= 0.1 * $
39437	563	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39437	563	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
39438	567	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39438	567	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
39439	571	8	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
39439	571	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
39440	576	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39440	576	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1434	583	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	1	DEF	$ > 0
1435	585	13	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	DEF	$ < 0
39441	620	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39441	620	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
39442	622	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
39442	622	6	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
39443	630	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39443	630	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1436	636	6	LevenbergMarquardtEstimator.java	determineLMDirection	dpj	double	0	DEF	$ != 0
39444	645	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
39444	645	6	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1437	650	8	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1437	650	8	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1438	654	10	LevenbergMarquardtEstimator.java	determineLMDirection	rkk	double	1	DEF	Math.abs($) < Math.abs(lmDiag[k])
1438	654	10	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	1	DEF	Math.abs(rkk) < Math.abs(lmDiag[$])
1438	654	10	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	1	DEF	Math.abs(rkk) < Math.abs($[k])
39445	672	10	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
39445	672	10	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
39446	693	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
39446	693	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1439	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing == $.solvedCols
1439	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1439	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1439	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1440	697	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing < $.solvedCols
1440	697	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1441	701	4	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ > 0
39447	702	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
39448	705	8	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
39448	705	8	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
39449	713	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.lmDir.$.length
39449	713	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
39450	744	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
39450	744	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
39451	747	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
39451	747	6	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
39452	755	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
39452	755	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
39453	760	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.cols
39453	760	6	LevenbergMarquardtEstimator.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
39454	763	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
39454	763	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
1442	767	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isNaN($)
1442	767	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isInfinite($)
1443	772	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1443	772	8	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1444	777	6	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	RET	$ == 0
39455	797	6	LevenbergMarquardtEstimator.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
39456	800	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
39456	800	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
39457	804	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
39457	804	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
39458	821	4	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
39458	821	4	LevenbergMarquardtEstimator.java	qTy	k	int	0	NIL-FOR	$ < cols
39459	825	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
39459	825	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
39460	829	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
39460	829	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
39157	249	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
39157	249	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
1018	254	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
39158	259	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
39158	259	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1019	261	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1020	277	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.cost != 0
39159	278	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39159	278	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1021	281	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
39160	283	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
39160	283	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1022	290	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1022	290	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
39161	296	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
39161	296	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
39162	301	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
39163	304	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39163	304	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
39164	318	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39164	318	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1023	328	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1024	337	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost < previousCost
1024	337	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost < $
39165	344	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39165	344	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
39166	348	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
39166	348	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
39167	353	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39167	353	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1025	366	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1026	369	24	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost >= previousCost
1026	369	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1026	369	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost >= $
1027	374	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1027	374	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1028	380	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ >= 1.0e-4
39168	384	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
39168	384	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
39169	392	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39169	392	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1029	402	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1029	402	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	Math.abs(actRed) <= $.costRelativeTolerance
1029	402	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1029	402	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	Math.abs($) <= costRelativeTolerance
1029	402	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1029	402	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1029	402	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1029	402	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1030	411	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	OptimizationException	Math.abs($) <= 2.2204e-16
1030	411	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	OptimizationException	$ <= 2.2204e-16
1030	411	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	OptimizationException	$ <= 2.0
1031	416	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	OptimizationException	$ <= 2.2204e-16 * xNorm
1031	416	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	OptimizationException	delta <= 2.2204e-16 * $
1032	421	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	OptimizationException	$ <= 2.2204e-16
39170	460	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
39170	460	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
39171	463	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
39171	463	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
39172	466	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
39173	469	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
39173	469	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
39174	478	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39174	478	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1033	486	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1033	486	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1034	495	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
39175	496	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39175	496	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
39176	501	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39176	501	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
39177	504	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
39177	504	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
39178	516	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39178	516	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
39179	519	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
39179	519	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1035	527	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1036	535	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
39180	539	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1037	542	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
39181	546	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39181	546	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
39182	553	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39182	553	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1038	565	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1038	565	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1038	565	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1038	565	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	Math.abs($) <= 0.1 * delta
1038	565	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1038	565	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	Math.abs(fp) <= 0.1 * $
39183	571	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39183	571	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
39184	575	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39184	575	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
39185	579	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
39185	579	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
39186	584	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39186	584	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1039	591	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1040	593	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
39187	628	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39187	628	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
39188	630	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
39188	630	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
39189	638	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39189	638	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1041	644	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
39190	653	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
39190	653	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1042	658	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1042	658	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1043	662	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	Math.abs($) < Math.abs(lmDiag[k])
1043	662	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	Math.abs(rkk) < Math.abs(lmDiag[$])
1043	662	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	Math.abs(rkk) < Math.abs($[k])
39191	680	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
39191	680	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
39192	700	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
39192	700	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1044	701	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1044	701	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1044	701	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1044	701	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1045	704	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1045	704	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1046	708	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
39193	709	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
39194	712	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
39194	712	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
39195	720	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
39195	720	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
39196	751	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
39196	751	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
39197	754	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.jacobian.$.length
39197	754	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < jacobian.length
39198	762	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
39198	762	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
39199	767	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.cols
39199	767	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
39200	769	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.jacobian.$.length
39200	769	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < jacobian.length
1047	773	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	OptimizationException	Double.isNaN($)
1047	773	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	OptimizationException	Double.isInfinite($)
1048	778	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1048	778	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1049	783	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ == 0
39201	802	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
39202	804	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.jacobian.$.length
39202	804	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < jacobian.length
39203	808	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.jacobian.$.length
39203	808	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < jacobian.length
39204	825	8	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
39204	825	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < cols
39205	828	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
39205	828	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
39206	832	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
39206	832	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
39138	128	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
39138	128	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
39138	128	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
982	191	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
982	191	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
983	195	6	LinearConstraint.java	equals	other	Object	0	RET	$ == null
996	108	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
996	108	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
997	112	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ == null
1383	45	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	IllegalArgumentException	$.size() > populationLimit
1383	45	8	ListPopulation.java	ListPopulation	populationLimit	int	0	IllegalArgumentException	chromosomes.size() > $
1384	48	8	ListPopulation.java	ListPopulation	populationLimit	int	0	IllegalArgumentException	$ < 0
1385	63	8	ListPopulation.java	ListPopulation	populationLimit	int	0	IllegalArgumentException	$ < 0
1386	102	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
1386	102	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
1665	105	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	MathException	$ > 1
1665	105	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	MathException	$ < 0
1666	110	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	MathException	$ < 0
1667	155	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	MathException	xval.$.length != yval.$.length
1667	155	8	LoessInterpolator.java	smooth	xval	double[]	0	MathException	$.length != yval.length
1667	155	8	LoessInterpolator.java	smooth	yval	double[]	0	MathException	xval.length != $.length
1668	165	8	LoessInterpolator.java	smooth	n	int	0	MathException	$ == 0
1669	174	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
1670	178	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
1671	184	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	MathException	$ < 2
39621	205	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
39621	205	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
39622	208	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
39622	208	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
1672	213	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
1673	223	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
1673	223	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
1673	223	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
1673	223	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
39623	239	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
39623	239	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
1674	243	20	LoessInterpolator.java	smooth	k	int	1	DEF	$ < i
1674	243	20	LoessInterpolator.java	smooth	i	int	1	DEF	k < $
1675	263	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	meanXSquared == $ * $
1675	263	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	$ == meanX * meanX
1676	277	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
1676	277	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
1677	290	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	$ == 0
39624	294	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
39624	294	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
1678	323	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	right < xval.$.length - 1
1678	323	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[right+1] - xval[i] < xval[i] - xval[$]
1678	323	8	LoessInterpolator.java	updateBandwidthInterval	right	int	0	DEF	xval[$+1] - xval[i] < xval[i] - xval[left]
1678	323	8	LoessInterpolator.java	updateBandwidthInterval	right	int	0	DEF	$ < xval.length - 1
1678	323	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[right+1] - $[i] < $[i] - $[left]
1678	323	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	right < $.length - 1
1678	323	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[right+1] - xval[$] < xval[$] - xval[left]
39625	353	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
39625	353	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
39625	353	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
1679	355	12	LoessInterpolator.java	checkAllFiniteReal	x	double	0	MathException	Double.isInfinite($)
1679	355	12	LoessInterpolator.java	checkAllFiniteReal	x	double	0	MathException	Double.isNaN($)
39626	374	8	LoessInterpolator.java	checkStrictlyIncreasing	THIS	LoessInterpolator	0	NIL-FOR	i < xval.$.length
39626	374	8	LoessInterpolator.java	checkStrictlyIncreasing	i	int	0	NIL-FOR	$ < xval.length
39626	374	8	LoessInterpolator.java	checkStrictlyIncreasing	xval	double[]	0	NIL-FOR	i < $.length
1680	375	12	LoessInterpolator.java	checkStrictlyIncreasing	i	int	0	MathException	xval[$ - 1] >= xval[$]
1680	375	12	LoessInterpolator.java	checkStrictlyIncreasing	i	int	0	MathException	$ >= 1
1680	375	12	LoessInterpolator.java	checkStrictlyIncreasing	xval	double[]	0	MathException	$[i - 1] >= $[i]
0	62	12	MathException.java	translate	bundle	ResourceBundle	0	RET	$.getLocale().getLanguage().equals(locale.getLanguage())
0	62	12	MathException.java	translate	locale	Locale	0	RET	bundle.getLocale().getLanguage().equals($.getLanguage())
1309	63	12	MathRuntimeException.java	translate	bundle	ResourceBundle	0	RET	$.getLocale().getLanguage().equals(locale.getLanguage())
1309	63	12	MathRuntimeException.java	translate	locale	Locale	0	RET	bundle.getLocale().getLanguage().equals($.getLanguage())
70	87	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
70	87	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
71	120	8	MathUtils.java	addAndCheck	a	long	1	DEF	$ > b
71	120	8	MathUtils.java	addAndCheck	b	long	1	DEF	a > $
72	126	12	MathUtils.java	addAndCheck	a	long	1	ArithmeticException	$ < 0
73	127	16	MathUtils.java	addAndCheck	b	long	1	ArithmeticException	$ < 0
74	129	20	MathUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
74	129	20	MathUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
75	143	16	MathUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
75	143	16	MathUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
76	180	8	MathUtils.java	binomialCoefficient	n	int	0	RET	$ == k
76	180	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
76	180	8	MathUtils.java	binomialCoefficient	k	int	0	RET	n == $
77	183	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
77	183	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
77	183	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
78	187	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
78	187	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
79	196	8	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
38191	198	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
38191	198	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
80	201	15	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
38192	204	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
38192	204	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
38193	218	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
38193	218	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
81	250	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
81	250	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
81	250	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
82	253	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
82	253	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
82	253	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
83	256	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
83	256	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
84	259	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
38194	264	8	MathUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
38194	264	8	MathUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
85	291	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
85	291	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
85	291	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
86	294	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
86	294	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
86	294	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
87	302	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
88	310	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
89	314	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
89	314	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
38195	324	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
38195	324	8	MathUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
38196	329	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
38196	329	8	MathUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
90	344	8	MathUtils.java	checkBinomial	n	int	0	DEF	$ < k
90	344	8	MathUtils.java	checkBinomial	k	int	0	DEF	n < $
91	349	8	MathUtils.java	checkBinomial	n	int	0	DEF	$ < 0
92	367	8	MathUtils.java	compareTo	THIS	MathUtils	1	RET	$.equals(x, y, eps)
92	367	8	MathUtils.java	compareTo	x	double	1	RET	equals($, y, eps)
92	367	8	MathUtils.java	compareTo	y	double	1	RET	equals(x, $, eps)
92	367	8	MathUtils.java	compareTo	eps	double	1	RET	equals(x, y, $)
93	369	15	MathUtils.java	compareTo	x	double	0	RET	$ < y
93	369	15	MathUtils.java	compareTo	y	double	0	RET	x < $
94	437	8	MathUtils.java	equals	xInt	long	0	DEF	$ < 0
95	440	8	MathUtils.java	equals	yInt	long	0	DEF	$ < 0
96	458	8	MathUtils.java	equals	x	double[]	0	RET	$ == null
96	458	8	MathUtils.java	equals	y	double[]	0	RET	$ == null
97	461	8	MathUtils.java	equals	THIS	MathUtils	0	RET	x.$.length != y.$.length
97	461	8	MathUtils.java	equals	x	double[]	0	RET	$.length != y.length
97	461	8	MathUtils.java	equals	y	double[]	0	RET	x.length != $.length
38197	464	8	MathUtils.java	equals	THIS	MathUtils	0	NIL-FOR	i < x.$.length
38197	464	8	MathUtils.java	equals	i	int	0	NIL-FOR	$ < x.length
38197	464	8	MathUtils.java	equals	x	double[]	0	NIL-FOR	i < $.length
98	465	12	MathUtils.java	equals	THIS	MathUtils	0	RET	$.equals(x[i], y[i])
98	465	12	MathUtils.java	equals	i	int	0	RET	equals(x[$], y[$])
98	465	12	MathUtils.java	equals	x	double[]	0	RET	equals($[i], y[i])
98	465	12	MathUtils.java	equals	y	double[]	0	RET	equals(x[i], $[i])
99	502	8	MathUtils.java	factorial	n	int	0	DEF	$ < 0
100	507	8	MathUtils.java	factorial	n	int	0	ArithmeticException	$ > 20
101	535	8	MathUtils.java	factorialDouble	n	int	0	DEF	$ < 0
102	540	8	MathUtils.java	factorialDouble	n	int	0	RET	$ < 21
103	560	8	MathUtils.java	factorialLog	n	int	0	DEF	$ < 0
104	565	8	MathUtils.java	factorialLog	n	int	0	RET	$ < 21
38198	569	8	MathUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
38198	569	8	MathUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
105	608	8	MathUtils.java	gcd	u	int	0	RET	$ == 0
105	608	8	MathUtils.java	gcd	v	int	0	RET	$ == 0
106	609	12	MathUtils.java	gcd	u	int	0	DEF	$ == Integer.MIN_VALUE
106	609	12	MathUtils.java	gcd	v	int	0	DEF	$ == Integer.MIN_VALUE
107	621	8	MathUtils.java	gcd	u	int	0	DEF	$ > 0
108	624	8	MathUtils.java	gcd	v	int	0	DEF	$ > 0
38199	629	8	MathUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
38199	629	8	MathUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
38199	629	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
109	635	8	MathUtils.java	gcd	k	int	0	DEF	$ == 31
38200	645	8	MathUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
38201	648	12	MathUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
110	652	12	MathUtils.java	gcd	t	int	1	DEF	$ > 0
111	706	8	MathUtils.java	indicator	x	double	0	RET	Double.isNaN($)
112	720	8	MathUtils.java	indicator	x	float	0	RET	Float.isNaN($)
113	781	8	MathUtils.java	lcm	a	int	0	RET	$==0
113	781	8	MathUtils.java	lcm	b	int	0	RET	$==0
114	785	8	MathUtils.java	lcm	lcm	int	0	ArithmeticException	$ == Integer.MIN_VALUE
115	823	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ < Integer.MIN_VALUE
115	823	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ > Integer.MAX_VALUE
116	842	8	MathUtils.java	mulAndCheck	a	long	1	DEF	$ > b
116	842	8	MathUtils.java	mulAndCheck	b	long	1	DEF	a > $
117	846	12	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ < 0
118	847	16	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ < 0
119	849	20	MathUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
119	849	20	MathUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
120	854	23	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ > 0
121	856	20	MathUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
121	856	20	MathUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
122	866	19	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ > 0
123	871	16	MathUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
123	871	16	MathUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
124	904	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isInfinite($)
124	904	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isNaN($)
125	906	15	MathUtils.java	nextAfter	d	double	0	RET	$ == 0
126	918	8	MathUtils.java	nextAfter	d	double	1	RET	$ * (direction - $) >= 0
126	918	8	MathUtils.java	nextAfter	direction	double	1	RET	d * ($ - d) >= 0
127	920	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0x000fffffffffffffL
128	929	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0L
129	953	8	MathUtils.java	scalb	d	double	0	RET	$ == 0
129	953	8	MathUtils.java	scalb	d	double	0	RET	Double.isInfinite($)
129	953	8	MathUtils.java	scalb	d	double	0	RET	Double.isNaN($)
130	1023	12	MathUtils.java	round	x	double	1	RET	Double.isInfinite($)
131	1078	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
132	1088	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
133	1097	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
134	1106	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
135	1108	19	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
136	1112	16	MathUtils.java	roundUnscaled	unscaled	double	1	DEF	Math.floor($) / 2.0 == Math.floor(Math .floor($) / 2.0)
137	1124	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
138	1132	12	MathUtils.java	roundUnscaled	unscaled	double	0	ArithmeticException	$ != Math.floor($)
139	1183	8	MathUtils.java	sign	x	double	0	RET	Double.isNaN($)
140	1201	8	MathUtils.java	sign	x	float	0	RET	Float.isNaN($)
141	1273	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
141	1273	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
142	1292	8	MathUtils.java	subAndCheck	b	long	1	ArithmeticException	$ == Long.MIN_VALUE
143	1293	12	MathUtils.java	subAndCheck	a	long	1	DEF	$ < 0
144	1315	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
38202	1323	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
145	1324	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
146	1345	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
38203	1353	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
147	1354	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
148	1375	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
38204	1383	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
149	1384	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
150	1405	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
38205	1413	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
151	1414	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
152	1435	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
153	1455	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
38206	1463	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
154	1464	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
155	1485	8	MathUtils.java	pow	e	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
38207	1493	8	MathUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
156	1494	12	MathUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
38208	1514	8	MathUtils.java	distance1	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
38208	1514	8	MathUtils.java	distance1	i	int	0	NIL-FOR	$ < p1.length
38208	1514	8	MathUtils.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
38209	1529	6	MathUtils.java	distance1	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
38209	1529	6	MathUtils.java	distance1	i	int	0	NIL-FOR	$ < p1.length
38209	1529	6	MathUtils.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
38210	1544	8	MathUtils.java	distance	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
38210	1544	8	MathUtils.java	distance	i	int	0	NIL-FOR	$ < p1.length
38210	1544	8	MathUtils.java	distance	p1	double[]	0	NIL-FOR	i < $.length
38211	1560	6	MathUtils.java	distance	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
38211	1560	6	MathUtils.java	distance	i	int	0	NIL-FOR	$ < p1.length
38211	1560	6	MathUtils.java	distance	p1	int[]	0	NIL-FOR	i < $.length
38212	1576	8	MathUtils.java	distanceInf	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
38212	1576	8	MathUtils.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
38212	1576	8	MathUtils.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
38213	1591	8	MathUtils.java	distanceInf	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
38213	1591	8	MathUtils.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
38213	1591	8	MathUtils.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
38777	143	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
38777	143	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
38778	165	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
38778	165	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
38779	185	8	MatrixUtils.java	createBigIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
38779	185	8	MatrixUtils.java	createBigIdentityMatrix	dimension	int	0	NIL-FOR	row < $
38780	203	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
38780	203	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
38780	203	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
38781	222	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
38781	222	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
38781	222	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
38782	335	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
38782	335	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
739	354	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	DEF	$ == 0
38783	358	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
38783	358	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
38784	378	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
38784	378	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
38785	416	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
38785	416	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
38786	434	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
38786	434	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
740	453	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	DEF	$ == 0
38787	457	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
38787	457	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
38788	477	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
38788	477	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
38789	497	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
38789	497	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
38790	517	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
38790	517	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
741	530	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	MatrixIndexException	row >= $.getRowDimension()
741	530	8	MatrixUtils.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= m.getRowDimension()
741	530	8	MatrixUtils.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
742	544	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	MatrixIndexException	column >= $.getColumnDimension()
742	544	8	MatrixUtils.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
742	544	8	MatrixUtils.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= m.getColumnDimension()
743	566	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	MatrixIndexException	$ > endRow
743	566	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	MatrixIndexException	startRow > $
744	573	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	MatrixIndexException	$ > endColumn
744	573	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	MatrixIndexException	startColumn > $
745	593	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
745	593	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
745	593	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
746	594	12	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	MatrixIndexException	selectedRows.$.length == 0
746	594	12	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length == 0
747	616	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	DEF	$.getRowDimension() != right.getRowDimension()
747	616	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	DEF	$.getColumnDimension() != right.getColumnDimension()
747	616	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	DEF	left.getRowDimension() != $.getRowDimension()
747	616	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	DEF	left.getColumnDimension() != $.getColumnDimension()
748	633	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	DEF	$.getColumnDimension() != right.getColumnDimension()
748	633	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	DEF	$.getRowDimension() != right.getRowDimension()
748	633	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	DEF	left.getColumnDimension() != $.getColumnDimension()
748	633	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	DEF	left.getRowDimension() != $.getRowDimension()
749	650	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DEF	$.getColumnDimension() != right.getRowDimension()
749	650	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DEF	left.getColumnDimension() != $.getRowDimension()
38791	791	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
38791	791	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
38792	822	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
38792	822	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
38793	894	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
38793	894	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
38794	895	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
38794	895	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
38795	928	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
38795	928	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
38796	930	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
38796	930	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1196	74	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
1196	74	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
1196	74	8	Max.java	increment	d	double	0	DEF	$ > value
1197	129	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
1197	129	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1197	129	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
1197	129	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
39279	131	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
39279	131	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
39279	131	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1198	132	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1198	132	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1130	106	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
1131	116	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
1132	154	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
1132	154	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
1132	154	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
1132	154	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
39267	163	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
39267	163	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
39267	163	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
39372	143	8	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
1362	159	8	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
39373	168	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
1363	174	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
1364	178	12	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
1364	178	12	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
1364	178	12	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
39374	183	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
1365	189	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
1366	221	8	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
39375	223	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
39376	229	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
39583	87	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
39583	87	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1193	74	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
1193	74	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
1193	74	8	Min.java	increment	d	double	0	DEF	$ < value
1194	129	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
1194	129	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1194	129	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
1194	129	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
39278	131	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
39278	131	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
39278	131	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1195	132	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1195	132	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1699	96	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1699	96	8	MullerSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1700	97	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1700	97	8	MullerSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1701	98	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1701	98	8	MullerSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1702	102	8	MullerSolver.java	solve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial, f)
1702	102	8	MullerSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1702	102	8	MullerSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1702	102	8	MullerSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1703	150	8	MullerSolver.java	solve	y0	double	0	RET	$ == 0.0
1704	151	8	MullerSolver.java	solve	y2	double	0	RET	$ == 0.0
39629	156	8	MullerSolver.java	solve	THIS	MullerSolver	0	NIL-WHILE	i <= $.maximalIterationCount
39629	156	8	MullerSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1705	175	12	MullerSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1705	175	12	MullerSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1705	175	12	MullerSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1706	179	12	MullerSolver.java	solve	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1706	179	12	MullerSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1707	192	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
1708	202	16	MullerSolver.java	solve	ym	double	1	DEF	MathUtils.sign(y0) + MathUtils.sign($) == 0.0
1708	202	16	MullerSolver.java	solve	y0	double	1	DEF	MathUtils.sign($) + MathUtils.sign(ym) == 0.0
1709	290	8	MullerSolver.java	solve2	y0	double	0	RET	$ == 0.0
1710	291	8	MullerSolver.java	solve2	y1	double	0	RET	$ == 0.0
39630	296	8	MullerSolver.java	solve2	THIS	MullerSolver	0	NIL-WHILE	i <= $.maximalIterationCount
39630	296	8	MullerSolver.java	solve2	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1711	303	12	MullerSolver.java	solve2	delta	double	1	DEF	$ >= 0.0
1712	312	12	MullerSolver.java	solve2	denominator	double	1	DEF	$ != 0
39631	316	16	MullerSolver.java	solve2	x1	double	0	NIL-WHILE	x == $
39631	316	16	MullerSolver.java	solve2	x2	double	0	NIL-WHILE	x == $
39631	316	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x1
39631	316	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x2
1713	328	12	MullerSolver.java	solve2	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1713	328	12	MullerSolver.java	solve2	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1713	328	12	MullerSolver.java	solve2	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1714	332	12	MullerSolver.java	solve2	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1714	332	12	MullerSolver.java	solve2	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1077	75	12	MultiDirectional.java	iterateSimplex	best	RealPointValuePair	0	RET	comparator.compare(reflected, $) < 0
1077	75	12	MultiDirectional.java	iterateSimplex	reflected	RealPointValuePair	0	RET	comparator.compare($, best) < 0
1077	75	12	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(reflected, best) < 0
1078	80	16	MultiDirectional.java	iterateSimplex	expanded	RealPointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
1078	80	16	MultiDirectional.java	iterateSimplex	reflected	RealPointValuePair	0	DEF	comparator.compare($, expanded) <= 0
1078	80	16	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
1079	91	12	MultiDirectional.java	iterateSimplex	best	RealPointValuePair	0	RET	comparator.compare(contracted, $) < 0
1079	91	12	MultiDirectional.java	iterateSimplex	contracted	RealPointValuePair	0	RET	comparator.compare($, best) < 0
1079	91	12	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(contracted, best) < 0
39240	99	12	MultiDirectional.java	iterateSimplex	THIS	MultiDirectional	0	NIL-FOR	i < $.simplex.$.length
39240	99	12	MultiDirectional.java	iterateSimplex	i	int	0	NIL-FOR	$ < simplex.length
1080	102	12	MultiDirectional.java	iterateSimplex	converged	boolean	0	RET	$
39241	130	8	MultiDirectional.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ <= n
39241	130	8	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	i <= $
39242	133	12	MultiDirectional.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < n
39242	133	12	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	j < $
952	120	8	MultiStartDifferentiableMultivariateRealOptimizer.java	getOptima	THIS	MultiStartDifferentiableMultivariateRealOptimizer	0	DEF	$.optima == null
39126	183	8	MultiStartDifferentiableMultivariateRealOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateRealOptimizer	0	NIL-FOR	i < $.starts
39126	183	8	MultiStartDifferentiableMultivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
953	217	8	MultiStartDifferentiableMultivariateRealOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateRealOptimizer	0	OptimizationException	$.optima[0] == null
1069	124	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	getOptima	THIS	MultiStartDifferentiableMultivariateVectorialOptimizer	0	DEF	$.optima == null
39230	187	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateVectorialOptimizer	0	NIL-FOR	i < $.starts
39230	187	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1070	227	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateVectorialOptimizer	0	OptimizationException	$.optima[0] == null
980	115	8	MultiStartMultivariateRealOptimizer.java	getOptima	THIS	MultiStartMultivariateRealOptimizer	0	DEF	$.optima == null
39137	172	8	MultiStartMultivariateRealOptimizer.java	optimize	THIS	MultiStartMultivariateRealOptimizer	0	NIL-FOR	i < $.starts
39137	172	8	MultiStartMultivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
981	205	8	MultiStartMultivariateRealOptimizer.java	optimize	THIS	MultiStartMultivariateRealOptimizer	0	OptimizationException	$.optima[0] == null
954	192	8	MultiStartUnivariateRealOptimizer.java	getOptima	THIS	MultiStartUnivariateRealOptimizer	0	DEF	$.optima == null
955	218	8	MultiStartUnivariateRealOptimizer.java	getOptimaValues	THIS	MultiStartUnivariateRealOptimizer	0	DEF	$.optimaValues == null
39127	236	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	NIL-FOR	i < $.starts
39127	236	8	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
39128	262	8	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < lastNaN
39128	262	8	MultiStartUnivariateRealOptimizer.java	optimize	lastNaN	int	0	NIL-FOR	i < $
956	263	12	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	DEF	Double.isNaN($.optima[i])
956	263	12	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	DEF	Double.isNaN(optima[$])
39129	273	8	MultiStartUnivariateRealOptimizer.java	optimize	j	int	0	NIL-FOR	$ < lastNaN
39129	273	8	MultiStartUnivariateRealOptimizer.java	optimize	lastNaN	int	0	NIL-FOR	j < $
957	277	12	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	DEF	(goalType == $.GoalType.MAXIMIZE) ^ (currY < prevY)
957	277	12	MultiStartUnivariateRealOptimizer.java	optimize	prevY	double	0	DEF	(goalType == GoalType.MAXIMIZE) ^ (currY < $)
957	277	12	MultiStartUnivariateRealOptimizer.java	optimize	currY	double	0	DEF	(goalType == GoalType.MAXIMIZE) ^ ($ < prevY)
957	277	12	MultiStartUnivariateRealOptimizer.java	optimize	goalType	GoalType	0	DEF	($ == GoalType.MAXIMIZE) ^ (currY < prevY)
39130	282	16	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	NIL-WHILE	(goalType == $.GoalType.MAXIMIZE) ^ (currY < mIY)
39130	282	16	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-WHILE	$ >= 0
39130	282	16	MultiStartUnivariateRealOptimizer.java	optimize	mIY	double	0	NIL-WHILE	(goalType == GoalType.MAXIMIZE) ^ (currY < $)
39130	282	16	MultiStartUnivariateRealOptimizer.java	optimize	currY	double	0	NIL-WHILE	(goalType == GoalType.MAXIMIZE) ^ ($ < mIY)
39130	282	16	MultiStartUnivariateRealOptimizer.java	optimize	goalType	GoalType	0	NIL-WHILE	($ == GoalType.MAXIMIZE) ^ (currY < mIY)
958	285	20	MultiStartUnivariateRealOptimizer.java	optimize	i	int	1	DEF	$-- != 0
959	300	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	OptimizationException	Double.isNaN($.optima[0])
1659	114	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	DEF	$ <= 0
1660	226	12	MultistepIntegrator.java	start	THIS	MultistepIntegrator	0	DEF	$.de instanceof InitializationCompletedMarkerException
39255	92	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
39255	92	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
39256	147	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
39256	147	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
39257	184	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
39257	184	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
39257	184	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
1096	243	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
1097	245	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
39258	249	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
39258	249	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
39259	331	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
39259	331	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
39259	331	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
1098	332	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
39260	345	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
39260	345	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
1099	365	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
1099	365	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
1100	368	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
1101	615	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	DEF	$.n > 0
1102	629	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
1102	629	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
39315	192	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
39315	192	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
39315	192	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
39316	223	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
39316	223	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
39316	223	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1258	224	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
1258	224	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
1259	227	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
1260	238	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
1261	241	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
1262	255	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
1262	255	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
39317	260	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
39317	260	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
39317	260	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1263	261	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
1263	261	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
39318	263	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
39318	263	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
39318	263	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
39319	285	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
39319	285	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
39319	285	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1264	286	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
1264	286	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
39320	300	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
39320	300	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
39320	300	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1265	301	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
1265	301	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
39321	343	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
39322	353	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
39323	369	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
1266	381	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
39324	385	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
39325	399	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
39325	399	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
39325	399	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1267	400	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
1267	400	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
39231	91	8	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < n
39231	91	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	i < $
39232	93	12	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
39232	93	12	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
39233	98	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
39233	98	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
39234	104	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
39234	104	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1071	109	8	NelderMead.java	iterateSimplex	best	RealPointValuePair	1	DEF	comparator.compare($, reflected) <= 0
1071	109	8	NelderMead.java	iterateSimplex	secondBest	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1071	109	8	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare(best, $) <= 0
1071	109	8	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare($, secondBest) < 0
1071	109	8	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(best, reflected) <= 0
1071	109	8	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
1072	115	15	NelderMead.java	iterateSimplex	best	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1072	115	15	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare($, best) < 0
1072	115	15	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, best) < 0
39235	119	12	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
39235	119	12	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1073	124	12	NelderMead.java	iterateSimplex	expanded	RealPointValuePair	1	DEF	comparator.compare($, reflected) < 0
1073	124	12	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare(expanded, $) < 0
1073	124	12	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
1074	134	12	NelderMead.java	iterateSimplex	worst	RealPointValuePair	1	RET	comparator.compare(reflected, $) < 0
1074	134	12	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	RET	comparator.compare($, worst) < 0
1074	134	12	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	RET	$.compare(reflected, worst) < 0
39236	138	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
39236	138	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1075	143	16	NelderMead.java	iterateSimplex	outContracted	RealPointValuePair	0	RET	comparator.compare($, reflected) <= 0
1075	143	16	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
1075	143	16	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
39237	153	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
39237	153	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1076	158	16	NelderMead.java	iterateSimplex	inContracted	RealPointValuePair	0	RET	comparator.compare($, worst) < 0
1076	158	16	NelderMead.java	iterateSimplex	worst	RealPointValuePair	0	RET	comparator.compare(inContracted, $) < 0
1076	158	16	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(inContracted, worst) < 0
39238	168	12	NelderMead.java	iterateSimplex	THIS	NelderMead	0	NIL-FOR	i < $.simplex.$.length
39238	168	12	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < simplex.length
39239	170	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
39239	170	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
39627	118	12	NewtonSolver.java	solve	THIS	NewtonSolver	0	NIL-WHILE	i < $.maximalIterationCount
39627	118	12	NewtonSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1686	121	16	NewtonSolver.java	solve	THIS	NewtonSolver	0	RET	Math.abs(x1 - x0) <= $.absoluteAccuracy
1686	121	16	NewtonSolver.java	solve	x0	double	0	RET	Math.abs(x1 - $) <= absoluteAccuracy
1686	121	16	NewtonSolver.java	solve	x1	double	0	RET	Math.abs($ - x0) <= absoluteAccuracy
1056	105	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
1057	119	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.preconditioner == null
1058	122	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.solver == null
1059	127	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.goalType == $.GoalType.MINIMIZE
39216	128	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
39216	128	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
39217	138	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
39217	138	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1060	148	16	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	$ != null
1061	149	20	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	RET	$.checker.converged($.getIterations(), previous, current)
1061	149	20	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	checker.converged(getIterations(), $, current)
1061	149	20	NonLinearConjugateGradientOptimizer.java	doOptimize	current	RealPointValuePair	0	RET	checker.converged(getIterations(), previous, $)
39218	167	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
39218	167	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
1062	171	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.goalType == $.GoalType.MINIMIZE
39219	172	20	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
39219	172	20	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
39220	181	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
39220	181	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1063	186	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
39221	190	20	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
39221	190	20	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
39221	190	20	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
1064	198	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.getIterations() % n == 0
1064	198	16	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
1064	198	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	getIterations() % $ == 0
39222	203	20	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
39222	203	20	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
39223	229	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
1065	232	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
1065	232	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
1487	84	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
1487	84	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
1488	87	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
1488	87	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
1489	90	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
1489	90	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
39491	144	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
39491	144	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
39492	150	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
39492	150	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
39492	150	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
39493	153	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
39493	153	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
39493	153	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
39494	196	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
39495	200	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
39495	200	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
39495	200	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
39496	207	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
39496	207	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
1490	229	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
39497	233	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
39497	233	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
1491	238	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
1492	263	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
39498	265	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
39498	265	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
1493	273	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
1494	279	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
1494	279	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
419	97	8	NormalDistributionImpl.java	setStandardDeviation	sd	double	0	DEF	$ <= 0.0
420	129	12	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x < ($.mean - 20 * $.standardDeviation)
420	129	12	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ < (mean - 20 * standardDeviation)
421	131	19	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x > ($.mean + 20 * $.standardDeviation)
421	131	19	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ > (mean + 20 * standardDeviation)
422	156	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
423	159	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
424	178	8	NormalDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
425	200	8	NormalDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
426	221	8	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
427	223	15	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
39331	112	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
39331	112	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
39332	113	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
39332	113	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
1291	114	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
1291	114	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
1291	114	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
1291	114	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
39333	206	8	OLSMultipleLinearRegression.java	solveUpperTriangular	i	int	0	NIL-FOR	$ < length
39333	206	8	OLSMultipleLinearRegression.java	solveUpperTriangular	length	int	0	NIL-FOR	i < $
39334	209	12	OLSMultipleLinearRegression.java	solveUpperTriangular	j	int	0	NIL-FOR	$ < length
39334	209	12	OLSMultipleLinearRegression.java	solveUpperTriangular	length	int	0	NIL-FOR	j < $
39335	231	8	OLSMultipleLinearRegression.java	checkUpperTriangular	r	int	0	NIL-FOR	$ < nRows
39335	231	8	OLSMultipleLinearRegression.java	checkUpperTriangular	nRows	int	0	NIL-FOR	r < $
39336	233	12	OLSMultipleLinearRegression.java	checkUpperTriangular	c	int	0	NIL-FOR	$ < bound
39336	233	12	OLSMultipleLinearRegression.java	checkUpperTriangular	bound	int	0	NIL-FOR	c < $
1292	234	16	OLSMultipleLinearRegression.java	checkUpperTriangular	c	int	0	DEF	Math.abs(m.getEntry(r, $)) > epsilon
1292	234	16	OLSMultipleLinearRegression.java	checkUpperTriangular	r	int	0	DEF	Math.abs(m.getEntry($, c)) > epsilon
1292	234	16	OLSMultipleLinearRegression.java	checkUpperTriangular	m	RealMatrix	0	DEF	Math.abs($.getEntry(r, c)) > epsilon
1292	234	16	OLSMultipleLinearRegression.java	checkUpperTriangular	epsilon	double	0	DEF	Math.abs(m.getEntry(r, c)) > $
1407	71	8	OnePointCrossover.java	crossover	first	Chromosome	0	IllegalArgumentException	$ instanceof AbstractListChromosome
1407	71	8	OnePointCrossover.java	crossover	second	Chromosome	0	IllegalArgumentException	$ instanceof AbstractListChromosome
1408	87	8	OnePointCrossover.java	crossover	length	int	0	IllegalArgumentException	$ != second.getLength()
1408	87	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	IllegalArgumentException	length != $.getLength()
39394	101	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
39394	101	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
39395	106	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
39395	106	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
1218	103	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	DEF	$ > 0.5
1218	103	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	DEF	$ <= 0
1219	126	8	OneWayAnovaImpl.java	anovaStats	categoryData	Collection<double[]>	0	DEF	$.size() < 2
1220	134	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	DEF	$.array.$.length <= 1
39281	153	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	NIL-FOR	i < $.data.$.length
39281	153	12	OneWayAnovaImpl.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
39	152	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
40	157	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
40	157	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
41	181	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
41	181	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
41	181	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
42	185	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
42	185	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
38185	189	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
38185	189	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
43	192	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
43	192	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
43	192	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
44	210	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
44	210	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
44	210	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
45	214	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
45	214	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
38186	218	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
38186	218	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
46	221	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
46	221	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
46	221	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
47	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
47	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
48	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
48	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
48	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
48	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
48	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
49	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
49	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
50	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
50	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
50	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
50	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
50	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
51	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
51	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
52	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
52	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
53	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
53	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
54	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
54	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
54	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
54	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
54	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
55	353	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
55	353	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
55	353	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
56	357	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
56	357	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
38187	361	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
38187	361	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
57	364	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
57	364	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
57	364	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
58	409	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
59	417	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
60	419	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
38188	443	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
38188	443	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
61	444	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
61	444	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
161	164	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
162	169	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
162	169	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
163	193	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
163	193	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
163	193	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
164	197	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
164	197	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
38214	201	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
38214	201	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
165	204	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
165	204	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
165	204	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
166	222	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
166	222	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
166	222	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
167	226	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
167	226	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
38215	230	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
38215	230	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
168	233	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
168	233	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
168	233	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
169	283	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
169	283	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
170	285	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
170	285	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
170	285	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
170	285	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
170	285	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
171	291	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
171	291	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
172	297	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
172	297	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
172	297	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
172	297	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
172	297	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
173	303	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
173	303	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
174	305	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
174	305	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
175	316	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
175	316	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
176	318	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
176	318	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
176	318	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
176	318	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
176	318	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
177	365	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
177	365	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
177	365	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
178	369	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
178	369	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
38216	373	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
38216	373	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
179	376	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
179	376	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
179	376	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
180	421	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
181	429	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
182	431	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
38217	455	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
38217	455	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
183	456	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
183	456	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
39120	109	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
39121	144	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
39122	168	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
39123	174	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
39123	174	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
39124	199	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
39125	205	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
39125	205	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
947	207	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
947	207	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
947	207	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
948	211	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
949	244	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
950	259	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
951	274	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
38965	130	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
38965	130	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
38965	130	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
802	132	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isZero(value)
802	132	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isZero($)
38966	157	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
38966	157	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
38966	157	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
803	159	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isZero(value)
803	159	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isZero($)
38967	183	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
38967	183	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
804	185	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isZero(value)
804	185	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isZero($)
805	227	8	OpenMapRealVector.java	add	v	RealVector	0	RET	$ instanceof OpenMapRealVector
38968	243	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
806	246	12	OpenMapRealVector.java	add	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
806	246	12	OpenMapRealVector.java	add	key	int	1	DEF	entries.containsKey($)
38969	259	8	OpenMapRealVector.java	add	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
38969	259	8	OpenMapRealVector.java	add	i	int	0	NIL-FOR	$ < v.length
38969	259	8	OpenMapRealVector.java	add	v	double[]	0	NIL-FOR	i < $.length
38970	273	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
807	282	8	OpenMapRealVector.java	append	v	RealVector	0	RET	$ instanceof OpenMapRealVector
38971	298	8	OpenMapRealVector.java	append	THIS	OpenMapRealVector	0	NIL-FOR	i < a.$.length
38971	298	8	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < a.length
38971	298	8	OpenMapRealVector.java	append	a	double[]	0	NIL-FOR	i < $.length
38972	314	8	OpenMapRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
38973	326	8	OpenMapRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
808	329	12	OpenMapRealVector.java	dotProduct	THIS	OpenMapRealVector	0	DEF	idx < v.$.length
808	329	12	OpenMapRealVector.java	dotProduct	idx	int	0	DEF	$ < v.length
808	329	12	OpenMapRealVector.java	dotProduct	v	double[]	0	DEF	idx < $.length
38974	342	8	OpenMapRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
38975	354	8	OpenMapRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
38976	366	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
38977	378	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
38978	392	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
809	395	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
809	395	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
809	395	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
809	395	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
38979	406	8	OpenMapRealVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
38980	427	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
38981	435	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
810	438	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
810	438	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
811	449	8	OpenMapRealVector.java	getDistance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
38982	459	8	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
38982	459	8	OpenMapRealVector.java	getDistance	i	int	0	NIL-FOR	$ < v.length
38982	459	8	OpenMapRealVector.java	getDistance	v	double[]	0	NIL-FOR	i < $.length
38983	483	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
38984	489	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
812	492	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
812	492	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
813	503	8	OpenMapRealVector.java	getL1Distance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
38985	513	8	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
38985	513	8	OpenMapRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < v.length
38985	513	8	OpenMapRealVector.java	getL1Distance	v	double[]	0	NIL-FOR	i < $.length
38986	524	8	OpenMapRealVector.java	getL1Norm	iter	Iterator	0	NIL-WHILE	$.hasNext()
38987	539	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
814	542	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
814	542	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
38988	547	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
815	550	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
815	550	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
816	551	16	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
816	551	16	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
817	562	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
38989	572	8	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
38989	572	8	OpenMapRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < v.length
38989	572	8	OpenMapRealVector.java	getLInfDistance	v	double[]	0	NIL-FOR	i < $.length
818	574	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
818	574	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
38990	585	8	OpenMapRealVector.java	getLInfNorm	iter	Iterator	0	NIL-WHILE	$.hasNext()
38991	596	8	OpenMapRealVector.java	getNorm	iter	Iterator	0	NIL-WHILE	$.hasNext()
38992	607	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
819	610	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
820	613	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
38993	623	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
821	625	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
38994	640	8	OpenMapRealVector.java	mapAbsToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
38995	654	8	OpenMapRealVector.java	mapAcosToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
38995	654	8	OpenMapRealVector.java	mapAcosToSelf	i	int	0	NIL-FOR	$ < virtualSize
38996	667	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
38996	667	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
38997	681	8	OpenMapRealVector.java	mapAsinToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
38998	696	8	OpenMapRealVector.java	mapAtanToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
38999	711	8	OpenMapRealVector.java	mapCbrtToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39000	726	8	OpenMapRealVector.java	mapCeilToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39001	740	8	OpenMapRealVector.java	mapCosToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
39001	740	8	OpenMapRealVector.java	mapCosToSelf	i	int	0	NIL-FOR	$ < virtualSize
39002	753	8	OpenMapRealVector.java	mapCoshToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
39002	753	8	OpenMapRealVector.java	mapCoshToSelf	i	int	0	NIL-FOR	$ < virtualSize
39003	767	8	OpenMapRealVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39004	781	8	OpenMapRealVector.java	mapExpToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
39004	781	8	OpenMapRealVector.java	mapExpToSelf	i	int	0	NIL-FOR	$ < virtualSize
39005	795	8	OpenMapRealVector.java	mapExpm1ToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39006	810	8	OpenMapRealVector.java	mapFloorToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39007	824	8	OpenMapRealVector.java	mapInvToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
39007	824	8	OpenMapRealVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
39008	842	8	OpenMapRealVector.java	mapLog10ToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
39008	842	8	OpenMapRealVector.java	mapLog10ToSelf	i	int	0	NIL-FOR	$ < virtualSize
39009	856	8	OpenMapRealVector.java	mapLog1pToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39010	865	8	OpenMapRealVector.java	mapLogToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
39010	865	8	OpenMapRealVector.java	mapLogToSelf	i	int	0	NIL-FOR	$ < virtualSize
39011	879	8	OpenMapRealVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39012	893	8	OpenMapRealVector.java	mapPowToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39013	908	8	OpenMapRealVector.java	mapRintToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39014	923	8	OpenMapRealVector.java	mapSignumToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39015	938	8	OpenMapRealVector.java	mapSinToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39016	954	8	OpenMapRealVector.java	mapSinhToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39017	969	8	OpenMapRealVector.java	mapSqrtToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39018	994	8	OpenMapRealVector.java	mapTanToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39019	1009	8	OpenMapRealVector.java	mapTanhToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39020	1024	8	OpenMapRealVector.java	mapUlpToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
39021	1041	8	OpenMapRealVector.java	outerproduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
39022	1044	12	OpenMapRealVector.java	outerproduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
822	1056	8	OpenMapRealVector.java	outerProduct	v	RealVector	0	RET	$ instanceof OpenMapRealVector
39023	1061	8	OpenMapRealVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
39024	1064	12	OpenMapRealVector.java	outerProduct	THIS	OpenMapRealVector	0	NIL-FOR	col < $.virtualSize
39024	1064	12	OpenMapRealVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
39025	1076	8	OpenMapRealVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
39026	1080	12	OpenMapRealVector.java	outerProduct	THIS	OpenMapRealVector	0	NIL-FOR	col < $.virtualSize
39026	1080	12	OpenMapRealVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
823	1102	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isZero(value)
823	1102	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isZero($)
824	1104	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
824	1104	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
39027	1120	8	OpenMapRealVector.java	setSubVector	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
39027	1120	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
39027	1120	8	OpenMapRealVector.java	setSubVector	v	double[]	0	NIL-FOR	i < $.length
39028	1127	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
39028	1127	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
39029	1142	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
825	1145	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
825	1145	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
826	1157	8	OpenMapRealVector.java	subtract	v	RealVector	0	RET	$ instanceof OpenMapRealVector
39030	1167	8	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
39030	1167	8	OpenMapRealVector.java	subtract	i	int	0	NIL-FOR	$ < v.length
39030	1167	8	OpenMapRealVector.java	subtract	v	double[]	0	NIL-FOR	i < $.length
827	1168	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(i)
827	1168	12	OpenMapRealVector.java	subtract	i	int	1	DEF	entries.containsKey($)
828	1188	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	DEF	$.isZero(norm)
828	1188	8	OpenMapRealVector.java	unitize	norm	double	0	DEF	isZero($)
39031	1192	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
829	1208	8	OpenMapRealVector.java	checkIndex	THIS	OpenMapRealVector	0	MatrixIndexException	index >= $.getDimension()
829	1208	8	OpenMapRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
829	1208	8	OpenMapRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
830	1224	8	OpenMapRealVector.java	checkVectorDimensions	THIS	OpenMapRealVector	0	DEF	$.getDimension() != n
830	1224	8	OpenMapRealVector.java	checkVectorDimensions	n	int	0	DEF	getDimension() != $
39032	1250	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
831	1266	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
831	1266	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
832	1269	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ == null
833	1272	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
834	1276	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
834	1276	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
835	1279	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
835	1279	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
39033	1284	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
836	1287	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
836	1287	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
39034	1292	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
837	1295	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
837	1295	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
837	1295	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
488	78	8	PascalDistributionImpl.java	setNumberOfSuccesses	successes	int	0	DEF	$ < 0
489	93	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ < 0.0
489	93	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ > 1.0
490	135	8	PascalDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
491	151	8	PascalDistributionImpl.java	probability	x	int	1	DEF	$ < 0
492	180	8	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
493	182	15	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
1251	93	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	DEF	$ == null
39302	138	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
39302	138	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
39303	139	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
39303	139	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
39304	164	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
39304	164	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
39305	165	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
39305	165	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
1252	166	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
1252	166	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
39306	189	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
39306	189	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
39307	190	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
39307	190	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
1253	226	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	RET	xArray.$.length == yArray.$.length
1253	226	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	RET	xArray.$.length > 1
1253	226	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	RET	$.length == yArray.length
1253	226	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	RET	$.length > 1
1253	226	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	RET	xArray.length == $.length
39308	227	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
39308	227	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
39308	227	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
39309	253	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
39309	253	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
39310	256	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
39310	256	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
1254	275	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	DEF	$ < 2
1254	275	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	DEF	$ < 2
1199	200	8	Percentile.java	evaluate	p	double	0	DEF	$ <= 0
1199	200	8	Percentile.java	evaluate	p	double	0	DEF	$ > 100
1200	204	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
1201	207	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
1202	219	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
1203	222	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
1203	222	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
1204	249	8	Percentile.java	setQuantile	p	double	0	DEF	$ <= 0
1204	249	8	Percentile.java	setQuantile	p	double	0	DEF	$ > 100
415	91	8	PoissonDistributionImpl.java	setMean	p	double	0	DEF	$ <= 0
416	108	8	PoissonDistributionImpl.java	probability	x	int	0	RET	$ == Integer.MAX_VALUE
416	108	8	PoissonDistributionImpl.java	probability	x	int	0	RET	$ < 0
417	125	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ < 0
418	128	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
1781	64	8	PolynomialFunction.java	PolynomialFunction	THIS	PolynomialFunction	0	DEF	c.$.length < 1
1781	64	8	PolynomialFunction.java	PolynomialFunction	c	double	0	DEF	$.length < 1
39656	68	8	PolynomialFunction.java	PolynomialFunction	l	int	0	NIL-WHILE	c[$ - 1] == 0
39656	68	8	PolynomialFunction.java	PolynomialFunction	l	int	0	NIL-WHILE	$ > 1
39656	68	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[l - 1] == 0
1782	124	8	PolynomialFunction.java	evaluate	n	int	0	DEF	$ < 1
39657	128	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >=0
39658	147	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
39658	147	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
39659	173	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
39659	173	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
1783	176	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
1783	176	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
39660	177	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
39660	177	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
39661	195	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
39661	195	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
39662	210	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
39662	210	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
39662	210	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
39663	212	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < Math.min($.coefficients.$.length, i + 1)
39663	212	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < Math.min(coefficients.length, i + 1)
39663	212	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < Math.min(coefficients.length, $ + 1)
1784	233	8	PolynomialFunction.java	differentiate	n	int	0	DEF	$ < 1
1785	236	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
39664	240	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
1786	283	7	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
1787	284	9	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
39665	291	7	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
39665	291	7	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
1788	293	9	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
1788	293	9	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
1789	295	11	PolynomialFunction.java	toString	s	StringBuffer	1	DEF	$.length() > 0
1790	296	13	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
1790	296	13	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
1791	302	13	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
1791	302	13	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
1792	308	11	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
1793	314	11	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
1794	338	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
1794	338	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
1795	340	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ == null
1796	342	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
1797	345	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
1797	345	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
1772	135	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
39646	170	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
39646	170	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
1773	176	12	PolynomialFunctionLagrangeForm.java	evaluate	dist	double	0	DEF	$ < min_dist
1773	176	12	PolynomialFunctionLagrangeForm.java	evaluate	min_dist	double	0	DEF	dist < $
39647	185	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
39647	185	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
39648	186	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	j < n-$
39648	186	12	PolynomialFunctionLagrangeForm.java	evaluate	j	int	0	NIL-FOR	$ < n-i
39648	186	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	j < $-i
1774	190	16	PolynomialFunctionLagrangeForm.java	evaluate	divider	double	0	DuplicateSampleAbscissaException	$ == 0.0
1775	200	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	1	DEF	nearest < 0.5*(n-$+1)
1775	200	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	1	DEF	nearest < 0.5*($-i+1)
1775	200	12	PolynomialFunctionLagrangeForm.java	evaluate	nearest	int	1	DEF	$ < 0.5*(n-i+1)
39649	226	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
39649	226	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
39650	233	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
39650	233	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
39651	234	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
39652	242	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
39652	242	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
39653	245	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
39653	245	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
1776	246	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
1776	246	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
1777	250	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	d	double	0	DEF	$ == 0.0
39654	252	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	NIL-FOR	$ < n
39654	252	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	k < $
1778	253	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.x[i] == $.x[k]
1778	253	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	i != $
1778	253	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	x[i] == x[$]
1778	253	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != k
1778	253	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	x[$] == x[k]
39655	265	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
1779	289	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DEF	Math.min(x.$.length, y.$.length) < 2
1779	289	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DEF	Math.min($.length, y.length) < 2
1779	289	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DEF	Math.min(x.length, $.length) < 2
1780	294	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DEF	x.$.length != y.$.length
1780	294	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DEF	$.length != y.length
1780	294	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DEF	x.length != $.length
1799	135	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
39669	162	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
39670	177	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
39670	177	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
39671	182	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
39672	183	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
1800	207	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DEF	a.$.length < 1
1800	207	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DEF	c.$.length < 1
1800	207	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DEF	$.length < 1
1800	207	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DEF	$.length < 1
1801	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DEF	a.$.length != c.$.length + 1
1801	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DEF	$.length != c.length + 1
1801	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DEF	a.length != $.length + 1
1765	98	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DEF	knots.$.length < 2
1765	98	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DEF	$.length < 2
1766	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DEF	knots.$.length - 1 != polynomials.$.length
1766	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DEF	$.length - 1 != polynomials.length
1766	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DEF	knots.length - 1 != $.length
1767	108	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DEF	$.isStrictlyIncreasing(knots)
1767	108	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DEF	isStrictlyIncreasing($)
1768	136	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v < $.knots[0]
1768	136	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v > $.knots[$.n]
1768	136	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ < knots[0]
1768	136	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ > knots[n]
1769	140	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
1770	146	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
1770	146	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
39644	167	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
39644	167	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
39645	220	8	PolynomialSplineFunction.java	isStrictlyIncreasing	THIS	PolynomialSplineFunction	0	NIL-FOR	i < x.$.length
39645	220	8	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	NIL-FOR	$ < x.length
39645	220	8	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	NIL-FOR	i < $.length
1771	221	12	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	RET	x[$ - 1] >= x[$]
1771	221	12	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	RET	$[i - 1] >= $[i]
1798	198	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
1798	198	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
39666	214	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
39666	214	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
39667	234	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
39667	234	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
39668	250	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
39668	250	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
1115	72	8	Product.java	increment	THIS	Product	1	DEF	$.n == 0
1116	121	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length)
1116	121	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1116	121	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length)
1116	121	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $)
39265	123	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
39265	123	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
39265	123	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
352	99	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
353	102	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
354	137	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
355	148	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
356	161	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
357	169	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
358	200	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
359	208	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
360	215	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
361	219	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
362	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	DEF	$ == null
335	100	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
336	137	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
337	148	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
338	161	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
339	169	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
340	200	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
341	208	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
342	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	DEF	$ == null
38806	86	8	QRDecompositionImpl.java	QRDecompositionImpl	minor	int	0	NIL-FOR	$ < Math.min(m, n)
38806	86	8	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	minor < Math.min($, n)
38806	86	8	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	minor < Math.min(m, $)
38807	98	12	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
38807	98	12	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
764	105	12	QRDecompositionImpl.java	QRDecompositionImpl	a	double	0	DEF	$ != 0.0
38808	129	16	QRDecompositionImpl.java	QRDecompositionImpl	col	int	0	NIL-FOR	$ < n
38808	129	16	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	col < $
38809	132	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
38809	132	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
38810	138	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
38810	138	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
765	149	8	QRDecompositionImpl.java	getR	THIS	QRDecompositionImpl	0	DEF	$.cachedR == null
38811	157	12	QRDecompositionImpl.java	getR	row	int	0	NIL-FOR	$ >= 0
38812	159	16	QRDecompositionImpl.java	getR	col	int	0	NIL-FOR	$ < n
38812	159	16	QRDecompositionImpl.java	getR	n	int	0	NIL-FOR	col < $
766	173	8	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	DEF	$.cachedQ == null
767	182	8	QRDecompositionImpl.java	getQT	THIS	QRDecompositionImpl	0	DEF	$.cachedQT == null
38813	194	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= Math.min(m, n)
38813	194	12	QRDecompositionImpl.java	getQT	n	int	0	NIL-FOR	minor >= Math.min(m, $)
38813	194	12	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	minor >= Math.min($, n)
38814	198	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= 0
768	201	16	QRDecompositionImpl.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
768	201	16	QRDecompositionImpl.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
38815	202	20	QRDecompositionImpl.java	getQT	col	int	0	NIL-FOR	$ < m
38815	202	20	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	col < $
38816	204	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
38816	204	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
38817	209	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
38817	209	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
769	226	8	QRDecompositionImpl.java	getH	THIS	QRDecompositionImpl	0	DEF	$.cachedH == null
38818	231	12	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	$ < m
38818	231	12	QRDecompositionImpl.java	getH	m	int	0	NIL-FOR	i < $
38819	232	16	QRDecompositionImpl.java	getH	j	int	0	NIL-FOR	$ < Math.min(i + 1, n)
38819	232	16	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	j < Math.min($ + 1, n)
38819	232	16	QRDecompositionImpl.java	getH	n	int	0	NIL-FOR	j < Math.min(i + 1, $)
1327	178	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1328	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1329	193	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1330	135	8	RandomDataImpl.java	nextHexString	len	int	0	DEF	$ <= 0
39361	151	8	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
39361	151	8	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
39361	151	8	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
1331	162	12	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
1332	181	8	RandomDataImpl.java	nextInt	lower	int	0	DEF	$ >= upper
1332	181	8	RandomDataImpl.java	nextInt	upper	int	0	DEF	lower >= $
1333	202	8	RandomDataImpl.java	nextLong	lower	long	0	DEF	$ >= upper
1333	202	8	RandomDataImpl.java	nextLong	upper	long	0	DEF	lower >= $
1334	233	8	RandomDataImpl.java	nextSecureHexString	len	int	0	DEF	$ <= 0
39362	252	8	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
39362	252	8	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
39363	261	12	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
39363	261	12	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
39363	261	12	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
1335	272	16	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
1336	293	8	RandomDataImpl.java	nextSecureInt	lower	int	0	DEF	$ >= upper
1336	293	8	RandomDataImpl.java	nextSecureInt	upper	int	0	DEF	lower >= $
1337	314	8	RandomDataImpl.java	nextSecureLong	lower	long	0	DEF	$ >= upper
1337	314	8	RandomDataImpl.java	nextSecureLong	upper	long	0	DEF	lower >= $
1338	353	8	RandomDataImpl.java	nextPoisson	mean	double	0	DEF	$ <= 0
1339	361	8	RandomDataImpl.java	nextPoisson	pivot	double	1	RET	mean < $
1339	361	8	RandomDataImpl.java	nextPoisson	mean	double	1	RET	$ < pivot
39364	367	12	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
39364	367	12	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
1340	370	16	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
1340	370	16	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
39365	402	12	RandomDataImpl.java	nextPoisson	accept	boolean	0	NIL-WHILE	$
1341	406	16	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= c1
1341	406	16	RandomDataImpl.java	nextPoisson	c1	double	1	DEF	u <= $
1342	411	20	RandomDataImpl.java	nextPoisson	mu	double	0	DEF	x < -$
1342	411	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ < -mu
1343	414	23	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= c2
1343	414	23	RandomDataImpl.java	nextPoisson	u	double	1	DEF	c1 < $
1343	414	23	RandomDataImpl.java	nextPoisson	c1	double	1	DEF	$ < u
1343	414	23	RandomDataImpl.java	nextPoisson	c2	double	1	DEF	u <= $
1344	419	20	RandomDataImpl.java	nextPoisson	delta	double	0	DEF	x > $
1344	419	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ > delta
1345	422	23	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= c3
1345	422	23	RandomDataImpl.java	nextPoisson	u	double	1	DEF	c2 < $
1345	422	23	RandomDataImpl.java	nextPoisson	c2	double	1	DEF	$ < u
1345	422	23	RandomDataImpl.java	nextPoisson	c3	double	1	DEF	u <= $
1346	425	23	RandomDataImpl.java	nextPoisson	u	double	1	DEF	c3 < $
1346	425	23	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= c4
1346	425	23	RandomDataImpl.java	nextPoisson	c3	double	1	DEF	$ < u
1346	425	23	RandomDataImpl.java	nextPoisson	c4	double	1	DEF	u <= $
1347	428	23	RandomDataImpl.java	nextPoisson	u	double	0	DEF	c4 < $
1347	428	23	RandomDataImpl.java	nextPoisson	c4	double	0	DEF	$ < u
1348	456	8	RandomDataImpl.java	nextGaussian	sigma	double	0	DEF	$ <= 0
1349	479	8	RandomDataImpl.java	nextExponential	mean	double	0	DEF	$ < 0.0
39366	485	8	RandomDataImpl.java	nextExponential	unif	double	0	NIL-WHILE	$ == 0.0d
1350	508	8	RandomDataImpl.java	nextUniform	lower	double	0	DEF	$ >= upper
1350	508	8	RandomDataImpl.java	nextUniform	upper	double	0	DEF	lower >= $
39367	517	8	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
1351	534	8	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
1352	550	8	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
1353	567	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
1354	581	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
1355	597	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
1356	608	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
1357	668	8	RandomDataImpl.java	nextPermutation	n	int	0	DEF	k > $
1357	668	8	RandomDataImpl.java	nextPermutation	k	int	0	DEF	$ > n
1358	672	8	RandomDataImpl.java	nextPermutation	k	int	0	DEF	$ == 0
39368	680	8	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
39368	680	8	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
1359	705	8	RandomDataImpl.java	nextSample	len	int	0	DEF	k > $
1359	705	8	RandomDataImpl.java	nextSample	k	int	0	DEF	$ > len
1360	709	8	RandomDataImpl.java	nextSample	k	int	0	DEF	$ <= 0
39369	717	8	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
39369	717	8	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
39370	736	8	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
39370	736	8	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
1361	737	12	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
39371	757	8	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
39371	757	8	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
1398	122	8	RandomKey.java	decodeGeneric	l	int	0	IllegalArgumentException	representation.size() != $
1398	122	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	IllegalArgumentException	$.size() != l
1399	125	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	IllegalArgumentException	$.size() != sortedRepr.size()
1399	125	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	IllegalArgumentException	representation.size() != $.size()
39388	133	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
39388	133	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
1400	151	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
1401	155	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
1401	155	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
39389	163	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
39389	163	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
1402	164	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
1402	164	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
1402	164	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
1403	177	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
1403	177	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
39390	194	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
39390	194	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
39391	210	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
39391	210	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
1404	250	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	IllegalArgumentException	$.size() != permutedData.size()
1404	250	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	IllegalArgumentException	originalData.size() != $.size()
39392	258	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
39392	258	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
1405	260	12	RandomKey.java	inducedPermutation	index	int	0	IllegalArgumentException	$ == -1
39393	285	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
39393	285	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
1379	40	8	RandomKeyMutation.java	mutate	original	Chromosome	0	DEF	$ instanceof RandomKey<?>
709	117	8	RealMatrixImpl.java	RealMatrixImpl	copyArray	boolean	1	DEF	$
710	120	12	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	NullPointerException	$ == null
711	124	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	DEF	$ == 0
712	128	12	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	$ == 0
38717	131	12	RealMatrixImpl.java	RealMatrixImpl	r	int	0	NIL-FOR	$ < nRows
38717	131	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	r < $
713	132	16	RealMatrixImpl.java	RealMatrixImpl	THIS	RealMatrixImpl	0	DEF	d[r].length != nCols
713	132	16	RealMatrixImpl.java	RealMatrixImpl	r	int	0	DEF	d[$].length != nCols
713	132	16	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	d[r].length != $
713	132	16	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	DEF	$[r].length != nCols
38718	153	8	RealMatrixImpl.java	RealMatrixImpl	row	int	0	NIL-FOR	$ < nRows
38718	153	8	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	row < $
38719	198	8	RealMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
38719	198	8	RealMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
38720	202	12	RealMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
38720	202	12	RealMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
38721	238	8	RealMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
38721	238	8	RealMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
38722	242	12	RealMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
38722	242	12	RealMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
38723	279	8	RealMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
38723	279	8	RealMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
38724	282	12	RealMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
38724	282	12	RealMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
38725	284	16	RealMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
38725	284	16	RealMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
714	316	8	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	1	DEF	$.data == null
715	317	12	RealMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
716	322	12	RealMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
717	328	12	RealMatrixImpl.java	setSubMatrix	nRows	int	0	DEF	$ == 0
718	333	12	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	$ == 0
38726	337	12	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	NIL-FOR	i < $.data.$.length
38726	337	12	RealMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
719	338	16	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	DEF	subMatrix[i].length != nCols
719	338	16	RealMatrixImpl.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
719	338	16	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
719	338	16	RealMatrixImpl.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[i].length != nCols
720	421	8	RealMatrixImpl.java	operate	THIS	RealMatrixImpl	0	DEF	v.$.length != nCols
720	421	8	RealMatrixImpl.java	operate	nCols	int	0	DEF	v.length != $
720	421	8	RealMatrixImpl.java	operate	v	double[]	0	DEF	$.length != nCols
38727	427	8	RealMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
38727	427	8	RealMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
38728	430	12	RealMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
38728	430	12	RealMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
721	445	8	RealMatrixImpl.java	preMultiply	THIS	RealMatrixImpl	0	DEF	v.$.length != nRows
721	445	8	RealMatrixImpl.java	preMultiply	nRows	int	0	DEF	v.length != $
721	445	8	RealMatrixImpl.java	preMultiply	v	double[]	0	DEF	$.length != nRows
38729	452	8	RealMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
38729	452	8	RealMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
38730	454	12	RealMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
38730	454	12	RealMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
38731	471	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
38731	471	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
38732	473	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
38732	473	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
38733	487	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
38733	487	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
38734	489	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
38734	489	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
38735	505	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
38735	505	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
38736	507	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
38736	507	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
38737	523	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
38737	523	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
38738	525	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
38738	525	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
38739	539	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
38739	539	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
38740	540	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
38740	540	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
38741	555	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
38741	555	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
38742	556	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
38742	556	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
38743	572	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
38743	572	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
38744	573	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
38744	573	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
38745	590	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
38745	590	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
38746	591	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
38746	591	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
38747	607	8	RealMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
38747	607	8	RealMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
38797	214	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
38797	214	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
750	215	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
751	244	8	RealVectorFormat.java	format	obj	Object	0	RET	$ instanceof RealVector
752	264	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
753	283	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
753	283	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
753	283	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
38798	289	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
754	291	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
755	293	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	$.parseFixedstring(source, $.trimmedSeparator, pos)
755	293	16	RealVectorFormat.java	parse	source	String	0	DEF	parseFixedstring($, trimmedSeparator, pos)
755	293	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	parseFixedstring(source, trimmedSeparator, $)
756	298	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
757	301	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
758	315	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
758	315	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
758	315	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
38799	321	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
38799	321	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
38799	321	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
12	268	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
13	272	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
14	296	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
15	306	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
16	322	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	DEF	$.numElements < 1
17	349	8	ResizableDoubleArray.java	checkContractExpand	contractionCriteria	float	0	DEF	$ < expansionFactor
17	349	8	ResizableDoubleArray.java	checkContractExpand	expansionFactor	float	0	DEF	contractionCriteria < $
18	357	8	ResizableDoubleArray.java	checkContractExpand	contractionCriteria	float	0	DEF	$ <= 1.0
19	365	8	ResizableDoubleArray.java	checkContractExpand	expansionFactor	float	0	DEF	$ <= 1.0
20	452	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	DEF	i > $.numElements
20	452	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ > numElements
21	456	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ < 0
22	463	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
23	465	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
24	487	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
25	536	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	DEF	index >= $.numElements
25	536	8	ResizableDoubleArray.java	getElement	index	int	1	DEF	$ >= numElements
26	540	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
27	671	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ < 0
28	676	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
28	676	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
29	679	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
29	679	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
30	712	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != MULTIPLICATIVE_MODE
30	712	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != ADDITIVE_MODE
31	732	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
32	754	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	$ < 0
33	762	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
33	762	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
34	777	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
35	854	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
35	854	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
36	857	7	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
37	870	15	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
1687	94	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1687	94	8	RiddersSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1688	95	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1688	95	8	RiddersSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1689	96	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1689	96	8	RiddersSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1690	100	8	RiddersSolver.java	solve	THIS	RiddersSolver	1	RET	$.isBracketing(min, initial, f)
1690	100	8	RiddersSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1690	100	8	RiddersSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1690	100	8	RiddersSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1691	134	8	RiddersSolver.java	solve	y1	double	0	RET	$ == 0.0
1692	135	8	RiddersSolver.java	solve	y2	double	0	RET	$ == 0.0
39628	140	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	NIL-WHILE	i <= $.maximalIterationCount
39628	140	8	RiddersSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1693	144	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y3) <= $.functionValueAccuracy
1693	144	12	RiddersSolver.java	solve	y3	double	0	RET	Math.abs($) <= functionValueAccuracy
1694	156	12	RiddersSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1694	156	12	RiddersSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1694	156	12	RiddersSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1695	160	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1695	160	12	RiddersSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1696	167	12	RiddersSolver.java	solve	correction	double	1	DEF	$ > 0.0
1697	168	16	RiddersSolver.java	solve	y1	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
1697	168	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y1) + MathUtils.sign($) == 0.0
1698	175	16	RiddersSolver.java	solve	y2	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
1698	175	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y2) + MathUtils.sign($) == 0.0
39679	82	8	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
39679	82	8	RombergIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
39680	84	12	RombergIntegrator.java	integrate	i	int	0	NIL-FOR	j <= $
39680	84	12	RombergIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= i
1815	90	12	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	i >= $.minimalIterationCount
1815	90	12	RombergIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1816	94	16	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	delta <= $.absoluteAccuracy
1816	94	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1816	94	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1816	94	16	RombergIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1817	110	8	RombergIntegrator.java	verifyIterationCount	THIS	RombergIntegrator	0	DEF	$.maximalIterationCount > 32
193	128	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
194	158	4	Rotation.java	Rotation	norm	double	0	DEF	$ == 0
195	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
195	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
195	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
195	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
195	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
195	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
195	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
195	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
196	220	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
197	238	4	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
198	247	6	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
199	256	8	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
200	302	2	Rotation.java	Rotation	u1u1	double	0	DEF	$ == 0
200	302	2	Rotation.java	Rotation	u2u2	double	0	DEF	$ == 0
200	302	2	Rotation.java	Rotation	v1v1	double	0	DEF	$ == 0
200	302	2	Rotation.java	Rotation	v2v2	double	0	DEF	$ == 0
201	351	2	Rotation.java	Rotation	c	double	0	RET	$ == 0
202	373	4	Rotation.java	Rotation	c	double	0	RET	$ == 0
203	383	6	Rotation.java	Rotation	c	double	0	RET	$ == 0
204	433	4	Rotation.java	Rotation	normProduct	double	0	DEF	$ == 0
205	439	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
205	439	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
206	534	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
207	536	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
208	548	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
208	548	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
209	550	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
210	594	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
211	603	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
211	603	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
212	612	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
213	621	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
213	621	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
214	630	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
215	639	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
215	639	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
216	648	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
217	657	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
217	657	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
218	666	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
219	675	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
219	675	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
220	684	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
221	693	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
221	693	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
222	702	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
223	711	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
223	711	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
224	720	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
225	729	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
225	729	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
226	738	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
227	747	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
227	747	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
228	756	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
229	765	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
229	765	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
230	774	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
231	783	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
231	783	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
232	801	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
232	801	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
38218	960	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
233	1001	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	Math.abs(fn1 - $) <= threshold
233	1001	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	Math.abs($ - fn) <= threshold
233	1001	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	Math.abs(fn1 - fn) <= $
1611	92	4	RungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1611	92	4	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
39590	96	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
39590	96	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
1612	103	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
1612	103	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
39591	122	4	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
39592	126	6	RungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
39593	132	8	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
39593	132	8	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
39594	134	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
39594	134	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
39594	134	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
39595	136	12	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
39595	136	12	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
39596	147	8	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
39596	147	8	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
39596	147	8	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
39597	149	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
39597	149	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1613	157	8	RungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1613	157	8	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1614	159	12	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1614	159	12	RungeKuttaIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1615	185	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1615	185	6	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1615	185	6	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1615	185	6	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1495	77	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
1495	77	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
39499	81	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
39499	81	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
39499	81	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
39500	137	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
39500	137	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
39501	138	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
39501	138	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
39502	159	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
39502	159	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
39503	161	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
39503	161	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
1496	168	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
1715	128	8	SecantSolver.java	solve	y0	double	0	DEF	$ * y1 >= 0
1715	128	8	SecantSolver.java	solve	y1	double	0	DEF	y0 * $ >= 0
39632	139	8	SecantSolver.java	solve	THIS	SecantSolver	0	NIL-WHILE	i < $.maximalIterationCount
39632	139	8	SecantSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1716	140	12	SecantSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
1716	140	12	SecantSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
1717	148	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
1717	148	12	SecantSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
1718	152	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(oldDelta) < Math.max($.relativeAccuracy * Math.abs(x1), $.absoluteAccuracy)
1718	152	12	SecantSolver.java	solve	x1	double	0	RET	Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs($), absoluteAccuracy)
1718	152	12	SecantSolver.java	solve	oldDelta	double	0	RET	Math.abs($) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)
1719	158	12	SecantSolver.java	solve	y0	double	1	DEF	Math.abs(y1) > Math.abs($)
1719	158	12	SecantSolver.java	solve	y1	double	1	DEF	Math.abs($) > Math.abs(y0)
1720	163	16	SecantSolver.java	solve	delta	double	0	DEF	$ / oldDelta > 1
1720	163	16	SecantSolver.java	solve	oldDelta	double	0	DEF	delta / $ > 1
1721	173	12	SecantSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
1721	173	12	SecantSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
1148	77	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
1410	72	12	SimpleEstimationProblem.java	getUnboundParameters	THIS	SimpleEstimationProblem	0	DEF	$.p.isBound()
39254	76	8	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	NIL-FOR	i < p.$.length
39254	76	8	SimpleRealPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
39254	76	8	SimpleRealPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1095	79	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > $.absoluteThreshold
1095	79	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > (size * $.relativeThreshold)
1095	79	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > absoluteThreshold
1095	79	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > (size * relativeThreshold)
1095	79	12	SimpleRealPointChecker.java	converged	size	double	0	RET	difference > ($ * relativeThreshold)
1297	122	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
1298	138	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.n > 2
1299	158	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
1300	170	12	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 2
39340	193	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
39340	193	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
39340	193	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
39341	213	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
39341	213	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
39341	213	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
39341	213	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
1301	298	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
1302	301	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	Math.abs($.sumXX) < 10 * Double.MIN_VALUE
1303	351	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
1304	365	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
1305	411	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
1306	434	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
1307	549	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	DEF	$ <= 0
1307	549	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	DEF	$ >= 1
1308	617	8	SimpleRegression.java	setDistribution	THIS	SimpleRegression	0	DEF	$.n > 2
39131	76	8	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	NIL-FOR	i < p.$.length
39131	76	8	SimpleVectorialPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
39131	76	8	SimpleVectorialPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
960	81	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > (size * $.relativeThreshold)
960	81	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > $.absoluteThreshold
960	81	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > (size * relativeThreshold)
960	81	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > absoluteThreshold
960	81	12	SimpleVectorialPointChecker.java	converged	size	double	0	RET	difference > ($ * relativeThreshold)
39156	76	8	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	NIL-FOR	i < p.$.length
39156	76	8	SimpleVectorialValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
39156	76	8	SimpleVectorialValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1017	81	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > $.absoluteThreshold
1017	81	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > (size * $.relativeThreshold)
1017	81	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > absoluteThreshold
1017	81	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > (size * relativeThreshold)
1017	81	12	SimpleVectorialValueChecker.java	converged	size	double	0	RET	difference > ($ * relativeThreshold)
39139	61	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
39139	61	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
984	62	12	SimplexSolver.java	getPivotColumn	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(tableau.getEntry(0, i), minValue, $.epsilon) < 0
984	62	12	SimplexSolver.java	getPivotColumn	i	int	0	DEF	MathUtils.compareTo(tableau.getEntry(0, $), minValue, epsilon) < 0
984	62	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	MathUtils.compareTo(tableau.getEntry(0, i), $, epsilon) < 0
984	62	12	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	DEF	MathUtils.compareTo($.getEntry(0, i), minValue, epsilon) < 0
39140	79	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
39140	79	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
985	82	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(entry, 0, $.epsilon) >= 0
985	82	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	MathUtils.compareTo($, 0, epsilon) >= 0
986	84	16	SimplexSolver.java	getPivotRow	ratio	double	0	DEF	$ < minRatio
986	84	16	SimplexSolver.java	getPivotRow	minRatio	double	0	DEF	ratio < $
987	107	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
39141	116	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
39141	116	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
988	117	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
988	117	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
989	130	8	SimplexSolver.java	isPhase1Solved	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
39142	133	8	SimplexSolver.java	isPhase1Solved	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
39142	133	8	SimplexSolver.java	isPhase1Solved	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
990	134	12	SimplexSolver.java	isPhase1Solved	THIS	SimplexSolver	0	RET	MathUtils.compareTo(tableau.getEntry(0, i), 0, $.epsilon) < 0
990	134	12	SimplexSolver.java	isPhase1Solved	i	int	0	RET	MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
990	134	12	SimplexSolver.java	isPhase1Solved	tableau	SimplexTableau	0	RET	MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
991	147	8	SimplexSolver.java	isOptimal	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
39143	150	8	SimplexSolver.java	isOptimal	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
39143	150	8	SimplexSolver.java	isOptimal	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
992	151	12	SimplexSolver.java	isOptimal	THIS	SimplexSolver	0	RET	MathUtils.compareTo(tableau.getEntry(0, i), 0, $.epsilon) < 0
992	151	12	SimplexSolver.java	isOptimal	i	int	0	RET	MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
992	151	12	SimplexSolver.java	isOptimal	tableau	SimplexTableau	0	RET	MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
993	168	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
39144	172	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NIL-WHILE	$.isPhase1Solved(tableau)
39144	172	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	isPhase1Solved($)
994	177	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, $.epsilon)
994	177	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	MathUtils.equals($.getEntry(0, $.getRhsOffset()), 0, epsilon)
39145	190	8	SimplexSolver.java	doOptimize	THIS	SimplexSolver	0	NIL-WHILE	$.isOptimal(tableau)
39145	190	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	isOptimal($)
998	133	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
999	144	16	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
39146	152	16	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
39146	152	16	SimplexTableau.java	createTableau	constraints	List<LinearConstraint>	0	NIL-FOR	i < $.size()
1000	160	20	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
1001	169	20	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
1001	169	20	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
1002	171	27	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1002	171	27	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1003	176	20	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1003	176	20	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
1003	176	20	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1003	176	20	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
1004	211	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
1005	236	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
1005	236	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
39147	248	8	SimplexTableau.java	initialize	THIS	SimplexTableau	0	NIL-FOR	artificialVar < $.numArtificialVariables
39147	248	8	SimplexTableau.java	initialize	artificialVar	int	0	NIL-FOR	$ < numArtificialVariables
39148	293	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
39148	293	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
1006	294	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	MathUtils.equals($.getEntry(i, col), 1.0, $.epsilon)
1006	294	12	SimplexTableau.java	getBasicRow	i	int	1	DEF	MathUtils.equals(getEntry($, col), 1.0, epsilon)
1006	294	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
1006	294	12	SimplexTableau.java	getBasicRow	col	int	1	DEF	MathUtils.equals(getEntry(i, $), 1.0, epsilon)
1007	296	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	MathUtils.equals($.getEntry(i, col), 0.0, $.epsilon)
1007	296	19	SimplexTableau.java	getBasicRow	i	int	0	RET	MathUtils.equals(getEntry($, col), 0.0, epsilon)
1007	296	19	SimplexTableau.java	getBasicRow	col	int	0	RET	MathUtils.equals(getEntry(i, $), 0.0, epsilon)
1008	307	8	SimplexTableau.java	discardArtificialVariables	THIS	SimplexTableau	0	RET	$.numArtificialVariables == 0
39149	313	8	SimplexTableau.java	discardArtificialVariables	i	int	0	NIL-FOR	$ < height
39149	313	8	SimplexTableau.java	discardArtificialVariables	height	int	0	NIL-FOR	i < $
39150	314	12	SimplexTableau.java	discardArtificialVariables	j	int	0	NIL-FOR	$ < width - 1
39150	314	12	SimplexTableau.java	discardArtificialVariables	width	int	0	NIL-FOR	j < $ - 1
39151	344	6	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
39151	344	6	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
39151	344	6	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
1009	346	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
1009	346	10	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
39152	370	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
39152	370	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
39153	387	8	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
39153	387	8	SimplexTableau.java	subtractRow	j	int	0	NIL-FOR	$ < getWidth()
1010	512	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
1010	512	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
1011	516	6	SimplexTableau.java	equals	other	Object	0	RET	$ == null
1802	77	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	$.minimalIterationCount == 1
39673	85	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
39673	85	8	SimpsonIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1803	88	12	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	i >= $.minimalIterationCount
1803	88	12	SimpsonIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1804	92	16	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	delta <= $.absoluteAccuracy
1804	92	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1804	92	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1804	92	16	SimpsonIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1805	109	8	SimpsonIntegrator.java	verifyIterationCount	THIS	SimpsonIntegrator	0	DEF	$.maximalIterationCount > 64
38521	106	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.mainBidiagonal.$.length
38521	106	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < mainBidiagonal.length
38522	118	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.singularValues.$.length
38522	118	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < singularValues.length
598	128	8	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedU == null
599	130	12	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	1	DEF	$.m >= $.n
38523	136	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n - 1
38523	136	16	SingularValueDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < n - 1
38524	142	20	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
38524	142	20	SingularValueDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < n
38525	149	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
38525	149	16	SingularValueDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < n
38526	152	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
38526	152	16	SingularValueDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
600	173	8	SingularValueDecompositionImpl.java	getUT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedUt == null
601	186	8	SingularValueDecompositionImpl.java	getS	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedS == null
602	205	8	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedV == null
603	207	12	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	1	DEF	$.m >= $.n
38527	216	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m - 1
38527	216	16	SingularValueDecompositionImpl.java	getV	i	int	0	NIL-FOR	$ < m - 1
38528	222	20	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.m
38528	222	20	SingularValueDecompositionImpl.java	getV	j	int	0	NIL-FOR	$ < m
38529	229	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.m
38529	229	16	SingularValueDecompositionImpl.java	getV	j	int	0	NIL-FOR	$ < m
38530	232	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
38530	232	16	SingularValueDecompositionImpl.java	getV	i	int	0	NIL-FOR	$ < n
604	250	8	SingularValueDecompositionImpl.java	getVT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedVt == null
38531	264	8	SingularValueDecompositionImpl.java	getCovariance	THIS	SingularValueDecompositionImpl	0	NIL-WHILE	dimension < $.n
38531	264	8	SingularValueDecompositionImpl.java	getCovariance	THIS	SingularValueDecompositionImpl	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
38531	264	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NIL-WHILE	$ < n
38531	264	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
38531	264	8	SingularValueDecompositionImpl.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
605	268	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	DEF	$ == 0
38532	306	8	SingularValueDecompositionImpl.java	getRank	i	int	0	NIL-FOR	$ >= 0
606	307	11	SingularValueDecompositionImpl.java	getRank	THIS	SingularValueDecompositionImpl	0	RET	$.singularValues[i] > threshold
606	307	11	SingularValueDecompositionImpl.java	getRank	i	int	0	RET	singularValues[$] > threshold
606	307	11	SingularValueDecompositionImpl.java	getRank	threshold	double	0	RET	singularValues[i] > $
1134	88	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
1135	103	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
1136	107	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
1137	128	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
1138	156	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
1138	156	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1138	156	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
1138	156	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
1138	156	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
39268	166	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
39268	166	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
39268	166	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
39269	174	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
39269	174	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
39269	174	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
38533	95	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rowDimension
38533	95	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rowDimension
38534	96	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columnDimension
38534	96	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columnDimension
607	110	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
607	110	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
608	159	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
608	159	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
609	173	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
609	173	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
38596	106	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
38596	106	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
38596	106	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
38597	142	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
639	146	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
639	146	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
38598	161	8	SparseFieldVector.java	add	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
38598	161	8	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < v.length
38598	161	8	SparseFieldVector.java	add	v	T[]	0	NIL-FOR	i < $.length
38599	175	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
640	184	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
38600	201	8	SparseFieldVector.java	append	THIS	SparseFieldVector	0	NIL-FOR	i < a.$.length
38600	201	8	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < a.length
38600	201	8	SparseFieldVector.java	append	a	T[]	0	NIL-FOR	i < $.length
38601	217	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
38602	229	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
641	232	12	SparseFieldVector.java	dotProduct	THIS	SparseFieldVector	0	DEF	idx < v.$.length
641	232	12	SparseFieldVector.java	dotProduct	idx	int	0	DEF	$ < v.length
641	232	12	SparseFieldVector.java	dotProduct	v	T[]	0	DEF	idx < $.length
38603	246	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
38604	258	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
38605	270	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
38606	282	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
38607	293	8	SparseFieldVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
38608	324	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
642	327	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
642	327	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
642	327	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
642	327	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
38609	341	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
38609	341	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
38610	355	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
38611	369	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
38611	369	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
38612	383	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
38613	411	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
38614	414	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
38615	427	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
38616	431	12	SparseFieldVector.java	outerProduct	THIS	SparseFieldVector	0	NIL-FOR	col < $.virtualSize
38616	431	12	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
643	441	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
38617	462	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
38617	462	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
38618	485	8	SparseFieldVector.java	setSubVector	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
38618	485	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
38618	485	8	SparseFieldVector.java	setSubVector	v	T[]	0	NIL-FOR	i < $.length
38619	501	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
644	504	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
644	504	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
645	516	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
38620	526	8	SparseFieldVector.java	subtract	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
38620	526	8	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < v.length
38620	526	8	SparseFieldVector.java	subtract	v	T[]	0	NIL-FOR	i < $.length
646	527	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
646	527	12	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
647	550	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	MatrixIndexException	index >= $.getDimension()
647	550	8	SparseFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
647	550	8	SparseFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
648	566	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DEF	$.getDimension() != n
648	566	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DEF	getDimension() != $
649	576	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
38621	601	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
650	615	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
650	615	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
651	619	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ == null
652	623	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector
653	628	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
654	629	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
654	629	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
655	632	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
655	632	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
656	635	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
656	635	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
38622	640	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
657	643	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
657	643	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
38623	648	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
658	651	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
658	651	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
658	651	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
1257	148	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	RET	xArray.$.length > 1
1257	148	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	RET	xArray.$.length == yArray.$.length
1257	148	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	RET	$.length > 1
1257	148	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	RET	$.length == yArray.length
1257	148	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	RET	xArray.length == $.length
39314	166	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
39314	166	8	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
1661	59	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DEF	x.$.length != y.$.length
1661	59	8	SplineInterpolator.java	interpolate	x	double	0	DEF	$.length != y.length
1661	59	8	SplineInterpolator.java	interpolate	y	double	0	DEF	x.length != $.length
1662	64	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DEF	x.$.length < 3
1662	64	8	SplineInterpolator.java	interpolate	x	double	0	DEF	$.length < 3
39612	72	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
39612	72	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1663	73	12	SplineInterpolator.java	interpolate	i	int	0	DEF	x[$] >= x[$ + 1]
1663	73	12	SplineInterpolator.java	interpolate	x	double	0	DEF	$[i] >= $[i + 1]
39613	82	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
39613	82	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
39614	91	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
39614	91	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
39615	106	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
39616	114	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
39616	114	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1288	567	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DEF	n != sample2.$.length
1288	567	8	StatUtils.java	sumDifference	n	int	0	DEF	$ < 1
1288	567	8	StatUtils.java	sumDifference	n	int	0	DEF	$ != sample2.length
1288	567	8	StatUtils.java	sumDifference	sample2	double[]	0	DEF	n != $.length
39329	573	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
39329	573	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
1289	612	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DEF	n != sample2.$.length
1289	612	8	StatUtils.java	varianceDifference	n	int	0	DEF	$ != sample2.length
1289	612	8	StatUtils.java	varianceDifference	n	int	0	DEF	$ < 2
1289	612	8	StatUtils.java	varianceDifference	sample2	double[]	0	DEF	n != $.length
39330	617	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
39330	617	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
1210	131	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
1210	131	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
1211	134	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
1484	117	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
1485	126	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
39490	134	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
1486	152	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
1111	72	8	Sum.java	increment	THIS	Sum	1	DEF	$.n == 0
1112	121	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length)
1112	121	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1112	121	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length)
1112	121	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $)
39263	123	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
39263	123	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
39263	123	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1113	89	8	SumOfLogs.java	getResult	THIS	SumOfLogs	1	RET	$.n > 0
1114	132	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length)
1114	132	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1114	132	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length)
1114	132	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $)
39264	134	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
39264	134	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
39264	134	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1109	72	8	SumOfSquares.java	increment	THIS	SumOfSquares	1	DEF	$.n == 0
1110	121	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length)
1110	121	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1110	121	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length)
1110	121	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $)
39262	123	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
39262	123	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
39262	123	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1172	154	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl instanceof Mean
1173	157	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl instanceof Variance
1174	160	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl instanceof GeometricMean
1175	201	8	SummaryStatistics.java	getMean	THIS	SummaryStatistics	1	RET	$.mean == $.meanImpl
1176	217	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
1177	218	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
1178	235	8	SummaryStatistics.java	getVariance	THIS	SummaryStatistics	1	RET	$.varianceImpl == $.variance
1179	339	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
1180	342	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
1181	356	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
1181	356	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
1182	359	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
1183	630	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	DEF	$.n > 0
1184	664	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
1185	675	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
1185	675	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
1186	680	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
1186	680	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
1187	685	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
1187	685	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
1188	690	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
1188	690	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
1189	695	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
1189	695	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
1190	700	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
1190	700	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
1191	705	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
1191	705	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
1192	710	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
1192	710	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
402	55	8	TDistributionImpl.java	setDegreesOfFreedom	degreesOfFreedom	double	0	DEF	$ <= 0.0
403	80	8	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ == 0.0
404	88	12	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
405	115	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
406	118	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1241	1027	8	TTestImpl.java	checkSignificanceLevel	alpha	double	0	DEF	$ > 0.5
1241	1027	8	TTestImpl.java	checkSignificanceLevel	alpha	double	0	DEF	$ <= 0
1242	1040	8	TTestImpl.java	checkSampleData	THIS	TTestImpl	0	DEF	data.$.length < 2
1242	1040	8	TTestImpl.java	checkSampleData	data	double[]	0	DEF	$ == null
1242	1040	8	TTestImpl.java	checkSampleData	data	double[]	0	DEF	$.length < 2
1243	1053	8	TTestImpl.java	checkSampleData	stat	StatisticalSummary	0	DEF	$.getN() < 2
1243	1053	8	TTestImpl.java	checkSampleData	stat	StatisticalSummary	0	DEF	$ == null
1157	86	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
39584	98	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
39584	98	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1378	73	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	IllegalArgumentException	population.getPopulationSize() < $.arity
1378	73	8	TournamentSelection.java	tournament	population	ListPopulation	0	IllegalArgumentException	$.getPopulationSize() < this.arity
39383	85	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
39383	85	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
5	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
5	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
6	147	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
7	158	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
7	158	8	TransformerMap.java	equals	other	Object	0	RET	this == $
8	161	8	TransformerMap.java	equals	other	Object	0	RET	$ == null
9	166	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
9	166	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
10	169	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
10	169	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
11	173	16	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
11	173	16	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
1810	83	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
39674	90	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
39674	90	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
39675	120	8	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
39675	120	8	TrapezoidIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1811	122	12	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	i >= $.minimalIterationCount
1811	122	12	TrapezoidIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1812	126	16	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.absoluteAccuracy
1812	126	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1812	126	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1812	126	16	TrapezoidIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1813	142	8	TrapezoidIntegrator.java	verifyIterationCount	THIS	TrapezoidIntegrator	0	DEF	$.maximalIterationCount > 64
520	67	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
521	90	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
522	103	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
38337	109	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
523	113	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
523	113	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
38338	116	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
38338	116	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
38339	119	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
38339	119	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
38340	121	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
38340	121	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
38341	126	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
38341	126	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
524	147	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
38342	151	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
38342	151	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
525	153	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
526	156	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
526	156	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
38343	206	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
38343	206	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
38344	212	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
38344	212	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
527	218	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
38345	229	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
38345	229	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
38346	233	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
38346	233	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
38347	243	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
38347	243	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
38348	249	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
38348	249	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
38349	255	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
38349	255	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
38350	257	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
38350	257	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1370	47	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DEF	mean.$.length != standardDeviation.$.length
1370	47	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DEF	$.length != standardDeviation.length
1370	47	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DEF	mean.length != $.length
39379	78	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
39379	78	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
39379	78	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
1806	68	8	UnivariateRealIntegratorImpl.java	UnivariateRealIntegratorImpl	f	UnivariateRealFunction	0	DEF	$ == null
1807	108	8	UnivariateRealIntegratorImpl.java	getResult	THIS	UnivariateRealIntegratorImpl	1	RET	$.resultComputed
1808	159	8	UnivariateRealIntegratorImpl.java	verifyInterval	lower	double	0	DEF	$ >= upper
1808	159	8	UnivariateRealIntegratorImpl.java	verifyInterval	upper	double	0	DEF	lower >= $
1809	172	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.minimalIterationCount <= 0
1809	172	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.maximalIterationCount <= $.minimalIterationCount
1681	75	8	UnivariateRealSolverImpl.java	UnivariateRealSolverImpl	f	UnivariateRealFunction	0	DEF	$ == null
1682	102	8	UnivariateRealSolverImpl.java	checkResultComputed	THIS	UnivariateRealSolverImpl	0	DEF	$.resultComputed
1683	208	8	UnivariateRealSolverImpl.java	verifyInterval	lower	double	0	DEF	$ >= upper
1683	208	8	UnivariateRealSolverImpl.java	verifyInterval	upper	double	0	DEF	lower >= $
1684	225	8	UnivariateRealSolverImpl.java	verifySequence	THIS	UnivariateRealSolverImpl	0	DEF	$.isSequence(lower, initial, upper)
1684	225	8	UnivariateRealSolverImpl.java	verifySequence	lower	double	0	DEF	isSequence($, initial, upper)
1684	225	8	UnivariateRealSolverImpl.java	verifySequence	initial	double	0	DEF	isSequence(lower, $, upper)
1684	225	8	UnivariateRealSolverImpl.java	verifySequence	upper	double	0	DEF	isSequence(lower, initial, $)
1685	248	8	UnivariateRealSolverImpl.java	verifyBracketing	THIS	UnivariateRealSolverImpl	0	DEF	$.isBracketing(lower, upper, f)
1685	248	8	UnivariateRealSolverImpl.java	verifyBracketing	lower	double	0	DEF	isBracketing($, upper, f)
1685	248	8	UnivariateRealSolverImpl.java	verifyBracketing	upper	double	0	DEF	isBracketing(lower, $, f)
1685	248	8	UnivariateRealSolverImpl.java	verifyBracketing	f	UnivariateRealFunction	0	DEF	isBracketing(lower, upper, $)
1722	170	8	UnivariateRealSolverUtils.java	bracket	function	UnivariateRealFunction	0	DEF	$ == null
1723	173	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	DEF	$ <= 0
1724	177	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	DEF	$ < lowerBound
1724	177	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	DEF	$ > upperBound
1724	177	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	DEF	initial < $
1724	177	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	DEF	$ >= upperBound
1724	177	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	DEF	initial > $
1724	177	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	DEF	lowerBound >= $
39633	188	8	UnivariateRealSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
39633	188	8	UnivariateRealSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
39633	188	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
39633	188	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
39633	188	8	UnivariateRealSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
39633	188	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
39633	188	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
39633	188	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
1725	198	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	ConvergenceException	$ * fb > 0.0
1725	198	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	ConvergenceException	fa * $ > 0.0
1726	227	8	UnivariateRealSolverUtils.java	setup	f	UnivariateRealFunction	0	DEF	$ == null
39380	126	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
39380	126	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
39380	126	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
39381	141	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
39381	141	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
1371	238	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
1372	255	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
1373	302	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution.getBinStats().size() == 0
1373	302	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution == null
1374	329	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
1375	332	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
1375	332	8	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
1376	336	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
1376	336	12	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
1117	156	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
1118	166	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
1119	168	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
1120	171	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
1121	191	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
1122	214	8	Variance.java	evaluate	values	double[]	0	DEF	$ == null
1123	245	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1123	245	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1123	245	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1123	245	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1124	247	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1125	249	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1126	289	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1126	289	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1126	289	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1126	289	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1127	290	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1128	292	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
39266	296	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
39266	296	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
39266	296	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1129	302	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
234	283	4	Vector3D.java	normalize	s	double	0	DEF	$ == 0
235	307	4	Vector3D.java	orthogonal	threshold	double	0	DEF	$ == 0
236	311	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
236	311	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
236	311	4	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
236	311	4	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
237	314	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
237	314	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
237	314	11	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
237	314	11	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
238	337	4	Vector3D.java	angle	normProduct	double	0	DEF	$ == 0
239	343	4	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
239	343	4	Vector3D.java	angle	dot	double	0	RET	$ > threshold
239	343	4	Vector3D.java	angle	threshold	double	0	RET	dot < -$
239	343	4	Vector3D.java	angle	threshold	double	0	RET	dot > $
240	346	6	Vector3D.java	angle	dot	double	0	RET	$ >= 0
241	412	4	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
241	412	4	Vector3D.java	equals	other	Object	0	RET	this == $
242	416	4	Vector3D.java	equals	other	Object	0	RET	$ == null
243	423	6	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
244	445	6	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
184	240	8	Vector3DFormat.java	format	obj	Object	0	RET	$ instanceof Vector3D
185	259	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
186	278	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
186	278	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
186	278	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
187	285	8	Vector3DFormat.java	parse	x	Number	0	RET	$ == null
188	294	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
188	294	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
188	294	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
189	299	8	Vector3DFormat.java	parse	y	Number	0	RET	$ == null
190	308	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
190	308	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
190	308	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
191	313	8	Vector3DFormat.java	parse	z	Number	0	RET	$ == null
192	322	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
192	322	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
192	322	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
1139	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
1139	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
39270	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
39270	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
39270	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
39271	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
39271	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
1140	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
39272	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
39272	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
39273	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
39273	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
1141	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
1141	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
1142	138	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ == null
1143	140	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
1144	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
1144	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
1145	145	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
1145	145	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
1146	147	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
1146	147	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
1147	149	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
1147	149	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
39275	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
39275	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
1158	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
1158	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
39276	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
39276	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
39276	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
39277	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
39277	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
39277	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
1159	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
1159	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
1160	95	8	VectorialMean.java	equals	obj	Object	0	RET	$ == null
1161	97	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
1162	100	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
1162	100	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
438	62	8	WeibullDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
439	101	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ > 1.0
439	101	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ < 0.0
440	104	15	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
441	106	16	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
442	119	8	WeibullDistributionImpl.java	setShape	alpha	double	0	DEF	$ <= 0.0
443	132	8	WeibullDistributionImpl.java	setScale	beta	double	0	DEF	$ <= 0.0
444	75	8	ZipfDistributionImpl.java	setNumberOfElements	n	int	0	DEF	$ <= 0
445	102	8	ZipfDistributionImpl.java	setExponent	s	double	0	DEF	$ <= 0.0
446	117	8	ZipfDistributionImpl.java	probability	THIS	ZipfDistributionImpl	0	RET	x > $.getNumberOfElements()
446	117	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ > getNumberOfElements()
446	117	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ <= 0
447	133	8	ZipfDistributionImpl.java	cumulativeProbability	x	int	1	RET	$ <= 0
448	135	15	ZipfDistributionImpl.java	cumulativeProbability	THIS	ZipfDistributionImpl	0	RET	x >= $.getNumberOfElements()
448	135	15	ZipfDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ >= getNumberOfElements()
38227	181	8	ZipfDistributionImpl.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
