id	line	column	filename	methodname	varname	vartype	else	return	right
659	90	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ < 0.0
659	90	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ > 1.0
660	128	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	THIS	AbstractContinuousDistribution	0	RET	FastMath.abs(rootFindingFunction.value(lowerBound)) < $.getSolverAbsoluteAccuracy()
660	128	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	FastMath.abs($.value(lowerBound)) < getSolverAbsoluteAccuracy()
660	128	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	lowerBound	double	0	RET	FastMath.abs(rootFindingFunction.value($)) < getSolverAbsoluteAccuracy()
661	131	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	THIS	AbstractContinuousDistribution	0	RET	FastMath.abs(rootFindingFunction.value(upperBound)) < $.getSolverAbsoluteAccuracy()
661	131	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	FastMath.abs($.value(upperBound)) < getSolverAbsoluteAccuracy()
661	131	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	upperBound	double	0	RET	FastMath.abs(rootFindingFunction.value($)) < getSolverAbsoluteAccuracy()
662	180	8	AbstractContinuousDistribution.java	sample	sampleSize	int	0	DEF	$ <= 0
34318	184	8	AbstractContinuousDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
34318	184	8	AbstractContinuousDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
700	62	8	AbstractDistribution.java	cumulativeProbability	x0	double	0	DEF	$ > x1
700	62	8	AbstractDistribution.java	cumulativeProbability	x1	double	0	DEF	x0 > $
35443	130	8	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
35443	130	8	AbstractEstimator.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
35444	133	12	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	j < $.cols
35444	133	12	AbstractEstimator.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1673	154	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	EstimationException	++$.costEvaluations > $.maxCostEval
35445	161	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
35445	161	8	AbstractEstimator.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
35446	185	8	AbstractEstimator.java	getRMS	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
35446	185	8	AbstractEstimator.java	getRMS	i	int	0	NIL-FOR	$ < wm.length
35446	185	8	AbstractEstimator.java	getRMS	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
35447	200	8	AbstractEstimator.java	getChiSquare	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
35447	200	8	AbstractEstimator.java	getChiSquare	i	int	0	NIL-FOR	$ < wm.length
35447	200	8	AbstractEstimator.java	getChiSquare	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
35448	225	8	AbstractEstimator.java	getCovariances	i	int	0	NIL-FOR	$ < m
35448	225	8	AbstractEstimator.java	getCovariances	m	int	0	NIL-FOR	i < $
35449	226	12	AbstractEstimator.java	getCovariances	j	int	0	NIL-FOR	$ < m
35449	226	12	AbstractEstimator.java	getCovariances	m	int	0	NIL-FOR	j < $
35450	228	16	AbstractEstimator.java	getCovariances	k	int	0	NIL-FOR	$ < max
35450	228	16	AbstractEstimator.java	getCovariances	max	int	0	NIL-FOR	k < $
1674	260	8	AbstractEstimator.java	guessParametersErrors	m	int	0	EstimationException	$ <= p
1674	260	8	AbstractEstimator.java	guessParametersErrors	p	int	0	EstimationException	m <= $
35451	268	8	AbstractEstimator.java	guessParametersErrors	THIS	AbstractEstimator	0	NIL-FOR	i < errors.$.length
35451	268	8	AbstractEstimator.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
35451	268	8	AbstractEstimator.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
918	69	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	DEF	$ < 1
919	73	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	DEF	$ < 1
920	89	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	DEF	d.$.length == 0
920	89	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	DEF	$.length == 0
921	92	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	DEF	d[0].length == 0
921	92	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	DEF	$[0].length == 0
922	107	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	DEF	d.$.length == 0
922	107	8	AbstractFieldMatrix.java	extractField	d	T[]	0	DEF	$.length == 0
923	128	8	AbstractFieldMatrix.java	buildArray	columns	int	0	RET	$ < 0
34740	134	8	AbstractFieldMatrix.java	buildArray	THIS	AbstractFieldMatrix	0	NIL-FOR	i < array.$.length
34740	134	8	AbstractFieldMatrix.java	buildArray	i	int	0	NIL-FOR	$ < array.length
34740	134	8	AbstractFieldMatrix.java	buildArray	array	T[][]	0	NIL-FOR	i < $.length
34741	178	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
34741	178	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
34742	179	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
34742	179	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
34743	197	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
34743	197	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
34744	198	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
34744	198	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
34745	213	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
34745	213	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
34746	214	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
34746	214	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
34747	229	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
34747	229	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
34748	230	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
34748	230	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
34749	250	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
34749	250	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
34750	251	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
34750	251	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
34751	253	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
34751	253	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
34752	275	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
34752	275	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
34752	275	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
34753	277	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
34753	277	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
34753	277	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
34754	295	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
34754	295	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
34755	296	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
34755	296	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
924	339	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination.$.length < rowsCount
924	339	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination[0].length < columnsCount
924	339	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	DEF	destination.length < $
924	339	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	DEF	destination[0].length < $
924	339	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$.length < rowsCount
924	339	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$[0].length < columnsCount
925	380	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination.$.length < selectedRows.$.length
925	380	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination[0].length < selectedColumns.$.length
925	380	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	DEF	destination.length < $.length
925	380	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	DEF	destination[0].length < $.length
925	380	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$.length < selectedRows.length
925	380	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$[0].length < selectedColumns.length
34756	389	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
34756	389	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
34756	389	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
34757	391	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
34757	391	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
34757	391	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
926	403	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
927	408	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
34758	412	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
34758	412	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
928	413	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DEF	subMatrix[r].length != nCols
928	413	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
928	413	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
928	413	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DEF	$[r].length != nCols
34759	425	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
34759	425	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
34760	426	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
34760	426	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
34761	440	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
34761	440	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
929	452	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
929	452	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
929	452	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
34762	458	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
34762	458	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
34763	471	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
34763	471	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
930	483	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
930	483	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
930	483	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
34764	489	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
34764	489	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
931	505	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
931	505	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nCols
34765	509	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
34765	509	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
932	525	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
932	525	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nRows
34766	529	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
34766	529	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
34767	542	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
34767	542	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
933	554	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
933	554	8	AbstractFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
933	554	8	AbstractFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
34768	557	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
34768	557	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
34769	570	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
34769	570	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
934	582	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
934	582	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
934	582	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
34770	585	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
34770	585	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
935	638	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
935	638	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
34771	642	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
34771	642	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
936	654	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DEF	v.$.length != nCols
936	654	8	AbstractFieldMatrix.java	operate	nCols	int	0	DEF	v.length != $
936	654	8	AbstractFieldMatrix.java	operate	v	T[]	0	DEF	$.length != nCols
34772	661	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
34772	661	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
34773	663	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
34773	663	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
937	680	12	AbstractFieldMatrix.java	operate	nCols	int	0	DEF	v.getDimension() != $
937	680	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DEF	$.getDimension() != nCols
34774	687	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
34774	687	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
34775	689	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
34775	689	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
938	705	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DEF	v.$.length != nRows
938	705	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
938	705	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DEF	$.length != nRows
34776	712	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
34776	712	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
34777	714	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
34777	714	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
939	732	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DEF	v.getDimension() != $
939	732	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DEF	$.getDimension() != nRows
34778	739	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
34778	739	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
34779	741	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
34779	741	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
34780	757	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
34780	757	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
34781	758	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
34781	758	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
34782	773	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
34782	773	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
34783	774	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
34783	774	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
34784	789	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
34784	789	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
34785	790	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
34785	790	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
34786	807	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
34786	807	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
34787	808	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
34787	808	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
34788	821	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
34788	821	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
34789	822	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
34789	822	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
34790	837	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
34790	837	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
34791	838	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
34791	838	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
34792	853	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
34792	853	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
34793	854	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
34793	854	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
34794	871	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
34794	871	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
34795	872	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
34795	872	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
34796	920	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
34796	920	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
940	921	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
34797	925	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
34797	925	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
941	926	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
942	948	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
942	948	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
943	951	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix<?> == false
944	957	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getColumnDimension() != nCols
944	957	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getRowDimension() != nRows
944	957	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
944	957	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
34798	960	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
34798	960	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
34799	961	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
34799	961	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
945	962	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
945	962	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
945	962	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
945	962	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
34800	982	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
34800	982	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
34801	983	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
34801	983	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
946	996	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	row >= $.getRowDimension()
946	996	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
946	996	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= getRowDimension()
947	1009	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	column >= $.getColumnDimension()
947	1009	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
947	1009	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= getColumnDimension()
948	1029	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	MatrixIndexException	$ > endRow
948	1029	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	MatrixIndexException	startRow > $
949	1036	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	MatrixIndexException	$ > endColumn
949	1036	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	MatrixIndexException	startColumn > $
950	1051	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
950	1051	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
950	1051	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
951	1052	12	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	selectedRows.$.length == 0
951	1052	12	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length == 0
952	1072	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
952	1072	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
952	1072	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	DEF	getRowDimension() != $.getRowDimension()
952	1072	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	DEF	getColumnDimension() != $.getColumnDimension()
953	1087	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
953	1087	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
953	1087	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	DEF	getColumnDimension() != $.getColumnDimension()
953	1087	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	DEF	getRowDimension() != $.getRowDimension()
954	1102	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getColumnDimension() != m.getRowDimension()
954	1102	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DEF	getColumnDimension() != $.getRowDimension()
564	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	NullArgumentException	$ == null
565	132	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	NullArgumentException	$ == null
566	162	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
566	162	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
34313	164	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
34313	164	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
34313	164	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
567	169	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
567	169	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
615	90	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	0	DEF	$ > x1
615	90	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	double	0	DEF	x0 > $
616	94	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	1	RET	FastMath.floor($) < $
617	128	8	AbstractIntegerDistribution.java	probability	fl	double	1	RET	$ == x
617	128	8	AbstractIntegerDistribution.java	probability	x	double	1	RET	fl == $
618	147	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	DEF	$ > x1
618	147	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	DEF	x0 > $
619	166	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ > 1.0
619	166	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ < 0.0
34315	176	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	0	NIL-WHILE	$ < x1
34315	176	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	0	NIL-WHILE	x0 < $
620	179	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	1	DEF	$ > p
620	179	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	1	DEF	pm > $
621	181	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x1
621	181	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	1	DEF	xm == $
622	191	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x0
622	191	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	1	DEF	xm == $
34316	204	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	0	NIL-WHILE	$ > p
34316	204	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	pm > $
623	246	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	DEF	$ <= 0
34317	250	8	AbstractIntegerDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
34317	250	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
624	273	8	AbstractIntegerDistribution.java	checkedCumulativeProbability	result	double	0	FunctionEvaluationException	Double.isNaN($)
1887	126	12	AbstractIntegrator.java	requiresDenseOutput	THIS	AbstractIntegrator	0	RET	$.handler.requiresDenseOutput()
1888	181	8	AbstractIntegrator.java	computeDerivatives	THIS	AbstractIntegrator	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1889	200	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	ode.getDimension() != y0.$.length
1889	200	8	AbstractIntegrator.java	sanityChecks	ode	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y0.length
1889	200	8	AbstractIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	ode.getDimension() != $.length
1890	205	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	ode.getDimension() != y.$.length
1890	205	8	AbstractIntegrator.java	sanityChecks	ode	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y.length
1890	205	8	AbstractIntegrator.java	sanityChecks	y	double[]	0	IntegratorException	ode.getDimension() != $.length
1891	210	8	AbstractIntegrator.java	sanityChecks	t0	double	0	IntegratorException	FastMath.abs(t - $) <= 1.0e-12 * FastMath.max(FastMath.abs($), FastMath.abs(t))
1891	210	8	AbstractIntegrator.java	sanityChecks	t	double	0	IntegratorException	FastMath.abs($ - t0) <= 1.0e-12 * FastMath.max(FastMath.abs(t0), FastMath.abs($))
1264	104	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	FunctionEvaluationException	$.weightedResidualJacobian.$.length != $.rows
35237	111	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
35237	111	8	AbstractLeastSquaresOptimizer.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
35238	114	12	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
35238	114	12	AbstractLeastSquaresOptimizer.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1265	129	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	FunctionEvaluationException	$.objective.$.length != $.rows
35239	139	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
35239	139	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
35240	188	8	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.cols
35240	188	8	AbstractLeastSquaresOptimizer.java	getCovariances	i	int	0	NIL-FOR	$ < cols
35241	189	12	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
35241	189	12	AbstractLeastSquaresOptimizer.java	getCovariances	j	int	0	NIL-FOR	$ < cols
35242	191	16	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	k < $.rows
35242	191	16	AbstractLeastSquaresOptimizer.java	getCovariances	k	int	0	NIL-FOR	$ < rows
1266	221	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	ConvergenceException	$.rows <= $.cols
35243	228	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
35243	228	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
35243	228	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
1200	98	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
1541	91	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DEF	$ == null
1542	95	8	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	data.$.length != nobs * (nvars + 1)
1542	95	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DEF	$.length != nobs * (nvars + 1)
1542	95	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DEF	data.length != $ * (nvars + 1)
1542	95	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DEF	data.length != nobs * ($ + 1)
1543	99	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DEF	$ <= nvars
1543	99	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DEF	nobs <= $
35373	107	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
35373	107	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
1544	109	12	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	$.noIntercept
35374	112	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < cols
35374	112	12	AbstractMultipleLinearRegression.java	newSampleData	cols	int	0	NIL-FOR	j < $
1545	127	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	DEF	$ == null
1546	131	8	AbstractMultipleLinearRegression.java	newYSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	y.$.length == 0
1546	131	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	DEF	$.length == 0
1547	162	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DEF	$ == null
1548	166	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length == 0
1548	166	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DEF	$.length == 0
1549	170	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	$.noIntercept
35375	175	12	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NIL-FOR	i < x.$.length
35375	175	12	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	NIL-FOR	$ < x.length
35375	175	12	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NIL-FOR	i < $.length
1550	176	16	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x[i].length != nVars
1550	176	16	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	DEF	x[$].length != nVars
1550	176	16	AbstractMultipleLinearRegression.java	newXSampleData	nVars	int	0	DEF	x[i].length != $
1550	176	16	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DEF	$[i].length != nVars
1551	203	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length != y.$.length
1551	203	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$.length != y.length
1551	203	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$ == null
1551	203	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DEF	x.length != $.length
1551	203	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DEF	$ == null
1552	209	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length == 0
1552	209	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$.length == 0
1553	213	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x[0].length + 1 > x.$.length
1553	213	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$[0].length + 1 > $.length
1554	230	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length != covariance.$.length
1554	230	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DEF	$.length != covariance.length
1554	230	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	x.length != $.length
1555	234	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	covariance.$.length != covariance[0].length
1555	234	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	covariance.$.length > 0
1555	234	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	$.length != $[0].length
1555	234	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	$.length > 0
35376	273	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
35376	273	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
35400	108	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
35400	108	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
35400	108	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
35401	110	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
1583	111	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
1584	115	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
1584	115	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
1584	115	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
1585	157	8	AbstractRandomGenerator.java	nextInt	n	int	0	NotStrictlyPositiveException	$ <= 0
1586	253	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
35402	261	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
1587	266	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
857	60	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ < 1
858	63	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ < 1
34620	85	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
34620	85	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
34621	86	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
34621	86	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
34622	103	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
34622	103	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
34623	104	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
34623	104	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
34624	118	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
34624	118	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
34625	119	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
34625	119	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
34626	133	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
34626	133	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
34627	134	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
34627	134	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
34628	153	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
34628	153	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
34629	154	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
34629	154	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
34630	156	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
34630	156	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
34631	177	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
34631	177	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
34631	177	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
34632	179	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
34632	179	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
34632	179	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
34633	260	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
34633	260	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
34634	261	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
34634	261	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
859	302	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
859	302	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
859	302	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
859	302	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
859	302	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
859	302	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
860	339	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
860	339	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
860	339	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
860	339	8	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
860	339	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
860	339	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
34635	346	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
34635	346	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
34635	346	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
34636	348	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
34636	348	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
34636	348	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
861	359	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
862	364	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
34637	368	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
34637	368	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
863	369	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
863	369	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
863	369	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
863	369	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[r].length != nCols
34638	379	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
34638	379	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
34639	380	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
34639	380	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
34640	395	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
34640	395	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
864	406	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
864	406	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
864	406	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
34641	412	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
34641	412	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
34642	424	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
34642	424	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
865	435	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
865	435	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
865	435	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
34643	441	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
34643	441	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
866	456	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
866	456	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nCols
34644	460	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
34644	460	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
867	475	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
867	475	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nRows
34645	479	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
34645	479	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
34646	491	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
34646	491	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
868	502	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
868	502	8	AbstractRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
868	502	8	AbstractRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
34647	505	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
34647	505	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
34648	517	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
34648	517	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
869	528	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
869	528	8	AbstractRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
869	528	8	AbstractRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
34649	531	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
34649	531	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
870	575	8	AbstractRealMatrix.java	inverse	THIS	AbstractRealMatrix	0	DEF	$.lu == null
871	596	8	AbstractRealMatrix.java	isSingular	THIS	AbstractRealMatrix	0	DEF	$.lu == null
872	613	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
872	613	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
34650	617	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
34650	617	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
873	629	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nCols
873	629	8	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
873	629	8	AbstractRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
34651	634	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
34651	634	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
34652	636	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
34652	636	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
874	653	12	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
874	653	12	AbstractRealMatrix.java	operate	v	RealVector	0	DimensionMismatchException	$.getDimension() != nCols
34653	658	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
34653	658	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
34654	660	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
34654	660	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
875	676	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nRows
875	676	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
875	676	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
34655	681	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
34655	681	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
34656	683	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
34656	683	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
876	701	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
876	701	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DimensionMismatchException	$.getDimension() != nRows
34657	706	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
34657	706	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
34658	708	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
34658	708	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
34659	724	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
34659	724	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
34660	725	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
34660	725	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
34661	741	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
34661	741	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
34662	742	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
34662	742	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
34663	757	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
34663	757	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
34664	758	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
34664	758	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
34665	776	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
34665	776	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
34666	777	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
34666	777	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
34667	790	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
34667	790	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
34668	791	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
34668	791	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
34669	807	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
34669	807	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
34670	808	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
34670	808	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
34671	823	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
34671	823	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
34672	824	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
34672	824	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
34673	842	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
34673	842	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
34674	843	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
34674	843	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
877	882	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
878	892	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
879	920	8	AbstractRealMatrix.java	luDecompose	THIS	AbstractRealMatrix	0	DEF	$.lu == null
34675	938	8	AbstractRealMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
34675	938	8	AbstractRealMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
880	939	12	AbstractRealMatrix.java	toString	i	int	0	DEF	$ > 0
34676	943	12	AbstractRealMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
34676	943	12	AbstractRealMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
881	944	16	AbstractRealMatrix.java	toString	j	int	0	DEF	$ > 0
882	966	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
882	966	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
883	969	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
884	975	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
884	975	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
884	975	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
884	975	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
34677	978	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
34677	978	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
34678	979	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
34678	979	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
885	980	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
885	980	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
885	980	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
885	980	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
34679	1000	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
34679	1000	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
34680	1001	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
34680	1001	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
761	60	8	AbstractRealVector.java	checkVectorDimensions	d	int	0	DimensionMismatchException	$ != n
761	60	8	AbstractRealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	d != $
762	72	8	AbstractRealVector.java	checkIndex	THIS	AbstractRealVector	0	MatrixIndexException	index >= $.getDimension()
762	72	8	AbstractRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
762	72	8	AbstractRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
34444	89	8	AbstractRealVector.java	setSubVector	THIS	AbstractRealVector	0	NIL-FOR	i < v.$.length
34444	89	8	AbstractRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
34444	89	8	AbstractRealVector.java	setSubVector	v	double[]	0	NIL-FOR	i < $.length
34445	99	8	AbstractRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34445	99	8	AbstractRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34445	99	8	AbstractRealVector.java	add	e	Entry	0	NIL-WHILE	($ = it.next()) != null
763	107	8	AbstractRealVector.java	add	v	RealVector	0	RET	$ instanceof ArrayRealVector
34446	114	8	AbstractRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34446	114	8	AbstractRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34446	114	8	AbstractRealVector.java	add	e	Entry	0	NIL-WHILE	($ = it.next()) != null
34447	126	8	AbstractRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34447	126	8	AbstractRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34447	126	8	AbstractRealVector.java	subtract	e	Entry	0	NIL-WHILE	($ = it.next()) != null
764	135	8	AbstractRealVector.java	subtract	v	RealVector	0	RET	$ instanceof ArrayRealVector
34448	142	8	AbstractRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34448	142	8	AbstractRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34448	142	8	AbstractRealVector.java	subtract	e	Entry	0	NIL-WHILE	($ = it.next()) != null
765	156	8	AbstractRealVector.java	mapAddToSelf	d	double	0	IllegalArgumentException:RET	$ != 0
34449	180	8	AbstractRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34449	180	8	AbstractRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34449	180	8	AbstractRealVector.java	dotProduct	e	Entry	0	NIL-WHILE	($ = it.next()) != null
34450	202	8	AbstractRealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34450	202	8	AbstractRealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34450	202	8	AbstractRealVector.java	getDistance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
34451	214	8	AbstractRealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34451	214	8	AbstractRealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34451	214	8	AbstractRealVector.java	getNorm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
34452	226	8	AbstractRealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34452	226	8	AbstractRealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34452	226	8	AbstractRealVector.java	getL1Norm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
34453	237	8	AbstractRealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34453	237	8	AbstractRealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34453	237	8	AbstractRealVector.java	getLInfNorm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
34454	254	8	AbstractRealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34454	254	8	AbstractRealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34454	254	8	AbstractRealVector.java	getL1Distance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
34455	266	8	AbstractRealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34455	266	8	AbstractRealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34455	266	8	AbstractRealVector.java	getL1Distance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
34456	278	8	AbstractRealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34456	278	8	AbstractRealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34456	278	8	AbstractRealVector.java	getLInfDistance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
34457	290	8	AbstractRealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34457	290	8	AbstractRealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34457	290	8	AbstractRealVector.java	getLInfDistance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
34458	304	8	AbstractRealVector.java	getMinIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
766	306	12	AbstractRealVector.java	getMinIndex	entry	Entry	0	DEF	$.getValue() <= minValue
766	306	12	AbstractRealVector.java	getMinIndex	minValue	double	0	DEF	entry.getValue() <= $
34459	330	8	AbstractRealVector.java	getMaxIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
767	332	12	AbstractRealVector.java	getMaxIndex	entry	Entry	0	DEF	$.getValue() >= maxValue
767	332	12	AbstractRealVector.java	getMaxIndex	maxValue	double	0	DEF	entry.getValue() >= $
768	725	8	AbstractRealVector.java	outerProduct	v	RealVector	1	DEF	$ instanceof SparseRealVector
34460	732	8	AbstractRealVector.java	outerProduct	thisIt	Iterator<Entry>	0	NIL-WHILE	(thisE = $.next()) != null
34460	732	8	AbstractRealVector.java	outerProduct	thisIt	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34460	732	8	AbstractRealVector.java	outerProduct	thisE	Entry	0	NIL-WHILE	($ = thisIt.next()) != null
34461	735	12	AbstractRealVector.java	outerProduct	otherIt	Iterator<Entry>	0	NIL-WHILE	(otherE = $.next()) != null
34461	735	12	AbstractRealVector.java	outerProduct	otherIt	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34461	735	12	AbstractRealVector.java	outerProduct	otherE	Entry	0	NIL-WHILE	($ = otherIt.next()) != null
34462	759	8	AbstractRealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34462	759	8	AbstractRealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34462	759	8	AbstractRealVector.java	set	e	Entry	0	NIL-WHILE	($ = it.next()) != null
34463	768	8	AbstractRealVector.java	toArray	i	int	0	NIL-FOR	$ < dim
34463	768	8	AbstractRealVector.java	toArray	dim	int	0	NIL-FOR	i < $
34464	834	8	AbstractRealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34464	834	8	AbstractRealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34464	834	8	AbstractRealVector.java	mapToSelf	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1744	148	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState != null
1744	148	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState != null
1745	272	6	AbstractStepInterpolator.java	getInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
1746	287	6	AbstractStepInterpolator.java	getInterpolatedDerivatives	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
1747	341	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
1748	374	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
1749	384	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
35529	385	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
35529	385	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
1750	423	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
35530	427	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
35530	427	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
1328	58	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	NullArgumentException	$ == null
1329	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1329	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1329	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
1329	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
1330	126	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	NullArgumentException	$ == null
1331	145	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1331	145	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
1331	145	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
1331	145	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
35293	147	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
35293	147	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
1332	162	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
1332	162	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
1333	165	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
1159	120	8	AbstractUnivariateRealOptimizer.java	optimize	f	UnivariateRealFunction	0	NullArgumentException	$ == null
1160	123	8	AbstractUnivariateRealOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
1440	108	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
1441	112	8	AbstractUnivariateStatistic.java	test	begin	int	0	NotPositiveException	$ < 0
1442	116	8	AbstractUnivariateStatistic.java	test	length	int	0	NotPositiveException	$ < 0
1443	120	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DEF	begin + length > values.$.length
1443	120	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DEF	begin + length > $.length
1443	120	8	AbstractUnivariateStatistic.java	test	begin	int	0	DEF	$ + length > values.length
1443	120	8	AbstractUnivariateStatistic.java	test	length	int	0	DEF	begin + $ > values.length
1444	125	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
1444	125	8	AbstractUnivariateStatistic.java	test	allowEmpty	boolean	0	RET	$
1445	203	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	NullArgumentException	$ == null
1446	207	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DimensionMismatchException	weights.$.length != values.$.length
1446	207	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DimensionMismatchException	weights.length != $.length
1446	207	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DimensionMismatchException	$.length != values.length
35318	212	8	AbstractUnivariateStatistic.java	test	i	int	0	NIL-FOR	$ < begin + length
35318	212	8	AbstractUnivariateStatistic.java	test	begin	int	0	NIL-FOR	i < $ + length
35318	212	8	AbstractUnivariateStatistic.java	test	length	int	0	NIL-FOR	i < begin + $
1447	213	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	Double.isNaN(weights[$])
1447	213	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	Double.isNaN($[i])
1448	217	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	Double.isInfinite(weights[$])
1448	217	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	Double.isInfinite($[i])
1449	221	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] < 0
1449	221	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] < 0
1450	225	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] > 0.0
1450	225	12	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
1450	225	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] > 0.0
1451	230	8	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
35395	111	8	AbstractWell.java	AbstractWell	j	int	0	NIL-FOR	$ < r
35395	111	8	AbstractWell.java	AbstractWell	r	int	0	NIL-FOR	j < $
1581	152	8	AbstractWell.java	setSeed	seed	int[]	0	RET	$ == null
1582	159	8	AbstractWell.java	setSeed	THIS	AbstractWell	0	DEF	seed.$.length < $.v.$.length
1582	159	8	AbstractWell.java	setSeed	seed	int[]	0	DEF	$.length < v.length
35396	160	12	AbstractWell.java	setSeed	THIS	AbstractWell	0	NIL-FOR	i < $.v.$.length
35396	160	12	AbstractWell.java	setSeed	i	int	0	NIL-FOR	$ < v.length
1835	201	8	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1835	201	8	AdamsBashforthIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
35587	230	8	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
35588	236	12	AdamsBashforthIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
35589	242	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.mainSetDimension
35589	242	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < mainSetDimension
1836	252	16	AdamsBashforthIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
35590	264	20	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
35590	264	20	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
35590	264	20	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1837	275	20	AdamsBashforthIntegrator.java	integrate	interpolatorTmp	NordsieckStepInterpolator	1	DEF	manager.evaluateStep($)
1837	275	20	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolatorTmp)
1838	277	24	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	1	DEF	FastMath.abs(dt) <= FastMath.ulp($.stepStart)
1838	277	24	AdamsBashforthIntegrator.java	integrate	dt	double	1	DEF	FastMath.abs($) <= FastMath.ulp(stepStart)
1839	324	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	manager.reset($.stepStart, y)
1839	324	12	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1839	324	12	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1839	324	12	AdamsBashforthIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1840	333	12	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1829	219	8	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1829	219	8	AdamsMoultonIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
35583	247	8	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
35584	253	12	AdamsMoultonIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
35585	267	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
35585	267	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
35585	267	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1830	276	16	AdamsMoultonIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
35586	283	20	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
35586	283	20	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
35586	283	20	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1831	293	20	AdamsMoultonIntegrator.java	integrate	interpolatorTmp	NordsieckStepInterpolator	1	DEF	manager.evaluateStep($)
1831	293	20	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolatorTmp)
1832	295	24	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	1	DEF	FastMath.abs(dt) <= FastMath.ulp($.stepStart)
1832	295	24	AdamsMoultonIntegrator.java	integrate	dt	double	1	DEF	FastMath.abs($) <= FastMath.ulp(stepStart)
1833	342	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	manager.reset($.stepStart, y)
1833	342	12	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1833	342	12	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1833	342	12	AdamsMoultonIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1834	351	12	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	DEF	$
35643	167	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
35644	191	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
35644	191	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
1886	205	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
35645	239	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
35645	239	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
35645	239	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
35646	244	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
35646	244	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
35646	244	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
35647	262	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < multistep.$.length
35647	262	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < multistep.length
35647	262	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	multistep	double[][]	0	NIL-FOR	i < $.length
35648	264	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < first.$.length
35648	264	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < first.length
35648	264	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	first	double[]	0	NIL-FOR	j < $.length
35649	303	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
35649	303	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
35649	303	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
35650	306	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
35650	306	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
35650	306	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
1868	164	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
1868	164	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
1868	164	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
1868	164	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
1869	187	6	AdaptiveStepsizeIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	1	DEF	$ instanceof ExtendedFirstOrderDifferentialEquations
1870	193	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance != null
1870	193	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance.$.length != $.mainSetDimension
1871	198	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance.$.length != $.mainSetDimension
1871	198	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance != null
1872	225	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
35631	235	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
35631	235	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
35631	235	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
1873	244	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
35632	249	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
35632	249	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
35632	249	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
35633	256	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
35633	256	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
35633	256	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
1874	270	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
1874	270	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
1875	273	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
1875	273	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
1876	276	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
1877	297	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	FastMath.abs(h) < $.minStep
1877	297	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	IntegratorException	FastMath.abs($) < minStep
1878	298	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
1879	307	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
1879	307	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
1880	309	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
1880	309	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
1454	302	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
1455	306	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
35319	316	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
1456	318	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
1456	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
1456	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
1457	321	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
1457	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
1457	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
1458	333	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
1459	335	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
1725	43	8	ArgUtils.java	flatten	array	Object[]	0	DEF	$ != null
1726	45	16	ArgUtils.java	flatten	THIS	ArgUtils	1	DEF	$.o instanceof Object[]
905	107	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
906	110	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	NullPointerException	$ == null
907	114	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	DEF	$ == 0
908	119	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DEF	$ == 0
34709	123	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
34709	123	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
909	124	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DEF	d[r].length != nCols
909	124	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DEF	d[$].length != nCols
909	124	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DEF	d[r].length != $
909	124	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DEF	$[r].length != nCols
34710	145	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
34710	145	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
34711	190	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
34711	190	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
34712	194	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
34712	194	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
34713	230	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
34713	230	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
34714	234	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
34714	234	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
34715	271	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
34715	271	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
34716	274	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
34716	274	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
34717	276	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
34717	276	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
910	308	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DEF	$.data == null
911	309	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	DEF	$ > 0
912	313	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	DEF	$ > 0
913	318	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
914	324	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
34718	329	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
34718	329	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
915	330	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DEF	subMatrix[i].length != nCols
915	330	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
915	330	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
915	330	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DEF	$[i].length != nCols
916	408	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DEF	v.$.length != nCols
916	408	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DEF	v.length != $
916	408	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DEF	$.length != nCols
34719	413	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
34719	413	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
34720	416	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
34720	416	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
917	431	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DEF	v.$.length != nRows
917	431	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
917	431	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DEF	$.length != nRows
34721	437	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
34721	437	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
34722	439	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
34722	439	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
34723	456	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
34723	456	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
34724	458	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
34724	458	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
34725	472	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
34725	472	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
34726	474	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
34726	474	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
34727	490	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
34727	490	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
34728	492	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
34728	492	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
34729	508	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
34729	508	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
34730	510	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
34730	510	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
34731	524	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
34731	524	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
34732	525	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
34732	525	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
34733	540	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
34733	540	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
34734	541	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
34734	541	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
34735	557	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
34735	557	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
34736	558	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
34736	558	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
34737	575	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
34737	575	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
34738	576	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
34738	576	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
34739	592	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
34739	592	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1035	116	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
1036	119	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullPointerException	$ == null
1037	123	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	DEF	$ == 0
1038	128	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DEF	$ == 0
35019	132	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
35019	132	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
1039	133	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DEF	d[r].length != nCols
1039	133	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DEF	d[$].length != nCols
1039	133	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DEF	d[r].length != $
1039	133	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DEF	$[r].length != nCols
35020	153	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
35020	153	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
35021	198	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
35021	198	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
35022	202	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
35022	202	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
35023	238	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
35023	238	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
35024	242	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
35024	242	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
35025	279	8	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
35025	279	8	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
35026	282	12	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
35026	282	12	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
35027	284	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
35027	284	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1040	316	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DEF	$.data == null
1041	317	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	DEF	$ > 0
1042	321	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	DEF	$ > 0
1043	326	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
1044	332	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
35028	337	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
35028	337	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1045	338	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DEF	subMatrix[i].length != nCols
1045	338	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
1045	338	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
1045	338	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[i].length != nCols
1046	416	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DEF	v.$.length != nCols
1046	416	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DEF	v.length != $
1046	416	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DEF	$.length != nCols
35029	421	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
35029	421	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
35030	424	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
35030	424	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1047	439	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DEF	v.$.length != nRows
1047	439	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
1047	439	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != nRows
35031	445	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
35031	445	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
35032	447	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
35032	447	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
35033	464	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
35033	464	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
35034	466	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
35034	466	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
35035	480	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
35035	480	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
35036	482	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
35036	482	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
35037	498	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
35037	498	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
35038	500	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
35038	500	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
35039	516	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
35039	516	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
35040	518	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
35040	518	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
35041	532	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
35041	532	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
35042	533	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
35042	533	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
35043	548	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
35043	548	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
35044	549	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
35044	549	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
35045	565	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
35045	565	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
35046	566	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
35046	566	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
35047	583	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
35047	583	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
35048	584	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
35048	584	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
35049	600	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
35049	600	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1110	128	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	DEF	d.$.length < pos + size
1110	128	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	DEF	$.length < pos + size
1110	128	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	DEF	d.length < $ + size
1110	128	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	DEF	d.length < pos + $
35119	145	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35119	145	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
35120	249	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35120	249	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
35121	260	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35121	260	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
35122	284	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35122	284	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
35123	295	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35123	295	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
35124	315	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35124	315	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
35125	323	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35125	323	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
35126	332	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35126	332	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
35127	340	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35127	340	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
35128	349	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35128	349	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
35129	357	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35129	357	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
35130	366	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35130	366	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
35131	374	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35131	374	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
35132	384	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35132	384	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
35133	393	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35133	393	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
35134	407	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35134	407	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
35135	419	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35135	419	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
35136	444	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35136	444	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
35137	456	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35137	456	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
35138	495	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35138	495	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
35139	507	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35139	507	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
35140	552	12	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35140	552	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
35141	553	16	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	j < $.data.$.length
35141	553	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
35142	578	8	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35142	578	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
35143	579	12	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	j < $.data.$.length
35143	579	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
35144	654	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
35144	654	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
35144	654	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
1111	717	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DEF	$.data.$.length != n
1111	717	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DEF	data.length != $
1112	746	6	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
1112	746	6	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
1113	750	6	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
1114	757	10	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
1114	757	10	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
35145	761	10	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
35145	761	10	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1115	762	14	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
1115	762	14	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
1115	762	14	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
1116	796	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	MatrixIndexException	index >= $.getDimension()
1116	796	8	ArrayFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
1116	796	8	ArrayFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
769	100	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullPointerException	$ == null
770	103	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	DEF	d.$.length == 0
770	103	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	DEF	$.length == 0
771	116	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	DEF	d.$.length < pos + size
771	116	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	DEF	$.length < pos + size
771	116	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	DEF	d.length < $ + size
771	116	8	ArrayRealVector.java	ArrayRealVector	size	int	0	DEF	d.length < pos + $
34465	130	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
34465	130	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
34465	130	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
772	142	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	DEF	d.$.length < pos + size
772	142	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	DEF	$.length < pos + size
772	142	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	DEF	d.length < $ + size
772	142	8	ArrayRealVector.java	ArrayRealVector	size	int	0	DEF	d.length < pos + $
34466	147	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
34466	147	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
34466	147	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
34467	158	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34467	158	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
34468	201	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l2
34468	201	8	ArrayRealVector.java	ArrayRealVector	l2	int	0	NIL-FOR	i < $
34469	215	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l1
34469	215	8	ArrayRealVector.java	ArrayRealVector	l1	int	0	NIL-FOR	i < $
773	270	8	ArrayRealVector.java	add	v	RealVector	1	RET	$ instanceof ArrayRealVector
34470	277	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34470	277	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34470	277	12	ArrayRealVector.java	add	e	Entry	0	NIL-WHILE	($ = it.next()) != null
34471	290	8	ArrayRealVector.java	add	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34471	290	8	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < data.length
774	311	8	ArrayRealVector.java	subtract	v	RealVector	1	RET	$ instanceof ArrayRealVector
34472	318	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34472	318	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34472	318	12	ArrayRealVector.java	subtract	e	Entry	0	NIL-WHILE	($ = it.next()) != null
34473	331	8	ArrayRealVector.java	subtract	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34473	331	8	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
34474	351	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34474	351	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
34475	360	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34475	360	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
34476	369	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34476	369	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
34477	378	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34477	378	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
34478	387	8	ArrayRealVector.java	mapPowToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34478	387	8	ArrayRealVector.java	mapPowToSelf	i	int	0	NIL-FOR	$ < data.length
34479	396	8	ArrayRealVector.java	mapExpToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34479	396	8	ArrayRealVector.java	mapExpToSelf	i	int	0	NIL-FOR	$ < data.length
34480	405	8	ArrayRealVector.java	mapExpm1ToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34480	405	8	ArrayRealVector.java	mapExpm1ToSelf	i	int	0	NIL-FOR	$ < data.length
34481	414	8	ArrayRealVector.java	mapLogToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34481	414	8	ArrayRealVector.java	mapLogToSelf	i	int	0	NIL-FOR	$ < data.length
34482	423	8	ArrayRealVector.java	mapLog10ToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34482	423	8	ArrayRealVector.java	mapLog10ToSelf	i	int	0	NIL-FOR	$ < data.length
34483	432	8	ArrayRealVector.java	mapLog1pToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34483	432	8	ArrayRealVector.java	mapLog1pToSelf	i	int	0	NIL-FOR	$ < data.length
34484	441	8	ArrayRealVector.java	mapCoshToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34484	441	8	ArrayRealVector.java	mapCoshToSelf	i	int	0	NIL-FOR	$ < data.length
34485	450	8	ArrayRealVector.java	mapSinhToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34485	450	8	ArrayRealVector.java	mapSinhToSelf	i	int	0	NIL-FOR	$ < data.length
34486	459	8	ArrayRealVector.java	mapTanhToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34486	459	8	ArrayRealVector.java	mapTanhToSelf	i	int	0	NIL-FOR	$ < data.length
34487	468	8	ArrayRealVector.java	mapCosToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34487	468	8	ArrayRealVector.java	mapCosToSelf	i	int	0	NIL-FOR	$ < data.length
34488	477	8	ArrayRealVector.java	mapSinToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34488	477	8	ArrayRealVector.java	mapSinToSelf	i	int	0	NIL-FOR	$ < data.length
34489	486	8	ArrayRealVector.java	mapTanToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34489	486	8	ArrayRealVector.java	mapTanToSelf	i	int	0	NIL-FOR	$ < data.length
34490	495	8	ArrayRealVector.java	mapAcosToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34490	495	8	ArrayRealVector.java	mapAcosToSelf	i	int	0	NIL-FOR	$ < data.length
34491	504	8	ArrayRealVector.java	mapAsinToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34491	504	8	ArrayRealVector.java	mapAsinToSelf	i	int	0	NIL-FOR	$ < data.length
34492	513	8	ArrayRealVector.java	mapAtanToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34492	513	8	ArrayRealVector.java	mapAtanToSelf	i	int	0	NIL-FOR	$ < data.length
34493	522	8	ArrayRealVector.java	mapInvToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34493	522	8	ArrayRealVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
34494	531	8	ArrayRealVector.java	mapAbsToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34494	531	8	ArrayRealVector.java	mapAbsToSelf	i	int	0	NIL-FOR	$ < data.length
34495	540	8	ArrayRealVector.java	mapSqrtToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34495	540	8	ArrayRealVector.java	mapSqrtToSelf	i	int	0	NIL-FOR	$ < data.length
34496	549	8	ArrayRealVector.java	mapCbrtToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34496	549	8	ArrayRealVector.java	mapCbrtToSelf	i	int	0	NIL-FOR	$ < data.length
34497	558	8	ArrayRealVector.java	mapCeilToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34497	558	8	ArrayRealVector.java	mapCeilToSelf	i	int	0	NIL-FOR	$ < data.length
34498	567	8	ArrayRealVector.java	mapFloorToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34498	567	8	ArrayRealVector.java	mapFloorToSelf	i	int	0	NIL-FOR	$ < data.length
34499	576	8	ArrayRealVector.java	mapRintToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34499	576	8	ArrayRealVector.java	mapRintToSelf	i	int	0	NIL-FOR	$ < data.length
34500	585	8	ArrayRealVector.java	mapSignumToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34500	585	8	ArrayRealVector.java	mapSignumToSelf	i	int	0	NIL-FOR	$ < data.length
34501	594	8	ArrayRealVector.java	mapUlpToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34501	594	8	ArrayRealVector.java	mapUlpToSelf	i	int	0	NIL-FOR	$ < data.length
775	603	8	ArrayRealVector.java	ebeMultiply	v	RealVector	1	RET	$ instanceof ArrayRealVector
34502	608	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34502	608	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
34503	621	8	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34503	621	8	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
776	641	8	ArrayRealVector.java	ebeDivide	v	RealVector	1	RET	$ instanceof ArrayRealVector
34504	646	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34504	646	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
34505	659	8	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34505	659	8	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
777	695	8	ArrayRealVector.java	dotProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
34506	702	12	ArrayRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
34506	702	12	ArrayRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
34506	702	12	ArrayRealVector.java	dotProduct	e	Entry	0	NIL-WHILE	($ = it.next()) != null
34507	715	8	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34507	715	8	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
778	766	8	ArrayRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
34508	771	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34508	771	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
34509	785	8	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34509	785	8	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
779	814	8	ArrayRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof ArrayRealVector
34510	819	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34510	819	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
34511	833	8	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34511	833	8	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
780	862	8	ArrayRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
34512	867	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34512	867	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
34513	881	8	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34513	881	8	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
781	910	8	ArrayRealVector.java	unitVector	norm	double	0	DEF	$ == 0
782	920	8	ArrayRealVector.java	unitize	norm	double	0	DEF	$ == 0
783	950	8	ArrayRealVector.java	outerProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
34514	956	12	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34514	956	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
34515	957	16	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	j < $.data.$.length
34515	957	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
34516	983	8	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34516	983	8	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
34517	984	12	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	j < $.data.$.length
34517	984	12	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
34518	1060	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
34518	1060	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
34518	1060	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
784	1134	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DEF	$.data.$.length != n
784	1134	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DEF	data.length != $
785	1147	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
786	1162	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
787	1167	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
788	1198	6	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
788	1198	6	ArrayRealVector.java	equals	other	Object	0	RET	this == $
789	1202	6	ArrayRealVector.java	equals	other	Object	0	RET	$ == null
789	1202	6	ArrayRealVector.java	equals	other	Object	0	RET	$ instanceof RealVector
790	1208	6	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
790	1208	6	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
791	1212	6	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
34519	1216	6	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
34519	1216	6	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
792	1217	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
792	1217	8	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
792	1217	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
793	1231	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
1285	123	8	BaseAbstractScalarOptimizer.java	optimize	f	FUNC	0	NullArgumentException	$ == null
1286	126	8	BaseAbstractScalarOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
1287	129	8	BaseAbstractScalarOptimizer.java	optimize	startPoint	double[]	0	NullArgumentException	$ == null
1288	125	8	BaseAbstractVectorialOptimizer.java	optimize	f	FUNC	0	NullArgumentException	$ == null
1289	128	8	BaseAbstractVectorialOptimizer.java	optimize	t	double[]	0	NullArgumentException	$ == null
1290	131	8	BaseAbstractVectorialOptimizer.java	optimize	w	double[]	0	NullArgumentException	$ == null
1291	134	8	BaseAbstractVectorialOptimizer.java	optimize	startPoint	double[]	0	NullArgumentException	$ == null
1292	137	8	BaseAbstractVectorialOptimizer.java	optimize	THIS	BaseAbstractVectorialOptimizer	0	DimensionMismatchException	t.$.length != w.$.length
1292	137	8	BaseAbstractVectorialOptimizer.java	optimize	t	double[]	0	DimensionMismatchException	$.length != w.length
1292	137	8	BaseAbstractVectorialOptimizer.java	optimize	w	double[]	0	DimensionMismatchException	t.length != $.length
1318	101	8	BaseMultiStartMultivariateRealOptimizer.java	getOptima	THIS	BaseMultiStartMultivariateRealOptimizer	0	MathIllegalStateException	$.optima == null
35285	143	8	BaseMultiStartMultivariateRealOptimizer.java	optimize	THIS	BaseMultiStartMultivariateRealOptimizer	0	NIL-FOR	i < $.starts
35285	143	8	BaseMultiStartMultivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1319	161	8	BaseMultiStartMultivariateRealOptimizer.java	optimize	THIS	BaseMultiStartMultivariateRealOptimizer	0	ConvergenceException	$.optima[0] == null
1123	102	8	BaseMultiStartMultivariateVectorialOptimizer.java	getOptima	THIS	BaseMultiStartMultivariateVectorialOptimizer	0	MathIllegalStateException	$.optima == null
35153	145	8	BaseMultiStartMultivariateVectorialOptimizer.java	optimize	THIS	BaseMultiStartMultivariateVectorialOptimizer	0	NIL-FOR	i < $.starts
35153	145	8	BaseMultiStartMultivariateVectorialOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1124	163	8	BaseMultiStartMultivariateVectorialOptimizer.java	optimize	THIS	BaseMultiStartMultivariateVectorialOptimizer	0	ConvergenceException	$.optima[0] == null
1709	122	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
1709	122	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
1709	122	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
1709	122	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
1709	122	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
1709	122	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
1709	122	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
1710	126	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
1710	126	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
1710	126	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
1711	193	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
1711	193	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
1711	193	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
1711	193	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
701	120	8	BetaDistributionImpl.java	recomputeZ	THIS	BetaDistributionImpl	0	DEF	Double.isNaN($.z)
702	145	8	BetaDistributionImpl.java	density	x	double	1	RET	$ < 0
702	145	8	BetaDistributionImpl.java	density	x	double	1	RET	$ > 1
703	147	15	BetaDistributionImpl.java	density	x	double	1	RET	$ == 0
704	148	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	DEF	$.alpha < 1
705	153	15	BetaDistributionImpl.java	density	x	double	1	RET	$ == 1
706	154	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	DEF	$.beta < 1
707	169	8	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 0
708	171	15	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 1
709	198	8	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ <= 0
710	200	15	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ >= 1
968	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
968	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
969	90	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
34833	100	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
34833	100	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
34834	105	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
34834	105	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
970	108	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
970	108	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
970	108	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
34835	109	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
34835	109	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
34836	111	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
34836	111	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
34837	116	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
34837	116	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
971	122	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
972	139	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
34838	144	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
34838	144	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
973	146	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
973	146	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
974	147	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
975	151	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
975	151	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
976	171	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
34839	181	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
34839	181	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
34840	186	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
34840	186	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
977	189	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
977	189	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
34841	190	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
34841	190	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
34842	192	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
34842	192	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
34843	197	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
34843	197	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
978	203	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
34844	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
34844	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
34845	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
34845	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
979	272	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
34846	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
34846	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
34847	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
34847	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
34848	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
34848	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
980	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
980	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
34849	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
34849	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
981	297	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
34850	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
34850	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
34851	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
34851	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
34852	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
34852	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
34853	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
34853	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
34854	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
34854	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
982	336	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
34855	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
34855	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
34856	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
34856	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
34857	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
34857	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
983	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
983	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
34858	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
34858	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
984	361	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
34859	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
34859	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
34860	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
34860	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
34861	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
34861	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
2279	102	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
2279	102	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
2279	102	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
2279	102	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
2279	102	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$[0].length == 0
2279	102	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$.length == 0
2280	105	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
2280	105	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
2280	105	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	xLen != $.length
2281	108	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
2281	108	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
2281	108	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	xLen != $.length
2282	111	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
2282	111	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
2282	111	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	xLen != $.length
2283	114	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
2283	114	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
2283	114	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	xLen != $.length
35761	128	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
35761	128	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
2284	129	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
2284	129	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
2284	129	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
2284	129	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	$[i].length != yLen
2285	132	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
2285	132	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
2285	132	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
2285	132	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	$[i].length != yLen
2286	135	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
2286	135	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
2286	135	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
2286	135	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
2287	138	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
2287	138	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
2287	138	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
2287	138	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
35762	142	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
35762	142	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
2288	161	8	BicubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
2289	165	8	BicubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
2290	227	8	BicubicSplineInterpolatingFunction.java	partialDerivative	THIS	BicubicSplineInterpolatingFunction	0	DEF	$.partialDerivatives == null
2291	232	8	BicubicSplineInterpolatingFunction.java	partialDerivative	i	int	0	OutOfRangeException	$ == -1
2292	236	8	BicubicSplineInterpolatingFunction.java	partialDerivative	j	int	0	OutOfRangeException	$ == -1
35763	262	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < lastI
35763	262	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastI	int	0	NIL-FOR	i < $
35764	263	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < lastJ
35764	263	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastJ	int	0	NIL-FOR	j < $
2293	282	8	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
2293	282	8	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
35765	287	8	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
35765	287	8	BicubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
2294	288	12	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
2294	288	12	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
2294	288	12	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
35766	328	8	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < 16
35767	331	12	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < 16
35768	376	8	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	i	int	0	NIL-FOR	$ < N
35769	377	12	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	j	int	0	NIL-FOR	$ < N
2295	387	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
2295	387	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
2296	390	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
2296	390	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
35770	415	8	BicubicSplineInterpolatingFunction.java	apply	i	int	0	NIL-FOR	$ < N
35771	416	12	BicubicSplineInterpolatingFunction.java	apply	j	int	0	NIL-FOR	$ < N
2297	428	8	BicubicSplineInterpolatingFunction.java	partialDerivativeX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeX == null
2298	438	8	BicubicSplineInterpolatingFunction.java	partialDerivativeY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeY == null
2299	448	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXX == null
2300	458	8	BicubicSplineInterpolatingFunction.java	partialDerivativeYY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeYY == null
2301	468	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXY == null
35772	485	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < N
35773	486	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < N
2275	41	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
2275	41	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
2275	41	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
2275	41	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
2275	41	8	BicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
2275	41	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
2276	44	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
2276	44	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
2276	44	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
35749	59	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35749	59	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
2277	60	12	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
2277	60	12	BicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
2277	60	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
2277	60	12	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
35750	64	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35750	64	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35751	74	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35751	74	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35752	81	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35752	81	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35753	87	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35753	87	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35754	89	12	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35754	89	12	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35755	96	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35755	96	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35756	98	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35756	98	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35757	105	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35757	105	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35758	108	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35758	108	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
512	117	8	BigFraction.java	BigFraction	num	BigInteger	0	NullArgumentException	$ == null
513	120	8	BigFraction.java	BigFraction	den	BigInteger	0	NullArgumentException	$ == null
514	123	8	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.equals($)
515	126	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
516	133	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
517	139	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
518	173	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isNaN($)
519	176	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isInfinite($)
520	185	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
521	189	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
34310	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
34310	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
522	198	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
523	275	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
523	275	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
524	281	8	BigFraction.java	BigFraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
524	281	8	BigFraction.java	BigFraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
524	281	8	BigFraction.java	BigFraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
34311	297	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
525	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
525	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
525	303	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
525	303	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
526	308	12	BigFraction.java	BigFraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
526	308	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
526	308	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
526	308	12	BigFraction.java	BigFraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
526	308	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
526	308	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
526	308	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
527	322	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
527	322	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
528	326	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
528	326	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
529	433	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
530	507	8	BigFraction.java	add	fraction	BigFraction	0	NullArgumentException	$ == null
531	510	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
532	517	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
532	517	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
533	614	8	BigFraction.java	divide	bg	BigInteger	0	DEF	BigInteger.ZERO.equals($)
534	664	8	BigFraction.java	divide	fraction	BigFraction	0	NullArgumentException	$ == null
535	667	8	BigFraction.java	divide	THIS	BigFraction	0	DEF	BigInteger.ZERO.equals(fraction.$.numerator)
535	667	8	BigFraction.java	divide	fraction	BigFraction	0	DEF	BigInteger.ZERO.equals($.numerator)
536	707	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
536	707	8	BigFraction.java	equals	other	Object	1	DEF	this == $
537	709	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
538	850	8	BigFraction.java	multiply	bg	BigInteger	0	NullArgumentException	$ == null
539	895	8	BigFraction.java	multiply	fraction	BigFraction	0	NullArgumentException	$ == null
540	898	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	fraction.$.numerator.equals(BigInteger.ZERO)
540	898	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
540	898	8	BigFraction.java	multiply	fraction	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
541	942	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
542	959	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
543	978	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
544	1037	8	BigFraction.java	subtract	bg	BigInteger	0	NullArgumentException	$ == null
545	1083	8	BigFraction.java	subtract	fraction	BigFraction	0	NullArgumentException	$ == null
546	1086	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
547	1092	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
547	1092	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
548	1115	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
549	1117	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
550	169	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
551	171	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
552	173	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
553	195	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
554	219	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
555	252	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
34312	275	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
34312	275	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
34312	275	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
34312	275	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
802	105	8	BigMatrixImpl.java	BigMatrixImpl	rowDimension	int	0	DEF	$ < 1
803	109	8	BigMatrixImpl.java	BigMatrixImpl	columnDimension	int	0	DEF	$ < 1
804	150	8	BigMatrixImpl.java	BigMatrixImpl	copyArray	boolean	1	DEF	$
805	153	12	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	NullPointerException	$ == null
806	157	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	DEF	$ == 0
807	162	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	$ == 0
34534	165	12	BigMatrixImpl.java	BigMatrixImpl	r	int	0	NIL-FOR	$ < nRows
34534	165	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	r < $
808	166	16	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	DEF	d[r].length != nCols
808	166	16	BigMatrixImpl.java	BigMatrixImpl	r	int	0	DEF	d[$].length != nCols
808	166	16	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	d[r].length != $
808	166	16	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	DEF	$[r].length != nCols
809	190	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	DEF	$ == 0
810	195	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	$ == 0
34535	198	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
34535	198	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
811	199	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	DEF	d[row].length != nCols
811	199	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	DEF	d[$].length != nCols
811	199	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	d[row].length != $
811	199	12	BigMatrixImpl.java	BigMatrixImpl	d	double[][]	0	DEF	$[row].length != nCols
812	220	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	DEF	$ == 0
813	225	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	$ == 0
34536	228	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
34536	228	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
814	229	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	DEF	d[row].length != nCols
814	229	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	DEF	d[$].length != nCols
814	229	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	d[row].length != $
814	229	12	BigMatrixImpl.java	BigMatrixImpl	d	String[][]	0	DEF	$[row].length != nCols
34537	251	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
34537	251	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
34538	283	12	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
34538	283	12	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
34539	286	16	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
34539	286	16	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
34540	309	8	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
34540	309	8	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
34541	313	12	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
34541	313	12	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
34542	338	12	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
34542	338	12	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
34543	341	16	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
34543	341	16	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
34544	364	8	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
34544	364	8	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
34545	368	12	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
34545	368	12	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
34546	385	8	BigMatrixImpl.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
34546	385	8	BigMatrixImpl.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
34547	388	12	BigMatrixImpl.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
34547	388	12	BigMatrixImpl.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
34548	404	8	BigMatrixImpl.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
34548	404	8	BigMatrixImpl.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
34549	407	12	BigMatrixImpl.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
34549	407	12	BigMatrixImpl.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
34550	433	12	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
34550	433	12	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
34551	436	16	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
34551	436	16	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
34552	438	20	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
34552	438	20	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
34553	464	8	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
34553	464	8	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
34554	467	12	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
34554	467	12	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
34555	469	16	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
34555	469	16	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
34556	512	8	BigMatrixImpl.java	getDataAsDoubleArray	i	int	0	NIL-FOR	$ < nRows
34556	512	8	BigMatrixImpl.java	getDataAsDoubleArray	nRows	int	0	NIL-FOR	i < $
34557	513	12	BigMatrixImpl.java	getDataAsDoubleArray	j	int	0	NIL-FOR	$ < nCols
34557	513	12	BigMatrixImpl.java	getDataAsDoubleArray	nCols	int	0	NIL-FOR	j < $
34558	577	8	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	col < $.getColumnDimension()
34558	577	8	BigMatrixImpl.java	getNorm	col	int	0	NIL-FOR	$ < this.getColumnDimension()
34559	579	12	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	row < $.getRowDimension()
34559	579	12	BigMatrixImpl.java	getNorm	row	int	0	NIL-FOR	$ < this.getRowDimension()
815	605	8	BigMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ > endRow
815	605	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	startRow > $
816	612	8	BigMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ > endColumn
816	612	8	BigMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	startColumn > $
34560	619	8	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
34560	619	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
817	643	8	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
817	643	8	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
817	643	8	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
818	644	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length == 0
818	644	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length == 0
34561	653	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	i < selectedRows.$.length
34561	653	12	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
34561	653	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
34562	656	16	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	j < selectedColumns.$.length
34562	656	16	BigMatrixImpl.java	getSubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
34562	656	16	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
819	704	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	DEF	$ == 0
820	709	8	BigMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	$ == 0
34563	713	8	BigMatrixImpl.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
34563	713	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
821	714	12	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	DEF	subMatrix[r].length != nCols
821	714	12	BigMatrixImpl.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
821	714	12	BigMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
821	714	12	BigMatrixImpl.java	setSubMatrix	subMatrix	BigDecimal[][]	0	DEF	$[r].length != nCols
822	721	8	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	1	DEF	$.data == null
823	722	12	BigMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
824	727	12	BigMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
34564	740	8	BigMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
34564	740	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
34565	776	8	BigMatrixImpl.java	getColumnMatrix	row	int	0	NIL-FOR	$ < nRows
34565	776	8	BigMatrixImpl.java	getColumnMatrix	nRows	int	0	NIL-FOR	row < $
34566	815	8	BigMatrixImpl.java	getRowAsDoubleArray	i	int	0	NIL-FOR	$<ncols
34566	815	8	BigMatrixImpl.java	getRowAsDoubleArray	ncols	int	0	NIL-FOR	i<$
34567	835	8	BigMatrixImpl.java	getColumn	i	int	0	NIL-FOR	$ < nRows
34567	835	8	BigMatrixImpl.java	getColumn	nRows	int	0	NIL-FOR	i < $
34568	856	8	BigMatrixImpl.java	getColumnAsDoubleArray	i	int	0	NIL-FOR	$<nrows
34568	856	8	BigMatrixImpl.java	getColumnAsDoubleArray	nrows	int	0	NIL-FOR	i<$
34569	917	8	BigMatrixImpl.java	transpose	row	int	0	NIL-FOR	$ < nRows
34569	917	8	BigMatrixImpl.java	transpose	nRows	int	0	NIL-FOR	row < $
34570	919	12	BigMatrixImpl.java	transpose	col	int	0	NIL-FOR	$ < nCols
34570	919	12	BigMatrixImpl.java	transpose	nCols	int	0	NIL-FOR	col < $
825	943	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
826	946	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	1	RET	$.isSingular()
34571	950	12	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
34571	950	12	BigMatrixImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < getRowDimension()
827	970	8	BigMatrixImpl.java	isSingular	THIS	BigMatrixImpl	1	RET	$.lu == null
828	1009	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
34572	1013	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
34572	1013	8	BigMatrixImpl.java	getTrace	i	int	0	NIL-FOR	$ < this.getRowDimension()
829	1027	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	DEF	v.$.length != $.getColumnDimension()
829	1027	8	BigMatrixImpl.java	operate	v	BigDecimal[]	0	DEF	$.length != getColumnDimension()
34573	1035	8	BigMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
34573	1035	8	BigMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
34574	1037	12	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
34574	1037	12	BigMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
34575	1054	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
34575	1054	8	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < bd.length
34575	1054	8	BigMatrixImpl.java	operate	bd	BigDecimal[]	0	NIL-FOR	i < $.length
830	1069	8	BigMatrixImpl.java	preMultiply	THIS	BigMatrixImpl	0	DEF	v.$.length != nRows
830	1069	8	BigMatrixImpl.java	preMultiply	nRows	int	0	DEF	v.length != $
830	1069	8	BigMatrixImpl.java	preMultiply	v	BigDecimal[]	0	DEF	$.length != nRows
34576	1076	8	BigMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
34576	1076	8	BigMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
34577	1078	12	BigMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
34577	1078	12	BigMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
831	1099	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	DEF	b.$.length != nRows
831	1099	8	BigMatrixImpl.java	solve	nRows	int	0	DEF	b.length != $
831	1099	8	BigMatrixImpl.java	solve	b	BigDecimal[]	0	DEF	$.length != nRows
34578	1107	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRows
34578	1107	8	BigMatrixImpl.java	solve	nRows	int	0	NIL-FOR	row < $
34579	1126	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
34579	1126	8	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < bd.length
34579	1126	8	BigMatrixImpl.java	solve	bd	BigDecimal[]	0	NIL-FOR	i < $.length
832	1144	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	DEF	b.getRowDimension() != $.getRowDimension()
832	1144	8	BigMatrixImpl.java	solve	b	BigMatrix	0	DEF	$.getRowDimension() != getRowDimension()
833	1149	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
834	1152	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	SingularMatrixException	$.isSingular()
34580	1162	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRowB
34580	1162	8	BigMatrixImpl.java	solve	nRowB	int	0	NIL-FOR	row < $
34581	1164	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nColB
34581	1164	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	col < $
34582	1170	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nCol
34582	1170	8	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	col < $
34583	1171	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < nCol
34583	1171	12	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	i < $
34584	1174	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
34584	1174	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
34585	1181	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ >= 0
34586	1184	12	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
34586	1184	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
34587	1187	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < col
34587	1187	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	i < $
34588	1190	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
34588	1190	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
835	1222	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NonSquareMatrixException	$ != nCols
835	1222	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NonSquareMatrixException	nRows != $
34589	1229	8	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
34589	1229	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
34590	1235	8	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	$ < nCols
34590	1235	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	col < $
34591	1240	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < col
34591	1240	12	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	row < $
34592	1243	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < row
34592	1243	16	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	i < $
34593	1252	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
34593	1252	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
34594	1255	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < col
34594	1255	16	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	i < $
836	1261	16	BigMatrixImpl.java	luDecompose	sum	BigDecimal	0	DEF	$.abs().compareTo(largest) == 1
836	1261	16	BigMatrixImpl.java	luDecompose	largest	BigDecimal	0	DEF	sum.abs().compareTo($) == 1
837	1268	12	BigMatrixImpl.java	luDecompose	THIS	BigMatrixImpl	0	SingularMatrixException	$.lu[max][col].abs().compareTo(TOO_SMALL) <= 0
837	1268	12	BigMatrixImpl.java	luDecompose	max	int	0	SingularMatrixException	lu[$][col].abs().compareTo(TOO_SMALL) <= 0
837	1268	12	BigMatrixImpl.java	luDecompose	col	int	0	SingularMatrixException	lu[max][$].abs().compareTo(TOO_SMALL) <= 0
838	1274	12	BigMatrixImpl.java	luDecompose	max	int	0	DEF	$ != col
838	1274	12	BigMatrixImpl.java	luDecompose	col	int	0	DEF	max != $
34595	1276	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < nCols
34595	1276	16	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	i < $
34596	1289	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
34596	1289	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
839	1306	8	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	DEF	$.data != null
34597	1307	12	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	i < $.data.$.length
34597	1307	12	BigMatrixImpl.java	toString	i	int	0	NIL-FOR	$ < data.length
840	1308	16	BigMatrixImpl.java	toString	i	int	0	DEF	$ > 0
34598	1312	16	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	j < $.data[0].length
34598	1312	16	BigMatrixImpl.java	toString	j	int	0	NIL-FOR	$ < data[0].length
841	1313	20	BigMatrixImpl.java	toString	j	int	0	DEF	$ > 0
842	1336	8	BigMatrixImpl.java	equals	THIS	BigMatrixImpl	0	RET	object == $
842	1336	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ == this
843	1339	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ instanceof BigMatrixImpl == false
844	1345	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getRowDimension() != nRows
844	1345	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getColumnDimension() != nCols
844	1345	8	BigMatrixImpl.java	equals	nRows	int	0	RET	m.getRowDimension() != $
844	1345	8	BigMatrixImpl.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
34599	1348	8	BigMatrixImpl.java	equals	row	int	0	NIL-FOR	$ < nRows
34599	1348	8	BigMatrixImpl.java	equals	nRows	int	0	NIL-FOR	row < $
34600	1350	12	BigMatrixImpl.java	equals	col	int	0	NIL-FOR	$ < nCols
34600	1350	12	BigMatrixImpl.java	equals	nCols	int	0	NIL-FOR	col < $
845	1351	16	BigMatrixImpl.java	equals	col	int	0	RET	dataRow[$].equals(m.getEntry(row, $))
845	1351	16	BigMatrixImpl.java	equals	dataRow	BigDecimal[]	0	RET	$[col].equals(m.getEntry(row, col))
845	1351	16	BigMatrixImpl.java	equals	row	int	0	RET	dataRow[col].equals(m.getEntry($, col))
845	1351	16	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	dataRow[col].equals($.getEntry(row, col))
34601	1371	8	BigMatrixImpl.java	hashCode	row	int	0	NIL-FOR	$ < nRows
34601	1371	8	BigMatrixImpl.java	hashCode	nRows	int	0	NIL-FOR	row < $
34602	1373	12	BigMatrixImpl.java	hashCode	col	int	0	NIL-FOR	$ < nCols
34602	1373	12	BigMatrixImpl.java	hashCode	nCols	int	0	NIL-FOR	col < $
846	1411	8	BigMatrixImpl.java	getLUMatrix	THIS	BigMatrixImpl	0	DEF	$.lu == null
34603	1446	8	BigMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
34603	1446	8	BigMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
34604	1475	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
34604	1475	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
34605	1478	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
34605	1478	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
34606	1495	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
34606	1495	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
34607	1498	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
34607	1498	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
47	271	8	BigReal.java	equals	THIS	BigReal	0	RET	$ == other
47	271	8	BigReal.java	equals	other	Object	0	RET	this == $
48	275	8	BigReal.java	equals	other	Object	0	RET	$ instanceof BigReal
1656	53	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
1656	53	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
35427	66	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
35427	66	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
1657	78	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
1658	82	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
1658	82	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
35428	85	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
35428	85	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
1659	86	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
1659	86	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
1659	86	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
1668	36	8	BinaryMutation.java	mutate	original	Chromosome	0	IllegalArgumentException	$ instanceof BinaryChromosome
652	95	8	BinomialDistributionImpl.java	setNumberOfTrialsInternal	trials	int	0	DEF	$ < 0
653	122	8	BinomialDistributionImpl.java	setProbabilityOfSuccessInternal	p	double	0	DEF	$ < 0.0
653	122	8	BinomialDistributionImpl.java	setProbabilityOfSuccessInternal	p	double	0	DEF	$ > 1.0
654	166	8	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
655	168	15	BinomialDistributionImpl.java	cumulativeProbability	THIS	BinomialDistributionImpl	1	DEF	x >= $.numberOfTrials
655	168	15	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= numberOfTrials
656	185	8	BinomialDistributionImpl.java	probability	THIS	BinomialDistributionImpl	1	DEF	x > $.numberOfTrials
656	185	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ > numberOfTrials
656	185	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ < 0
657	213	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
658	216	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
35829	87	8	BisectionSolver.java	solve	THIS	BisectionSolver	0	NIL-WHILE	i < $.maximalIterationCount
35829	87	8	BisectionSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
2377	92	12	BisectionSolver.java	solve	fm	double	1	DEF	$ * fmin > 0.0
2377	92	12	BisectionSolver.java	solve	fmin	double	1	DEF	fm * $ > 0.0
2378	100	12	BisectionSolver.java	solve	THIS	BisectionSolver	0	RET	FastMath.abs(max - min) <= $.absoluteAccuracy
2378	100	12	BisectionSolver.java	solve	min	double	0	RET	FastMath.abs(max - $) <= absoluteAccuracy
2378	100	12	BisectionSolver.java	solve	max	double	0	RET	FastMath.abs($ - min) <= absoluteAccuracy
35418	68	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
35418	68	8	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
35419	77	8	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
35419	77	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
35419	77	8	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
1629	99	8	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
1630	125	8	BitsStreamGenerator.java	nextInt	n	int	0	NotStrictlyPositiveException	$ < 1
1631	139	12	BitsStreamGenerator.java	nextInt	random	int	0	RET	$ < n
1631	139	12	BitsStreamGenerator.java	nextInt	n	int	0	RET	random < $
734	163	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
34322	172	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
34322	172	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
34323	174	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
34323	174	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
735	175	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
735	175	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
735	175	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
735	175	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
735	175	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
736	179	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
34324	220	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
34324	220	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
34324	220	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
737	222	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
737	222	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
34325	231	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
34325	231	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
34326	235	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
34326	235	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
34327	246	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
34327	246	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
34328	283	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
34328	283	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
34329	287	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
34329	287	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
34330	315	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
34330	315	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
34331	338	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
34331	338	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
34331	338	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
34332	339	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
34332	339	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
34332	339	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
34333	349	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
34333	349	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
34334	350	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
34334	350	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
34335	383	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
34335	383	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
34335	383	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
34336	387	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
34336	387	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
34336	387	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
34337	411	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
34337	411	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
34337	411	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
34338	412	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
34338	412	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
34338	412	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
34339	422	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
34339	422	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
34340	423	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
34340	423	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
34341	456	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
34341	456	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
34341	456	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
34342	460	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
34342	460	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
34342	460	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
34343	477	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
34343	477	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
34343	477	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
34344	480	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
34344	480	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
34344	480	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
34345	497	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
34345	497	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
34345	497	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
34346	500	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
34346	500	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
34346	500	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
34347	525	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
34347	525	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
34347	525	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
34348	530	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
34348	530	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
34348	530	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
34349	539	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
34349	539	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
34350	544	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
34350	544	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
34351	547	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
34351	547	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
34352	550	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
34352	550	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
34353	589	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
34353	589	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
34353	589	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
34354	594	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
34354	594	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
34354	594	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
34355	604	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
34355	604	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
34356	609	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
34356	609	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
34357	612	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
34357	612	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
34358	616	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
34358	616	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
34359	625	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
34359	625	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
34360	652	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
34360	652	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
34361	657	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
34361	657	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
34362	661	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
34362	661	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
34363	696	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
34363	696	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
34363	696	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
34364	699	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
34364	699	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
34364	699	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
738	710	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
739	712	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
740	744	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
34365	798	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
34365	798	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
741	812	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
742	819	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
742	819	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
34366	831	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
34366	831	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
34367	837	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
34367	837	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
34368	846	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
34368	846	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
34369	870	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
34369	870	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
743	874	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
743	874	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
744	913	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
744	913	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
744	913	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
34370	926	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
34370	926	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
745	930	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
745	930	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
34371	958	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
34371	958	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
34372	961	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
34372	961	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
746	962	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
746	962	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
746	962	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
747	998	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
747	998	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
747	998	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
34373	1012	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
34373	1012	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
34374	1015	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
34374	1015	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
748	1016	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
748	1016	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
748	1016	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
34375	1037	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
34375	1037	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
34376	1071	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
34376	1071	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
34377	1074	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
34377	1074	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
34378	1105	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
34378	1105	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
749	1121	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
749	1121	8	BlockFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
749	1121	8	BlockFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
34379	1129	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
34379	1129	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
34380	1150	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
34380	1150	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
34381	1153	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
34381	1153	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
750	1166	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
750	1166	8	BlockFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
750	1166	8	BlockFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
34382	1175	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
34382	1175	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
34383	1178	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
34383	1178	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
34384	1264	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
34384	1264	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
34385	1265	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
34385	1265	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
34386	1275	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
34386	1275	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
34387	1278	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
34387	1278	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
751	1311	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.columns
751	1311	8	BlockFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != columns
34388	1318	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
34388	1318	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
34389	1321	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
34389	1321	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
34390	1326	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
34390	1326	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
34391	1329	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
34391	1329	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
34392	1338	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
34392	1338	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
752	1354	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.rows
752	1354	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != rows
34393	1361	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
34393	1361	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
34394	1368	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
34394	1368	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
34395	1372	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
34395	1372	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
34396	1376	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
34396	1376	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
34397	1385	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
34397	1385	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
34398	1402	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
34398	1402	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
34399	1405	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
34399	1405	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
34400	1406	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
34400	1406	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
34401	1412	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
34401	1412	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
34402	1427	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
34402	1427	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
34403	1430	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
34403	1430	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
34404	1431	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
34404	1431	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
34405	1437	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
34405	1437	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
34406	1455	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
34406	1455	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
34407	1459	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
34407	1459	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
34408	1460	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
34408	1460	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
34409	1467	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
34409	1467	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
34410	1485	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
34410	1485	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
34411	1489	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
34411	1489	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
34412	1490	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
34412	1490	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
34413	1497	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
34413	1497	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
34414	1513	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
34414	1513	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
34415	1516	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
34415	1516	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
34416	1521	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
34416	1521	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
34417	1522	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
34417	1522	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
34418	1539	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
34418	1539	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
34419	1542	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
34419	1542	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
34420	1547	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
34420	1547	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
34421	1548	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
34421	1548	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
34422	1567	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
34422	1567	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
34423	1571	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
34423	1571	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
34424	1577	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
34424	1577	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
34425	1579	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
34425	1579	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
34426	1597	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
34426	1597	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
34427	1601	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
34427	1601	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
34428	1607	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
34428	1607	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
34429	1609	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
34429	1609	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
1016	160	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
34905	169	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34905	169	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
34906	171	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
34906	171	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1017	172	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1017	172	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1017	172	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1017	172	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1017	172	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1018	176	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
34907	214	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
34907	214	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
34907	214	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
1019	216	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1019	216	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
34908	224	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
34908	224	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
34909	228	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
34909	228	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
34910	239	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
34910	239	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
34911	271	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
34911	271	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
34912	275	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
34912	275	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
34913	302	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
34913	302	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
34914	324	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
34914	324	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
34914	324	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34915	325	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
34915	325	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
34915	325	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
34916	335	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
34916	335	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
34917	336	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
34917	336	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
34918	368	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
34918	368	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
34918	368	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
34919	372	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
34919	372	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
34919	372	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
34920	395	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
34920	395	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
34920	395	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34921	396	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
34921	396	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
34921	396	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
34922	406	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
34922	406	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
34923	407	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
34923	407	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
34924	439	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
34924	439	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
34924	439	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
34925	443	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
34925	443	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
34925	443	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
34926	459	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
34926	459	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
34926	459	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
34927	462	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
34927	462	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
34927	462	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
34928	478	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
34928	478	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
34928	478	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
34929	481	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
34929	481	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
34929	481	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
34930	504	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
34930	504	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
34930	504	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34931	509	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
34931	509	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
34931	509	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
34932	518	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
34932	518	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
34933	523	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
34933	523	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
34934	526	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
34934	526	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
34935	529	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
34935	529	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
34936	566	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
34936	566	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
34936	566	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34937	571	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
34937	571	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
34937	571	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
34938	581	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
34938	581	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
34939	586	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
34939	586	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
34940	589	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
34940	589	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
34941	593	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
34941	593	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
34942	601	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
34942	601	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
34943	627	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34943	627	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
34944	632	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
34944	632	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
34945	636	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
34945	636	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
34946	654	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
34946	654	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
34947	657	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34947	657	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
34948	660	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
34948	660	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
34949	662	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
34949	662	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
34950	668	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
34950	668	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
34951	679	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
34951	679	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
34952	708	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
34952	708	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
34952	708	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34953	711	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
34953	711	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
34953	711	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
1020	722	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1021	724	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1022	756	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
34954	810	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
34954	810	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1023	824	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1024	831	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1024	831	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
34955	843	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
34955	843	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
34956	849	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
34956	849	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
34957	858	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
34957	858	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
34958	882	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
34958	882	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1025	886	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1025	886	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1026	924	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1026	924	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1026	924	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
34959	937	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
34959	937	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1027	941	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1027	941	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
34960	968	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34960	968	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
34961	971	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
34961	971	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1028	972	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
1028	972	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1028	972	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
1029	1007	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1029	1007	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1029	1007	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
34962	1021	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34962	1021	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
34963	1024	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
34963	1024	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1030	1025	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
1030	1025	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1030	1025	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
34964	1046	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
34964	1046	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
34965	1079	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34965	1079	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
34966	1082	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
34966	1082	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
34967	1112	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
34967	1112	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1031	1127	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1031	1127	8	BlockRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1031	1127	8	BlockRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
34968	1135	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
34968	1135	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
34969	1156	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34969	1156	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
34970	1159	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
34970	1159	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1032	1172	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1032	1172	8	BlockRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1032	1172	8	BlockRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
34971	1181	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34971	1181	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
34972	1184	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
34972	1184	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
34973	1268	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
34973	1268	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
34974	1269	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
34974	1269	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
34975	1279	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
34975	1279	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
34976	1282	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
34976	1282	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1033	1315	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.columns
1033	1315	8	BlockRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != columns
34977	1321	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34977	1321	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
34978	1324	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
34978	1324	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
34979	1329	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
34979	1329	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
34980	1332	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
34980	1332	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
34981	1340	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
34981	1340	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1034	1356	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.rows
1034	1356	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != rows
34982	1362	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
34982	1362	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
34983	1369	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34983	1369	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
34984	1373	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
34984	1373	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
34985	1377	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
34985	1377	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
34986	1385	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
34986	1385	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
34987	1402	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34987	1402	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
34988	1405	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
34988	1405	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
34989	1406	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
34989	1406	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
34990	1412	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
34990	1412	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
34991	1427	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
34991	1427	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
34992	1430	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
34992	1430	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
34993	1431	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
34993	1431	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
34994	1437	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
34994	1437	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
34995	1455	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
34995	1455	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
34996	1459	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
34996	1459	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
34997	1460	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
34997	1460	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
34998	1467	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
34998	1467	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
34999	1485	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
34999	1485	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
35000	1489	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
35000	1489	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
35001	1490	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
35001	1490	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
35002	1497	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
35002	1497	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
35003	1513	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35003	1513	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
35004	1516	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35004	1516	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
35005	1521	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
35005	1521	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
35006	1522	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
35006	1522	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
35007	1539	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35007	1539	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
35008	1542	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35008	1542	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
35009	1547	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
35009	1547	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
35010	1548	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
35010	1548	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
35011	1567	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
35011	1567	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
35012	1571	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
35012	1571	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
35013	1577	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
35013	1577	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
35014	1579	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
35014	1579	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
35015	1597	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
35015	1597	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
35016	1601	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
35016	1601	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
35017	1607	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
35017	1607	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
35018	1609	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
35018	1609	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
1125	92	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
1126	95	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
1127	125	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
1127	125	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
1127	125	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
35154	141	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
35154	141	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
35154	141	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
1128	152	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
1128	152	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
1128	152	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
1129	154	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
1129	154	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
1129	154	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
1130	162	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
1130	162	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
1130	162	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
1131	171	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
1131	171	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
1131	171	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
1132	174	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
1132	174	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
1132	174	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
1133	176	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
1133	176	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
1133	176	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
1134	206	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
1137	77	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1138	80	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
1139	101	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
1139	101	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
1140	115	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1141	133	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
1142	139	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
1142	139	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
1143	145	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
1144	154	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
1144	154	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
1144	154	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
1144	154	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
1144	154	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
1144	154	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
1144	154	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
1144	154	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
1144	154	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
1144	154	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
1144	154	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
1145	162	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
1145	162	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
1145	162	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
1145	162	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
1145	162	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
1145	162	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
1146	163	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
1146	163	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
1147	171	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1147	171	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1148	180	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1148	180	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1149	189	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
1149	189	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
1150	190	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
1151	200	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1152	205	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
1152	205	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
1153	206	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1153	206	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1154	218	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1154	218	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1155	223	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
1155	223	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	MathUtils.equals(w, $)
1155	223	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	MathUtils.equals($, x)
1155	223	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
1156	229	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
1156	229	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	MathUtils.equals(v, $)
1156	229	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	MathUtils.equals($, x)
1156	229	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	MathUtils.equals($, w)
1156	229	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	MathUtils.equals(v, $)
1156	229	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
1157	241	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariateRealPointValuePair>	0	RET	$ != null
1158	242	20	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariateRealPointValuePair>	0	RET	$.converged(iter, previous, current)
1158	242	20	BrentOptimizer.java	doOptimize	previous	UnivariateRealPointValuePair	0	RET	checker.converged(iter, $, current)
1158	242	20	BrentOptimizer.java	doOptimize	current	UnivariateRealPointValuePair	0	RET	checker.converged(iter, previous, $)
1158	242	20	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
2394	132	8	BrentSolver.java	solve	min	double	0	DEF	initial < $
2394	132	8	BrentSolver.java	solve	max	double	0	DEF	initial > $
2394	132	8	BrentSolver.java	solve	initial	double	0	DEF	$ < min
2394	132	8	BrentSolver.java	solve	initial	double	0	DEF	$ > max
2395	140	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	FastMath.abs(yInitial) <= $.functionValueAccuracy
2395	140	8	BrentSolver.java	solve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2396	147	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	FastMath.abs(yMin) <= $.functionValueAccuracy
2396	147	8	BrentSolver.java	solve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2397	153	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMin < 0
2397	153	8	BrentSolver.java	solve	yMin	double	0	RET	yInitial * $ < 0
2398	159	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	FastMath.abs(yMax) <= $.functionValueAccuracy
2398	159	8	BrentSolver.java	solve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2399	165	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMax < 0
2399	165	8	BrentSolver.java	solve	yMax	double	0	RET	yInitial * $ < 0
2400	206	8	BrentSolver.java	solve	sign	double	1	DEF	$ > 0
2401	208	12	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	FastMath.abs(yMin) <= $.functionValueAccuracy
2401	208	12	BrentSolver.java	solve	yMin	double	1	DEF	FastMath.abs($) <= functionValueAccuracy
2402	211	19	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	FastMath.abs(yMax) <= $.functionValueAccuracy
2402	211	19	BrentSolver.java	solve	yMax	double	1	DEF	FastMath.abs($) <= functionValueAccuracy
2403	219	15	BrentSolver.java	solve	sign	double	1	DEF	$ < 0
2404	224	12	BrentSolver.java	solve	yMin	double	1	DEF	$ == 0.0
35838	261	8	BrentSolver.java	solve	THIS	BrentSolver	0	NIL-WHILE	i < $.maximalIterationCount
35838	261	8	BrentSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
2405	262	12	BrentSolver.java	solve	y1	double	0	DEF	FastMath.abs(y2) < FastMath.abs($)
2405	262	12	BrentSolver.java	solve	y2	double	0	DEF	FastMath.abs($) < FastMath.abs(y1)
2406	271	12	BrentSolver.java	solve	THIS	BrentSolver	0	RET	FastMath.abs(y1) <= $.functionValueAccuracy
2406	271	12	BrentSolver.java	solve	y1	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2407	281	12	BrentSolver.java	solve	dx	double	0	RET	FastMath.abs($) <= tolerance
2407	281	12	BrentSolver.java	solve	tolerance	double	0	RET	FastMath.abs(dx) <= $
2408	285	12	BrentSolver.java	solve	tolerance	double	1	DEF	FastMath.abs(oldDelta) < $
2408	285	12	BrentSolver.java	solve	oldDelta	double	1	DEF	FastMath.abs($) < tolerance
2408	285	12	BrentSolver.java	solve	y0	double	1	DEF	FastMath.abs($) <= FastMath.abs(y1)
2408	285	12	BrentSolver.java	solve	y1	double	1	DEF	FastMath.abs(y0) <= FastMath.abs($)
2409	297	16	BrentSolver.java	solve	x0	double	1	DEF	$ == x2
2409	297	16	BrentSolver.java	solve	x2	double	1	DEF	x0 == $
2410	308	16	BrentSolver.java	solve	p	double	1	DEF	$ > 0.0
2411	313	16	BrentSolver.java	solve	p	double	1	DEF	$ >= FastMath.abs(0.5 * oldDelta * p1)
2411	313	16	BrentSolver.java	solve	p	double	1	DEF	2.0 * $ >= 1.5 * dx * p1 - FastMath.abs(tolerance * p1)
2411	313	16	BrentSolver.java	solve	p1	double	1	DEF	p >= FastMath.abs(0.5 * oldDelta * $)
2411	313	16	BrentSolver.java	solve	p1	double	1	DEF	2.0 * p >= 1.5 * dx * $ - FastMath.abs(tolerance * $)
2411	313	16	BrentSolver.java	solve	dx	double	1	DEF	2.0 * p >= 1.5 * $ * p1 - FastMath.abs(tolerance * p1)
2411	313	16	BrentSolver.java	solve	tolerance	double	1	DEF	2.0 * p >= 1.5 * dx * p1 - FastMath.abs($ * p1)
2411	313	16	BrentSolver.java	solve	oldDelta	double	1	DEF	p >= FastMath.abs(0.5 * $ * p1)
2412	329	12	BrentSolver.java	solve	tolerance	double	1	DEF	FastMath.abs(delta) > $
2412	329	12	BrentSolver.java	solve	delta	double	1	DEF	FastMath.abs($) > tolerance
2413	331	19	BrentSolver.java	solve	dx	double	1	DEF	$ > 0.0
2414	333	19	BrentSolver.java	solve	dx	double	0	DEF	$ <= 0.0
2415	337	12	BrentSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
2415	337	12	BrentSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
685	139	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ < 0.0
685	139	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ > 1.0
686	142	15	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
687	144	16	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
688	185	8	CauchyDistributionImpl.java	setScaleInternal	s	double	0	DEF	$ <= 0.0
689	205	8	CauchyDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
690	227	8	CauchyDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
691	248	8	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
692	250	15	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
1463	68	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	DEF	expected.$.length < 2
1463	68	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	DEF	$.length < 2
1464	72	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	DEF	expected.$.length != observed.$.length
1464	72	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	DEF	$.length != observed.length
1464	72	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	DEF	expected.length != $.length
35321	80	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
35321	80	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
35321	80	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
1465	86	8	ChiSquareTestImpl.java	chiSquare	sumExpected	double	0	DEF	FastMath.abs($ - sumObserved) > 10E-6
1465	86	8	ChiSquareTestImpl.java	chiSquare	sumObserved	double	0	DEF	FastMath.abs(sumExpected - $) > 10E-6
35322	91	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
35322	91	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
35322	91	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
1466	92	12	ChiSquareTestImpl.java	chiSquare	rescale	boolean	1	DEF	$
1467	138	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ > 0.5
1467	138	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ <= 0
35323	161	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
35323	161	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
35324	162	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
35324	162	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
35325	172	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
35325	172	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
35326	173	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
35326	173	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
1468	206	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ <= 0
1468	206	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ > 0.5
1469	225	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	DEF	observed1.$.length < 2
1469	225	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	DEF	$.length < 2
1470	229	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	DEF	observed1.$.length != observed2.$.length
1470	229	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	DEF	$.length != observed2.length
1470	229	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	DEF	observed1.length != $.length
35327	244	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
35327	244	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
35327	244	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
1471	249	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum1	long	0	DEF	$ == 0
1472	253	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum2	long	0	DEF	$ == 0
1473	259	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
35328	267	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
35328	267	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
35328	267	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
1474	268	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	DEF	observed2[$] == 0
1474	268	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	DEF	observed1[$] == 0
1474	268	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	1	DEF	$[i] == 0
1474	268	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	1	DEF	$[i] == 0
1475	274	16	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
1476	312	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	DEF	$ > 0.5
1476	312	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	DEF	$ <= 0
1477	330	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	DEF	in.$.length < 2
1477	330	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	DEF	$.length < 2
1478	335	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	DEF	in[0].length < 2
1478	335	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	DEF	$[0].length < 2
35329	355	8	ChiSquareTestImpl.java	checkRectangular	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
35329	355	8	ChiSquareTestImpl.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
35329	355	8	ChiSquareTestImpl.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
1479	356	12	ChiSquareTestImpl.java	checkRectangular	THIS	ChiSquareTestImpl	0	DEF	in[i].length != in[0].length
1479	356	12	ChiSquareTestImpl.java	checkRectangular	i	int	0	DEF	in[$].length != in[0].length
1479	356	12	ChiSquareTestImpl.java	checkRectangular	in	long[][]	0	DEF	$[i].length != $[0].length
35330	371	8	ChiSquareTestImpl.java	checkPositive	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
35330	371	8	ChiSquareTestImpl.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
35330	371	8	ChiSquareTestImpl.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
1480	372	12	ChiSquareTestImpl.java	checkPositive	i	int	0	DEF	in[$] <= 0
1480	372	12	ChiSquareTestImpl.java	checkPositive	in	double[]	0	DEF	$[i] <= 0
35331	387	8	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
35331	387	8	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
35331	387	8	ChiSquareTestImpl.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
1481	388	12	ChiSquareTestImpl.java	checkNonNegative	i	int	0	DEF	in[$] < 0
1481	388	12	ChiSquareTestImpl.java	checkNonNegative	in	long[]	0	DEF	$[i] < 0
35332	403	8	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
35332	403	8	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
35332	403	8	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
35333	404	12	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	j < in[i].length
35333	404	12	ChiSquareTestImpl.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
35333	404	12	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
35333	404	12	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
1482	405	16	ChiSquareTestImpl.java	checkNonNegative	j	int	0	DEF	in[i][$] < 0
1482	405	16	ChiSquareTestImpl.java	checkNonNegative	i	int	0	DEF	in[$][j] < 0
1482	405	16	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	DEF	$[i][j] < 0
681	161	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
682	164	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
683	200	8	ChiSquaredDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
684	226	8	ChiSquaredDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
1005	101	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
34885	112	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
34885	112	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
34886	117	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	j	int	0	NIL-FOR	$ < order
34886	117	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	j < $
1006	123	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lIJ	double	0	NotSymmetricMatrixException	FastMath.abs($ - lJI) > maxDelta
1006	123	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lJI	double	0	NotSymmetricMatrixException	FastMath.abs(lIJ - $) > maxDelta
1006	123	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	maxDelta	double	0	NotSymmetricMatrixException	FastMath.abs(lIJ - lJI) > $
34887	131	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
34887	131	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
1007	136	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	ltI	double[]	0	NotPositiveDefiniteMatrixException	$[i] < absolutePositivityThreshold
1007	136	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NotPositiveDefiniteMatrixException	ltI[$] < absolutePositivityThreshold
1007	136	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	absolutePositivityThreshold	double	0	NotPositiveDefiniteMatrixException	ltI[i] < $
34888	143	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	q	int	0	NIL-FOR	$ > i
34888	143	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	q > $
34889	146	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	p	int	0	NIL-FOR	$ < order
34889	146	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	p < $
1008	157	8	CholeskyDecompositionImpl.java	getL	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedL == null
1009	166	8	CholeskyDecompositionImpl.java	getLT	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedLT == null
34890	178	8	CholeskyDecompositionImpl.java	getDeterminant	THIS	CholeskyDecompositionImpl	0	NIL-FOR	i < $.lTData.$.length
34890	178	8	CholeskyDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
1642	45	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == Double.MIN_VALUE
1643	91	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
1644	106	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
35630	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
35630	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1892	128	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	RET	$.states.isEmpty()
1893	135	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.initialized
1894	152	16	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.evaluateStep(interpolator)
1894	152	16	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	0	DEF	state.evaluateStep($)
1895	153	20	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	1	DEF	$.first == null
1896	156	24	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	1	DEF	$.isForward()
1897	157	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() < $.first.getEventTime()
1898	161	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() > $.first.getEventTime()
1899	216	12	CombinedEventsManager.java	stop	THIS	CombinedEventsManager	0	RET	$.state.stop()
1900	237	16	CombinedEventsManager.java	reset	THIS	CombinedEventsManager	0	DEF	$.state.reset(t, y)
1900	237	16	CombinedEventsManager.java	reset	t	double	0	DEF	state.reset($, y)
1900	237	16	CombinedEventsManager.java	reset	y	double[]	0	DEF	state.reset(t, $)
474	109	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN()
475	113	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
476	117	8	Complex.java	abs	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
477	118	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
478	124	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
479	169	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN()
480	211	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN()
480	211	8	Complex.java	divide	rhs	Complex	0	RET	$.isNaN()
481	217	8	Complex.java	divide	c	double	0	RET	$ == 0.0
481	217	8	Complex.java	divide	d	double	0	RET	$ == 0.0
482	221	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
482	221	8	Complex.java	divide	rhs	Complex	0	RET	$.isInfinite()
483	225	8	Complex.java	divide	c	double	1	RET	FastMath.abs($) < FastMath.abs(d)
483	225	8	Complex.java	divide	d	double	1	RET	FastMath.abs(c) < FastMath.abs($)
484	258	8	Complex.java	equals	THIS	Complex	0	RET	$ == other
484	258	8	Complex.java	equals	other	Object	0	RET	this == $
485	261	8	Complex.java	equals	other	Object	0	RET	$ instanceof Complex
486	263	12	Complex.java	equals	rhs	Complex	1	RET	$.isNaN()
487	281	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN()
488	358	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN()
488	358	8	Complex.java	multiply	rhs	Complex	0	RET	$.isNaN()
489	361	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
489	361	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
489	361	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.real)
489	361	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.imaginary)
489	361	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.real)
489	361	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.imaginary)
490	397	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN()
490	397	8	Complex.java	multiply	rhs	double	0	RET	Double.isNaN($)
491	400	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
491	400	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
491	400	8	Complex.java	multiply	rhs	double	0	RET	Double.isInfinite($)
492	417	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN()
493	443	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN()
493	443	8	Complex.java	subtract	rhs	Complex	0	RET	$.isNaN()
494	466	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN()
495	489	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN()
496	512	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN()
497	547	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN()
498	581	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN()
499	616	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN()
500	654	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN()
501	680	8	Complex.java	pow	x	Complex	0	NullPointerException	$ == null
502	713	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN()
503	747	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN()
504	789	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN()
505	793	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
505	793	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
506	798	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
507	855	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN()
508	893	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN()
509	944	8	Complex.java	nthRoot	n	int	0	DEF	$ <= 0
510	952	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN()
511	957	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
34309	969	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
34309	969	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
463	158	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
464	162	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
464	162	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
465	190	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
466	192	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
467	257	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
468	280	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
469	316	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
470	324	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	$.parseFixedstring(source, $.getImaginaryCharacter(), pos)
470	324	8	ComplexFormat.java	parse	source	String	0	RET	parseFixedstring($, getImaginaryCharacter(), pos)
470	324	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, getImaginaryCharacter(), $)
471	352	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	DEF	$ == null
471	352	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	DEF	$.length() == 0
472	365	8	ComplexFormat.java	setImaginaryFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
473	377	8	ComplexFormat.java	setRealFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
462	65	8	ComplexUtils.java	polar2Complex	r	double	0	DEF	$ < 0
252	84	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
252	84	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
34271	86	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
34271	86	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
34271	86	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
253	91	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
253	91	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
254	120	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
254	120	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
255	121	12	CompositeFormat.java	parseNumber	sb	StringBuffer	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
255	121	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
255	121	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
255	121	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
256	147	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
256	147	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
34272	152	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
34272	152	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
34272	152	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
257	154	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
258	175	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
258	175	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
258	175	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
258	175	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
258	175	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
258	175	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
258	175	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
258	175	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
259	210	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
259	210	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
34245	136	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
34245	136	8	ContinuedFraction.java	evaluate	relativeError	double	0	NIL-WHILE	$ > epsilon
34245	136	8	ContinuedFraction.java	evaluate	epsilon	double	0	NIL-WHILE	relativeError > $
34245	136	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
1	143	12	ContinuedFraction.java	evaluate	p2	double	0	ConvergenceException	Double.isInfinite($)
1	143	12	ContinuedFraction.java	evaluate	q2	double	0	ConvergenceException	Double.isInfinite($)
2	153	16	ContinuedFraction.java	evaluate	scale	double	0	ConvergenceException	$ <= 0
34246	159	16	ContinuedFraction.java	evaluate	i	int	0	NIL-FOR	$ < maxPower
34246	159	16	ContinuedFraction.java	evaluate	maxPower	int	0	NIL-FOR	i < $
3	162	20	ContinuedFraction.java	evaluate	a	double	1	DEF	$ > b
3	162	20	ContinuedFraction.java	evaluate	a	double	1	DEF	$ != 0.0
3	162	20	ContinuedFraction.java	evaluate	b	double	1	DEF	a > $
4	165	27	ContinuedFraction.java	evaluate	b	double	0	DEF	$ != 0
5	170	20	ContinuedFraction.java	evaluate	infinite	boolean	0	DEF	$
6	176	12	ContinuedFraction.java	evaluate	infinite	boolean	0	ConvergenceException	$
7	185	12	ContinuedFraction.java	evaluate	r	double	0	ConvergenceException	Double.isNaN($)
8	200	8	ContinuedFraction.java	evaluate	n	int	0	MaxIterationsExceededException	$ >= maxIterations
8	200	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxIterationsExceededException	n >= $
1912	128	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
1912	128	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
1913	132	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
1914	137	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DEF	$.getInterpolatedState().length != model.getInterpolatedState().length
1914	137	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DEF	getInterpolatedState().length != $.getInterpolatedState().length
1915	143	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DEF	$.forward ^ model.$.forward
1915	143	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DEF	forward ^ $.forward
1916	153	6	ContinuousOutputModel.java	append	step	double	0	DEF	FastMath.abs(gap) > 1.0e-3 * FastMath.abs($)
1916	153	6	ContinuousOutputModel.java	append	gap	double	0	DEF	FastMath.abs($) > 1.0e-3 * FastMath.abs(step)
1917	202	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
1918	209	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
1919	267	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
1919	267	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
1919	267	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
1920	272	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
1920	272	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
1920	272	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
35656	279	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
35656	279	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
1921	284	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
1922	287	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
1923	301	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs($ - tMin) < 1e-6
1923	301	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs(tMax - $) < 1e-6
1923	301	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	FastMath.abs(tMed - $) < 1e-6
1923	301	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	FastMath.abs($ - tMed) < 1e-6
1924	324	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
1924	324	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
1925	326	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
1925	326	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
35657	334	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
35657	334	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
35657	334	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
35657	334	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
1926	360	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
1927	361	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
1927	361	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
1928	363	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
1928	363	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
1929	369	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
1929	369	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
1930	371	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
1930	371	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
1707	149	8	ConvergingAlgorithmImpl.java	incrementIterationsCounter	THIS	ConvergingAlgorithmImpl	0	MaxIterationsExceededException	++$.iterationCount > $.maximalIterationCount
1569	103	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
1569	103	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
1569	103	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
35379	132	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
35379	132	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
35380	197	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
35380	197	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
35381	202	8	CorrelatedRandomVectorGenerator.java	decompose	loop	boolean	0	NIL-FOR	$
35382	206	12	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
35382	206	12	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
1570	209	16	CorrelatedRandomVectorGenerator.java	decompose	ii	int	0	DEF	c[$][$] > c[isi][isi]
1570	209	16	CorrelatedRandomVectorGenerator.java	decompose	isi	int	0	DEF	c[ii][ii] > c[$][$]
1570	209	16	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
1571	216	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	DEF	swap[$.rank] != $.rank
1571	216	12	CorrelatedRandomVectorGenerator.java	decompose	swap	int[]	0	DEF	$[rank] != rank
1572	224	12	CorrelatedRandomVectorGenerator.java	decompose	ir	int	1	NotPositiveDefiniteMatrixException	c[$][$] < small
1572	224	12	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	1	NotPositiveDefiniteMatrixException	$[ir][ir] < small
1572	224	12	CorrelatedRandomVectorGenerator.java	decompose	small	double	1	NotPositiveDefiniteMatrixException	c[ir][ir] < $
1573	226	16	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NotPositiveDefiniteMatrixException	$.rank == 0
35383	231	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
35383	231	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
1574	232	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NotPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1574	232	20	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	NotPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1574	232	20	CorrelatedRandomVectorGenerator.java	decompose	index	int[]	0	NotPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1574	232	20	CorrelatedRandomVectorGenerator.java	decompose	small	double	0	NotPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
35384	250	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
35384	250	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
35385	255	20	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < i
35385	255	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	j < $
35386	272	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
35386	272	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
35387	273	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
35387	273	12	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < rank
35388	287	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.rank
35388	287	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < rank
35389	293	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
35389	293	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
35389	293	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
35390	295	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
35390	295	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < rank
35351	164	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
35351	164	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
35352	165	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
35352	165	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
1499	225	8	Covariance.java	covariance	THIS	Covariance	1	DEF	length != yArray.$.length
1499	225	8	Covariance.java	covariance	length	int	1	DEF	$ != yArray.length
1499	225	8	Covariance.java	covariance	yArray	double[]	1	DEF	length != $.length
1500	228	15	Covariance.java	covariance	length	int	1	DEF	$ < 2
35353	234	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
35353	234	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
1501	268	8	Covariance.java	checkSufficientData	nRows	int	0	DEF	$ < 2
1501	268	8	Covariance.java	checkSufficientData	nCols	int	0	DEF	$ < 2
374	47	8	DefaultTransformer.java	transform	o	Object	0	NullArgumentException	$ == null
375	51	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
376	66	8	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
376	66	8	DefaultTransformer.java	equals	other	Object	0	RET	this == $
377	69	8	DefaultTransformer.java	equals	other	Object	0	RET	$ == null
1398	145	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
1399	146	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
1400	148	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
1401	209	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
1402	210	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
1403	308	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < 1
1404	309	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
1405	320	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
1405	320	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
1405	320	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
1406	381	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
1958	217	8	Dfp.java	Dfp	x	long	0	DEF	$ == Long.MIN_VALUE
1959	225	8	Dfp.java	Dfp	x	long	1	DEF	$ < 0
35665	233	8	Dfp.java	Dfp	x	long	0	NIL-WHILE	$ != 0
1960	240	8	Dfp.java	Dfp	isLongMin	boolean	0	DEF	$
35666	243	12	Dfp.java	Dfp	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
35666	243	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < mant.length - 1
1961	244	16	Dfp.java	Dfp	THIS	Dfp	0	DEF	$.mant[i] != 0
1961	244	16	Dfp.java	Dfp	i	int	0	DEF	mant[$] != 0
1962	269	8	Dfp.java	Dfp	exponent	int	0	RET	$ == -1023
1963	271	12	Dfp.java	Dfp	x	double	0	RET	$ == 0
35667	278	12	Dfp.java	Dfp	mantissa	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
1964	285	8	Dfp.java	Dfp	exponent	int	0	RET	$ == 1024
1965	287	12	Dfp.java	Dfp	x	double	1	DEF	$ != $
1966	290	19	Dfp.java	Dfp	x	double	1	DEF	$ < 0
1967	304	8	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
1968	345	8	Dfp.java	Dfp	s	String	0	RET	$.equals(POS_INFINITY_STRING)
1969	351	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NEG_INFINITY_STRING)
1970	357	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NAN_STRING)
1971	365	8	Dfp.java	Dfp	p	int	0	DEF	$ == -1
1972	371	8	Dfp.java	Dfp	p	int	1	DEF	$ != -1
35668	377	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$<fpexp.length()
35668	377	12	Dfp.java	Dfp	fpexp	String	0	NIL-FOR	i<$.length()
1973	379	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) == '-'
1973	379	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) == '-'
1974	384	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) >= '0'
1974	384	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) <= '9'
1974	384	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) >= '0'
1974	384	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) <= '9'
1975	388	12	Dfp.java	Dfp	negative	boolean	0	DEF	$
1976	397	8	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.indexOf("-") != -1
1977	407	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) <= '9'
1977	407	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) >= '1'
1977	407	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) <= '9'
1977	407	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) >= '1'
1978	411	12	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
1978	411	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '0'
1978	411	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '0'
1979	415	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
1979	415	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
1980	421	12	Dfp.java	Dfp	p	int	0	DEF	$ == fpdecimal.length()
1980	421	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == $.length()
1981	434	12	Dfp.java	Dfp	p	int	0	DEF	$ == (fpdecimal.length())
1981	434	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == ($.length())
1982	439	12	Dfp.java	Dfp	THIS	Dfp	0	DEF	q == $.mant.$.length*rsize+offset+1
1982	439	12	Dfp.java	Dfp	rsize	int	0	DEF	q == mant.length*$+offset+1
1982	439	12	Dfp.java	Dfp	offset	int	0	DEF	q == mant.length*rsize+$+1
1982	439	12	Dfp.java	Dfp	q	int	0	DEF	$ == mant.length*rsize+offset+1
1983	443	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
1983	443	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
1984	450	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) < '0'
1984	450	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) > '9'
1984	450	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) < '0'
1984	450	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) > '9'
1985	463	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
1985	463	8	Dfp.java	Dfp	offset	int	0	DEF	q != $
1985	463	8	Dfp.java	Dfp	q	int	0	DEF	$ != offset
1986	466	16	Dfp.java	Dfp	offset	int	0	DEF	q == $
1986	466	16	Dfp.java	Dfp	q	int	0	DEF	$ == offset
1987	469	16	Dfp.java	Dfp	striped	char[]	1	DEF	$[q] == '0'
1987	469	16	Dfp.java	Dfp	q	int	1	DEF	striped[$] == '0'
1988	478	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
1988	478	8	Dfp.java	Dfp	significantDigits	int	0	DEF	$ == 0
1989	483	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
35669	492	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	$ > q
35669	492	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	p > $
1990	493	12	Dfp.java	Dfp	striped	char[]	0	DEF	$[p] != '0'
1990	493	12	Dfp.java	Dfp	p	int	0	DEF	striped[$] != '0'
35670	506	8	Dfp.java	Dfp	THIS	Dfp	0	NIL-WHILE	(p - q) < ($.mant.$.length * rsize)
35670	506	8	Dfp.java	Dfp	rsize	int	0	NIL-WHILE	(p - q) < (mant.length * $)
35670	506	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	($ - q) < (mant.length * rsize)
35670	506	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	(p - $) < (mant.length * rsize)
35671	507	12	Dfp.java	Dfp	rsize	int	0	NIL-FOR	i < $
35671	507	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < rsize
35672	514	8	Dfp.java	Dfp	i	int	0	NIL-FOR	$ >= 0
1991	525	8	Dfp.java	Dfp	THIS	Dfp	0	DEF	q < striped.$.length
1991	525	8	Dfp.java	Dfp	striped	char[]	0	DEF	q < $.length
1991	525	8	Dfp.java	Dfp	q	int	0	DEF	$ < striped.length
1992	594	8	Dfp.java	newInstance	THIS	Dfp	0	RET	$.field.getRadixDigits() != d.$.field.getRadixDigits()
1992	594	8	Dfp.java	newInstance	d	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
35673	666	8	Dfp.java	shiftLeft	i	int	0	NIL-FOR	$ > 0
35674	678	8	Dfp.java	shiftRight	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
35674	678	8	Dfp.java	shiftRight	i	int	0	NIL-FOR	$ < mant.length - 1
1993	700	8	Dfp.java	align	adiff	int	0	DEF	$ < 0
1994	704	8	Dfp.java	align	diff	int	0	RET	$ == 0
1995	708	8	Dfp.java	align	THIS	Dfp	0	RET	adiff > ($.mant.$.length + 1)
1995	708	8	Dfp.java	align	adiff	int	0	RET	$ > (mant.length + 1)
35675	719	8	Dfp.java	align	i	int	0	NIL-FOR	$ < adiff
35675	719	8	Dfp.java	align	adiff	int	0	NIL-FOR	i < $
1996	720	12	Dfp.java	align	diff	int	1	DEF	$ < 0
1997	725	16	Dfp.java	align	lostdigit	int	0	DEF	$ != 0
1998	737	8	Dfp.java	align	inexact	boolean	0	DEF	$
1999	753	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
1999	753	8	Dfp.java	lessThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2000	762	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.isNaN()
2000	762	8	Dfp.java	lessThan	x	Dfp	0	RET	$.isNaN()
2001	778	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2001	778	8	Dfp.java	greaterThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2002	787	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.isNaN()
2002	787	8	Dfp.java	greaterThan	x	Dfp	0	RET	$.isNaN()
2003	817	8	Dfp.java	equals	other	Object	0	RET	$ instanceof Dfp
2004	819	12	Dfp.java	equals	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2004	819	12	Dfp.java	equals	THIS	Dfp	0	RET	$.isNaN()
2004	819	12	Dfp.java	equals	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2004	819	12	Dfp.java	equals	x	Dfp	0	RET	$.isNaN()
2005	844	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.isNaN()
2005	844	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2005	844	8	Dfp.java	unequal	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2005	844	8	Dfp.java	unequal	x	Dfp	0	RET	$.isNaN()
2006	859	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
2006	859	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[a.$.mant.$.length - 1] == 0
2006	859	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
2006	859	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length - 1] == 0
2006	859	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
2006	859	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
2006	859	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
2006	859	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
2007	864	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.sign != b.$.sign
2007	864	8	Dfp.java	compare	a	Dfp	0	RET	$.sign != b.sign
2007	864	8	Dfp.java	compare	b	Dfp	0	RET	a.sign != $.sign
2008	865	12	Dfp.java	compare	THIS	Dfp	1	RET	a.$.sign == -1
2008	865	12	Dfp.java	compare	a	Dfp	1	RET	$.sign == -1
2009	873	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
2009	873	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
2009	873	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
2009	873	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
2010	877	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
2010	877	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
2010	877	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
2010	877	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
2011	881	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
2011	881	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
2011	881	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
2011	881	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
2012	886	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[b.$.mant.$.length-1] != 0
2012	886	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length-1] != 0
2012	886	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[b.mant.length-1] != 0
2012	886	8	Dfp.java	compare	b	Dfp	0	RET	a.mant[$.mant.length-1] != 0
2012	886	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length-1] != 0
2013	887	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp < b.$.exp
2013	887	12	Dfp.java	compare	a	Dfp	0	RET	$.exp < b.exp
2013	887	12	Dfp.java	compare	b	Dfp	0	RET	a.exp < $.exp
2014	891	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp > b.$.exp
2014	891	12	Dfp.java	compare	a	Dfp	0	RET	$.exp > b.exp
2014	891	12	Dfp.java	compare	b	Dfp	0	RET	a.exp > $.exp
35676	897	8	Dfp.java	compare	i	int	0	NIL-FOR	$ >= 0
2015	898	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] > b.$.mant[i]
2015	898	12	Dfp.java	compare	i	int	0	RET	a.mant[$] > b.mant[$]
2015	898	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] > b.mant[i]
2015	898	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] > $.mant[i]
2016	902	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] < b.$.mant[i]
2016	902	12	Dfp.java	compare	i	int	0	RET	a.mant[$] < b.mant[$]
2016	902	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] < b.mant[i]
2016	902	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] < $.mant[i]
2017	945	8	Dfp.java	remainder	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2017	945	8	Dfp.java	remainder	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2018	960	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.isNaN()
2019	964	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.nans == INFINITE
2020	968	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2021	975	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp < 0
2022	986	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp >= $.mant.$.length
35677	994	8	Dfp.java	trunc	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length-result.$.exp
35677	994	8	Dfp.java	trunc	i	int	0	NIL-FOR	$ < mant.length-result.exp
35677	994	8	Dfp.java	trunc	result	Dfp	0	NIL-FOR	i < mant.length-$.exp
2023	999	8	Dfp.java	trunc	changed	boolean	0	RET	$
2024	1002	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == -1
2024	1002	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == -1
2025	1009	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == 1
2025	1009	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == 1
2026	1020	20	Dfp.java	trunc	half	Dfp	0	DEF	a.greaterThan($)
2026	1020	20	Dfp.java	trunc	a	Dfp	0	DEF	$.greaterThan(half)
2027	1027	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.exp > 0
2027	1027	20	Dfp.java	trunc	THIS	Dfp	0	DEF	(result.$.mant[$.mant.$.length-result.$.exp]&1) != 0
2027	1027	20	Dfp.java	trunc	half	Dfp	0	DEF	a.equals($)
2027	1027	20	Dfp.java	trunc	a	Dfp	0	DEF	$.equals(half)
2027	1027	20	Dfp.java	trunc	result	Dfp	0	DEF	$.exp > 0
2027	1027	20	Dfp.java	trunc	result	Dfp	0	DEF	($.mant[mant.length-$.exp]&1) != 0
2028	1053	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.greaterThan($.newInstance(2147483647))
2028	1053	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.greaterThan(newInstance(2147483647))
2029	1057	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.lessThan($.newInstance(-2147483648))
2029	1057	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.lessThan(newInstance(-2147483648))
35678	1061	8	Dfp.java	intValue	THIS	Dfp	0	NIL-FOR	i >= $.mant.$.length - rounded.$.exp
35678	1061	8	Dfp.java	intValue	i	int	0	NIL-FOR	$ >= mant.length - rounded.exp
35678	1061	8	Dfp.java	intValue	rounded	Dfp	0	NIL-FOR	i >= mant.length - $.exp
2030	1065	8	Dfp.java	intValue	THIS	Dfp	0	DEF	rounded.$.sign == -1
2030	1065	8	Dfp.java	intValue	rounded	Dfp	0	DEF	$.sign == -1
2031	1095	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 1000
2032	1098	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 100
2033	1101	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 10
2034	1114	8	Dfp.java	power10	e	int	1	DEF	$ >= 0
35679	1145	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
35679	1145	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
35680	1151	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
35680	1151	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
2035	1167	8	Dfp.java	add	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2035	1167	8	Dfp.java	add	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2036	1175	8	Dfp.java	add	THIS	Dfp	0	RET	$.nans != FINITE
2036	1175	8	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans != FINITE
2036	1175	8	Dfp.java	add	x	Dfp	0	RET	$.nans != FINITE
2037	1176	12	Dfp.java	add	THIS	Dfp	0	RET	$.isNaN()
2038	1180	12	Dfp.java	add	x	Dfp	0	RET	$.isNaN()
2039	1184	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2039	1184	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == FINITE
2039	1184	12	Dfp.java	add	x	Dfp	0	RET	$.nans == FINITE
2040	1188	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == FINITE
2040	1188	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2040	1188	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2041	1192	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2041	1192	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign == x.$.sign
2041	1192	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2041	1192	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2041	1192	12	Dfp.java	add	x	Dfp	0	RET	sign == $.sign
2042	1196	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign != x.$.sign
2042	1196	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2042	1196	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2042	1196	12	Dfp.java	add	x	Dfp	0	RET	sign != $.sign
2042	1196	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2043	1221	8	Dfp.java	add	THIS	Dfp	0	DEF	$.compare(a, b) > 0
2043	1221	8	Dfp.java	add	a	Dfp	0	DEF	compare($, b) > 0
2043	1221	8	Dfp.java	add	b	Dfp	0	DEF	compare(a, $) > 0
2044	1228	8	Dfp.java	add	THIS	Dfp	0	DEF	b.$.mant[$.mant.$.length-1] == 0
2044	1228	8	Dfp.java	add	b	Dfp	0	DEF	$.mant[mant.length-1] == 0
2045	1232	8	Dfp.java	add	THIS	Dfp	0	DEF	a.$.mant[$.mant.$.length-1] == 0
2045	1232	8	Dfp.java	add	a	Dfp	0	DEF	$.mant[mant.length-1] == 0
2046	1239	8	Dfp.java	add	THIS	Dfp	1	DEF	a.$.exp < b.$.exp
2046	1239	8	Dfp.java	add	a	Dfp	1	DEF	$.exp < b.exp
2046	1239	8	Dfp.java	add	b	Dfp	1	DEF	a.exp < $.exp
2047	1246	8	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2047	1246	8	Dfp.java	add	bsign	byte	0	DEF	asign != $
2048	1247	12	Dfp.java	add	asign	byte	1	DEF	$ == rsign
2048	1247	12	Dfp.java	add	rsign	byte	1	DEF	asign == $
35681	1256	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
35681	1256	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2049	1267	8	Dfp.java	add	asign	byte	0	DEF	$ == bsign
2049	1267	8	Dfp.java	add	bsign	byte	0	DEF	asign == $
2049	1267	8	Dfp.java	add	rh	int	0	DEF	$ != 0
2050	1272	12	Dfp.java	add	excp	int	0	DEF	$ != 0
35682	1278	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
35682	1278	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2051	1279	12	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] != 0
2051	1279	12	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] != 0
2052	1283	12	Dfp.java	add	i	int	0	DEF	$ == 0
2053	1291	8	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2053	1291	8	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2054	1294	12	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2054	1294	12	Dfp.java	add	bsign	byte	0	DEF	asign != $
2055	1302	8	Dfp.java	add	excp	int	0	DEF	$ != 0
2056	1367	8	Dfp.java	round	inc	boolean	0	DEF	$
35683	1370	12	Dfp.java	round	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
35683	1370	12	Dfp.java	round	i	int	0	NIL-FOR	$ < mant.length
2057	1376	12	Dfp.java	round	rh	int	0	DEF	$ != 0
2058	1383	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp < MIN_EXP
2059	1389	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp > MAX_EXP
2060	1395	8	Dfp.java	round	n	int	0	RET	$ != 0
2061	1412	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2061	1412	8	Dfp.java	multiply	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2062	1422	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
2062	1422	8	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans != FINITE
2062	1422	8	Dfp.java	multiply	x	Dfp	0	RET	$.nans != FINITE
2063	1423	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
2064	1427	12	Dfp.java	multiply	x	Dfp	0	RET	$.isNaN()
2065	1431	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2065	1431	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2065	1431	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] != 0
2065	1431	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
2065	1431	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] != 0
2066	1437	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2066	1437	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2066	1437	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] != 0
2066	1437	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2067	1443	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2067	1443	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2067	1443	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2068	1449	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2068	1449	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] == 0
2068	1449	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2068	1449	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2068	1449	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2068	1449	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2068	1449	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] == 0
2068	1449	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
2068	1449	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
35684	1461	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
35684	1461	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
35685	1463	12	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	j<$.mant.$.length
35685	1463	12	Dfp.java	multiply	j	int	0	NIL-FOR	$<mant.length
35686	1475	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ >= 0
2069	1476	12	Dfp.java	multiply	i	int	0	DEF	product[$] != 0
2069	1476	12	Dfp.java	multiply	product	int[]	0	DEF	$[i] != 0
35687	1483	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
35687	1483	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
2070	1491	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2070	1491	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2071	1497	8	Dfp.java	multiply	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
2071	1497	8	Dfp.java	multiply	md	int	1	DEF	$ > (mant.length-1)
2072	1503	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
2073	1520	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
2074	1521	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
2075	1525	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2075	1525	12	Dfp.java	multiply	x	int	0	RET	$ != 0
2076	1530	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2076	1530	12	Dfp.java	multiply	x	int	0	RET	$ == 0
2077	1540	8	Dfp.java	multiply	x	int	0	RET	$ < 0
2077	1540	8	Dfp.java	multiply	x	int	0	RET	$ >= RADIX
35688	1549	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
35688	1549	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
2078	1556	8	Dfp.java	multiply	rh	int	0	DEF	$ != 0
2079	1562	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2079	1562	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2080	1567	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
2081	1591	8	Dfp.java	divide	THIS	Dfp	0	RET	$.field.getRadixDigits() != divisor.$.field.getRadixDigits()
2081	1591	8	Dfp.java	divide	divisor	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2082	1601	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
2082	1601	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans != FINITE
2082	1601	8	Dfp.java	divide	divisor	Dfp	0	RET	$.nans != FINITE
2083	1602	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
2084	1606	12	Dfp.java	divide	divisor	Dfp	0	RET	$.isNaN()
2085	1610	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2085	1610	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == FINITE
2085	1610	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == FINITE
2086	1616	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == FINITE
2086	1616	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2086	1616	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2087	1622	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2087	1622	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2087	1622	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2088	1632	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.mant[$.mant.$.length-1] == 0
2088	1632	8	Dfp.java	divide	divisor	Dfp	0	RET	$.mant[mant.length-1] == 0
35689	1655	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
35689	1655	8	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
35690	1663	8	Dfp.java	divide	qd	int	0	NIL-FOR	$ >= 0
35691	1672	12	Dfp.java	divide	trialgood	boolean	0	NIL-WHILE	$
35692	1678	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
35692	1678	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
35693	1687	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
35693	1687	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
2089	1694	16	Dfp.java	divide	rh	int	0	DEF	$ == 0
2090	1704	16	Dfp.java	divide	minadj	int	0	DEF	$ >= 2
35694	1712	16	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2091	1713	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] > remainder[i]
2091	1713	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] > remainder[$]
2091	1713	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] > $[i]
2091	1713	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] > remainder[i]
2092	1716	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] < remainder[i]
2092	1716	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] < remainder[$]
2092	1716	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] < $[i]
2092	1716	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] < remainder[i]
2093	1721	16	Dfp.java	divide	THIS	Dfp	0	DEF	remainder[$.mant.$.length] != 0
2093	1721	16	Dfp.java	divide	remainder	int[]	0	DEF	$[mant.length] != 0
2094	1725	16	Dfp.java	divide	trialgood	boolean	0	DEF	$ == false
2095	1732	12	Dfp.java	divide	nsqd	int	0	DEF	$ != 0
2095	1732	12	Dfp.java	divide	trial	int	0	DEF	$ != 0
2096	1736	12	Dfp.java	divide	THIS	Dfp	0	DEF	$.field.getRoundingMode() == DfpField.$.RoundingMode.ROUND_DOWN
2096	1736	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd == $.mant.$.length
2096	1736	12	Dfp.java	divide	nsqd	int	0	DEF	$ == mant.length
2097	1741	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd > $.mant.$.length
2097	1741	12	Dfp.java	divide	nsqd	int	0	DEF	$ > mant.length
35695	1748	12	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
35695	1748	12	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
35696	1755	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2098	1756	12	Dfp.java	divide	i	int	0	DEF	quotient[$] != 0
2098	1756	12	Dfp.java	divide	quotient	int[]	0	DEF	$[i] != 0
35697	1763	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i<$.mant.$.length
35697	1763	8	Dfp.java	divide	i	int	0	NIL-FOR	$<mant.length
2099	1771	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2099	1771	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2100	1775	8	Dfp.java	divide	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
2100	1775	8	Dfp.java	divide	md	int	1	DEF	$ > (mant.length-1)
2101	1781	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
2102	1796	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
2103	1797	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
2104	1801	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2105	1807	8	Dfp.java	divide	divisor	int	0	RET	$ == 0
2106	1817	8	Dfp.java	divide	divisor	int	0	RET	$ < 0
2106	1817	8	Dfp.java	divide	divisor	int	0	RET	$ >= RADIX
35698	1828	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2107	1835	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2107	1835	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2108	1845	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
2109	1859	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == FINITE
2109	1859	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2110	1864	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans != FINITE
2111	1865	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == INFINITE
2111	1865	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == 1
2112	1870	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == QNAN
2113	1874	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == SNAN
2114	1884	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == -1
2115	1898	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp < -1
2115	1898	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp > 1
2115	1898	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp < -1
2115	1898	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp > 1
35699	1924	8	Dfp.java	sqrt	x	Dfp	0	NIL-WHILE	$.unequal(px)
35699	1924	8	Dfp.java	sqrt	px	Dfp	0	NIL-WHILE	x.unequal($)
2116	1933	12	Dfp.java	sqrt	x	Dfp	0	DEF	$.equals(ppx)
2116	1933	12	Dfp.java	sqrt	ppx	Dfp	0	DEF	x.equals($)
2117	1940	12	Dfp.java	sqrt	THIS	Dfp	0	DEF	dx.$.mant[$.mant.$.length-1] == 0
2117	1940	12	Dfp.java	sqrt	dx	Dfp	0	DEF	$.mant[mant.length-1] == 0
2118	1953	8	Dfp.java	toString	THIS	Dfp	0	RET	$.nans != FINITE
2119	1955	12	Dfp.java	toString	THIS	Dfp	1	RET	$.nans == INFINITE
2120	1962	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp > $.mant.$.length
2120	1962	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp < -1
35700	1984	8	Dfp.java	dfp2sci	i	int	0	NIL-FOR	$ >= 0
35701	1992	8	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-FOR	p < rawdigits.$.length
35701	1992	8	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-FOR	p < $.length
35701	1992	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ < rawdigits.length
2121	1993	12	Dfp.java	dfp2sci	rawdigits	char[]	0	DEF	$[p] != '0'
2121	1993	12	Dfp.java	dfp2sci	p	int	0	DEF	rawdigits[$] != '0'
2122	2001	8	Dfp.java	dfp2sci	THIS	Dfp	0	DEF	$.sign == -1
2123	2005	8	Dfp.java	dfp2sci	THIS	Dfp	1	DEF	p != rawdigits.$.length
2123	2005	8	Dfp.java	dfp2sci	rawdigits	char[]	1	DEF	p != $.length
2123	2005	8	Dfp.java	dfp2sci	p	int	1	DEF	$ != rawdigits.length
35702	2010	12	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-WHILE	p<rawdigits.$.length
35702	2010	12	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-WHILE	p<$.length
35702	2010	12	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$<rawdigits.length
2124	2028	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
35703	2033	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ > ae
35703	2033	8	Dfp.java	dfp2sci	ae	int	0	NIL-FOR	p > $
2125	2037	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
35704	2041	8	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$ > 0
2126	2063	8	Dfp.java	dfp2string	e	int	0	DEF	$ <= 0
35705	2069	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ < 0
35706	2077	8	Dfp.java	dfp2string	i	int	0	NIL-FOR	$ >= 0
2127	2082	12	Dfp.java	dfp2string	e	int	0	DEF	--$ == 0
35707	2088	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ > 0
2128	2096	8	Dfp.java	dfp2string	pointInserted	boolean	0	DEF	$
35708	2103	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[q] == '0'
35708	2103	8	Dfp.java	dfp2string	q	int	0	NIL-WHILE	buffer[$] == '0'
2129	2106	8	Dfp.java	dfp2string	buffer	char[]	0	DEF	$[q] == '.'
2129	2106	8	Dfp.java	dfp2string	q	int	0	DEF	buffer[$] == '.'
35709	2111	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[p-1] == '0'
35709	2111	8	Dfp.java	dfp2string	p	int	0	NIL-WHILE	buffer[$-1] == '0'
2130	2116	8	Dfp.java	dfp2string	THIS	Dfp	0	DEF	$.sign < 0
2131	2142	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] != 0
2131	2142	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
2132	2149	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] == 0
2132	2149	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
2133	2155	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
2133	2155	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == QNAN
2134	2160	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == SNAN
2134	2160	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
2135	2167	16	Dfp.java	dotrap	THIS	Dfp	1	DEF	(result.$.exp+$.mant.$.length) < MIN_EXP
2135	2167	16	Dfp.java	dotrap	result	Dfp	1	DEF	($.exp+mant.length) < MIN_EXP
2136	2232	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2136	2232	8	Dfp.java	nextAfter	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2137	2241	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan(x)
2137	2241	8	Dfp.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
2138	2245	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.compare(this, x) == 0
2138	2245	8	Dfp.java	nextAfter	x	Dfp	0	RET	compare(this, $) == 0
2139	2249	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan($.getZero())
2140	2255	8	Dfp.java	nextAfter	up	boolean	1	DEF	$
2141	2260	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
2142	2270	12	Dfp.java	nextAfter	THIS	Dfp	1	DEF	$.equals(inc)
2142	2270	12	Dfp.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
2143	2276	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
2144	2283	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.classify() != INFINITE
2144	2283	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
2145	2288	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	result.equals($.getZero())
2145	2288	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero()) == false
2145	2288	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
2146	2303	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isInfinite()
2147	2304	12	Dfp.java	toDouble	THIS	Dfp	1	RET	$.lessThan($.getZero())
2148	2311	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isNaN()
2149	2317	8	Dfp.java	toDouble	THIS	Dfp	0	DEF	$.lessThan($.getZero())
2150	2325	8	Dfp.java	toDouble	exponent	int	0	DEF	$ < 0
35710	2330	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.equals($)
35710	2330	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.lessThan($)
35710	2330	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.equals(y)
35710	2330	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.lessThan(y)
2151	2339	8	Dfp.java	toDouble	exponent	int	0	DEF	$ > -1023
2152	2343	8	Dfp.java	toDouble	exponent	int	0	RET	$ < -1074
2153	2347	8	Dfp.java	toDouble	exponent	int	0	RET	$ > 1023
2154	2357	8	Dfp.java	toDouble	mantissa	long	0	DEF	$ == 4503599627370496L
2155	2364	8	Dfp.java	toDouble	exponent	int	0	DEF	$ <= -1023
35711	2368	8	Dfp.java	toDouble	exponent	int	0	NIL-WHILE	$ < -1023
2156	2376	8	Dfp.java	toDouble	negate	boolean	0	DEF	$
1937	125	8	DfpDec.java	newInstance	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != d.getField().getRadixDigits()
1937	125	8	DfpDec.java	newInstance	d	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
1938	159	8	DfpDec.java	round	msb	int	0	RET	$ == 0
35661	166	8	DfpDec.java	round	msb	int	0	NIL-WHILE	lsbthreshold > $
35661	166	8	DfpDec.java	round	lsbthreshold	int	0	NIL-WHILE	$ > msb
35662	177	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsbshift % 4
35662	177	8	DfpDec.java	round	lsbshift	int	0	NIL-FOR	i < $ % 4
1939	183	8	DfpDec.java	round	THIS	DfpDec	0	RET	digits == 4 * $.mant.$.length - 3
1939	183	8	DfpDec.java	round	lsbthreshold	int	0	RET	$ <= 1
1939	183	8	DfpDec.java	round	digits	int	0	RET	$ == 4 * mant.length - 3
1940	189	8	DfpDec.java	round	lsbthreshold	int	1	DEF	$ == 1
35663	199	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsd
35663	199	8	DfpDec.java	round	lsd	int	0	NIL-FOR	i < $
1941	246	8	DfpDec.java	round	inc	boolean	0	DEF	$
35664	249	12	DfpDec.java	round	THIS	DfpDec	0	NIL-FOR	i < $.mant.$.length
35664	249	12	DfpDec.java	round	i	int	0	NIL-FOR	$ < mant.length
1942	255	12	DfpDec.java	round	rh	int	0	DEF	$ != 0
1943	262	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp < MIN_EXP
1944	268	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp > MAX_EXP
1945	274	8	DfpDec.java	round	discarded	int	0	RET	$ != 0
1945	274	8	DfpDec.java	round	n	int	0	RET	$ != 0
1946	288	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != x.getField().getRadixDigits()
1946	288	8	DfpDec.java	nextAfter	x	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
1947	300	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan(x)
1947	300	8	DfpDec.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
1948	304	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.equals(x)
1948	304	8	DfpDec.java	nextAfter	x	Dfp	0	RET	equals($)
1949	308	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan($.getZero())
1950	312	8	DfpDec.java	nextAfter	up	boolean	1	DEF	$
1951	316	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
1952	320	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
1952	320	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
1953	329	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	$.equals(inc)
1953	329	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
1954	335	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
1955	339	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
1955	339	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
1956	346	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.classify() != INFINITE
1956	346	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
1957	351	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero()) == false
1957	351	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	result.equals($.getZero())
1957	351	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
2157	197	8	DfpField.java	DfpField	computeConstants	boolean	1	DEF	$
35712	529	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
35712	529	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
35712	529	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
2158	532	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '1'
2158	532	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2158	532	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '1'
2158	532	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
2159	536	8	DfpField.java	split	i	int	0	DEF	buf[$] == '.'
2159	536	8	DfpField.java	split	buf	char[]	0	DEF	$[i] == '.'
2160	541	8	DfpField.java	split	THIS	DfpField	0	DEF	sig == ($.radixDigits / 2) * 4
2160	541	8	DfpField.java	split	sig	int	0	DEF	$ == (radixDigits / 2) * 4
2161	546	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2161	546	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
2161	546	8	DfpField.java	split	leading	boolean	0	DEF	$
2161	546	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
2161	546	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
35713	553	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
35713	553	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
35713	553	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
2162	555	8	DfpField.java	split	i	int	0	DEF	$ < sp
2162	555	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2162	555	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
2162	555	8	DfpField.java	split	sp	int	0	DEF	i < $
2162	555	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
2162	555	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
2163	570	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String.length() < highPrecisionDecimalDigits - 3
2163	570	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String == null
2163	570	8	DfpField.java	computeStringConstants	highPrecisionDecimalDigits	int	0	DEF	sqr2String.length() < $ - 3
35714	615	8	DfpField.java	computePi	i	int	0	NIL-FOR	$ < 20
2164	629	12	DfpField.java	computePi	ykM1	Dfp	0	DEF	yk.equals($)
2164	629	12	DfpField.java	computePi	yk	Dfp	0	DEF	$.equals(ykM1)
35715	651	8	DfpField.java	computeExp	i	int	0	NIL-FOR	$ < 10000
2165	656	12	DfpField.java	computeExp	y	Dfp	0	DEF	$.equals(py)
2165	656	12	DfpField.java	computeExp	py	Dfp	0	DEF	y.equals($)
35716	734	8	DfpField.java	computeLn	i	int	0	NIL-FOR	$ < 10000
2166	740	12	DfpField.java	computeLn	y	Dfp	0	DEF	$.equals(py)
2166	740	12	DfpField.java	computeLn	py	Dfp	0	DEF	y.equals($)
35717	54	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
35717	54	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
35717	54	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
2167	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '1'
2167	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2167	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '1'
2167	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2168	61	12	DfpMath.java	split	i	int	0	DEF	buf[$] == '.'
2168	61	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] == '.'
2169	66	12	DfpMath.java	split	sig	int	0	DEF	$ == (field.getRadixDigits() / 2) * 4
2169	66	12	DfpMath.java	split	field	DfpField	0	DEF	sig == ($.getRadixDigits() / 2) * 4
2170	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2170	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
2170	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2170	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
2170	71	12	DfpMath.java	split	leading	boolean	0	DEF	$
35718	78	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
35718	78	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
35718	78	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
2171	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
2171	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2171	80	12	DfpMath.java	split	i	int	0	DEF	$ < sp
2171	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
2171	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2171	80	12	DfpMath.java	split	sp	int	0	DEF	i < $
2172	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].equals($[1])
2172	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].classify() == Dfp.INFINITE
2173	162	8	DfpMath.java	splitPow	a	int	0	RET	$ == 0
2174	167	8	DfpMath.java	splitPow	a	int	0	DEF	$ < 0
35719	174	8	DfpMath.java	splitPow	a	int	0	NIL-DOWHILE	$ >= 1
2175	183	16	DfpMath.java	splitPow	trial	int	0	DEF	$ > a
2175	183	16	DfpMath.java	splitPow	a	int	0	DEF	trial > $
2176	198	8	DfpMath.java	splitPow	invert	boolean	0	DEF	$
2177	217	8	DfpMath.java	pow	a	int	0	RET	$ == 0
2178	222	8	DfpMath.java	pow	a	int	0	DEF	$ < 0
35720	228	8	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$ >= 1
35721	234	12	DfpMath.java	pow	trial	int	0	NIL-DOWHILE	a>$
35721	234	12	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$>trial
2179	249	8	DfpMath.java	pow	invert	boolean	0	DEF	$
2180	270	8	DfpMath.java	exp	ia	int	0	RET	$ > 2147483646
2181	275	8	DfpMath.java	exp	ia	int	0	RET	$ < -2147483646
35722	297	8	DfpMath.java	expInternal	i	int	0	NIL-FOR	$ < 90
2182	301	12	DfpMath.java	expInternal	y	Dfp	0	DEF	$.equals(py)
2182	301	12	DfpMath.java	expInternal	py	Dfp	0	DEF	y.equals($)
2183	324	8	DfpMath.java	log	a	Dfp	0	RET	$.isNaN()
2183	324	8	DfpMath.java	log	a	Dfp	0	RET	$.equals($.getZero())
2183	324	8	DfpMath.java	log	a	Dfp	0	RET	$.lessThan($.getZero())
2184	330	8	DfpMath.java	log	a	Dfp	0	RET	$.classify() == Dfp.INFINITE
35723	340	8	DfpMath.java	log	ix	int	0	NIL-WHILE	$ > 2
35724	353	8	DfpMath.java	log	spx	Dfp[]	0	NIL-WHILE	$[0].add($[1]).greaterThan(spy[0])
35724	353	8	DfpMath.java	log	spy	Dfp[]	0	NIL-WHILE	spx[0].add(spx[1]).greaterThan($[0])
35725	447	8	DfpMath.java	logInternal	i	int	0	NIL-FOR	$ < 10000
2185	453	12	DfpMath.java	logInternal	y	Dfp	0	DEF	$.equals(py)
2185	453	12	DfpMath.java	logInternal	py	Dfp	0	DEF	y.equals($)
2186	508	8	DfpMath.java	pow	x	Dfp	0	RET	$.getField().getRadixDigits() != y.getField().getRadixDigits()
2186	508	8	DfpMath.java	pow	y	Dfp	0	RET	x.getField().getRadixDigits() != $.getField().getRadixDigits()
2187	522	8	DfpMath.java	pow	zero	Dfp	0	RET	y.equals($)
2187	522	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(zero)
2188	526	8	DfpMath.java	pow	one	Dfp	0	RET	y.equals($)
2188	526	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(one)
2189	527	12	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
2190	535	8	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
2190	535	8	DfpMath.java	pow	y	Dfp	0	RET	$.isNaN()
2191	542	8	DfpMath.java	pow	zero	Dfp	0	RET	x.equals($)
2191	542	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(zero)
2192	543	12	DfpMath.java	pow	zero	Dfp	1	RET	Dfp.copysign(one, x).greaterThan($)
2192	543	12	DfpMath.java	pow	one	Dfp	1	RET	Dfp.copysign($, x).greaterThan(zero)
2192	543	12	DfpMath.java	pow	x	Dfp	1	RET	Dfp.copysign(one, $).greaterThan(zero)
2193	545	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2193	545	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2194	552	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
2194	552	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
2194	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
2194	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
2194	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
2195	554	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2195	554	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2196	561	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2196	561	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2197	570	8	DfpMath.java	pow	zero	Dfp	0	DEF	x.lessThan($)
2197	570	8	DfpMath.java	pow	x	Dfp	0	DEF	$.lessThan(zero)
2198	576	8	DfpMath.java	pow	one	Dfp	0	RET	x.greaterThan($)
2198	576	8	DfpMath.java	pow	x	Dfp	0	RET	$.greaterThan(one)
2198	576	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
2199	577	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2199	577	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2200	584	8	DfpMath.java	pow	one	Dfp	0	RET	x.lessThan($)
2200	584	8	DfpMath.java	pow	x	Dfp	0	RET	$.lessThan(one)
2200	584	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
2201	585	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2201	585	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2202	592	8	DfpMath.java	pow	one	Dfp	0	RET	x.equals($)
2202	592	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(one)
2202	592	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
2203	597	8	DfpMath.java	pow	x	Dfp	0	RET	$.classify() == Dfp.INFINITE
2204	599	12	DfpMath.java	pow	invert	boolean	1	RET	$
2205	601	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
2205	601	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
2205	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
2205	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
2205	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
2206	603	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2206	603	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2207	610	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2207	610	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2208	618	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2208	618	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2209	626	8	DfpMath.java	pow	invert	boolean	0	RET	$
2209	626	8	DfpMath.java	pow	y	Dfp	0	RET	$.rint().equals($)
2210	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.greaterThan($.newInstance(-100000000))
2210	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.lessThan($.newInstance(100000000))
2210	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.greaterThan(x.newInstance(-100000000))
2210	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.lessThan(x.newInstance(100000000))
2211	640	12	DfpMath.java	pow	v	Dfp	1	DEF	$.unequal(zero)
2211	640	12	DfpMath.java	pow	zero	Dfp	1	DEF	v.unequal($)
2212	656	8	DfpMath.java	pow	invert	boolean	0	DEF	$
2213	658	12	DfpMath.java	pow	zero	Dfp	0	DEF	y.remainder(two).equals($)
2213	658	12	DfpMath.java	pow	two	Dfp	0	DEF	y.remainder($).equals(zero)
2213	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.rint().equals($)
2213	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.remainder(two).equals(zero)
35726	681	8	DfpMath.java	sinInternal	i	int	0	NIL-FOR	$ < 90
2214	687	12	DfpMath.java	sinInternal	y	Dfp	0	DEF	$.equals(py)
2214	687	12	DfpMath.java	sinInternal	py	Dfp	0	DEF	y.equals($)
35727	713	8	DfpMath.java	cosInternal	i	int	0	NIL-FOR	$ < 90
2215	720	12	DfpMath.java	cosInternal	y	Dfp	0	DEF	$.equals(py)
2215	720	12	DfpMath.java	cosInternal	py	Dfp	0	DEF	y.equals($)
2216	744	8	DfpMath.java	sin	zero	Dfp	0	DEF	x.lessThan($)
2216	744	8	DfpMath.java	sin	x	Dfp	0	DEF	$.lessThan(zero)
2217	753	8	DfpMath.java	sin	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
2217	753	8	DfpMath.java	sin	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
2218	758	8	DfpMath.java	sin	pi	Dfp	1	DEF	x.lessThan($.divide(4))
2218	758	8	DfpMath.java	sin	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
2219	773	8	DfpMath.java	sin	neg	boolean	0	DEF	$
2220	795	8	DfpMath.java	cos	zero	Dfp	0	DEF	x.lessThan($)
2220	795	8	DfpMath.java	cos	x	Dfp	0	DEF	$.lessThan(zero)
2221	803	8	DfpMath.java	cos	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
2221	803	8	DfpMath.java	cos	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
2222	809	8	DfpMath.java	cos	pi	Dfp	1	DEF	x.lessThan($.divide(4))
2222	809	8	DfpMath.java	cos	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
2223	823	8	DfpMath.java	cos	neg	boolean	0	DEF	$
35728	849	8	DfpMath.java	atanInternal	i	int	0	NIL-FOR	$ < 90
2224	854	12	DfpMath.java	atanInternal	y	Dfp	0	DEF	$.equals(py)
2224	854	12	DfpMath.java	atanInternal	py	Dfp	0	DEF	y.equals($)
2225	889	8	DfpMath.java	atan	zero	Dfp	0	DEF	x.lessThan($)
2225	889	8	DfpMath.java	atan	x	Dfp	0	DEF	$.lessThan(zero)
2226	894	8	DfpMath.java	atan	one	Dfp	0	DEF	x.greaterThan($)
2226	894	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(one)
2227	899	8	DfpMath.java	atan	ty	Dfp	0	DEF	x.greaterThan($)
2227	899	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(ty)
2228	922	8	DfpMath.java	atan	sub	boolean	0	DEF	$
2229	926	8	DfpMath.java	atan	recp	boolean	0	DEF	$
2230	930	8	DfpMath.java	atan	neg	boolean	0	DEF	$
2231	954	8	DfpMath.java	acos	a	Dfp	0	DEF	$.lessThan($.getZero())
2232	962	8	DfpMath.java	acos	negative	boolean	0	DEF	$
35274	123	8	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	$ < n
35274	123	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	i < $
35275	125	12	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	NIL-FOR	$ < i + 1
35275	125	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	j < $ + 1
1306	126	16	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	DEF	steps[$] == 0.0
1306	126	16	DirectSearchOptimizer.java	setStartConfiguration	steps	double[]	0	DEF	$[j] == 0.0
1307	152	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	DEF	$ < 0
35276	160	8	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	$ < n + 1
35276	160	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	i < $ + 1
1308	165	12	DirectSearchOptimizer.java	setStartConfiguration	THIS	DirectSearchOptimizer	0	DimensionMismatchException	refI.$.length != n
1308	165	12	DirectSearchOptimizer.java	setStartConfiguration	refI	double[]	0	DimensionMismatchException	$.length != n
1308	165	12	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	DimensionMismatchException	refI.length != $
35277	168	12	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	NIL-FOR	$ < i
35277	168	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	j < $
35278	171	16	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	NIL-FOR	$ < n
35278	171	16	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	k < $
1309	172	20	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	DEF	refI[$] != refJ[$]
1309	172	20	DirectSearchOptimizer.java	setStartConfiguration	refJ	double[]	0	DEF	refI[k] != $[k]
1309	172	20	DirectSearchOptimizer.java	setStartConfiguration	refI	double[]	0	DEF	$[k] != refJ[k]
1310	177	16	DirectSearchOptimizer.java	setStartConfiguration	allEquals	boolean	0	DEF	$
1311	184	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	DEF	$ > 0
35279	186	16	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	NIL-FOR	$ < n
35279	186	16	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	k < $
1312	198	8	DirectSearchOptimizer.java	doOptimize	THIS	DirectSearchOptimizer	0	DEF	$.startConfiguration == null
1312	198	8	DirectSearchOptimizer.java	doOptimize	THIS	DirectSearchOptimizer	0	DEF	$.startConfiguration.$.length != startPoint.$.length
1312	198	8	DirectSearchOptimizer.java	doOptimize	startPoint	double[]	0	DEF	startConfiguration.length != $.length
1313	226	12	DirectSearchOptimizer.java	doOptimize	iteration	int	0	RET	$ > 0
35280	228	16	DirectSearchOptimizer.java	doOptimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
35280	228	16	DirectSearchOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.length
1314	231	16	DirectSearchOptimizer.java	doOptimize	converged	boolean	0	RET	$
1315	268	8	DirectSearchOptimizer.java	buildSimplex	THIS	DirectSearchOptimizer	0	DimensionMismatchException	n != $.startConfiguration.$.length
1315	268	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	DimensionMismatchException	$ != startConfiguration.length
35281	277	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ < n
35281	277	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i < $
35282	280	12	DirectSearchOptimizer.java	buildSimplex	k	int	0	NIL-FOR	$ < n
35282	280	12	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	k < $
35283	299	8	DirectSearchOptimizer.java	evaluateSimplex	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
35283	299	8	DirectSearchOptimizer.java	evaluateSimplex	i	int	0	NIL-FOR	$ < simplex.length
1316	302	12	DirectSearchOptimizer.java	evaluateSimplex	vertex	RealPointValuePair	0	DEF	Double.isNaN($.getValue())
35284	320	8	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < n
35284	320	8	DirectSearchOptimizer.java	replaceWorstPoint	n	int	0	NIL-FOR	i < $
1317	321	12	DirectSearchOptimizer.java	replaceWorstPoint	THIS	DirectSearchOptimizer	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
1317	321	12	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
1317	321	12	DirectSearchOptimizer.java	replaceWorstPoint	pointValuePair	RealPointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
1317	321	12	DirectSearchOptimizer.java	replaceWorstPoint	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
35759	103	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
35759	103	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
35760	104	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
35760	104	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
35760	104	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
2278	106	16	DividedDifferenceInterpolator.java	computeDividedDifference	denominator	double	0	DuplicateSampleAbscissaException	$ == 0.0
35582	140	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < $.mainSetDimension
35582	140	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
1766	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
1766	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
1767	171	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
1768	173	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
35547	183	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
35547	183	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
35548	206	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
35548	206	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
35581	254	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < $.mainSetDimension
35581	254	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
1828	275	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
1852	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
1852	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
35601	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
35601	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
35602	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
35602	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
35603	292	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
35603	292	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
35604	297	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
35604	297	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
1853	318	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
1854	320	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
35605	322	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
35606	331	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
35606	331	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
35607	349	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < D.$.length
35607	349	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < D.length
35608	371	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
35608	371	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1855	392	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
35609	401	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
35609	401	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
35610	410	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
35610	410	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
35611	420	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
35611	420	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
35612	444	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
35612	444	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
35613	467	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
35613	467	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
1754	122	4	DummyStepInterpolator.java	writeExternal	THIS	DummyStepInterpolator	0	DEF	$.currentDerivative != null
35532	123	8	DummyStepInterpolator.java	writeExternal	THIS	DummyStepInterpolator	0	NIL-FOR	i < $.currentDerivative.$.length
35532	123	8	DummyStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentDerivative.length
1755	141	4	DummyStepInterpolator.java	readExternal	THIS	DummyStepInterpolator	1	DEF	$.currentState == null
35533	145	8	DummyStepInterpolator.java	readExternal	THIS	DummyStepInterpolator	0	NIL-FOR	i < $.currentDerivative.$.length
35533	145	8	DummyStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < currentDerivative.length
1080	99	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	1	DEF	$.isSymmetric(matrix)
1080	99	8	EigenDecompositionImpl.java	EigenDecompositionImpl	matrix	RealMatrix	1	DEF	isSymmetric($)
35085	129	8	EigenDecompositionImpl.java	EigenDecompositionImpl	i	int	0	NIL-FOR	$<size
35085	129	8	EigenDecompositionImpl.java	EigenDecompositionImpl	size	int	0	NIL-FOR	i<$
35086	145	8	EigenDecompositionImpl.java	isSymmetric	i	int	0	NIL-FOR	$ < rows
35086	145	8	EigenDecompositionImpl.java	isSymmetric	rows	int	0	NIL-FOR	i < $
35087	146	12	EigenDecompositionImpl.java	isSymmetric	j	int	0	NIL-FOR	$ < columns
35087	146	12	EigenDecompositionImpl.java	isSymmetric	columns	int	0	NIL-FOR	j < $
1081	149	16	EigenDecompositionImpl.java	isSymmetric	mij	double	0	RET	FastMath.abs($ - mji) > (FastMath.max(FastMath.abs($), Math .abs(mji)) * eps)
1081	149	16	EigenDecompositionImpl.java	isSymmetric	mji	double	0	RET	FastMath.abs(mij - $) > (FastMath.max(FastMath.abs(mij), Math .abs($)) * eps)
1081	149	16	EigenDecompositionImpl.java	isSymmetric	eps	double	0	RET	FastMath.abs(mij - mji) > (FastMath.max(FastMath.abs(mij), Math .abs(mji)) * $)
1082	161	8	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.cachedV == null
35088	164	12	EigenDecompositionImpl.java	getV	k	int	0	NIL-FOR	$ < m
35088	164	12	EigenDecompositionImpl.java	getV	m	int	0	NIL-FOR	k < $
1083	175	8	EigenDecompositionImpl.java	getD	THIS	EigenDecompositionImpl	0	DEF	$.cachedD == null
1084	185	8	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.cachedVt == null
35089	188	12	EigenDecompositionImpl.java	getVT	k	int	0	NIL-FOR	$ < m
35089	188	12	EigenDecompositionImpl.java	getVT	m	int	0	NIL-FOR	k < $
35090	478	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n - 1
35090	478	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $ - 1
35091	487	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
35091	487	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1085	488	12	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	FastMath.abs($.realEigenvalues[i])>maxAbsoluteValue
1085	488	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$])>maxAbsoluteValue
1085	488	12	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i])>$
1086	491	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$])>maxAbsoluteValue
1086	491	12	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i])>maxAbsoluteValue
1086	491	12	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i])>$
1087	496	8	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$!=0.0
35092	497	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
35092	497	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1088	498	16	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	FastMath.abs($.realEigenvalues[i])<=MathUtils.EPSILON*maxAbsoluteValue
1088	498	16	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$])<=MathUtils.EPSILON*maxAbsoluteValue
1088	498	16	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i])<=MathUtils.EPSILON*$
1089	501	16	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$])<=MathUtils.EPSILON*maxAbsoluteValue
1089	501	16	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i])<=MathUtils.EPSILON*maxAbsoluteValue
1089	501	16	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i])<=MathUtils.EPSILON*$
35093	507	8	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
35093	507	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
35094	510	12	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-DOWHILE	$ != j
35094	510	12	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-DOWHILE	m != $
35095	511	16	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	$ < n - 1
35095	511	16	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	m < $ - 1
1090	513	20	EigenDecompositionImpl.java	findEigenVectors	delta	double	0	DEF	FastMath.abs(e[m]) + $ == $
1090	513	20	EigenDecompositionImpl.java	findEigenVectors	m	int	0	DEF	FastMath.abs(e[$]) + delta == delta
1090	513	20	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[m]) + delta == delta
1091	517	16	EigenDecompositionImpl.java	findEigenVectors	m	int	0	MaxIterationsExceededException	$ != j
1091	517	16	EigenDecompositionImpl.java	findEigenVectors	j	int	0	MaxIterationsExceededException	m != $
1092	518	20	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	MaxIterationsExceededException	its == $.maxIter
1092	518	20	EigenDecompositionImpl.java	findEigenVectors	its	int	0	MaxIterationsExceededException	$ == maxIter
1093	524	20	EigenDecompositionImpl.java	findEigenVectors	q	double	1	DEF	$ < 0.0
35096	533	20	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ >= j
35096	533	20	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	i >= $
1094	536	24	EigenDecompositionImpl.java	findEigenVectors	p	double	1	DEF	FastMath.abs($) >= FastMath.abs(q)
1094	536	24	EigenDecompositionImpl.java	findEigenVectors	q	double	1	DEF	FastMath.abs(p) >= FastMath.abs($)
1095	549	24	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	e[$ + 1] == 0.0
1095	549	24	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	$[i + 1] == 0.0
35097	559	24	EigenDecompositionImpl.java	findEigenVectors	ia	int	0	NIL-FOR	$ < n
35097	559	24	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	ia < $
1096	565	20	EigenDecompositionImpl.java	findEigenVectors	t	double	0	DEF	$ == 0.0
1096	565	20	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	$ >= j
1096	565	20	EigenDecompositionImpl.java	findEigenVectors	j	int	0	DEF	i >= $
35098	575	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
35098	575	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
35099	578	12	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
35099	578	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
1097	579	16	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	$.realEigenvalues[j] > p
1097	579	16	EigenDecompositionImpl.java	findEigenVectors	j	int	0	DEF	realEigenvalues[$] > p
1097	579	16	EigenDecompositionImpl.java	findEigenVectors	p	double	0	DEF	realEigenvalues[j] > $
1098	584	12	EigenDecompositionImpl.java	findEigenVectors	k	int	0	DEF	$ != i
1098	584	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	k != $
35100	587	16	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
35100	587	16	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
35101	597	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
35101	597	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1099	598	12	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	FastMath.abs($.realEigenvalues[i])>maxAbsoluteValue
1099	598	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$])>maxAbsoluteValue
1099	598	12	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i])>$
1100	603	8	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$!=0.0
35102	604	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
35102	604	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1101	605	16	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	FastMath.abs($.realEigenvalues[i])<MathUtils.EPSILON*maxAbsoluteValue
1101	605	16	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$])<MathUtils.EPSILON*maxAbsoluteValue
1101	605	16	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i])<MathUtils.EPSILON*$
35103	612	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
35103	612	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
35104	613	12	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
35104	613	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
35423	82	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$<oldChromosomes.size()
35423	82	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i<$.size()
1639	97	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	IllegalArgumentException	$ < 0
1639	97	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	IllegalArgumentException	$ > 1
1841	205	4	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1841	205	4	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1842	213	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
1842	213	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
35592	233	4	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
35593	238	6	EmbeddedRungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1843	240	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1843	240	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1844	245	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1845	247	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance == null
35594	248	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
35594	248	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
35594	248	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
35595	252	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
35595	252	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
35595	252	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
35596	264	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
35596	264	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
35597	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
35597	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
35597	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
35598	268	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
35598	268	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
35599	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
35599	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
35599	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
35600	281	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
35600	281	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1846	289	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1847	293	10	EmbeddedRungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1847	293	10	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1848	295	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	FastMath.abs(dt) <= FastMath.ulp($.stepStart)
1848	295	14	EmbeddedRungeKuttaIntegrator.java	integrate	dt	double	1	DEF	FastMath.abs($) <= FastMath.ulp(stepStart)
1849	338	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1850	343	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1850	343	6	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1850	343	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1850	343	6	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1851	349	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1575	142	12	EmpiricalDistributionImpl.java	load	THIS	EmpiricalDistributionImpl	0	DEF	$.sampleStats.getN() == 0
1576	329	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	DEF	$.binStats.isEmpty()
35391	332	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
35391	332	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
35392	346	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount-1
35392	346	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
1577	373	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	DEF	$.loaded
35393	381	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
35393	381	8	EmpiricalDistributionImpl.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
1578	382	11	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	RET	x <= $.upperBounds[i]
1578	382	11	EmpiricalDistributionImpl.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
1578	382	11	EmpiricalDistributionImpl.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
1579	384	15	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
1580	385	19	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
35394	445	8	EmpiricalDistributionImpl.java	getUpperBounds	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount - 1
35394	445	8	EmpiricalDistributionImpl.java	getUpperBounds	i	int	0	NIL-FOR	$ < binCount - 1
1708	52	8	Erf.java	erf	x	double	0	DEF	$ < 0
35338	64	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
35338	64	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
35338	64	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
35339	68	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
35339	68	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
35339	68	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
1490	77	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
1491	81	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point.$.length != otherPoint.$.length
1491	81	8	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point.length != $.length
35340	84	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < $.point.$.length
35340	84	8	EuclideanIntegerPoint.java	equals	i	int	0	NIL-FOR	$ < point.length
1492	85	12	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point[i] != otherPoint[i]
1492	85	12	EuclideanIntegerPoint.java	equals	i	int	0	RET	point[$] != otherPoint[$]
1492	85	12	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point[i] != $[i]
35341	110	8	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < coordinates.$.length
35341	110	8	EuclideanIntegerPoint.java	toString	i	int	0	NIL-FOR	$ < coordinates.length
35341	110	8	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	NIL-FOR	i < $.length
1493	112	12	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	DEF	i < coordinates.$.length - 1
1493	112	12	EuclideanIntegerPoint.java	toString	i	int	0	DEF	$ < coordinates.length - 1
1493	112	12	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	DEF	i < $.length - 1
35634	84	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
35634	84	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
35654	181	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
35654	181	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
1901	189	16	EventState.java	evaluateStep	THIS	EventState	1	FunctionEvaluationException:RET	$.g0Positive ^ (gb >= 0)
1901	189	16	EventState.java	evaluateStep	gb	double	1	FunctionEvaluationException:RET	g0Positive ^ ($ >= 0)
1902	192	20	EventState.java	evaluateStep	gb	double	0	DEF	ga * $ > 0
1902	192	20	EventState.java	evaluateStep	ga	double	0	DEF	$ * gb > 0
35655	201	24	EventState.java	evaluateStep	k	int	0	NIL-FOR	$ < 4
35655	201	24	EventState.java	evaluateStep	gb	double	0	NIL-FOR	ga * $ > 0
35655	201	24	EventState.java	evaluateStep	ga	double	0	NIL-FOR	$ * gb > 0
1903	206	24	EventState.java	evaluateStep	gb	double	0	DEF	ga * $ > 0
1903	206	24	EventState.java	evaluateStep	ga	double	0	DEF	$ * gb > 0
1904	229	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - ta) <= $.convergence
1904	229	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - $.previousEventTime) <= $.convergence
1904	229	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - ta) <= convergence
1904	229	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - previousEventTime) <= convergence
1904	229	20	EventState.java	evaluateStep	ta	double	1	DEF	FastMath.abs(root - $) <= convergence
1905	234	27	EventState.java	evaluateStep	THIS	EventState	0	RET	Double.isNaN($.previousEventTime)
1905	234	27	EventState.java	evaluateStep	THIS	EventState	0	RET	FastMath.abs($.previousEventTime - root) > $.convergence
1905	234	27	EventState.java	evaluateStep	root	double	0	RET	FastMath.abs(previousEventTime - $) > convergence
1906	237	24	EventState.java	evaluateStep	THIS	EventState	0	RET	FastMath.abs(t1 - $.pendingEventTime) <= $.convergence
1906	237	24	EventState.java	evaluateStep	THIS	EventState	0	RET	$.pendingEvent
1906	237	24	EventState.java	evaluateStep	t1	double	0	RET	FastMath.abs($ - pendingEventTime) <= convergence
1907	265	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ instanceof DerivativeException
1907	265	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ != null
1908	267	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ instanceof EventException
1908	267	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ != null
1909	298	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
1910	329	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
1911	333	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.RESET_STATE
727	86	8	ExponentialDistributionImpl.java	setMeanInternal	newMean	double	0	DEF	$ <= 0.0
728	121	8	ExponentialDistributionImpl.java	density	x	double	0	RET	$ < 0
729	144	8	ExponentialDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
730	168	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ < 0.0
730	168	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ > 1.0
731	171	15	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
732	223	8	ExponentialDistributionImpl.java	getDomainUpperBound	p	double	1	RET	$ < .5
733	245	8	ExponentialDistributionImpl.java	getInitialDomain	p	double	1	RET	$ < .5
675	117	8	FDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
676	146	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
677	149	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
678	195	8	FDistributionImpl.java	getInitialDomain	d	double	0	DEF	$ > 2.0
679	221	8	FDistributionImpl.java	setNumeratorDegreesOfFreedomInternal	degreesOfFreedom	double	0	DEF	$ <= 0.0
680	255	8	FDistributionImpl.java	setDenominatorDegreesOfFreedomInternal	degreesOfFreedom	double	0	DEF	$ <= 0.0
1728	226	8	FastCosineTransformer.java	fct	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
1729	231	8	FastCosineTransformer.java	fct	n	int	0	RET	$ == 1
35504	242	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
35504	242	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
35505	256	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
35505	256	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
1734	306	8	FastFourierTransformer.java	fft	THIS	FastFourierTransformer	0	RET	f.$.length == 1
1734	306	8	FastFourierTransformer.java	fft	f	double	0	RET	$.length == 1
35514	315	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
35515	325	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
1735	354	8	FastFourierTransformer.java	fft	n	int	0	RET	$ == 1
1736	358	8	FastFourierTransformer.java	fft	n	int	0	RET	$ == 2
35516	366	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < n
35516	366	8	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	i < $
35517	369	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	ii >= $
35517	369	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	$ > 0
35517	369	12	FastFourierTransformer.java	fft	ii	int	0	NIL-WHILE	$ >= k
35518	376	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < n
35518	376	8	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	i < $
35519	391	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < n
35519	391	8	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	i < $
35520	393	12	FastFourierTransformer.java	fft	j	int	0	NIL-FOR	$ < n
35520	393	12	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	j < $
35521	394	16	FastFourierTransformer.java	fft	k	int	0	NIL-FOR	$ < i
35521	394	16	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	k < $
1737	435	8	FastFourierTransformer.java	sample	n	int	0	DEF	$ <= 0
35522	444	8	FastFourierTransformer.java	sample	i	int	0	NIL-FOR	$ < n
35522	444	8	FastFourierTransformer.java	sample	n	int	0	NIL-FOR	i < $
35523	459	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
35523	459	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
35523	459	8	FastFourierTransformer.java	scaleArray	f	double	0	NIL-FOR	i < $.length
35524	474	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
35524	474	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
35524	474	8	FastFourierTransformer.java	scaleArray	f	Complex	0	NIL-FOR	i < $.length
1738	497	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(d.$.length)
1738	497	8	FastFourierTransformer.java	verifyDataSet	d	double	0	DEF	isPowerOf2($.length)
1739	510	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(o.$.length)
1739	510	8	FastFourierTransformer.java	verifyDataSet	o	Object	0	DEF	isPowerOf2($.length)
1740	526	8	FastFourierTransformer.java	verifyInterval	lower	double	0	DEF	$ >= upper
1740	526	8	FastFourierTransformer.java	verifyInterval	upper	double	0	DEF	lower >= $
35525	553	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
35525	553	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
35525	553	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
1741	573	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
1741	573	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
1741	573	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
35526	575	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
35526	575	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
35526	575	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1742	581	12	FastFourierTransformer.java	mdfft	forward	boolean	1	DEF	$
35527	586	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
35527	586	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
35527	586	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1743	593	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
1743	593	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
1743	593	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
35528	599	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
35528	599	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
35528	599	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
35528	599	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
1730	162	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
35506	174	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
35506	174	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
35507	182	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
35507	182	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
35508	188	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
35508	188	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
1731	213	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
35509	225	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
35509	225	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
35510	233	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
35510	233	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
35511	239	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
35511	239	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
72	237	8	FastMath.java	sinh	a	double	0	DEF	$ < 0
73	243	8	FastMath.java	sinh	a	double	1	DEF	$ > 0.3
74	247	12	FastMath.java	sinh	a	double	1	DEF	$ > 0.05
75	265	8	FastMath.java	tanh	a	double	0	DEF	$ < 0
76	271	8	FastMath.java	tanh	a	double	1	DEF	$ > 0.074
77	276	12	FastMath.java	tanh	a	double	1	DEF	$ > 0.016
78	302	8	FastMath.java	asinh	a	double	0	DEF	$ < 0
79	308	8	FastMath.java	asinh	a	double	1	DEF	$ > 0.167
80	312	12	FastMath.java	asinh	a	double	1	DEF	$ > 0.097
81	314	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.036
82	316	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.0036
83	334	8	FastMath.java	atanh	a	double	0	DEF	$ < 0
84	340	8	FastMath.java	atanh	a	double	1	DEF	$ > 0.15
85	344	12	FastMath.java	atanh	a	double	1	DEF	$ > 0.087
86	346	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.031
87	348	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.003
88	423	8	FastMath.java	exp	x	double	1	RET	$ < 0.0
89	426	12	FastMath.java	exp	intVal	int	0	RET	$ > 746
90	427	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
91	434	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
92	437	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
93	444	12	FastMath.java	exp	intVal	int	0	RET	$ == 709
94	447	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
95	463	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
96	464	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
97	516	8	FastMath.java	exp	extra	double	1	DEF	$ != 0.0
98	522	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
99	536	8	FastMath.java	expm1	x	double	0	RET	$ != $
99	536	8	FastMath.java	expm1	x	double	0	RET	$ == 0.0
100	540	8	FastMath.java	expm1	x	double	0	RET	$ >= 1.0
100	540	8	FastMath.java	expm1	x	double	0	RET	$ <= -1.0
101	545	12	FastMath.java	expm1	x	double	1	RET	$ > 0.0
102	560	8	FastMath.java	expm1	x	double	0	DEF	$ < 0.0
103	636	8	FastMath.java	expm1	negative	boolean	0	DEF	$
34259	687	8	FastMath.java	slowexp	i	int	0	NIL-FOR	$ >= 0
104	700	8	FastMath.java	slowexp	result	double	0	DEF	$ != null
105	714	8	FastMath.java	split	d	double	1	DEF	$ > -8e298
105	714	8	FastMath.java	split	d	double	1	DEF	$ < 8e298
106	733	8	FastMath.java	resplit	c	double	1	DEF	$ > -8e298
106	733	8	FastMath.java	resplit	c	double	1	DEF	$ < 8e298
107	791	8	FastMath.java	splitReciprocal	in	double	0	DEF	$[0] == 0.0
108	799	8	FastMath.java	splitReciprocal	result	double	0	DEF	$[1] != $[1]
34260	806	8	FastMath.java	splitReciprocal	i	int	0	NIL-FOR	$ < 2
34261	894	8	FastMath.java	expint	p	int	0	NIL-WHILE	$ > 0
109	895	12	FastMath.java	expint	p	int	0	DEF	($ & 1) != 0
110	906	8	FastMath.java	expint	result	double	0	DEF	$ != null
111	937	8	FastMath.java	log	bits	long	0	RET	($ & 0x8000000000000000L) != 0
111	937	8	FastMath.java	log	x	double	0	RET	$ != $
112	938	12	FastMath.java	log	x	double	0	RET	$ != 0.0
113	939	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
114	948	8	FastMath.java	log	x	double	0	RET	$ == Double.POSITIVE_INFINITY
115	949	12	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
116	959	8	FastMath.java	log	bits	long	0	RET	($ & 0x7ff0000000000000L) == 0
117	961	12	FastMath.java	log	x	double	0	RET	$ == 0
118	963	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
34262	972	12	FastMath.java	log	bits	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
119	979	8	FastMath.java	log	exp	int	0	RET	$ == -1
119	979	8	FastMath.java	log	exp	int	0	RET	$ == 0
120	980	12	FastMath.java	log	x	double	0	RET	$ < 1.01
120	980	12	FastMath.java	log	x	double	0	RET	$ > 0.99
120	980	12	FastMath.java	log	hiPrec	double[]	0	RET	$ == null
34263	996	16	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
121	1043	8	FastMath.java	log	hiPrec	double[]	1	DEF	$ != null
34264	1061	12	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
122	1144	8	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
123	1160	8	FastMath.java	log1p	x	double	0	RET	$ == -1
124	1164	8	FastMath.java	log1p	x	double	0	RET	$ > 0
124	1164	8	FastMath.java	log1p	x	double	0	RET	1/$ == 0
125	1168	8	FastMath.java	log1p	x	double	0	RET	$>1e-6
125	1168	8	FastMath.java	log1p	x	double	0	RET	$<-1e-6
126	1220	8	FastMath.java	pow	y	double	0	RET	$ == 0.0
127	1224	8	FastMath.java	pow	x	double	0	RET	$ != $
128	1229	8	FastMath.java	pow	x	double	0	RET	$ == 0
129	1231	12	FastMath.java	pow	bits	long	0	RET	($ & 0x8000000000000000L) != 0
130	1235	16	FastMath.java	pow	yi	long	0	RET	y == $
130	1235	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
130	1235	16	FastMath.java	pow	y	double	0	RET	$ < 0
130	1235	16	FastMath.java	pow	y	double	0	RET	$ == yi
131	1239	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
131	1239	16	FastMath.java	pow	yi	long	0	RET	y == $
131	1239	16	FastMath.java	pow	y	double	0	RET	$ == yi
131	1239	16	FastMath.java	pow	y	double	0	RET	$ < 0
132	1243	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
132	1243	16	FastMath.java	pow	yi	long	0	RET	y == $
132	1243	16	FastMath.java	pow	y	double	0	RET	$ == yi
132	1243	16	FastMath.java	pow	y	double	0	RET	$ > 0
133	1248	12	FastMath.java	pow	y	double	0	RET	$ < 0
134	1251	12	FastMath.java	pow	y	double	0	RET	$ > 0
135	1258	8	FastMath.java	pow	x	double	0	RET	$ == Double.POSITIVE_INFINITY
136	1259	12	FastMath.java	pow	y	double	0	RET	$ != $
137	1262	12	FastMath.java	pow	y	double	1	RET	$ < 0.0
138	1269	8	FastMath.java	pow	y	double	0	RET	$ == Double.POSITIVE_INFINITY
139	1270	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
140	1273	12	FastMath.java	pow	x	double	1	RET	$ * $ > 1.0
141	1280	8	FastMath.java	pow	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
142	1281	12	FastMath.java	pow	y	double	0	RET	$ != $
143	1285	12	FastMath.java	pow	y	double	0	RET	$ < 0
144	1287	16	FastMath.java	pow	yi	long	0	RET	y == $
144	1287	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
144	1287	16	FastMath.java	pow	y	double	0	RET	$ == yi
145	1294	12	FastMath.java	pow	y	double	0	RET	$ > 0
146	1296	16	FastMath.java	pow	yi	long	0	RET	y == $
146	1296	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
146	1296	16	FastMath.java	pow	y	double	0	RET	$ == yi
147	1304	8	FastMath.java	pow	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
148	1306	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
149	1310	12	FastMath.java	pow	x	double	1	RET	$ * $ < 1.0
150	1318	8	FastMath.java	pow	x	double	0	RET	$ < 0
151	1320	12	FastMath.java	pow	y	double	0	RET	$ >= 4503599627370496.0
151	1320	12	FastMath.java	pow	y	double	0	RET	$ <= -4503599627370496.0
152	1324	12	FastMath.java	pow	y	double	1	RET	$ == (long) $
153	1335	8	FastMath.java	pow	y	double	1	DEF	$ < 8e298
153	1335	8	FastMath.java	pow	y	double	1	DEF	$ > -8e298
34265	1423	8	FastMath.java	slowLog	i	int	0	NIL-FOR	$ >= 0
34266	1453	8	FastMath.java	slowSin	i	int	0	NIL-FOR	$ >= 0
154	1457	12	FastMath.java	slowSin	i	int	0	DEF	($ & 1) == 0
155	1464	12	FastMath.java	slowSin	i	int	0	DEF	($ & 2) != 0
156	1473	8	FastMath.java	slowSin	result	double	0	DEF	$ != null
34267	1496	8	FastMath.java	slowCos	i	int	0	NIL-FOR	$ >= 0
157	1500	12	FastMath.java	slowCos	i	int	0	DEF	($ & 1) != 0
158	1507	12	FastMath.java	slowCos	i	int	0	DEF	($ & 2) != 0
159	1516	8	FastMath.java	slowCos	result	double	0	DEF	$ != null
34268	1530	8	FastMath.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 7
34269	1543	8	FastMath.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 14
160	1550	12	FastMath.java	buildSinCosTables	i	int	1	DEF	($ & 1) == 0
34270	1599	8	FastMath.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 14
161	1769	8	FastMath.java	sinQ	xb	double	0	DEF	$ != 0.0
162	1899	8	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
163	1932	8	FastMath.java	tanQ	xb	double	0	DEF	$ != 0.0
164	1936	12	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
165	1978	8	FastMath.java	reducePayneHanek	shift	int	1	DEF	$ != 0
166	2009	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
166	2009	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
166	2009	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
166	2009	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
166	2009	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
167	2023	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
167	2023	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
167	2023	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
167	2023	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
167	2023	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
168	2043	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
168	2043	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
168	2043	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
168	2043	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
168	2043	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
169	2095	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
169	2095	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
169	2095	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
169	2095	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
169	2095	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
170	2109	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
170	2109	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
170	2109	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
170	2109	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
170	2109	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
171	2129	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
171	2129	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
171	2129	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
171	2129	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
171	2129	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
172	2151	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
172	2151	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
172	2151	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
172	2151	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
172	2151	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
173	2182	8	FastMath.java	sin	x	double	0	DEF	$ < 0
174	2188	8	FastMath.java	sin	xa	double	0	RET	$ == 0.0
175	2190	12	FastMath.java	sin	bits	long	0	RET	$ < 0
176	2196	8	FastMath.java	sin	xa	double	0	RET	$ != $
176	2196	8	FastMath.java	sin	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
177	2201	8	FastMath.java	sin	xa	double	1	DEF	$ > 3294198.0
178	2210	15	FastMath.java	sin	xa	double	0	DEF	$ > 1.5707963267948966
179	2235	16	FastMath.java	sin	remA	double	0	DEF	$ > 0.0
180	2248	8	FastMath.java	sin	negative	boolean	0	DEF	$
181	2276	8	FastMath.java	cos	x	double	0	DEF	$ < 0
182	2280	8	FastMath.java	cos	xa	double	0	RET	$ != $
182	2280	8	FastMath.java	cos	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
183	2286	8	FastMath.java	cos	xa	double	1	DEF	$ > 3294198.0
184	2295	15	FastMath.java	cos	xa	double	0	DEF	$ > 1.5707963267948966
185	2320	16	FastMath.java	cos	remA	double	0	DEF	$ > 0.0
186	2361	8	FastMath.java	tan	x	double	0	DEF	$ < 0
187	2367	8	FastMath.java	tan	xa	double	0	RET	$ == 0.0
188	2369	12	FastMath.java	tan	bits	long	0	RET	$ < 0
189	2375	8	FastMath.java	tan	xa	double	0	RET	$ != $
189	2375	8	FastMath.java	tan	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
190	2381	8	FastMath.java	tan	xa	double	1	DEF	$ > 3294198.0
191	2390	15	FastMath.java	tan	xa	double	0	DEF	$ > 1.5707963267948966
192	2415	16	FastMath.java	tan	remA	double	0	DEF	$ > 0.0
193	2428	8	FastMath.java	tan	xa	double	0	DEF	$ > 1.5
194	2444	8	FastMath.java	tan	quadrant	int	1	DEF	($ & 1) == 0
195	2450	8	FastMath.java	tan	negative	boolean	0	DEF	$
196	2476	8	FastMath.java	atan	xa	double	0	DEF	$ < 0
197	2483	8	FastMath.java	atan	xa	double	0	RET	$ > 1.633123935319537E16
198	2488	8	FastMath.java	atan	xa	double	1	DEF	$ < 1.0
199	2510	8	FastMath.java	atan	idx	int	1	DEF	$ == 0
200	2591	8	FastMath.java	atan	leftPlane	boolean	0	DEF	$
201	2605	8	FastMath.java	atan	negate	boolean	0	DEF	$ ^ leftPlane
201	2605	8	FastMath.java	atan	leftPlane	boolean	0	DEF	negate ^ $
202	2619	8	FastMath.java	atan2	y	double	0	RET	$ != $
202	2619	8	FastMath.java	atan2	x	double	0	RET	$ !=$
203	2623	8	FastMath.java	atan2	y	double	0	RET	$ == 0.0
204	2628	12	FastMath.java	atan2	invx	double	0	RET	$ == 0.0
205	2629	16	FastMath.java	atan2	x	double	1	RET	$ > 0
206	2636	12	FastMath.java	atan2	result	double	0	RET	$ != $
207	2640	12	FastMath.java	atan2	invx	double	1	RET	$ < 0.0
207	2640	12	FastMath.java	atan2	x	double	1	RET	$ < 0.0
208	2641	16	FastMath.java	atan2	invy	double	1	RET	$ < 0.0
208	2641	16	FastMath.java	atan2	y	double	1	RET	$ < 0.0
209	2651	8	FastMath.java	atan2	y	double	0	RET	$ == Double.POSITIVE_INFINITY
210	2652	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
211	2656	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
212	2663	8	FastMath.java	atan2	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
213	2664	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
214	2668	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
215	2675	8	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
216	2676	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
216	2676	12	FastMath.java	atan2	y	double	0	RET	1/$ > 0.0
217	2680	12	FastMath.java	atan2	y	double	0	RET	1/$ < 0.0
217	2680	12	FastMath.java	atan2	y	double	0	RET	$ < 0.0
218	2685	8	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
219	2687	12	FastMath.java	atan2	y	double	0	RET	1/$ > 0.0
219	2687	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
220	2691	12	FastMath.java	atan2	y	double	0	RET	1/$ < 0.0
220	2691	12	FastMath.java	atan2	y	double	0	RET	$ < 0.0
221	2696	8	FastMath.java	atan2	x	double	0	RET	$ == 0
222	2697	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
222	2697	12	FastMath.java	atan2	y	double	0	RET	1/$ > 0.0
223	2701	12	FastMath.java	atan2	y	double	0	RET	$ < 0.0
223	2701	12	FastMath.java	atan2	y	double	0	RET	1/$ < 0.0
224	2706	8	FastMath.java	atan2	x	double	0	DEF	$ > 8e298
224	2706	8	FastMath.java	atan2	x	double	0	DEF	$ < -8e298
225	2739	6	FastMath.java	asin	x	double	0	RET	$ != $
226	2743	6	FastMath.java	asin	x	double	0	RET	$ < -1.0
226	2743	6	FastMath.java	asin	x	double	0	RET	$ > 1.0
227	2747	6	FastMath.java	asin	x	double	0	RET	$ == 1.0
228	2751	6	FastMath.java	asin	x	double	0	RET	$ == -1.0
229	2811	6	FastMath.java	acos	x	double	0	RET	$ != $
230	2815	6	FastMath.java	acos	x	double	0	RET	$ < -1.0
230	2815	6	FastMath.java	acos	x	double	0	RET	$ > 1.0
231	2819	6	FastMath.java	acos	x	double	0	RET	$ == -1.0
232	2823	6	FastMath.java	acos	x	double	0	RET	$ == 1.0
233	2827	6	FastMath.java	acos	x	double	0	RET	$ == 0
234	2893	6	FastMath.java	cbrt	exponent	int	0	RET	$ == -1023
235	2894	10	FastMath.java	cbrt	x	double	0	RET	$ == 0
236	2905	6	FastMath.java	cbrt	exponent	int	0	RET	$ == 1024
237	2960	6	FastMath.java	cbrt	subnormal	boolean	0	DEF	$
238	3066	8	FastMath.java	nextAfter	d	double	1	RET	Double.isInfinite($)
238	3066	8	FastMath.java	nextAfter	d	double	1	RET	Double.isNaN($)
239	3068	15	FastMath.java	nextAfter	d	double	0	RET	$ == 0
240	3080	8	FastMath.java	nextAfter	d	double	1	RET	$ * (direction - $) >= 0
240	3080	8	FastMath.java	nextAfter	direction	double	1	RET	d * ($ - d) >= 0
241	3082	12	FastMath.java	nextAfter	mantissa	long	1	RET	$ == 0x000fffffffffffffL
242	3091	12	FastMath.java	nextAfter	mantissa	long	1	RET	$ == 0L
243	3110	8	FastMath.java	floor	x	double	0	RET	$ != $
244	3114	8	FastMath.java	floor	x	double	0	RET	$ <= -4503599627370496.0
244	3114	8	FastMath.java	floor	x	double	0	RET	$ >= 4503599627370496.0
245	3119	8	FastMath.java	floor	y	long	0	DEF	$ != x
245	3119	8	FastMath.java	floor	x	double	0	DEF	$ < 0
245	3119	8	FastMath.java	floor	x	double	0	DEF	y != $
246	3123	8	FastMath.java	floor	y	long	0	RET	$ == 0
247	3137	8	FastMath.java	ceil	x	double	0	RET	$ != $
248	3142	8	FastMath.java	ceil	y	double	0	RET	$ == x
248	3142	8	FastMath.java	ceil	x	double	0	RET	y == $
249	3148	8	FastMath.java	ceil	y	double	0	RET	$ == 0
250	3163	8	FastMath.java	rint	d	double	0	RET	$ > 0.5
251	3166	8	FastMath.java	rint	d	double	0	RET	$ < 0.5
1732	220	8	FastSineTransformer.java	fst	f	double	0	DEF	$[0] != 0.0
1733	226	8	FastSineTransformer.java	fst	n	int	0	RET	$ == 1
35512	235	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
35512	235	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
35513	247	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
35513	247	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
794	75	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
34520	88	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
34520	88	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
34521	95	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	$ < m
34521	95	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	col < $
34522	100	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < col
34522	100	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	row < $
34523	103	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < row
34523	103	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	i < $
34524	111	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
34524	111	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
34525	114	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < col
34525	114	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	i < $
795	119	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	THIS	FieldLUDecompositionImpl	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
795	119	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
795	119	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
796	126	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	RET	$ >= m
796	126	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	RET	nonZero >= $
797	132	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	DEF	$ != col
797	132	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	DEF	nonZero != $
34526	134	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < m
34526	134	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	i < $
34527	147	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
34527	147	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
798	157	8	FieldLUDecompositionImpl.java	getL	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
798	157	8	FieldLUDecompositionImpl.java	getL	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedL == null
34528	160	12	FieldLUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
34528	160	12	FieldLUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
34529	162	16	FieldLUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
34529	162	16	FieldLUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
799	173	8	FieldLUDecompositionImpl.java	getU	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
799	173	8	FieldLUDecompositionImpl.java	getU	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedU == null
34530	176	12	FieldLUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
34530	176	12	FieldLUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
34531	178	16	FieldLUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
34531	178	16	FieldLUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
800	188	8	FieldLUDecompositionImpl.java	getP	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
800	188	8	FieldLUDecompositionImpl.java	getP	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedP == null
34532	191	12	FieldLUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
34532	191	12	FieldLUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
801	205	8	FieldLUDecompositionImpl.java	getDeterminant	THIS	FieldLUDecompositionImpl	1	RET	$.singular
34533	210	12	FieldLUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
34533	210	12	FieldLUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
1387	99	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
1931	125	12	FirstOrderIntegratorWithJacobians.java	getStepHandlers	THIS	FirstOrderIntegratorWithJacobians	0	DEF	$.handler instanceof StepHandlerWrapper
1932	170	12	FirstOrderIntegratorWithJacobians.java	getEventHandlers	THIS	FirstOrderIntegratorWithJacobians	0	DEF	$.handler instanceof EventHandlerWrapper
1933	223	8	FirstOrderIntegratorWithJacobians.java	integrate	k	int	0	DEF	$ != 0
35658	238	8	FirstOrderIntegratorWithJacobians.java	integrate	i	int	0	NIL-FOR	$ < n
35658	238	8	FirstOrderIntegratorWithJacobians.java	integrate	n	int	0	NIL-FOR	i < $
35659	275	8	FirstOrderIntegratorWithJacobians.java	dispatchCompoundState	i	int	0	NIL-FOR	$ < n
35659	275	8	FirstOrderIntegratorWithJacobians.java	dispatchCompoundState	n	int	0	NIL-FOR	i < $
35660	280	8	FirstOrderIntegratorWithJacobians.java	dispatchCompoundState	i	int	0	NIL-FOR	$ < n
35660	280	8	FirstOrderIntegratorWithJacobians.java	dispatchCompoundState	n	int	0	NIL-FOR	i < $
1934	350	8	FirstOrderIntegratorWithJacobians.java	checkDimension	arrayDimension	int	0	DEF	$ != expected
1934	350	8	FirstOrderIntegratorWithJacobians.java	checkDimension	expected	int	0	DEF	arrayDimension != $
1654	42	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	IllegalArgumentException	$ <= 0
1655	56	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
1365	85	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
584	181	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	a0 > $
584	181	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	$ > overflow
585	187	8	Fraction.java	Fraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
585	187	8	Fraction.java	Fraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
585	187	8	Fraction.java	Fraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
34314	203	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
586	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	p2 > $
586	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	q2 > $
586	209	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	$ > overflow
586	209	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	$ > overflow
587	214	12	Fraction.java	Fraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
587	214	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
587	214	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
587	214	12	Fraction.java	Fraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
587	214	12	Fraction.java	Fraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
587	214	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
587	214	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
588	226	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
588	226	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
589	230	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
589	230	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
590	257	8	Fraction.java	Fraction	den	int	0	DEF	$ == 0
591	261	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
592	262	12	Fraction.java	Fraction	num	int	0	DEF	$ == Integer.MIN_VALUE
592	262	12	Fraction.java	Fraction	den	int	0	DEF	$ == Integer.MIN_VALUE
593	271	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
594	277	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
595	291	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
596	332	8	Fraction.java	equals	THIS	Fraction	0	RET	$ == other
596	332	8	Fraction.java	equals	other	Object	0	RET	this == $
597	335	8	Fraction.java	equals	other	Object	0	RET	$ instanceof Fraction
598	405	8	Fraction.java	negate	THIS	Fraction	0	DEF	$.numerator==Integer.MIN_VALUE
599	477	8	Fraction.java	addSub	fraction	Fraction	0	NullArgumentException	$ == null
600	481	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
601	484	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
601	484	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
602	490	8	Fraction.java	addSub	d1	int	0	RET	$==1
603	514	8	Fraction.java	addSub	w	BigInteger	0	DEF	$.bitLength() > 31
604	534	8	Fraction.java	multiply	fraction	Fraction	0	NullArgumentException	$ == null
605	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
605	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
605	537	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
606	569	8	Fraction.java	divide	fraction	Fraction	0	NullArgumentException	$ == null
607	572	8	Fraction.java	divide	THIS	Fraction	0	DEF	fraction.$.numerator == 0
607	572	8	Fraction.java	divide	fraction	Fraction	0	DEF	$.numerator == 0
608	601	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ == 0
609	605	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
610	609	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
610	609	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
611	612	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ < 0
612	613	12	Fraction.java	getReducedFraction	numerator	int	0	DEF	$==Integer.MIN_VALUE
612	613	12	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
613	640	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
614	642	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
568	176	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
569	178	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
570	206	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
571	230	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
572	263	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
35366	86	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
1514	114	8	Frequency.java	addValue	v	Object	1	DEF	$ instanceof Comparable<?>
1515	135	8	Frequency.java	addValue	v	Comparable<?>	0	DEF	$ instanceof Integer
1516	140	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
35367	219	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
1517	246	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
1518	252	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
1519	319	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
1520	383	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
1521	386	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
1522	391	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
1523	398	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
1524	405	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
1524	405	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
1524	405	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
1525	409	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
1525	409	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
1525	409	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
35368	414	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
1526	416	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
1526	416	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
1526	416	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
1527	494	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
1528	580	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
1528	580	8	Frequency.java	equals	obj	Object	0	RET	this == $
1529	582	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
1530	585	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
1531	586	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
1531	586	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
1532	588	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
1532	588	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
1537	80	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
1712	98	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
1712	98	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
35502	104	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ > 0
1713	166	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
1713	166	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
1713	166	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
1713	166	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
1714	168	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
1715	170	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x >= $ + 1
1715	170	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ >= a + 1
35503	179	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
35503	179	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	FastMath.abs($/sum) > epsilon
35503	179	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	FastMath.abs(an/$) > epsilon
35503	179	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	$ < Double.POSITIVE_INFINITY
35503	179	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	FastMath.abs(an/sum) > $
35503	179	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
1716	187	12	Gamma.java	regularizedGammaP	n	double	1	MaxIterationsExceededException	$ >= maxIterations
1716	187	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxIterationsExceededException	n >= $
1717	189	19	Gamma.java	regularizedGammaP	sum	double	1	DEF	Double.isInfinite($)
1718	243	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
1718	243	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
1718	243	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
1718	243	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
1719	245	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
1720	247	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $ + 1.0
1720	247	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a + 1.0
1721	295	8	Gamma.java	digamma	x	double	0	RET	$ > 0
1721	295	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
1722	301	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
1723	324	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
1723	324	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
1724	328	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
630	97	8	GammaDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
631	122	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
632	125	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
633	148	8	GammaDistributionImpl.java	setAlphaInternal	newAlpha	double	0	DEF	$ <= 0.0
634	181	8	GammaDistributionImpl.java	setBetaInternal	newBeta	double	0	DEF	$ <= 0.0
635	205	8	GammaDistributionImpl.java	density	x	double	0	RET	$ < 0
636	252	8	GammaDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
637	278	8	GammaDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
35437	174	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	$.getCostEvaluations() < 2
35437	174	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	FastMath.abs(previous - $.cost) > ($.cost * $.steadyStateThreshold)
35437	174	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	FastMath.abs($.cost) > $.convergence
35437	174	8	GaussNewtonEstimator.java	estimate	previous	double	0	NIL-DOWHILE	FastMath.abs($ - cost) > (cost * steadyStateThreshold)
35438	180	12	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.measurements.$.length
35438	180	12	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < measurements.length
1671	181	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	DEF	$.measurements [i].isIgnored()
1671	181	16	GaussNewtonEstimator.java	estimate	i	int	0	DEF	measurements [$].isIgnored()
35439	187	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	j < $.parameters.$.length
35439	187	20	GaussNewtonEstimator.java	estimate	j	int	0	NIL-FOR	$ < parameters.length
35440	193	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	k < $.parameters.$.length
35440	193	20	GaussNewtonEstimator.java	estimate	k	int	0	NIL-FOR	$ < parameters.length
35441	195	24	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	l < $.parameters.$.length
35441	195	24	GaussNewtonEstimator.java	estimate	l	int	0	NIL-FOR	$ < parameters.length
35442	213	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.parameters.$.length
35442	213	16	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < parameters.length
35252	74	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
35253	89	12	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.rows
35253	89	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < rows
35254	97	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	j < $.cols
35254	97	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
35255	102	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	k < $.cols
35255	102	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
35256	105	20	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	l < $.cols
35256	105	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < cols
35257	120	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.cols
35257	120	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < cols
1277	128	12	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<VectorialPointValuePair>	0	DEF	$ != null
1278	129	16	GaussNewtonOptimizer.java	doOptimize	previous	VectorialPointValuePair	0	DEF	$ != null
1179	67	8	GaussianDerivativeFunction.java	GaussianDerivativeFunction	d	double	0	ZeroException	$ == 0.0
1180	85	8	GaussianDerivativeFunction.java	GaussianDerivativeFunction	parameters	double[]	0	NullArgumentException	$ == null
1181	88	8	GaussianDerivativeFunction.java	GaussianDerivativeFunction	THIS	GaussianDerivativeFunction	0	DimensionMismatchException	parameters.$.length != 3
1181	88	8	GaussianDerivativeFunction.java	GaussianDerivativeFunction	parameters	double[]	0	DimensionMismatchException	$.length != 3
1182	91	8	GaussianDerivativeFunction.java	GaussianDerivativeFunction	parameters	double[]	0	ZeroException	$[2] == 0.0
1183	79	8	GaussianFunction.java	GaussianFunction	d	double	0	ZeroException	$ == 0.0
1184	99	8	GaussianFunction.java	GaussianFunction	parameters	double[]	0	NullArgumentException	$ == null
1185	102	8	GaussianFunction.java	GaussianFunction	THIS	GaussianFunction	0	DimensionMismatchException	parameters.$.length != 4
1185	102	8	GaussianFunction.java	GaussianFunction	parameters	double[]	0	DimensionMismatchException	$.length != 4
1186	105	8	GaussianFunction.java	GaussianFunction	parameters	double[]	0	ZeroException	$[3] == 0.0
1164	51	8	GaussianParametersGuesser.java	GaussianParametersGuesser	observations	WeightedObservedPoint[]	0	NullArgumentException	$ == null
1165	54	8	GaussianParametersGuesser.java	GaussianParametersGuesser	THIS	GaussianParametersGuesser	0	NumberIsTooSmallException	observations.$.length < 3
1165	54	8	GaussianParametersGuesser.java	GaussianParametersGuesser	observations	WeightedObservedPoint[]	0	NumberIsTooSmallException	$.length < 3
1166	66	8	GaussianParametersGuesser.java	guess	THIS	GaussianParametersGuesser	0	DEF	$.parameters == null
35156	113	8	GaussianParametersGuesser.java	findMinY	THIS	GaussianParametersGuesser	0	NIL-FOR	i < points.$.length
35156	113	8	GaussianParametersGuesser.java	findMinY	i	int	0	NIL-FOR	$ < points.length
35156	113	8	GaussianParametersGuesser.java	findMinY	points	WeightedObservedPoint[]	0	NIL-FOR	i < $.length
1167	114	12	GaussianParametersGuesser.java	findMinY	i	int	0	DEF	points[$].getY() < points[minYIdx].getY()
1167	114	12	GaussianParametersGuesser.java	findMinY	minYIdx	int	0	DEF	points[i].getY() < points[$].getY()
1167	114	12	GaussianParametersGuesser.java	findMinY	points	WeightedObservedPoint[]	0	DEF	$[i].getY() < $[minYIdx].getY()
35157	130	8	GaussianParametersGuesser.java	findMaxY	THIS	GaussianParametersGuesser	0	NIL-FOR	i < points.$.length
35157	130	8	GaussianParametersGuesser.java	findMaxY	i	int	0	NIL-FOR	$ < points.length
35157	130	8	GaussianParametersGuesser.java	findMaxY	points	WeightedObservedPoint[]	0	NIL-FOR	i < $.length
1168	131	12	GaussianParametersGuesser.java	findMaxY	i	int	0	DEF	points[$].getY() > points[maxYIdx].getY()
1168	131	12	GaussianParametersGuesser.java	findMaxY	maxYIdx	int	0	DEF	points[i].getY() > points[$].getY()
1168	131	12	GaussianParametersGuesser.java	findMaxY	points	WeightedObservedPoint[]	0	DEF	$[i].getY() > $[maxYIdx].getY()
1169	156	8	GaussianParametersGuesser.java	interpolateXAtY	idxStep	int	0	ZeroException	$ == 0
1170	162	8	GaussianParametersGuesser.java	interpolateXAtY	pointA	WeightedObservedPoint	0	RET	$.getY() == y
1170	162	8	GaussianParametersGuesser.java	interpolateXAtY	y	double	0	RET	pointA.getY() == $
1171	165	8	GaussianParametersGuesser.java	interpolateXAtY	pointB	WeightedObservedPoint	0	RET	$.getY() == y
1171	165	8	GaussianParametersGuesser.java	interpolateXAtY	y	double	0	RET	pointB.getY() == $
1172	192	8	GaussianParametersGuesser.java	getInterpolationPointsForY	idxStep	int	0	ZeroException	$ == 0
35158	195	8	GaussianParametersGuesser.java	getInterpolationPointsForY	THIS	GaussianParametersGuesser	0	NIL-FOR	(idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.$.length)
35158	195	8	GaussianParametersGuesser.java	getInterpolationPointsForY	i	int	0	NIL-FOR	(idxStep < 0) ? ($ + idxStep >= 0) : ($ + idxStep < points.length)
35158	195	8	GaussianParametersGuesser.java	getInterpolationPointsForY	points	WeightedObservedPoint[]	0	NIL-FOR	(idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < $.length)
35158	195	8	GaussianParametersGuesser.java	getInterpolationPointsForY	idxStep	int	0	NIL-FOR	($ < 0) ? (i + $ >= 0) : (i + $ < points.length)
1173	198	12	GaussianParametersGuesser.java	getInterpolationPointsForY	THIS	GaussianParametersGuesser	0	RET	$.isBetween(y, points[i].getY(), points[i + idxStep].getY())
1173	198	12	GaussianParametersGuesser.java	getInterpolationPointsForY	i	int	0	RET	isBetween(y, points[$].getY(), points[$ + idxStep].getY())
1173	198	12	GaussianParametersGuesser.java	getInterpolationPointsForY	points	WeightedObservedPoint[]	0	RET	isBetween(y, $[i].getY(), $[i + idxStep].getY())
1173	198	12	GaussianParametersGuesser.java	getInterpolationPointsForY	idxStep	int	0	RET	isBetween(y, points[i].getY(), points[i + $].getY())
1173	198	12	GaussianParametersGuesser.java	getInterpolationPointsForY	y	double	0	RET	isBetween($, points[i].getY(), points[i + idxStep].getY())
1649	69	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	IllegalArgumentException	$ < 0
1649	69	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	IllegalArgumentException	$ > 1
1650	72	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	IllegalArgumentException	$ > 1
1650	72	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	IllegalArgumentException	$ < 0
35425	113	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
35425	113	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
35426	147	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
1651	152	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
1651	152	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
1652	158	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
1652	158	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
1653	168	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
1385	109	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
1386	197	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	DEF	$.getN() > 0
35591	112	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
35591	112	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1769	229	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ > 0.9999
1769	229	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ < 0.0001
1770	264	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control1	double	1	DEF	$ > 0.9999
1770	264	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control1	double	1	DEF	$ < 0.0001
1771	270	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control2	double	1	DEF	$ < 0.0001
1771	270	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control2	double	1	DEF	$ > 0.9999
1772	276	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control3	double	1	DEF	$ > 0.9999
1772	276	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control3	double	1	DEF	$ < 0.0001
1773	282	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control4	double	1	DEF	$ < 1.0001
1773	282	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control4	double	1	DEF	$ > 999.9
1774	316	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ <= 6
1774	316	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ % 2 != 0
1775	320	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ > 0.9999
1775	320	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ < 0.0001
1776	326	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ > 0.9999
1776	326	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ < 0.0001
1777	368	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
1777	368	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
1777	368	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
1778	377	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
35549	379	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
35549	379	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
35550	384	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
35550	384	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
35551	392	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
35551	392	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
35552	397	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
35552	397	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
35553	399	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
35553	399	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
1779	422	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ <= 0
1779	422	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ >= 7
1780	436	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
35554	437	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
35554	437	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
35554	437	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
35555	442	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
35555	442	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
35555	442	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
35556	478	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
35556	478	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
35556	478	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
35557	485	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
35557	485	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
1781	487	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
1781	487	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
35558	493	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
35558	493	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
35558	493	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
1782	502	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
1782	502	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
1782	502	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
1782	502	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
1782	502	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
35559	504	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
35559	504	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
35559	504	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
35560	509	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
35560	509	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
35560	509	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
1783	513	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * FastMath.max(1.0e-15, $)
1783	513	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * FastMath.max(1.0e-15, initialNorm)
35561	521	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
35561	521	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
35561	521	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
35562	540	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
35562	540	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
35563	541	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
35563	541	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
35563	541	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
35564	549	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
35564	549	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
35564	549	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
35565	574	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
35565	574	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
35566	580	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
35566	580	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
35567	587	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
35567	587	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
35567	587	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
1784	593	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1784	593	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1785	599	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
35568	602	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < yMidDots.$.length
35568	602	6	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < yMidDots.length
35568	602	6	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	0	NIL-FOR	j < $.length
1786	623	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
1786	623	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
35569	644	4	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
1787	649	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
1788	654	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
1789	658	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1790	664	10	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1791	677	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
1791	677	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
1791	677	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1791	677	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1791	677	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
1791	677	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
35570	686	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1792	691	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1792	691	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
1792	691	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
1792	691	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
1792	691	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1792	691	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
1792	691	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1792	691	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1792	691	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1792	691	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1793	704	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
35571	713	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < $.mainSetDimension
35571	713	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < mainSetDimension
1794	719	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
1794	719	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
1794	719	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
1794	719	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
1795	740	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1795	740	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1796	743	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1797	752	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1797	752	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1798	758	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1798	758	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1798	758	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1799	770	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1800	778	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1800	778	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1801	783	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1801	783	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1801	783	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1802	794	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
1803	796	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1803	796	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1803	796	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1804	807	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
1804	807	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1804	807	16	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1805	821	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.denseOutput
1805	821	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
35572	824	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
35572	824	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
35573	833	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
35573	833	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
35574	839	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
35574	839	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
35574	839	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
35575	842	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
35575	842	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
35575	842	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
35576	845	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
35576	845	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
35576	845	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
35577	850	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
35577	850	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
35577	850	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
35578	855	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
35578	855	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
35579	856	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
35579	856	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
35580	857	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
35580	857	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
35580	857	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
1806	865	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
1807	872	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
1808	877	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
1809	884	10	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1810	886	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.evaluateStep(interpolator)
1810	886	12	GraggBulirschStoerIntegrator.java	integrate	interpolator	AbstractStepInterpolator	0	DEF	eventsHandlersManager.evaluateStep($)
1811	888	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	FastMath.abs(dt) > FastMath.ulp($.stepStart)
1811	888	16	GraggBulirschStoerIntegrator.java	integrate	dt	double	0	DEF	FastMath.abs($) > FastMath.ulp(stepStart)
1812	898	8	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1813	906	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1814	913	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.stop()
1815	924	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.reset($.stepStart, y)
1815	924	8	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1815	924	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	eventsHandlersManager.reset(stepStart, $)
1816	931	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
1817	933	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1818	936	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
1818	936	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
1819	938	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
1819	938	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1820	940	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1820	940	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1821	945	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
1821	945	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
1821	945	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
1822	949	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
1822	949	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
1822	949	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
1823	954	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
1824	961	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
1824	961	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
1825	964	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1825	964	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
1825	964	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1825	964	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
1826	983	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1827	989	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
1856	166	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynoms == null
1856	166	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms == null
35614	171	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynoms.$.length
35614	171	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynoms.length
1857	188	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
1858	195	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms != null
35615	197	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
35615	197	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
35615	197	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
35616	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
35616	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
35616	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
1859	208	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
35617	212	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
35617	212	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
35618	216	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
35618	216	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
1860	241	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms == null
1860	241	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms.$.length <= (mu + 4)
1860	241	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynoms.length <= ($ + 4)
35619	247	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
35619	247	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
1861	260	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
1862	268	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
1863	272	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
1864	276	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
35620	280	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
35620	280	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
1865	300	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
35621	301	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < scale.$.length
35621	301	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < scale.length
35621	301	6	GraggBulirschStoerStepInterpolator.java	estimateError	scale	double[]	0	NIL-FOR	i < $.length
35622	327	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
35622	327	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
1866	336	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
35623	339	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
1867	350	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
35624	370	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
35624	370	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
35625	371	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
35625	371	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
35626	392	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
35626	392	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
35627	393	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
35627	393	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
35159	169	8	HarmonicCoefficientsGuesser.java	sortObservations	THIS	HarmonicCoefficientsGuesser	0	NIL-FOR	j < $.observations.$.length
35159	169	8	HarmonicCoefficientsGuesser.java	sortObservations	j	int	0	NIL-FOR	$ < observations.length
1176	172	12	HarmonicCoefficientsGuesser.java	sortObservations	prec	WeightedObservedPoint	0	DEF	curr.getX() < $.getX()
1176	172	12	HarmonicCoefficientsGuesser.java	sortObservations	curr	WeightedObservedPoint	0	DEF	$.getX() < prec.getX()
35160	176	16	HarmonicCoefficientsGuesser.java	sortObservations	i	int	0	NIL-WHILE	$ >= 0
35160	176	16	HarmonicCoefficientsGuesser.java	sortObservations	mI	WeightedObservedPoint	0	NIL-WHILE	curr.getX() < $.getX()
35160	176	16	HarmonicCoefficientsGuesser.java	sortObservations	curr	WeightedObservedPoint	0	NIL-WHILE	$.getX() < mI.getX()
1177	178	20	HarmonicCoefficientsGuesser.java	sortObservations	i	int	1	DEF	$-- != 0
35161	210	8	HarmonicCoefficientsGuesser.java	guessAOmega	THIS	HarmonicCoefficientsGuesser	0	NIL-FOR	i < $.observations.$.length
35161	210	8	HarmonicCoefficientsGuesser.java	guessAOmega	i	int	0	NIL-FOR	$ < observations.length
1178	242	8	HarmonicCoefficientsGuesser.java	guessAOmega	c1	double	0	OptimizationException	$ / c2 < 0.0
1178	242	8	HarmonicCoefficientsGuesser.java	guessAOmega	c2	double	0	OptimizationException	c1 / $ < 0.0
1178	242	8	HarmonicCoefficientsGuesser.java	guessAOmega	c2	double	0	OptimizationException	$ / c3 < 0.0
1178	242	8	HarmonicCoefficientsGuesser.java	guessAOmega	c3	double	0	OptimizationException	c2 / $ < 0.0
35162	260	8	HarmonicCoefficientsGuesser.java	guessPhi	THIS	HarmonicCoefficientsGuesser	0	NIL-FOR	i < $.observations.$.length
35162	260	8	HarmonicCoefficientsGuesser.java	guessPhi	i	int	0	NIL-FOR	$ < observations.length
1174	84	12	HarmonicFitter.java	fit	THIS	HarmonicFitter	0	OptimizationException	$.parameters == null
1175	86	16	HarmonicFitter.java	fit	THIS	HarmonicFitter	0	OptimizationException	observations.$.length < 4
1175	86	16	HarmonicFitter.java	fit	observations	WeightedObservedPoint[]	0	OptimizationException	$.length < 4
35652	113	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < $.mainSetDimension
35652	113	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
35653	115	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < STATIC_E.$.length
35653	115	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < STATIC_E.length
35651	89	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
35651	89	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
711	58	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	DEF	numberOfSuccesses > $
711	58	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	numberOfSuccesses	int	0	DEF	$ > populationSize
712	64	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	DEF	sampleSize > $
712	64	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	sampleSize	int	0	DEF	$ > populationSize
713	87	8	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
713	87	8	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
714	89	15	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
714	89	15	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
715	200	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x > $[1]
715	200	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x < $[0]
715	200	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ > domain[1]
715	200	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ < domain[0]
716	252	8	HypergeometricDistributionImpl.java	setNumberOfSuccessesInternal	num	int	0	DEF	$ < 0
717	277	8	HypergeometricDistributionImpl.java	setPopulationSizeInternal	size	int	0	DEF	$ <= 0
718	302	8	HypergeometricDistributionImpl.java	setSampleSizeInternal	size	int	0	DEF	$ < 0
719	320	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x < $[0]
719	320	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ < domain[0]
720	322	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
720	322	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
34321	348	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
34321	348	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
34254	73	8	Incrementor.java	incrementCount	i	int	0	NIL-FOR	$ < value
34254	73	8	Incrementor.java	incrementCount	value	int	0	NIL-FOR	i < $
20	84	8	Incrementor.java	incrementCount	THIS	Incrementor	0	MaxCountExceededException	++$.count > $.maximalCount
35334	61	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
35334	61	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
1486	66	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	newCenter.equals($.cluster.getCenter())
1486	66	16	KMeansPlusPlusClusterer.java	cluster	newCenter	T	0	DEF	$.equals(cluster.getCenter())
1487	71	12	KMeansPlusPlusClusterer.java	cluster	clusteringChanged	boolean	0	RET	$
35335	115	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
35335	115	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
35336	119	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < pointSet.size()
35336	119	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	pointSet	List<T>	0	NIL-FOR	i < $.size()
35337	130	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	THIS	KMeansPlusPlusClusterer	0	NIL-FOR	i < dx2.$.length
35337	130	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < dx2.length
35337	130	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	dx2	double[]	0	NIL-FOR	i < $.length
1488	131	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	dx2[$] >= r
1488	131	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	dx2[i] >= $
1488	131	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	dx2	double[]	0	DEF	$[i] >= r
1489	157	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
1489	157	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
1380	96	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
1381	110	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
1382	112	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
1382	112	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
1383	130	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
1384	168	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
1384	168	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1384	168	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
1384	168	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
1384	168	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
35311	179	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
35311	179	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
35311	179	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1102	82	8	LUDecompositionImpl.java	LUDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
35105	94	8	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
35105	94	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
35106	101	8	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	$ < m
35106	101	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	col < $
35107	106	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < col
35107	106	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	row < $
35108	109	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < row
35108	109	16	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	i < $
35109	118	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
35109	118	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
35110	121	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < col
35110	121	16	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	i < $
1103	127	16	LUDecompositionImpl.java	LUDecompositionImpl	sum	double	0	DEF	FastMath.abs($) > largest
1103	127	16	LUDecompositionImpl.java	LUDecompositionImpl	largest	double	0	DEF	FastMath.abs(sum) > $
1104	134	12	LUDecompositionImpl.java	LUDecompositionImpl	THIS	LUDecompositionImpl	0	RET	FastMath.abs($.lu[max][col]) < singularityThreshold
1104	134	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	RET	FastMath.abs(lu[$][col]) < singularityThreshold
1104	134	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	RET	FastMath.abs(lu[max][$]) < singularityThreshold
1104	134	12	LUDecompositionImpl.java	LUDecompositionImpl	singularityThreshold	double	0	RET	FastMath.abs(lu[max][col]) < $
1105	140	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	DEF	$ != col
1105	140	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	DEF	max != $
35111	144	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < m
35111	144	16	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	i < $
35112	157	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
35112	157	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
1106	166	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.cachedL == null
1106	166	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.singular
35113	169	12	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
35113	169	12	LUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
35114	171	16	LUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
35114	171	16	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
1107	182	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.cachedU == null
1107	182	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.singular
35115	185	12	LUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
35115	185	12	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
35116	187	16	LUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
35116	187	16	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
1108	197	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.cachedP == null
1108	197	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.singular
35117	200	12	LUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
35117	200	12	LUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
1109	214	8	LUDecompositionImpl.java	getDeterminant	THIS	LUDecompositionImpl	1	RET	$.singular
35118	219	12	LUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
35118	219	12	LUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
2379	63	8	LaguerreSolver.java	LaguerreSolver	f	UnivariateRealFunction	1	DEF	$ instanceof PolynomialFunction
2380	124	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
2380	124	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
2381	127	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
2381	127	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
2382	130	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
2382	130	8	LaguerreSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
2383	136	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	1	RET	$.isBracketing(min, initial, f)
2383	136	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
2383	136	8	LaguerreSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
2383	136	8	LaguerreSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
2384	168	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	DEF	$ instanceof PolynomialFunction
2385	173	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
2385	173	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
2386	174	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
2386	174	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
35830	179	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < coefficients.$.length
35830	179	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < coefficients.length
35830	179	8	LaguerreSolver.java	solve	coefficients	double[]	0	NIL-FOR	i < $.length
2387	184	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, z)
2387	184	8	LaguerreSolver.java	solve	z	Complex	0	RET	isRootOK(min, max, $)
2387	184	8	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, z)
2387	184	8	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, z)
35831	191	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
35831	191	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < root.length
35831	191	8	LaguerreSolver.java	solve	root	Complex[]	0	NIL-FOR	i < $.length
2388	192	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, root[i])
2388	192	12	LaguerreSolver.java	solve	i	int	0	RET	isRootOK(min, max, root[$])
2388	192	12	LaguerreSolver.java	solve	root	Complex[]	0	RET	isRootOK(min, max, $[i])
2388	192	12	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, root[i])
2388	192	12	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, root[i])
35832	236	8	LaguerreSolver.java	solveAll	THIS	LaguerreSolver	0	NIL-FOR	i < c.$.length
35832	236	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < c.length
35832	236	8	LaguerreSolver.java	solveAll	c	Complex[]	0	NIL-FOR	i < $.length
2389	260	8	LaguerreSolver.java	solveAll	n	int	0	DEF	$ < 1
35833	265	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ <= n
35833	265	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i <= $
35834	271	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < n
35834	271	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i < $
35835	278	12	LaguerreSolver.java	solveAll	j	int	0	NIL-FOR	$ >= 0
2390	308	8	LaguerreSolver.java	solve	n	int	0	DEF	$ < 1
35836	326	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-WHILE	i <= $.maximalIterationCount
35836	326	8	LaguerreSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
35837	332	12	LaguerreSolver.java	solve	j	int	0	NIL-FOR	$ >= 0
2391	342	12	LaguerreSolver.java	solve	tolerance	double	0	RET	(z.subtract(oldz)).abs() <= $
2391	342	12	LaguerreSolver.java	solve	z	Complex	0	RET	($.subtract(oldz)).abs() <= tolerance
2391	342	12	LaguerreSolver.java	solve	oldz	Complex	0	RET	(z.subtract($)).abs() <= tolerance
2392	347	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	pv.abs() <= $.functionValueAccuracy
2392	347	12	LaguerreSolver.java	solve	pv	Complex	0	RET	$.abs() <= functionValueAccuracy
2393	365	12	LaguerreSolver.java	solve	denominator	Complex	1	DEF	$.equals(new Complex(0.0, 0.0))
1224	115	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DEF	observations.$.length != weights.$.length
1224	115	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DEF	$.length != weights.length
1224	115	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DEF	observations.length != $.length
1225	148	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DEF	observations.$.length != scale.getColumnDimension()
1225	148	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DEF	$.length != scale.getColumnDimension()
1225	148	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DEF	observations.length != $.getColumnDimension()
1226	164	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	FunctionEvaluationException	residuals.$.length != $.observations.$.length
1226	164	8	LeastSquaresConverter.java	value	residuals	double[]	0	FunctionEvaluationException	$.length != observations.length
35183	168	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
35183	168	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
35183	168	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1227	174	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
35184	175	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
35184	175	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
35184	175	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1228	179	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
35871	176	8	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	NIL-FOR	i < $.maximalIterationCount
35871	176	8	LegendreGaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < maximalIterationCount
2464	188	12	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	RET	i + 1 >= $.minimalIterationCount
2464	188	12	LegendreGaussIntegrator.java	integrate	delta	double	0	RET	$ <= limit
2464	188	12	LegendreGaussIntegrator.java	integrate	limit	double	0	RET	delta <= $
2464	188	12	LegendreGaussIntegrator.java	integrate	i	int	0	RET	$ + 1 >= minimalIterationCount
35872	225	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
35872	225	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
35873	226	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
35873	226	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
35452	288	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
35452	288	6	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < solvedCols
1675	293	6	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
35453	298	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
35453	298	8	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
1676	300	10	LevenbergMarquardtEstimator.java	estimate	dk	double	0	DEF	$ == 0
1677	316	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.cost != 0
35454	317	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35454	317	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1678	320	10	LevenbergMarquardtEstimator.java	estimate	s	double	0	DEF	$ != 0
35455	323	12	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
35455	323	12	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
1679	331	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	maxCosine <= $.orthoTolerance
1679	331	6	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	RET	$ <= orthoTolerance
35456	336	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
35456	336	6	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < cols
35457	341	6	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	NIL-FOR	$ < 1.0e-4
35458	344	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35458	344	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
35459	358	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35459	358	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1680	368	8	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
1681	377	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost < previousCost
1681	377	8	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost < $
35460	384	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35460	384	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
35461	389	10	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
35461	389	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
35462	395	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35462	395	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1682	408	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ <= 0.25
1683	411	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost >= previousCost
1683	411	10	LevenbergMarquardtEstimator.java	estimate	tmp	double	0	DEF	$ < 0.1
1683	411	10	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost >= $
1684	416	15	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
1684	416	15	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	DEF	$ >= 0.75
1685	422	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ >= 1.0e-4
35463	426	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
35463	426	10	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
35464	434	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35464	434	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1686	444	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
1686	444	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	delta <= $.parRelativeTolerance * xNorm
1686	444	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	preRed <= $.costRelativeTolerance
1686	444	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
1686	444	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	0	RET	$ <= costRelativeTolerance
1686	444	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	RET	$ <= 2.0
1686	444	8	LevenbergMarquardtEstimator.java	estimate	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1686	444	8	LevenbergMarquardtEstimator.java	estimate	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1687	453	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	1	EstimationException	FastMath.abs($) <= 2.2204e-16
1687	453	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	1	EstimationException	$ <= 2.2204e-16
1687	453	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	EstimationException	$ <= 2.0
1688	458	15	LevenbergMarquardtEstimator.java	estimate	delta	double	1	EstimationException	$ <= 2.2204e-16 * xNorm
1688	458	15	LevenbergMarquardtEstimator.java	estimate	xNorm	double	1	EstimationException	delta <= 2.2204e-16 * $
1689	463	15	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	EstimationException	$ <= 2.2204e-16
35465	502	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.rank
35465	502	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
35466	505	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
35466	505	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
35467	508	4	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
35468	512	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
35468	512	6	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	i < $
35469	522	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35469	522	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1690	530	4	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1690	530	4	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1691	540	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.rank == $.solvedCols
35470	541	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35470	541	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
35471	546	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35471	546	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
35472	550	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
35472	550	8	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i < $
35473	563	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35473	563	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
35474	567	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
35474	567	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1692	576	4	LevenbergMarquardtEstimator.java	determineLMParameter	paru	double	0	DEF	$ == 0
1693	584	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
35475	588	4	LevenbergMarquardtEstimator.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1694	591	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
35476	595	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35476	595	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
35477	602	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35477	602	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1695	614	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1695	614	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1695	614	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1695	614	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
1695	614	6	LevenbergMarquardtEstimator.java	determineLMParameter	parl	double	0	RET	$ == 0
1695	614	6	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
35478	620	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35478	620	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
35479	624	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35479	624	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
35480	628	8	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
35480	628	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
35481	633	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35481	633	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1696	640	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	1	DEF	$ > 0
1697	642	13	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	DEF	$ < 0
35482	677	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35482	677	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
35483	679	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
35483	679	6	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
35484	687	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35484	687	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1698	693	6	LevenbergMarquardtEstimator.java	determineLMDirection	dpj	double	0	DEF	$ != 0
35485	702	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
35485	702	6	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1699	707	8	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1699	707	8	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1700	712	10	LevenbergMarquardtEstimator.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
1700	712	10	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
1700	712	10	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
35486	730	10	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
35486	730	10	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
35487	751	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
35487	751	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1701	752	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing == $.solvedCols
1701	752	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1701	752	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1701	752	6	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1702	755	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing < $.solvedCols
1702	755	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1703	759	4	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ > 0
35488	760	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
35489	763	8	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
35489	763	8	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
35490	771	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.lmDir.$.length
35490	771	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
35491	802	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
35491	802	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
35492	805	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
35492	805	6	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
35493	813	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
35493	813	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
35494	818	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.cols
35494	818	6	LevenbergMarquardtEstimator.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
35495	821	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
35495	821	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
1704	825	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isNaN($)
1704	825	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isInfinite($)
1705	830	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1705	830	8	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1706	835	6	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	RET	$ == 0
35496	855	6	LevenbergMarquardtEstimator.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
35497	858	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
35497	858	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
35498	862	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
35498	862	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
35499	879	4	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
35499	879	4	LevenbergMarquardtEstimator.java	qTy	k	int	0	NIL-FOR	$ < cols
35500	884	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
35500	884	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
35501	890	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
35501	890	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
35186	252	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i<$.rows
35186	252	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$<rows
35187	265	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
35187	265	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
1230	270	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
35188	274	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
35188	274	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1231	276	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1232	291	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.cost != 0
35189	292	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35189	292	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1233	295	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
35190	297	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
35190	297	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1234	304	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1234	304	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
35191	312	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
35191	312	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
35192	317	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
35193	320	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35193	320	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
35194	337	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35194	337	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1235	346	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1236	355	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost < previousCost
1236	355	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost < $
35195	362	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35195	362	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
35196	366	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
35196	366	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
35197	371	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35197	371	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1237	384	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1238	387	24	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost >= previousCost
1238	387	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1238	387	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost >= $
1239	392	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1239	392	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1240	398	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
35198	402	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
35198	402	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1241	410	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<VectorialPointValuePair>	0	RET	$ != null
1242	412	24	LevenbergMarquardtOptimizer.java	doOptimize	previous	VectorialPointValuePair	0	RET	checker.converged(iter, $, current)
1242	412	24	LevenbergMarquardtOptimizer.java	doOptimize	current	VectorialPointValuePair	0	RET	checker.converged(iter, previous, $)
1242	412	24	LevenbergMarquardtOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1242	412	24	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<VectorialPointValuePair>	0	RET	$.converged(iter, previous, current)
35199	419	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35199	419	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1243	432	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1243	432	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
1243	432	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1243	432	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
1243	432	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1243	432	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1243	432	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1243	432	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1244	441	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= 2.2204e-16
1244	441	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= 2.2204e-16
1244	441	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
1245	444	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= 2.2204e-16 * xNorm
1245	444	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= 2.2204e-16 * $
1246	447	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= 2.2204e-16
35200	482	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
35200	482	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
35201	485	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
35201	485	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
35202	488	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
35203	491	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
35203	491	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
35204	500	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35204	500	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1247	508	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1247	508	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1248	518	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
35205	519	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35205	519	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
35206	524	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35206	524	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
35207	527	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
35207	527	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
35208	539	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35208	539	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
35209	542	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
35209	542	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1249	550	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1250	558	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
35210	562	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1251	565	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
35211	569	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35211	569	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
35212	576	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35212	576	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1252	588	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1252	588	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1252	588	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
1252	588	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1252	588	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1252	588	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
35213	594	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35213	594	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
35214	598	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35214	598	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
35215	602	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
35215	602	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
35216	607	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35216	607	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1253	614	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1254	616	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
35217	651	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35217	651	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
35218	653	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
35218	653	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
35219	661	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35219	661	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1255	667	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
35220	676	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
35220	676	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1256	681	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1256	681	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1257	686	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
1257	686	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
1257	686	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
35221	704	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
35221	704	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
35222	722	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
35222	722	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1258	723	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1258	723	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1258	723	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1258	723	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1259	726	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1259	726	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1260	730	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
35223	731	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
35224	734	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
35224	734	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
35225	742	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
35225	742	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
35226	772	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
35226	772	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
35227	775	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.weightedResidualJacobian.$.length
35227	775	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < weightedResidualJacobian.length
35228	783	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
35228	783	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
35229	788	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.cols
35229	788	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
35230	790	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
35230	790	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
1261	794	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
1261	794	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
1262	798	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1262	798	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1263	803	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
1263	803	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
35231	822	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
35232	824	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
35232	824	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
35233	828	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
35233	828	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
35234	842	8	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
35234	842	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < cols
35235	845	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
35235	845	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
35236	849	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
35236	849	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
35163	128	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
35163	128	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
35163	128	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
1187	191	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
1187	191	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
1188	195	6	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
2235	44	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
2235	44	8	LinearInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
2235	44	8	LinearInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
2236	48	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	NumberIsTooSmallException	x.$.length < 2
2236	48	8	LinearInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 2
35733	60	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
35733	60	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
35734	66	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
35734	66	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1201	108	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
1201	108	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
1202	112	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
1645	49	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
1645	49	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NumberIsTooLargeException	chromosomes.size() > $
1646	53	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ < 0
1647	68	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ < 0
1648	107	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
1648	107	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
2311	150	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	MathException	$ > 1
2311	150	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	MathException	$ < 0
2312	155	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	MathException	$ < 0
2313	201	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	MathException	xval.$.length != yval.$.length
2313	201	8	LoessInterpolator.java	smooth	xval	double[]	0	MathException	$.length != yval.length
2313	201	8	LoessInterpolator.java	smooth	yval	double[]	0	MathException	xval.length != $.length
2314	208	8	LoessInterpolator.java	smooth	n	int	0	MathException	$ == 0
2315	218	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
2316	222	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
2317	228	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	MathException	$ < 2
35806	245	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
35806	245	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
35807	248	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
35807	248	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
2318	253	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
2319	263	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
2319	263	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
2319	263	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
2319	263	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
35808	282	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
35808	282	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
2320	301	16	LoessInterpolator.java	smooth	THIS	LoessInterpolator	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < $.accuracy
2320	301	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
2320	301	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
2321	315	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
2321	315	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
2322	328	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	FastMath.abs(medianResidual) < $.accuracy
2322	328	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	FastMath.abs($) < accuracy
35809	332	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
35809	332	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
2323	334	16	LoessInterpolator.java	smooth	arg	double	1	DEF	$ >= 1
2324	361	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	MathException	xval.$.length != yval.$.length
2324	361	8	LoessInterpolator.java	smooth	xval	double[]	0	MathException	$.length != yval.length
2324	361	8	LoessInterpolator.java	smooth	yval	double[]	0	MathException	xval.length != $.length
2325	395	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	nextRight < xval.$.length
2325	395	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[nextRight] - xval[i] < xval[i] - xval[$]
2325	395	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	xval[$] - xval[i] < xval[i] - xval[left]
2325	395	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	$ < xval.length
2325	395	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[nextRight] - $[i] < $[i] - $[left]
2325	395	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	nextRight < $.length
2325	395	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[nextRight] - xval[$] < xval[$] - xval[left]
35810	410	8	LoessInterpolator.java	nextNonzero	THIS	LoessInterpolator	0	NIL-WHILE	j < weights.$.length
35810	410	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	weights[$] == 0
35810	410	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	$ < weights.length
35810	410	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	$[j] == 0
35810	410	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	j < $.length
35811	438	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
35811	438	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
35811	438	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
2326	440	12	LoessInterpolator.java	checkAllFiniteReal	x	double	0	MathException	Double.isNaN($)
2326	440	12	LoessInterpolator.java	checkAllFiniteReal	x	double	0	MathException	Double.isInfinite($)
35812	456	8	LoessInterpolator.java	checkStrictlyIncreasing	THIS	LoessInterpolator	0	NIL-FOR	i < xval.$.length
35812	456	8	LoessInterpolator.java	checkStrictlyIncreasing	i	int	0	NIL-FOR	$ < xval.length
35812	456	8	LoessInterpolator.java	checkStrictlyIncreasing	xval	double[]	0	NIL-FOR	i < $.length
2327	457	12	LoessInterpolator.java	checkStrictlyIncreasing	i	int	0	MathException	$ >= 1
2327	457	12	LoessInterpolator.java	checkStrictlyIncreasing	i	int	0	MathException	xval[$ - 1] >= xval[$]
2327	457	12	LoessInterpolator.java	checkStrictlyIncreasing	xval	double[]	0	MathException	$[i - 1] >= $[i]
0	170	8	MathException.java	getMessage	THIS	MathException	0	RET	$.pattern != null
1568	173	8	MathRuntimeException.java	getMessage	THIS	MathRuntimeException	0	RET	$.pattern != null
260	103	8	MathUtils.java	addAndCheck	s	long	0	DEF	$ > Integer.MAX_VALUE
260	103	8	MathUtils.java	addAndCheck	s	long	0	DEF	$ < Integer.MIN_VALUE
261	136	8	MathUtils.java	addAndCheck	a	long	1	DEF	$ > b
261	136	8	MathUtils.java	addAndCheck	b	long	1	DEF	a > $
262	142	12	MathUtils.java	addAndCheck	a	long	1	DEF	$ < 0
263	143	16	MathUtils.java	addAndCheck	b	long	1	DEF	$ < 0
264	145	20	MathUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
264	145	20	MathUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
265	159	16	MathUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
265	159	16	MathUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
266	196	8	MathUtils.java	binomialCoefficient	n	int	0	RET	$ == k
266	196	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
266	196	8	MathUtils.java	binomialCoefficient	k	int	0	RET	n == $
267	199	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
267	199	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
267	199	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
268	203	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
268	203	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
269	212	8	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
34273	215	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
34273	215	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
270	219	15	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
34274	223	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
34274	223	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
34275	239	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
34275	239	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
271	272	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
271	272	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
271	272	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
272	275	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
272	275	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
272	275	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
273	278	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
273	278	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
274	281	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
34276	286	8	MathUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
34276	286	8	MathUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
275	313	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
275	313	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
275	313	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
276	316	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
276	316	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
276	316	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
277	324	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
278	332	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
279	336	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
279	336	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
34277	346	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
34277	346	8	MathUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
34278	351	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
34278	351	8	MathUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
280	366	8	MathUtils.java	checkBinomial	n	int	0	DEF	$ < k
280	366	8	MathUtils.java	checkBinomial	k	int	0	DEF	n < $
281	371	8	MathUtils.java	checkBinomial	n	int	0	DEF	$ < 0
282	389	8	MathUtils.java	compareTo	THIS	MathUtils	1	RET	$.equals(x, y, eps)
282	389	8	MathUtils.java	compareTo	x	double	1	RET	equals($, y, eps)
282	389	8	MathUtils.java	compareTo	y	double	1	RET	equals(x, $, eps)
282	389	8	MathUtils.java	compareTo	eps	double	1	RET	equals(x, y, $)
283	391	15	MathUtils.java	compareTo	x	double	0	RET	$ < y
283	391	15	MathUtils.java	compareTo	y	double	0	RET	x < $
284	485	8	MathUtils.java	equals	xInt	long	0	DEF	$ < 0
285	488	8	MathUtils.java	equals	yInt	long	0	DEF	$ < 0
286	523	8	MathUtils.java	equals	x	double[]	0	RET	$ == null
286	523	8	MathUtils.java	equals	y	double[]	0	RET	$ == null
287	526	8	MathUtils.java	equals	THIS	MathUtils	0	RET	x.$.length != y.$.length
287	526	8	MathUtils.java	equals	x	double[]	0	RET	$.length != y.length
287	526	8	MathUtils.java	equals	y	double[]	0	RET	x.length != $.length
34279	529	8	MathUtils.java	equals	THIS	MathUtils	0	NIL-FOR	i < x.$.length
34279	529	8	MathUtils.java	equals	i	int	0	NIL-FOR	$ < x.length
34279	529	8	MathUtils.java	equals	x	double[]	0	NIL-FOR	i < $.length
288	530	12	MathUtils.java	equals	THIS	MathUtils	0	RET	$.equals(x[i], y[i])
288	530	12	MathUtils.java	equals	i	int	0	RET	equals(x[$], y[$])
288	530	12	MathUtils.java	equals	x	double[]	0	RET	equals($[i], y[i])
288	530	12	MathUtils.java	equals	y	double[]	0	RET	equals(x[i], $[i])
289	548	8	MathUtils.java	equalsIncludingNaN	x	double[]	0	RET	$ == null
289	548	8	MathUtils.java	equalsIncludingNaN	y	double[]	0	RET	$ == null
290	551	8	MathUtils.java	equalsIncludingNaN	THIS	MathUtils	0	RET	x.$.length != y.$.length
290	551	8	MathUtils.java	equalsIncludingNaN	x	double[]	0	RET	$.length != y.length
290	551	8	MathUtils.java	equalsIncludingNaN	y	double[]	0	RET	x.length != $.length
34280	554	8	MathUtils.java	equalsIncludingNaN	THIS	MathUtils	0	NIL-FOR	i < x.$.length
34280	554	8	MathUtils.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
34280	554	8	MathUtils.java	equalsIncludingNaN	x	double[]	0	NIL-FOR	i < $.length
291	555	12	MathUtils.java	equalsIncludingNaN	THIS	MathUtils	0	RET	$.equalsIncludingNaN(x[i], y[i])
291	555	12	MathUtils.java	equalsIncludingNaN	i	int	0	RET	equalsIncludingNaN(x[$], y[$])
291	555	12	MathUtils.java	equalsIncludingNaN	x	double[]	0	RET	equalsIncludingNaN($[i], y[i])
291	555	12	MathUtils.java	equalsIncludingNaN	y	double[]	0	RET	equalsIncludingNaN(x[i], $[i])
292	585	8	MathUtils.java	factorial	n	int	0	DEF	$ < 0
293	590	8	MathUtils.java	factorial	n	int	0	ArithmeticException	$ > 20
294	618	8	MathUtils.java	factorialDouble	n	int	0	DEF	$ < 0
295	623	8	MathUtils.java	factorialDouble	n	int	0	RET	$ < 21
296	643	8	MathUtils.java	factorialLog	n	int	0	DEF	$ < 0
297	648	8	MathUtils.java	factorialLog	n	int	0	RET	$ < 21
34281	652	8	MathUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
34281	652	8	MathUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
298	690	8	MathUtils.java	gcd	u	int	0	RET	$ == 0
298	690	8	MathUtils.java	gcd	v	int	0	RET	$ == 0
299	691	12	MathUtils.java	gcd	u	int	0	DEF	$ == Integer.MIN_VALUE
299	691	12	MathUtils.java	gcd	v	int	0	DEF	$ == Integer.MIN_VALUE
300	703	8	MathUtils.java	gcd	u	int	0	DEF	$ > 0
301	706	8	MathUtils.java	gcd	v	int	0	DEF	$ > 0
34282	711	8	MathUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
34282	711	8	MathUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
34282	711	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
302	717	8	MathUtils.java	gcd	k	int	0	DEF	$ == 31
34283	727	8	MathUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
34284	730	12	MathUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
303	734	12	MathUtils.java	gcd	t	int	1	DEF	$ > 0
304	779	8	MathUtils.java	gcd	u	long	0	RET	$ == 0
304	779	8	MathUtils.java	gcd	v	long	0	RET	$ == 0
305	780	12	MathUtils.java	gcd	u	long	0	DEF	$ == Long.MIN_VALUE
305	780	12	MathUtils.java	gcd	v	long	0	DEF	$ == Long.MIN_VALUE
306	792	8	MathUtils.java	gcd	u	long	0	DEF	$ > 0
307	795	8	MathUtils.java	gcd	v	long	0	DEF	$ > 0
34285	800	8	MathUtils.java	gcd	u	long	0	NIL-WHILE	($ & 1) == 0
34285	800	8	MathUtils.java	gcd	v	long	0	NIL-WHILE	($ & 1) == 0
34285	800	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 63
308	806	8	MathUtils.java	gcd	k	int	0	DEF	$ == 63
34286	816	8	MathUtils.java	gcd	t	long	0	NIL-DOWHILE	$ != 0
34287	819	12	MathUtils.java	gcd	t	long	0	NIL-WHILE	($ & 1) == 0
309	823	12	MathUtils.java	gcd	t	long	1	DEF	$ > 0
310	877	8	MathUtils.java	indicator	x	double	0	RET	Double.isNaN($)
311	891	8	MathUtils.java	indicator	x	float	0	RET	Float.isNaN($)
312	952	8	MathUtils.java	lcm	a	int	0	RET	$==0
312	952	8	MathUtils.java	lcm	b	int	0	RET	$==0
313	956	8	MathUtils.java	lcm	lcm	int	0	DEF	$ == Integer.MIN_VALUE
314	987	8	MathUtils.java	lcm	a	long	0	RET	$==0
314	987	8	MathUtils.java	lcm	b	long	0	RET	$==0
315	991	8	MathUtils.java	lcm	lcm	long	0	DEF	$ == Long.MIN_VALUE
316	1031	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ > Integer.MAX_VALUE
316	1031	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ < Integer.MIN_VALUE
317	1050	8	MathUtils.java	mulAndCheck	a	long	1	DEF	$ > b
317	1050	8	MathUtils.java	mulAndCheck	b	long	1	DEF	a > $
318	1054	12	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ < 0
319	1055	16	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ < 0
320	1057	20	MathUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
320	1057	20	MathUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
321	1062	23	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ > 0
322	1064	20	MathUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
322	1064	20	MathUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
323	1074	19	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ > 0
324	1079	16	MathUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
324	1079	16	MathUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
325	1104	8	MathUtils.java	scalb	d	double	0	RET	$ == 0
325	1104	8	MathUtils.java	scalb	d	double	0	RET	Double.isNaN($)
325	1104	8	MathUtils.java	scalb	d	double	0	RET	Double.isInfinite($)
326	1165	9	MathUtils.java	normalizeArray	normalizedSum	double	0	DEF	Double.isInfinite($)
327	1169	9	MathUtils.java	normalizeArray	normalizedSum	double	0	DEF	Double.isNaN($)
34288	1176	9	MathUtils.java	normalizeArray	i	int	0	NIL-FOR	$ < len
34288	1176	9	MathUtils.java	normalizeArray	len	int	0	NIL-FOR	i < $
328	1177	13	MathUtils.java	normalizeArray	i	int	0	DEF	Double.isInfinite(values[$])
328	1177	13	MathUtils.java	normalizeArray	values	double[]	0	DEF	Double.isInfinite($[i])
329	1181	13	MathUtils.java	normalizeArray	i	int	0	DEF	Double.isNaN(values[$])
329	1181	13	MathUtils.java	normalizeArray	values	double[]	0	DEF	Double.isNaN($[i])
330	1185	9	MathUtils.java	normalizeArray	sum	double	0	DEF	$ == 0
34289	1188	9	MathUtils.java	normalizeArray	i	int	0	NIL-FOR	$ < len
34289	1188	9	MathUtils.java	normalizeArray	len	int	0	NIL-FOR	i < $
331	1189	13	MathUtils.java	normalizeArray	i	int	1	DEF	Double.isNaN(values[$])
331	1189	13	MathUtils.java	normalizeArray	values	double[]	1	DEF	Double.isNaN($[i])
332	1230	12	MathUtils.java	round	x	double	1	RET	Double.isInfinite($)
333	1285	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
334	1295	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
335	1304	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
336	1313	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
337	1315	19	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
338	1319	16	MathUtils.java	roundUnscaled	unscaled	double	1	DEF	FastMath.floor($) / 2.0 == FastMath.floor(Math .floor($) / 2.0)
339	1331	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
340	1339	12	MathUtils.java	roundUnscaled	unscaled	double	0	ArithmeticException	$ != FastMath.floor($)
341	1389	8	MathUtils.java	sign	x	double	0	RET	Double.isNaN($)
342	1407	8	MathUtils.java	sign	x	float	0	RET	Float.isNaN($)
343	1479	8	MathUtils.java	subAndCheck	s	long	0	DEF	$ > Integer.MAX_VALUE
343	1479	8	MathUtils.java	subAndCheck	s	long	0	DEF	$ < Integer.MIN_VALUE
344	1498	8	MathUtils.java	subAndCheck	b	long	1	ArithmeticException	$ == Long.MIN_VALUE
345	1499	12	MathUtils.java	subAndCheck	a	long	1	DEF	$ < 0
346	1521	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
34290	1529	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
347	1530	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
348	1551	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
34291	1559	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
349	1560	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
350	1581	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
34292	1589	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
351	1590	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
352	1611	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
34293	1619	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
353	1620	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
354	1641	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
355	1661	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
34294	1669	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
356	1670	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
357	1691	8	MathUtils.java	pow	e	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
34295	1699	8	MathUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
358	1700	12	MathUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
34296	1720	8	MathUtils.java	distance1	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
34296	1720	8	MathUtils.java	distance1	i	int	0	NIL-FOR	$ < p1.length
34296	1720	8	MathUtils.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
34297	1735	6	MathUtils.java	distance1	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
34297	1735	6	MathUtils.java	distance1	i	int	0	NIL-FOR	$ < p1.length
34297	1735	6	MathUtils.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
34298	1750	8	MathUtils.java	distance	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
34298	1750	8	MathUtils.java	distance	i	int	0	NIL-FOR	$ < p1.length
34298	1750	8	MathUtils.java	distance	p1	double[]	0	NIL-FOR	i < $.length
34299	1766	6	MathUtils.java	distance	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
34299	1766	6	MathUtils.java	distance	i	int	0	NIL-FOR	$ < p1.length
34299	1766	6	MathUtils.java	distance	p1	int[]	0	NIL-FOR	i < $.length
34300	1782	8	MathUtils.java	distanceInf	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
34300	1782	8	MathUtils.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
34300	1782	8	MathUtils.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
34301	1797	8	MathUtils.java	distanceInf	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
34301	1797	8	MathUtils.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
34301	1797	8	MathUtils.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
34302	1826	8	MathUtils.java	checkOrder	i	int	0	NIL-FOR	$ < max
34302	1826	8	MathUtils.java	checkOrder	max	int	0	NIL-FOR	i < $
359	1829	16	MathUtils.java	checkOrder	strict	boolean	1	DEF	$
360	1830	20	MathUtils.java	checkOrder	i	int	0	DEF	val[$] <= previous
360	1830	20	MathUtils.java	checkOrder	previous	double	0	DEF	val[i] <= $
360	1830	20	MathUtils.java	checkOrder	val	double[]	0	DEF	$[i] <= previous
361	1834	20	MathUtils.java	checkOrder	i	int	0	DEF	val[$] < previous
361	1834	20	MathUtils.java	checkOrder	previous	double	0	DEF	val[i] < $
361	1834	20	MathUtils.java	checkOrder	val	double[]	0	DEF	$[i] < previous
362	1840	16	MathUtils.java	checkOrder	strict	boolean	1	DEF	$
363	1841	20	MathUtils.java	checkOrder	i	int	0	DEF	val[$] >= previous
363	1841	20	MathUtils.java	checkOrder	previous	double	0	DEF	val[i] >= $
363	1841	20	MathUtils.java	checkOrder	val	double[]	0	DEF	$[i] >= previous
364	1845	20	MathUtils.java	checkOrder	i	int	0	DEF	val[$] > previous
364	1845	20	MathUtils.java	checkOrder	previous	double	0	DEF	val[i] > $
364	1845	20	MathUtils.java	checkOrder	val	double[]	0	DEF	$[i] > previous
365	1855	12	MathUtils.java	checkOrder	ok	boolean	0	NonMonotonousSequenceException	$
34303	1941	4	MathUtils.java	safeNorm	THIS	MathUtils	0	NIL-FOR	i<v.$.length
34303	1941	4	MathUtils.java	safeNorm	i	int	0	NIL-FOR	$<v.length
34303	1941	4	MathUtils.java	safeNorm	v	double[]	0	NIL-FOR	i<$.length
366	1943	8	MathUtils.java	safeNorm	xabs	double	1	DEF	$<rdwarf
366	1943	8	MathUtils.java	safeNorm	xabs	double	1	DEF	$>agiant
366	1943	8	MathUtils.java	safeNorm	rdwarf	double	1	DEF	xabs<$
366	1943	8	MathUtils.java	safeNorm	agiant	double	1	DEF	xabs>$
367	1944	12	MathUtils.java	safeNorm	xabs	double	1	DEF	$>rdwarf
367	1944	12	MathUtils.java	safeNorm	rdwarf	double	1	DEF	xabs>$
368	1945	16	MathUtils.java	safeNorm	xabs	double	1	DEF	$>x1max
368	1945	16	MathUtils.java	safeNorm	x1max	double	1	DEF	xabs>$
369	1954	16	MathUtils.java	safeNorm	xabs	double	1	DEF	$>x3max
369	1954	16	MathUtils.java	safeNorm	x3max	double	1	DEF	xabs>$
370	1959	20	MathUtils.java	safeNorm	xabs	double	0	DEF	$!=0.0
371	1970	4	MathUtils.java	safeNorm	s1	double	1	DEF	$!=0.0
372	1973	8	MathUtils.java	safeNorm	s2	double	1	DEF	$==0.0
373	1976	12	MathUtils.java	safeNorm	s2	double	1	DEF	$>=x3max
373	1976	12	MathUtils.java	safeNorm	x3max	double	1	DEF	s2>=$
34862	144	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
34862	144	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
34863	166	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
34863	166	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
34864	186	8	MatrixUtils.java	createBigIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
34864	186	8	MatrixUtils.java	createBigIdentityMatrix	dimension	int	0	NIL-FOR	row < $
34865	204	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
34865	204	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
34865	204	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
34866	223	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
34866	223	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
34866	223	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
34867	336	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
34867	336	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
985	355	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	DEF	$ == 0
34868	359	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
34868	359	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
34869	379	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
34869	379	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
34870	417	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
34870	417	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
34871	435	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
34871	435	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
986	454	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	DEF	$ == 0
34872	458	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
34872	458	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
34873	478	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
34873	478	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
34874	498	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
34874	498	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
34875	518	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
34875	518	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
987	531	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	MatrixIndexException	row >= $.getRowDimension()
987	531	8	MatrixUtils.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= m.getRowDimension()
987	531	8	MatrixUtils.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
988	545	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	MatrixIndexException	column >= $.getColumnDimension()
988	545	8	MatrixUtils.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= m.getColumnDimension()
988	545	8	MatrixUtils.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
989	567	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	MatrixIndexException	$ > endRow
989	567	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	MatrixIndexException	startRow > $
990	574	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	MatrixIndexException	$ > endColumn
990	574	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	MatrixIndexException	startColumn > $
991	594	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
991	594	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
991	594	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
992	595	12	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	MatrixIndexException	selectedRows.$.length == 0
992	595	12	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length == 0
993	617	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	DEF	$.getRowDimension() != right.getRowDimension()
993	617	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	DEF	$.getColumnDimension() != right.getColumnDimension()
993	617	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	DEF	left.getRowDimension() != $.getRowDimension()
993	617	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	DEF	left.getColumnDimension() != $.getColumnDimension()
994	634	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	DEF	$.getRowDimension() != right.getRowDimension()
994	634	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	DEF	$.getColumnDimension() != right.getColumnDimension()
994	634	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	DEF	left.getRowDimension() != $.getRowDimension()
994	634	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	DEF	left.getColumnDimension() != $.getColumnDimension()
995	651	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DEF	$.getColumnDimension() != right.getRowDimension()
995	651	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DEF	left.getColumnDimension() != $.getRowDimension()
34876	792	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
34876	792	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
34877	823	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
34877	823	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
34878	895	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
34878	895	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
34879	896	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
34879	896	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
34880	929	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
34880	929	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
34881	931	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
34881	931	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1431	74	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
1431	74	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
1431	74	8	Max.java	increment	d	double	0	DEF	$ > value
1432	129	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
1432	129	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1432	129	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
1432	129	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
35317	131	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
35317	131	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
35317	131	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1433	132	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1433	132	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1361	107	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
1362	117	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
1363	155	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
1363	155	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
1363	155	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
1363	155	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
35303	164	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
35303	164	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
35303	164	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1364	203	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, weights, begin, length)
1364	203	8	Mean.java	evaluate	values	double[]	0	RET	test($, weights, begin, length)
1364	203	8	Mean.java	evaluate	weights	double[]	0	RET	test(values, $, begin, length)
1364	203	8	Mean.java	evaluate	begin	int	0	RET	test(values, weights, $, length)
1364	203	8	Mean.java	evaluate	length	int	0	RET	test(values, weights, begin, $)
35304	212	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
35304	212	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
35304	212	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
35413	146	8	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
1624	163	8	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
35414	172	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
1625	178	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
1626	182	12	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
1626	182	12	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
1626	182	12	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
35415	187	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
1627	193	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
1628	227	8	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
35416	229	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
35417	235	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
1727	68	8	MessageFactory.java	buildMessage	specific	Localizable	0	DEF	$ != null
2270	153	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NoDataException	xval.$.length == 0
2270	153	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NoDataException	$.length == 0
2270	153	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NoDataException	$[0] == null
2271	157	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xval.$.length != yval.$.length
2271	157	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DimensionMismatchException	$.length != yval.length
2271	157	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	DimensionMismatchException	xval.length != $.length
35747	166	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NIL-FOR	i < xval.$.length
35747	166	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < xval.length
35747	166	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NIL-FOR	i < $.length
2272	168	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xvalI.$.length != $.dimension
2272	168	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	DimensionMismatchException	$.length != dimension
35748	178	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < microsphereElements
35748	178	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	microsphereElements	int	0	NIL-FOR	i < $
2273	204	12	MicrosphereInterpolatingFunction.java	value	diffNorm	double	0	RET	FastMath.abs($) < FastMath.ulp(1d)
2274	223	12	MicrosphereInterpolatingFunction.java	value	sd	Entry<RealVector,Double>	0	DEF	$ != null
2302	101	8	MicrosphereInterpolator.java	setBrightnessExponent	exponent	int	0	NotPositiveException	$ < 0
2303	113	8	MicrosphereInterpolator.java	setMicropshereElements	elements	int	0	NotStrictlyPositiveException	$ <= 0
35628	91	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
35628	91	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1428	74	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
1428	74	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
1428	74	8	Min.java	increment	d	double	0	DEF	$ < value
1429	129	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
1429	129	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1429	129	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
1429	129	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
35316	131	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
35316	131	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
35316	131	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1430	132	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1430	132	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
2349	97	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
2349	97	8	MullerSolver.java	solve	min	double	0	RET	f.value($) == 0.0
2350	98	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
2350	98	8	MullerSolver.java	solve	max	double	0	RET	f.value($) == 0.0
2351	99	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
2351	99	8	MullerSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
2352	103	8	MullerSolver.java	solve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial, f)
2352	103	8	MullerSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
2352	103	8	MullerSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
2352	103	8	MullerSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
2353	152	8	MullerSolver.java	solve	y0	double	0	RET	$ == 0.0
2354	155	8	MullerSolver.java	solve	y2	double	0	RET	$ == 0.0
35824	161	8	MullerSolver.java	solve	THIS	MullerSolver	0	NIL-FOR	i <= $.maximalIterationCount
35824	161	8	MullerSolver.java	solve	i	int	0	NIL-FOR	$ <= maximalIterationCount
2355	180	12	MullerSolver.java	solve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
2355	180	12	MullerSolver.java	solve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
2355	180	12	MullerSolver.java	solve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
2356	184	12	MullerSolver.java	solve	THIS	MullerSolver	0	RET	FastMath.abs(y) <= $.functionValueAccuracy
2356	184	12	MullerSolver.java	solve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2357	197	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
2358	207	16	MullerSolver.java	solve	ym	double	1	DEF	MathUtils.sign(y0) + MathUtils.sign($) == 0.0
2358	207	16	MullerSolver.java	solve	y0	double	1	DEF	MathUtils.sign($) + MathUtils.sign(ym) == 0.0
2359	295	8	MullerSolver.java	solve2	y0	double	0	RET	$ == 0.0
2360	296	8	MullerSolver.java	solve2	y1	double	0	RET	$ == 0.0
35825	300	8	MullerSolver.java	solve2	THIS	MullerSolver	0	NIL-FOR	i <= $.maximalIterationCount
35825	300	8	MullerSolver.java	solve2	i	int	0	NIL-FOR	$ <= maximalIterationCount
2361	309	12	MullerSolver.java	solve2	delta	double	1	DEF	$ >= 0.0
2362	318	12	MullerSolver.java	solve2	denominator	double	1	DEF	$ != 0
35826	322	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x2
35826	322	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x1
35826	322	16	MullerSolver.java	solve2	x1	double	0	NIL-WHILE	x == $
35826	322	16	MullerSolver.java	solve2	x2	double	0	NIL-WHILE	x == $
2363	334	12	MullerSolver.java	solve2	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
2363	334	12	MullerSolver.java	solve2	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
2363	334	12	MullerSolver.java	solve2	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
2364	338	12	MullerSolver.java	solve2	THIS	MullerSolver	0	RET	FastMath.abs(y) <= $.functionValueAccuracy
2364	338	12	MullerSolver.java	solve2	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
1302	77	12	MultiDirectional.java	iterateSimplex	best	RealPointValuePair	0	RET	comparator.compare(reflected, $) < 0
1302	77	12	MultiDirectional.java	iterateSimplex	reflected	RealPointValuePair	0	RET	comparator.compare($, best) < 0
1302	77	12	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(reflected, best) < 0
1303	82	16	MultiDirectional.java	iterateSimplex	expanded	RealPointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
1303	82	16	MultiDirectional.java	iterateSimplex	reflected	RealPointValuePair	0	DEF	comparator.compare($, expanded) <= 0
1303	82	16	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
1304	92	12	MultiDirectional.java	iterateSimplex	best	RealPointValuePair	0	RET	comparator.compare(contracted, $) < 0
1304	92	12	MultiDirectional.java	iterateSimplex	contracted	RealPointValuePair	0	RET	comparator.compare($, best) < 0
1304	92	12	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(contracted, best) < 0
35271	99	12	MultiDirectional.java	iterateSimplex	THIS	MultiDirectional	0	NIL-FOR	i < $.simplex.$.length
35271	99	12	MultiDirectional.java	iterateSimplex	i	int	0	NIL-FOR	$ < simplex.length
1305	102	12	MultiDirectional.java	iterateSimplex	converged	boolean	0	RET	$
35272	132	8	MultiDirectional.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ <= n
35272	132	8	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	i <= $
35273	135	12	MultiDirectional.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < n
35273	135	12	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	j < $
1135	134	8	MultiStartUnivariateRealOptimizer.java	getOptima	THIS	MultiStartUnivariateRealOptimizer	0	MathIllegalStateException	$.optima == null
35155	157	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	NIL-FOR	i < $.starts
35155	157	8	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1136	174	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	ConvergenceException	$.optima[0] == null
34247	173	8	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
34247	173	8	MultidimensionalCounter.java	MultidimensionalCounter	i	int	0	NIL-FOR	$ < last
34248	175	12	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	j < $.dimension
34248	175	12	MultidimensionalCounter.java	MultidimensionalCounter	j	int	0	NIL-FOR	$ < dimension
16	183	8	MultidimensionalCounter.java	MultidimensionalCounter	tS	int	0	NotStrictlyPositiveException	$ <= 0
17	217	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.totalSize
17	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ < 0
17	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ >= totalSize
34249	225	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
34249	225	8	MultidimensionalCounter.java	getCounts	i	int	0	NIL-FOR	$ < last
34250	228	12	MultidimensionalCounter.java	getCounts	count	int	0	NIL-WHILE	$ <= index
34250	228	12	MultidimensionalCounter.java	getCounts	index	int	0	NIL-WHILE	count <= $
34251	238	8	MultidimensionalCounter.java	getCounts	count	int	0	NIL-WHILE	$ < index
34251	238	8	MultidimensionalCounter.java	getCounts	index	int	0	NIL-WHILE	count < $
18	260	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	DimensionMismatchException	c.$.length != $.dimension
18	260	8	MultidimensionalCounter.java	getCount	c	int	0	DimensionMismatchException	$.length != dimension
34252	264	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
34252	264	8	MultidimensionalCounter.java	getCount	i	int	0	NIL-FOR	$ < dimension
19	266	12	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.size[i]
19	266	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ >= size[i]
19	266	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ < 0
19	266	12	MultidimensionalCounter.java	getCount	i	int	0	OutOfRangeException	index >= size[$]
34253	297	8	MultidimensionalCounter.java	toString	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
34253	297	8	MultidimensionalCounter.java	toString	i	int	0	NIL-FOR	$ < dimension
1935	116	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	DEF	$ <= 0
1936	228	12	MultistepIntegrator.java	start	THIS	MultistepIntegrator	0	DEF	$.de instanceof InitializationCompletedMarkerException
35287	124	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
35287	124	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
35288	149	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
35288	149	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
35289	186	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
35289	186	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
35289	186	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
1321	245	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
1322	247	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
35290	251	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
35290	251	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
35291	335	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
35291	335	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
35291	335	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
1323	336	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
35292	349	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
35292	349	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
1324	369	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
1324	369	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
1325	372	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
1326	618	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	DEF	$.n > 0
1327	632	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
1327	632	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
35355	194	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
35355	194	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
35355	194	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
35356	227	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
35356	227	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
35356	227	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1504	228	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
1504	228	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
1505	231	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
1506	242	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
1507	245	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
1508	259	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
1508	259	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
35357	264	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
35357	264	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
35357	264	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1509	265	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
1509	265	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
35358	267	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
35358	267	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
35358	267	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
35359	289	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
35359	289	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
35359	289	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1510	290	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
1510	290	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
35360	304	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
35360	304	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
35360	304	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1511	305	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
1511	305	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
35361	347	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
35362	357	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
35363	375	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
1512	387	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
35364	391	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
35365	405	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
35365	405	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
35365	405	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1513	406	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
1513	406	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
35258	89	8	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < n
35258	89	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	i < $
35259	91	12	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
35259	91	12	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
35260	96	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
35260	96	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
35261	102	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
35261	102	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1279	108	8	NelderMead.java	iterateSimplex	best	RealPointValuePair	1	DEF	comparator.compare($, reflected) <= 0
1279	108	8	NelderMead.java	iterateSimplex	secondBest	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1279	108	8	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare($, secondBest) < 0
1279	108	8	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare(best, $) <= 0
1279	108	8	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
1279	108	8	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(best, reflected) <= 0
1280	114	15	NelderMead.java	iterateSimplex	best	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1280	114	15	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare($, best) < 0
1280	114	15	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, best) < 0
35262	118	12	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
35262	118	12	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1281	124	12	NelderMead.java	iterateSimplex	expanded	RealPointValuePair	1	DEF	comparator.compare($, reflected) < 0
1281	124	12	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare(expanded, $) < 0
1281	124	12	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
1282	134	12	NelderMead.java	iterateSimplex	worst	RealPointValuePair	1	RET	comparator.compare(reflected, $) < 0
1282	134	12	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	RET	comparator.compare($, worst) < 0
1282	134	12	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	RET	$.compare(reflected, worst) < 0
35263	138	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
35263	138	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1283	144	16	NelderMead.java	iterateSimplex	outContracted	RealPointValuePair	0	RET	comparator.compare($, reflected) <= 0
1283	144	16	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
1283	144	16	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
35264	154	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
35264	154	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1284	160	16	NelderMead.java	iterateSimplex	inContracted	RealPointValuePair	0	RET	comparator.compare($, worst) < 0
1284	160	16	NelderMead.java	iterateSimplex	worst	RealPointValuePair	0	RET	comparator.compare(inContracted, $) < 0
1284	160	16	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(inContracted, worst) < 0
35265	170	12	NelderMead.java	iterateSimplex	THIS	NelderMead	0	NIL-FOR	i < $.simplex.$.length
35265	170	12	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < simplex.length
35266	172	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
35266	172	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
35822	120	12	NewtonSolver.java	solve	THIS	NewtonSolver	0	NIL-WHILE	i < $.maximalIterationCount
35822	120	12	NewtonSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
2336	123	16	NewtonSolver.java	solve	THIS	NewtonSolver	0	RET	FastMath.abs(x1 - x0) <= $.absoluteAccuracy
2336	123	16	NewtonSolver.java	solve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
2336	123	16	NewtonSolver.java	solve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
1267	103	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
1268	115	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.preconditioner == null
1269	118	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.solver == null
1270	125	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1270	125	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
35244	126	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
35244	126	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
35245	136	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
35245	136	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1271	148	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	$ != null
1272	149	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	RET	$.getConvergenceChecker().converged(iter, previous, current)
1272	149	16	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	getConvergenceChecker().converged(iter, $, current)
1272	149	16	NonLinearConjugateGradientOptimizer.java	doOptimize	current	RealPointValuePair	0	RET	getConvergenceChecker().converged(iter, previous, $)
1272	149	16	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	0	RET	getConvergenceChecker().converged($, previous, current)
35246	166	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
35246	166	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
1273	174	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1273	174	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
35247	175	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
35247	175	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
35248	184	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
35248	184	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1274	189	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
35249	193	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
35249	193	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
35249	193	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
1275	201	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
1275	201	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	iter % $ == 0
1275	201	12	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	1	DEF	$ % n == 0
35250	207	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
35250	207	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
35251	229	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
1276	232	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
1276	232	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
1756	85	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
1756	85	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
1757	88	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
1757	88	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
1758	91	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
1758	91	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
35534	146	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
35534	146	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
35535	152	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
35535	152	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
35535	152	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
35536	155	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
35536	155	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
35536	155	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
35537	198	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
35538	202	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
35538	202	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
35538	202	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
35539	209	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
35539	209	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
1759	231	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
35540	235	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
35540	235	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
1760	240	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
1761	265	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
35541	267	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
35541	267	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
1762	275	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
1763	281	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
1763	281	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
643	141	8	NormalDistributionImpl.java	setStandardDeviationInternal	sd	double	0	DEF	$ <= 0.0
644	185	12	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x < ($.mean - 20 * $.standardDeviation)
644	185	12	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ < (mean - 20 * standardDeviation)
645	187	19	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x > ($.mean + 20 * $.standardDeviation)
645	187	19	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ > (mean + 20 * standardDeviation)
646	224	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
647	227	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
648	258	8	NormalDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
649	280	8	NormalDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
650	301	8	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
651	303	15	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
35371	107	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
35371	107	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
35372	108	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
35372	108	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
1538	109	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
1538	109	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
1538	109	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
1538	109	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
1539	134	8	OLSMultipleLinearRegression.java	calculateTotalSumOfSquares	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
1540	181	8	OLSMultipleLinearRegression.java	calculateAdjustedRSquared	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
1669	71	8	OnePointCrossover.java	crossover	first	Chromosome	0	IllegalArgumentException	$ instanceof AbstractListChromosome<?>
1669	71	8	OnePointCrossover.java	crossover	second	Chromosome	0	IllegalArgumentException	$ instanceof AbstractListChromosome<?>
1670	87	8	OnePointCrossover.java	crossover	length	int	0	IllegalArgumentException	$ != second.getLength()
1670	87	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	IllegalArgumentException	length != $.getLength()
35435	101	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
35435	101	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
35436	106	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
35436	106	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
1460	104	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	DEF	$ <= 0
1460	104	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	DEF	$ > 0.5
1461	127	8	OneWayAnovaImpl.java	anovaStats	categoryData	Collection<double[]>	0	DEF	$.size() < 2
1462	135	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	DEF	$.array.$.length <= 1
35320	154	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	NIL-FOR	i < $.data.$.length
35320	154	12	OneWayAnovaImpl.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
49	153	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
50	158	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
50	158	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
51	182	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
51	182	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
51	182	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
52	186	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
52	186	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
34255	191	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
34255	191	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
53	194	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
53	194	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
53	194	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
54	212	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
54	212	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
54	212	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
55	216	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
55	216	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
34256	221	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
34256	221	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
56	224	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
56	224	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
56	224	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
57	274	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
57	274	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
58	276	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
58	276	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
58	276	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
58	276	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
58	276	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
59	282	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
59	282	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
60	288	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
60	288	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
60	288	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
60	288	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
60	288	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
61	294	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
61	294	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
62	296	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
62	296	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
63	307	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
63	307	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
64	309	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
64	309	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
64	309	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
64	309	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
64	309	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
65	356	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
65	356	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
65	356	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
66	360	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
66	360	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
34257	365	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
34257	365	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
67	368	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
67	368	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
67	368	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
68	413	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
69	421	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
70	423	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
34258	447	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
34258	447	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
71	448	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
71	448	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
378	165	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
379	170	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
379	170	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
380	194	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
380	194	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
380	194	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
381	198	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
381	198	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
34304	203	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
34304	203	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
382	206	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
382	206	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
382	206	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
383	224	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
383	224	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
383	224	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
384	228	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
384	228	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
34305	233	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
34305	233	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
385	236	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
385	236	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
385	236	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
386	286	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
386	286	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
387	288	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
387	288	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
387	288	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
387	288	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
387	288	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
388	294	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
388	294	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
389	300	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
389	300	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
389	300	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
389	300	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
389	300	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
390	306	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
390	306	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
391	308	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
391	308	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
392	319	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
392	319	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
393	321	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
393	321	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
393	321	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
393	321	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
393	321	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
394	368	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
394	368	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
394	368	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
395	372	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
395	372	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
34306	377	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
34306	377	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
396	380	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
396	380	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
396	380	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
397	425	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
398	433	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
399	435	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
34307	459	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
34307	459	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
400	460	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
400	460	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
35146	109	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
35147	144	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
35148	168	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
35149	174	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
35149	174	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
35150	199	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
35151	205	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
35151	205	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
1117	207	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
1117	207	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
1117	207	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
1118	211	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
1119	244	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
1120	259	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
1121	274	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
35050	132	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
35050	132	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
35050	132	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
1048	134	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1048	134	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
35051	159	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
35051	159	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
35051	159	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
1049	161	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1049	161	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
35052	185	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
35052	185	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
1050	187	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1050	187	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
1051	215	8	OpenMapRealVector.java	add	v	RealVector	1	RET	$ instanceof OpenMapRealVector
35053	234	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1052	237	12	OpenMapRealVector.java	add	key	int	1	DEF	randomAccess.containsKey($)
1052	237	12	OpenMapRealVector.java	add	randomAccess	OpenIntToDoubleHashMap	1	DEF	$.containsKey(key)
35054	254	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1053	263	8	OpenMapRealVector.java	append	v	RealVector	0	RET	$ instanceof OpenMapRealVector
35055	279	8	OpenMapRealVector.java	append	THIS	OpenMapRealVector	0	NIL-FOR	i < a.$.length
35055	279	8	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < a.length
35055	279	8	OpenMapRealVector.java	append	a	double[]	0	NIL-FOR	i < $.length
35056	307	8	OpenMapRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
1054	317	8	OpenMapRealVector.java	dotProduct	v	RealVector	1	RET	$ instanceof OpenMapRealVector
35057	329	8	OpenMapRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
35058	342	8	OpenMapRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
35059	354	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
35060	367	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
35061	381	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1055	384	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
1055	384	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
1055	384	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
1055	384	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
35062	396	8	OpenMapRealVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
35063	417	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
35064	425	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1056	428	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1056	428	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
1057	440	8	OpenMapRealVector.java	getDistance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
35065	451	8	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
35065	451	8	OpenMapRealVector.java	getDistance	i	int	0	NIL-FOR	$ < v.length
35065	451	8	OpenMapRealVector.java	getDistance	v	double[]	0	NIL-FOR	i < $.length
35066	475	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
35067	481	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1058	484	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1058	484	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
1059	496	8	OpenMapRealVector.java	getL1Distance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
35068	507	8	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
35068	507	8	OpenMapRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < v.length
35068	507	8	OpenMapRealVector.java	getL1Distance	v	double[]	0	NIL-FOR	i < $.length
35069	522	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1060	525	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
1060	525	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
35070	530	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1061	533	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1061	533	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
1062	534	16	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
1062	534	16	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
1063	546	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
35071	557	8	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
35071	557	8	OpenMapRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < v.length
35071	557	8	OpenMapRealVector.java	getLInfDistance	v	double[]	0	NIL-FOR	i < $.length
1064	559	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
1064	559	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
35072	570	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
1065	573	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
1066	576	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
35073	586	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
1067	588	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
35074	604	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
35074	604	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
35075	616	8	OpenMapRealVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
35076	620	12	OpenMapRealVector.java	outerProduct	THIS	OpenMapRealVector	0	NIL-FOR	col < $.virtualSize
35076	620	12	OpenMapRealVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
1068	643	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isDefaultValue(value)
1068	643	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isDefaultValue($)
1069	645	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
1069	645	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
35077	663	8	OpenMapRealVector.java	setSubVector	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
35077	663	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
35077	663	8	OpenMapRealVector.java	setSubVector	v	double[]	0	NIL-FOR	i < $.length
35078	671	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
35078	671	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
35079	686	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1070	689	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
1070	689	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1071	702	8	OpenMapRealVector.java	subtract	v	RealVector	0	RET	$ instanceof OpenMapRealVector
35080	713	8	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
35080	713	8	OpenMapRealVector.java	subtract	i	int	0	NIL-FOR	$ < v.length
35080	713	8	OpenMapRealVector.java	subtract	v	double[]	0	NIL-FOR	i < $.length
1072	714	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(i)
1072	714	12	OpenMapRealVector.java	subtract	i	int	1	DEF	entries.containsKey($)
1073	736	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(norm)
1073	736	8	OpenMapRealVector.java	unitize	norm	double	0	DEF	isDefaultValue($)
35081	740	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
35082	768	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1074	784	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
1074	784	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
1075	787	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
1076	791	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
1076	791	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
1077	794	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
1077	794	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
35083	799	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1078	802	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
1078	802	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
35084	807	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1079	810	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
1079	810	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
1079	810	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
1161	155	8	ParametricGaussianFunction.java	validateParameters	parameters	double[]	0	NullArgumentException	$ == null
1162	158	8	ParametricGaussianFunction.java	validateParameters	THIS	ParametricGaussianFunction	0	DimensionMismatchException	parameters.$.length != 4
1162	158	8	ParametricGaussianFunction.java	validateParameters	parameters	double[]	0	DimensionMismatchException	$.length != 4
1163	161	8	ParametricGaussianFunction.java	validateParameters	parameters	double[]	0	ZeroException	$[3] == 0.0
721	91	8	PascalDistributionImpl.java	setNumberOfSuccessesInternal	successes	int	0	DEF	$ < 0
722	117	8	PascalDistributionImpl.java	setProbabilityOfSuccessInternal	p	double	0	DEF	$ < 0.0
722	117	8	PascalDistributionImpl.java	setProbabilityOfSuccessInternal	p	double	0	DEF	$ > 1.0
723	159	8	PascalDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
724	175	8	PascalDistributionImpl.java	probability	x	int	1	DEF	$ < 0
725	204	8	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
726	206	15	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
1494	97	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	NullArgumentException	$ == null
35342	142	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
35342	142	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
35343	143	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
35343	143	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
35344	168	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
35344	168	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
35345	169	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
35345	169	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
1495	170	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
1495	170	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
35346	193	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
35346	193	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
35347	194	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
35347	194	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
1496	230	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
1496	230	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
1496	230	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
1497	232	15	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DEF	xArray.$.length < 2
1497	232	15	PearsonsCorrelation.java	correlation	xArray	double[]	1	DEF	$.length < 2
35348	236	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
35348	236	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
35348	236	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
35349	257	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
35349	257	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
35350	260	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
35350	260	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
1498	279	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	DEF	$ < 2
1498	279	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	DEF	$ < 2
1434	202	8	Percentile.java	evaluate	p	double	0	DEF	$ <= 0
1434	202	8	Percentile.java	evaluate	p	double	0	DEF	$ > 100
1435	206	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
1436	209	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
1437	221	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
1438	224	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
1438	224	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
1439	251	8	Percentile.java	setQuantile	p	double	0	DEF	$ <= 0
1439	251	8	Percentile.java	setQuantile	p	double	0	DEF	$ > 100
638	93	8	PoissonDistributionImpl.java	PoissonDistributionImpl	p	double	0	DEF	$ <= 0
639	142	8	PoissonDistributionImpl.java	probability	x	int	1	DEF	$ == Integer.MAX_VALUE
639	142	8	PoissonDistributionImpl.java	probability	x	int	1	DEF	$ < 0
640	144	15	PoissonDistributionImpl.java	probability	x	int	1	DEF	$ == 0
641	165	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ < 0
642	168	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
2432	67	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NoDataException	$ == 0
35851	70	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	c[$ - 1] == 0
35851	70	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	$ > 1
35851	70	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[n - 1] == 0
2433	126	8	PolynomialFunction.java	evaluate	n	int	0	NoDataException	$ == 0
35852	130	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >=0
35853	149	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
35853	149	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
35854	175	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
35854	175	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
2434	178	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
2434	178	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
35855	179	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
35855	179	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
35856	197	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
35856	197	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
35857	212	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
35857	212	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
35857	212	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
35858	214	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < FastMath.min($.coefficients.$.length, i + 1)
35858	214	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < FastMath.min(coefficients.length, i + 1)
35858	214	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < FastMath.min(coefficients.length, $ + 1)
2435	235	8	PolynomialFunction.java	differentiate	n	int	0	NoDataException	$ == 0
2436	238	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
35859	242	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
2437	285	7	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
2438	286	9	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
35860	293	7	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
35860	293	7	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
2439	295	9	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
2439	295	9	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
2440	297	11	PolynomialFunction.java	toString	s	StringBuffer	1	DEF	$.length() > 0
2441	298	13	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
2441	298	13	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
2442	304	13	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
2442	304	13	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
2443	310	11	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
2444	316	11	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
2445	340	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
2445	340	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
2446	342	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
2447	345	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
2447	345	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
2423	145	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
35841	178	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
35841	178	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
2424	184	12	PolynomialFunctionLagrangeForm.java	evaluate	dist	double	0	DEF	$ < min_dist
2424	184	12	PolynomialFunctionLagrangeForm.java	evaluate	min_dist	double	0	DEF	dist < $
35842	193	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
35842	193	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
35843	194	12	PolynomialFunctionLagrangeForm.java	evaluate	j	int	0	NIL-FOR	$ < n-i
35843	194	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	j < n-$
35843	194	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	j < $-i
2425	198	16	PolynomialFunctionLagrangeForm.java	evaluate	divider	double	0	DuplicateSampleAbscissaException	$ == 0.0
2426	208	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	1	DEF	nearest < 0.5*(n-$+1)
2426	208	12	PolynomialFunctionLagrangeForm.java	evaluate	nearest	int	1	DEF	$ < 0.5*(n-i+1)
2426	208	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	1	DEF	nearest < 0.5*($-i+1)
35844	232	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
35844	232	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
35845	239	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
35845	239	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
35846	240	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
35847	248	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
35847	248	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
35848	251	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
35848	251	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
2427	252	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
2427	252	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
2428	256	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	d	double	0	DEF	$ == 0.0
35849	258	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	NIL-FOR	$ < n
35849	258	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	k < $
2429	259	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.x[i] == $.x[k]
2429	259	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	x[i] == x[$]
2429	259	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	i != $
2429	259	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	x[$] == x[k]
2429	259	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != k
35850	272	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
2430	301	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DEF	x.$.length != y.$.length
2430	301	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DEF	$.length != y.length
2430	301	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DEF	x.length != $.length
2431	306	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DEF	x.$.length < 2
2431	306	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DEF	$.length < 2
2449	139	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
35864	166	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
35865	181	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
35865	181	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
35866	186	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
35867	187	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
2450	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DEF	c.$.length < 1
2450	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DEF	a.$.length < 1
2450	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DEF	$.length < 1
2450	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DEF	$.length < 1
2451	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DEF	a.$.length != c.$.length + 1
2451	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DEF	$.length != c.length + 1
2451	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DEF	a.length != $.length + 1
2416	99	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DEF	knots.$.length < 2
2416	99	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DEF	$.length < 2
2417	104	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DEF	knots.$.length - 1 != polynomials.$.length
2417	104	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DEF	$.length - 1 != polynomials.length
2417	104	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DEF	knots.length - 1 != $.length
2418	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DEF	$.isStrictlyIncreasing(knots)
2418	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DEF	isStrictlyIncreasing($)
2419	137	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v < $.knots[0]
2419	137	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v > $.knots[$.n]
2419	137	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ < knots[0]
2419	137	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ > knots[n]
2420	141	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
2421	147	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
2421	147	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
35839	168	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
35839	168	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
35840	221	8	PolynomialSplineFunction.java	isStrictlyIncreasing	THIS	PolynomialSplineFunction	0	NIL-FOR	i < x.$.length
35840	221	8	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	NIL-FOR	$ < x.length
35840	221	8	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	NIL-FOR	i < $.length
2422	222	12	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	RET	x[$ - 1] >= x[$]
2422	222	12	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	RET	$[i - 1] >= $[i]
2448	199	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
2448	199	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
35861	215	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
35861	215	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
35862	235	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
35862	235	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
35863	251	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
35863	251	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
1293	82	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1294	85	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
35267	120	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
35267	120	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
35268	140	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
35268	140	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1295	151	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
1295	151	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
1295	151	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
1296	164	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
1297	165	16	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<RealPointValuePair>	0	DEF	$ != null
1298	169	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
1299	170	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
1299	170	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
35269	179	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
35269	179	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1300	187	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
1300	187	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
1301	194	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
35270	227	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
35270	227	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
1338	120	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length, true)
1338	120	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1338	120	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1338	120	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
35298	122	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
35298	122	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
35298	122	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1339	160	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, weights, begin, length, true)
1339	160	8	Product.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
1339	160	8	Product.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
1339	160	8	Product.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
1339	160	8	Product.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
35299	162	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
35299	162	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
35299	162	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
573	100	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
574	103	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
575	138	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
576	149	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
577	162	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
578	170	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
579	201	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
580	209	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
581	216	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
582	220	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
583	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
556	101	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
557	138	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
558	149	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
559	162	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
560	170	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
561	201	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
562	209	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
563	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
34891	88	8	QRDecompositionImpl.java	QRDecompositionImpl	minor	int	0	NIL-FOR	$ < FastMath.min(m, n)
34891	88	8	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	minor < FastMath.min($, n)
34891	88	8	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	minor < FastMath.min(m, $)
34892	100	12	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
34892	100	12	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
1010	107	12	QRDecompositionImpl.java	QRDecompositionImpl	a	double	0	DEF	$ != 0.0
34893	131	16	QRDecompositionImpl.java	QRDecompositionImpl	col	int	0	NIL-FOR	$ < n
34893	131	16	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	col < $
34894	134	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
34894	134	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
34895	140	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
34895	140	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
1011	151	8	QRDecompositionImpl.java	getR	THIS	QRDecompositionImpl	0	DEF	$.cachedR == null
34896	159	12	QRDecompositionImpl.java	getR	row	int	0	NIL-FOR	$ >= 0
34897	161	16	QRDecompositionImpl.java	getR	col	int	0	NIL-FOR	$ < n
34897	161	16	QRDecompositionImpl.java	getR	n	int	0	NIL-FOR	col < $
1012	175	8	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	DEF	$.cachedQ == null
1013	184	8	QRDecompositionImpl.java	getQT	THIS	QRDecompositionImpl	0	DEF	$.cachedQT == null
34898	196	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= FastMath.min(m, n)
34898	196	12	QRDecompositionImpl.java	getQT	n	int	0	NIL-FOR	minor >= FastMath.min(m, $)
34898	196	12	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	minor >= FastMath.min($, n)
34899	200	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= 0
1014	203	16	QRDecompositionImpl.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
1014	203	16	QRDecompositionImpl.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
34900	204	20	QRDecompositionImpl.java	getQT	col	int	0	NIL-FOR	$ < m
34900	204	20	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	col < $
34901	206	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
34901	206	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
34902	211	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
34902	211	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
1015	228	8	QRDecompositionImpl.java	getH	THIS	QRDecompositionImpl	0	DEF	$.cachedH == null
34903	233	12	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	$ < m
34903	233	12	QRDecompositionImpl.java	getH	m	int	0	NIL-FOR	i < $
34904	234	16	QRDecompositionImpl.java	getH	j	int	0	NIL-FOR	$ < FastMath.min(i + 1, n)
34904	234	16	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	j < FastMath.min($ + 1, n)
34904	234	16	QRDecompositionImpl.java	getH	n	int	0	NIL-FOR	j < FastMath.min(i + 1, $)
1588	178	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1589	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1590	193	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1591	154	8	RandomDataImpl.java	nextHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
35403	169	8	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
35403	169	8	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
35403	169	8	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
1592	180	12	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
1593	200	8	RandomDataImpl.java	nextInt	lower	int	0	NumberIsTooLargeException	$ >= upper
1593	200	8	RandomDataImpl.java	nextInt	upper	int	0	NumberIsTooLargeException	lower >= $
1594	220	8	RandomDataImpl.java	nextLong	lower	long	0	NumberIsTooLargeException	$ >= upper
1594	220	8	RandomDataImpl.java	nextLong	upper	long	0	NumberIsTooLargeException	lower >= $
1595	250	8	RandomDataImpl.java	nextSecureHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
35404	269	8	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
35404	269	8	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
35405	278	12	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
35405	278	12	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
35405	278	12	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
1596	289	16	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
1597	311	8	RandomDataImpl.java	nextSecureInt	lower	int	0	NumberIsTooLargeException	$ >= upper
1597	311	8	RandomDataImpl.java	nextSecureInt	upper	int	0	NumberIsTooLargeException	lower >= $
1598	332	8	RandomDataImpl.java	nextSecureLong	lower	long	0	NumberIsTooLargeException	$ >= upper
1598	332	8	RandomDataImpl.java	nextSecureLong	upper	long	0	NumberIsTooLargeException	lower >= $
1599	358	8	RandomDataImpl.java	nextPoisson	mean	double	0	NotStrictlyPositiveException	$ <= 0
1600	365	8	RandomDataImpl.java	nextPoisson	pivot	double	1	RET	mean < $
1600	365	8	RandomDataImpl.java	nextPoisson	mean	double	1	RET	$ < pivot
35406	371	12	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
35406	371	12	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
1601	374	16	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
1601	374	16	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
1602	406	16	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= p1
1602	406	16	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u <= $
1603	409	20	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	x < -$
1603	409	20	RandomDataImpl.java	nextPoisson	delta	double	0	DEF	x > $
1603	409	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ > delta
1603	409	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ < -lambda
1604	416	20	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
1604	416	20	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u > $ + p2
1604	416	20	RandomDataImpl.java	nextPoisson	p2	double	1	DEF	u > p1 + $
1605	427	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < -t
1605	427	16	RandomDataImpl.java	nextPoisson	a	int	0	DEF	$ == 0
1605	427	16	RandomDataImpl.java	nextPoisson	t	double	0	DEF	v < -$
1606	433	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < qa
1606	433	16	RandomDataImpl.java	nextPoisson	qa	double	0	DEF	v < $
1607	437	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ > qr
1607	437	16	RandomDataImpl.java	nextPoisson	qr	double	0	DEF	v > $
1608	440	16	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - MathUtils.factorialLog((int) (y + $)) + logLambdaFactorial
1608	440	16	RandomDataImpl.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - MathUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1608	440	16	RandomDataImpl.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - MathUtils.factorialLog((int) (y + lambda)) + $
1608	440	16	RandomDataImpl.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - MathUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
1608	440	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - MathUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1609	462	8	RandomDataImpl.java	nextGaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
1610	483	8	RandomDataImpl.java	nextExponential	mean	double	0	NotStrictlyPositiveException	$ <= 0.0
35407	488	8	RandomDataImpl.java	nextExponential	unif	double	0	NIL-WHILE	$ == 0.0d
1611	512	8	RandomDataImpl.java	nextUniform	lower	double	0	NumberIsTooLargeException	$ >= upper
1611	512	8	RandomDataImpl.java	nextUniform	upper	double	0	NumberIsTooLargeException	lower >= $
35408	520	8	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
1612	701	8	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
1613	717	8	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
1614	734	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
1615	748	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
1616	764	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
1617	775	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
1618	837	8	RandomDataImpl.java	nextPermutation	n	int	0	NumberIsTooLargeException	k > $
1618	837	8	RandomDataImpl.java	nextPermutation	k	int	0	NumberIsTooLargeException	$ > n
1619	841	8	RandomDataImpl.java	nextPermutation	k	int	0	NotStrictlyPositiveException	$ == 0
35409	849	8	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
35409	849	8	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
1620	876	8	RandomDataImpl.java	nextSample	len	int	0	NumberIsTooLargeException	k > $
1620	876	8	RandomDataImpl.java	nextSample	k	int	0	NumberIsTooLargeException	$ > len
1621	880	8	RandomDataImpl.java	nextSample	k	int	0	NotStrictlyPositiveException	$ <= 0
35410	887	8	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
35410	887	8	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
1622	919	8	RandomDataImpl.java	nextInversionDeviate	glb	int	1	RET	distribution.cumulativeProbability($) == 1.0d
1622	919	8	RandomDataImpl.java	nextInversionDeviate	distribution	IntegerDistribution	1	RET	$.cumulativeProbability(glb) == 1.0d
35411	939	8	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
35411	939	8	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
1623	940	12	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
35412	960	8	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
35412	960	8	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
1660	122	8	RandomKey.java	decodeGeneric	l	int	0	IllegalArgumentException	representation.size() != $
1660	122	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	IllegalArgumentException	$.size() != l
1661	125	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	IllegalArgumentException	$.size() != sortedRepr.size()
1661	125	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	IllegalArgumentException	representation.size() != $.size()
35429	133	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
35429	133	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
1662	151	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
1663	155	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
1663	155	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
35430	163	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
35430	163	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
1664	164	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
1664	164	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
1664	164	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
1665	177	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
1665	177	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
35431	194	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
35431	194	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
35432	210	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
35432	210	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
1666	250	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	IllegalArgumentException	$.size() != permutedData.size()
1666	250	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	IllegalArgumentException	originalData.size() != $.size()
35433	258	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
35433	258	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
1667	260	12	RandomKey.java	inducedPermutation	index	int	0	IllegalArgumentException	$ == -1
35434	285	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
35434	285	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
1641	41	8	RandomKeyMutation.java	mutate	original	Chromosome	0	DEF	$ instanceof RandomKey<?>
955	118	8	RealMatrixImpl.java	RealMatrixImpl	copyArray	boolean	1	DEF	$
956	121	12	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	NullPointerException	$ == null
957	125	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	DEF	$ == 0
958	129	12	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	$ == 0
34802	132	12	RealMatrixImpl.java	RealMatrixImpl	r	int	0	NIL-FOR	$ < nRows
34802	132	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	r < $
959	133	16	RealMatrixImpl.java	RealMatrixImpl	THIS	RealMatrixImpl	0	DEF	d[r].length != nCols
959	133	16	RealMatrixImpl.java	RealMatrixImpl	r	int	0	DEF	d[$].length != nCols
959	133	16	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	d[r].length != $
959	133	16	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	DEF	$[r].length != nCols
34803	154	8	RealMatrixImpl.java	RealMatrixImpl	row	int	0	NIL-FOR	$ < nRows
34803	154	8	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	row < $
34804	199	8	RealMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
34804	199	8	RealMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
34805	203	12	RealMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
34805	203	12	RealMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
34806	239	8	RealMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
34806	239	8	RealMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
34807	243	12	RealMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
34807	243	12	RealMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
34808	280	8	RealMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
34808	280	8	RealMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
34809	283	12	RealMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
34809	283	12	RealMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
34810	285	16	RealMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
34810	285	16	RealMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
960	317	8	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	1	DEF	$.data == null
961	318	12	RealMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
962	323	12	RealMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
963	329	12	RealMatrixImpl.java	setSubMatrix	nRows	int	0	DEF	$ == 0
964	334	12	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	$ == 0
34811	338	12	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	NIL-FOR	i < $.data.$.length
34811	338	12	RealMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
965	339	16	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	DEF	subMatrix[i].length != nCols
965	339	16	RealMatrixImpl.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
965	339	16	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
965	339	16	RealMatrixImpl.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[i].length != nCols
966	422	8	RealMatrixImpl.java	operate	THIS	RealMatrixImpl	0	DEF	v.$.length != nCols
966	422	8	RealMatrixImpl.java	operate	nCols	int	0	DEF	v.length != $
966	422	8	RealMatrixImpl.java	operate	v	double[]	0	DEF	$.length != nCols
34812	428	8	RealMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
34812	428	8	RealMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
34813	431	12	RealMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
34813	431	12	RealMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
967	446	8	RealMatrixImpl.java	preMultiply	THIS	RealMatrixImpl	0	DEF	v.$.length != nRows
967	446	8	RealMatrixImpl.java	preMultiply	nRows	int	0	DEF	v.length != $
967	446	8	RealMatrixImpl.java	preMultiply	v	double[]	0	DEF	$.length != nRows
34814	453	8	RealMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
34814	453	8	RealMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
34815	455	12	RealMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
34815	455	12	RealMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
34816	472	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
34816	472	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
34817	474	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
34817	474	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
34818	488	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
34818	488	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
34819	490	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
34819	490	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
34820	506	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
34820	506	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
34821	508	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
34821	508	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
34822	524	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
34822	524	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
34823	526	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
34823	526	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
34824	540	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
34824	540	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
34825	541	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
34825	541	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
34826	556	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
34826	556	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
34827	557	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
34827	557	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
34828	573	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
34828	573	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
34829	574	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
34829	574	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
34830	591	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
34830	591	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
34831	592	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
34831	592	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
34832	608	8	RealMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
34832	608	8	RealMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
34882	215	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
34882	215	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
996	216	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
997	245	8	RealVectorFormat.java	format	obj	Object	0	RET	$ instanceof RealVector
998	265	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
999	284	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
999	284	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
999	284	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
34883	290	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
1000	292	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
1001	294	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	$.parseFixedstring(source, $.trimmedSeparator, pos)
1001	294	16	RealVectorFormat.java	parse	source	String	0	DEF	parseFixedstring($, trimmedSeparator, pos)
1001	294	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	parseFixedstring(source, trimmedSeparator, $)
1002	299	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
1003	302	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
1004	316	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
1004	316	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
1004	316	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
34884	322	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
34884	322	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
34884	322	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
21	269	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
22	273	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
23	297	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
24	307	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
25	323	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	DEF	$.numElements < 1
26	348	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	DEF	$ < expansion
26	348	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	DEF	contraction < $
27	354	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	DEF	$ <= 1.0
28	360	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	DEF	$ <= 1.0
29	447	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	DEF	i > $.numElements
29	447	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ > numElements
30	451	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ < 0
31	458	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
32	460	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
33	482	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
34	531	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	DEF	index >= $.numElements
34	531	8	ResizableDoubleArray.java	getElement	index	int	1	DEF	$ >= numElements
35	535	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
36	666	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ < 0
37	671	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
37	671	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
38	674	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
38	674	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
39	707	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != MULTIPLICATIVE_MODE
39	707	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != ADDITIVE_MODE
40	727	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
41	749	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	$ < 0
42	757	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
42	757	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
43	772	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
44	849	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
44	849	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
45	852	7	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
46	865	15	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
2337	95	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
2337	95	8	RiddersSolver.java	solve	min	double	0	RET	f.value($) == 0.0
2338	96	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
2338	96	8	RiddersSolver.java	solve	max	double	0	RET	f.value($) == 0.0
2339	97	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
2339	97	8	RiddersSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
2340	101	8	RiddersSolver.java	solve	THIS	RiddersSolver	1	RET	$.isBracketing(min, initial, f)
2340	101	8	RiddersSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
2340	101	8	RiddersSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
2340	101	8	RiddersSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
2341	135	8	RiddersSolver.java	solve	y1	double	0	RET	$ == 0.0
2342	138	8	RiddersSolver.java	solve	y2	double	0	RET	$ == 0.0
35823	145	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	NIL-WHILE	i <= $.maximalIterationCount
35823	145	8	RiddersSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
2343	149	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	FastMath.abs(y3) <= $.functionValueAccuracy
2343	149	12	RiddersSolver.java	solve	y3	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2344	161	12	RiddersSolver.java	solve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
2344	161	12	RiddersSolver.java	solve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
2344	161	12	RiddersSolver.java	solve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
2345	165	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	FastMath.abs(y) <= $.functionValueAccuracy
2345	165	12	RiddersSolver.java	solve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2346	172	12	RiddersSolver.java	solve	correction	double	1	DEF	$ > 0.0
2347	173	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y1) + MathUtils.sign($) == 0.0
2347	173	16	RiddersSolver.java	solve	y1	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
2348	183	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y2) + MathUtils.sign($) == 0.0
2348	183	16	RiddersSolver.java	solve	y2	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
35874	83	8	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	NIL-FOR	i <= $.maximalIterationCount
35874	83	8	RombergIntegrator.java	integrate	i	int	0	NIL-FOR	$ <= maximalIterationCount
35875	91	12	RombergIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= i
35875	91	12	RombergIntegrator.java	integrate	i	int	0	NIL-FOR	j <= $
2465	98	12	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	i >= $.minimalIterationCount
2465	98	12	RombergIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
2466	101	16	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	delta <= $.absoluteAccuracy
2466	101	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
2466	101	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
2466	101	16	RombergIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
2467	116	8	RombergIntegrator.java	verifyIterationCount	THIS	RombergIntegrator	0	DEF	$.maximalIterationCount > 32
410	136	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
411	176	4	Rotation.java	Rotation	norm	double	0	DEF	$ == 0
412	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
412	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
412	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
412	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
412	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
412	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
412	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
412	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
413	238	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
414	256	4	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
415	265	6	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
416	274	8	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
417	320	2	Rotation.java	Rotation	u1u1	double	0	DEF	$ == 0
417	320	2	Rotation.java	Rotation	u2u2	double	0	DEF	$ == 0
417	320	2	Rotation.java	Rotation	v1v1	double	0	DEF	$ == 0
417	320	2	Rotation.java	Rotation	v2v2	double	0	DEF	$ == 0
418	369	2	Rotation.java	Rotation	c	double	0	RET	$ == 0
419	391	4	Rotation.java	Rotation	c	double	0	RET	$ == 0
420	401	6	Rotation.java	Rotation	c	double	0	RET	$ == 0
421	451	4	Rotation.java	Rotation	normProduct	double	0	DEF	$ == 0
422	457	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
422	457	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
423	553	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
424	555	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
425	568	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
425	568	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
426	570	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
427	614	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
428	623	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
428	623	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
429	632	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
430	641	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
430	641	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
431	650	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
432	659	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
432	659	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
433	668	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
434	677	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
434	677	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
435	686	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
436	695	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
436	695	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
437	704	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
438	713	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
438	713	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
439	722	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
440	731	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
440	731	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
441	740	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
442	749	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
442	749	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
443	758	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
444	767	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
444	767	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
445	776	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
446	785	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
446	785	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
447	794	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
448	803	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
448	803	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
449	821	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
449	821	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
34308	980	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
450	1021	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
450	1021	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
450	1021	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
1881	108	4	RungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1881	108	4	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
35635	112	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
35635	112	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
1882	119	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
1882	119	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
35636	138	4	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
35637	142	6	RungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
35638	148	8	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
35638	148	8	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
35639	150	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
35639	150	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
35639	150	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
35640	152	12	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
35640	152	12	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
35641	163	8	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
35641	163	8	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
35641	163	8	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
35642	165	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
35642	165	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1883	173	8	RungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1883	173	8	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1884	175	12	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	FastMath.abs(dt) <= FastMath.ulp($.stepStart)
1884	175	12	RungeKuttaIntegrator.java	integrate	dt	double	1	DEF	FastMath.abs($) <= FastMath.ulp(stepStart)
1885	208	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1885	208	6	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1885	208	6	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1885	208	6	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1764	83	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
1764	83	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
35542	87	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
35542	87	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
35542	87	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
35543	143	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
35543	143	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
35544	144	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
35544	144	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
35545	165	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
35545	165	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
35546	167	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
35546	167	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
1765	174	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
693	109	8	SaddlePointExpansion.java	getStirlingError	z	double	1	DEF	$ < 15.0
694	111	12	SaddlePointExpansion.java	getStirlingError	z2	double	1	DEF	FastMath.floor($) == $
695	147	8	SaddlePointExpansion.java	getDeviancePart	x	double	1	DEF	FastMath.abs($ - mu) < 0.1 * ($ + mu)
695	147	8	SaddlePointExpansion.java	getDeviancePart	mu	double	1	DEF	FastMath.abs(x - $) < 0.1 * (x + $)
34320	155	12	SaddlePointExpansion.java	getDeviancePart	s1	double	0	NIL-WHILE	$ != s
34320	155	12	SaddlePointExpansion.java	getDeviancePart	s	double	0	NIL-WHILE	s1 != $
696	180	8	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == 0
697	181	12	SaddlePointExpansion.java	logBinomialProbability	p	double	1	DEF	$ < 0.1
698	186	15	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == n
698	186	15	SaddlePointExpansion.java	logBinomialProbability	n	int	1	DEF	x == $
699	187	12	SaddlePointExpansion.java	logBinomialProbability	q	double	1	DEF	$ < 0.1
2365	130	8	SecantSolver.java	solve	y0	double	0	DEF	$ * y1 >= 0
2365	130	8	SecantSolver.java	solve	y1	double	0	DEF	y0 * $ >= 0
35827	139	8	SecantSolver.java	solve	THIS	SecantSolver	0	NIL-WHILE	i < $.maximalIterationCount
35827	139	8	SecantSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
2366	140	12	SecantSolver.java	solve	y1	double	0	DEF	FastMath.abs(y2) < FastMath.abs($)
2366	140	12	SecantSolver.java	solve	y2	double	0	DEF	FastMath.abs($) < FastMath.abs(y1)
2367	148	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	FastMath.abs(y1) <= $.functionValueAccuracy
2367	148	12	SecantSolver.java	solve	y1	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2368	152	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	FastMath.abs(oldDelta) < FastMath.max($.relativeAccuracy * FastMath.abs(x1), $.absoluteAccuracy)
2368	152	12	SecantSolver.java	solve	x1	double	0	RET	FastMath.abs(oldDelta) < FastMath.max(relativeAccuracy * FastMath.abs($), absoluteAccuracy)
2368	152	12	SecantSolver.java	solve	oldDelta	double	0	RET	FastMath.abs($) < FastMath.max(relativeAccuracy * FastMath.abs(x1), absoluteAccuracy)
2369	158	12	SecantSolver.java	solve	y0	double	1	DEF	FastMath.abs(y1) > FastMath.abs($)
2369	158	12	SecantSolver.java	solve	y1	double	1	DEF	FastMath.abs($) > FastMath.abs(y0)
2370	163	16	SecantSolver.java	solve	delta	double	0	DEF	$ / oldDelta > 1
2370	163	16	SecantSolver.java	solve	oldDelta	double	0	DEF	delta / $ > 1
2371	173	12	SecantSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
2371	173	12	SecantSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
1379	77	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
1389	178	8	SemiVariance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
1390	276	8	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 0
1390	276	8	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 0
1391	279	12	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 1
1391	279	12	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 1
35312	286	16	SemiVariance.java	evaluate	i	int	0	NIL-FOR	$ < length
35312	286	16	SemiVariance.java	evaluate	length	int	0	NIL-FOR	i < $
1392	287	20	SemiVariance.java	evaluate	i	int	0	DEF	(values[$] > cutoff) == booleanDirection
1392	287	20	SemiVariance.java	evaluate	booleanDirection	boolean	0	DEF	(values[i] > cutoff) == $
1392	287	20	SemiVariance.java	evaluate	values	double[]	0	DEF	($[i] > cutoff) == booleanDirection
1392	287	20	SemiVariance.java	evaluate	cutoff	double	0	DEF	(values[i] > $) == booleanDirection
1393	293	16	SemiVariance.java	evaluate	corrected	boolean	1	RET	$
1672	78	12	SimpleEstimationProblem.java	getUnboundParameters	THIS	SimpleEstimationProblem	0	DEF	$.p.isBound()
35286	76	8	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	NIL-FOR	i < p.$.length
35286	76	8	SimpleRealPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
35286	76	8	SimpleRealPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1320	79	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > size * $.getRelativeThreshold()
1320	79	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > $.getAbsoluteThreshold()
1320	79	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1320	79	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1320	79	12	SimpleRealPointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
1556	124	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
1557	140	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.n > 2
1558	160	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
1559	172	12	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 2
35377	195	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
35377	195	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
35377	195	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
35378	215	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
35378	215	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
35378	215	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
35378	215	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
1560	300	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
1561	303	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	FastMath.abs($.sumXX) < 10 * Double.MIN_VALUE
1562	353	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
1563	367	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
1564	413	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
1565	436	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
1566	551	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	DEF	$ >= 1
1566	551	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	DEF	$ <= 0
1567	619	8	SimpleRegression.java	setDistribution	THIS	SimpleRegression	0	DEF	$.n > 2
35152	75	8	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	NIL-FOR	i < p.$.length
35152	75	8	SimpleVectorialPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
35152	75	8	SimpleVectorialPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1122	80	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > size * $.getRelativeThreshold()
1122	80	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > $.getAbsoluteThreshold()
1122	80	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1122	80	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1122	80	12	SimpleVectorialPointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
35185	77	8	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	NIL-FOR	i < p.$.length
35185	77	8	SimpleVectorialValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
35185	77	8	SimpleVectorialValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1229	82	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > size * $.getRelativeThreshold()
1229	82	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > $.getAbsoluteThreshold()
1229	82	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1229	82	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1229	82	12	SimpleVectorialValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
35164	64	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
35164	64	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
1189	65	12	SimplexSolver.java	getPivotColumn	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(tableau.getEntry(0, i), minValue, $.epsilon) < 0
1189	65	12	SimplexSolver.java	getPivotColumn	i	int	0	DEF	MathUtils.compareTo(tableau.getEntry(0, $), minValue, epsilon) < 0
1189	65	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	MathUtils.compareTo(tableau.getEntry(0, i), $, epsilon) < 0
1189	65	12	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	DEF	MathUtils.compareTo($.getEntry(0, i), minValue, epsilon) < 0
35165	83	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
35165	83	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1190	86	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(entry, 0, $.epsilon) > 0
1190	86	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	MathUtils.compareTo($, 0, epsilon) > 0
1191	88	16	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	1	DEF	MathUtils.equals(ratio, minRatio, $.epsilon)
1191	88	16	SimplexSolver.java	getPivotRow	ratio	double	1	DEF	MathUtils.equals($, minRatio, epsilon)
1191	88	16	SimplexSolver.java	getPivotRow	minRatio	double	1	DEF	MathUtils.equals(ratio, $, epsilon)
1192	90	23	SimplexSolver.java	getPivotRow	ratio	double	0	DEF	$ < minRatio
1192	90	23	SimplexSolver.java	getPivotRow	minRatio	double	0	DEF	ratio < $
1193	98	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
1194	100	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
35166	104	12	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
35166	104	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
1195	106	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	MathUtils.equals(tableau.getEntry($.row, column), 1, $.epsilon)
1195	106	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
1195	106	14	SimplexSolver.java	getPivotRow	column	int	0	RET	MathUtils.equals(tableau.getEntry(row, $), 1, epsilon)
1195	106	14	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
1195	106	14	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	MathUtils.equals($.getEntry(row, column), 1, epsilon)
1195	106	14	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
1196	129	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
35167	138	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
35167	138	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1197	139	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
1197	139	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
1198	156	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
35168	160	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1199	165	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, $.epsilon)
1199	165	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	MathUtils.equals($.getEntry(0, $.getRhsOffset()), 0, epsilon)
35169	179	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1203	129	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
35170	133	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
35170	133	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
1204	136	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
35171	139	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
35171	139	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
35172	142	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
35172	142	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1205	162	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
1206	173	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
35173	181	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
35173	181	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
1207	189	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
1208	198	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
1208	198	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
1209	200	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1209	200	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1210	205	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
1210	205	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1210	205	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
1210	205	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1211	235	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
1212	260	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
1212	260	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
35174	287	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
35174	287	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
1213	288	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	MathUtils.equals($.getEntry(i, col), 1.0, $.epsilon)
1213	288	12	SimplexTableau.java	getBasicRow	i	int	1	DEF	MathUtils.equals(getEntry($, col), 1.0, epsilon)
1213	288	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
1213	288	12	SimplexTableau.java	getBasicRow	col	int	1	DEF	MathUtils.equals(getEntry(i, $), 1.0, epsilon)
1214	290	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	MathUtils.equals($.getEntry(i, col), 0.0, $.epsilon)
1214	290	19	SimplexTableau.java	getBasicRow	i	int	0	RET	MathUtils.equals(getEntry($, col), 0.0, epsilon)
1214	290	19	SimplexTableau.java	getBasicRow	col	int	0	RET	MathUtils.equals(getEntry(i, $), 0.0, epsilon)
1215	302	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
35175	310	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
35175	310	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
1216	311	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	MathUtils.compareTo($.tableau.getEntry(0, i), 0, $.epsilon) > 0
1216	311	10	SimplexTableau.java	dropPhase1Objective	i	int	0	DEF	MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) > 0
35176	317	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
35176	317	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1217	319	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
1217	319	10	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
35177	325	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
35177	325	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
35178	327	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
35178	327	10	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
1218	328	12	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
1218	328	12	SimplexTableau.java	dropPhase1Objective	columnsToDrop	List<Integer>	0	DEF	$.contains(j)
35179	334	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
35180	355	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
35180	355	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
1219	356	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	MathUtils.compareTo($.tableau.getEntry(0, i), 0, $.epsilon) < 0
1219	356	12	SimplexTableau.java	isOptimal	i	int	0	RET	MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
35181	375	6	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
35181	375	6	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
35181	375	6	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
1220	377	10	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
1221	382	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
1221	382	10	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
35182	406	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
35182	406	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
1222	537	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
1222	537	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
1223	541	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
2452	76	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	$.minimalIterationCount == 1
35868	84	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	NIL-FOR	i <= $.maximalIterationCount
35868	84	8	SimpsonIntegrator.java	integrate	i	int	0	NIL-FOR	$ <= maximalIterationCount
2453	87	12	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	i >= $.minimalIterationCount
2453	87	12	SimpsonIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
2454	91	16	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	delta <= $.absoluteAccuracy
2454	91	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
2454	91	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
2454	91	16	SimpsonIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
2455	107	8	SimpsonIntegrator.java	verifyIterationCount	THIS	SimpsonIntegrator	0	DEF	$.maximalIterationCount > 64
34608	92	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
34608	92	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < n
34609	93	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
34609	93	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	NIL-FOR	$ < n
34610	95	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	k < $.m
34610	95	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	NIL-FOR	$ < m
34611	106	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
34611	106	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
34612	107	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.m
34612	107	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	NIL-FOR	$ < m
34613	109	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	k < $.n
34613	109	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	NIL-FOR	$ < n
847	116	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	1	DEF	$.m>=$.n
34614	140	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < p
34614	140	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	p	int	0	NIL-FOR	i < $
34615	147	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < p
34615	147	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	p	int	0	NIL-FOR	i < $
848	150	10	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	product	double	0	DEF	$<0
849	166	8	SingularValueDecompositionImpl.java	getUT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedUt == null
850	178	8	SingularValueDecompositionImpl.java	getS	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedS == null
851	202	8	SingularValueDecompositionImpl.java	getVT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedVt == null
34616	217	8	SingularValueDecompositionImpl.java	getCovariance	THIS	SingularValueDecompositionImpl	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
34616	217	8	SingularValueDecompositionImpl.java	getCovariance	p	int	0	NIL-WHILE	dimension < $
34616	217	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NIL-WHILE	$ < p
34616	217	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
34616	217	8	SingularValueDecompositionImpl.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
852	221	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	DEF	$ == 0
34617	257	8	SingularValueDecompositionImpl.java	getRank	i	int	0	NIL-FOR	$ >= 0
853	258	12	SingularValueDecompositionImpl.java	getRank	THIS	SingularValueDecompositionImpl	0	RET	$.singularValues[i] > threshold
853	258	12	SingularValueDecompositionImpl.java	getRank	i	int	0	RET	singularValues[$] > threshold
853	258	12	SingularValueDecompositionImpl.java	getRank	threshold	double	0	RET	singularValues[i] > $
1366	89	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
1367	104	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
1368	108	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
1369	129	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
1370	157	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
1370	157	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1370	157	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
1370	157	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
1370	157	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
35305	167	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
35305	167	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
35305	167	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
35306	175	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
35306	175	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
35306	175	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2308	52	8	SmoothingBicubicSplineInterpolator.java	interpolate	THIS	SmoothingBicubicSplineInterpolator	0	DEF	xval.$.length == 0
2308	52	8	SmoothingBicubicSplineInterpolator.java	interpolate	THIS	SmoothingBicubicSplineInterpolator	0	DEF	zval.$.length == 0
2308	52	8	SmoothingBicubicSplineInterpolator.java	interpolate	THIS	SmoothingBicubicSplineInterpolator	0	DEF	yval.$.length == 0
2308	52	8	SmoothingBicubicSplineInterpolator.java	interpolate	xval	double[]	0	DEF	$.length == 0
2308	52	8	SmoothingBicubicSplineInterpolator.java	interpolate	yval	double[]	0	DEF	$.length == 0
2308	52	8	SmoothingBicubicSplineInterpolator.java	interpolate	zval	double[][]	0	DEF	$.length == 0
2309	55	8	SmoothingBicubicSplineInterpolator.java	interpolate	THIS	SmoothingBicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != zval.$.length
2309	55	8	SmoothingBicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != zval.length
2309	55	8	SmoothingBicubicSplineInterpolator.java	interpolate	zval	double[][]	0	DimensionMismatchException	xval.length != $.length
35792	70	8	SmoothingBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35792	70	8	SmoothingBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
2310	71	12	SmoothingBicubicSplineInterpolator.java	interpolate	THIS	SmoothingBicubicSplineInterpolator	0	DimensionMismatchException	zval[i].length != yLen
2310	71	12	SmoothingBicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	zval[$].length != yLen
2310	71	12	SmoothingBicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	zval[i].length != $
2310	71	12	SmoothingBicubicSplineInterpolator.java	interpolate	zval	double[][]	0	DimensionMismatchException	$[i].length != yLen
35793	75	12	SmoothingBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35793	75	12	SmoothingBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35794	85	8	SmoothingBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35794	85	8	SmoothingBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35795	92	8	SmoothingBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35795	92	8	SmoothingBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35796	94	12	SmoothingBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35796	94	12	SmoothingBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35797	102	8	SmoothingBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35797	102	8	SmoothingBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35798	109	8	SmoothingBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35798	109	8	SmoothingBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35799	111	12	SmoothingBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35799	111	12	SmoothingBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35800	118	8	SmoothingBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35800	118	8	SmoothingBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35801	120	12	SmoothingBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35801	120	12	SmoothingBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35802	127	8	SmoothingBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35802	127	8	SmoothingBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35803	129	12	SmoothingBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35803	129	12	SmoothingBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35804	136	8	SmoothingBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35804	136	8	SmoothingBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35805	139	12	SmoothingBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35805	139	12	SmoothingBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
2328	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
2328	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
2328	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
2328	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
2328	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
2328	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
2329	80	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
2329	80	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
2329	80	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
35813	87	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35813	87	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
2330	88	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
2330	88	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
2330	88	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
2330	88	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
35814	99	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35814	99	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35815	101	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35815	101	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35816	111	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35816	111	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35817	113	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35817	113	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35818	121	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35818	121	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35819	123	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35819	123	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35820	133	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35820	133	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35821	135	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35821	135	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
34618	95	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rows
34618	95	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rows
34619	96	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columns
34619	96	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columns
854	110	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
854	110	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
855	159	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
855	159	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
856	173	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
856	173	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
34681	107	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
34681	107	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
34681	107	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
34682	143	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
886	147	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
886	147	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
34683	162	8	SparseFieldVector.java	add	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
34683	162	8	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < v.length
34683	162	8	SparseFieldVector.java	add	v	T[]	0	NIL-FOR	i < $.length
34684	176	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
887	185	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
34685	202	8	SparseFieldVector.java	append	THIS	SparseFieldVector	0	NIL-FOR	i < a.$.length
34685	202	8	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < a.length
34685	202	8	SparseFieldVector.java	append	a	T[]	0	NIL-FOR	i < $.length
34686	218	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
34687	230	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
888	233	12	SparseFieldVector.java	dotProduct	THIS	SparseFieldVector	0	DEF	idx < v.$.length
888	233	12	SparseFieldVector.java	dotProduct	idx	int	0	DEF	$ < v.length
888	233	12	SparseFieldVector.java	dotProduct	v	T[]	0	DEF	idx < $.length
34688	247	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
34689	259	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
34690	271	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
34691	283	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
34692	294	8	SparseFieldVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
34693	325	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
889	328	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
889	328	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
889	328	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
889	328	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
34694	342	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
34694	342	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
34695	356	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
34696	370	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
34696	370	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
34697	384	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
34698	412	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
34699	415	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
34700	428	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
34701	432	12	SparseFieldVector.java	outerProduct	THIS	SparseFieldVector	0	NIL-FOR	col < $.virtualSize
34701	432	12	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
890	442	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
34702	463	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
34702	463	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
34703	486	8	SparseFieldVector.java	setSubVector	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
34703	486	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
34703	486	8	SparseFieldVector.java	setSubVector	v	T[]	0	NIL-FOR	i < $.length
34704	502	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
891	505	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
891	505	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
892	517	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
34705	527	8	SparseFieldVector.java	subtract	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
34705	527	8	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < v.length
34705	527	8	SparseFieldVector.java	subtract	v	T[]	0	NIL-FOR	i < $.length
893	528	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
893	528	12	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
894	551	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	MatrixIndexException	index >= $.getDimension()
894	551	8	SparseFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
894	551	8	SparseFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
895	566	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DEF	$.getDimension() != n
895	566	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DEF	getDimension() != $
896	576	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
34706	601	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
897	614	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
897	614	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
898	618	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector<?>
899	625	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
900	626	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
900	626	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
901	629	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
901	629	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
902	632	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
902	632	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
34707	637	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
903	640	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
903	640	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
34708	645	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
904	648	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
904	648	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
904	648	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
1502	149	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DEF	xArray.$.length != yArray.$.length
1502	149	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	DEF	$.length != yArray.length
1502	149	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	DEF	xArray.length != $.length
1503	152	15	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DEF	xArray.$.length < 2
1503	152	15	SpearmansCorrelation.java	correlation	xArray	double[]	1	DEF	$.length < 2
35354	168	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
35354	168	8	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
2233	68	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
2233	68	8	SplineInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
2233	68	8	SplineInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
2234	72	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	NumberIsTooSmallException	x.$.length < 3
2234	72	8	SplineInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 3
35729	84	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
35729	84	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
35730	93	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
35730	93	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
35731	108	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
35732	116	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
35732	116	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1533	568	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DEF	n != sample2.$.length
1533	568	8	StatUtils.java	sumDifference	n	int	0	DEF	$ != sample2.length
1533	568	8	StatUtils.java	sumDifference	sample2	double[]	0	DEF	n != $.length
1534	572	8	StatUtils.java	sumDifference	n	int	0	DEF	$ < 1
35369	577	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
35369	577	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
1535	616	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DEF	n != sample2.$.length
1535	616	8	StatUtils.java	varianceDifference	n	int	0	DEF	$ != sample2.length
1535	616	8	StatUtils.java	varianceDifference	sample2	double[]	0	DEF	n != $.length
1536	620	8	StatUtils.java	varianceDifference	n	int	0	DEF	$ < 2
35370	624	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
35370	624	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
1452	133	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
1452	133	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
1453	136	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
1751	118	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
1752	127	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
35531	135	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
1753	153	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
1335	119	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length, true)
1335	119	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1335	119	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1335	119	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
35295	121	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
35295	121	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
35295	121	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1336	158	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, weights, begin, length, true)
1336	158	8	Sum.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
1336	158	8	Sum.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
1336	158	8	Sum.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
1336	158	8	Sum.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
35296	160	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
35296	160	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
35296	160	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1337	130	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length, true)
1337	130	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1337	130	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1337	130	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
35297	132	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
35297	132	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
35297	132	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1334	118	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length, true)
1334	118	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1334	118	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1334	118	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
35294	120	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
35294	120	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
35294	120	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1407	156	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl instanceof Mean
1408	159	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl instanceof Variance
1409	162	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl instanceof GeometricMean
1410	203	8	SummaryStatistics.java	getMean	THIS	SummaryStatistics	1	RET	$.mean == $.meanImpl
1411	219	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
1412	220	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
1413	237	8	SummaryStatistics.java	getVariance	THIS	SummaryStatistics	1	RET	$.varianceImpl == $.variance
1414	341	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
1415	344	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
1416	358	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
1416	358	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
1417	361	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
1418	631	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	DEF	$.n > 0
1419	665	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
1420	676	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
1420	676	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
1421	681	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
1421	681	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
1422	686	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
1422	686	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
1423	691	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
1423	691	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
1424	696	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
1424	696	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
1425	701	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
1425	701	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
1426	706	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
1426	706	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
1427	711	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
1427	711	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
625	90	8	TDistributionImpl.java	setDegreesOfFreedomInternal	newDegreesOfFreedom	double	0	DEF	$ <= 0.0
626	130	8	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ == 0.0
627	138	12	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
628	165	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
629	168	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1483	1029	8	TTestImpl.java	checkSignificanceLevel	alpha	double	0	DEF	$ > 0.5
1483	1029	8	TTestImpl.java	checkSignificanceLevel	alpha	double	0	DEF	$ <= 0
1484	1042	8	TTestImpl.java	checkSampleData	THIS	TTestImpl	0	DEF	data.$.length < 2
1484	1042	8	TTestImpl.java	checkSampleData	data	double[]	0	DEF	$ == null
1484	1042	8	TTestImpl.java	checkSampleData	data	double[]	0	DEF	$.length < 2
1485	1055	8	TTestImpl.java	checkSampleData	stat	StatisticalSummary	0	DEF	$ == null
1485	1055	8	TTestImpl.java	checkSampleData	stat	StatisticalSummary	0	DEF	$.getN() < 2
1388	86	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
35629	102	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
35629	102	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1640	73	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	IllegalArgumentException	population.getPopulationSize() < $.arity
1640	73	8	TournamentSelection.java	tournament	population	ListPopulation	0	IllegalArgumentException	$.getPopulationSize() < this.arity
35424	85	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
35424	85	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
9	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
9	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
10	147	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
11	158	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
11	158	8	TransformerMap.java	equals	other	Object	0	RET	this == $
12	161	8	TransformerMap.java	equals	other	Object	0	RET	$ instanceof TransformerMap
13	163	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
13	163	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
14	166	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
14	166	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
15	170	16	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
15	170	16	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
2460	82	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
35869	90	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
35869	90	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
35870	117	8	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	NIL-FOR	i <= $.maximalIterationCount
35870	117	8	TrapezoidIntegrator.java	integrate	i	int	0	NIL-FOR	$ <= maximalIterationCount
2461	119	12	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	i >= $.minimalIterationCount
2461	119	12	TrapezoidIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
2462	123	16	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.absoluteAccuracy
2462	123	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
2462	123	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
2462	123	16	TrapezoidIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
2463	138	8	TrapezoidIntegrator.java	verifyIterationCount	THIS	TrapezoidIntegrator	0	DEF	$.maximalIterationCount > 64
753	69	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
754	92	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
755	105	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
34430	111	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
756	115	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
756	115	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
34431	118	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
34431	118	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
34432	121	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
34432	121	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
34433	123	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
34433	123	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
34434	128	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
34434	128	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
757	149	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
34435	153	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
34435	153	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
758	155	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
759	158	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
759	158	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
34436	208	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
34436	208	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
34437	214	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
34437	214	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
760	220	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
34438	231	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
34438	231	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
34439	235	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
34439	235	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
34440	245	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
34440	245	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
34441	251	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
34441	251	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
34442	257	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
34442	257	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
34443	259	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
34443	259	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
2237	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
2237	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
2237	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	z.$.length == 0
2237	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
2237	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
2237	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	z	double[]	0	NoDataException	$.length == 0
2237	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$[0].length == 0
2237	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$.length == 0
2238	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
2238	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
2238	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	xLen != $.length
2239	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
2239	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
2239	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	xLen != $.length
2240	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
2240	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
2240	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	xLen != $.length
2241	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdZ.$.length
2241	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdZ.length
2241	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
2242	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
2242	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
2242	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	xLen != $.length
2243	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdZ.$.length
2243	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdZ.length
2243	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
2244	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdYdZ.$.length
2244	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdYdZ.length
2244	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
2245	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d3FdXdYdZ.$.length
2245	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d3FdXdYdZ.length
2245	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
35735	201	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
35735	201	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
2246	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
2246	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
2246	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
2246	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2247	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
2247	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
2247	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
2247	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2248	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
2248	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
2248	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
2248	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2249	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i].length != yLen
2249	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$].length != yLen
2249	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdZ[i].length != $
2249	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2250	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
2250	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
2250	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
2250	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2251	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i].length != yLen
2251	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$].length != yLen
2251	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdZ[i].length != $
2251	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2252	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i].length != yLen
2252	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$].length != yLen
2252	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdYdZ[i].length != $
2252	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2253	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i].length != yLen
2253	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$].length != yLen
2253	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d3FdXdYdZ[i].length != $
2253	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
35736	228	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
35736	228	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
2254	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i][j].length != zLen
2254	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	f[i][$].length != zLen
2254	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$][j].length != zLen
2254	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	f[i][j].length != $
2254	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2255	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i][j].length != zLen
2255	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdX[i][$].length != zLen
2255	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$][j].length != zLen
2255	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdX[i][j].length != $
2255	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2256	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i][j].length != zLen
2256	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdY[i][$].length != zLen
2256	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$][j].length != zLen
2256	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdY[i][j].length != $
2256	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2257	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i][j].length != zLen
2257	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdZ[i][$].length != zLen
2257	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$][j].length != zLen
2257	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdZ[i][j].length != $
2257	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2258	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i][j].length != zLen
2258	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdY[i][$].length != zLen
2258	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$][j].length != zLen
2258	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdY[i][j].length != $
2258	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2259	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i][j].length != zLen
2259	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdZ[i][$].length != zLen
2259	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$][j].length != zLen
2259	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdZ[i][j].length != $
2259	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2260	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i][j].length != zLen
2260	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdYdZ[i][$].length != zLen
2260	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$][j].length != zLen
2260	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdYdZ[i][j].length != $
2260	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2261	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != zLen
2261	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d3FdXdYdZ[i][$].length != zLen
2261	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$][j].length != zLen
2261	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != $
2261	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
35737	255	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	k	int	0	NIL-FOR	$ < lastK
35737	255	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastK	int	0	NIL-FOR	k < $
2262	311	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
2263	315	8	TricubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
2264	319	8	TricubicSplineInterpolatingFunction.java	value	k	int	0	OutOfRangeException	$ == -1
2265	338	8	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
2265	338	8	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
35738	343	8	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
35738	343	8	TricubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
2266	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
2266	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
2266	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
35739	405	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < sz
35739	405	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	i < $
35740	408	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < sz
35740	408	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	j < $
35741	434	8	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	i	int	0	NIL-FOR	$ < N
35742	435	12	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	j	int	0	NIL-FOR	$ < N
35743	436	16	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	k	int	0	NIL-FOR	$ < N
2267	450	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
2267	450	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
2268	453	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
2268	453	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
2269	456	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ < 0
2269	456	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ > 1
35744	473	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	NIL-FOR	$ < N
35745	474	12	TricubicSplineInterpolatingFunction.java	value	j	int	0	NIL-FOR	$ < N
35746	475	16	TricubicSplineInterpolatingFunction.java	value	k	int	0	NIL-FOR	$ < N
2304	40	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	fval.$.length == 0
2304	40	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	zval.$.length == 0
2304	40	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	xval.$.length == 0
2304	40	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	yval.$.length == 0
2304	40	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
2304	40	8	TricubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
2304	40	8	TricubicSplineInterpolator.java	interpolate	zval	double[]	0	NoDataException	$.length == 0
2304	40	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	NoDataException	$.length == 0
2305	43	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
2305	43	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
2305	43	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	xval.length != $.length
35774	60	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35774	60	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
2306	61	12	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
2306	61	12	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
2306	61	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
2306	61	12	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i].length != yLen
35775	65	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35775	65	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
2307	66	16	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i][j].length != zLen
2307	66	16	TricubicSplineInterpolator.java	interpolate	j	int	0	DimensionMismatchException	fval[i][$].length != zLen
2307	66	16	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$][j].length != zLen
2307	66	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	DimensionMismatchException	fval[i][j].length != $
2307	66	16	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
35776	70	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
35776	70	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
35777	83	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35777	83	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35778	90	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35778	90	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35779	97	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
35779	97	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
35780	105	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
35780	105	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
35781	107	12	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35781	107	12	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35782	109	16	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35782	109	16	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35783	121	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35783	121	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35784	123	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35784	123	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35785	125	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
35785	125	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
35786	135	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35786	135	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35787	137	12	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
35787	137	12	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
35788	139	16	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35788	139	16	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35789	148	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
35789	148	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
35790	151	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
35790	151	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
35791	154	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
35791	154	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
1632	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != standardDeviation.$.length
1632	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != standardDeviation.length
1632	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DimensionMismatchException	mean.length != $.length
35420	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
35420	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
35420	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
35397	66	8	UnitSphereRandomVectorGenerator.java	nextVector	normSq	double	0	NIL-DOWHILE	$ > 1
35398	68	12	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
35398	68	12	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
35399	76	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
35399	76	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
2456	70	8	UnivariateRealIntegratorImpl.java	UnivariateRealIntegratorImpl	f	UnivariateRealFunction	0	NullArgumentException	$ == null
2457	110	8	UnivariateRealIntegratorImpl.java	getResult	THIS	UnivariateRealIntegratorImpl	1	RET	$.resultComputed
2458	161	8	UnivariateRealIntegratorImpl.java	verifyInterval	lower	double	0	DEF	$ >= upper
2458	161	8	UnivariateRealIntegratorImpl.java	verifyInterval	upper	double	0	DEF	lower >= $
2459	174	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.minimalIterationCount <= 0
2459	174	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.maximalIterationCount <= $.minimalIterationCount
2331	77	8	UnivariateRealSolverImpl.java	UnivariateRealSolverImpl	f	UnivariateRealFunction	0	NullArgumentException	$ == null
2332	104	8	UnivariateRealSolverImpl.java	checkResultComputed	THIS	UnivariateRealSolverImpl	0	DEF	$.resultComputed
2333	210	8	UnivariateRealSolverImpl.java	verifyInterval	lower	double	0	DEF	$ >= upper
2333	210	8	UnivariateRealSolverImpl.java	verifyInterval	upper	double	0	DEF	lower >= $
2334	227	8	UnivariateRealSolverImpl.java	verifySequence	THIS	UnivariateRealSolverImpl	0	DEF	$.isSequence(lower, initial, upper)
2334	227	8	UnivariateRealSolverImpl.java	verifySequence	lower	double	0	DEF	isSequence($, initial, upper)
2334	227	8	UnivariateRealSolverImpl.java	verifySequence	initial	double	0	DEF	isSequence(lower, $, upper)
2334	227	8	UnivariateRealSolverImpl.java	verifySequence	upper	double	0	DEF	isSequence(lower, initial, $)
2335	250	8	UnivariateRealSolverImpl.java	verifyBracketing	THIS	UnivariateRealSolverImpl	0	DEF	$.isBracketing(lower, upper, function)
2335	250	8	UnivariateRealSolverImpl.java	verifyBracketing	lower	double	0	DEF	isBracketing($, upper, function)
2335	250	8	UnivariateRealSolverImpl.java	verifyBracketing	upper	double	0	DEF	isBracketing(lower, $, function)
2335	250	8	UnivariateRealSolverImpl.java	verifyBracketing	function	UnivariateRealFunction	0	DEF	isBracketing(lower, upper, $)
2372	174	8	UnivariateRealSolverUtils.java	bracket	function	UnivariateRealFunction	0	NullArgumentException	$ == null
2373	177	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	DEF	$ <= 0
2374	181	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	DEF	$ < lowerBound
2374	181	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	DEF	$ > upperBound
2374	181	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	DEF	initial < $
2374	181	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	DEF	$ >= upperBound
2374	181	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	DEF	lowerBound >= $
2374	181	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	DEF	initial > $
35828	192	8	UnivariateRealSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
35828	192	8	UnivariateRealSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
35828	192	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
35828	192	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
35828	192	8	UnivariateRealSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
35828	192	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
35828	192	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
35828	192	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
2375	202	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	ConvergenceException	$ * fb > 0.0
2375	202	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	ConvergenceException	fa * $ > 0.0
2376	229	8	UnivariateRealSolverUtils.java	setup	f	UnivariateRealFunction	0	NullArgumentException	$ == null
35421	138	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
35421	138	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
35421	138	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
35422	153	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
35422	153	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
1633	250	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
1634	267	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
1635	314	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution == null
1635	314	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution.getBinStats().size() == 0
1636	341	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
1637	344	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
1637	344	8	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
1638	348	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
1638	348	12	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
1340	158	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
1341	168	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
1342	170	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
1343	173	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
1344	193	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
1345	216	8	Variance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
1346	247	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1346	247	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1346	247	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1346	247	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1347	249	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1348	251	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1349	307	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights,begin, length)
1349	307	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights,begin, length)
1349	307	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $,begin, length)
1349	307	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights,$, length)
1349	307	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights,begin, $)
1350	309	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1351	311	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1352	393	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1352	393	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1352	393	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1352	393	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1353	394	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1354	396	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
35300	400	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
35300	400	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
35300	400	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1355	406	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
1356	495	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights, begin, length)
1356	495	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
1356	495	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
1356	495	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
1356	495	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
1357	496	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1358	498	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
35301	502	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
35301	502	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
35301	502	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
35302	509	16	Variance.java	evaluate	THIS	Variance	0	NIL-FOR	i < weights.$.length
35302	509	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < weights.length
35302	509	16	Variance.java	evaluate	weights	double[]	0	NIL-FOR	i < $.length
1359	513	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
1360	601	8	Variance.java	copy	source	Variance	0	NullArgumentException	$ == null
1360	601	8	Variance.java	copy	dest	Variance	0	NullArgumentException	$ == null
451	287	4	Vector3D.java	normalize	s	double	0	DEF	$ == 0
452	311	4	Vector3D.java	orthogonal	threshold	double	0	DEF	$ == 0
453	315	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
453	315	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
453	315	4	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
453	315	4	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
454	318	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
454	318	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
454	318	11	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
454	318	11	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
455	341	4	Vector3D.java	angle	normProduct	double	0	DEF	$ == 0
456	347	4	Vector3D.java	angle	dot	double	0	RET	$ > threshold
456	347	4	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
456	347	4	Vector3D.java	angle	threshold	double	0	RET	dot > $
456	347	4	Vector3D.java	angle	threshold	double	0	RET	dot < -$
457	350	6	Vector3D.java	angle	dot	double	0	RET	$ >= 0
458	416	4	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
458	416	4	Vector3D.java	equals	other	Object	0	RET	this == $
459	420	4	Vector3D.java	equals	other	Object	0	RET	$ instanceof Vector3D
460	422	6	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
461	440	6	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
401	241	8	Vector3DFormat.java	format	obj	Object	0	RET	$ instanceof Vector3D
402	260	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
403	279	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
403	279	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
403	279	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
404	286	8	Vector3DFormat.java	parse	x	Number	0	RET	$ == null
405	295	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
405	295	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
405	295	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
406	300	8	Vector3DFormat.java	parse	y	Number	0	RET	$ == null
407	309	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
407	309	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
407	309	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
408	314	8	Vector3DFormat.java	parse	z	Number	0	RET	$ == null
409	323	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
409	323	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
409	323	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
1371	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
1371	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
35307	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
35307	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
35307	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
35308	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
35308	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
1372	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
35309	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
35309	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
35310	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
35310	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
1373	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
1373	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
1374	138	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
1375	141	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
1375	141	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
1376	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
1376	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
1377	145	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
1377	145	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
1378	147	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
1378	147	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
35313	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
35313	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
1394	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
1394	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
35314	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
35314	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
35314	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
35315	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
35315	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
35315	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
1395	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
1395	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
1396	95	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
1397	98	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
1397	98	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
663	87	8	WeibullDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
664	120	8	WeibullDistributionImpl.java	density	x	double	0	RET	$ < 0
665	152	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ < 0.0
665	152	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ > 1.0
666	155	15	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
667	157	16	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
668	179	8	WeibullDistributionImpl.java	setShapeInternal	alpha	double	0	DEF	$ <= 0.0
669	201	8	WeibullDistributionImpl.java	setScaleInternal	beta	double	0	DEF	$ <= 0.0
670	90	8	ZipfDistributionImpl.java	setNumberOfElementsInternal	n	int	0	DEF	$ <= 0
671	129	8	ZipfDistributionImpl.java	setExponentInternal	s	double	0	DEF	$ <= 0.0
672	144	8	ZipfDistributionImpl.java	probability	THIS	ZipfDistributionImpl	0	RET	x > $.numberOfElements
672	144	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ > numberOfElements
672	144	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ <= 0
673	160	8	ZipfDistributionImpl.java	cumulativeProbability	x	int	1	RET	$ <= 0
674	162	15	ZipfDistributionImpl.java	cumulativeProbability	THIS	ZipfDistributionImpl	0	RET	x >= $.numberOfElements
674	162	15	ZipfDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ >= numberOfElements
34319	208	8	ZipfDistributionImpl.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
