id	oracle
152	contextClassLoader != null
153	mappingClass != null
154	classLoader == null
155	current == classLoader
2731	clazz.isPrimitive()
2732	fieldClass == int.class
2732	fieldClass == byte.class
2732	fieldClass == short.class
2733	fieldClass == long.class
2734	fieldClass == boolean.class
2735	fieldClass == float.class
2736	fieldClass == double.class
2737	fieldClass == char.class
2738	fieldClass == String.class
2739	fieldClass.isEnum()
2740	Collection.class.isAssignableFrom(fieldClass)
2741	itemClass == String.class
2742	fieldClass == ArrayList.class
2742	fieldClass == Collections.class
2742	fieldClass == List.class
2743	fieldClass.isArray()
2744	fieldClass == java.util.Date.class
2745	last
2746	context.fieldInfoList.length == 0
2747	fieldClass == char.class
2748	Collection.class.isAssignableFrom(fieldClass)
2749	fieldType instanceof ParameterizedType
2750	itemType instanceof Class
2751	(beanInfo.parserFeatures & Feature.SupportArrayToBean.mask) == 0
2752	fieldClass == byte.class
2752	fieldClass == short.class
2752	fieldClass == int.class
2752	fieldClass == boolean.class
2753	fieldClass == long.class
2754	fieldClass == float.class
2755	fieldClass == double.class
2756	fieldClass == String.class
2757	fieldClass == boolean.class
2758	fieldClass == byte.class
2759	fieldClass == short.class
2760	fieldClass == int.class
2761	fieldClass == long.class
2762	fieldClass == float.class
2763	fieldClass == double.class
2764	fieldClass == String.class
2765	fieldClass == int[].class
2766	fieldClass == float[].class
2767	fieldClass == float[][].class
2768	fieldClass.isEnum()
2769	Collection.class.isAssignableFrom(fieldClass)
2770	itemClass == String.class
2771	i == fieldListSize - 1
2772	i == fieldListSize - 1
2773	i == fieldListSize - 1
2774	Modifier.isAbstract(context.clazz.getModifiers())
2774	context.clazz.isInterface()
2775	buildMethod != null
2776	fieldListSize != 0
2776	(fieldListSize % 32) != 0
2777	flagSize == 1
2778	i == 0
2779	i == 1
2780	Modifier.isPublic(defaultConstructor.getModifiers())
2781	flag
2782	flag
2783	fieldClass == boolean.class
2784	fieldClass == byte.class
2784	fieldClass == short.class
2784	fieldClass == char.class
2784	fieldClass == int.class
2785	fieldClass == long.class
2786	fieldInfo.method != null
2787	fieldInfo.method.getReturnType().equals(Void.TYPE)
2788	fieldClass == float.class
2789	fieldClass == double.class
2790	fieldClass == String.class
2791	fieldClass.isEnum()
2792	Collection.class.isAssignableFrom(fieldClass)
2793	itemType == String.class
2794	method != null
2795	fieldInfo.method.getReturnType().equals(Void.TYPE)
2796	fieldClass.isInterface()
2797	isPrimitive
2798	fieldClass.isInterface()
2799	isPrimitive
2800	token == JSONToken.LBRACE
2801	token == JSONToken.LBRACKET
2802	set
2802	fieldClass.isAssignableFrom(ArrayList.class)
2803	fieldClass.isAssignableFrom(LinkedList.class)
2803	set
2804	fieldClass.isAssignableFrom(HashSet.class)
2805	fieldClass.isAssignableFrom(TreeSet.class)
2806	fieldClass.isAssignableFrom(LinkedHashSet.class)
2807	set
2808	(fieldInfo.parserFeatures & Feature.SupportArrayToBean.mask) != 0
2809	fieldInfo.fieldType instanceof Class
2810	fieldInfo.fieldType instanceof Class
2811	fieldClass.isPrimitive()
2812	Collection.class.isAssignableFrom(fieldClass)
2813	Modifier.isPublic(defaultConstructor.getModifiers())
1013	clazz.isPrimitive()
1014	fieldInfo.method != null
1014	fieldInfo.field == null
1014	fieldInfo.method.getDeclaringClass().isInterface()
1015	getters.length > 256
1016	ASMUtils.checkName(getter.getMember().getName())
1017	fieldInfo.fieldClass == String.class
1017	fieldInfo.fieldClass.isPrimitive()
1018	List.class.isAssignableFrom(fieldInfo.fieldClass)
1019	fieldInfo.fieldClass.isPrimitive()
1019	fieldInfo.fieldClass == String.class
1020	fieldInfo.method != null
1021	jsonType != null
1022	featrues == SerializerFeature.DisableCircularReferenceDetect
1023	i == 0
1024	i == 1
1025	nativeSorted
1025	context.writeDirect
1026	jsonType.alphabetic()
1026	jsonType == null
1027	context.writeDirect
1027	nonContext
1028	nativeSorted
1029	i == 0
1030	i == 1
1031	size == 0
1032	fieldClass == short.class
1032	fieldClass == byte.class
1032	fieldClass == int.class
1033	fieldClass == long.class
1034	fieldClass == float.class
1035	fieldClass == double.class
1036	fieldClass == boolean.class
1037	fieldClass == char.class
1038	fieldClass == String.class
1039	fieldClass.isEnum()
1040	List.class.isAssignableFrom(fieldClass)
1041	fieldType instanceof Class
1042	elementType instanceof Class<?>
1043	elementClass == Object.class
1044	elementClass == String.class
1044	context.writeDirect
1045	elementClass != null
1045	Modifier.isPublic(elementClass.getModifiers())
1046	context.writeDirect
1047	context.nonContext
1048	context.nonContext
1049	context.nonContext
1050	Modifier.isPublic(elementClass.getModifiers())
1050	elementClass != null
1051	Modifier.isPublic(fieldClass.getModifiers())
1051	context.writeDirect
1052	format != null
1053	fieldInfo.fieldType instanceof Class<?>
1053	((Class<?>) fieldInfo.fieldType).isPrimitive()
1054	context.writeDirect
1055	getter.method != null
1056	hasMethod
1057	context.nonContext
1058	context.writeDirect
1059	context.nonContext
1060	(context.beanInfo.features & SerializerFeature.BeanToArray.mask) == 0
1061	context.nonContext
1062	context.writeDirect
1063	context.writeDirect
1064	context.writeDirect
1065	propertyClass == byte.class
1065	propertyClass == int.class
1065	propertyClass == short.class
1066	propertyClass == long.class
1067	propertyClass == float.class
1068	propertyClass == double.class
1069	propertyClass == boolean.class
1070	propertyClass == char.class
1071	propertyClass == String.class
1072	propertyClass == BigDecimal.class
1073	List.class.isAssignableFrom(propertyClass)
1074	propertyClass.isEnum()
1075	context.writeDirect
1076	context.nonContext
1077	context.writeDirect
1078	method != null
1079	method.getReturnType().equals(fieldInfo.fieldClass)
1080	field.getType().equals(fieldInfo.fieldClass)
1081	context.writeDirect
1082	elementType instanceof Class<?>
1083	elementClass == Object.class
1083	elementClass == Serializable.class
1084	context.nonContext
1085	context.writeDirect
1085	elementType == String.class
1086	elementClass != null
1086	Modifier.isPublic(elementClass.getModifiers())
1087	context.writeDirect
1088	context.nonContext
1089	context.nonContext
1090	context.nonContext
1091	Modifier.isPublic(elementClass.getModifiers())
1091	elementClass != null
1092	property.fieldTransient
1093	context.writeDirect
1094	context.writeDirect
1095	property.field == null
1096	context.writeDirect
1097	ParserConfig.isPrimitive2(fieldClass)
1097	Modifier.isPublic(fieldClass.getModifiers())
1098	context.nonContext
1098	context.writeDirect
1099	context.writeDirect
1100	format != null
1101	fieldInfo.fieldType instanceof Class<?>
1101	((Class<?>) fieldInfo.fieldType).isPrimitive()
1102	fieldInfo.fieldClass == String.class
1103	context.writeDirect
1104	propertyClass == boolean.class
1105	propertyClass == byte.class
1106	propertyClass == short.class
1107	propertyClass == int.class
1108	propertyClass == long.class
1109	propertyClass == float.class
1110	propertyClass == double.class
1111	propertyClass == byte.class
1112	propertyClass == short.class
1113	propertyClass == int.class
1114	propertyClass == char.class
1115	propertyClass == long.class
1116	propertyClass == float.class
1117	propertyClass == double.class
1118	propertyClass == boolean.class
1119	propertyClass == BigDecimal.class
1120	propertyClass == String.class
1121	propertyClass.isEnum()
1122	List.class.isAssignableFrom(propertyClass)
1123	fieldClass.isPrimitive()
1124	fieldClass == byte.class
1125	fieldClass == short.class
1126	fieldClass == int.class
1127	fieldClass == char.class
1128	fieldClass == long.class
1129	fieldClass == float.class
1130	fieldClass == double.class
1131	fieldClass == boolean.class
1132	fieldClass == BigDecimal.class
1133	fieldClass == String.class
1134	fieldClass.isEnum()
1135	List.class.isAssignableFrom(fieldClass)
1136	propertyClass == byte.class
1137	propertyClass == short.class
1138	propertyClass == int.class
1139	propertyClass == char.class
1140	propertyClass == long.class
1141	propertyClass == float.class
1142	propertyClass == double.class
1143	propertyClass == boolean.class
1144	propertyClass == BigDecimal.class
1145	propertyClass == String.class
1146	propertyClass.isEnum()
1147	List.class.isAssignableFrom(propertyClass)
1148	annotation != null
1149	(features & SerializerFeature.WRITE_MAP_NULL_FEATURES) == 0
1150	propertyClass == String.class
1150	propertyClass == Character.class
1151	Number.class.isAssignableFrom(propertyClass)
1152	propertyClass == Boolean.class
1153	propertyClass.isArray()
1153	Collection.class.isAssignableFrom(propertyClass)
1154	context.writeDirect
0	vmName == null
1	returnType.isPrimitive()
2	returnType.isArray()
3	parameterType.isArray()
4	parameterType.isPrimitive()
5	Integer.TYPE == type
6	Void.TYPE == type
7	Boolean.TYPE == type
8	Character.TYPE == type
9	Byte.TYPE == type
10	Short.TYPE == type
11	Float.TYPE == type
12	Long.TYPE == type
13	Double.TYPE == type
14	c == '.'
14	c < '\001'
14	c > '\177'
2699	lexer.token() == JSONToken.LITERAL_INT
2700	lexer.token() == JSONToken.LITERAL_STRING
2701	format != null
2702	format.equals("yyyy-MM-ddTHH:mm:ss.SSS")
2703	format.equals("yyyy-MM-ddTHH:mm:ss")
2704	format.equals("yyyy-MM-dd'T'HH:mm:ss.SSS")
2704	strVal.length() == 19
2705	val == null
2706	lexer.isEnabled(Feature.AllowISO8601DateFormat)
2707	iso8601Lexer.scanISO8601DateIfMatch()
2708	lexer.token() == JSONToken.NULL
2709	lexer.token() == JSONToken.LBRACE
2710	lexer.token() == JSONToken.LITERAL_STRING
2711	JSON.DEFAULT_TYPE_KEY.equals(key)
2712	type != null
2713	lexer.token() == JSONToken.LITERAL_INT
2714	parser.getResolveStatus() == DefaultJSONParser.TypeNameRedirect
2715	lexer.token() == JSONToken.LITERAL_STRING
2716	"val".equals(lexer.stringVal())
827	object instanceof LongAdder
828	object instanceof DoubleAdder
1188	seperator != ','
123	initialCapacity < 0
124	initialCapacity > MAXIMUM_CAPACITY
125	loadFactor <= 0
125	Float.isNaN(loadFactor)
126	key == null
127	key instanceof String
128	(k = e.key) == key
128	key.equals(k)
128	e.hash == hash
129	e.key == null
130	e.hash == hash
130	key.equals(k)
130	key != null
130	(k = e.key) == key
131	key == null
132	key instanceof String
133	key.equals(k)
133	(k = e.key) == key
133	e.hash == hash
134	e.key == null
135	key.equals(k)
135	(k = e.key) == key
135	e.hash == hash
135	key != null
136	oldCapacity == MAXIMUM_CAPACITY
137	e != null
138	numKeysToBeAdded == 0
139	numKeysToBeAdded > threshold
140	targetCapacity > MAXIMUM_CAPACITY
141	newCapacity > table.length
142	e.hash == hash
142	key != null
142	key.equals(k)
142	(k = e.key) == key
143	prev == e
144	o instanceof Map.Entry
145	e.hash == hash
145	e.equals(entry)
146	prev == e
147	value == null
148	value.equals(e.value)
149	e.value == null
150	size++ >= threshold
151	i != null
1222	object == null
2913	fieldType instanceof ParameterizedType
2914	argType instanceof WildcardType
2915	upperBounds.length == 1
2916	parser.lexer.token() == JSONToken.NULL
2917	object == null
2918	objectType instanceof ParameterizedType
2919	itemType instanceof TypeVariable
2920	paramType.getRawType() instanceof Class
2921	objectClass != null
2922	item.getName().equals(typeVar.getName())
2923	paramIndex != -1
2924	itemType.equals(this.itemType)
2925	itemType instanceof ParameterizedType
2926	itemActualTypeArgs.length == 1
2926	itemActualTypeArgs[0] instanceof TypeVariable
2927	paramType.getRawType() instanceof Class
2928	objectClass != null
2929	item.getName().equals(typeVar.getName())
2930	paramIndex != -1
2931	lexer.token() == JSONToken.LBRACKET
2932	itemTypeDeser == null
2933	lexer.isEnabled(Feature.AllowArbitraryCommas)
2934	lexer.token() == JSONToken.RBRACKET
2935	lexer.token() == JSONToken.COMMA
2936	itemTypeDeser == null
1519	object == null
1520	i != 0
1521	item == null
1522	item.getClass() == componentType
1156	object instanceof AtomicInteger
1157	object instanceof AtomicLong
1158	object instanceof AtomicBoolean
1159	object == null
1160	object instanceof AtomicIntegerArray
1161	i != 0
1162	i != 0
1163	parser.lexer.token() == JSONToken.NULL
1164	clazz == AtomicIntegerArray.class
891	object == null
892	object instanceof Point
893	object instanceof Font
894	object instanceof Rectangle
895	object instanceof Color
896	color.getAlpha() > 0
897	out.isEnabled(SerializerFeature.WriteClassName)
898	lexer.token() == JSONToken.NULL
899	lexer.token() != JSONToken.COMMA
899	lexer.token() != JSONToken.LBRACE
900	type == Point.class
901	type == Rectangle.class
902	type == Color.class
903	type == Font.class
904	lexer.token() == JSONToken.RBRACE
905	lexer.token() == JSONToken.LITERAL_STRING
906	key.equalsIgnoreCase("name")
907	lexer.token() == JSONToken.LITERAL_STRING
908	key.equalsIgnoreCase("style")
909	lexer.token() == JSONToken.LITERAL_INT
910	key.equalsIgnoreCase("size")
911	lexer.token() == JSONToken.LITERAL_INT
912	lexer.token() == JSONToken.COMMA
913	lexer.token() == JSONToken.RBRACE
914	lexer.token() == JSONToken.LITERAL_STRING
915	lexer.token() == JSONToken.LITERAL_INT
916	key.equalsIgnoreCase("r")
917	key.equalsIgnoreCase("g")
918	key.equalsIgnoreCase("b")
919	key.equalsIgnoreCase("alpha")
920	lexer.token() == JSONToken.COMMA
921	lexer.token() == JSONToken.RBRACE
922	lexer.token() == JSONToken.LITERAL_STRING
923	token == JSONToken.LITERAL_INT
924	token == JSONToken.LITERAL_FLOAT
925	key.equalsIgnoreCase("x")
926	key.equalsIgnoreCase("y")
927	key.equalsIgnoreCase("width")
928	key.equalsIgnoreCase("height")
929	lexer.token() == JSONToken.COMMA
930	lexer.token() == JSONToken.RBRACE
931	lexer.token() == JSONToken.LITERAL_STRING
932	JSON.DEFAULT_TYPE_KEY.equals(key)
933	"$ref".equals(key)
934	token == JSONToken.LITERAL_INT
935	token == JSONToken.LITERAL_FLOAT
936	key.equalsIgnoreCase("x")
937	key.equalsIgnoreCase("y")
938	lexer.token() == JSONToken.COMMA
109	charsLen == 0
110	sepCnt > 0
110	++cc == 19
111	d < len
112	charsLen == 0
113	sepCnt > 0
113	++cc == 19
114	d < len
115	sLen == 0
116	++cc == 19
116	sepCnt > 0
117	d < len
1001	seperator != ','
610	object == null
611	out.isEnabled(SerializerFeature.WriteBigDecimalAsPlain)
612	fieldType != BigDecimal.class
612	out.isEnabled(SerializerFeature.WriteClassName)
612	val.scale() == 0
613	lexer.token() == JSONToken.LITERAL_INT
614	lexer.token() == JSONToken.LITERAL_FLOAT
1009	object == null
1010	lexer.token() == JSONToken.LITERAL_INT
665	value == null
666	value.booleanValue()
667	lexer.token() == JSONToken.TRUE
668	lexer.token() == JSONToken.FALSE
669	lexer.token() == JSONToken.LITERAL_INT
670	intValue == 1
671	value == null
672	clazz == AtomicBoolean.class
3122	length + 1 > data.length
3123	length + 2 > data.length
3124	length + 2 > data.length
3125	length + 3 > data.length
3126	length + 4 > data.length
3127	len + 2 + charLength > data.length
3128	c <= '\177'
3128	c >= '\001'
3129	length + len > data.length
3130	b != null
1439	object == null
1440	object instanceof XMLGregorianCalendar
1441	out.isEnabled(SerializerFeature.UseISO8601DateFormat)
1442	millis != 0
1443	hour == 0
1443	second == 0
1443	minute == 0
1444	timeZone == 0
1445	timeZone > 0
1446	value instanceof Calendar
1447	date == null
1448	type == XMLGregorianCalendar.class
1449	dateFactory == null
730	lexer.token() == JSONToken.LITERAL_STRING
731	lexer.token() == JSONToken.LITERAL_INT
732	value instanceof String
733	value instanceof Collection
734	item instanceof String
735	itemLength != 1
736	accept
829	value == null
830	c == 0
3109	interfaces.length > 0
3109	interfaces != null
3110	cst instanceof Integer
3111	result == null
3112	cst instanceof String
3113	cst instanceof Type
3114	result == null
3115	result == null
3116	result == null
3117	result == null
3118	result == null
3119	result == null
3120	index > threshold
1011	object == null
1012	len < 0
815	object == null
816	out.isEnabled(SerializerFeature.WriteClassName)
817	out.isEnabled(SerializerFeature.WriteClassName)
818	HashSet.class == collection.getClass()
819	TreeSet.class == collection.getClass()
820	i++ != 0
821	item == null
822	clazz == Integer.class
823	clazz == Long.class
824	out.isEnabled(SerializerFeature.WriteClassName)
825	parser.lexer.token() == JSONToken.NULL
826	type == JSONArray.class
709	object == null
710	object instanceof Date
711	out.isEnabled(SerializerFeature.WriteDateUseDateFormat)
712	format == null
713	out.isEnabled(SerializerFeature.WriteClassName)
714	object.getClass() != fieldType
715	object.getClass() == java.util.Date.class
716	out.isEnabled(SerializerFeature.UseISO8601DateFormat)
717	millis != 0
718	minute == 0
718	hour == 0
718	second == 0
719	timeZone == 0
720	timeZone > 0
721	val == null
722	val instanceof java.util.Date
723	val instanceof Number
724	val instanceof String
725	strVal.length() == 0
726	dateLexer.scanISO8601DateIfMatch(false)
727	clazz == Calendar.class
728	strVal.length() == parser.getDateFomartPattern().length()
729	strVal.endsWith(")/")
729	strVal.startsWith("/Date(")
2383	fieldValueDeserilizer == null
2384	annotation.deserializeUsing() != Void.class
2384	annotation != null
2385	fieldValueDeserilizer == null
2386	objectType instanceof ParameterizedType
2387	objContext != null
2388	fieldValueDeserilizer instanceof JavaBeanDeserializer
2388	fieldInfo.parserFeatures != 0
2389	fieldValueDeserilizer instanceof ContextObjectDeserializer
2389	this.fieldInfo.format != null
2390	parser.getResolveStatus() == DefaultJSONParser.NeedToResolve
2391	object == null
2392	fieldValueDeserilizer != null
2153	dateFormat == null
2154	ch == '{'
2155	ch == '['
2156	input instanceof char[]
2157	lexer.token() == JSONToken.NULL
2158	lexer.token() == JSONToken.RBRACE
2159	lexer.token() != JSONToken.COMMA
2159	lexer.token() != JSONToken.LBRACE
2160	lexer.isEnabled(Feature.AllowArbitraryCommas)
2161	ch == '"'
2162	ch != ':'
2163	ch == '}'
2164	setContextFlag
2165	fieldName == this.context.fieldName
2165	this.context != null
2165	object == this.context.object
2166	context == null
2167	ch == '\''
2168	lexer.isEnabled(Feature.AllowSingleQuotes)
2169	ch != ':'
2170	ch == EOI
2171	ch == ','
2172	ch == '-'
2172	ch <= '9'
2172	ch >= '0'
2173	lexer.token() == JSONToken.LITERAL_INT
2174	ch != ':'
2175	ch == '['
2175	ch == '{'
2176	lexer.isEnabled(Feature.AllowUnQuotedFieldNames)
2177	ch != ':'
2178	isObjectKey
2179	lexer.isEnabled(Feature.DisableSpecialKeyDetect)
2179	key == JSON.DEFAULT_TYPE_KEY
2180	clazz == null
2181	lexer.token() == JSONToken.RBRACE
2182	deserializer instanceof JavaBeanDeserializer
2183	instance == null
2184	clazz == Cloneable.class
2185	"java.util.Collections$EmptyMap".equals(typeName)
2186	fieldName instanceof Integer
2186	this.context.fieldName instanceof Integer
2186	this.context != null
2187	object.size() > 0
2188	key == "$ref"
2188	lexer.isEnabled(Feature.DisableSpecialKeyDetect)
2189	lexer.token() == JSONToken.LITERAL_STRING
2190	"@".equals(ref)
2191	this.context != null
2192	thisObj instanceof Collection<?>
2192	thisObj instanceof Object[]
2193	thisContext.parent != null
2194	"..".equals(ref)
2195	context.object != null
2196	"$".equals(ref)
2197	rootContext.object != null
2198	lexer.token() != JSONToken.RBRACE
2199	setContextFlag
2200	fieldName == this.context.fieldName
2200	this.context != null
2200	object == this.context.object
2201	context == null
2202	object.getClass() == JSONObject.class
2203	ch == '"'
2204	lexer.isEnabled(Feature.AllowISO8601DateFormat)
2205	iso8601Lexer.scanISO8601DateIfMatch()
2206	ch <= '9'
2206	ch >= '0'
2206	ch == '-'
2207	lexer.token() == JSONToken.LITERAL_INT
2208	ch == '['
2209	fieldName == null
2210	lexer.isEnabled(Feature.UseObjectArray)
2211	lexer.token() == JSONToken.RBRACE
2212	lexer.token() == JSONToken.COMMA
2213	ch == '{'
2214	parentIsArray
2215	fieldTypeResolver != null
2216	fieldType != null
2217	objParsed
2218	input != obj
2218	ctxLocal != null
2219	object.getClass() == JSONObject.class
2220	parentIsArray
2221	lexer.token() == JSONToken.RBRACE
2222	lexer.token() == JSONToken.COMMA
2223	parentIsArray
2224	object.getClass() == JSONObject.class
2225	lexer.token() == JSONToken.RBRACE
2226	lexer.token() == JSONToken.COMMA
2227	ch == ','
2228	ch == '}'
2229	token == JSONToken.NULL
2230	token == JSONToken.LITERAL_STRING
2231	type == byte[].class
2232	type == char[].class
2233	lexer.token() == JSONToken.TREE_SET
2233	lexer.token() == JSONToken.SET
2234	lexer.token() != JSONToken.LBRACKET
2235	int.class == type
2236	String.class == type
2237	lexer.isEnabled(Feature.AllowArbitraryCommas)
2238	lexer.token() == JSONToken.RBRACKET
2239	int.class == type
2240	String.class == type
2241	lexer.token() == JSONToken.LITERAL_STRING
2242	obj == null
2243	lexer.token() == JSONToken.NULL
2244	lexer.token() == JSONToken.COMMA
2245	lexer.token() == JSONToken.NULL
2246	lexer.token() != JSONToken.LBRACKET
2247	types.length == 0
2248	lexer.token() != JSONToken.RBRACKET
2249	lexer.token() == JSONToken.NULL
2250	type == Integer.class
2250	type == int.class
2251	lexer.token() == JSONToken.LITERAL_INT
2252	type == String.class
2253	lexer.token() == JSONToken.LITERAL_STRING
2254	i == types.length - 1
2255	type instanceof Class
2256	isArray
2256	lexer.token() != JSONToken.LBRACKET
2257	lexer.token() != JSONToken.RBRACKET
2258	lexer.token() == JSONToken.COMMA
2259	lexer.token() == JSONToken.RBRACKET
2260	lexer.token() == JSONToken.RBRACKET
2261	lexer.token() != JSONToken.COMMA
2262	i == types.length - 1
2263	lexer.token() != JSONToken.RBRACKET
2264	deserizer instanceof JavaBeanDeserializer
2265	lexer.token() != JSONToken.LBRACE
2265	lexer.token() != JSONToken.COMMA
2266	key == null
2267	lexer.token() == JSONToken.RBRACE
2268	lexer.token() == JSONToken.COMMA
2269	lexer.isEnabled(Feature.AllowArbitraryCommas)
2270	beanDeser != null
2271	fieldDeser == null
2272	lexer.isEnabled(Feature.IgnoreNotMatch)
2273	lexer.token() == JSONToken.RBRACE
2274	fieldClass == int.class
2275	fieldClass == String.class
2276	fieldClass == long.class
2277	lexer.token() == JSONToken.COMMA
2278	lexer.token() == JSONToken.RBRACE
2279	lexer.token() == JSONToken.NULL
2280	actualTypes.length != 1
2281	actualTypeArgument instanceof Class
2282	actualTypeArgument instanceof WildcardType
2283	Object.class.equals(upperBoundType)
2284	wildcardType.getLowerBounds().length == 0
2285	actualTypeArgument instanceof TypeVariable
2286	bounds.length != 1
2287	boundType instanceof Class
2288	actualTypeArgument instanceof ParameterizedType
2289	lexer.token() != JSONToken.LITERAL_STRING
2290	typeName.equals(lexer.stringVal())
2291	lexer.token() == JSONToken.COMMA
2292	path.equals(contextArray[i].toString())
2293	resolveStatus == NeedToResolve
2294	array instanceof List
2295	resolveStatus == NeedToResolve
2296	lexer.token() == JSONToken.TREE_SET
2296	lexer.token() == JSONToken.SET
2297	lexer.token() != JSONToken.LBRACKET
2298	lexer.isEnabled(Feature.AllowArbitraryCommas)
2299	lexer.isEnabled(Feature.UseBigDecimal)
2300	lexer.isEnabled(Feature.AllowISO8601DateFormat)
2301	iso8601Lexer.scanISO8601DateIfMatch()
2302	lexer.isEnabled(Feature.UseObjectArray)
2303	lexer.token() == JSONToken.COMMA
2304	resolveTaskList == null
2305	resolveTaskList == null
2306	extraProcessors == null
2307	extraTypeProviders == null
2308	lexer.isEnabled(Feature.DisableCircularReferenceDetect)
2309	lexer.isEnabled(Feature.DisableCircularReferenceDetect)
2310	contextArrayIndex <= 0
2311	lexer.isEnabled(Feature.DisableCircularReferenceDetect)
2312	lexer.isEnabled(Feature.DisableCircularReferenceDetect)
2313	contextArray == null
2314	i >= contextArray.length
2315	lexer.token() == JSONToken.IDENTIFIER
2316	lexer.isEnabled(Feature.UseObjectArray)
2317	lexer.isEnabled(Feature.AllowISO8601DateFormat)
2318	iso8601Lexer.scanISO8601DateIfMatch()
2319	lexer.token() != JSONToken.IDENTIFIER
2320	lexer.isBlankInput()
2321	lexer.token() == token
2322	lexer.token() == token
2323	lexer.isEnabled(Feature.AutoCloseSource)
2324	lexer.token() != JSONToken.EOF
2325	resolveTaskList == null
2326	task.ownerContext != null
2327	fieldDeser != null
2328	Map.class.isAssignableFrom(fieldDeser.fieldInfo.fieldClass)
2328	refValue != null
2328	refValue.getClass() == JSONObject.class
2328	fieldDeser.fieldInfo != null
2329	extraTypeProviders != null
2330	object instanceof ExtraProcessable
2331	extraProcessors != null
2332	resolveStatus == NeedToResolve
791	object == null
792	Double.isNaN(doubleValue)
792	Double.isInfinite(doubleValue)
793	decimalFormat == null
2717	this.enumNameHashCodes[i] == enumNameHashCodes[j]
2718	enums == null
2719	enumIndex < 0
2720	token == JSONToken.LITERAL_INT
2721	intValue > ordinalEnums.length
2721	intValue < 0
2722	token == JSONToken.LITERAL_STRING
2723	strVal.length() == 0
2724	token == JSONToken.NULL
1175	object == null
1176	out.isEnabled(SerializerFeature.WriteClassName)
1177	fieldType instanceof ParameterizedType
1178	i++ != 0
1179	item == null
3393	classSerializeFilters == null
3382	filter == null
3383	obj != null
3384	"com.fasterxml.jackson.databind.node.ObjectNode".equals(className)
3385	writeAsToString
3386	fastJsonConfig.isWriteContentLength()
3387	fastJsonConfig.isWriteContentLength()
3388	headers.getContentType() == null
3389	contentType == null
3389	contentType.isWildcardSubtype()
3389	contentType.isWildcardType()
3390	contentType != null
3391	headers.getContentLength() == -1
3392	contentLength != null
3381	fastJsonConfig.isWriteContentLength()
3374	this.updateContentLength
3375	this.disableCaching
3376	entry.getValue() instanceof BindingResult
3376	renderedAttributes.contains(entry.getKey())
3377	extractValueFromSingleKeyModel
3378	result.size() == 1
3362	type == null
3363	clazzes != null
3364	cls == type
3365	mediaType != null
3366	hasMatchingMediaType(mediaType)
3367	pretty
3368	serializerFeatures == null
3369	hasMatchingMediaType(mediaType)
3370	obj instanceof MappingFastJsonValue
3371	fastJsonConfig.isWriteContentLength()
3372	jsonpFunction != null
3373	jsonpFunction != null
3379	value != null
3380	isValidJsonpQueryParam(value)
2857	fieldInfo.fieldClass.isPrimitive()
2857	value == null
2858	method != null
2859	fieldInfo.getOnly
2860	fieldInfo.fieldClass == AtomicInteger.class
2861	atomic != null
2862	fieldInfo.fieldClass == AtomicLong.class
2863	atomic != null
2864	fieldInfo.fieldClass == AtomicBoolean.class
2865	atomic != null
2866	Map.class.isAssignableFrom(method.getReturnType())
2867	map != null
2868	collection != null
2868	value != null
2869	fieldInfo.getOnly
2870	fieldInfo.fieldClass == AtomicInteger.class
2871	atomic != null
2872	fieldInfo.fieldClass == AtomicLong.class
2873	atomic != null
2874	fieldInfo.fieldClass == AtomicBoolean.class
2875	atomic != null
2876	Map.class.isAssignableFrom(fieldInfo.fieldClass)
2877	map != null
2878	collection != null
2878	value != null
2879	field != null
204	field != null
205	field != null
206	field != null
207	fieldName.equals(name)
208	field != null
209	label != null
209	label.length() > 0
210	annotation != null
211	format.trim().length() == 0
212	method != null
213	field != null
214	method != null
215	(types = method.getParameterTypes()).length == 1
216	types[1] == Object.class
216	types[0] == String.class
216	types.length == 2
217	clazz != null
217	fieldClass == Object.class
217	fieldType instanceof TypeVariable
218	genericFieldType != null
219	fieldType instanceof Class
220	genericFieldType != fieldType
221	genericFieldType instanceof ParameterizedType
222	genericFieldType instanceof Class
223	annotationClass == JSONField.class
224	method != null
225	field != null
225	annotatition == null
226	type == null
226	clazz == null
227	fieldType instanceof GenericArrayType
228	componentType != componentTypeX
229	TypeUtils.isGenericParamType(type)
230	fieldType instanceof TypeVariable
231	typeVariables[i].getName().equals(typeVar.getName())
232	fieldType instanceof ParameterizedType
233	type instanceof ParameterizedType
234	clazz.getGenericSuperclass() instanceof ParameterizedType
235	feildTypeArguement instanceof TypeVariable
236	typeVariables[j].getName().equals(typeVar.getName())
237	actualTypes == null
238	arguments[i] != actualTypes[j]
239	changed
240	type == null
241	type instanceof ParameterizedType
242	eq
243	tv.equals(tvs[i])
244	method != null
245	this.method != null
246	this.field != null
247	this.ordinal < o.ordinal
248	this.ordinal > o.ordinal
249	result != 0
250	thisDeclaringClass != null
250	otherDeclaringClass != null
250	thisDeclaringClass != otherDeclaringClass
251	thisDeclaringClass.isAssignableFrom(otherDeclaringClass)
252	otherDeclaringClass.isAssignableFrom(thisDeclaringClass)
253	oSameType
253	isSampeType
254	oSameType
254	isSampeType
255	o.fieldClass.isPrimitive()
255	this.fieldClass.isPrimitive()
256	this.fieldClass.isPrimitive()
256	o.fieldClass.isPrimitive()
257	this.fieldClass.getName().startsWith("java.")
257	o.fieldClass.getName().startsWith("java.")
258	o.fieldClass.getName().startsWith("java.")
258	this.fieldClass.getName().startsWith("java.")
259	this.fieldAnnotation != null
260	method != null
261	method != null
262	method != null
263	item.equals(name)
1189	annotation != null
1190	(feature.getMask() & SerializerFeature.WRITE_MAP_NULL_FEATURES) != 0
1191	format.trim().length() == 0
1192	feature == SerializerFeature.WriteEnumUsingToString
1193	feature == SerializerFeature.WriteEnumUsingName
1194	out.quoteFieldNames
1195	out.useSingleQuotes
1196	single_quoted_fieldPrefix == null
1197	un_quoted_fieldPrefix == null
1198	propertyValue != null
1198	format != null
1199	fieldInfo.fieldClass == Date.class
1200	runtimeInfo == null
1201	propertyValue == null
1202	fieldAnnotation.serializeUsing() != Void.class
1202	fieldAnnotation != null
1203	format != null
1204	runtimeFieldClass == double.class
1204	runtimeFieldClass == Double.class
1205	runtimeFieldClass == Float.class
1205	runtimeFieldClass == float.class
1206	fieldSerializer == null
1207	propertyValue == null
1208	Number.class.isAssignableFrom(runtimeFieldClass)
1209	String.class == runtimeFieldClass
1210	Boolean.class == runtimeFieldClass
1211	Collection.class.isAssignableFrom(runtimeFieldClass)
1212	fieldSerializer instanceof JavaBeanSerializer
1212	out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES)
1213	fieldInfo.isEnum
1214	writeEnumUsingName
1215	writeEnumUsingToString
1216	serializeUsing
1216	valueClass == runtimeInfo.runtimeFieldClass
1217	valueSerializer instanceof FloatCodec
1217	format != null
1217	valueSerializer instanceof DoubleSerializer
1218	valueSerializer instanceof ContextObjectSerializer
1219	fieldInfo.unwrapped
1220	valueSerializer instanceof JavaBeanSerializer
1221	valueSerializer instanceof MapSerializer
3121	cw.firstField == null
1181	object == null
1182	decimalFormat != null
1183	lexer.token() == JSONToken.LITERAL_INT
1184	lexer.token() == JSONToken.LITERAL_FLOAT
1185	value == null
1155	object instanceof Multimap
160	null != imputStream
161	x != null
162	x < p
163	i < 0
164	i2 == 0
165	sign != 0
166	i < 0
167	i == 0
168	sign != 0
169	i < 0
170	i == 0
171	sign != 0
172	x <= sizeTable[i]
173	cr.isUnderflow()
174	cr.isUnderflow()
175	charsLen == 0
176	++cc == 19
176	sepCnt > 0
177	d < len
178	charsLen == 0
179	++cc == 19
179	sepCnt > 0
180	d < len
181	sLen == 0
182	++cc == 19
182	sepCnt > 0
183	d < len
184	c < 0x80
185	c < 0x800
186	c >= '\uD800'
186	c < ('\uDFFF' + 1)
187	Character.isHighSurrogate(c)
188	sl - ip < 2
189	Character.isLowSurrogate(d)
190	Character.isLowSurrogate(c)
191	uc < 0
192	b1 >= 0
193	(b1 >> 5) == -2
193	(b1 & 0x1e) != 0
194	sp < sl
195	(b2 & 0xc0) != 0x80
196	(b1 >> 4) == -2
197	sp + 1 < sl
198	(b2 & 0xe0) == 0x80
198	(b2 & 0xc0) != 0x80
198	b1 == (byte) 0xe0
198	(b3 & 0xc0) != 0x80
199	isSurrogate
200	(b1 >> 3) == -2
201	sp + 2 < sl
202	(b2 & 0xc0) != 0x80
202	(b4 & 0xc0) != 0x80
202	Character.isSupplementaryCodePoint(uc)
202	(b3 & 0xc0) != 0x80
203	len < 0
118	key == entry.key
119	bucket == null
120	key instanceof Class
121	className.equals(keyString)
122	key == entry.key
876	value == null
877	object instanceof Long
878	out.isEnabled(SerializerFeature.WriteClassName)
879	clazz == Byte.class
880	clazz == Short.class
881	token == JSONToken.NULL
882	token == JSONToken.LITERAL_INT
883	token == JSONToken.LITERAL_FLOAT
884	token == JSONToken.LBRACE
885	clazz == AtomicInteger.class
3169	text == null
3170	input == null
3170	input.length == 0
3171	obj instanceof JSONObject
3172	input == null
3173	input == null
3174	features != null
3175	processor != null
3176	processor instanceof ExtraTypeProvider
3177	processor instanceof ExtraProcessor
3178	processor instanceof FieldTypeResolver
3179	charset == null
3180	charset == IOUtils.UTF8
3181	input.length == 0
3181	input == null
3182	charset == null
3183	readCount == -1
3184	offset == bytes.length
3185	text == null
3186	lexer.token() == JSONToken.NULL
3187	lexer.token() == JSONToken.EOF
3188	text == null
3189	token == JSONToken.NULL
3190	lexer.isBlankInput()
3190	token == JSONToken.EOF
3191	text == null
3192	objectArray == null
3193	dateFormat != null
3193	dateFormat.length() != 0
3194	filters != null
3195	prettyFormat
3196	dateFormat.length() != 0
3196	dateFormat != null
3197	filters != null
3198	javaObject == null
3199	javaObject instanceof JSON
3200	javaObject instanceof Map
3201	javaObject instanceof Collection
3202	clazz.isEnum()
3203	clazz.isArray()
3204	ParserConfig.isPrimitive2(clazz)
3205	interfaces.length == 1
3205	interfaces[0].isAnnotation()
3206	serializer instanceof JavaBeanSerializer
3207	chars == null
3208	length <= 1024 * 64
3209	chars.length < length
3210	chars == null
3211	length <= 1024 * 64
3212	chars.length < length
3350	index == -1
3351	list.size() <= index
3352	value instanceof JSONObject
3353	value instanceof JSONArray
3354	value == null
3355	value == null
3356	value == null
3357	value == null
3358	value == null
3359	value == null
3360	value == null
3361	value == null
1523	(features & Feature.InitStringFieldAsEmpty.mask) != 0
1524	sbuf == null
1525	ch == '/'
1526	ch == '"'
1527	ch == ','
1528	ch <= '9'
1528	ch >= '0'
1529	ch == '-'
1530	isEnabled(Feature.AllowSingleQuotes)
1531	isEOF()
1532	token == EOF
1533	ch <= 31
1533	ch == 127
1534	ch == '{'
1535	ch == '['
1536	ch == ','
1537	ch == '}'
1538	ch == ']'
1539	ch == EOI
1540	ch <= '9'
1540	ch >= '0'
1541	ch == '"'
1542	ch == '['
1543	ch == '{'
1544	ch == '"'
1545	ch <= '9'
1545	ch >= '0'
1546	ch == '['
1547	ch == '{'
1548	ch == '['
1549	ch == '{'
1550	ch == ']'
1551	ch == EOI
1552	ch == '\r'
1552	ch == '\n'
1552	ch == '\t'
1552	ch == '\b'
1552	ch == ' '
1552	ch == '\f'
1553	ch == '_'
1553	Character.isLetter(ch)
1554	ch == expect
1555	ch == '\n'
1555	ch == ' '
1555	ch == '\r'
1555	ch == '\t'
1555	ch == '\b'
1555	ch == '\f'
1556	np == -1
1557	charAt(np) == '-'
1558	i < max
1559	result < multmin
1560	result < limit + digit
1561	negative
1562	i > np + 1
1563	result >= Integer.MIN_VALUE
1563	type != 'L'
1564	type == 'S'
1565	type == 'B'
1566	result <= Integer.MAX_VALUE
1566	type != 'L'
1567	type == 'S'
1568	type == 'B'
1569	floatValue == Float.POSITIVE_INFINITY
1569	floatValue == 0
1570	c0 > '0'
1570	c0 <= '9'
1571	(features & Feature.InitStringFieldAsEmpty.mask) != 0
1572	ch == '/'
1573	ch == '\n'
1574	ch == EOI
1575	ch == '*'
1576	ch == '*'
1577	ch == '/'
1578	ch == '"'
1579	ch == '\''
1580	isEnabled(Feature.AllowSingleQuotes)
1581	ch == '}'
1582	ch == ','
1583	ch == EOI
1584	isEnabled(Feature.AllowUnQuotedFieldNames)
1585	chLocal == quote
1586	chLocal == EOI
1587	chLocal == '\\'
1588	hasSpecial
1589	sp >= sbuf.length
1590	sp > newCapcity
1591	hasSpecial
1592	sp == sbuf.length
1593	hasSpecial
1594	np == -1
1595	token == JSONToken.ERROR
1595	bp == 1
1595	pos == 0
1596	firstFlag
1597	chLocal < identifierFlags.length
1598	identifierFlags[chLocal]
1599	charAt(np + 1) == 'u'
1599	sp == 4
1599	hash == NULL_HASH
1599	charAt(np + 2) == 'l'
1599	charAt(np) == 'n'
1599	charAt(np + 3) == 'l'
1600	symbolTable == null
1601	ch == '\"'
1602	ch == EOI
1603	isEOF()
1604	ch == '\\'
1605	hasSpecial
1606	sp >= sbuf.length
1607	sp > newCapcity
1608	hasSpecial
1609	sp == sbuf.length
1610	np == -1
1611	charAt(np) == '-'
1612	i < max
1613	chLocal == 'B'
1613	chLocal == 'S'
1613	chLocal == 'L'
1614	result < multmin
1615	result < limit + digit
1616	negative
1617	i > np + 1
1618	sbuf.length <= 1024 * 8
1619	sp != 4
1620	charArrayCompare(typeFieldName)
1621	type.charAt(i) != charAt(bpLocal + i)
1622	charAt(bpLocal) != '"'
1623	ch == ','
1624	ch == '}'
1625	ch == ','
1626	ch == ']'
1627	ch == '}'
1628	ch == EOI
1629	charArrayCompare(fieldName)
1630	ch == '{'
1631	ch == '['
1632	charAt(bp + 3) == '['
1632	charAt(bp + 2) == 't'
1632	charAt(bp + 1) == 'e'
1632	ch == 'S'
1633	charArrayCompare(fieldName)
1634	chLocal != '"'
1635	endIndex == -1
1636	stringVal.indexOf('\\') != -1
1637	charAt(i) == '\\'
1638	slashCount % 2 == 0
1639	chLocal == ','
1640	chLocal == '}'
1641	chLocal == ','
1642	chLocal == ']'
1643	chLocal == '}'
1644	chLocal == EOI
1645	chLocal == 'n'
1646	charAt(bp + offset + 2) == 'l'
1646	charAt(bp + offset) == 'u'
1646	charAt(bp + offset + 1) == 'l'
1647	chLocal == expectNextChar
1648	chLocal != '"'
1649	endIndex == -1
1650	stringVal.indexOf('\\') != -1
1651	charAt(i) == '\\'
1652	slashCount % 2 == 0
1653	chLocal == expectNextChar
1654	charArrayCompare(fieldName)
1655	chLocal != '"'
1656	chLocal == '\"'
1657	chLocal == '\\'
1658	chLocal == ','
1659	chLocal == '}'
1660	chLocal == ','
1661	chLocal == ']'
1662	chLocal == '}'
1663	chLocal == EOI
1664	name == null
1665	chLocal == 'n'
1666	charAt(bp + offset + 1) == 'l'
1666	charAt(bp + offset + 2) == 'l'
1666	charAt(bp + offset) == 'u'
1667	chLocal == serperator
1668	chLocal != '"'
1669	chLocal == '\"'
1670	chLocal == '\\'
1671	chLocal == serperator
1672	isWhitespace(chLocal)
1673	type.isAssignableFrom(HashSet.class)
1674	type.isAssignableFrom(ArrayList.class)
1675	charArrayCompare(fieldName)
1676	chLocal != '['
1677	chLocal == '"'
1678	endIndex == -1
1679	stringVal.indexOf('\\') != -1
1680	charAt(i) == '\\'
1681	slashCount % 2 == 0
1682	charAt(bp + offset + 2) == 'l'
1682	charAt(bp + offset) == 'u'
1682	charAt(bp + offset + 1) == 'l'
1682	chLocal == 'n'
1683	list.size() == 0
1683	chLocal == ']'
1684	chLocal == ','
1685	chLocal == ']'
1686	chLocal == ','
1687	chLocal == '}'
1688	chLocal == ','
1689	chLocal == ']'
1690	chLocal == '}'
1691	chLocal == EOI
1692	charAt(bp + offset + 2) == 'l'
1692	charAt(bp + offset) == 'u'
1692	charAt(bp + offset + 1) == 'l'
1692	chLocal == 'n'
1692	charAt(bp + offset + 3) == seperator
1693	chLocal != '['
1694	charAt(bp + offset + 1) == 'l'
1694	charAt(bp + offset + 2) == 'l'
1694	chLocal == 'n'
1694	charAt(bp + offset) == 'u'
1695	chLocal == ']'
1695	list.size() == 0
1696	chLocal != '"'
1697	endIndex == -1
1698	stringVal.indexOf('\\') != -1
1699	charAt(i) == '\\'
1700	slashCount % 2 == 0
1701	chLocal == ','
1702	chLocal == ']'
1703	chLocal == seperator
1704	charArrayCompare(fieldName)
1705	negative
1706	chLocal >= '0'
1706	chLocal <= '9'
1707	chLocal <= '9'
1707	chLocal >= '0'
1708	chLocal == '.'
1709	value < 0
1709	offset > 11 + 3 + fieldName.length
1710	negative
1710	value != Integer.MIN_VALUE
1710	offset != 17
1711	chLocal == ','
1712	chLocal == '}'
1713	chLocal == ','
1714	chLocal == ']'
1715	chLocal == '}'
1716	chLocal == EOI
1717	charArrayCompare(fieldName)
1718	chLocal != '['
1719	chLocal == ']'
1720	chLocal == '-'
1721	chLocal <= '9'
1721	chLocal >= '0'
1722	chLocal >= '0'
1722	chLocal <= '9'
1723	arrayIndex >= array.length
1724	chLocal == ','
1725	chLocal == ']'
1726	arrayIndex != array.length
1727	chLocal == ','
1728	chLocal == '}'
1729	chLocal == ','
1730	chLocal == ']'
1731	chLocal == '}'
1732	chLocal == EOI
1733	chLocal == 't'
1734	charAt(bp + offset + 1) == 'u'
1734	charAt(bp + offset) == 'r'
1734	charAt(bp + offset + 2) == 'e'
1735	chLocal == 'f'
1736	charAt(bp + offset + 2) == 's'
1736	charAt(bp + offset + 3) == 'e'
1736	charAt(bp + offset + 1) == 'l'
1736	charAt(bp + offset) == 'a'
1737	chLocal == '1'
1738	chLocal == '0'
1739	chLocal == expectNext
1740	isWhitespace(chLocal)
1741	negative
1742	chLocal >= '0'
1742	chLocal <= '9'
1743	chLocal >= '0'
1743	chLocal <= '9'
1744	chLocal == '.'
1745	value < 0
1746	chLocal == expectNext
1747	isWhitespace(chLocal)
1748	charArrayCompare(fieldName)
1749	chLocal == 't'
1750	charAt(bp + (offset++)) != 'r'
1751	charAt(bp + (offset++)) != 'u'
1752	charAt(bp + (offset++)) != 'e'
1753	chLocal == 'f'
1754	charAt(bp + (offset++)) != 'a'
1755	charAt(bp + (offset++)) != 'l'
1756	charAt(bp + (offset++)) != 's'
1757	charAt(bp + (offset++)) != 'e'
1758	chLocal == ','
1759	chLocal == '}'
1760	chLocal == ','
1761	chLocal == ']'
1762	chLocal == '}'
1763	chLocal == EOI
1764	charArrayCompare(fieldName)
1765	chLocal == '-'
1766	chLocal >= '0'
1766	chLocal <= '9'
1767	chLocal <= '9'
1767	chLocal >= '0'
1768	chLocal == '.'
1769	value < 0
1769	offset > 21
1770	chLocal == ','
1771	chLocal == '}'
1772	chLocal == ','
1773	chLocal == ']'
1774	chLocal == '}'
1775	chLocal == EOI
1776	negative
1777	chLocal >= '0'
1777	chLocal <= '9'
1778	chLocal >= '0'
1778	chLocal <= '9'
1779	chLocal == '.'
1780	value < 0
1781	chLocal == expectNextChar
1782	isWhitespace(chLocal)
1783	charArrayCompare(fieldName)
1784	chLocal <= '9'
1784	chLocal >= '0'
1785	chLocal <= '9'
1785	chLocal >= '0'
1786	chLocal == '.'
1787	chLocal <= '9'
1787	chLocal >= '0'
1788	chLocal <= '9'
1788	chLocal >= '0'
1789	chLocal == ','
1790	chLocal == '}'
1791	chLocal == ','
1792	chLocal == ']'
1793	chLocal == '}'
1794	chLocal == EOI
1795	chLocal <= '9'
1795	chLocal >= '0'
1796	chLocal <= '9'
1796	chLocal >= '0'
1797	chLocal == '.'
1798	chLocal <= '9'
1798	chLocal >= '0'
1799	chLocal <= '9'
1799	chLocal >= '0'
1800	chLocal == seperator
1801	chLocal >= '0'
1801	chLocal <= '9'
1802	chLocal <= '9'
1802	chLocal >= '0'
1803	chLocal == '.'
1804	chLocal >= '0'
1804	chLocal <= '9'
1805	chLocal >= '0'
1805	chLocal <= '9'
1806	chLocal == seperator
1807	charArrayCompare(fieldName)
1808	chLocal != '['
1809	negative
1810	chLocal <= '9'
1810	chLocal >= '0'
1811	chLocal <= '9'
1811	chLocal >= '0'
1812	small
1813	chLocal <= '9'
1813	chLocal >= '0'
1814	chLocal >= '0'
1814	chLocal <= '9'
1815	exp
1816	chLocal == '-'
1816	chLocal == '+'
1817	chLocal >= '0'
1817	chLocal <= '9'
1818	exp
1818	count < 10
1819	negative
1820	arrayIndex >= array.length
1821	chLocal == ','
1822	chLocal == ']'
1823	arrayIndex != array.length
1824	chLocal == ','
1825	chLocal == '}'
1826	chLocal == ','
1827	chLocal == ']'
1828	chLocal == '}'
1829	chLocal == EOI
1830	charArrayCompare(fieldName)
1831	chLocal != '['
1832	chLocal == '['
1833	negative
1834	chLocal >= '0'
1834	chLocal <= '9'
1835	chLocal >= '0'
1835	chLocal <= '9'
1836	chLocal == '.'
1837	chLocal <= '9'
1837	chLocal >= '0'
1838	chLocal <= '9'
1838	chLocal >= '0'
1839	exp
1840	chLocal == '-'
1840	chLocal == '+'
1841	chLocal <= '9'
1841	chLocal >= '0'
1842	count < 10
1842	exp
1843	negative
1844	arrayIndex >= array.length
1845	chLocal == ','
1846	chLocal == ']'
1847	arrayIndex != array.length
1848	arrayarrayIndex >= arrayarray.length
1849	chLocal == ','
1850	chLocal == ']'
1851	arrayarrayIndex != arrayarray.length
1852	chLocal == ','
1853	chLocal == '}'
1854	chLocal == ','
1855	chLocal == ']'
1856	chLocal == '}'
1857	chLocal == EOI
1858	charArrayCompare(fieldName)
1859	chLocal >= '0'
1859	chLocal <= '9'
1860	chLocal <= '9'
1860	chLocal >= '0'
1861	chLocal == '.'
1862	chLocal >= '0'
1862	chLocal <= '9'
1863	chLocal <= '9'
1863	chLocal >= '0'
1864	chLocal == 'E'
1864	chLocal == 'e'
1865	chLocal == '+'
1865	chLocal == '-'
1866	chLocal <= '9'
1866	chLocal >= '0'
1867	chLocal == ','
1868	chLocal == '}'
1869	chLocal == ','
1870	chLocal == ']'
1871	chLocal == '}'
1872	chLocal == EOI
1873	ch != 't'
1874	ch != 'r'
1875	ch != 'u'
1876	ch != 'e'
1877	ch == ' '
1877	ch == '\n'
1877	ch == '}'
1877	ch == '/'
1877	ch == '\r'
1877	ch == '\b'
1877	ch == ':'
1877	ch == ','
1877	ch == ']'
1877	ch == '\f'
1877	ch == '\t'
1877	ch == EOI
1878	ch != 'n'
1879	ch == 'u'
1880	ch != 'l'
1881	ch != 'l'
1882	ch == '\t'
1882	ch == '}'
1882	ch == '\b'
1882	ch == ' '
1882	ch == '\r'
1882	ch == ']'
1882	ch == ','
1882	ch == '\f'
1882	ch == '\n'
1882	ch == EOI
1883	ch != 'e'
1884	ch != 'w'
1885	ch == '\f'
1885	ch == ']'
1885	ch == EOI
1885	ch == ','
1885	ch == '\t'
1885	ch == '}'
1885	ch == '\n'
1885	ch == '\r'
1885	ch == ' '
1885	ch == '\b'
1886	ch != 'f'
1887	ch != 'a'
1888	ch != 'l'
1889	ch != 's'
1890	ch != 'e'
1891	ch == '\r'
1891	ch == ' '
1891	ch == '\n'
1891	ch == '\b'
1891	ch == ','
1891	ch == ':'
1891	ch == '\t'
1891	ch == '/'
1891	ch == '}'
1891	ch == EOI
1891	ch == '\f'
1891	ch == ']'
1892	Character.isLetterOrDigit(ch)
1893	"null".equalsIgnoreCase(ident)
1894	"new".equals(ident)
1895	"true".equals(ident)
1896	"false".equals(ident)
1897	"undefined".equals(ident)
1898	"Set".equals(ident)
1899	"TreeSet".equals(ident)
1900	ch != '\\'
1901	chLocal == EOI
1902	isWhitespace(chLocal)
1903	ch <= '/'
1904	ch == '\t'
1904	ch == '\f'
1904	ch == ' '
1904	ch == '\n'
1904	ch == '\r'
1904	ch == '\b'
1905	ch == '/'
1906	chLocal == '\''
1907	chLocal == EOI
1908	isEOF()
1909	chLocal == '\\'
1910	hasSpecial
1911	sp > sbuf.length
1912	hasSpecial
1913	sp == sbuf.length
1914	sp == sbuf.length
1915	ch == '-'
1916	ch >= '0'
1916	ch <= '9'
1917	ch == '.'
1918	ch >= '0'
1918	ch <= '9'
1919	ch == 'L'
1920	ch == 'S'
1921	ch == 'B'
1922	ch == 'F'
1923	ch == 'D'
1924	ch == 'E'
1924	ch == 'e'
1925	ch == '+'
1925	ch == '-'
1926	ch <= '9'
1926	ch >= '0'
1927	ch == 'F'
1927	ch == 'D'
1928	isDouble
1929	np == -1
1930	charAt(np) == '-'
1931	i < max
1932	chLocal == 'S'
1932	chLocal == 'L'
1932	chLocal == 'B'
1933	result < multmin
1934	result < limit + digit
1935	negative
1936	i > np + 1
1937	chLocal == 'F'
1938	chLocal == 'D'
1939	decimal
1424	object == null
3075	ordered
3076	value instanceof JSONObject
3077	value instanceof String
3078	value instanceof JSONArray
3079	value instanceof String
3080	value == null
3081	value == null
3082	value == null
3083	value == null
3084	value == null
3085	value == null
3086	value == null
3087	value == null
3088	value == null
3089	value == null
3090	parameterTypes.length == 1
3091	method.getName().equals("equals")
3092	returnType != void.class
3093	annotation != null
3094	annotation.name().length() != 0
3095	name == null
3096	name.startsWith("set")
3097	name.length() == 0
3098	parameterTypes.length == 0
3099	returnType == void.class
3100	annotation != null
3101	annotation.name().length() != 0
3102	name == null
3103	name.startsWith("get")
3104	name.length() == 0
3105	name.startsWith("is")
3106	name.length() == 0
3107	name.startsWith("hashCode")
3108	name.startsWith("toString")
2378	tok == JSONToken.DOT
2379	tok != JSONToken.LPAREN
2380	tok == JSONToken.COMMA
2381	tok == JSONToken.RPAREN
2382	tok == JSONToken.SEMI
3348	(features & BrowserSecureMask) != 0
3348	writer.isEnabled(BrowserSecureMask)
3349	i != 0
3213	path == null
3213	path.length() == 0
3214	segments != null
3215	"*".equals(path)
3216	rootObject == null
3217	rootObject == null
3218	currentObject == null
3219	currentObject == value
3220	currentObject == null
3221	currentObject instanceof Iterable
3222	eq(item, value)
3223	rootObject == null
3224	values == null
3224	values.length == 0
3225	rootObject == null
3226	i == segments.length - 1
3227	result == null
3228	result instanceof Collection
3229	resultClass.isArray()
3230	lastSegement instanceof PropertySegement
3231	lastSegement instanceof ArrayAccessSegement
3232	rootObject == null
3233	i == segments.length - 1
3234	currentObject == null
3235	parentObject == null
3236	lastSegement instanceof PropertySegement
3237	parentObject instanceof Collection
3238	segments.length > 1
3239	parentSegement instanceof RangeSegement
3239	parentSegement instanceof MultiIndexSegement
3240	removed
3241	lastSegement instanceof ArrayAccessSegement
3242	rootObject == null
3243	currentObject == null
3244	i < segments.length - 1
3245	nextSegement instanceof PropertySegement
3246	segment instanceof PropertySegement
3247	parentBeanDeserializer != null
3248	beanDeserializer != null
3249	beanDeserializer.beanInfo.defaultConstructor != null
3250	nextSegement instanceof ArrayAccessSegement
3251	newObj != null
3252	segment instanceof PropertySegement
3253	segment instanceof ArrayAccessSegement
3254	parentObject == null
3255	lastSegement instanceof PropertySegement
3256	lastSegement instanceof ArrayAccessSegement
3257	rootObject == null
3258	path == null
3259	jsonpath == null
3260	pathCache.size() < CACHE_SIZE
3261	javaObject == null
3262	paths.containsKey(javaObject)
3263	javaObject instanceof Map
3264	key instanceof String
3265	javaObject instanceof Collection
3266	clazz.isArray()
3267	ParserConfig.isPrimitive2(clazz)
3267	clazz.isEnum()
3268	serializer instanceof JavaBeanSerializer
3269	key instanceof String
3270	currentObject == null
3271	currentObject instanceof List
3272	index >= 0
3273	index < list.size()
3274	Math.abs(index) <= list.size()
3275	currentObject.getClass().isArray()
3276	index >= 0
3277	index < arrayLenth
3278	Math.abs(index) <= arrayLenth
3279	currentObject instanceof Map
3280	value == null
3281	currentObject instanceof List
3282	index >= 0
3283	clazz.isArray()
3284	index >= 0
3285	index < arrayLenth
3286	Math.abs(index) <= arrayLenth
3287	currentObject instanceof List
3288	index >= 0
3289	index >= list.size()
3290	newIndex < 0
3291	beanSerializer != null
3292	currentObject instanceof Map
3293	a == b
3294	b == null
3294	a == null
3295	a.getClass() == b.getClass()
3296	a instanceof Number
3297	b instanceof Number
3298	a instanceof BigDecimal
3299	isIntB
3300	isIntA
3301	isIntB
3302	b instanceof BigInteger
3303	isIntB
3304	a instanceof BigInteger
3305	isDoubleA
3305	isIntB
3305	isDoubleB
3305	isDoubleB
3305	isDoubleA
3305	isIntA
3306	currentObject == null
3307	currentObject instanceof Map
3308	val == null
3308	"size".equals(propertyName)
3309	beanSerializer != null
3310	currentObject instanceof List
3311	"size".equals(propertyName)
3312	itemValue instanceof Collection
3313	currentObject instanceof Enum
3314	"name".equals(propertyName)
3315	"ordinal".equals(propertyName)
3316	currentObject instanceof Calendar
3317	"year".equals(propertyName)
3318	"month".equals(propertyName)
3319	"day".equals(propertyName)
3320	"hour".equals(propertyName)
3321	"minute".equals(propertyName)
3322	"second".equals(propertyName)
3323	currentObject == null
3324	currentObject instanceof Map
3325	map.containsKey(propertyName)
3326	beanSerializer != null
3327	fieldDeser != null
3328	currentObject instanceof List
3329	parent instanceof Map
3330	parent instanceof List
3331	element == null
3332	derializer instanceof JavaBeanDeserializer
3333	beanDerializer != null
3334	fieldDeserializer == null
3335	parent instanceof Map
3336	derializer instanceof JavaBeanDeserializer
3337	beanDerializer != null
3338	fieldDeserializer == null
3339	serializer instanceof JavaBeanSerializer
3340	deserializer instanceof JavaBeanDeserializer
3341	currentObject == null
3342	currentObject instanceof Collection
3343	currentObject instanceof Object[]
3344	currentObject.getClass().isArray()
3345	currentObject instanceof Map
3346	value != null
3347	beanSerializer == null
3154	context == null
3155	context == null
3156	context == null
3157	newState != -1
3158	context == null
3159	context == null
3160	context == null
3161	context == null
3162	context.state == JSONStreamContext.StartObject
3162	lexer.token() == JSONToken.IDENTIFIER
3163	context == null
3164	context == null
3165	context == null
3166	context == null
3167	context == null
3168	newStat != -1
2333	buf != null
2334	buf == null
2335	ch == 65279
2336	index >= bufLength
2337	bufLength == -1
2338	index < sp
2339	bp == 0
2340	rest > 0
2341	bufLength == 0
2342	bufLength == -1
2343	ch == chLoal
2344	chLoal == EOI
2345	index >= bufLength
2346	bufLength == -1
2347	sp > 0
2348	ch == '"'
2348	offset > 0
2349	readLength == 0
2350	bufLength == 0
2351	bufLength == -1
2352	charAt(bp + i) != chars[i]
2353	hasSpecial
2354	offset < 0
2355	offset > buf.length - sp
2356	count < 0
2357	count < 0
2358	offset == 0
2359	offset == -1
2360	chLocal == 'D'
2360	chLocal == 'S'
2360	chLocal == 'F'
2360	chLocal == 'B'
2360	chLocal == 'L'
2361	offset == -1
2362	chLocal == 'D'
2362	chLocal == 'F'
2362	chLocal == 'L'
2362	chLocal == 'S'
2362	chLocal == 'B'
2363	buf.length <= 1024 * 64
2364	chLocal == EOI
2365	isWhitespace(chLocal)
1946	ch == 65279
1947	index >= len
1948	destLen + offset > src.length()
1949	dest[i] != src.charAt(offset + i)
1950	hasSpecial
1951	ASMUtils.IS_ANDROID
1952	count < sbuf.length
1953	count < sbuf.length
1953	ASMUtils.IS_ANDROID
1954	chLocal == 'L'
1954	chLocal == 'S'
1954	chLocal == 'D'
1954	chLocal == 'F'
1954	chLocal == 'B'
1955	chLocal == 'S'
1955	chLocal == 'L'
1955	chLocal == 'B'
1955	chLocal == 'D'
1955	chLocal == 'F'
1956	count < sbuf.length
1957	rest > 13
1957	strict
1958	c4 == 'e'
1958	c0 == '/'
1958	c5 == '('
1958	c_r1 == ')'
1958	c2 == 'a'
1958	c3 == 't'
1958	c_r0 == '/'
1958	c1 == 'D'
1959	c == '+'
1960	c < '0'
1960	c > '9'
1961	plusIndex == -1
1962	charAt(bp + 6) != '-'
1962	rest == 8
1962	rest == 14
1962	rest == 17
1963	strict
1964	checkDate(y0, y1, y2, y3, M0, M1, d0, d1)
1965	rest != 8
1966	checkTime(h0, h1, m0, m1, s0, s1)
1967	rest == 17
1968	S0 > '9'
1968	S0 < '0'
1969	S1 > '9'
1969	S1 < '0'
1970	S2 > '9'
1970	S2 < '0'
1971	rest < 9
1972	c4 == '/'
1972	c4 == '-'
1972	c7 == '-'
1972	c7 == '/'
1973	c4 == '-'
1973	c6 == '-'
1974	c8 == ' '
1975	c2 == '-'
1975	c2 == '.'
1975	c5 == '.'
1975	c5 == '-'
1976	c4 == '년'
1976	c4 == '年'
1977	c7 == '월'
1977	c7 == '月'
1978	c9 == '일'
1978	c9 == '日'
1979	charAt(bp + 10) == '일'
1979	charAt(bp + 10) == '日'
1980	c6 == '월'
1980	c6 == '月'
1981	c8 == '일'
1981	c8 == '日'
1982	c9 == '일'
1982	c9 == '日'
1983	checkDate(y0, y1, y2, y3, M0, M1, d0, d1)
1984	strict
1984	t == 'T'
1984	t == ' '
1985	rest < date_len + 9
1986	t == EOI
1986	t == '日'
1986	t == '"'
1986	t == '일'
1987	t == '-'
1987	t == '+'
1988	len == date_len + 6
1989	charAt(bp + date_len + 3) != ':'
1989	charAt(bp + date_len + 4) != '0'
1989	charAt(bp + date_len + 5) != '0'
1990	charAt(bp + date_len + 3) != ':'
1991	charAt(bp + date_len + 6) != ':'
1992	checkTime(h0, h1, m0, m1, s0, s1)
1993	dot == '.'
1994	rest < date_len + 11
1995	dot == 'Z'
1996	calendar.getTimeZone().getRawOffset() != 0
1997	timeZoneIDs.length > 0
1998	S0 > '9'
1998	S0 < '0'
1999	rest > date_len + 11
2000	S1 <= '9'
2000	S1 >= '0'
2001	millisLen == 2
2002	S2 <= '9'
2002	S2 >= '0'
2003	timeZoneFlag == '-'
2003	timeZoneFlag == '+'
2004	t0 < '0'
2004	t0 > '1'
2005	t1 > '9'
2005	t1 < '0'
2006	t2 == ':'
2007	t3 != '0'
2008	t4 != '0'
2009	t2 == '0'
2010	t3 != '0'
2011	timeZoneFlag == 'Z'
2012	calendar.getTimeZone().getRawOffset() != 0
2013	timeZoneIDs.length > 0
2014	end != EOI
2014	end != '"'
2015	timeZoneFlag == '-'
2016	calendar.getTimeZone().getRawOffset() != timeZoneOffset
2017	timeZoneIDs.length > 0
2018	h0 == '0'
2019	h1 > '9'
2019	h1 < '0'
2020	h0 == '1'
2021	h1 < '0'
2021	h1 > '9'
2022	h0 == '2'
2023	h1 < '0'
2023	h1 > '4'
2024	m0 <= '5'
2024	m0 >= '0'
2025	m1 < '0'
2025	m1 > '9'
2026	m0 == '6'
2027	m1 != '0'
2028	s0 >= '0'
2028	s0 <= '5'
2029	s1 < '0'
2029	s1 > '9'
2030	s0 == '6'
2031	s1 != '0'
2032	y0 != '2'
2032	y0 != '1'
2033	y1 > '9'
2033	y1 < '0'
2034	y2 > '9'
2034	y2 < '0'
2035	y3 < '0'
2035	y3 > '9'
2036	M0 == '0'
2037	M1 > '9'
2037	M1 < '1'
2038	M0 == '1'
2039	M1 != '0'
2039	M1 != '1'
2039	M1 != '2'
2040	d0 == '0'
2041	d1 > '9'
2041	d1 < '1'
2042	d0 == '1'
2042	d0 == '2'
2043	d1 < '0'
2043	d1 > '9'
2044	d0 == '3'
2045	d1 != '1'
2045	d1 != '0'
2046	charArrayCompare(text, bp, fieldName)
2047	ch == '-'
2048	ch <= '9'
2048	ch >= '0'
2049	ch >= '0'
2049	ch <= '9'
2050	ch == '.'
2051	value < 0
2052	ch == '}'
2052	ch == ','
2053	isWhitespace(ch)
2054	ch == ','
2055	ch == '}'
2056	ch == ','
2057	ch == ']'
2058	ch == '}'
2059	ch == EOI
2060	isWhitespace(ch)
2061	charArrayCompare(text, bp, fieldName)
2062	ch != '"'
2063	endIndex == -1
2064	stringVal.indexOf('\\') != -1
2065	charAt(i) == '\\'
2066	slashCount % 2 == 0
2067	ch == '}'
2067	ch == ','
2068	isWhitespace(ch)
2069	ch == ','
2070	ch == ','
2071	ch == ']'
2072	ch == '}'
2073	ch == EOI
2074	charArrayCompare(text, bp, fieldName)
2075	ch != '"'
2076	ch == '\"'
2077	index > len
2078	ch == ','
2079	ch == '}'
2080	ch == ','
2081	ch == ']'
2082	ch == '}'
2083	ch == EOI
2084	isWhitespace(ch)
2085	type.isAssignableFrom(HashSet.class)
2086	type.isAssignableFrom(ArrayList.class)
2087	charArrayCompare(text, bp, fieldName)
2088	ch == '['
2089	ch == '"'
2090	endIndex == -1
2091	stringVal.indexOf('\\') != -1
2092	charAt(i) == '\\'
2093	slashCount % 2 == 0
2094	ch == 'n'
2094	text.startsWith("ull", index)
2095	ch == ']'
2095	list.size() == 0
2096	ch == ','
2097	ch == ']'
2098	text.startsWith("ull", index)
2099	ch == ','
2100	ch == '}'
2101	ch == ','
2102	ch == ']'
2103	ch == '}'
2104	ch == EOI
2105	space
2106	charArrayCompare(text, bp, fieldName)
2107	ch == '-'
2108	ch >= '0'
2108	ch <= '9'
2109	ch <= '9'
2109	ch >= '0'
2110	ch == '.'
2111	ch == ','
2111	ch == '}'
2112	value < 0
2113	ch == ','
2114	ch == '}'
2115	ch == ','
2116	ch == ']'
2117	ch == '}'
2118	ch == EOI
2119	isWhitespace(ch)
2120	isWhitespace(ch)
2121	charArrayCompare(text, bp, fieldName)
2122	ch == 't'
2123	charAt(index++) != 'r'
2124	charAt(index++) != 'u'
2125	charAt(index++) != 'e'
2126	ch == 'f'
2127	charAt(index++) != 'a'
2128	charAt(index++) != 'l'
2129	charAt(index++) != 's'
2130	charAt(index++) != 'e'
2131	ch == ','
2132	ch == '}'
2133	ch == ','
2134	ch == ']'
2135	ch == '}'
2136	ch == EOI
2137	isWhitespace(ch)
2138	isWhitespace(ch)
2139	negative
2140	chLocal <= '9'
2140	chLocal >= '0'
2141	chLocal <= '9'
2141	chLocal >= '0'
2142	chLocal == '.'
2143	value < 0
2144	chLocal == expectNext
2145	isWhitespace(chLocal)
2146	negative
2147	chLocal >= '0'
2147	chLocal <= '9'
2148	chLocal >= '0'
2148	chLocal <= '9'
2149	chLocal == '.'
2150	value < 0
2151	chLocal == expectNextChar
2152	isWhitespace(chLocal)
794	dateFormat instanceof SimpleDateFormat
795	dateFormat == null
796	dateFormatPattern != null
797	dateFormatPattern != null
798	this.dateFormat != null
799	out.disableCircularReferenceDetect
800	references == null
801	context != null
802	references == null
803	refContext == null
804	object == current
805	parentContext != null
806	object == parentContext.object
807	rootContext.parent == null
808	object == rootContext.object
809	object == null
810	seperator != '\0'
811	object == null
812	object instanceof Date
813	dateFormat == null
3065	context != null
3066	context != null
3067	context == null
3068	newState != -1
3069	context == null
3070	context == null
3071	newState != -1
2393	key == null
2394	cmp < 0
2395	cmp > 0
2396	isSetFlag(mid, setFlags)
2397	setFlags == null
2398	flagIndex < setFlags.length
2399	(setFlags[flagIndex] & (1 << bitIndex)) != 0
2400	type instanceof Class
2401	clazz.isInterface()
2402	beanInfo.defaultConstructor == null
2402	beanInfo.factoryMethod == null
2403	beanInfo.factoryMethod != null
2403	beanInfo.defaultConstructorParameterSize > 0
2404	beanInfo.defaultConstructorParameterSize == 0
2405	constructor != null
2406	context.object == null
2406	context == null
2407	type instanceof Class
2408	parentName.equals(parentClassName)
2409	"java.util.HashMap".equals(parentName)
2409	"java.util.Collection".equals(parentName)
2409	parentContext.object != null
2409	"java.util.Map".equals(parentName)
2409	"java.util.ArrayList".equals(parentName)
2409	"java.util.List".equals(parentName)
2409	parentContext != null
2410	parentName.equals(parentClassName)
2411	param == null
2412	parser != null
2412	parser.lexer.isEnabled(Feature.InitStringFieldAsEmpty)
2413	fieldInfo.fieldClass == String.class
2414	lexer.token() != JSONToken.LBRACKET
2415	fieldClass == int.class
2416	fieldClass == String.class
2417	fieldClass == long.class
2418	fieldClass.isEnum()
2419	ch == 'n'
2419	ch == '\"'
2420	ch >= '0'
2420	ch <= '9'
2421	fieldClass == boolean.class
2422	fieldClass == float.class
2423	fieldClass == double.class
2424	lexer.getCurrent() == '1'
2424	fieldClass == java.util.Date.class
2425	lexer.token() != token
2426	type == JSONObject.class
2426	type == JSON.class
2427	token == JSONToken.NULL
2428	context != null
2428	object != null
2429	token == JSONToken.RBRACE
2430	object == null
2431	token == JSONToken.LBRACKET
2432	isSupportArrayToBean
2433	token != JSONToken.LBRACE
2433	token != JSONToken.COMMA
2434	lexer.isBlankInput()
2435	token == JSONToken.LITERAL_STRING
2436	strVal.length() == 0
2437	token == JSONToken.LBRACKET
2437	lexer.getCurrent() == ']'
2438	fieldName instanceof String
2439	parser.resolveStatus == DefaultJSONParser.TypeNameRedirect
2440	fieldIndex < sortedFieldDeserializers.length
2441	fieldDeser != null
2442	fieldClass == Integer.class
2442	fieldClass == int.class
2443	lexer.matchStat > 0
2444	lexer.matchStat == JSONLexer.NOT_MATCH_NAME
2445	fieldClass == long.class
2445	fieldClass == Long.class
2446	lexer.matchStat > 0
2447	lexer.matchStat == JSONLexer.NOT_MATCH_NAME
2448	fieldClass == String.class
2449	lexer.matchStat > 0
2450	lexer.matchStat == JSONLexer.NOT_MATCH_NAME
2451	fieldClass == boolean.class
2451	fieldClass == Boolean.class
2452	lexer.matchStat > 0
2453	lexer.matchStat == JSONLexer.NOT_MATCH_NAME
2454	fieldClass == Float.class
2454	fieldClass == float.class
2455	lexer.matchStat > 0
2456	lexer.matchStat == JSONLexer.NOT_MATCH_NAME
2457	fieldClass == double.class
2457	fieldClass == Double.class
2458	lexer.matchStat > 0
2459	lexer.matchStat == JSONLexer.NOT_MATCH_NAME
2460	parser.getConfig().getDeserializer(fieldClass) instanceof EnumDeserializer
2460	feildAnnotation == null
2460	feildAnnotation.deserializeUsing() == Void.class
2460	fieldClass.isEnum()
2461	fieldDeser instanceof DefaultFieldDeserializer
2462	lexer.matchStat > 0
2463	lexer.matchStat == JSONLexer.NOT_MATCH_NAME
2464	fieldClass == int[].class
2465	lexer.matchStat > 0
2466	lexer.matchStat == JSONLexer.NOT_MATCH_NAME
2467	fieldClass == float[].class
2468	lexer.matchStat > 0
2469	lexer.matchStat == JSONLexer.NOT_MATCH_NAME
2470	fieldClass == float[][].class
2471	lexer.matchStat > 0
2472	lexer.matchStat == JSONLexer.NOT_MATCH_NAME
2473	lexer.matchField(name_chars)
2474	matchField
2475	key == null
2476	token == JSONToken.RBRACE
2477	token == JSONToken.COMMA
2478	lexer.isEnabled(Feature.AllowArbitraryCommas)
2479	"$ref" == key
2480	token == JSONToken.LITERAL_STRING
2481	"@".equals(ref)
2482	"..".equals(ref)
2483	parentContext.object != null
2484	"$".equals(ref)
2485	rootContext.object != null
2486	lexer.token() != JSONToken.RBRACE
2487	JSON.DEFAULT_TYPE_KEY == key
2488	lexer.token() == JSONToken.LITERAL_STRING
2489	typeName.equals(beanInfo.typeName)
2489	parser.isEnabled(Feature.IgnoreAutoType)
2490	lexer.token() == JSONToken.RBRACE
2491	deserializer == null
2492	object == null
2492	fieldValues == null
2493	object == null
2494	setFlags == null
2495	matchField
2496	valueParsed
2497	object == null
2498	fieldValue == null
2499	fieldClass != int.class
2499	fieldClass != long.class
2499	fieldClass != double.class
2499	fieldClass != float.class
2499	fieldClass != boolean.class
2500	setFlags != null
2501	lexer.matchStat == JSONLexer.END
2502	match
2503	lexer.token() == JSONToken.RBRACE
2504	lexer.token() == JSONToken.COLON
2505	lexer.token() == JSONToken.COMMA
2506	lexer.token() == JSONToken.RBRACE
2507	lexer.token() == JSONToken.ERROR
2507	lexer.token() == JSONToken.IDENTIFIER
2508	object == null
2509	fieldValues == null
2510	childContext == null
2511	param == null
2512	fieldType == byte.class
2513	fieldType == short.class
2514	fieldType == int.class
2515	fieldType == long.class
2516	fieldType == float.class
2517	fieldType == double.class
2518	fieldType == boolean.class
2519	beanInfo.creatorConstructor != null
2520	beanInfo.factoryMethod != null
2521	buildMethod == null
2522	childContext != null
2523	fieldValueDeserilizer instanceof EnumDeserializer
2524	enumDeserializer == null
2525	lexer.matchStat > 0
2526	lexer.isEnabled(disableFieldSmartMatchMask)
2526	(this.beanInfo.parserFeatures & disableFieldSmartMatchMask) != 0
2527	fieldDeserializer == null
2527	lexer.isEnabled(mask)
2527	(this.beanInfo.parserFeatures & mask) != 0
2528	this.extraFieldDeserializers == null
2529	this.getFieldDeserializer(fieldName) != null
2530	(fieldModifiers & Modifier.FINAL) != 0
2530	(fieldModifiers & Modifier.STATIC) != 0
2531	deserOrField != null
2532	deserOrField instanceof FieldDeserializer
2533	fieldDeserializer == null
2534	lexer.isEnabled(Feature.IgnoreNotMatch)
2535	fieldDeser instanceof DefaultFieldDeserializer
2535	fieldInfo.unwrapped
2536	fieldInfo.field != null
2537	fieldValueDeser instanceof JavaBeanDeserializer
2538	unwrappedFieldDeser != null
2539	fieldObject == null
2540	fieldValueDeser instanceof MapDeserializer
2541	fieldObject == null
2542	fieldInfo.method.getParameterTypes().length == 2
2543	sortedFieldDeserializers[i] == fieldDeserializer
2544	fieldIndex != -1
2544	setFlags != null
2544	key.startsWith("_")
2545	isSetFlag(fieldIndex, setFlags)
2546	key == null
2547	fieldDeserializer == null
2548	isSetFlag(i, setFlags)
2549	(fieldInfo.parserFeatures & Feature.DisableFieldSmartMatch.mask) != 0
2550	fieldName.equalsIgnoreCase(key)
2551	startsWithIs
2551	fieldName.equalsIgnoreCase(key.substring(2))
2551	fieldClass == boolean.class
2551	fieldClass == Boolean.class
2552	fieldDeserializer == null
2553	ch == '_'
2554	ch == '-'
2555	snakeOrkebab
2556	fieldDeserializer == null
2557	isSetFlag(i, setFlags)
2558	fieldDeser.fieldInfo.name.equalsIgnoreCase(key2)
2559	fieldDeserializer == null
2560	isSetFlag(i, setFlags)
2561	fieldDeser.fieldInfo.alternateName(key)
2562	beanInfo.creatorConstructor == null
2562	beanInfo.factoryMethod == null
2563	fieldDeser == null
2564	beanInfo.buildMethod != null
2565	beanInfo.creatorConstructor != null
2566	beanInfo.factoryMethod != null
2567	beanInfo.jsonType == null
2568	seeAlsoDeser instanceof JavaBeanDeserializer
2569	subBeanInfo.typeName.equals(typeName)
2570	subSeeAlso != null
2571	token == JSONToken.NULL
2572	token != JSONToken.LBRACKET
2573	ch == '['
2574	lexer.token() == JSONToken.RBRACKET
2575	lexer.token() == JSONToken.COMMA
2576	ch == '['
2577	token != JSONToken.RBRACKET
2578	ch == ','
15	jsonType != null
16	typeName.length() != 0
17	Arrays.equals(fields, sortedFields)
18	defaultConstructor != null
19	factoryMethod != null
20	item.name.equals(propertyName)
21	item.getAnnotation() != null
21	field.getName().equals(propertyName)
21	field != null
22	item.name.equals(field.name)
23	item.getOnly
23	field.getOnly
24	item.fieldClass.isAssignableFrom(field.fieldClass)
25	result < 0
26	fieldBased
27	isInterfaceOrAbstract
27	defaultConstructor == null
28	creatorConstructor != null
28	isInterfaceOrAbstract
29	types.length > 0
30	paramAnnotation instanceof JSONField
31	fieldAnnotation == null
32	factoryMethod != null
33	types.length > 0
34	paramAnnotation instanceof JSONField
35	fieldAnnotation == null
36	isInterfaceOrAbstract
37	defaultConstructor != null
38	builderClass != null
39	builderAnno != null
40	withPrefix == null
40	withPrefix.length() == 0
41	Modifier.isStatic(method.getModifiers())
42	method.getReturnType().equals(builderClass)
43	annotation == null
44	annotation != null
45	annotation.deserialize()
46	annotation.name().length() != 0
47	methodName.startsWith(withPrefix)
48	methodName.length() <= withPrefix.length()
49	Character.isUpperCase(c0)
50	builderClass != null
51	builderAnnotation != null
52	buildMethodName == null
52	buildMethodName.length() == 0
53	buildMethod == null
54	buildMethod == null
55	Modifier.isStatic(method.getModifiers())
56	returnType.equals(method.getDeclaringClass())
56	returnType.equals(Void.TYPE)
57	method.getDeclaringClass() == Object.class
58	types.length == 0
58	types.length > 2
59	types[1] == Object.class
59	types[0] == String.class
59	types.length == 2
59	annotation != null
60	types.length != 1
61	annotation == null
62	methodName.length() < 4
62	annotation == null
63	annotation != null
64	annotation.deserialize()
65	annotation.name().length() != 0
66	annotation == null
66	methodName.startsWith("set")
67	c3 > 512
67	Character.isUpperCase(c3)
68	TypeUtils.compatibleWithJavaBean
69	c3 == '_'
70	c3 == 'f'
71	methodName.length() >= 5
71	Character.isUpperCase(methodName.charAt(4))
72	field == null
72	types[0] == boolean.class
73	field != null
74	fieldAnnotation != null
75	fieldAnnotation.deserialize()
76	fieldAnnotation.name().length() != 0
77	propertyNamingStrategy != null
78	methodName.length() < 4
79	Modifier.isStatic(method.getModifiers())
80	Character.isUpperCase(methodName.charAt(3))
80	methodName.startsWith("get")
81	method.getParameterTypes().length != 0
82	AtomicBoolean.class == method.getReturnType()
82	Map.class.isAssignableFrom(method.getReturnType())
82	AtomicInteger.class == method.getReturnType()
82	Collection.class.isAssignableFrom(method.getReturnType())
82	AtomicLong.class == method.getReturnType()
83	annotation != null
83	annotation.deserialize()
84	annotation.name().length() > 0
84	annotation != null
85	fieldInfo != null
86	propertyNamingStrategy != null
87	(modifiers & Modifier.STATIC) != 0
88	(modifiers & Modifier.FINAL) != 0
89	supportReadOnly
90	item.name.equals(field.getName())
91	contains
92	fieldAnnotation != null
93	fieldAnnotation.deserialize()
94	fieldAnnotation.name().length() != 0
95	propertyNamingStrategy != null
96	Modifier.isAbstract(clazz.getModifiers())
97	constructor.getParameterTypes().length == 0
98	defaultConstructor == null
99	Modifier.isStatic(clazz.getModifiers())
99	clazz.isMemberClass()
100	(types = constructor.getParameterTypes()).length == 1
100	types[0].equals(clazz.getDeclaringClass())
101	annotation != null
102	creatorConstructor != null
103	Modifier.isStatic(method.getModifiers())
104	clazz.isAssignableFrom(method.getReturnType())
105	annotation != null
106	factoryMethod != null
107	type == null
108	builderClass == Void.class
939	beanInfo.fields == beanInfo.sortedFields
940	object == null
941	writeReference(serializer, object, features)
942	out.sortField
943	unwrapped
944	out.isEnabled(SerializerFeature.PrettyFormat)
944	getters.length > 0
945	(this.beanInfo.features & SerializerFeature.WriteClassName.mask) != 0
945	serializer.isWriteClassName(fieldType, object)
946	objClass != fieldType
947	skipTransient
948	field != null
949	fieldInfo.fieldTransient
950	ignoreNonFieldGetter
951	field == null
952	this.applyLabel(serializer, fieldInfo.label)
952	this.applyName(serializer, object, fieldInfo.name)
953	out.isEnabled(SerializerFeature.IgnoreErrorGetter)
954	this.apply(serializer, object, fieldInfoName, propertyValue)
955	propertyValue == null
955	writeAsArray
956	out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES)
956	fieldSerializer.writeNull
957	propertyValue != null
957	(fieldInfo.serialzeFeatures & SerializerFeature.NotWriteDefaultValue.mask) != 0
957	(beanInfo.features & SerializerFeature.NotWriteDefaultValue.mask) != 0
957	out.notWriteDefaultValue
958	((Byte) propertyValue).byteValue() == 0
958	fieldCLass == byte.class
958	propertyValue instanceof Byte
959	fieldCLass == short.class
959	propertyValue instanceof Short
959	((Short) propertyValue).shortValue() == 0
960	propertyValue instanceof Integer
960	((Integer) propertyValue).intValue() == 0
960	fieldCLass == int.class
961	propertyValue instanceof Long
961	((Long) propertyValue).longValue() == 0L
961	fieldCLass == long.class
962	fieldCLass == float.class
962	propertyValue instanceof Float
962	((Float) propertyValue).floatValue() == 0F
963	propertyValue instanceof Double
963	fieldCLass == double.class
963	((Double) propertyValue).doubleValue() == 0D
964	propertyValue instanceof Boolean
964	((Boolean) propertyValue).booleanValue()
964	fieldCLass == boolean.class
965	commaFlag
966	out.isEnabled(SerializerFeature.PrettyFormat)
967	key != fieldInfoName
968	writeAsArray
969	originalValue != propertyValue
970	writeAsArray
971	writeAsArray
972	fieldInfo.unwrapped
973	directWritePrefix
974	writeAsArray
975	fieldClass == String.class
975	fieldAnnotation == null
975	fieldAnnotation.serializeUsing() == Void.class
976	propertyValue == null
977	(out.features & SerializerFeature.WriteNullStringAsEmpty.mask) != 0
977	(fieldSerializer.features & SerializerFeature.WriteNullStringAsEmpty.mask) != 0
978	out.useSingleQuotes
979	out.isEnabled(SerializerFeature.PrettyFormat)
979	getters.length > 0
980	unwrapped
981	object != null
982	fieldName != null
983	e.getMessage() != null
984	typeName == null
985	TypeUtils.isProxy(clazz)
986	(context.features & mask) != 0
986	context == null
986	(fieldFeatures & mask) != 0
987	serializer.references != null
987	serializer.references.containsKey(object)
988	fieldDeser == null
989	key == null
990	cmp < 0
991	cmp > 0
992	value != null
993	jsonBeanDeser.beforeFilters != null
994	this.beforeFilters != null
995	jsonBeanDeser.afterFilters != null
996	this.afterFilters != null
997	jsonBeanDeser.labelFilters != null
998	propertyFilter.apply(label)
999	this.labelFilters != null
1000	propertyFilter.apply(label)
2896	type instanceof GenericArrayType
2897	componentType instanceof TypeVariable
2898	componentType instanceof Class
2899	type != Object.class
2899	type != Serializable.class
2899	type instanceof Class
2579	lexer.token() == JSONToken.NULL
2580	lexer.token() == JSONToken.LITERAL_STRING
2581	format != null
2582	defaultPatttern.equals(format)
2583	"".equals(text)
2584	type == LocalDateTime.class
2585	text.length() == 8
2585	text.length() == 10
2586	type == LocalDate.class
2587	text.length() == 23
2588	type == LocalTime.class
2589	text.length() == 23
2590	type == ZonedDateTime.class
2591	formatter == defaultFormatter
2592	type == OffsetDateTime.class
2593	type == OffsetTime.class
2594	type == ZoneId.class
2595	type == Period.class
2596	type == Duration.class
2597	type == Instant.class
2598	formatter == null
2599	text.length() == 19
2600	c13 == ':'
2600	c16 == ':'
2601	c4 == '-'
2601	c7 == '-'
2602	c10 == 'T'
2603	c10 == ' '
2604	c7 == '-'
2604	c4 == '-'
2605	c7 == '/'
2605	c4 == '/'
2606	c2 == '/'
2606	c5 == '/'
2607	v0 > 12
2608	v1 > 12
2609	country.equals("US")
2610	country.equals("AU")
2610	country.equals("BR")
2611	c2 == '.'
2611	c5 == '.'
2612	c2 == '-'
2612	c5 == '-'
2613	text.length() >= 17
2614	c4 == '年'
2615	text.charAt(text.length() - 1) == '秒'
2616	c4 == '년'
2617	formatter == null
2618	text.length() == 8
2619	text.length() == 10
2620	c7 == '/'
2620	c4 == '/'
2621	c2 == '/'
2621	c5 == '/'
2622	v0 > 12
2623	v1 > 12
2624	country.equals("US")
2625	country.equals("BR")
2625	country.equals("AU")
2626	c5 == '.'
2626	c2 == '.'
2627	c2 == '-'
2627	c5 == '-'
2628	text.length() >= 9
2629	c4 == '年'
2630	c4 == '년'
2631	formatter == null
2632	text.length() == 19
2633	c16 == ':'
2633	c13 == ':'
2634	c7 == '-'
2634	c4 == '-'
2635	c10 == 'T'
2636	c10 == ' '
2637	c4 == '-'
2637	c7 == '-'
2638	c4 == '/'
2638	c7 == '/'
2639	c2 == '/'
2639	c5 == '/'
2640	v0 > 12
2641	v1 > 12
2642	country.equals("US")
2643	country.equals("BR")
2643	country.equals("AU")
2644	c2 == '.'
2644	c5 == '.'
2645	c2 == '-'
2645	c5 == '-'
2646	text.length() >= 17
2647	c4 == '年'
2648	text.charAt(text.length() - 1) == '秒'
2649	c4 == '년'
2650	object == null
2651	fieldType == null
2652	fieldType == LocalDateTime.class
2653	(features & mask) != 0
2653	serializer.isEnabled(SerializerFeature.UseISO8601DateFormat)
2653	format == null
2654	format != null
2654	dateTime.getNano() == 0
2655	format == null
2656	format == formatter_iso8601_pattern
3151	(status & 2 /* RESOLVED */ ) == 0
3152	srcAndRefPositions == null
3153	referenceCount >= srcAndRefPositions.length
1425	writeClassName
1426	object == null
1427	list.size() == 0
1428	out.isEnabled(SerializerFeature.PrettyFormat)
1429	i != 0
1430	item != null
1431	serializer.containsReference(item)
1432	i != 0
1433	item == null
1434	clazz == Integer.class
1435	clazz == Long.class
1436	writeClassName
1437	out.disableCircularReferenceDetect
1438	serializer.containsReference(item)
886	object == null
887	fieldType != long.class
887	value <= Integer.MAX_VALUE
887	value >= Integer.MIN_VALUE
887	fieldType != Long.class
887	out.isEnabled(SerializerFeature.WriteClassName)
888	token == JSONToken.LITERAL_INT
889	token == JSONToken.LBRACE
890	longObject == null
2814	type == JSONObject.class
2814	parser.getFieldTypeResolver() == null
2815	lexer.token() == JSONToken.NULL
2816	type instanceof ParameterizedType
2817	String.class == keyType
2818	lexer.token() != JSONToken.LBRACE
2819	lexer.isEnabled(Feature.AllowArbitraryCommas)
2820	ch == '"'
2821	ch != ':'
2822	ch == '}'
2823	ch == '\''
2824	lexer.isEnabled(Feature.AllowSingleQuotes)
2825	ch != ':'
2826	lexer.isEnabled(Feature.AllowUnQuotedFieldNames)
2827	ch != ':'
2828	lexer.isEnabled(Feature.DisableSpecialKeyDetect)
2828	key == JSON.DEFAULT_TYPE_KEY
2829	Map.class.isAssignableFrom(clazz)
2830	lexer.token() == JSONToken.RBRACE
2831	context != null
2831	fieldName instanceof Integer
2832	i != 0
2833	lexer.token() == JSONToken.NULL
2834	tok == JSONToken.RBRACKET
2834	tok == JSONToken.EOF
2835	tok == JSONToken.RBRACE
2836	lexer.token() != JSONToken.COMMA
2836	lexer.token() != JSONToken.LBRACE
2837	lexer.token() == JSONToken.RBRACE
2838	lexer.isRef()
2838	lexer.isEnabled(Feature.DisableSpecialKeyDetect)
2838	lexer.token() == JSONToken.LITERAL_STRING
2839	lexer.token() == JSONToken.LITERAL_STRING
2840	"..".equals(ref)
2841	"$".equals(ref)
2842	lexer.token() != JSONToken.RBRACE
2843	lexer.isEnabled(Feature.DisableSpecialKeyDetect)
2843	JSON.DEFAULT_TYPE_KEY.equals(lexer.stringVal())
2843	lexer.token() == JSONToken.LITERAL_STRING
2843	map.size() == 0
2844	lexer.token() == JSONToken.RBRACE
2845	lexer.token() != JSONToken.COLON
2846	lexer.token() == JSONToken.COMMA
2847	type == Properties.class
2848	type == Hashtable.class
2849	type == IdentityHashMap.class
2850	type == SortedMap.class
2850	type == TreeMap.class
2851	type == ConcurrentHashMap.class
2851	type == ConcurrentMap.class
2852	type == HashMap.class
2852	type == Map.class
2853	type == LinkedHashMap.class
2854	type instanceof ParameterizedType
2855	EnumMap.class.equals(rawType)
2856	clazz.isInterface()
615	object == null
616	(features & mapSortFieldMask) != 0
616	(out.features & mapSortFieldMask) != 0
617	map instanceof LinkedHashMap
617	map instanceof SortedMap
618	serializer.containsReference(object)
619	unwrapped
620	out.isEnabled(SerializerFeature.WriteClassName)
621	containsKey
622	preFilters.size() > 0
622	preFilters != null
623	entryKey instanceof String
623	entryKey == null
624	this.applyName(serializer, object, (String) entryKey)
625	entryKey.getClass().isPrimitive()
625	entryKey instanceof Number
626	this.applyName(serializer, object, strKey)
627	preFilters.size() > 0
627	preFilters != null
628	entryKey == null
628	entryKey instanceof String
629	this.applyName(serializer, object, (String) entryKey)
630	entryKey instanceof Number
630	entryKey.getClass().isPrimitive()
631	this.applyName(serializer, object, strKey)
632	propertyFilters != null
632	propertyFilters.size() > 0
633	entryKey == null
633	entryKey instanceof String
634	this.apply(serializer, object, (String) entryKey, value)
635	entryKey.getClass().isPrimitive()
635	entryKey instanceof Number
636	this.apply(serializer, object, strKey, value)
637	propertyFilters != null
637	propertyFilters.size() > 0
638	entryKey == null
638	entryKey instanceof String
639	this.apply(serializer, object, (String) entryKey, value)
640	entryKey.getClass().isPrimitive()
640	entryKey instanceof Number
641	this.apply(serializer, object, strKey, value)
642	nameFilters.size() > 0
642	nameFilters != null
643	entryKey instanceof String
643	entryKey == null
644	entryKey instanceof Number
644	entryKey.getClass().isPrimitive()
645	nameFilters.size() > 0
645	nameFilters != null
646	entryKey instanceof String
646	entryKey == null
647	entryKey instanceof Number
647	entryKey.getClass().isPrimitive()
648	valueFilters != null
648	valueFilters.size() > 0
648	contextValueFilters.size() > 0
648	contextValueFilters != null
649	entryKey == null
649	entryKey instanceof String
650	entryKey instanceof Number
650	entryKey.getClass().isPrimitive()
651	valueFilters != null
651	contextValueFilters != null
651	valueFilters.size() > 0
651	contextValueFilters.size() > 0
652	entryKey == null
652	entryKey instanceof String
653	entryKey.getClass().isPrimitive()
653	entryKey instanceof Number
654	value == null
655	out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES)
656	entryKey instanceof String
657	first
658	out.isEnabled(SerializerFeature.PrettyFormat)
659	first
660	out.isEnabled(SerializerFeature.BrowserSecure)
660	out.isEnabled(SerializerFeature.WriteNonStringKeyAsString)
660	out.isEnabled(SerializerFeature.BrowserCompatible)
661	value == null
662	clazz == preClazz
663	out.isEnabled(SerializerFeature.PrettyFormat)
663	map.size() > 0
664	unwrapped
3135	cw.firstMethod == null
3136	exceptions != null
3136	exceptions.length > 0
3137	var < 4
3137	opcode != Opcodes.RET
3138	opcode < Opcodes.ISTORE
3139	var >= 256
3140	itf
3141	argSize == 0
3142	label.position - code.length < Short.MIN_VALUE
3142	(label.status & 2 /* Label.RESOLVED */ ) != 0
3143	i.type == 5
3143	i.type == 6
3144	index >= 256
3145	code.length > 0
3146	exceptionCount > 0
3147	code.length > 0
3148	exceptionCount > 0
3149	code.length > 0
3150	exceptionCount > 0
737	object == null
738	objClass == SimpleDateFormat.class
739	out.isEnabled(SerializerFeature.WriteClassName)
740	object.getClass() != fieldType
741	objClass == Class.class
742	objClass == InetSocketAddress.class
743	inetAddress != null
744	object instanceof File
745	object instanceof InetAddress
746	object instanceof TimeZone
747	object instanceof Currency
748	object instanceof JSONStreamAware
749	object instanceof Iterator
750	object instanceof Iterable
751	object instanceof Map.Entry
752	objKey instanceof String
753	objVal instanceof String
754	object.getClass().getName().equals("net.sf.json.JSONNull")
755	i != 0
756	clazz == InetSocketAddress.class
757	lexer.token() == JSONToken.NULL
758	key.equals("address")
759	key.equals("port")
760	lexer.token() != JSONToken.LITERAL_INT
761	lexer.token() == JSONToken.COMMA
762	parser.resolveStatus == DefaultJSONParser.TypeNameRedirect
763	lexer.token() == JSONToken.LITERAL_STRING
764	"val".equals(lexer.stringVal())
765	objVal == null
766	objVal instanceof String
767	objVal instanceof JSONObject
768	clazz == Currency.class
769	currency != null
770	symbol != null
771	clazz == Map.Entry.class
772	strVal == null
772	strVal.length() == 0
773	clazz == UUID.class
774	clazz == URI.class
775	clazz == URL.class
776	clazz == Pattern.class
777	clazz == Locale.class
778	clazz == SimpleDateFormat.class
779	clazz == Inet4Address.class
779	clazz == Inet6Address.class
779	clazz == InetAddress.class
780	clazz == File.class
781	clazz == TimeZone.class
782	clazz instanceof ParameterizedType
783	clazz == Class.class
784	clazz == Charset.class
785	clazz == Currency.class
786	clazz == JSONPath.class
787	clazz instanceof Class
788	className.equals("java.nio.file.Path")
789	method_paths_get_error
789	method_paths_get == null
790	method_paths_get != null
2880	lexer.token() == JSONToken.LITERAL_INT
2881	clazz == double.class
2881	clazz == Double.class
2882	clazz == Short.class
2882	clazz == short.class
2883	val > Short.MAX_VALUE
2883	val < Short.MIN_VALUE
2884	clazz == Byte.class
2884	clazz == byte.class
2885	val > Byte.MAX_VALUE
2885	val < Byte.MIN_VALUE
2886	val <= Integer.MAX_VALUE
2886	val >= Integer.MIN_VALUE
2887	lexer.token() == JSONToken.LITERAL_FLOAT
2888	clazz == double.class
2888	clazz == Double.class
2889	clazz == short.class
2889	clazz == Short.class
2890	val.compareTo(BigDecimal.valueOf(Short.MIN_VALUE)) < 0
2890	val.compareTo(BigDecimal.valueOf(Short.MAX_VALUE)) > 0
2891	clazz == Byte.class
2891	clazz == byte.class
2892	value == null
2893	clazz == double.class
2893	clazz == Double.class
2894	clazz == Short.class
2894	clazz == short.class
2895	clazz == byte.class
2895	clazz == Byte.class
851	object == null
852	end == -1
853	out.isEnabled(SerializerFeature.PrettyFormat)
854	i != 0
855	item == null
856	serializer.containsReference(item)
857	clazz == preClazz
858	item == null
859	serializer.containsReference(item)
860	lexer.token() == JSONToken.NULL
861	lexer.token() == JSONToken.LITERAL_STRING
862	type instanceof GenericArrayType
863	componentType instanceof TypeVariable
864	objType instanceof ParameterizedType
865	objRawType instanceof Class
866	objTypeParams[i].getName().equals(typeVar.getName())
867	actualType instanceof Class
868	array == null
869	value == array
870	componentType.isArray()
871	componentType.isInstance(value)
872	value instanceof JSONArray
873	valueItem == array
874	contains
875	element == null
2684	type == OptionalInt.class
2685	value == null
2686	type == OptionalLong.class
2687	value == null
2688	type == OptionalDouble.class
2689	value == null
2690	value == null
2691	object == null
2692	object instanceof Optional
2693	object instanceof OptionalDouble
2694	optional.isPresent()
2695	object instanceof OptionalInt
2696	optional.isPresent()
2697	object instanceof OptionalLong
2698	optional.isPresent()
156	this == o
157	o == null
157	getClass() != o.getClass()
158	Arrays.equals(actualTypeArguments, that.actualTypeArguments)
159	ownerType.equals(that.ownerType)
159	ownerType != null ? !ownerType.equals(that.ownerType) : that.ownerType != null
2970	path == null
2971	parent == null
2972	fieldName instanceof Integer
2973	ASMUtils.IS_ANDROID
2973	asmFactory == null
2974	parentClassLoader == null
2975	asmFactory == null
2976	property.length() > 0
2976	property != null
2977	"true".equals(property)
2978	"false".equals(property)
2979	items == null
2980	items == null
2981	derializer != null
2982	type instanceof Class<?>
2983	type instanceof ParameterizedType
2984	rawType instanceof Class<?>
2985	derializer != null
2986	type == null
2987	derializer != null
2988	annotation != null
2989	mappingTo != Void.class
2990	type instanceof WildcardType
2990	type instanceof TypeVariable
2990	type instanceof ParameterizedType
2991	derializer != null
2992	AwtCodec.support(clazz)
2992	className.startsWith("java.awt.")
2993	awtError
2994	jdk8Error
2995	className.startsWith("java.time.")
2996	className.startsWith("java.util.Optional")
2997	className.equals("java.nio.file.Path")
2998	clazz == Map.Entry.class
2999	derializer == null
3000	derializer != null
3001	clazz.isEnum()
3002	clazz.isArray()
3003	clazz == HashSet.class
3003	clazz == Collection.class
3003	clazz == List.class
3003	clazz == Set.class
3003	clazz == ArrayList.class
3004	Collection.class.isAssignableFrom(clazz)
3005	Map.class.isAssignableFrom(clazz)
3006	Throwable.class.isAssignableFrom(clazz)
3007	classes == null
3008	type == null
3009	asmEnable
3010	jsonType != null
3011	deserializerClass != Void.class
3012	deseralizer instanceof ObjectDeserializer
3013	asmEnable
3014	superClass == null
3015	Modifier.isPublic(superClass.getModifiers())
3016	superClass == null
3016	superClass == Object.class
3017	clazz.getTypeParameters().length != 0
3018	asmEnable
3018	asmFactory != null
3018	asmFactory.classLoader.isExternalClass(clazz)
3019	asmEnable
3020	asmEnable
3021	clazz.isInterface()
3022	asmEnable
3022	beanInfo.fields.length > 200
3023	defaultConstructor == null
3023	asmEnable
3023	clazz.isInterface()
3024	fieldInfo.getOnly
3025	Modifier.isPublic(fieldClass.getModifiers())
3026	fieldClass.isMemberClass()
3026	Modifier.isStatic(fieldClass.getModifiers())
3027	ASMUtils.checkName(fieldInfo.getMember().getName())
3027	fieldInfo.getMember() != null
3028	annotation != null
3028	ASMUtils.checkName(annotation.name())
3028	annotation.unwrapped()
3028	annotation.deserializeUsing() != Void.class
3028	annotation.format().length() != 0
3029	fieldClass.isEnum()
3030	fieldDeser instanceof EnumDeserializer
3031	asmEnable
3032	clazz.isMemberClass()
3032	Modifier.isStatic(clazz.getModifiers())
3033	asmEnable
3034	annotation != null
3035	deserializeUsing == Void.class
3036	fieldClass == ArrayList.class
3036	fieldClass == List.class
3036	deserializeUsing == null
3037	fieldCacheMap.containsKey(fieldName)
3038	clazz.getSuperclass() != null
3038	clazz.getSuperclass() != Object.class
3039	field == null
3040	field == null
3041	field == null
3042	c0 <= 'z'
3042	c0 >= 'a'
3043	name == null
3043	name.length() == 0
3044	name.equals(item)
3045	name == null
3045	name.length() == 0
3046	name.equals(item)
3047	typeName == null
3048	typeName.length() >= maxTypeNameLength
3049	autoTypeSupport
3049	expectClass != null
3050	className.startsWith(accept)
3051	className.startsWith(deny)
3052	clazz == null
3053	clazz != null
3054	expectClass.isAssignableFrom(clazz)
3054	expectClass != null
3055	autoTypeSupport
3056	className.startsWith(deny)
3057	className.startsWith(accept)
3058	expectClass != null
3058	expectClass.isAssignableFrom(clazz)
3059	autoTypeSupport
3059	expectClass != null
3060	clazz != null
3061	DataSource.class.isAssignableFrom(clazz)
3061	ClassLoader.class.isAssignableFrom(clazz)
3062	expectClass != null
3063	expectClass.isAssignableFrom(clazz)
3064	autoTypeSupport
1223	name.length() == 0
1223	name == null
831	object == null
832	object instanceof int[]
833	i != 0
834	object instanceof short[]
835	i != 0
836	object instanceof long[]
837	i != 0
838	object instanceof boolean[]
839	i != 0
840	object instanceof float[]
841	i != 0
842	Float.isNaN(item)
843	object instanceof double[]
844	i != 0
845	Double.isNaN(item)
846	object instanceof byte[]
847	object instanceof AtomicReference
848	rawType == AtomicReference.class
849	rawType == WeakReference.class
850	rawType == SoftReference.class
2725	map != null
2726	collection != null
2727	list instanceof JSONArray
2728	array != null
2729	arrayLength > index
2730	jsonArray.getComponentType() != null
1186	parent == null
1187	fieldName instanceof Integer
1450	fieldClass.isEnum()
1451	fieldSer instanceof EnumSerializer
1452	Iterable.class.isAssignableFrom(clazz)
1452	beanInfo.fields.length == 0
1453	jsonType != null
1454	serializerClass != Void.class
1455	seralizer instanceof ObjectSerializer
1456	jsonType.asm() == false
1457	SerializerFeature.WriteEnumUsingToString == feature
1457	SerializerFeature.NotWriteDefaultValue == feature
1457	SerializerFeature.WriteNonStringValueAsString == feature
1458	Modifier.isPublic(beanInfo.beanType.getModifiers())
1459	clazz == Serializable.class
1459	clazz == Object.class
1459	asm
1459	asmFactory.classLoader.isExternalClass(clazz)
1460	asm
1460	ASMUtils.checkName(clazz.getSimpleName())
1461	asm
1462	field.getType().equals(fieldInfo.fieldClass)
1462	field != null
1463	method != null
1463	method.getReturnType().equals(fieldInfo.fieldClass)
1464	annotation == null
1465	annotation.serializeUsing() != Void.class
1465	annotation.unwrapped()
1465	annotation.format().length() != 0
1465	annotation.jsonDirect()
1465	ASMUtils.checkName(annotation.name())
1466	SerializerFeature.NotWriteDefaultValue == feature
1466	SerializerFeature.WriteEnumUsingToString == feature
1466	SerializerFeature.WriteNonStringValueAsString == feature
1467	asm
1468	asmSerializer != null
1469	ASMUtils.IS_ANDROID
1470	asm
1471	serializer instanceof SerializeFilterable
1472	this != SerializeConfig.globalInstance
1473	filterable == MapSerializer.instance
1474	serializer == null
1475	value
1476	serializer instanceof JavaBeanSerializer
1477	value
1478	originalFeaturs == beanInfo.features
1479	serializerClass != JavaBeanSerializer.class
1480	writer == null
1481	o instanceof AutowiredObjectSerializer
1482	writer == null
1483	classLoader != Thread.currentThread().getContextClassLoader()
1484	o instanceof AutowiredObjectSerializer
1485	writer == null
1486	Map.class.isAssignableFrom(clazz)
1487	List.class.isAssignableFrom(clazz)
1488	Collection.class.isAssignableFrom(clazz)
1489	Date.class.isAssignableFrom(clazz)
1490	JSONAware.class.isAssignableFrom(clazz)
1491	JSONSerializable.class.isAssignableFrom(clazz)
1492	JSONStreamAware.class.isAssignableFrom(clazz)
1493	clazz.getSuperclass() != null
1493	clazz.isEnum()
1493	clazz.getSuperclass().isEnum()
1494	jsonType.serializeEnumAsJavaBean()
1494	jsonType != null
1495	clazz.isArray()
1496	Throwable.class.isAssignableFrom(clazz)
1497	TimeZone.class.isAssignableFrom(clazz)
1497	Map.Entry.class.isAssignableFrom(clazz)
1498	Appendable.class.isAssignableFrom(clazz)
1499	Charset.class.isAssignableFrom(clazz)
1500	Enumeration.class.isAssignableFrom(clazz)
1501	Calendar.class.isAssignableFrom(clazz)
1501	XMLGregorianCalendar.class.isAssignableFrom(clazz)
1502	Clob.class.isAssignableFrom(clazz)
1503	TypeUtils.isPath(clazz)
1504	Iterator.class.isAssignableFrom(clazz)
1505	className.startsWith("java.awt.")
1505	AwtCodec.support(clazz)
1506	awtError
1507	className.equals("java.util.concurrent.atomic.LongAdder")
1507	className.startsWith("java.time.")
1507	className.equals("java.util.concurrent.atomic.DoubleAdder")
1507	className.startsWith("java.util.Optional")
1507	jdk8Error
1508	writer != null
1509	oracleJdbcError
1509	className.startsWith("oracle.sql.")
1510	writer != null
1511	className.equals("springfox.documentation.spring.web.json.Json")
1511	springfoxError
1512	writer != null
1513	guavaError
1513	className.startsWith("com.google.common.collect.")
1514	writer != null
1515	className.equals("net.sf.json.JSONNull")
1516	writer != null
1517	TypeUtils.isProxy(clazz)
1518	create
673	beforeFilters == null
674	afterFilters == null
675	nameFilters == null
676	propertyPreFilters == null
677	labelFilters == null
678	propertyFilters == null
679	contextValueFilters == null
680	valueFilters == null
681	filter == null
682	filter instanceof PropertyPreFilter
683	filter instanceof NameFilter
684	filter instanceof ValueFilter
685	filter instanceof ContextValueFilter
686	filter instanceof PropertyFilter
687	filter instanceof BeforeFilter
688	filter instanceof AfterFilter
689	filter instanceof LabelFilter
690	jsonBeanDeser.propertyPreFilters != null
691	filter.apply(jsonBeanDeser, object, key)
692	this.propertyPreFilters != null
693	filter.apply(jsonBeanDeser, object, key)
694	jsonBeanDeser.propertyFilters != null
695	propertyFilter.apply(object, key, propertyValue)
696	this.propertyFilters != null
697	propertyFilter.apply(object, key, propertyValue)
698	jsonBeanDeser.nameFilters != null
699	this.nameFilters != null
700	propertyValue != null
701	propertyValue instanceof Boolean
701	jsonBeanDeser.out.writeNonStringValueAsString
701	(beanContext.getFeatures() & SerializerFeature.WriteNonStringValueAsString.mask) != 0
701	beanContext != null
701	propertyValue instanceof Number
702	propertyValue instanceof Number
702	beanContext != null
703	format != null
704	beanContext.isJsonDirect()
704	beanContext != null
705	jsonBeanDeser.valueFilters != null
706	valueFilters != null
707	jsonBeanDeser.contextValueFilters != null
708	this.contextValueFilters != null
1224	buf != null
1225	maxBufSize < this.buf.length
1226	initialSize <= 0
1227	state
1228	feature == SerializerFeature.WriteEnumUsingToString
1229	feature == SerializerFeature.WriteEnumUsingName
1230	newcount > buf.length
1231	writer == null
1232	len < 0
1232	off + len < 0
1232	off + len > c.length
1232	off > c.length
1232	off < 0
1233	len == 0
1234	newcount > buf.length
1235	writer == null
1236	maxBufSize != -1
1236	minimumCapacity >= maxBufSize
1237	newCapacity < minimumCapacity
1238	newcount > buf.length
1239	writer == null
1240	this.writer != null
1241	this.writer != null
1242	charset == UTF8
1243	this.writer != null
1244	this.writer != null
1245	this.writer != null
1246	charset == UTF8
1247	bytes == null
1248	bytes.length < bytesLength
1249	bytes == null
1250	bytes.length < bytesLength
1251	writer != null
1251	count > 0
1252	buf.length <= 1024 * 64
1253	text == null
1254	i == Integer.MIN_VALUE
1255	newcount > buf.length
1256	writer == null
1257	bytesLen == 0
1258	newcount > buf.length
1259	writer != null
1260	left > 0
1261	left > 0
1262	Float.isNaN(value)
1262	Float.isInfinite(value)
1263	floatText.endsWith(".0")
1263	isEnabled(SerializerFeature.WriteNullNumberAsZero)
1264	checkWriteClassName
1264	isEnabled(SerializerFeature.WriteClassName)
1265	Double.isInfinite(doubleValue)
1265	Double.isNaN(doubleValue)
1266	doubleText.endsWith(".0")
1266	isEnabled(SerializerFeature.WriteNullNumberAsZero)
1267	checkWriteClassName
1267	isEnabled(SerializerFeature.WriteClassName)
1268	value == null
1269	writeEnumUsingToString
1269	writeEnumUsingName
1270	writeEnumUsingToString
1271	strVal != null
1272	i == Long.MIN_VALUE
1273	needQuotationMark
1274	needQuotationMark
1275	newcount > buf.length
1276	writer == null
1277	needQuotationMark
1278	needQuotationMark
1279	(this.features & feature) == 0
1279	(beanFeatures & feature) == 0
1280	feature == SerializerFeature.WriteNullListAsEmpty.mask
1281	feature == SerializerFeature.WriteNullStringAsEmpty.mask
1282	feature == SerializerFeature.WriteNullBooleanAsFalse.mask
1283	feature == SerializerFeature.WriteNullNumberAsZero.mask
1284	text == null
1285	seperator != 0
1286	seperator != 0
1287	newcount > buf.length
1288	writer != null
1289	isEnabled(SerializerFeature.BrowserSecure)
1290	ch <= 'Z'
1290	ch >= 'A'
1290	ch >= '0'
1290	ch == '_'
1290	ch >= 'a'
1290	ch <= 'z'
1290	ch == '.'
1290	ch == ','
1290	ch <= '9'
1291	isEnabled(SerializerFeature.BrowserCompatible)
1292	ch == '\\'
1292	ch == '\t'
1292	ch == '"'
1292	ch == '/'
1292	ch == '\r'
1292	ch == '\n'
1292	ch == '\b'
1292	ch == '\f'
1293	ch < 32
1294	ch >= 127
1295	IOUtils.specicalFlags_doubleQuotes[ch] != 0
1295	isEnabled(SerializerFeature.WriteSlashAsSpecial)
1295	ch < IOUtils.specicalFlags_doubleQuotes.length
1295	ch == '/'
1296	IOUtils.specicalFlags_doubleQuotes[ch] == 4
1297	seperator != 0
1298	isEnabled(SerializerFeature.BrowserSecure)
1299	ch <= 'Z'
1299	ch == '_'
1299	ch >= 'A'
1299	ch >= 'a'
1299	ch <= '9'
1299	ch == '.'
1299	ch >= '0'
1299	ch <= 'z'
1299	ch == ','
1300	newcount > buf.length
1301	ch >= 'a'
1301	ch == '_'
1301	ch == '.'
1301	ch == ','
1301	ch >= '0'
1301	ch <= 'z'
1301	ch <= 'Z'
1301	ch <= '9'
1301	ch >= 'A'
1302	seperator != 0
1303	isEnabled(SerializerFeature.BrowserCompatible)
1304	ch == '/'
1304	ch == '\\'
1304	ch == '"'
1305	ch == '\r'
1305	ch == '\b'
1305	ch == '\n'
1305	ch == '\t'
1305	ch == '\f'
1306	ch < 32
1307	ch >= 127
1308	newcount > buf.length
1309	ch == '\b'
1309	ch == '\r'
1309	ch == '\n'
1309	ch == '\t'
1309	ch == '\f'
1310	ch == '/'
1310	ch == '\\'
1310	ch == '"'
1311	ch < 32
1312	ch >= 127
1313	seperator != 0
1314	ch == '\u2028'
1314	ch == '\u2029'
1315	firstSpecialIndex == -1
1316	ch >= ']'
1317	ch < 0xA0
1317	ch >= 0x7F
1318	firstSpecialIndex == -1
1319	isSpecial(ch, this.features)
1320	ch < IOUtils.specicalFlags_doubleQuotes.length
1320	IOUtils.specicalFlags_doubleQuotes[ch] == 4
1321	firstSpecialIndex == -1
1322	specialCount > 0
1323	newcount > buf.length
1324	specialCount == 1
1325	lastSpecial == '\u2028'
1326	lastSpecial == '\u2029'
1327	ch < IOUtils.specicalFlags_doubleQuotes.length
1327	IOUtils.specicalFlags_doubleQuotes[ch] == 4
1328	specialCount > 1
1329	IOUtils.specicalFlags_doubleQuotes[ch] != 0
1329	ch < IOUtils.specicalFlags_doubleQuotes.length
1329	isEnabled(SerializerFeature.WriteSlashAsSpecial)
1329	ch == '/'
1330	IOUtils.specicalFlags_doubleQuotes[ch] == 4
1331	ch == '\u2028'
1331	ch == '\u2029'
1332	seperator != 0
1333	newcount > buf.length
1334	list.isEmpty()
1335	text == null
1336	hasSpecial = (ch < ' ' // || ch > '~' // || ch == '"' // || ch == '\\')
1336	ch == '"'
1336	ch < ' '
1336	ch == '\\'
1336	ch > '~'
1337	hasSpecial
1338	j != 0
1339	text == null
1340	i == list.size() - 1
1341	newcount > buf.length
1342	i == 0
1343	value == 0
1344	quoteFieldNames
1345	newcount > buf.length
1346	writer != null
1347	value
1348	value
1349	value == Integer.MIN_VALUE
1349	quoteFieldNames
1350	newcount > buf.length
1351	writer != null
1352	quoteFieldNames
1352	value == Long.MIN_VALUE
1353	newcount > buf.length
1354	writer != null
1355	quoteFieldNames
1356	useSingleQuotes
1357	value == null
1358	isEnabled(SerializerFeature.BrowserSecure)
1359	isEnabled(SerializerFeature.BrowserCompatible)
1360	value == null
1361	value == null
1362	newcount > buf.length
1363	writer != null
1364	value == null
1365	ch >= ']'
1366	ch == '\u2028'
1366	ch == '\u2029'
1366	ch < 0xA0
1366	ch >= 0x7F
1367	firstSpecialIndex == -1
1368	isSpecial(ch, this.features)
1369	IOUtils.specicalFlags_doubleQuotes[ch] == 4
1369	ch < IOUtils.specicalFlags_doubleQuotes.length
1370	firstSpecialIndex == -1
1371	specialCount > 0
1372	newcount > buf.length
1373	specialCount == 1
1374	lastSpecial == '\u2028'
1375	lastSpecial == '\u2029'
1376	ch < IOUtils.specicalFlags_doubleQuotes.length
1376	IOUtils.specicalFlags_doubleQuotes[ch] == 4
1377	specialCount > 1
1378	ch < IOUtils.specicalFlags_doubleQuotes.length
1378	ch == '/'
1378	isEnabled(SerializerFeature.WriteSlashAsSpecial)
1378	IOUtils.specicalFlags_doubleQuotes[ch] != 0
1379	IOUtils.specicalFlags_doubleQuotes[ch] == 4
1380	ch == '\u2028'
1380	ch == '\u2029'
1381	newcount > buf.length
1382	writer != null
1383	ch == ' '
1384	ch == '/'
1385	ch != '\\'
1385	ch > '#'
1386	ch == '\\'
1386	ch <= 0x1F
1386	ch == '"'
1387	value == null
1388	writeEnumUsingName
1388	writeEnumUsingToString
1389	writeEnumUsingToString
1390	useSingleQuotes
1391	value == null
1392	useSingleQuotes
1393	useSingleQuotes
1394	text == null
1395	newcount > buf.length
1396	newcount > buf.length
1397	writer != null
1398	ch == '/'
1398	isEnabled(SerializerFeature.WriteSlashAsSpecial)
1398	ch == '\''
1398	ch <= 13
1398	ch == '\\'
1399	ch == '\\'
1399	isEnabled(SerializerFeature.WriteSlashAsSpecial)
1399	ch <= 13
1399	ch == '/'
1399	ch == '\''
1400	newcount > buf.length
1401	specialCount == 1
1402	specialCount > 1
1403	ch <= 13
1403	ch == '\\'
1403	ch == '/'
1403	isEnabled(SerializerFeature.WriteSlashAsSpecial)
1403	ch == '\''
1404	key == null
1405	useSingleQuotes
1406	quoteFieldNames
1407	quoteFieldNames
1408	SerializeWriter.isSpecial(ch, 0)
1409	hashSpecial
1410	newcount > buf.length
1411	writer != null
1412	len == 0
1413	ch < specicalFlags_singleQuotes.length
1413	specicalFlags_singleQuotes[ch] != 0
1414	hasSpecial
1415	specicalFlags_singleQuotes[ch] != 0
1415	ch < specicalFlags_singleQuotes.length
1416	hasSpecial
1417	len == 0
1418	newCount > buf.length
1419	ch < specicalFlags_singleQuotes.length
1419	specicalFlags_singleQuotes[ch] != 0
1420	hasSpecial
1421	newcount > buf.length
1422	newcount > buf.length
1423	writer == null
274	classLoader == null
275	loadedUrls.contains(url.toString())
276	line == null
277	ci >= 0
278	line.length() == 0
814	object == null
1002	item != null
1003	source == null
1004	clazz != null
1004	clazz.isInstance(source)
1005	this.excludes.contains(name)
1006	maxLevel > 0
1007	level > maxLevel
1008	includes.size() == 0
1008	includes.contains(name)
2900	timestamp
2901	val == null
2902	val instanceof java.util.Date
2903	val instanceof Number
2904	val instanceof String
2905	strVal.length() == 0
2906	dateLexer.scanISO8601DateIfMatch()
2907	val == null
2908	val instanceof java.util.Date
2909	val instanceof Number
2910	val instanceof String
2911	strVal.length() == 0
2912	dateLexer.scanISO8601DateIfMatch()
2937	lexer.token() == JSONToken.NULL
2938	lexer.token() != JSONToken.LBRACE
2938	lexer.token() != JSONToken.COMMA
2939	key == null
2940	lexer.token() == JSONToken.RBRACE
2941	lexer.token() == JSONToken.COMMA
2942	lexer.isEnabled(Feature.AllowArbitraryCommas)
2943	"className".equals(key)
2944	lexer.token() == JSONToken.NULL
2945	lexer.token() == JSONToken.LITERAL_STRING
2946	"methodName".equals(key)
2947	lexer.token() == JSONToken.NULL
2948	lexer.token() == JSONToken.LITERAL_STRING
2949	"fileName".equals(key)
2950	lexer.token() == JSONToken.NULL
2951	lexer.token() == JSONToken.LITERAL_STRING
2952	"lineNumber".equals(key)
2953	lexer.token() == JSONToken.NULL
2954	lexer.token() == JSONToken.LITERAL_INT
2955	"nativeMethod".equals(key)
2956	lexer.token() == JSONToken.NULL
2957	lexer.token() == JSONToken.TRUE
2958	lexer.token() == JSONToken.FALSE
2959	key == JSON.DEFAULT_TYPE_KEY
2960	lexer.token() == JSONToken.LITERAL_STRING
2961	elementType.equals("java.lang.StackTraceElement")
2962	lexer.token() != JSONToken.NULL
2963	"moduleName".equals(key)
2964	lexer.token() == JSONToken.NULL
2965	lexer.token() == JSONToken.LITERAL_STRING
2966	"moduleVersion".equals(key)
2967	lexer.token() == JSONToken.NULL
2968	lexer.token() == JSONToken.LITERAL_STRING
2969	lexer.token() == JSONToken.RBRACE
1165	value == null
1166	clazz == StringBuffer.class
1167	lexer.token() == JSONToken.LITERAL_STRING
1168	value == null
1169	clazz == StringBuilder.class
1170	lexer.token() == JSONToken.LITERAL_STRING
1171	value == null
1172	lexer.token() == JSONToken.LITERAL_STRING
1173	lexer.token() == JSONToken.LITERAL_INT
1174	value == null
1940	symbol != null
1941	len == symbol.length()
1941	hash == symbol.hashCode()
1942	buffer[offset + i] != symbol.charAt(i)
1943	eq
1944	symbol != null
1945	buffer.startsWith(symbol, offset)
1945	len == symbol.length()
1945	hash == symbol.hashCode()
264	decoder == null
265	ref == null
266	chars == null
267	chars.length < length
268	length> CHARS_CACH_MAX_SIZE
269	part <= 0
270	ref == null
271	bytes == null
272	bytes.length < length
273	length > BYTES_CACH_MAX_SIZE
2657	lexer.token() == JSONToken.NULL
2658	parser.getResolveStatus() == DefaultJSONParser.TypeNameRedirect
2659	lexer.token() != JSONToken.LBRACE
2660	type != null
2660	type instanceof Class
2661	Throwable.class.isAssignableFrom(clazz)
2662	key == null
2663	lexer.token() == JSONToken.RBRACE
2664	lexer.token() == JSONToken.COMMA
2665	lexer.isEnabled(Feature.AllowArbitraryCommas)
2666	JSON.DEFAULT_TYPE_KEY.equals(key)
2667	lexer.token() == JSONToken.LITERAL_STRING
2668	"message".equals(key)
2669	lexer.token() == JSONToken.NULL
2670	lexer.token() == JSONToken.LITERAL_STRING
2671	"cause".equals(key)
2672	"stackTrace".equals(key)
2673	lexer.token() == JSONToken.RBRACE
2674	exClass == null
2675	Throwable.class.isAssignableFrom(exClass)
2676	ex == null
2677	stackTrace != null
2678	types.length == 0
2679	types[0] == String.class
2679	types.length == 1
2680	types[0] == String.class
2680	types.length == 2
2680	types[1] == Throwable.class
2681	causeConstructor != null
2682	messageConstructor != null
2683	defaultConstructor != null
2366	lexer.token() == JSONToken.COMMA
2367	lexer.token() != JSONToken.LITERAL_STRING
2368	lexer.token() != JSONToken.LITERAL_INT
2369	lexer.token() != JSONToken.RBRACE
2370	val == null
2371	val instanceof java.sql.Time
2372	val instanceof Number
2373	val instanceof String
2374	strVal.length() == 0
2375	dateLexer.scanISO8601DateIfMatch()
2376	ch < '0'
2376	ch > '9'
2377	isDigit
1180	object == null
3131	car == ')'
3132	car == 'L'
3133	car == 'D'
3133	car == 'J'
3134	buf[off + len] == 'L'
3072	argTypes[i] instanceof TypeVariable
3073	actualIndex >= actualTypeArguments.length
3074	cachedType == null
279	value == null
280	value == null
281	value instanceof Number
282	value instanceof String
283	"NULL".equals(strVal)
283	"null".equals(strVal)
283	strVal.length() == 0
284	value == null
285	value instanceof Character
286	value instanceof String
287	strVal.length() == 0
288	strVal.length() != 1
289	value == null
290	value instanceof Number
291	value instanceof String
292	"NULL".equals(strVal)
292	"null".equals(strVal)
292	strVal.length() == 0
293	value == null
294	value instanceof BigDecimal
295	value instanceof BigInteger
296	strVal.length() == 0
297	value == null
298	value instanceof BigInteger
299	value instanceof Float
299	value instanceof Double
300	strVal.length() == 0
300	"NULL".equals(strVal)
300	"null".equals(strVal)
301	value == null
302	value instanceof Number
303	value instanceof String
304	"null".equals(strVal)
304	strVal.length() == 0
304	"NULL".equals(strVal)
305	strVal.indexOf(',') != 0
306	value == null
307	value instanceof Number
308	value instanceof String
309	"NULL".equals(strVal)
309	strVal.length() == 0
309	"null".equals(strVal)
310	strVal.indexOf(',') != 0
311	value == null
312	value instanceof Date
313	value instanceof Calendar
314	value instanceof Number
315	value instanceof String
316	dateLexer.scanISO8601DateIfMatch(false)
317	strVal.startsWith("/Date(")
317	strVal.endsWith(")/")
318	strVal.indexOf('-') != -1
319	strVal.length() == JSON.DEFFAULT_DATE_FORMAT.length()
320	strVal.length() == 10
321	strVal.length() == "yyyy-MM-dd HH:mm:ss".length()
322	strVal.length() == 0
323	longValue < 0
324	"oracle.sql.TIMESTAMP".equals(clazz.getName())
325	oracleTimestampMethod == null
325	oracleTimestampMethodInited
326	"oracle.sql.DATE".equals(clazz.getName())
327	oracleDateMethodInited
327	oracleDateMethod == null
328	value == null
329	value instanceof java.sql.Date
330	value instanceof java.util.Date
331	value instanceof Calendar
332	value instanceof Number
333	value instanceof String
334	strVal.length() == 0
334	"null".equals(strVal)
334	"NULL".equals(strVal)
335	isNumber(strVal)
336	scanner.scanISO8601DateIfMatch(false)
337	longValue <= 0
338	value == null
339	value instanceof Calendar
340	value instanceof java.sql.Timestamp
341	value instanceof java.util.Date
342	value instanceof Number
343	value instanceof String
344	strVal.length() == 0
344	"null".equals(strVal)
344	"NULL".equals(strVal)
345	isNumber(strVal)
346	scanner.scanISO8601DateIfMatch(false)
347	longValue <= 0
348	ch == '-'
348	ch == '+'
349	i != 0
350	ch > '9'
350	ch < '0'
351	value == null
352	value instanceof Number
353	value instanceof String
354	"null".equals(strVal)
354	"NULL".equals(strVal)
354	strVal.length() == 0
355	strVal.indexOf(',') != 0
356	dateParser.scanISO8601DateIfMatch(false)
357	calendar != null
358	value instanceof Map
359	map.containsKey("andDecrement")
359	map.containsKey("andIncrement")
359	map.size() == 2
360	value == null
361	value instanceof Integer
362	value instanceof Number
363	value instanceof String
364	strVal.length() == 0
364	"null".equals(strVal)
364	"NULL".equals(strVal)
365	strVal.indexOf(',') != 0
366	value instanceof Boolean
367	value instanceof Map
368	map.containsKey("andDecrement")
368	map.size() == 2
368	map.containsKey("andIncrement")
369	value instanceof byte[]
370	value instanceof String
371	value == null
372	value instanceof Boolean
373	value instanceof Number
374	value instanceof String
375	strVal.length() == 0
375	"NULL".equals(strVal)
375	"null".equals(strVal)
376	"true".equalsIgnoreCase(strVal)
376	"1".equals(strVal)
377	"false".equalsIgnoreCase(strVal)
377	"0".equals(strVal)
378	"Y".equalsIgnoreCase(strVal)
378	"T".equals(strVal)
379	"F".equalsIgnoreCase(strVal)
379	"N".equals(strVal)
380	obj == null
381	clazz == null
382	clazz == obj.getClass()
383	obj instanceof Map
384	clazz == Map.class
385	clazz == Object.class
385	map.containsKey(JSON.DEFAULT_TYPE_KEY)
386	clazz.isArray()
387	obj instanceof Collection
388	clazz == byte[].class
389	clazz.isAssignableFrom(obj.getClass())
390	clazz == Boolean.class
390	clazz == boolean.class
391	clazz == Byte.class
391	clazz == byte.class
392	clazz == Short.class
392	clazz == short.class
393	clazz == int.class
393	clazz == Integer.class
394	clazz == long.class
394	clazz == Long.class
395	clazz == Float.class
395	clazz == float.class
396	clazz == double.class
396	clazz == Double.class
397	clazz == String.class
398	clazz == BigDecimal.class
399	clazz == BigInteger.class
400	clazz == Date.class
401	clazz == java.sql.Date.class
402	clazz == java.sql.Timestamp.class
403	clazz.isEnum()
404	Calendar.class.isAssignableFrom(clazz)
405	clazz == Calendar.class
406	clazz.getName().equals("javax.xml.datatype.XMLGregorianCalendar")
407	obj instanceof String
408	"null".equals(strVal)
408	"NULL".equals(strVal)
408	strVal.length() == 0
409	clazz == java.util.Currency.class
410	clazz == java.util.Locale.class
411	items.length == 1
412	items.length == 2
413	obj instanceof String
414	name.length() == 0
415	obj instanceof Number
416	ordinal < values.length
417	obj == null
418	type instanceof Class
419	type instanceof ParameterizedType
420	obj instanceof String
421	"NULL".equals(strVal)
421	"null".equals(strVal)
421	strVal.length() == 0
422	type instanceof TypeVariable
423	rawTye == List.class
423	rawTye == ArrayList.class
423	rawTye == Set.class
423	rawTye == HashSet.class
423	rawTye == TreeSet.class
424	obj instanceof Iterable
425	rawTye == Set.class
425	rawTye == HashSet.class
426	rawTye == TreeSet.class
427	rawTye == Map.class
427	rawTye == HashMap.class
428	obj instanceof Map
429	obj instanceof String
430	strVal.length() == 0
431	type.getActualTypeArguments().length == 1
432	argType instanceof WildcardType
433	clazz == StackTraceElement.class
434	value == null
435	iClassObject instanceof String
436	config == null
437	loadClazz == null
438	loadClazz.equals(clazz)
439	clazz.isInterface()
440	map instanceof JSONObject
441	clazz == Locale.class
442	arg0 instanceof String
443	arg1 instanceof String
444	arg1 == null
445	config == null
446	deserizer instanceof JavaBeanDeserializer
447	javaBeanDeser == null
448	clazz == null
449	pathClass_error
449	pathClass == null
450	pathClass != null
451	className == null
451	className.length() == 0
452	clazz != null
453	className.charAt(0) == '['
454	className.startsWith("L")
454	className.endsWith(";")
455	classLoader != null
456	contextClassLoader != null
456	contextClassLoader != classLoader
457	jsonType != null
458	typeName.length() == 0
459	orders != null
459	orders.length != 0
460	Arrays.equals(sortedFields, fields)
461	Modifier.isStatic(method.getModifiers())
462	method.getReturnType().equals(Void.TYPE)
463	method.getParameterTypes().length != 0
464	method.getReturnType() == ClassLoader.class
465	method.getReturnType().getName().equals("groovy.lang.MetaClass")
465	method.getName().equals("getMetaClass")
466	annotation == null
467	annotation != null
468	annotation.serialize()
469	annotation.name().length() != 0
470	aliasMap != null
471	propertyName == null
472	annotation.label().length() != 0
473	methodName.startsWith("get")
474	methodName.length() < 4
475	methodName.equals("getClass")
476	methodName.equals("getDeclaringClass")
476	clazz.isEnum()
477	c3 > 512
477	Character.isUpperCase(c3)
478	compatibleWithJavaBean
479	c3 == '_'
480	c3 == 'f'
481	Character.isUpperCase(methodName.charAt(4))
481	methodName.length() >= 5
482	ignore
483	field == null
483	propertyName.length() > 1
484	ch >= 'A'
484	ch <= 'Z'
485	field != null
486	fieldAnnotation != null
487	fieldAnnotation.serialize()
488	fieldAnnotation.name().length() != 0
489	aliasMap != null
490	propertyName == null
491	fieldAnnotation.label().length() != 0
492	aliasMap != null
493	propertyName == null
494	propertyNamingStrategy != null
495	methodName.startsWith("is")
496	methodName.length() < 3
497	method.getReturnType() != Boolean.TYPE
497	method.getReturnType() != Boolean.class
498	Character.isUpperCase(c2)
499	compatibleWithJavaBean
500	c2 == '_'
501	c2 == 'f'
502	field == null
503	field != null
504	fieldAnnotation != null
505	fieldAnnotation.serialize()
506	fieldAnnotation.name().length() != 0
507	aliasMap != null
508	propertyName == null
509	fieldAnnotation.label().length() != 0
510	aliasMap != null
511	propertyName == null
512	propertyNamingStrategy != null
513	fieldInfoMap.containsKey(propertyName)
514	annotation != null
515	orders != null
515	orders.length == fieldInfoMap.size()
516	fieldInfoMap.containsKey(item)
517	containsAll
518	sorted
519	Modifier.isStatic(field.getModifiers())
520	fieldAnnotation != null
521	fieldAnnotation.serialize()
522	fieldAnnotation.name().length() != 0
523	fieldAnnotation.label().length() != 0
524	aliasMap != null
525	propertyName == null
526	propertyNamingStrategy != null
527	fieldInfoMap.containsKey(propertyName)
528	compatibleWithFieldName
529	fieldCacheMap.containsKey(propertyName)
530	interfaces.length > 0
531	interfaceTypes.length != types.length
532	interfaceMethod.getName().equals(method.getName())
533	interfaceTypes[i].equals(types[i])
534	match
535	annotation != null
536	superClass == null
537	Modifier.isAbstract(superClass.getModifiers())
538	interfaceTypes.length != types.length
539	interfaceMethod.getName().equals(method.getName())
540	interfaceTypes[i].equals(types[i])
541	match
542	annotation != null
543	jsonType != null
544	fields.length > 0
545	propertyName.equals(fields[i])
546	propertyName.equals(fields[i])
547	clazz.getSuperclass() != Object.class
547	clazz.getSuperclass() != null
548	isJSONTypeIgnore(clazz.getSuperclass(), propertyName)
549	type instanceof ParameterizedType
550	type instanceof Class
551	superType == Object.class
552	type instanceof ParameterizedType
553	type instanceof Class
554	optionalClassInited
555	type instanceof ParameterizedType
556	parameterizedType.getRawType() == optionalClass
557	type.getClass() == Class.class
558	type instanceof ParameterizedType
559	type instanceof TypeVariable
560	fieldName.equals(field.getName())
561	superClass != Object.class
561	superClass != null
562	annotation == null
563	annotation == null
564	name.length() == 0
564	name == null
565	Character.isUpperCase(name.charAt(0))
565	Character.isUpperCase(name.charAt(1))
565	name.length() > 1
566	setAccessibleEnable
567	obj.isAccessible()
568	fieldType instanceof ParameterizedType
569	actualTypeArgument instanceof WildcardType
570	upperBounds.length == 1
571	fieldType instanceof Class<?>
571	(clazz = (Class<?>) fieldType).getName().startsWith("java.")
572	itemType == null
573	fieldType instanceof ParameterizedType
574	actualTypeArgument instanceof WildcardType
575	upperBounds.length == 1
576	actualTypeArgument instanceof Class
577	Modifier.isPublic(itemClass.getModifiers())
578	rawClass == Collection.class
578	rawClass == AbstractCollection.class
579	rawClass.isAssignableFrom(HashSet.class)
580	rawClass.isAssignableFrom(LinkedHashSet.class)
581	rawClass.isAssignableFrom(TreeSet.class)
582	rawClass.isAssignableFrom(ArrayList.class)
583	rawClass.isAssignableFrom(EnumSet.class)
584	type instanceof ParameterizedType
585	type instanceof Class<?>
586	type instanceof ParameterizedType
587	interfaceName.equals("net.sf.cglib.proxy.Factory")
587	interfaceName.equals("org.springframework.cglib.proxy.Factory")
588	interfaceName.equals("org.apache.ibatis.javassist.util.proxy.ProxyObject")
588	interfaceName.equals("javassist.util.proxy.ProxyObject")
589	method == null
590	transientClassInited
591	transientClass != null
592	isNotContinuation(src.get())
593	(b1 >> 2) == -2
594	src.remaining() < 4
595	(b1 >> 1) == -2
596	src.remaining() < 5
597	b1 > 0xf4
597	(b2 & 0xf0) != 0x80
597	b1 == 0xf0
597	b2 < 0x90
597	b2 > 0xbf
597	isNotContinuation(b2)
597	b1 == 0xf4
598	isNotContinuation(src.get())
599	b1 >= 0
600	destPosition >= destLength
601	(b1 >> 5) == -2
602	destPosition >= destLength
602	srcLength - srcPosition < 2
603	isMalformed2(b1, b2)
604	(b1 >> 4) == -2
605	srcLength - srcPosition < 3
605	destPosition >= destLength
606	isMalformed3(b1, b2, b3)
607	(b1 >> 3) == -2
608	srcLength - srcPosition < 4
608	destLength - destPosition < 2
609	isMalformed4(b2, b3, b4)
609	Surrogate.neededFor(uc)
