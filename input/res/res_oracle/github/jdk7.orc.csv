id	oracle
5478	acc == null
5479	inputEvent_CanAccessSystemClipboard_Field == null
5480	source == newSource
5481	newSource instanceof Component
5482	comp != null
5483	peer != null
5484	source instanceof Component
5485	source instanceof MenuComponent
5486	ke.isActionKey()
5487	keyCode == KeyEvent.VK_CONTROL
5487	keyCode == KeyEvent.VK_SHIFT
5487	keyCode == KeyEvent.VK_ALT
5488	src instanceof Frame
5488	src instanceof Dialog
5489	src instanceof Button
5490	src instanceof MenuItem
5491	src instanceof List
5492	src instanceof Choice
5493	aje.getValueIsAdjusting()
5494	this instanceof InputEvent
5494	that instanceof InputEvent
5495	field != null
5496	log.isLoggable(PlatformLogger.FINE)
5497	this instanceof InputEvent
5498	field != null
5499	log.isLoggable(PlatformLogger.FINE)
9974	oldl == a
9975	oldl == b
9976	a2 == a
9976	b2 == b
9977	a == null
9978	b == null
9979	l == oldl
9979	l == null
9980	l instanceof AWTEventMulticaster
9981	a instanceof AWTEventMulticaster
9982	a instanceof Serializable
9983	b instanceof AWTEventMulticaster
9984	b instanceof Serializable
9985	l == null
9986	l instanceof AWTEventMulticaster
9987	l instanceof Serializable
9988	l instanceof AWTEventMulticaster
9989	l instanceof AWTEventMulticaster
9990	a.getClass().getComponentType().isInstance(l)
9991	listenerType == null
4758	clazz == null
4759	subclass == null
4760	keyStrokeClass != null
4760	keyStrokeClass.equals(subclass)
4761	AWTKeyStroke.class.isAssignableFrom(subclass)
4762	ctor == null
4763	stroke == null
4764	cache == null
4765	cacheKey == null
4766	stroke == null
4767	keyChar == null
4768	s == null
4769	modifierKeywords == null
4770	typed
4771	token.length() != 1
4771	i != count
4772	released
4772	i == count
4772	pressed
4773	i != count
4774	token.equals("released")
4775	token.equals("pressed")
4776	token.equals("typed")
4777	tokenMask != null
4778	vks == null
4779	value == null
4780	keyCode == KeyEvent.VK_UNDEFINED
4781	anObject instanceof AWTKeyStroke
4782	keyCode == KeyEvent.VK_UNDEFINED
4783	(modifiers & InputEvent.SHIFT_DOWN_MASK) != 0
4784	(modifiers & InputEvent.CTRL_DOWN_MASK) != 0
4785	(modifiers & InputEvent.META_DOWN_MASK) != 0
4786	(modifiers & InputEvent.ALT_DOWN_MASK) != 0
4787	(modifiers & InputEvent.ALT_GRAPH_DOWN_MASK) != 0
4788	(modifiers & InputEvent.BUTTON1_DOWN_MASK) != 0
4789	(modifiers & InputEvent.BUTTON2_DOWN_MASK) != 0
4790	(modifiers & InputEvent.BUTTON3_DOWN_MASK) != 0
4791	name != null
4792	fields[i].getName().startsWith("VK_")
4792	fields[i].getType() == Integer.TYPE
4792	fields[i].getModifiers() == expected_modifiers
4792	fields[i].getInt(KeyEvent.class) == keyCode
4793	getClass().equals(getAWTKeyStrokeClass())
4794	(modifiers & InputEvent.SHIFT_MASK) != 0
4795	(modifiers & InputEvent.ALT_MASK) != 0
4796	(modifiers & InputEvent.ALT_GRAPH_MASK) != 0
4797	(modifiers & InputEvent.CTRL_MASK) != 0
4798	(modifiers & InputEvent.META_MASK) != 0
4799	(modifiers & InputEvent.SHIFT_DOWN_MASK) != 0
4800	(modifiers & InputEvent.ALT_DOWN_MASK) != 0
4801	(modifiers & InputEvent.ALT_GRAPH_DOWN_MASK) != 0
4802	(modifiers & InputEvent.CTRL_DOWN_MASK) != 0
4803	(modifiers & InputEvent.META_DOWN_MASK) != 0
530	o==null
531	it.next()==null
532	o.equals(it.next())
533	it.hasNext()
534	it.hasNext()
535	a == r
536	a.length < i
537	a.length > i
538	i == cap
539	newCap - MAX_ARRAY_SIZE > 0
540	minCapacity < 0
541	o==null
542	it.next()==null
543	o.equals(it.next())
544	contains(e)
545	add(e)
546	c.contains(it.next())
547	c.contains(it.next())
548	it.hasNext()
549	it.hasNext()
2826	task == null
2827	task == null
2828	task == null
2829	tasks == null
2830	ntasks == 0
2831	f == null
2832	ntasks > 0
2833	active == 0
2834	timed
2835	f == null
2836	f != null
2837	ee == null
2838	tasks == null
2839	f.isDone()
2840	done
2841	tasks == null
2841	unit == null
2842	nanos <= 0
2843	f.isDone()
2844	nanos <= 0
2845	done
13323	open
13324	interruptor == null
13325	me.isInterrupted()
13326	interrupted == Thread.currentThread()
13326	interrupted != null
13327	completed
13327	open
311	o==null
312	it.next()==null
313	o.equals(it.next())
314	o==null
315	it.previous()==null
316	o.equals(it.previous())
317	o == this
318	o instanceof List
319	o1==null ? o2==null : o1.equals(o2)
320	index > size()
320	index < 0
321	fromIndex < 0
322	toIndex > list.size()
323	fromIndex > toIndex
324	cSize==0
325	index >= size
325	index < 0
326	index < 0
326	index > size
327	this.modCount != l.modCount
1387	value==null
1388	e.getValue()==null
1389	value.equals(e.getValue())
1390	key==null
1391	e.getKey()==null
1392	key.equals(e.getKey())
1393	key==null
1394	e.getKey()==null
1395	key.equals(e.getKey())
1396	key==null
1397	e.getKey()==null
1398	key.equals(e.getKey())
1399	correctEntry !=null
1400	keySet == null
1401	values == null
1402	o == this
1403	o instanceof Map
1404	m.size() != size()
1405	value == null
1406	m.containsKey(key)
1406	m.get(key)==null
1407	value.equals(m.get(key))
1408	i.hasNext()
1409	i.hasNext()
14923	mcastaddr == null
14923	mcastaddr instanceof InetSocketAddress
14924	mcastaddr == null
14924	mcastaddr instanceof InetSocketAddress
14925	fd != null
14926	isClosed()
14927	o == null
14927	o instanceof Integer
14928	tmp < 0
14929	o instanceof Integer
14929	o == null
14930	o == null
14930	o instanceof Boolean
14931	o == null
14931	o instanceof Boolean
14932	o instanceof Integer
14932	((Integer)o).intValue() < 0
14932	o == null
14933	o == null
14933	o instanceof InetAddress
14934	o == null
14934	o instanceof NetworkInterface
14935	o instanceof Boolean
14935	o == null
14936	isClosed()
14937	((Integer)result).intValue() == -1
14998	stream
14999	socket != null
15000	serverSocket != null
15001	connected
15002	address instanceof InetSocketAddress
15002	address == null
15003	addr.isUnresolved()
15004	connected
15005	address.isAnyLocalAddress()
15006	isClosedOrPending()
15007	val == null
15007	val instanceof Integer
15007	val instanceof Boolean
15008	val instanceof Boolean
15009	val instanceof Integer
15009	val == null
15010	tmp < 0
15011	val == null
15011	val instanceof Integer
15012	val == null
15012	val instanceof Boolean
15013	((Integer)val).intValue() > 0
15013	val == null
15013	val instanceof Integer
15014	val instanceof Boolean
15014	val == null
15015	val instanceof Boolean
15015	val == null
15016	val == null
15016	val instanceof Boolean
15017	isClosedOrPending()
15018	opt == SO_TIMEOUT
15019	ret == -1
15020	socket == null
15020	closePending
15020	socket.isBound()
15021	closePending
15022	socket != null
15023	socket == null
15023	socket.isBound()
15023	closePending
15024	socket != null
15025	serverSocket != null
15026	isClosedOrPending()
15027	shut_rd
15028	socketInputStream == null
15029	isClosedOrPending()
15030	shut_wr
15031	isClosedOrPending()
15032	isConnectionReset()
15033	n == 0
15033	isConnectionResetPending()
15034	n == 0
15035	fd != null
15036	stream
15037	fdUseCount == 0
15038	closePending
15039	closePending
15040	fd != null
15041	fd != null
15042	socketInputStream != null
15043	fd != null
15044	fd == null
15045	fdUseCount == -1
15046	fd != null
15047	resetState == CONNECTION_NOT_RESET
15048	fd == null
15048	closePending
4604	parent==null
4605	name.equals("")
4606	name.indexOf('/') != -1
4607	name.equals("")
4608	value==null
4608	key==null
4609	key.length() > MAX_KEY_LENGTH
4610	value.length() > MAX_VALUE_LENGTH
4611	removed
4612	key==null
4613	removed
4614	removed
4615	value != null
4616	value != null
4617	value != null
4618	value.equalsIgnoreCase("true")
4619	value.equalsIgnoreCase("false")
4620	value != null
4621	value != null
4622	value != null
4623	removed
4624	removed
4625	removed
4626	removed
4627	path.equals("")
4628	path.equals("/")
4629	path.charAt(0) != '/'
4630	token.equals("/")
4631	child == null
4632	token.length() > MAX_NAME_LENGTH
4633	child.newNode
4634	path.hasMoreTokens()
4635	path.hasMoreTokens()
4636	path.equals("")
4637	removed
4638	path.equals("/")
4639	path.charAt(0) != '/'
4640	token.equals("/")
4641	child == null
4642	child==null
4643	path.hasMoreTokens()
4644	path.hasMoreTokens()
4645	this==root
4646	removed
4647	kidCache.containsKey(kidNames[i])
4648	pcl==null
4649	removed
4650	removed
4651	prefListeners.length == 0
4651	prefListeners == null
4652	prefListeners[i] != pcl
4652	i == newPl.length
4653	ncl==null
4654	removed
4655	nodeListeners == null
4656	removed
4657	nodeListeners == null
4657	nodeListeners.length == 0
4658	i == nodeListeners.length
4659	i != 0
4660	i != newNl.length
4661	kidNames[i].equals(nodeName)
4662	removed
4663	removed
4664	eventDispatchThread == null
4665	prefListeners.length != 0
4666	nodeListeners.length != 0
4667	nodeListeners.length != 0
964	offer(e)
965	x != null
966	x != null
967	c == null
968	c == this
969	add(e)
2078	t == null
2079	compareAndSetHead(new Node())
2080	compareAndSetTail(t, node)
2081	pred != null
2082	compareAndSetTail(pred, node)
2083	ws < 0
2084	s == null
2084	s.waitStatus > 0
2085	t.waitStatus <= 0
2086	s != null
2087	h != null
2087	h != tail
2088	ws == Node.SIGNAL
2089	compareAndSetWaitStatus(h, Node.SIGNAL, 0)
2090	compareAndSetWaitStatus(h, 0, Node.PROPAGATE)
2090	ws == 0
2091	h == head
2092	h.waitStatus < 0
2092	h == null
2092	propagate > 0
2093	s == null
2093	s.isShared()
2094	node == null
2095	compareAndSetTail(node, pred)
2095	node == tail
2096	pred != head
2096	pred.thread != null
2096	ws <= 0
2096	compareAndSetWaitStatus(pred, ws, Node.SIGNAL)
2096	(ws = pred.waitStatus) == Node.SIGNAL
2097	next.waitStatus <= 0
2097	next != null
2098	ws == Node.SIGNAL
2099	ws > 0
2100	tryAcquire(arg)
2100	p == head
2101	parkAndCheckInterrupt()
2101	shouldParkAfterFailedAcquire(p, node)
2102	failed
2103	tryAcquire(arg)
2103	p == head
2104	shouldParkAfterFailedAcquire(p, node)
2104	parkAndCheckInterrupt()
2105	failed
2106	tryAcquire(arg)
2106	p == head
2107	nanosTimeout <= 0
2108	shouldParkAfterFailedAcquire(p, node)
2108	nanosTimeout > spinForTimeoutThreshold
2109	Thread.interrupted()
2110	failed
2111	p == head
2112	r >= 0
2113	interrupted
2114	shouldParkAfterFailedAcquire(p, node)
2114	parkAndCheckInterrupt()
2115	failed
2116	p == head
2117	r >= 0
2118	parkAndCheckInterrupt()
2118	shouldParkAfterFailedAcquire(p, node)
2119	failed
2120	p == head
2121	r >= 0
2122	nanosTimeout <= 0
2123	nanosTimeout > spinForTimeoutThreshold
2123	shouldParkAfterFailedAcquire(p, node)
2124	Thread.interrupted()
2125	failed
2126	acquireQueued(addWaiter(Node.EXCLUSIVE), arg)
2126	tryAcquire(arg)
2127	Thread.interrupted()
2128	tryAcquire(arg)
2129	Thread.interrupted()
2130	tryRelease(arg)
2131	h != null
2131	h.waitStatus != 0
2132	tryAcquireShared(arg) < 0
2133	Thread.interrupted()
2134	tryAcquireShared(arg) < 0
2135	Thread.interrupted()
2136	tryReleaseShared(arg)
2137	(h = head) != null
2137	(s = h.next) != null
2137	(h = head) != null
2137	(st = s.thread) != null
2137	s.prev == head
2137	s.prev == head
2137	(st = s.thread) != null
2137	(s = h.next) != null
2138	tt != null
2139	thread == null
2140	p.thread == thread
2141	p.thread != null
2142	t != null
2143	p.isShared()
2144	t != null
2145	p.isShared()
2146	t != null
2147	node.prev == null
2147	node.waitStatus == Node.CONDITION
2148	node.next != null
2149	t == node
2150	t == null
2151	compareAndSetWaitStatus(node, Node.CONDITION, 0)
2152	ws > 0
2152	compareAndSetWaitStatus(p, ws, Node.SIGNAL)
2153	compareAndSetWaitStatus(node, Node.CONDITION, 0)
2154	release(savedState)
2155	failed
2156	condition == null
2157	owns(condition)
2158	owns(condition)
2159	owns(condition)
2160	t == null
2161	compareAndSetHead(new Node())
2162	compareAndSetTail(t, node)
2163	pred != null
2164	compareAndSetTail(pred, node)
2165	ws < 0
2166	s.waitStatus > 0
2166	s == null
2167	t.waitStatus <= 0
2168	s != null
2169	h != null
2169	h != tail
2170	ws == Node.SIGNAL
2171	compareAndSetWaitStatus(h, Node.SIGNAL, 0)
2172	ws == 0
2172	compareAndSetWaitStatus(h, 0, Node.PROPAGATE)
2173	h == head
2174	h.waitStatus < 0
2174	propagate > 0
2174	h == null
2175	s.isShared()
2175	s == null
2176	node == null
2177	compareAndSetTail(node, pred)
2177	node == tail
2178	ws <= 0
2178	pred != head
2178	(ws = pred.waitStatus) == Node.SIGNAL
2178	pred.thread != null
2178	compareAndSetWaitStatus(pred, ws, Node.SIGNAL)
2179	next != null
2179	next.waitStatus <= 0
2180	ws == Node.SIGNAL
2181	ws > 0
2182	p == head
2182	tryAcquire(arg)
2183	parkAndCheckInterrupt()
2183	shouldParkAfterFailedAcquire(p, node)
2184	failed
2185	p == head
2185	tryAcquire(arg)
2186	parkAndCheckInterrupt()
2186	shouldParkAfterFailedAcquire(p, node)
2187	failed
2188	tryAcquire(arg)
2188	p == head
2189	nanosTimeout <= 0
2190	nanosTimeout > spinForTimeoutThreshold
2190	shouldParkAfterFailedAcquire(p, node)
2191	Thread.interrupted()
2192	failed
2193	p == head
2194	r >= 0
2195	interrupted
2196	parkAndCheckInterrupt()
2196	shouldParkAfterFailedAcquire(p, node)
2197	failed
2198	p == head
2199	r >= 0
2200	parkAndCheckInterrupt()
2200	shouldParkAfterFailedAcquire(p, node)
2201	failed
2202	p == head
2203	r >= 0
2204	nanosTimeout <= 0
2205	nanosTimeout > spinForTimeoutThreshold
2205	shouldParkAfterFailedAcquire(p, node)
2206	Thread.interrupted()
2207	failed
2208	tryAcquire(arg)
2208	acquireQueued(addWaiter(Node.EXCLUSIVE), arg)
2209	Thread.interrupted()
2210	tryAcquire(arg)
2211	Thread.interrupted()
2212	tryRelease(arg)
2213	h != null
2213	h.waitStatus != 0
2214	tryAcquireShared(arg) < 0
2215	Thread.interrupted()
2216	tryAcquireShared(arg) < 0
2217	Thread.interrupted()
2218	tryReleaseShared(arg)
2219	(h = head) != null
2219	s.prev == head
2219	s.prev == head
2219	(h = head) != null
2219	(s = h.next) != null
2219	(s = h.next) != null
2219	(st = s.thread) != null
2219	(st = s.thread) != null
2220	tt != null
2221	thread == null
2222	p.thread == thread
2223	p.thread != null
2224	t != null
2225	p.isShared()
2226	t != null
2227	p.isShared()
2228	t != null
2229	node.waitStatus == Node.CONDITION
2229	node.prev == null
2230	node.next != null
2231	t == node
2232	t == null
2233	compareAndSetWaitStatus(node, Node.CONDITION, 0)
2234	ws > 0
2234	compareAndSetWaitStatus(p, ws, Node.SIGNAL)
2235	compareAndSetWaitStatus(node, Node.CONDITION, 0)
2236	release(savedState)
2237	failed
2238	condition == null
2239	owns(condition)
2240	owns(condition)
2241	owns(condition)
13305	keyCount < keys.length
13305	keys != null
13306	keys[i] == null
13307	keys == null
13308	keys == null
13309	keys[i].selector() == sel
13309	keys[i] != null
13310	keys[i] == k
13311	keyCount == 0
13312	keys[i].isValid()
13312	keys[i] != null
13313	isOpen()
13314	(ops & ~validOps()) != 0
13315	blocking
13316	k != null
13317	k == null
13318	isOpen()
13319	k != null
13320	isOpen()
13321	blocking == block
13322	block
13322	haveValidKeys()
13337	valid
13328	open
13329	interruptor == null
13330	me.isInterrupted()
1035	o == this
1036	o instanceof Set
1037	c.size() != size()
1038	obj != null
1039	size() > c.size()
1040	c.contains(i.next())
12541	minimumCapacity > 0
12542	minimumCapacity - value.length > 0
12543	newCapacity - minimumCapacity < 0
12544	newCapacity < 0
12545	minimumCapacity < 0
12546	count < value.length
12547	newLength < 0
12548	count < newLength
12549	index >= count
12549	index < 0
12550	index >= count
12550	index < 0
12551	i < 0
12551	i >= count
12552	beginIndex > endIndex
12552	beginIndex < 0
12552	endIndex > count
12553	index < 0
12553	index > count
12554	srcBegin < 0
12555	srcEnd < 0
12555	srcEnd > count
12556	srcBegin > srcEnd
12557	index < 0
12557	index >= count
12558	str == null
12559	sb == null
12560	s == null
12561	s instanceof String
12562	s instanceof StringBuffer
12563	s == null
12564	start < 0
12564	start > end
12564	end > s.length()
12565	len > 0
12566	b
12567	i == Integer.MIN_VALUE
12568	l == Long.MIN_VALUE
12569	start < 0
12570	end > count
12571	start > end
12572	len > 0
12573	Character.isBmpCodePoint(codePoint)
12574	Character.isValidCodePoint(codePoint)
12575	index >= count
12575	index < 0
12576	start < 0
12577	start > count
12578	start > end
12579	end > count
12580	start < 0
12581	end > count
12582	start > end
12583	index < 0
12583	index > length()
12584	offset < 0
12584	offset > str.length - len
12584	len < 0
12585	offset < 0
12585	offset > length()
12586	str == null
12587	offset < 0
12587	offset > length()
12588	s == null
12589	s instanceof String
12590	s == null
12591	dstOffset < 0
12591	dstOffset > this.length()
12592	end < 0
12592	start < 0
12592	start > end
12592	end > s.length()
12593	hasSurrogate
12594	hasSurrogate
12595	Character.isLowSurrogate(c2)
12596	Character.isHighSurrogate(c1)
16997	debugInit
16998	Policy.isSet()
16999	context.length == 0
17000	context.length == 1
17001	context[0] != null
17002	v.contains(context[i])
17002	context[i] != null
17003	v.isEmpty()
17004	sm != null
17005	context != null
17006	isPrivileged
17007	acc != null
17008	sm != null
17009	perm == null
17010	getDebug() != null
17011	dumpDebug
17012	context[i].getCodeSource() != null
17012	context[i].getCodeSource().getLocation() != null
17012	Debug.isOn("codebase=" + context[i].getCodeSource().getLocation().toString())
17013	dumpDebug
17013	Debug.isOn("stack")
17014	dumpDebug
17014	Debug.isOn("domain")
17015	context == null
17016	context == null
17017	context[i].implies(perm)
17017	context[i] != null
17018	dumpDebug
17019	debug != null
17019	Debug.isOn("failure")
17020	dumpDebug
17021	dumpDebug
17022	isPrivileged
17023	acc.combiner != null
17023	acc != null
17024	skipAssigned
17024	skipStack
17025	skipStack
17026	skipAssigned
17026	slen <= 2
17027	context[0] == acc.context[0]
17027	slen == 1
17028	skipAssigned
17029	sd != null
17030	sd == pd[j]
17031	n != pd.length
17032	n == acc.context.length
17032	skipAssigned
17033	n == slen
17033	skipAssigned
17034	getDebug() != null
17035	obj == this
17036	obj instanceof AccessControlContext
17037	context == null
17038	that.context == null
17039	this.containsAllPDs(that)
17039	that.containsAllPDs(this)
17040	this.combiner == null
17041	that.combiner == null
17042	this.combiner.equals(that.combiner)
17043	(thisPd = context[i]) == null
17044	match
17045	context == null
17046	context[i] != null
17147	acc == null
17148	acc == null
17149	combiner == null
17150	acc == null
17151	perm == null
17152	stack == null
17153	debug != null
17154	dumpDebug
17154	Debug.isOn("stack")
17155	dumpDebug
17155	Debug.isOn("domain")
17156	dumpDebug
12043	sm != null
12044	sm != null
12045	flag == true
12045	obj instanceof Constructor
12046	c.getDeclaringClass() == Class.class
12047	caller == clazz
12048	obj != null
12048	(targetClass = obj.getClass()) != clazz
12048	Modifier.isProtected(modifiers)
12049	cache instanceof Class[]
12050	cache2[1] == targetClass
12050	cache2[0] == caller
12051	cache == caller
13016	ob == this
13017	ob instanceof AclEntry
13017	ob == null
13018	this.type != other.type
13019	this.who.equals(other.who)
13020	this.perms.equals(other.perms)
13021	this.flags.equals(other.flags)
13022	hash != 0
13023	flags.isEmpty()
10894	obj instanceof Activatable
10892	groupID == null
10893	obj instanceof ActivationDesc
10891	detail == null
10895	security != null
10896	currGroup != null
10897	canCreate == false
10898	groupClassName == null
10898	groupClassName.equals(defaultGroupClass.getName())
10899	ActivationGroup.class.isAssignableFrom(cl0)
10900	currGroupID == null
10901	security != null
10902	currSystem != null
10903	currSystem == null
10904	monitor != null
10905	currGroup == null
10890	obj instanceof ActivationGroupDesc
10888	this == obj
10889	obj instanceof ActivationGroupID
10884	obj instanceof ActivationID
10885	activator instanceof RemoteObject
10886	Proxy.isProxyClass(activator.getClass())
10887	handler instanceof RemoteObjectInvocationHandler
1868	b == null
1869	off < 0
1869	off > b.length - len
1869	len < 0
1870	rem <= 0
1871	buffer instanceof DirectBuffer
1872	buffer.hasArray()
5152	flatmatrix.length > 5
5153	flatmatrix.length > 5
5154	type == TYPE_UNKNOWN
5155	(M0 = m00) * (M2 = m01) + (M3 = m10) * (M1 = m11) != 0
5156	sgn0 == sgn1
5157	M2 != -M3
5157	M0 != M1
5158	M0 * M1 - M2 * M3 != 1.0
5159	M2 != M3
5159	M0 != -M1
5160	M0 * M1 - M2 * M3 != 1.0
5161	sgn0 != sgn1
5162	M0 != -M1
5163	M0 != -1.0
5163	M0 != 1.0
5164	M0 == M1
5165	sgn0 == sgn1
5166	sgn0
5167	M0 == M1
5168	M0 != M1
5169	M0 != -1.0
5170	M0 == -M1
5171	M0 == -1.0
5171	M0 == 1.0
5172	m10 == 0.0
5172	m01 == 0.0
5173	m11 == 1.0
5173	m00 == 1.0
5174	m12 == 0.0
5174	m02 == 0.0
5175	m12 == 0.0
5175	m02 == 0.0
5176	m11 == 0.0
5176	m00 == 0.0
5177	m02 == 0.0
5177	m12 == 0.0
5178	m12 == 0.0
5178	m02 == 0.0
5179	flatmatrix.length > 5
5180	m02 == 0.0
5180	m12 == 0.0
5181	type != TYPE_UNKNOWN
5182	m02 != 0.0
5182	m12 != 0.0
5183	m02 == 0.0
5183	m12 == 0.0
5184	type != TYPE_UNKNOWN
5185	m02 != 0.0
5185	m12 != 0.0
5186	m12 == 0.0
5186	m02 == 0.0
5187	type != TYPE_UNKNOWN
5188	m12 != 0.0
5188	m02 != 0.0
5189	m02 == 0.0
5189	m12 == 0.0
5190	ty != 0.0
5190	tx != 0.0
5191	m11 == 1.0
5191	m00 == 1.0
5191	(state & (APPLY_SHEAR | APPLY_SCALE)) == APPLY_SCALE
5192	(state & (APPLY_SHEAR)) != 0
5193	m11 == 1.0
5193	m00 == 1.0
5194	m11 == 1.0
5194	(state & (APPLY_SHEAR | APPLY_SCALE)) == APPLY_SCALE
5194	m00 == 1.0
5195	sin == 1.0
5196	sin == -1.0
5197	cos == -1.0
5198	cos != 1.0
5199	vecy == 0.0
5200	vecx < 0.0
5201	vecx == 0.0
5202	vecy > 0.0
5203	m12 == 0.0
5203	m02 == 0.0
5204	m10 == 0
5204	m01 == 0
5205	m00 == 1.0
5205	m11 == 1.0
5206	m00 == 1.0
5206	m11 == 1.0
5207	sy != 1.0
5207	sx != 1.0
5208	m00 != 0.0
5208	m11 != 0.0
5209	m01 != 0.0
5209	m10 != 0.0
5210	m10 != 0.0
5210	m01 != 0.0
5211	ty != 0.0
5211	tx != 0.0
5212	sin == -1.0
5212	sin == 1.0
5213	cos == -1.0
5214	cos == 1.0
5215	m12 != 0.0
5215	m02 != 0.0
5216	vecy == 0
5217	vecx < 0.0
5218	vecx == 0
5219	m12 != 0.0
5219	m02 != 0.0
5220	m12 == 0.0
5220	m02 == 0.0
5221	m12 == 0.0
5221	m02 == 0.0
5222	m02 == 0.0
5222	m12 == 0.0
5223	sx != 1.0
5223	sy != 1.0
5224	shx != 0.0
5224	shy != 0.0
5225	(mystate & APPLY_SHEAR) != 0
5226	(mystate & APPLY_SCALE) != 0
5227	(mystate & APPLY_TRANSLATE) != 0
5228	Math.abs(det) <= Double.MIN_VALUE
5229	Math.abs(det) <= Double.MIN_VALUE
5230	m10 == 0.0
5230	m01 == 0.0
5231	m10 == 0.0
5231	m01 == 0.0
5232	m00 == 0.0
5232	m11 == 0.0
5233	m00 == 0.0
5233	m11 == 0.0
5234	Math.abs(det) <= Double.MIN_VALUE
5235	Math.abs(det) <= Double.MIN_VALUE
5236	M10 == 0.0
5236	M01 == 0.0
5237	M01 == 0.0
5237	M10 == 0.0
5238	M11 == 0.0
5238	M00 == 0.0
5239	M11 == 0.0
5239	M00 == 0.0
5240	ptDst == null
5241	ptSrc instanceof Point2D.Double
5242	dst == null
5243	src instanceof Point2D.Double
5244	dstOff < srcOff + numPts * 2
5244	dstOff > srcOff
5244	dstPts == srcPts
5245	srcOff != dstOff
5245	srcPts != dstPts
5246	dstPts == srcPts
5246	dstOff > srcOff
5246	dstOff < srcOff + numPts * 2
5247	srcPts != dstPts
5247	srcOff != dstOff
5248	ptDst == null
5249	ptSrc instanceof Point2D.Double
5250	Math.abs(det) <= Double.MIN_VALUE
5251	m01 == 0.0
5251	m10 == 0.0
5252	m00 == 0.0
5252	m11 == 0.0
5253	dstOff < srcOff + numPts * 2
5253	dstOff > srcOff
5253	dstPts == srcPts
5254	Math.abs(det) <= Double.MIN_VALUE
5255	Math.abs(det) <= Double.MIN_VALUE
5256	M01 == 0.0
5256	M10 == 0.0
5257	M10 == 0.0
5257	M01 == 0.0
5258	M00 == 0.0
5258	M11 == 0.0
5259	M11 == 0.0
5259	M00 == 0.0
5260	srcPts != dstPts
5260	srcOff != dstOff
5261	ptDst == null
5262	ptSrc instanceof Point2D.Double
5263	dstPts == srcPts
5263	dstOff > srcOff
5263	dstOff < srcOff + numPts * 2
5264	srcOff != dstOff
5264	srcPts != dstPts
5265	pSrc == null
5266	obj instanceof AffineTransform
8326	hints != null
8327	value == null
8328	value == hints.VALUE_RENDER_SPEED
8329	value == hints.VALUE_RENDER_QUALITY
8330	value == hints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR
8331	value == hints.VALUE_INTERPOLATION_BILINEAR
8332	value == hints.VALUE_INTERPOLATION_BICUBIC
8333	src == null
8334	src == dst
8335	dst == null
8336	srcCM.getColorSpace().getType() != dstCM.getColorSpace().getType()
8337	needTrans
8337	type != xform.TYPE_IDENTITY
8337	type != xform.TYPE_TRANSLATION
8338	srcCM.getTransparency() == Transparency.OPAQUE
8338	needTrans
8339	dstCM.getTransparency() == Transparency.OPAQUE
8340	interpolationType != TYPE_NEAREST_NEIGHBOR
8340	dst.getColorModel() instanceof IndexColorModel
8341	ImagingLib.filter(this, src, dst) == null
8342	needToConvert
8343	origDst != dst
8344	src == null
8345	dst == null
8346	src == dst
8347	src.getNumBands() != dst.getNumBands()
8348	ImagingLib.filter(this, src, dst) == null
8349	pts[i] > fmaxX
8350	pts[i] < fminX
8351	pts[i+1] > fmaxY
8352	pts[i+1] < fminY
8353	w <= 0
8354	h <= 0
8355	destCM == null
8356	cm.getTransparency() == Transparency.OPAQUE
8356	cm instanceof IndexColorModel
8356	interpolationType != TYPE_NEAREST_NEIGHBOR
8357	hints == null
8358	Math.abs(xform.getDeterminant()) <= Double.MIN_VALUE
17070	provider.length() == 0
17070	provider == null
17071	provider == null
16874	provider.length() == 0
16874	provider == null
16875	provider == null
16876	this.initialized
16877	this.initialized
16878	this.initialized
16879	this.initialized == false
16880	this.initialized == false
16881	this.initialized == false
16882	this.initialized == false
16595	permission instanceof AllPermission
16596	isReadOnly()
7681	rule > MAX_RULE
7681	rule < MIN_RULE
7682	alpha >= 0.0f
7682	alpha <= 1.0f
7683	alpha == 1.0f
7684	obj instanceof AlphaComposite
7685	rule != ac.rule
7686	extraAlpha != ac.extraAlpha
12686	GraphicsEnvironment.isHeadless()
12687	GraphicsEnvironment.isHeadless()
12688	this.stub != null
12689	s != null
12690	stub != null
12691	d.height != height
12691	d.width != width
12692	stub != null
12693	locale == null
12694	clip != null
12695	clip != null
12696	accessibleContext == null
11128	hooks == null
11129	hook.isAlive()
11130	hooks.containsKey(hook)
11131	hooks == null
11132	hook == null
5304	diff > Math.PI
5305	diff < -Math.PI
5306	ang1 < ang2
5307	diff < 0
5308	ang2 <= 0.0
5309	type < OPEN
5309	type > PIE
5310	isEmpty()
5311	getArcType() == PIE
5312	i < 4
5313	containsAngle(angle)
5314	i == 4
5315	angle > 180.0
5316	angle <= (180.0 + 360.0)
5317	angle == -180.0
5318	angle <= -180.0
5319	angle > (-180.0 - 360.0)
5320	angle == -180.0
5321	backwards
5322	angExt >= 360.0
5323	backwards
5324	angle < 0.0
5325	ellw <= 0.0
5326	ellh <= 0.0
5327	distSq >= 0.25
5328	angExt >= 360.0
5329	type == PIE
5330	inarc
5331	angExt >= 180.0
5332	angExt <= 180.0
5333	w <= 0
5333	aw <= 0
5333	ah <= 0
5333	h <= 0
5334	ext == 0
5335	x >= axw
5335	y >= ayh
5335	yh <= ay
5335	xw <= ax
5336	ayc >= y
5336	ayc <= yh
5337	axc < xw
5337	sx < xw
5337	containsAngle(180)
5337	ex > x
5337	ex < xw
5337	ax < xw
5337	axw > x
5337	containsAngle(0)
5337	axc > x
5337	sx > x
5338	axc >= x
5338	axc <= xw
5339	ey < yh
5339	ayc > y
5339	containsAngle(270)
5339	sy < yh
5339	sy > y
5339	ayc < yh
5339	ay < yh
5339	ayh > y
5339	containsAngle(90)
5339	ey > y
5340	Math.abs(ext) > 180
5340	type == PIE
5341	rect.intersectsLine(axc, ayc, ex, ey)
5341	rect.intersectsLine(axc, ayc, sx, sy)
5342	rect.intersectsLine(sx, sy, ex, ey)
5343	contains(x, y)
5343	contains(x + w, y + h)
5343	contains(x + w, y)
5343	contains(x, y + h)
5344	contains(x, y + h)
5344	contains(x, y)
5344	contains(x + w, y)
5344	contains(x + w, y + h)
5345	type != PIE
5345	Math.abs(getAngleExtent()) <= 180.0
5346	origrect == null
5347	origrect.intersectsLine(xc, yc, xe, ye)
5348	obj == this
5349	obj instanceof Arc2D
5134	ext <= -360
5134	ext >= 360.0
5135	ext < 0
5136	cv == 0
5137	w < 0
5137	h < 0
5138	isDone()
5139	index == 0
5140	affine != null
5141	index > arcSegs
5142	index == arcSegs + lineSegs
5143	affine != null
5144	affine != null
5145	isDone()
5146	index == 0
5147	affine != null
5148	index > arcSegs
5149	index == arcSegs + lineSegs
5150	affine != null
5151	affine != null
5350	s instanceof Area
5351	windingRule == PathIterator.WIND_EVEN_ODD
5352	((Curve) enum_.nextElement()).getOrder() > 1
5353	size == 0
5354	size > 3
5355	c2.getOrder() != 1
5355	c1.getOrder() != 1
5356	c1.getXTop() != c1.getXBot()
5356	c2.getXTop() != c2.getXBot()
5357	c1.getYTop() != c2.getYTop()
5357	c1.getYBot() != c2.getYBot()
5358	curves.size() < 3
5359	((Curve) enum_.nextElement()).getOrder() == 0
5360	cachedBounds != null
5361	curves.size() > 0
5362	other == this
5363	other == null
5364	t == null
5365	getCachedBounds().contains(x, y)
5366	h < 0
5366	w < 0
5367	getCachedBounds().contains(x, y, w, h)
5368	h < 0
5368	w < 0
5369	getCachedBounds().intersects(x, y, w, h)
5370	curves.size() >= 1
5371	prevcurve != null
5372	index < curves.size()
5373	prevcurve.getY1() == thiscurve.getY0()
5373	thiscurve.getOrder() != 0
5373	prevcurve.getX1() == thiscurve.getX0()
5374	prevcurve != null
5375	thiscurve == null
5375	thiscurve.getOrder() == 0
5376	thiscurve == null
5377	numpoints == 0
5378	transform != null
8953	outpixbuf == null
8953	outpixbuf instanceof int[]
8954	a <= 0
8955	a >= 255
8956	r < 0
8957	r > 255
8958	g < 0
8959	g > 255
8960	b < 0
8961	b > 255
8962	reds == null
8963	sy == 0
8964	dyrem == 0
8965	syrem < dyrem
8966	sxrem == 0
8967	pixels instanceof byte[]
8968	a != 255.0f
8969	sxrem < dxrem
8970	(sxrem -= amtx) == 0
8971	(dxrem -= amtx) == 0
8972	(dyrem -= amty) == 0
8973	syrem == 0
8974	passthrough
8975	passthrough
3131	v == null
3132	i == takeIndex
3133	nexti != putIndex
3134	capacity <= 0
3135	count == items.length
3136	nanos <= 0
3137	nanos <= 0
3138	o == null
3139	o.equals(items[i])
3140	o == null
3141	o.equals(items[i])
3142	len < count
3143	len > count
3144	k == 0
3145	--k == 0
3146	c == this
3147	n > 0
3148	c == this
3149	maxElements <= 0
3150	n > 0
1415	numElements >= initialCapacity
1416	initialCapacity < 0
1417	newCapacity < 0
1418	head < tail
1419	head > tail
1420	e == null
1421	head == tail
1422	e == null
1423	(tail = (tail + 1) & (elements.length - 1)) == head
1424	x == null
1425	x == null
1426	result == null
1427	result == null
1428	x == null
1429	x == null
1430	o == null
1431	o.equals(x)
1432	o == null
1433	o.equals(x)
1434	front >= ((t - h) & mask)
1435	front < back
1436	h <= i
1437	i < t
1438	o == null
1439	o.equals(x)
1440	h != t
1441	a.length < size
1442	a.length > size
4188	initialCapacity < 0
4189	elementData.getClass() != Object[].class
4190	size < elementData.length
4191	minCapacity > minExpand
4192	elementData == EMPTY_ELEMENTDATA
4193	minCapacity - elementData.length > 0
4194	newCapacity - minCapacity < 0
4195	newCapacity - MAX_ARRAY_SIZE > 0
4196	minCapacity < 0
4197	o == null
4198	elementData[i]==null
4199	o.equals(elementData[i])
4200	o == null
4201	elementData[i]==null
4202	o.equals(elementData[i])
4203	a.length < size
4204	a.length > size
4205	numMoved > 0
4206	o == null
4207	elementData[index] == null
4208	o.equals(elementData[index])
4209	numMoved > 0
4210	numMoved > 0
4211	index >= size
4212	index < 0
4212	index > size
4213	c.contains(elementData[r]) == complement
4214	r != size
4215	w != size
4216	modCount != expectedModCount
4217	size > 0
4218	index > size
4218	index < 0
4219	fromIndex < 0
4220	toIndex > size
4221	fromIndex > toIndex
3921	LegacyMergeSort.userRequested
3922	LegacyMergeSort.userRequested
3923	length < INSERTIONSORT_THRESHOLD
3924	((Comparable)src[mid-1]).compareTo(src[mid]) <= 0
3925	((Comparable)src[p]).compareTo(src[q])<=0
3925	p < mid
3925	q >= high
3926	LegacyMergeSort.userRequested
3927	c==null
3928	LegacyMergeSort.userRequested
3929	c==null
3930	length < INSERTIONSORT_THRESHOLD
3931	c.compare(src[mid-1], src[mid]) <= 0
3932	p < mid
3932	q >= high
3932	c.compare(src[p], src[q]) <= 0
3933	fromIndex > toIndex
3934	fromIndex < 0
3935	toIndex > length
3936	midVal < key
3937	midVal > key
3938	midVal < key
3939	midVal > key
3940	midVal < key
3941	midVal > key
3942	midVal < key
3943	midVal > key
3944	midVal < key
3945	midVal > key
3946	midVal < key
3947	midVal > key
3948	midBits == keyBits
3949	midBits < keyBits
3950	midVal < key
3951	midVal > key
3952	midBits == keyBits
3953	midBits < keyBits
3954	cmp < 0
3955	cmp > 0
3956	c == null
3957	cmp < 0
3958	cmp > 0
3959	a==a2
3960	a==null
3960	a2==null
3961	a2.length != length
3962	a[i] != a2[i]
3963	a==a2
3964	a==null
3964	a2==null
3965	a2.length != length
3966	a[i] != a2[i]
3967	a==a2
3968	a2==null
3968	a==null
3969	a2.length != length
3970	a[i] != a2[i]
3971	a==a2
3972	a2==null
3972	a==null
3973	a2.length != length
3974	a[i] != a2[i]
3975	a==a2
3976	a2==null
3976	a==null
3977	a2.length != length
3978	a[i] != a2[i]
3979	a==a2
3980	a2==null
3980	a==null
3981	a2.length != length
3982	a[i] != a2[i]
3983	a==a2
3984	a==null
3984	a2==null
3985	a2.length != length
3986	Double.doubleToLongBits(a[i])!=Double.doubleToLongBits(a2[i])
3987	a==a2
3988	a2==null
3988	a==null
3989	a2.length != length
3990	Float.floatToIntBits(a[i])!=Float.floatToIntBits(a2[i])
3991	a==a2
3992	a2==null
3992	a==null
3993	a2.length != length
3994	o1==null ? o2==null : o1.equals(o2)
3995	newLength < 0
3996	newLength < 0
3997	newLength < 0
3998	newLength < 0
3999	newLength < 0
4000	newLength < 0
4001	newLength < 0
4002	newLength < 0
4003	newLength < 0
4004	a == null
4005	a == null
4006	a == null
4007	a == null
4008	a == null
4009	a == null
4010	a == null
4011	a == null
4012	a == null
4013	a == null
4014	element instanceof Object[]
4015	element instanceof byte[]
4016	element instanceof short[]
4017	element instanceof int[]
4018	element instanceof long[]
4019	element instanceof char[]
4020	element instanceof float[]
4021	element instanceof double[]
4022	element instanceof boolean[]
4023	element != null
4024	a1 == a2
4025	a1 == null
4025	a2==null
4026	a2.length != length
4027	e1 == e2
4028	e1 == null
4029	eq
4030	e1 instanceof Object[]
4030	e2 instanceof Object[]
4031	e2 instanceof byte[]
4031	e1 instanceof byte[]
4032	e2 instanceof short[]
4032	e1 instanceof short[]
4033	e1 instanceof int[]
4033	e2 instanceof int[]
4034	e1 instanceof long[]
4034	e2 instanceof long[]
4035	e1 instanceof char[]
4035	e2 instanceof char[]
4036	e1 instanceof float[]
4036	e2 instanceof float[]
4037	e2 instanceof double[]
4037	e1 instanceof double[]
4038	e1 instanceof boolean[]
4038	e2 instanceof boolean[]
4039	a == null
4040	iMax == -1
4041	i == iMax
4042	a == null
4043	iMax == -1
4044	i == iMax
4045	a == null
4046	iMax == -1
4047	i == iMax
4048	a == null
4049	iMax == -1
4050	i == iMax
4051	a == null
4052	iMax == -1
4053	i == iMax
4054	a == null
4055	iMax == -1
4056	i == iMax
4057	a == null
4058	iMax == -1
4059	i == iMax
4060	a == null
4061	iMax == -1
4062	i == iMax
4063	a == null
4064	iMax == -1
4065	i == iMax
4066	a == null
4067	a.length != 0
4067	bufLen <= 0
4068	a == null
4069	iMax == -1
4070	element == null
4071	eClass.isArray()
4072	eClass == byte[].class
4073	eClass == short[].class
4074	eClass == int[].class
4075	eClass == long[].class
4076	eClass == char[].class
4077	eClass == float[].class
4078	eClass == double[].class
4079	eClass == boolean[].class
4080	dejaVu.contains(element)
4081	i == iMax
12685	detailMessage instanceof Throwable
13331	sm != null
2943	compareAndSet(current, newValue)
2928	compareAndSet(current, newValue)
2929	compareAndSet(current, next)
2930	compareAndSet(current, next)
2931	compareAndSet(current, next)
2932	compareAndSet(current, next)
2933	compareAndSet(current, next)
2934	compareAndSet(current, next)
2900	i >= array.length
2900	i < 0
2901	compareAndSetRaw(offset, current, newValue)
2902	compareAndSetRaw(offset, current, current + delta)
2903	compareAndSetRaw(offset, current, next)
2904	iMax == -1
2905	i == iMax
2936	compareAndSet(obj, current, newValue)
2937	compareAndSet(obj, current, next)
2938	compareAndSet(obj, current, next)
2939	compareAndSet(obj, current, next)
2940	compareAndSet(obj, current, next)
2941	compareAndSet(obj, current, next)
2942	compareAndSet(obj, current, next)
2893	compareAndSet(current, newValue)
2894	compareAndSet(current, next)
2895	compareAndSet(current, next)
2896	compareAndSet(current, next)
2897	compareAndSet(current, next)
2898	compareAndSet(current, next)
2899	compareAndSet(current, next)
2922	i < 0
2922	i >= array.length
2923	compareAndSetRaw(offset, current, newValue)
2924	compareAndSetRaw(offset, current, current + delta)
2925	compareAndSetRaw(offset, current, next)
2926	iMax == -1
2927	i == iMax
2914	AtomicLong.VM_SUPPORTS_LONG_CAS
2915	compareAndSet(obj, current, newValue)
2916	compareAndSet(obj, current, next)
2917	compareAndSet(obj, current, next)
2918	compareAndSet(obj, current, next)
2919	compareAndSet(obj, current, next)
2920	compareAndSet(obj, current, next)
2921	compareAndSet(obj, current, next)
2944	newMark != current.mark
2944	newReference != current.reference
2935	compareAndSet(x, newValue)
2908	i < 0
2908	i >= array.length
2909	compareAndSetRaw(offset, current, newValue)
2910	iMax == -1
2911	i == iMax
2912	a.getClass().isArray()
2912	a == null
2913	a.getClass() != Object[].class
2906	compareAndSet(obj, current, newValue)
2907	newReference != current.reference
2907	newStamp != current.stamp
9992	log.isLoggable(PlatformLogger.FINEST)
9993	log.isLoggable(PlatformLogger.FINER)
9994	names == null
9994	value < 0
9994	value >= names.length
16367	iterators == null
16368	iterators.length == 0
16369	text.length() > 0
16370	mapsDiffer(last, attrs)
16371	text == null
16372	attributes == null
16372	text == null
16373	text.length() == 0
16374	attributes.isEmpty()
16375	attributeCount > 0
16376	text == null
16377	endIndex > textEndIndex
16377	beginIndex > endIndex
16377	beginIndex < textBeginIndex
16378	beginIndex == endIndex
16379	attributes == null
16380	keys.isEmpty()
16381	value != null
16382	value instanceof Annotation
16383	limit <= endIndex
16383	start >= beginIndex
16384	limit > endIndex
16385	start >= endIndex
16386	limit > beginIndex
16387	start < beginIndex
16388	limit > endIndex
16389	start != limit
16390	attribute == null
16391	len == 0
16392	attribute == null
16393	beginIndex >= endIndex
16393	beginIndex < 0
16393	endIndex > length()
16394	attributes == null
16395	beginIndex < 0
16395	endIndex > length()
16395	beginIndex > endIndex
16396	beginIndex == endIndex
16397	attributes.isEmpty()
16398	runCount == 0
16399	runCount == 0
16400	offset == length()
16401	runStarts[runIndex] == offset
16401	runIndex < runCount
16402	runCount == runArraySize
16403	copyAttrs
16404	oldRunAttributes != null
16405	oldRunAttributeValues != null
16406	runAttributes[i] == null
16407	keyValueIndex == -1
16408	currentRunAttributes == null
16409	attributeIndex != -1
16410	value instanceof Annotation
16411	beginIndex > 0
16412	runStart < beginIndex
16413	endIndex < textLength
16414	runLimit > endIndex
16415	valuesMatch(getAttribute(key, runIndex1), getAttribute(key, runIndex2))
16416	value1 == null
16417	runCount == 0
16418	attrs != null
16418	(size = attrs.size()) > 0
16419	last == null
16420	o instanceof AttributeEntry
3466	Attributes.class.isInstance(attr)
3467	value != null
3468	version == null
3469	version != null
3470	name.equalsIgnoreCase(vername)
3470	version != null
3471	value != null
3472	lbuf[--len] != '\n'
3473	len > 0
3473	lbuf[len-1] == '\r'
3474	len == 0
3475	lbuf[0] == ' '
3476	name == null
3477	is.peek() == ' '
3478	i >= len
3479	lbuf[i++] != ' '
3480	is.peek() == ' '
3481	putValue(name, value) != null
3481	lineContinued
14625	sm != null
14626	sm != null
14627	a == null
14628	sm != null
14629	a == null
14630	sm != null
14631	a == null
8382	ncols > matrix[i].length
8383	ncols != (nBands+1)
8383	ncols != nBands
8384	dst == null
8385	nrows != dst.getNumBands()
8386	ImagingLib.filter(this, src, dst) != null
8387	ncols == nBands
8388	ncols != (nBands+1)
8388	ncols != nBands
8389	src.getNumBands() == nrows
8390	dstPt == null
9006	numBanks == 1
9007	bands.length > bankIndices.length
9008	y < 0
9008	x >= width
9008	y >= height
9008	x < 0
9009	obj == null
9010	obj == null
9011	obj == null
9012	obj == null
9013	obj == null
9014	x < 0
9014	y >= height
9014	x >= width
9014	y < 0
9015	iArray != null
9016	y < 0
9016	x >= width
9016	y1 > height
9016	y1 < 0
9016	x < 0
9016	x1 < 0
9016	x1 > width
9016	y >= height
9016	w > width
9016	h > height
9017	iArray != null
9018	y < 0
9018	x < 0
9018	y >= height
9018	x >= width
9019	x < 0
9019	y < 0
9019	y >= height
9019	x >= width
9020	y < 0
9020	y >= height
9020	x < 0
9020	x >= width
9021	x < 0
9021	x + w > width
9021	y < 0
9021	y + h > height
9022	iArray != null
9023	x >= width
9023	y < 0
9023	x < 0
9023	y >= height
9024	y < 0
9024	x < 0
9024	y >= height
9024	x >= width
9025	x1 < 0
9025	w > width
9025	y >= height
9025	x >= width
9025	x1 > width
9025	x < 0
9025	y < 0
9025	h > height
9025	y1 < 0
9025	y1 > height
9026	y >= height
9026	x < 0
9026	x >= width
9026	y < 0
9027	x < 0
9027	x >= width
9027	y < 0
9027	y >= height
9028	x >= width
9028	y >= height
9028	x < 0
9028	y < 0
9029	y < 0
9029	x + w > width
9029	x < 0
9029	y + h > height
4586	numBytesInPartialGroup != 0
4587	numBytesInPartialGroup == 1
4588	4*numGroups != sLen
4589	sLen != 0
4590	s.charAt(sLen-1) == '='
4591	s.charAt(sLen-2) == '='
4592	missingBytesInLastGroup != 0
4593	missingBytesInLastGroup == 1
4594	result < 0
4595	java.util.Arrays.equals(arr, b)
4596	java.util.Arrays.equals(arr, b)
16628	name == null
16629	len == 0
16630	last == '*'
16630	name.charAt(len - 2) == '.'
16630	len == 1
16631	len == 1
16632	name.equals("exitVM")
16633	p == null
16633	p.getClass() != getClass()
16634	this.wildcard
16635	that.wildcard
16636	that.wildcard
16637	obj == this
16638	obj.getClass() != getClass()
16638	obj == null
16639	permission instanceof BasicPermission
16640	isReadOnly()
16641	permClass == null
16642	bp.getClass() != permClass
16643	all_allowed
16644	bp.getCanonicalName().equals("*")
16645	permission instanceof BasicPermission
16646	bp.getClass() != permClass
16647	all_allowed
16648	x != null
16649	x != null
16650	permClass == null
16651	e.hasMoreElements()
7303	width < 0.0f
7304	cap != CAP_ROUND
7304	cap != CAP_SQUARE
7304	cap != CAP_BUTT
7305	join == JOIN_MITER
7306	miterlimit < 1.0f
7307	join != JOIN_BEVEL
7307	join != JOIN_ROUND
7308	dash != null
7309	dash_phase < 0.0f
7310	d > 0.0
7311	d < 0.0
7312	allzero
7313	dash != null
7314	dash == null
7315	dash != null
7316	obj instanceof BasicStroke
7317	width != bs.width
7318	join != bs.join
7319	cap != bs.cap
7320	miterlimit != bs.miterlimit
7321	dash != null
7322	dash_phase != bs.dash_phase
7323	java.util.Arrays.equals(dash, bs.dash)
7324	bs.dash != null
10265	bc == beanContext
10266	rejectedSetBCOnce
10267	validatePendingSetBeanContext(bc)
10267	rejectedSetBCOnce = !validatePendingSetBeanContext(bc)
10268	beanContext != null
10269	beanContext != null
10270	equals(beanContextChildPeer)
10270	beanContextChildPeer instanceof Serializable
10271	changes == null
10272	changes == null
10226	bcsl == null
10227	bcsListeners.contains(bcsl)
10228	bcsl == null
10229	bcsListeners.contains(bcsl)
10230	serviceClass == null
10231	bcsp == null
10232	services.containsKey(serviceClass)
10233	bcsp instanceof Serializable
10234	fireEvent
10235	c instanceof BeanContextServices
10236	serviceClass == null
10237	bcsp == null
10238	services.containsKey(serviceClass)
10239	bcsssp.getServiceProvider().equals(bcsp)
10240	bcsp instanceof Serializable
10241	serviceClass == null
10242	services.containsKey(serviceClass)
10243	child == null
10244	serviceClass == null
10245	requestor == null
10246	bcsrl == null
10247	bcsc == null
10248	bcsssp != null
10249	service != null
10250	proxy != null
10251	service != null
10252	child == null
10253	requestor == null
10254	service == null
10255	bcsc != null
10256	services.containsKey(bcssae.getServiceClass())
10257	c instanceof BeanContextServices
10258	services.containsKey(bcssre.getServiceClass())
10259	c instanceof BeanContextServices
10260	children.isEmpty()
10261	nbc == null
10262	serializable <= 0
10263	bcsp.getServiceProvider() instanceof Serializable
10264	count != serializable
10273	targetChild == null
10274	children.containsKey(targetChild)
10275	children.containsKey(targetChild)
10276	validatePendingAdd(targetChild)
10277	targetChild instanceof BeanContextProxy
10278	bccp == null
10279	bccp != null
10280	cbcc != null
10281	bccp != null
10282	v != null
10283	okToUseGui
10284	getChildSerializable(targetChild) != null
10285	bccp != null
10286	v != null
10287	okToUseGui
10288	getChildSerializable(bccp) != null
10289	targetChild == null
10290	containsKey(targetChild)
10291	validatePendingRemove(targetChild)
10292	callChildSetBC
10293	cbcc != null
10294	bcsc.isProxyPeer()
10295	getChildSerializable(targetChild) != null
10296	peer != null
10297	getChildSerializable(peer) != null
10298	contains(i.next())
10299	bcml == null
10300	bcmListeners.contains(bcml)
10301	bcml == null
10302	bcmListeners.contains(bcml)
10303	name == null
10304	bcc == null
10305	containsKey(bcc)
10306	name == null
10307	bcc == null
10308	containsKey(bcc)
10309	designTime != dTime
10310	locale.equals(newLocale)
10310	locale != null
10310	newLocale != null
10311	bc != this
10312	bc instanceof Visibility
10313	bc instanceof Component
10313	bc instanceof Container
10314	c instanceof Container
10314	c instanceof Component
10315	okToUseGui
10316	v != null
10317	okToUseGui
10318	v != null
10319	objects[i] instanceof Serializable
10320	o != null
10321	serializable <= 0
10322	entry.getKey() instanceof Serializable
10323	count != serializable
10324	serializable > 0
10324	this.equals(getBeanContextPeer())
10325	bcc != null
10326	this.equals(getBeanContextPeer())
10326	serializable > 0
10327	containsKey(source)
10327	"beanContext".equals(propertyName)
10327	getBeanContextPeer().equals(pce.getNewValue())
10328	validatePendingRemove(source)
10329	containsKey(source)
10329	"beanContext".equals(propertyName)
10329	((BCSChild)children.get(source)).isRemovePending()
10330	bc.equals(pce.getNewValue())
10330	bc.equals(pce.getOldValue())
10331	child instanceof BeanContextChild
10331	child instanceof BeanContextProxy
10602	cls == null
10603	cls == null
10604	ins != null
10605	cls == null
10606	result == null
10607	serex != null
10608	Modifier.isPublic(cl.getModifiers())
10609	result != null
10610	result instanceof Applet
10611	needDummies
10612	serialized
10613	cls == null
10614	objectUrl != null
10615	s.endsWith(resourceName)
10616	ix >= 0
10617	beanContext != null
10618	serialized
10619	needDummies
10620	beanContext != null
10621	sm != null
10622	sm != null
10623	loader == null
10624	o != null
10625	o == null
10626	o instanceof Image
15646	paragraph == null
15647	paragraph == null
15648	text == null
15649	paragraphLength < 0
15650	textStart < 0
15650	paragraphLength > text.length - textStart
15651	paragraphLength > embeddings.length - embStart
15651	embeddings != null
15651	embStart < 0
17784	offset < 0
17784	offset+len > in.length
17785	in[offset] == '-'
17786	in[offset] == '+'
17787	c <= '9'
17787	Character.isDigit(c)
17787	c >= '0'
17788	isCompact
17789	digit == 0
17790	prec == 0
17791	rs != 0
17792	prec != 1
17792	rs != 0
17793	c == '0'
17793	Character.digit(c, 10) == 0
17794	prec == 0
17795	idx != 0
17796	prec != 1
17796	idx != 0
17797	dot
17798	c == '.'
17799	dot
17800	c != 'E'
17800	c != 'e'
17801	negexp
17801	c == '+'
17802	len <= 0
17803	len > 10
17804	c <= '9'
17804	c >= '0'
17805	v < 0
17806	len == 1
17807	negexp
17808	(int)exp != exp
17809	prec == 0
17810	exp != 0
17811	adjustedScale > Integer.MAX_VALUE
17811	adjustedScale < Integer.MIN_VALUE
17812	isCompact
17813	isneg
17814	mc.precision > 0
17815	mc.precision > 0
17816	Double.isInfinite(val)
17816	Double.isNaN(val)
17817	significand == 0
17818	exponent < 0
17819	exponent > 0
17820	mc.precision > 0
17821	mc.precision > 0
17822	mc.precision > 0
17823	mc.precision > 0
17824	mc.precision > 0
17825	scale == 0
17826	unscaledVal == 0
17827	scale > 0
17827	scale < ZERO_SCALED_BY.length
17828	val < zeroThroughTen.length
17828	val >= 0
17829	val != INFLATED
17830	sdiff != 0
17831	sdiff < 0
17832	xs == INFLATED
17832	(xs = longMultiplyPowerTen(xs, raise)) == INFLATED
17833	(ys = longMultiplyPowerTen(ys, raise)) == INFLATED
17833	ys == INFLATED
17834	xs != INFLATED
17834	ys != INFLATED
17835	(((sum ^ xs) & (sum ^ ys))) >= 0L
17836	fst == null
17837	snd == null
17838	mc.precision == 0
17839	augendIsZero
17839	lhsIsZero
17840	lhsIsZero
17840	augendIsZero
17841	result.scale() == preferredScale
17842	result.scale() > preferredScale
17843	precisionDiff >= scaleDiff
17844	padding != 0
17845	padding < 0
17846	smallHighDigitPos > big.scale + 2
17846	smallHighDigitPos > estResultUlpScale + 2
17847	mc.precision == 0
17848	x != INFLATED
17848	y != INFLATED
17849	y == 0
17849	prec < 21
17849	product / y == x
17849	prec < 19
17850	y == INFLATED
17850	x == INFLATED
17851	x != INFLATED
17852	mc.precision == 0
17853	roundingMode < ROUND_UP
17853	roundingMode > ROUND_UNNECESSARY
17854	checkScale((long)scale + divisor.scale) > this.scale
17855	isLongDivision
17856	scale == preferredScale
17856	roundingMode == ROUND_DOWN
17857	bdividend == null
17858	ldivisor != INFLATED
17859	isRemainderZero
17860	roundingMode == ROUND_UNNECESSARY
17861	roundingMode == ROUND_UP
17862	roundingMode == ROUND_DOWN
17863	roundingMode == ROUND_CEILING
17864	roundingMode == ROUND_FLOOR
17865	ldivisor != INFLATED
17865	isLongDivision
17866	r <= HALF_LONG_MIN_VALUE
17866	r > HALF_LONG_MAX_VALUE
17867	cmpFracHalf < 0
17868	cmpFracHalf > 0
17869	roundingMode == ROUND_HALF_UP
17870	roundingMode == ROUND_HALF_DOWN
17871	isLongDivision
17872	increment
17873	preferredScale != scale
17873	isRemainderZero
17874	divisor.signum() == 0
17875	this.signum() == 0
17876	this.signum() == 0
17877	preferredScale > quotientScale
17878	mcp == 0
17879	divisor.signum() == 0
17880	dividend.signum() == 0
17881	dividend.signum() == 0
17882	dividend.compareMagnitude(divisor) > 0
17883	checkScale((long)mcp + yscale) > xscale
17884	this.compareMagnitude(divisor) < 0
17885	divisor.signum() != 0
17885	this.signum() == 0
17886	quotient.scale > 0
17887	quotient.scale < preferredScale
17888	this.compareMagnitude(divisor) < 0
17888	mc.precision == 0
17889	result.scale() < 0
17890	this.subtract(product).compareMagnitude(divisor) >= 0
17891	result.scale() > 0
17892	(precisionDiff = mc.precision - result.precision()) > 0
17892	preferredScale > result.scale()
17893	mc.precision == 0
17894	n > 999999999
17894	n < 0
17895	mc.precision == 0
17896	n > 999999999
17896	n < -999999999
17897	n == 0
17898	mc.precision > 0
17899	elength > mc.precision
17900	mag < 0
17901	i == 31
17902	seenbit
17903	n<0
17904	intCompact != INFLATED
17905	mc.precision == 0
17906	result == 0
17907	s != INFLATED
17908	roundingMode > ROUND_UNNECESSARY
17908	roundingMode < ROUND_UP
17909	newScale == oldScale
17910	this.signum() == 0
17911	newScale > oldScale
17912	(rs = longMultiplyPowerTen(rs, raise)) == INFLATED
17912	rs == INFLATED
17913	drop < LONG_TEN_POWERS_TABLE.length
17914	scale == val.scale
17915	xs != INFLATED
17915	ys != INFLATED
17916	xsign != ysign
17917	xsign == 0
17918	xs == 0
17919	ys == 0
17920	sdiff != 0
17921	xae < yae
17922	xae > yae
17923	sdiff < 0
17924	ys == INFLATED
17924	(xs = longMultiplyPowerTen(xs, -sdiff)) == INFLATED
17924	xs == INFLATED
17925	xs == INFLATED
17925	ys == INFLATED
17925	(ys = longMultiplyPowerTen(ys, sdiff)) == INFLATED
17926	xs != INFLATED
17927	ys != INFLATED
17928	x instanceof BigDecimal
17929	x == this
17930	scale != xDec.scale
17931	s != INFLATED
17932	xs == INFLATED
17933	xs != INFLATED
17934	intCompact != INFLATED
17935	sc == null
17936	bd.scale < 0
17937	bd.scale == 0
17938	insertionPoint == 0
17939	insertionPoint > 0
17940	signum < 0
17941	intCompact != INFLATED
17941	scale == 0
17942	(precision() - scale) > 19
17943	this.signum() == 0
17944	(this.precision() - this.scale) <= 0
17945	num.precision() >= 19
17946	(int)num != num
17947	(short)num != num
17948	(byte)num != num
17949	scale == 0
17949	intCompact != INFLATED
17950	intCompact != INFLATED
17950	scale == 0
17951	scale == 0
17952	intCompact != INFLATED
17953	signum() < 0
17954	scale >= 0
17954	adjusted >= -6
17955	pad >= 0
17956	sci
17957	coeffLen > 1
17958	sig < 0
17959	signum() == 0
17960	sig >= coeffLen
17961	adjusted != 0
17962	adjusted > 0
17963	n < 0
17964	n < BIG_TEN_POWERS_TABLE_MAX
17965	n < pows.length
17966	curLen <= n
17967	n <= 0
17967	val == 0
17968	n < bounds.length
17968	n < tab.length
17969	val == 1
17970	Math.abs(val) <= bounds[n]
17971	n <= 0
17972	intCompact != INFLATED
17973	intVal == null
17974	val[0].scale == val[1].scale
17975	val[0].scale < val[1].scale
17976	val[1].scale < val[0].scale
17977	intVal == null
17978	x < 0
17979	x < 10
17980	y == 0
17981	y >>> 16 == 0
17982	y >>> 24 == 0
17983	y >>> 28 == 0
17984	y >>> 30 == 0
17985	b.signum == 0
17986	intVal.testBit(0)
17987	qr[1].signum() != 0
17988	precision > 0
17989	intVal != null
17990	asInt != val
17991	intCompact != 0
17991	(b = intVal) == null
17991	b.signum() != 0
17992	rounded == this
17993	drop < LONG_TEN_POWERS_TABLE.length
17994	len == 0
17995	len == 2
17995	d < 0
17995	len > 2
17996	x < 0
17997	y < 0
17998	intCompact == INFLATED
17999	intVal == null
18000	precision > 0
18000	precision != bigDigitLength(intVal)
18001	intVal != null
18002	val != intCompact
18003	precision != longDigitLength(intCompact)
18003	precision > 0
17480	val.length == 0
17481	val[0] < 0
17482	val.length == 0
17483	val[0] < 0
17484	signum > 1
17484	signum < -1
17485	this.mag.length==0
17486	signum == 0
17487	signum > 1
17487	signum < -1
17488	this.mag.length==0
17489	signum == 0
17490	radix < Character.MIN_RADIX
17490	radix > Character.MAX_RADIX
17491	len == 0
17492	(index1 + index2) <= -1
17493	index1 == 0
17493	index2 == 0
17494	len == 1
17495	index1 == 0
17496	cursor == len
17497	firstGroupLen == 0
17498	magnitude[numWords - 1] < 0
17499	groupVal < 0
17500	val[0] == '-'
17501	len == 1
17502	val[0] == '+'
17503	len == 1
17504	cursor == len
17505	len < 10
17506	firstGroupLen == 0
17507	result == -1
17508	nextVal == -1
17509	numBits < 0
17510	numBytes > 0
17511	bitLength < 2
17512	bitLength < 2
17513	bitLength > 2
17514	bitLength > 6
17515	r%23==0
17515	r%29==0
17515	r%41==0
17515	r%37==0
17515	r%11==0
17515	r%13==0
17515	r%17==0
17515	r%5==0
17515	r%19==0
17515	r%31==0
17515	r%7==0
17515	r%3==0
17516	bitLength < 4
17517	p.primeToCertainty(certainty, rnd)
17518	p.bitLength() != bitLength
17519	this.signum < 0
17520	this.equals(ONE)
17520	this.signum == 0
17521	result.bitLength() < SMALL_PRIME_THRESHOLD
17522	result.testBit(0)
17523	result.bitLength() > 6
17524	r%17==0
17524	r%19==0
17524	r%7==0
17524	r%31==0
17524	r%37==0
17524	r%23==0
17524	r%5==0
17524	r%29==0
17524	r%11==0
17524	r%3==0
17524	r%13==0
17524	r%41==0
17525	result.bitLength() < 4
17526	result.primeToCertainty(DEFAULT_PRIME_CERTAINTY, null)
17527	result.testBit(0)
17528	candidate != null
17529	sizeInBits < 100
17530	sizeInBits < 256
17531	sizeInBits < 512
17532	sizeInBits < 768
17533	sizeInBits < 1024
17534	p == 0
17535	p < 0
17536	n8 == 7
17536	n8 == 3
17537	(p & 1) == 0
17538	((u ^ (u>>1)) & 2) != 0
17539	p == 1
17540	(p & u & 2) != 0
17541	(u & 1) == 0
17542	((p ^ (p>>1)) & 2) != 0
17543	u == 1
17544	(u & p & 2) != 0
17545	v2.testBit(0)
17546	k.testBit(i)
17547	u2.testBit(0)
17548	v2.testBit(0)
17549	staticRandom == null
17550	rnd == null
17551	j>0
17551	z.equals(ONE)
17551	++j==a
17552	val == 0
17553	val <= MAX_CONSTANT
17553	val > 0
17554	val >= -MAX_CONSTANT
17554	val < 0
17555	val < 0
17556	highWord==0
17557	val.signum == 0
17558	signum == 0
17559	val.signum == signum
17560	cmp == 0
17561	x.length < y.length
17562	carry
17563	val.signum == 0
17564	signum == 0
17565	val.signum != signum
17566	cmp == 0
17567	val.signum == 0
17567	signum == 0
17568	signum == 0
17568	v == 0
17569	v == BigDecimal.INFLATED
17570	v < 0
17571	dh != 0L
17572	carry == 0L
17573	z.length < (xlen+ ylen)
17573	z == null
17574	signum == 0
17575	z == null
17575	z.length < zlen
17576	exponent < 0
17577	signum==0
17578	(exponent & 1)==1
17579	(exponent >>>= 1) != 0
17580	val.signum == 0
17581	this.signum == 0
17582	n <= (32-bitsInHighWord)
17583	nBits <= (32-bitsInHighWord)
17584	len == 0
17584	n == 0
17585	len == 0
17586	m.signum <= 0
17587	m.signum <= 0
17588	exponent.signum == 0
17589	this.equals(ONE)
17590	exponent.signum >= 0
17590	this.equals(ZERO)
17591	this.equals(negConst[1])
17591	exponent.testBit(0)
17592	invertResult = (exponent.signum < 0)
17593	m.testBit(0)
17594	y.equals(ONE)
17595	signum==0
17596	ebits != 17
17596	exp[0] != 65537
17597	table[0].length < modLen
17598	bitpos == 0
17599	multpos == ebits
17600	elen != 0
17601	bitpos == 0
17602	(buf & tblmask) != 0
17603	ebits == multpos
17604	isone
17605	ebits == 0
17606	isone
17607	b1 < b2
17608	b1 > b2
17609	(t >>> 32) == 0
17610	--offset < 0
17611	a[offset] != 0
17612	this.testBit(0)
17613	exponent.testBit(expOffset)
17614	expOffset < limit
17615	bitLength() <= p
17616	m.signum != 1
17617	m.equals(ONE)
17618	this.compareMagnitude(m) >= 0
17618	signum < 0
17619	modVal.equals(ONE)
17620	signum == 0
17621	n==0
17622	n<0
17623	n == Integer.MIN_VALUE
17624	nBits == 0
17625	highBits != 0
17626	n==0
17627	n<0
17628	n == Integer.MIN_VALUE
17629	nInts >= magLen
17630	nBits == 0
17631	highBits != 0
17632	signum < 0
17633	nBits != 0
17633	onesLost
17634	onesLost
17635	lastSum == 0
17636	n<0
17637	n<0
17638	n<0
17639	n<0
17640	lsb == -2
17641	signum == 0
17642	n == -1
17643	len == 0
17644	signum < 0
17645	bc == -1
17646	signum < 0
17647	certainty <= 0
17648	w.equals(TWO)
17649	w.equals(ONE)
17649	w.testBit(0)
17650	signum == val.signum
17651	len1 < len2
17652	len1 > len2
17653	a != b
17654	x == this
17655	x instanceof BigInteger
17656	xInt.signum != signum
17657	len != xm.length
17658	xm[i] != m[i]
17659	signum == 0
17660	radix < Character.MIN_RADIX
17660	radix > Character.MAX_RADIX
17661	signum<0
17662	numLeadingZeros != 0
17663	bytesCopied == 4
17664	numBytesToTransfer < 0
17665	result[i] != 0
17666	n < 0
17667	n >= mag.length
17668	fn == -2
17669	sign < -1
17669	sign > 1
17670	fields.defaulted("signum")
17671	(magnitude.length == 0) != (sign == 0)
17672	fields.defaulted("magnitude")
17673	bytesCopied == 4
976	words[i] != 0
977	nbits < 0
978	n == 0
979	words.length < wordsRequired
980	wordsInUse < wordsRequired
981	fromIndex < 0
982	toIndex < 0
983	fromIndex > toIndex
984	bitIndex < 0
985	fromIndex == toIndex
986	startWordIndex == endWordIndex
987	bitIndex < 0
988	value
989	fromIndex == toIndex
990	startWordIndex == endWordIndex
991	value
992	bitIndex < 0
993	wordIndex >= wordsInUse
994	fromIndex == toIndex
995	startWordIndex >= wordsInUse
996	endWordIndex >= wordsInUse
997	startWordIndex == endWordIndex
998	bitIndex < 0
999	len <= fromIndex
999	fromIndex == toIndex
1000	toIndex > len
1001	fromIndex < 0
1002	u >= wordsInUse
1003	word != 0
1004	++u == wordsInUse
1005	fromIndex < 0
1006	u >= wordsInUse
1007	word != 0
1008	++u == wordsInUse
1009	fromIndex < 0
1010	fromIndex == -1
1011	u >= wordsInUse
1012	word != 0
1013	u-- == 0
1014	fromIndex < 0
1015	fromIndex == -1
1016	u >= wordsInUse
1017	word != 0
1018	u-- == 0
1019	wordsInUse == 0
1020	(words[i] & set.words[i]) != 0
1021	this == set
1022	this == set
1023	wordsInUse < set.wordsInUse
1024	wordsInCommon < set.wordsInUse
1025	wordsInUse < set.wordsInUse
1026	wordsInCommon < set.wordsInUse
1027	obj instanceof BitSet
1028	this == obj
1029	wordsInUse != set.wordsInUse
1030	words[i] != set.words[i]
1031	sizeIsSticky
1032	wordsInUse != words.length
1033	sizeIsSticky
1034	i != -1
18009	start%2 == 0
18010	start >= limit
18011	get(index)
18012	(nextLong & 1) == 1
18013	candidate.primeToCertainty(certainty, random)
13128	bigEndian
13129	bigEndian
13130	bigEndian
13131	bigEndian
13132	bigEndian
13133	bigEndian
13134	bigEndian
13135	bigEndian
13136	bigEndian
13137	bigEndian
13138	bigEndian
13139	bigEndian
13140	byteOrder == null
13141	pageSize == -1
13142	unalignedKnown
13143	VM.isBooted()
13143	memoryLimitSet
13144	cap <= maxMemory - totalCapacity
13145	totalCapacity + cap > maxMemory
13146	reservedMemory > 0
7572	painter == null
7573	page == null
12615	obj instanceof Boolean
9174	constraints instanceof String
9174	constraints == null
9175	name == null
9176	"Center".equals(name)
9177	"North".equals(name)
9178	"South".equals(name)
9179	"East".equals(name)
9180	"West".equals(name)
9181	BEFORE_FIRST_LINE.equals(name)
9182	AFTER_LAST_LINE.equals(name)
9183	BEFORE_LINE_BEGINS.equals(name)
9184	AFTER_LINE_ENDS.equals(name)
9185	comp == center
9186	comp == north
9187	comp == south
9188	comp == east
9189	comp == west
9190	comp == firstLine
9191	comp == lastLine
9192	comp == firstItem
9193	comp == lastItem
9194	CENTER.equals(constraints)
9195	NORTH.equals(constraints)
9196	SOUTH.equals(constraints)
9197	WEST.equals(constraints)
9198	EAST.equals(constraints)
9199	PAGE_START.equals(constraints)
9200	PAGE_END.equals(constraints)
9201	LINE_START.equals(constraints)
9202	LINE_END.equals(constraints)
9203	NORTH.equals(constraints)
9204	SOUTH.equals(constraints)
9205	WEST.equals(constraints)
9206	result == null
9207	EAST.equals(constraints)
9208	result == null
9209	CENTER.equals(constraints)
9210	comp == null
9211	comp == center
9212	comp == north
9213	comp == south
9214	comp == west
9215	comp == east
9216	comp == firstLine
9217	comp == lastLine
9218	comp == firstItem
9219	comp == lastItem
9220	(c=getChild(EAST,ltr)) != null
9221	(c=getChild(WEST,ltr)) != null
9222	(c=getChild(CENTER,ltr)) != null
9223	(c=getChild(NORTH,ltr)) != null
9224	(c=getChild(SOUTH,ltr)) != null
9225	(c=getChild(EAST,ltr)) != null
9226	(c=getChild(WEST,ltr)) != null
9227	(c=getChild(CENTER,ltr)) != null
9228	(c=getChild(NORTH,ltr)) != null
9229	(c=getChild(SOUTH,ltr)) != null
9230	(c=getChild(NORTH,ltr)) != null
9231	(c=getChild(SOUTH,ltr)) != null
9232	(c=getChild(EAST,ltr)) != null
9233	(c=getChild(WEST,ltr)) != null
9234	(c=getChild(CENTER,ltr)) != null
9235	key == NORTH
9236	key == SOUTH
9237	key == WEST
9238	result == null
9239	key == EAST
9240	result == null
9241	key == CENTER
9242	result != null
9242	result.visible
11785	i < 0
16048	in.read(buf) != 8
16049	version != supportedVersion
16050	in.read(buf) != len
16051	ch < Character.MIN_SUPPLEMENTARY_CODE_POINT
16052	cellIsPopulated(row, col)
16053	rowIndexFlagsIndex[row] < 0
15789	offset == 0
15790	boundary == DONE
15791	iterCache[type] != null
15792	cache != null
15793	cache.getLocale().equals(locale)
15794	pool.hasProviders()
15795	providersInstance != null
15796	classNames[type].equals("RuleBasedBreakIterator")
15797	classNames[type].equals("DictionaryBasedBreakIterator")
13358	cap < 0
13359	mark >= 0
13360	mark > pos
13361	newPosition > limit
13361	newPosition < 0
13362	mark > position
13363	newLimit > capacity
13363	newLimit < 0
13364	position > limit
13365	mark > limit
13366	m < 0
13367	position >= limit
13368	limit - position < nb
13369	position >= limit
13370	limit - position < nb
13371	i >= limit
13371	i < 0
13372	nb > limit - i
13372	i < 0
13373	(off | len | (off + len) | (size - (off + len))) < 0
6403	frontCaps == null
6403	backCaps == null
9030	cm.hasAlpha()
9030	cm.isAlphaPremultiplied()
9031	mapSize <= 2
9032	mapSize <= 4
9033	mapSize <= 16
9034	cm.isCompatibleRaster(raster)
9035	cm.isCompatibleRaster(raster)
9036	raster.minX != 0
9036	raster.minY != 0
9037	csType != ColorSpace.TYPE_RGB
9038	csType == ColorSpace.TYPE_GRAY
9038	cm instanceof ComponentColorModel
9038	isStandard
9039	sm instanceof ComponentSampleModel
9039	((ComponentSampleModel)sm).getPixelStride() != numBands
9040	raster instanceof ByteComponentRaster
9040	raster.getNumBands() == 1
9040	cm.getComponentSize(0) == 8
9040	((ByteComponentRaster)raster).getPixelStride() == 1
9041	raster.getNumBands() == 1
9041	raster instanceof ShortComponentRaster
9041	cm.getComponentSize(0) == 16
9041	((ShortComponentRaster)raster).getPixelStride() == 1
9042	raster instanceof IntegerComponentRaster
9042	numBands == 3
9042	numBands == 4
9043	pixSize == 32
9043	iraster.getPixelStride() == 1
9043	isStandard
9043	pixSize == 24
9043	cm instanceof DirectColorModel
9044	gmask == DCM_GREEN_MASK
9044	rmask == DCM_RED_MASK
9044	bmask == DCM_BLUE_MASK
9045	dcm.getAlphaMask() == DCM_ALPHA_MASK
9046	dcm.hasAlpha()
9047	rmask == DCM_BGR_RED_MASK
9047	gmask == DCM_BGR_GRN_MASK
9047	bmask == DCM_BGR_BLU_MASK
9048	dcm.hasAlpha()
9049	isStandard
9049	cm.hasAlpha()
9049	numBands == 1
9049	isAlphaPre
9049	cm instanceof IndexColorModel
9050	raster instanceof BytePackedRaster
9051	raster instanceof ByteComponentRaster
9052	braster.getPixelStride() == 1
9052	pixSize <= 8
9053	isStandard
9053	cm.hasAlpha()
9053	raster instanceof ShortComponentRaster
9053	numBands == 3
9053	cm instanceof DirectColorModel
9054	dcm.getRedMask() == DCM_565_RED_MASK
9055	dcm.getGreenMask() == DCM_565_GRN_MASK
9055	dcm.getBlueMask() == DCM_565_BLU_MASK
9056	dcm.getRedMask() == DCM_555_RED_MASK
9057	dcm.getGreenMask() == DCM_555_GRN_MASK
9057	dcm.getBlueMask() == DCM_555_BLU_MASK
9058	numBands == 3
9058	isStandard
9058	numBands == 4
9058	raster instanceof ByteComponentRaster
9058	raster.getSampleModel() instanceof PixelInterleavedSampleModel
9058	cm instanceof ComponentColorModel
9059	ccm.getNumComponents() != numBands
9060	nBits[i] != 8
9061	offs[0] == numBands-1
9061	offs[1] == numBands-2
9061	braster.getPixelStride() == numBands
9061	offs[2] == numBands-3
9061	is8bit
9062	ccm.hasAlpha()
9062	numBands == 3
9063	offs[3] == 0
9063	ccm.hasAlpha()
9064	rgbArray == null
9065	osis == null
9066	properties == null
9067	name == null
9068	properties == null
9069	o == null
9070	colorModel.hasAlpha()
9070	colorModel.isAlphaPremultiplied() != isAlphaPremultiplied
9071	tileY == 0
9071	tileX == 0
9072	outRaster == null
9073	intersect.isEmpty()
9074	tileX == 0
9074	tileY == 0
8634	op == null
8635	height <= 0
8635	width <= 0
8636	bytePixels != null
8637	intPixels != null
8638	w < 0
8638	h < 0
8639	w == 0
8639	h == 0
8640	y < 0
8641	diff >= h
8642	y + h > height
8643	h <= 0
8644	x < 0
8645	diff >= w
8646	x + w > width
8647	w <= 0
8648	intPixels == null
8649	bytePixels == null
8650	this.model != model
8651	bytePixels != null
8652	intPixels != null
8653	h < 0
8653	w < 0
8654	w == 0
8654	h == 0
8655	y < 0
8656	diff >= h
8657	y + h > height
8658	h <= 0
8659	x < 0
8660	diff >= w
8661	x + w > width
8662	w <= 0
8663	intPixels == null
8664	bytePixels == null
8665	this.model == model
8666	this.model != ColorModel.getRGBdefault()
8667	width <= 0
8667	height <= 0
8668	model instanceof DirectColorModel
8669	intPixels == null
8670	model instanceof IndexColorModel
8671	bytePixels == null
8672	intPixels == null
8673	cm instanceof DirectColorModel
8674	cm instanceof IndexColorModel
8675	hasAlpha
13617	input == null
13618	buffer == null
13619	size <= 0
13620	markpos < 0
13621	pos >= buffer.length
13622	markpos > 0
13623	buffer.length >= marklimit
13624	nsz > marklimit
13625	bufUpdater.compareAndSet(this, buffer, nbuf)
13626	n > 0
13627	pos >= count
13628	pos >= count
13629	avail <= 0
13630	len >= getBufIfOpen().length
13630	markpos < 0
13631	avail <= 0
13632	(off | len | (off + len) | (b.length - (off + len))) < 0
13633	len == 0
13634	nread <= 0
13635	n >= len
13636	input.available() <= 0
13636	input != null
13637	n <= 0
13638	avail <= 0
13639	markpos <0
13640	avail <= 0
13641	markpos < 0
13642	bufUpdater.compareAndSet(this, buffer, null)
13643	input != null
13599	size <= 0
13600	count > 0
13601	count >= buf.length
13602	len >= buf.length
13603	len > buf.length - count
14208	sz <= 0
14209	in == null
14210	markedChar <= UNMARKED
14211	delta >= readAheadLimit
14212	readAheadLimit <= cb.length
14213	n > 0
14214	nextChar >= nChars
14215	nextChar >= nChars
14216	skipLF
14217	cb[nextChar] == '\n'
14218	nextChar >= nChars
14219	len >= cb.length
14219	skipLF
14219	markedChar <= UNMARKED
14220	nextChar >= nChars
14221	skipLF
14222	cb[nextChar] == '\n'
14223	nextChar >= nChars
14224	nextChar >= nChars
14225	off < 0
14225	len < 0
14225	(off + len) > cbuf.length
14225	(off + len) < 0
14225	off > cbuf.length
14226	len == 0
14227	n <= 0
14228	n1 <= 0
14229	nextChar >= nChars
14230	nextChar >= nChars
14231	s != null
14231	s.length() > 0
14232	omitLF
14232	cb[nextChar] == '\n'
14233	c == '\n'
14233	c == '\r'
14234	eol
14235	s == null
14236	c == '\r'
14237	s == null
14238	n < 0L
14239	nextChar >= nChars
14240	nextChar >= nChars
14241	skipLF
14242	cb[nextChar] == '\n'
14243	r <= d
14244	skipLF
14245	nextChar >= nChars
14245	in.ready()
14246	nextChar < nChars
14247	cb[nextChar] == '\n'
14248	readAheadLimit < 0
14249	markedChar < 0
14250	in == null
13521	sz <= 0
13522	out == null
13523	nextChar == 0
13524	nextChar >= nChars
13525	a < b
13526	off > cbuf.length
13526	(off + len) > cbuf.length
13526	(off + len) < 0
13526	off < 0
13526	len < 0
13527	len == 0
13528	len >= nChars
13529	nextChar >= nChars
13530	nextChar >= nChars
13531	out == null
10184	peer == null
10185	this.label == null
10185	this.label.equals(label)
10185	label != this.label
10186	peer != null
10187	testvalid
10188	l == null
10189	l == null
10190	listenerType == ActionListener.class
10191	e.id == ActionEvent.ACTION_PERFORMED
10192	(eventMask & AWTEvent.ACTION_EVENT_MASK) != 0
10192	actionListener != null
10193	e instanceof ActionEvent
10194	listener != null
10195	actionListenerK == key
10196	accessibleContext == null
11150	i < MIN_VALUE
11150	i > MAX_VALUE
11151	i < MIN_VALUE
11151	i > MAX_VALUE
11152	obj instanceof Byte
13590	b == null
13591	len > b.length - off
13591	len < 0
13591	off < 0
13592	pos >= count
13593	len > avail
13594	len <= 0
13595	n < k
14018	size < 0
14019	minCapacity - buf.length > 0
14020	newCapacity - minCapacity < 0
14021	newCapacity - MAX_ARRAY_SIZE > 0
14022	minCapacity < 0
14023	off < 0
14023	off > b.length
14023	(off + len) - b.length > 0
14023	len < 0
12849	capacity < 0
12850	length > remaining()
12851	src == this
12852	n > remaining()
12853	length > remaining()
12854	hb == null
12855	isReadOnly
12856	hb == null
12857	isReadOnly
12858	this == ob
12859	ob instanceof ByteBuffer
12860	this.remaining() != that.remaining()
12861	equals(this.get(i), that.get(j))
12862	cmp != 0
12863	start > end
12863	end > limit()
12864	end > len
12864	start > end
12864	start < 0
12907	start > end
12907	end > limit()
12908	start < 0
12908	end > len
12908	start > end
12847	start > end
12847	end > limit()
12848	start > end
12848	start < 0
12848	end > len
13297	end > limit()
13297	start > end
13298	end > len
13298	start < 0
13298	start > end
8506	dst == null
8507	numComponents == 1
8508	s < 0
8509	s < 0
8510	dst == null
8511	numComponents == 1
8512	s < 0
8513	s < 0
1986	b == null
1987	off > b.length - len
1987	off < 0
1987	len < 0
4255	caltype == null
4256	"th".equals(aLocale.getLanguage())
4256	"TH".equals(aLocale.getCountry())
4257	caltype.equals("japanese")
4258	caltype.equals("buddhist")
4259	isTimeSet
4260	areFieldsSet
4260	areAllFieldsSet
4260	zone instanceof ZoneInfo
4260	((ZoneInfo)zone).isDirty()
4260	isTimeSet
4260	time == millis
4261	areAllFieldsSet
4261	areFieldsSet
4262	nextStamp == Integer.MAX_VALUE
4263	checkDisplayNameParams(field, style, ALL_STYLES, LONG, locale, ERA_MASK|MONTH_MASK|DAY_OF_WEEK_MASK|AM_PM_MASK)
4264	strings != null
4265	fieldValue < strings.length
4266	checkDisplayNameParams(field, style, ALL_STYLES, LONG, locale, ERA_MASK|MONTH_MASK|DAY_OF_WEEK_MASK|AM_PM_MASK)
4267	style == ALL_STYLES
4268	field == ERA
4268	field == AM_PM
4269	shortNames == null
4270	longNames != null
4271	strings != null
4272	strings[i].length() == 0
4273	style < minStyle
4273	field >= fields.length
4273	field < 0
4273	style > maxStyle
4274	locale == null
4275	isTimeSet
4276	areAllFieldsSet
4276	areFieldsSet
4277	stamp[i] != UNSET
4278	fieldMask == ALL_FIELDS
4279	(fieldMask & 1) == 1
4280	areAllFieldsSet
4280	isSet[i]
4281	fieldMask != ALL_FIELDS
4282	(fieldMask & 1) == 0
4283	stamp[ERA] != UNSET
4284	womStamp > bestStamp
4285	dowimStamp > bestStamp
4286	doyStamp > bestStamp
4287	woyStamp > bestStamp
4288	bestStamp == UNSET
4289	bestStamp == UNSET
4290	stamp[WEEK_OF_MONTH] >= stamp[WEEK_OF_YEAR]
4290	bestStamp == domStamp
4290	bestStamp == dowimStamp
4290	stamp[DAY_OF_WEEK_IN_MONTH] >= stamp[WEEK_OF_YEAR]
4290	bestStamp == womStamp
4291	bestStamp == domStamp
4292	dowStamp != UNSET
4293	womStamp == dowimStamp
4294	stamp[WEEK_OF_MONTH] >= stamp[DAY_OF_WEEK_IN_MONTH]
4295	bestStamp == womStamp
4296	stamp[DAY_OF_WEEK_IN_MONTH] != UNSET
4297	bestStamp == doyStamp
4298	dowStamp != UNSET
4299	bestStamp == UNSET
4300	bestStamp != UNSET
4301	bestStamp == hourOfDayStamp
4302	stamp[AM_PM] != UNSET
4303	stamp[MINUTE] != UNSET
4304	stamp[SECOND] != UNSET
4305	stamp[MILLISECOND] != UNSET
4306	stamp[ZONE_OFFSET] >= MINIMUM_USER_STAMP
4307	stamp[DST_OFFSET] >= MINIMUM_USER_STAMP
4308	stamp_b == UNSET
4308	stamp_a == UNSET
4309	this == obj
4310	sharedZone
4311	firstDayOfWeek == value
4312	minimalDaysInFirstWeek == value
4313	fieldValue == endValue
4314	work.get(field) != fieldValue
4315	fieldValue == endValue
4316	field == WEEK_OF_YEAR
4316	field == WEEK_OF_MONTH
4317	work.get(field) != fieldValue
4318	valid
4319	data == null
4320	calendar.isTimeSet
4321	v >= newStamp
4321	min > v
4322	max < v
4323	min == Integer.MAX_VALUE
4323	max != min
4324	stamp[i] == min
4325	min == max
4326	stamp[WEEK_OF_MONTH] != COMPUTED
4326	stamp[WEEK_OF_YEAR] != COMPUTED
4327	stamp[WEEK_OF_MONTH] == COMPUTED
4328	fields[WEEK_OF_MONTH] != weekOfMonth
4329	stamp[WEEK_OF_YEAR] == COMPUTED
4330	fields[WEEK_OF_YEAR] != weekOfYear
4331	isTimeSet
4332	zone instanceof ZoneInfo
4333	stz == null
4334	savedZone != null
4335	serialVersionOnStream >= 2
4336	fields == null
4337	isSet == null
4338	serialVersionOnStream >= 0
4339	e instanceof OptionalDataException
4340	e instanceof RuntimeException
4341	e instanceof IOException
4342	e instanceof ClassNotFoundException
4343	zi != null
4344	zone instanceof SimpleTimeZone
4345	tz.hasSameRules(zone)
4345	tz != null
4345	tz.getID().equals(id)
15798	index == ISO_DAY_OF_WEEK
15799	index > maxFieldIndex
15799	index < FIELD_COUNT
15800	index == ISO_DAY_OF_WEEK
15801	index == ISO_DAY_OF_WEEK
15802	weekDate
15802	cal.isWeekDateSupported()
15803	isSet(YEAR)
15804	field[index] == stamp
15805	weekDate
15806	cal.isLenient()
15806	isValidDayOfWeek(dayOfWeek)
15807	dayOfWeek >= 8
15808	isSet(i)
15809	sb.charAt(lastIndex) == ','
15810	isValidDayOfWeek(isoDayOfWeek)
11526	newType.equals(oldType)
11527	info == null
11528	info.getClass().isArray()
11529	3 + argv.length > 255
11530	bsmType.parameterType(3) == Object[].class
11530	bsmType.parameterCount() == 4
11531	binding instanceof CallSite
11532	site.getTarget().type().equals(type)
11533	ex instanceof BootstrapMethodError
11534	x instanceof Integer
11535	xi == (byte) xi
9252	peer != null
9253	peer == null
9254	accessibleContext == null
4683	constraints == null
4684	constraints instanceof String
4685	vector.isEmpty()
4686	((Card)vector.get(i)).name.equals(name)
4687	((Card)vector.get(i)).comp == comp
4688	comp.getParent() != null
4688	comp.isVisible()
4689	currentCard > i
4690	d.width > w
4691	d.height > h
4692	d.width > w
4693	d.height > h
4694	comp.isVisible()
4695	ncomponents > 0
4695	currentFound
4696	parent.getLayout() != this
4697	comp.isVisible()
4698	ncomponents > 0
4699	comp.isVisible()
4700	comp.isVisible()
4701	parent.getComponentCount() > 0
4702	comp.isVisible()
4703	ncomponents > 0
4704	card.name.equals(name)
4705	next.isVisible()
4705	next != null
4706	comp.isVisible()
4707	f.defaulted("vector")
4708	tab.isEmpty()
4708	tab != null
4709	comp.isVisible()
17463	this == other
17464	other instanceof CertPath
17465	otherCP.getType().equals(type)
17459	cpbtype == null
17409	CertPathHelper.instance == null
17458	cpvtype == null
17190	index != -1
17190	certPath == null
17191	certPath != null
17191	index >= certPath.getCertificates().size()
17191	index < -1
17192	reason == null
17193	reason == null
17194	certPath == null
17194	index != -1
17195	index < -1
17195	index >= certPath.getCertificates().size()
17195	certPath != null
17196	params != null
17197	cause instanceof InvalidAlgorithmParameterException
17198	cstype == null
17228	this == other
17229	other instanceof Certificate
17460	authority == null
17460	extensions == null
17460	revocationDate == null
17460	reason == null
17461	ext == null
17462	size == 0
10333	this.map == null
10334	array != null
10335	this.map != null
10336	array != null
10337	listener.equals(array[i])
10338	size > 0
10339	this.map.isEmpty()
10340	listeners != null
10341	this.map == null
10342	this.map != null
10343	this.map.isEmpty()
10344	this.map == null
10345	listeners != null
10346	name != null
10347	name != null
10348	listeners != null
10349	this.map == null
13299	o == null
13300	n <= 0
13301	ch instanceof SelectableChannel
13302	sc.isBlocking()
13303	in instanceof FileInputStream
13303	FileInputStream.class.equals(in.getClass())
13304	out instanceof FileOutputStream
13304	FileOutputStream.class.equals(out.getClass())
6910	chars.length > 0
6911	pos >= 0
6911	pos < chars.length
6912	pos < chars.length-1
6913	pos > 0
6914	position > chars.length
6914	position < 0
13511	offset > buf.length
13511	offset < 0
13511	(offset + length) < 0
13511	length < 0
13512	buf == null
13513	pos >= count
13514	off < 0
13514	(off + len) < 0
13514	len < 0
13514	off > b.length
13514	(off + len) > b.length
13515	len == 0
13516	pos >= count
13517	pos + len > count
13518	len <= 0
13519	pos + n > count
13520	n < 0
14187	initialSize < 0
14188	newcount > buf.length
14189	len < 0
14189	off > c.length
14189	(off + len) > c.length
14189	off < 0
14189	(off + len) < 0
14190	len == 0
14191	newcount > buf.length
14192	newcount > buf.length
13051	capacity < 0
13052	remaining == 0
13053	targetRemaining < remaining
13054	n > 0
13055	length > remaining()
13056	src == this
13057	n > remaining()
13058	length > remaining()
13059	hb == null
13060	isReadOnly
13061	hb == null
13062	isReadOnly
13063	this == ob
13064	ob instanceof CharBuffer
13065	this.remaining() != that.remaining()
13066	equals(this.get(i), that.get(j))
13067	cmp != 0
13068	csq == null
12243	isValidCodePoint(codePoint)
12244	type == UNASSIGNED
12245	index < 0
12246	sc != null
12247	c <= 127
12248	obj instanceof Character
12249	isHighSurrogate(c1)
12250	index < seq.length()
12251	isLowSurrogate(c2)
12252	limit > a.length
12252	index >= limit
12252	limit < 0
12253	isHighSurrogate(c1)
12254	index < limit
12255	isLowSurrogate(c2)
12256	isLowSurrogate(c2)
12257	index > 0
12258	isHighSurrogate(c1)
12259	start >= a.length
12259	index <= start
12259	start < 0
12260	isLowSurrogate(c2)
12261	index > start
12262	isHighSurrogate(c1)
12263	isBmpCodePoint(codePoint)
12264	isValidCodePoint(codePoint)
12265	isBmpCodePoint(codePoint)
12266	isValidCodePoint(codePoint)
12267	beginIndex < 0
12267	endIndex > length
12267	beginIndex > endIndex
12268	i < endIndex
12268	isLowSurrogate(seq.charAt(i))
12268	isHighSurrogate(seq.charAt(i++))
12269	offset < 0
12269	count < 0
12269	count > a.length - offset
12270	isHighSurrogate(a[i++])
12270	i < endIndex
12270	isLowSurrogate(a[i])
12271	index > length
12271	index < 0
12272	codePointOffset >= 0
12273	isLowSurrogate(seq.charAt(x))
12273	x < length
12273	isHighSurrogate(seq.charAt(x++))
12274	i < codePointOffset
12275	x > 0
12275	isLowSurrogate(seq.charAt(--x))
12275	isHighSurrogate(seq.charAt(x-1))
12276	i < 0
12277	index > start+count
12277	count > a.length-start
12277	index < start
12277	start < 0
12277	count < 0
12278	codePointOffset >= 0
12279	isHighSurrogate(a[x++])
12279	isLowSurrogate(a[x])
12279	x < limit
12280	i < codePointOffset
12281	isHighSurrogate(a[x-1])
12281	isLowSurrogate(a[--x])
12281	x > start
12282	i < 0
12283	digit >= radix
12283	digit < 0
12284	radix > Character.MAX_RADIX
12284	radix < Character.MIN_RADIX
12285	digit < 10
12286	isValidCodePoint(codePoint)
12287	name != null
12288	getType(codePoint) == UNASSIGNED
12289	block != null
12477	ch >>> 8 == 0
12505	(val & 0x00020000) != 0
12506	(val & 0x07FC0000) == 0x07FC0000
12507	(val & 0x00010000) != 0
12508	(val & 0x07FC0000) == 0x07FC0000
12509	(val & 0x00008000) != 0
12510	(val & 0x00010000) == 0
12511	(val & 0x00020000) == 0
12512	(val & 0x00010000) != 0
12513	radix <= Character.MAX_RADIX
12513	radix >= Character.MIN_RADIX
12514	kind == Character.DECIMAL_DIGIT_NUMBER
12515	(val & 0xC00) == 0x00000C00
12516	directionality == 0xF
12517	(val & 0x00010000) != 0
12518	(val & 0x07FC0000) != 0x07FC0000
12519	location != -1
12520	charMap.length == 0
12520	charMap == null
12521	ch >= charMap[current][0][0]
12522	ch == charMap[current][0][0]
11516	(val & 0x00020000) != 0
11517	(val & 0x00010000) != 0
11518	(val & 0x00008000) != 0
11519	(val & 0x00010000) == 0
11520	(val & 0x00020000) == 0
11521	(val & 0x00010000) != 0
11522	radix <= Character.MAX_RADIX
11522	radix >= Character.MIN_RADIX
11523	kind == Character.DECIMAL_DIGIT_NUMBER
11524	(val & 0xC00) == 0x00000C00
11525	directionality == 0xF
10986	(val & 0x00020000) != 0
10987	(val & 0x00010000) != 0
10988	(val & 0x00008000) != 0
10989	(val & 0x00010000) == 0
10990	(val & 0x00020000) == 0
10991	(val & 0x00010000) != 0
10992	radix >= Character.MIN_RADIX
10992	radix <= Character.MAX_RADIX
10993	kind == Character.DECIMAL_DIGIT_NUMBER
10994	(val & 0xC00) == 0x00000C00
10995	directionality == 0xF
11440	(val & 0x00020000) != 0
11441	(val & 0x00010000) != 0
11442	(val & 0x00008000) != 0
11443	(val & 0x00010000) == 0
11444	(val & 0x00020000) == 0
11445	(val & 0x00010000) != 0
11446	radix <= Character.MAX_RADIX
11446	radix >= Character.MIN_RADIX
11447	kind == Character.DECIMAL_DIGIT_NUMBER
11448	(val & 0xC00) == 0x00000C00
11449	directionality == 0xF
12598	(val & 0x07FC0000) != 0x07FC0000
12598	(val & 0x00020000) != 0
12599	(val & 0x00010000) != 0
12600	(val & 0x07FC0000) != 0x07FC0000
12601	ch == 0x00B5
12602	radix <= Character.MAX_RADIX
12602	radix >= Character.MIN_RADIX
12603	kind == Character.DECIMAL_DIGIT_NUMBER
12604	(val & 0xC00) == 0x00000C00
12605	directionality == 0xF
12606	(val & 0x00010000) != 0
12607	(val & 0x07FC0000) != 0x07FC0000
12608	ch == 0x00DF
15669	start != end
15670	start < size
15671	size < start
15672	size < end
15673	string.length() > size
12609	refStrPool != null
12609	(strPool = refStrPool.get()) != null
12610	len == 0
12611	lookup[hi] == null
12612	dis != null
12613	(strPool = refStrPool.get()) == null
12613	refStrPool == null
12614	lookup[cp>>8] == null
12614	(off = lookup[cp>>8][cp&0xff]) == 0
13262	level == null
13263	sun.misc.VM.isBooted()
13264	atBugLevel("1.4")
13265	n == 0
13266	c >= 'A'
13266	c <= 'Z'
13267	c <= 'z'
13267	c >= 'a'
13268	c >= '0'
13268	c <= '9'
13269	i != 0
13269	c == '-'
13270	i != 0
13270	c == '+'
13271	c == ':'
13271	i != 0
13272	i != 0
13272	c == '_'
13273	i != 0
13273	c == '.'
13274	sun.misc.VM.isBooted()
13275	gate.get() != null
13276	charsetName == null
13277	charsetName.equals(a[0])
13277	(a = cache1) != null
13278	(a = cache2) != null
13278	charsetName.equals(a[0])
13279	(cs = lookupViaProviders(charsetName)) != null
13279	(cs = lookupExtendedCharset(charsetName)) != null
13279	(cs = standardProvider.charsetForName(charsetName)) != null
13280	cs != null
13281	m.containsKey(cs.name())
13282	defaultCharset == null
13283	cs != null
13284	aliasSet != null
13285	ob instanceof Charset
13286	this == ob
13236	averageCharsPerByte <= 0.0f
13237	maxCharsPerByte <= 0.0f
13238	Charset.atBugLevel("1.4")
13239	averageCharsPerByte > maxCharsPerByte
13240	newReplacement == null
13241	len == 0
13242	len > maxCharsPerByte
13243	newAction == null
13244	newAction == null
13245	endOfInput
13245	state == ST_END
13245	state != ST_CODING
13245	state != ST_RESET
13246	cr.isOverflow()
13247	cr.isUnderflow()
13248	in.hasRemaining()
13248	endOfInput
13249	cr.isMalformed()
13250	cr.isUnmappable()
13251	action == CodingErrorAction.REPORT
13252	action == CodingErrorAction.REPLACE
13253	out.remaining() < replacement.length()
13254	action == CodingErrorAction.IGNORE
13254	action == CodingErrorAction.REPLACE
13255	state == ST_END
13256	cr.isUnderflow()
13257	state != ST_FLUSHED
13258	n == 0
13258	in.remaining() == 0
13259	cr.isUnderflow()
13260	cr.isUnderflow()
13261	cr.isOverflow()
13204	averageBytesPerChar <= 0.0f
13205	maxBytesPerChar <= 0.0f
13206	Charset.atBugLevel("1.4")
13207	averageBytesPerChar > maxBytesPerChar
13208	newReplacement == null
13209	len == 0
13210	len > maxBytesPerChar
13211	isLegalReplacement(newReplacement)
13212	(dec = wr.get()) == null
13212	wr == null
13213	newAction == null
13214	newAction == null
13215	state == ST_END
13215	state != ST_RESET
13215	endOfInput
13215	state != ST_CODING
13216	cr.isOverflow()
13217	cr.isUnderflow()
13218	in.hasRemaining()
13218	endOfInput
13219	cr.isMalformed()
13220	cr.isUnmappable()
13221	action == CodingErrorAction.REPORT
13222	action == CodingErrorAction.REPLACE
13223	out.remaining() < replacement.length
13224	action == CodingErrorAction.REPLACE
13224	action == CodingErrorAction.IGNORE
13225	state == ST_END
13226	cr.isUnderflow()
13227	state != ST_FLUSHED
13228	in.remaining() == 0
13228	n == 0
13229	cr.isUnderflow()
13230	cr.isUnderflow()
13231	cr.isOverflow()
13232	state == ST_FLUSHED
13233	state != ST_RESET
13234	cs instanceof CharBuffer
13235	sm != null
7610	peer != null
7611	state
7611	group != null
7612	peer == null
7613	label != this.label
7613	this.label.equals(label)
7613	this.label == null
7614	peer != null
7615	testvalid
7616	group != null
7617	state
7618	group.getSelectedCheckbox() == this
7619	state
7620	this.group == g
7621	peer != null
7622	getState()
7622	this.group != null
7623	this.group.getSelectedCheckbox() != null
7624	oldState
7624	oldGroup != null
7625	l == null
7626	l == null
7627	listenerType == ItemListener.class
7628	e.id == ItemEvent.ITEM_STATE_CHANGED
7629	itemListener != null
7629	(eventMask & AWTEvent.ITEM_EVENT_MASK) != 0
7630	e instanceof ItemEvent
7631	listener != null
7632	label != null
7633	itemListenerK == key
7634	accessibleContext == null
6421	box.group != this
6421	box != null
6422	oldChoice != box
6422	oldChoice != null
6422	oldChoice.group == this
6423	box != null
6423	box.getState()
6423	oldChoice != box
7635	peer == null
7636	peer != null
7637	state
7638	l == null
7639	l == null
7640	listenerType == ItemListener.class
7641	e.id == ItemEvent.ITEM_STATE_CHANGED
7642	(eventMask & AWTEvent.ITEM_EVENT_MASK) != 0
7642	itemListener != null
7643	e instanceof ItemEvent
7644	listener != null
7645	itemListenerK == key
7646	accessibleContext == null
1880	b != -1
1881	len != -1
1882	len == -1
4718	peer == null
4719	item == null
4720	peer != null
4721	selectedIndex < 0
4721	selectedIndex >= index
4722	index < 0
4723	index < 0
4724	peer != null
4725	pItems.size() == 0
4726	selectedIndex == position
4727	selectedIndex > position
4728	peer != null
4729	selectedIndex >= 0
4730	pos < 0
4730	pos >= pItems.size()
4731	pItems.size() > 0
4732	peer != null
4733	index >= 0
4734	l == null
4735	l == null
4736	listenerType == ItemListener.class
4737	e.id == ItemEvent.ITEM_STATE_CHANGED
4738	itemListener != null
4738	(eventMask & AWTEvent.ITEM_EVENT_MASK) != 0
4739	e instanceof ItemEvent
4740	listener != null
4741	itemListenerK == key
4742	accessibleContext == null
16244	ch=='\''
16245	(i+1)<newPattern.length()
16245	newPattern.charAt(i+1)==ch
16246	inQuote
16247	ch == '<'
16247	ch == '\u2264'
16247	ch == '#'
16248	segments[0].length() == 0
16249	tempBuffer.equals("\u221E")
16250	tempBuffer.equals("-\u221E")
16251	ch == '<'
16251	startValue != Double.POSITIVE_INFINITY
16251	startValue != Double.NEGATIVE_INFINITY
16252	startValue <= oldStartValue
16253	ch == '|'
16254	count == newChoiceLimits.length
16255	part == 1
16256	count == newChoiceLimits.length
16257	i != 0
16258	tryLessOrEqual < tryLess
16259	choiceLimits[i] == Double.POSITIVE_INFINITY
16260	choiceLimits[i] == Double.NEGATIVE_INFINITY
16261	needQuote
16262	text.indexOf('\'') < 0
16263	c == '\''
16264	needQuote
16265	limits.length != formats.length
16266	number >= choiceLimits[i]
16267	i < 0
16268	text.regionMatches(start, tempString, 0, tempString.length())
16269	status.index > furthest
16270	furthest == text.length()
16271	status.index == start
16272	choiceFormats.length > 0
16273	obj == null
16274	this == obj
16275	getClass() != obj.getClass()
16276	choiceLimits.length != choiceFormats.length
16277	Double.isNaN(d)
16278	d == 0.0
16279	positive
16280	(bits > 0) == positive
16281	magnitude != POSITIVEINFINITY
11153	sm != null
11154	loader == null
11155	ccl != null
11156	System.getSecurityManager() != null
11157	cachedConstructor == null
11158	this == Class.class
11159	Reflection.quickCheckMemberAccess(this, modifiers)
11160	newInstanceCallerCache != caller
11161	name == null
11162	cl == null
11163	sm != null
11164	getGenericSignature() != null
11165	getGenericSignature() != null
11166	isInterface()
11167	getGenericSignature() != null
11168	enclosingInfo == null
11169	enclosingInfo.isMethod()
11170	m.getName().equals(enclosingInfo.getName())
11171	candidateParamClasses.length == parameterClasses.length
11172	candidateParamClasses[i].equals(parameterClasses[i])
11173	matches
11174	m.getReturnType().equals(returnType)
11175	enclosingInfo == null
11176	o instanceof GenericArrayType
11177	enclosingInfo == null
11178	enclosingInfo.isConstructor()
11179	candidateParamClasses.length == parameterClasses.length
11180	candidateParamClasses[i].equals(parameterClasses[i])
11181	matches
11182	candidate != null
11183	enclosingInfo == null
11184	enclosingClass == null
11184	enclosingClass == this
11185	enclosingCandidate != null
11186	isArray()
11187	simpleName == null
11188	length < 1
11188	simpleName.charAt(0) != '$'
11189	isArray()
11190	canonicalName != null
11191	isLocalOrAnonymousClass()
11192	enclosingClass == null
11193	enclosingName == null
11194	enclosingClass == null
11195	field == null
11196	method == null
11197	field == null
11198	method == null
11199	cl==null
11200	cl==null
11201	sm != null
11202	pd == null
11203	allPermDomain == null
11204	sm.getClass() == SecurityManager.class
11205	helper == null
11205	helper.sm != sm
11206	s != null
11207	isCheckMemberAccessOverridden(s)
11208	which != Member.PUBLIC
11209	ccl != cl
11210	s != null
11211	ReflectUtil.needsPackageAccessCheck(ccl, cl)
11212	i != -1
11213	ReflectUtil.isNonPublicProxyClass(this)
11213	Proxy.isProxyClass(this)
11214	Proxy.isProxyClass(this)
11214	checkProxyInterfaces
11215	name == null
11216	name.startsWith("/")
11217	index != -1
11218	useCaches
11218	reflectionData != null
11218	rd.redefinedCount == classRedefinedCount
11218	(rd = reflectionData.get()) != null
11219	useCaches
11220	Atomic.casReflectionData(this, oldReflectionData, new SoftReference<>(rd))
11221	rd.redefinedCount == classRedefinedCount
11221	(rd = oldReflectionData.get()) != null
11221	oldReflectionData != null
11222	genericInfo == null
11223	rd != null
11224	res != null
11225	rd != null
11226	publicOnly
11227	rd != null
11228	res != null
11229	traversedInterfaces == null
11230	traversedInterfaces.contains(c)
11231	isInterface()
11232	c != null
11233	rd != null
11234	rd != null
11235	res != null
11236	isInterface()
11237	rd != null
11238	publicOnly
11239	rd != null
11240	res != null
11241	rd != null
11242	publicOnly
11243	rd != null
11244	res != null
11245	isInterface()
11246	c != null
11247	Modifier.isAbstract(m.getModifiers())
11247	m != null
11248	rd != null
11249	fields[i].getName() == internedName
11250	(res = searchFields(privateGetDeclaredFields(true), name)) != null
11251	(res = c.getField0(name)) != null
11252	isInterface()
11253	c != null
11254	(res = c.getField0(name)) != null
11255	arrayContentsEq(parameterTypes, m.getParameterTypes())
11255	res.getReturnType().isAssignableFrom(m.getReturnType())
11255	res == null
11255	m.getName() == internedName
11256	(res = searchMethods(privateGetDeclaredMethods(true), name, parameterTypes)) != null
11257	isInterface()
11258	c != null
11259	(res = c.getMethod0(name, parameterTypes)) != null
11260	(res = c.getMethod0(name, parameterTypes)) != null
11261	arrayContentsEq(parameterTypes, constructor.getParameterTypes())
11262	a1 == null
11263	a2 == null
11264	a1.length != a2.length
11265	a1[i] != a2[i]
11266	argTypes != null
11267	i > 0
11268	loader == null
11269	loader.classAssertionStatus != null
11270	reflectionFactory == null
11271	initted
11272	enumConstants == null
11273	isEnum()
11274	enumConstantDirectory == null
11275	universe == null
11276	isInstance(obj)
11276	obj != null
11277	clazz.isAssignableFrom(this)
11278	annotationClass == null
11279	annotationClass == null
11280	lastAnnotationsRedefinedCount != classRedefinedCount
11281	annotations != null
11282	superClass == null
11283	AnnotationType.getInstance(annotationClass).isInherited()
11450	theClassFile == null
11450	theClass == null
11005	security != null
11006	ParallelLoaders.isRegistered(this.getClass())
11007	c == null
11008	parent != null
11009	c == null
11010	resolve
11011	parallelLockMap != null
11012	lock == null
11013	parallelLockMap == null
11014	sm != null
11015	ReflectUtil.isNonPublicProxyClass(cls)
11016	i != -1
11017	checkName(name)
11018	name != null
11018	name.startsWith("java.")
11019	pd == null
11020	name != null
11021	cs.getLocation() != null
11021	cs != null
11022	transformers != null
11023	c == null
11024	pd.getCodeSource() != null
11025	certs != null
11026	b.isDirect()
11027	b.hasArray()
11028	name == null
11028	name.length() == 0
11029	name.indexOf('/') != -1
11029	name.charAt(0) == '['
11029	VM.allowArraySyntax()
11030	cs != null
11031	parallelLockMap == null
11032	pcerts == null
11033	compareCerts(pcerts, certs)
11033	pcerts != null
11034	certs.length == 0
11034	certs == null
11035	certs.length != pcerts.length
11036	certs[i].equals(pcerts[j])
11037	match
11038	pcerts[i].equals(certs[j])
11039	match
11040	system == null
11041	checkName(name)
11042	cls == null
11043	checkName(name)
11044	checkName(name)
11045	parent != null
11046	url == null
11047	parent != null
11048	system == null
11049	system == null
11050	parent == null
11051	sm != null
11052	scl == null
11053	sm != null
11054	sclSet
11055	scl != null
11056	l != null
11057	oops instanceof InvocationTargetException
11058	oops != null
11059	oops instanceof Error
11060	cl == acl
11061	from == to
11062	from == null
11063	caller == null
11064	sm != null
11065	needsClassLoaderPermissionCheck(ccl, cl)
11066	pkg != null
11067	pkg == null
11068	parent != null
11069	pkg != null
11070	pkg2 == null
11071	parent != null
11072	pkgs != null
11073	map.get(pkgName) == null
11074	j - i > 0
11075	j - i == 0
11076	sys_paths == null
11077	isAbsolute
11078	loadLibrary0(fromClass, new File(name))
11079	loader != null
11080	libfilename != null
11081	libfile.isAbsolute()
11082	loadLibrary0(fromClass, libfile)
11083	loadLibrary0(fromClass, libfile)
11084	loader != null
11085	loadLibrary0(fromClass, libfile)
11086	loadLibrary1(fromClass, file)
11087	libfile != null
11087	loadLibrary1(fromClass, libfile)
11088	exists
11089	name.equals(lib.name)
11090	loadedLibraryNames.contains(name)
11091	name.equals(lib.name)
11092	loader == lib.fromClass.getClassLoader()
11093	lib.handle != 0
11094	entry != 0
11095	classAssertionStatus == null
11096	packageAssertionStatus == null
11097	classAssertionStatus == null
11098	result != null
11099	dotIndex < 0
11100	result != null
11101	result != null
11102	cls == null
11433	match(e)
11434	map == null
11435	e != null
11436	e.isPromise()
11437	e != null
11438	map != null
11439	(map = type.classValueMap) == null
9742	oldOwner != owner
9742	oldOwner != null
9743	cntnts == null
9744	flavor == null
9745	cntnts == null
9746	flavor == null
9747	cntnts == null
9748	listener == null
9749	flavorListeners == null
9750	listener == null
9750	flavorListeners == null
9751	flavorListeners == null
9752	prevDataFlavors.equals(currentDataFlavors)
9753	contents != null
9754	flavors != null
17181	signerCertPath == null
17182	myhash == -1
17183	timestamp == null
17184	obj == null
17184	obj instanceof CodeSigner
17185	this == that
17186	timestamp == null
17187	thatTimestamp != null
17188	thatTimestamp == null
17188	timestamp.equals(thatTimestamp)
17189	timestamp != null
17072	certs != null
17073	signers != null
17074	location != null
17075	obj == this
17076	obj instanceof CodeSource
17077	location == null
17078	cs.location != null
17079	location.equals(cs.location)
17080	certs != null
17081	signers != null
17082	signers != null
17083	certs != null
17084	codesource == null
17085	signers == null
17085	certs == null
17086	strict
17087	signers != null
17087	that.signers != null
17088	signers.length != that.signers.length
17088	strict
17089	signers[i].equals(that.signers[j])
17090	match
17091	certs != null
17091	that.certs != null
17092	strict
17092	certs.length != that.certs.length
17093	certs[i].equals(that.certs[j])
17094	match
17095	location == null
17096	that.location == null
17096	that == null
17097	location.equals(that.location)
17098	location.getProtocol().equalsIgnoreCase(that.location.getProtocol())
17099	location.getPort() != -1
17100	location.getPort() != that.location.getPort()
17101	location.getFile().endsWith("/-")
17102	that.location.getFile().startsWith(thisPath)
17103	location.getFile().endsWith("/*")
17104	last == -1
17105	thatPath.equals(thisPath)
17106	that.location.getFile().equals(location.getFile()+"/")
17106	that.location.getFile().equals(location.getFile())
17107	location.getRef() != null
17108	location.getRef().equals(that.location.getRef())
17109	thisHost != null
17110	"".equals(thisHost)
17110	"".equals(thatHost)
17110	"localhost".equals(thatHost)
17110	"localhost".equals(thisHost)
17111	thisHost.equalsIgnoreCase(thatHost)
17112	thatHost == null
17113	this.sp == null
17114	that.sp == null
17115	this.sp.implies(that.sp)
17116	this.certs.length > 0
17116	this.certs != null
17117	this.signers != null
17117	this.signers.length > 0
17118	certs.length == 0
17118	certs == null
17119	signers.length > 0
17119	signers != null
17120	size > 0
17121	cfs.containsKey(certType)
17122	certs == null
17123	factory == null
17124	signers.isEmpty()
13203	isError()
15592	sourceText.length() != 0
15593	text != null
15594	text == null
15595	textMode != ownerMode
15596	buffer != null
15597	expIndex < buffer.length
15598	swapOrder != 0
15599	Character.isSupplementaryCodePoint(swapOrder)
15600	ch == NormalizerBase.DONE
15601	value == RuleBasedCollator.UNMAPPED
15602	value >= RuleBasedCollator.CONTRACTCHARINDEX
15603	value >= RuleBasedCollator.EXPANDCHARINDEX
15604	ordering.isSEAsianSwapping()
15605	isThaiPreVowel(ch)
15606	isThaiBaseConsonant(consonant)
15607	consonant != NormalizerBase.DONE
15608	isLaoPreVowel(ch)
15609	isLaoBaseConsonant(consonant)
15610	consonant != NormalizerBase.DONE
15611	text == null
15612	textMode != ownerMode
15613	buffer != null
15614	expIndex > 0
15615	swapOrder != 0
15616	Character.isSupplementaryCodePoint(swapOrder)
15617	ch == NormalizerBase.DONE
15618	value == RuleBasedCollator.UNMAPPED
15619	value >= RuleBasedCollator.CONTRACTCHARINDEX
15620	value >= RuleBasedCollator.EXPANDCHARINDEX
15621	ordering.isSEAsianSwapping()
15622	isThaiBaseConsonant(ch)
15623	isThaiPreVowel(vowel)
15624	isLaoBaseConsonant(ch)
15625	isLaoPreVowel(vowel)
15626	s == Collator.PRIMARY
15627	s == Collator.SECONDARY
15628	text != null
15629	newOffset >= text.getEndIndex()
15629	newOffset < text.getBeginIndex()
15630	ordering.usedInContractSeq(c)
15631	text == null
15632	text == null
15633	firstValue >= RuleBasedCollator.CONTRACTCHARINDEX
15634	firstValue >= RuleBasedCollator.EXPANDCHARINDEX
15635	forward
15636	firstExpansion == null
15636	lastExpansion == null
15637	firstExpansion == null
15638	lastExpansion == null
15639	Character.isSupplementaryCodePoint(c)
15640	pair.fwd
15641	fragment.startsWith(pair.entryName)
15641	pair.entryName.length() > maxLength
15642	Character.isSupplementaryCodePoint(c)
15643	pair.fwd
15644	pair.entryName.length() > maxLength
15644	fragment.startsWith(pair.entryName)
15645	source==null
16318	result != null
16319	pool.hasProviders()
16320	providersInstance != null
16321	newStrength != PRIMARY
16321	newStrength != IDENTICAL
16321	newStrength != SECONDARY
16321	newStrength != TERTIARY
16322	decompositionMode != CANONICAL_DECOMPOSITION
16322	decompositionMode != NO_DECOMPOSITION
16322	decompositionMode != FULL_DECOMPOSITION
16323	this == that
16324	that == null
16325	getClass() != that.getClass()
17201	collection == null
385	list instanceof RandomAccess
385	list.size()<BINARYSEARCH_THRESHOLD
386	cmp < 0
387	cmp > 0
388	cmp < 0
389	cmp > 0
390	pos <= index
391	c==null
392	list instanceof RandomAccess
392	list.size()<BINARYSEARCH_THRESHOLD
393	cmp < 0
394	cmp > 0
395	cmp < 0
396	cmp > 0
397	size < REVERSE_THRESHOLD
397	list instanceof RandomAccess
398	rnd == null
399	list instanceof RandomAccess
399	size < SHUFFLE_THRESHOLD
400	size < FILL_THRESHOLD
400	list instanceof RandomAccess
401	srcSize > dest.size()
402	dest instanceof RandomAccess
402	src instanceof RandomAccess
402	srcSize < COPY_THRESHOLD
403	next.compareTo(candidate) < 0
404	comp==null
405	comp.compare(next, candidate) < 0
406	next.compareTo(candidate) > 0
407	comp==null
408	comp.compare(next, candidate) > 0
409	list.size() < ROTATE_THRESHOLD
409	list instanceof RandomAccess
410	size == 0
411	distance < 0
412	distance == 0
413	i >= size
414	size == 0
415	mid < 0
416	mid == 0
417	size < REPLACEALL_THRESHOLD
417	list instanceof RandomAccess
418	oldVal==null
419	list.get(i)==null
420	oldVal.equals(list.get(i))
421	oldVal==null
422	itr.next()==null
423	oldVal.equals(itr.next())
424	sourceSize < INDEXOFSUBLIST_THRESHOLD
424	target instanceof RandomAccess
424	source instanceof RandomAccess
425	eq(target.get(i), source.get(j))
426	eq(ti.next(), si.next())
427	source instanceof RandomAccess
427	sourceSize < INDEXOFSUBLIST_THRESHOLD
428	eq(target.get(i), source.get(j))
429	maxCandidate < 0
430	eq(ti.next(), si.next())
431	candidate != 0
432	n < 0
433	cmp == null
434	cmp instanceof ReverseComparator2
435	o == null
436	e == null
437	o.equals(e)
438	c1 instanceof Set
439	c2 instanceof Set
440	c2size == 0
440	c1size == 0
441	c1size > c2size
442	contains.contains(e)
6801	a < 0
6801	a > 255
6802	r < 0
6802	r > 255
6803	g > 255
6803	g < 0
6804	b > 255
6804	b < 0
6805	rangeError == true
6806	a < 0.0
6806	a > 1.0
6807	r < 0.0
6807	r > 1.0
6808	g > 1.0
6808	g < 0.0
6809	b > 1.0
6809	b < 0.0
6810	rangeError == true
6811	hasalpha
6812	components[i] < 0.0
6812	components[i] > 1.0
6813	alpha < 0.0
6813	alpha > 1.0
6814	rangeError
6815	r == 0
6815	b == 0
6815	g == 0
6816	r > 0
6816	r < i
6817	g < i
6817	g > 0
6818	b > 0
6818	b < i
6819	intval == null
6820	saturation == 0
6821	hsbvals == null
6822	b > cmax
6823	b < cmin
6824	cmax != 0
6825	saturation == 0
6826	r == cmax
6827	g == cmax
6828	hue < 0
6829	compArray == null
6830	frgbvalue == null
6831	compArray == null
6832	frgbvalue == null
6833	fvalue == null
6834	compArray == null
6835	fvalue == null
6836	compArray == null
6837	cs == null
6838	fvalue == null
6839	compArray == null
6840	fvalue == null
6841	cs == null
6842	fvalue == null
6843	compArray == null
6844	cs == null
6845	alpha == 0xff
6846	alpha == 0
8872	cspace == null
8873	cspace instanceof ICC_ColorSpace
8874	dstCspace == null
8874	srcCspace == null
8875	srcCspace instanceof ICC_ColorSpace
8875	dstCspace instanceof ICC_ColorSpace
8876	profiles == null
8877	gotProfiles
8878	src.getColorModel() instanceof IndexColorModel
8879	dest != null
8880	dest.getColorModel() instanceof IndexColorModel
8881	destColorSpace instanceof ICC_ColorSpace
8881	CSList != null
8881	dest != null
8881	srcColorSpace instanceof ICC_ColorSpace
8882	savdest != null
8883	dest == null
8884	nProfiles == 0
8885	src.getWidth() != dest.getWidth()
8885	src.getHeight() != dest.getHeight()
8886	srcProfile == destProfile
8887	srcProfile != profileList[i]
8888	noTrans
8889	thisDestProfile != destProfile
8889	thisSrcProfile != srcProfile
8889	thisTransform == null
8890	srcProfile != profileList[0]
8890	nProfiles == 0
8891	nTransforms < 2
8891	destProfile != profileList[nProfiles - 1]
8891	nProfiles == 0
8892	useSrc
8893	useDest
8894	theProfiles[0].getProfileClass() == ICC_Profile.CLASS_OUTPUT
8895	i1 == nTransforms -1
8896	whichTrans == ColorTransform.Simulation
8896	theProfiles[i1].getProfileClass () == ICC_Profile.CLASS_ABSTRACT
8897	CSList != null
8898	nProfiles < 2
8899	src.getNumBands() != profileList[0].getNumComponents()
8900	dest == null
8901	src.getHeight() != dest.getHeight()
8901	src.getWidth() != dest.getWidth()
8902	dest.getNumBands() != profileList[nProfiles-1].getNumComponents()
8903	thisRasterTransform == null
8904	profileList[0].getProfileClass() == ICC_Profile.CLASS_OUTPUT
8905	i1 == nProfiles -1
8906	profileList[i1].getProfileClass () == ICC_Profile.CLASS_ABSTRACT
8906	whichTrans == ColorTransform.Simulation
8907	dstTransferType == DataBuffer.TYPE_FLOAT
8907	srcTransferType == DataBuffer.TYPE_DOUBLE
8907	dstTransferType == DataBuffer.TYPE_DOUBLE
8907	srcTransferType == DataBuffer.TYPE_FLOAT
8908	srcMinVals == null
8909	destCM == null
8910	CSList == null
8911	nProfiles == 0
8912	destCM == null
8913	hasAlpha
8914	CSList != null
8915	CSList.length != 2
8916	nProfiles < 2
8917	dstPt == null
8918	dst == null
8919	w != dst.getWidth()
8919	h != dst.getHeight()
8920	CSList == null
8920	profileList.length != 0
8921	srcColorSpace instanceof ICC_ColorSpace
8922	dstColorSpace instanceof ICC_ColorSpace
8923	thisDestProfile != dstProfile
8923	thisSrcProfile != srcProfile
8923	thisTransform == null
8924	nonICCSrc
8925	nonICCDst
8926	dstHasAlpha
8927	needSrcAlpha
8928	needSrcAlpha
8929	nonICCSrc
8930	nonICCDst
8931	needSrcAlpha
8932	dstHasAlpha
8933	CSList == null
8934	dstHasAlpha
8935	needSrcAlpha
8936	dstHasAlpha
8937	CSList.length != 2
8938	src.getNumBands() != CSList[0].getNumComponents()
8939	dst == null
8940	src.getWidth() != dst.getWidth()
8940	src.getHeight() != dst.getHeight()
8941	dst.getNumBands() != CSList[1].getNumComponents()
8942	srcMinVals == null
8943	srcTransferType == DataBuffer.TYPE_DOUBLE
8943	srcTransferType == DataBuffer.TYPE_FLOAT
8944	dstTransferType == DataBuffer.TYPE_DOUBLE
8944	dstTransferType == DataBuffer.TYPE_FLOAT
8945	srcIsFloat
8946	srcTransferType == DataBuffer.TYPE_SHORT
8947	dstIsFloat
8948	dstTransferType == DataBuffer.TYPE_SHORT
8949	srcIsFloat
8950	dstIsFloat
8951	type == ColorSpace.TYPE_Lab
8952	type == ColorSpace.TYPE_XYZ
8410	loaded
8411	RGBdefault == null
8412	bits < 1
8413	bits.length < numComponents
8414	transparency < Transparency.OPAQUE
8414	transparency > Transparency.TRANSLUCENT
8415	supportsAlpha == false
8416	pixel_bits <= 0
8417	bits[i] < 0
8418	maxBits < bits[i]
8419	maxBits == 0
8420	cspace != ColorSpace.getInstance(ColorSpace.CS_sRGB)
8421	nBits == null
8422	nBits != null
8423	length == 1
8424	length == 1
8425	length == 1
8426	length == 1
8427	colorSpace == null
8428	nBits == null
8429	(normComponents.length - normOffset) < numComponents
8430	components == null
8431	isAlphaPremultiplied
8431	supportsAlpha
8432	colorSpace == null
8433	nBits == null
8434	(components.length - offset) < numComponents
8435	normComponents == null
8436	isAlphaPremultiplied
8436	supportsAlpha
8437	normAlpha != 0.0f
8438	obj instanceof ColorModel
8439	this == cm
8440	supportsAlpha != cm.hasAlpha()
8440	transparency != cm.getTransparency()
8440	pixel_bits != cm.getPixelSize()
8440	numComponents != cm.getNumComponents()
8440	isAlphaPremultiplied != cm.isAlphaPremultiplied()
8441	nb != null
8441	nBits != null
8442	nBits[i] != nb[i]
8443	nBits != null
8444	pixel_bits <= 8
8445	pixel_bits <= 16
8446	pixel_bits <= 32
8447	l8Tos8 == null
8448	input <= 0.0031308f
8449	s8Tol8 == null
8450	input <= 0.04045f
8451	l16Tos8 == null
8452	input <= 0.0031308f
8453	s8Tol16 == null
8454	input <= 0.04045f
8455	isLinearGRAYspace(grayCS)
8456	g8Tos8Map != null
8457	g8Tos8LUT != null
8458	g8Tos8Map == null
8459	lg16Toog8Map != null
8460	lg16Toog8LUT != null
8461	lg16Toog8Map == null
8462	isLinearGRAYspace(grayCS)
8463	g16Tos8Map != null
8464	g16Tos8LUT != null
8465	g16Tos8Map == null
8466	lg16Toog16Map != null
8467	lg16Toog16LUT != null
8468	lg16Toog16Map == null
10079	h > t.getHeight()
10079	t == null
10079	w > t.getWidth()
10080	w <= 64
10080	h <= 64
10133	sRGBspace == null
10134	XYZspace == null
10135	PYCCspace == null
10136	GRAYspace == null
10137	LINEAR_RGBspace == null
10138	idx < 0
10138	idx > numComponents - 1
10139	compName == null
10140	component > numComponents - 1
10140	component < 0
10141	component < 0
10141	component > numComponents - 1
443	nRemaining < 2
444	nRemaining < MIN_MERGE
445	runLen < minRun
446	start == lo
447	pivot.compareTo(a[mid]) < 0
448	runHi == hi
449	((Comparable) a[runHi++]).compareTo(a[lo]) < 0
450	n > 0
450	runLen[n-1] <= runLen[n] + runLen[n+1]
451	runLen[n - 1] < runLen[n + 1]
452	runLen[n] <= runLen[n + 1]
453	n > 0
453	runLen[n - 1] < runLen[n + 1]
454	i == stackSize - 3
455	len1 == 0
456	len2 == 0
457	len1 <= len2
458	key.compareTo(a[base + hint]) > 0
459	ofs <= 0
460	ofs > maxOfs
461	ofs <= 0
462	ofs > maxOfs
463	key.compareTo(a[base + m]) > 0
464	key.compareTo(a[base + hint]) < 0
465	ofs <= 0
466	ofs > maxOfs
467	ofs <= 0
468	ofs > maxOfs
469	key.compareTo(a[base + m]) < 0
470	--len2 == 0
471	len1 == 1
472	((Comparable) a[cursor2]).compareTo(tmp[cursor1]) < 0
473	--len2 == 0
474	--len1 == 1
475	count1 != 0
476	len1 <= 1
477	--len2 == 0
478	count2 != 0
479	len2 == 0
480	--len1 == 1
481	minGallop < 0
482	len1 == 1
483	len1 == 0
484	--len1 == 0
485	len2 == 1
486	((Comparable) tmp[cursor2]).compareTo(a[cursor1]) < 0
487	--len1 == 0
488	--len2 == 1
489	count1 != 0
490	len1 == 0
491	--len2 == 1
492	count2 != 0
493	len2 <= 1
494	--len1 == 0
495	minGallop < 0
496	len2 == 1
497	len2 == 0
498	tmp.length < minCapacity
499	newSize < 0
500	fromIndex > toIndex
501	fromIndex < 0
502	toIndex > arrayLen
5531	acc == null
5532	op == ComponentPeer.RESET_OPERATION
5533	boundsOp == ComponentPeer.DEFAULT_OPERATION
5534	name == null
5534	nameExplicitlySet
5535	nameExplicitlySet
5535	name == null
5536	dt == dropTarget
5536	dropTarget.equals(dt)
5536	dropTarget != null
5537	(old = dropTarget) != null
5538	peer != null
5539	(dropTarget = dt) != null
5540	peer != null
5541	old != null
5542	peer != null
5543	updateGraphicsData(gc)
5544	peer != null
5545	graphicsConfig != null
5546	graphicsConfig.getDevice().getIDstring().equals(stringID)
5547	Thread.holdsLock(getTreeLock())
5548	peer != null
5548	peer instanceof LightweightPeer
5549	parent != null
5550	isShowing()
5551	Toolkit.getDefaultToolkit().getMouseInfoPeer().isWindowUnderMouse(win)
5552	GraphicsEnvironment.isHeadless()
5553	isSameOrAncestorOf(inTheSameWindow, true)
5554	peer != null
5554	visible
5555	enabled
5556	peer != null
5557	visible
5558	accessibleContext != null
5559	b
5560	enabled
5561	KeyboardFocusManager.isAutoFocusTransferEnabled()
5561	isFocusOwner()
5561	isLightweight()
5561	containsFocus()
5562	peer != null
5563	visible
5564	accessibleContext != null
5565	enable
5566	(eventMask & AWTEvent.INPUT_METHODS_ENABLED_MASK) != 0
5567	isFocusOwner()
5568	inputContext != null
5569	(eventMask & AWTEvent.INPUT_METHODS_ENABLED_MASK) != 0
5570	inputContext != null
5571	visible
5572	peer != null
5573	peer instanceof LightweightPeer
5574	componentListener != null
5574	(eventMask & AWTEvent.COMPONENT_EVENT_MASK) != 0
5574	Toolkit.enabledOnToolkit(AWTEvent.COMPONENT_EVENT_MASK)
5575	parent != null
5576	b
5577	visible
5578	KeyboardFocusManager.isAutoFocusTransferEnabled()
5578	containsFocus()
5579	peer != null
5580	peer instanceof LightweightPeer
5581	(eventMask & AWTEvent.COMPONENT_EVENT_MASK) != 0
5581	Toolkit.enabledOnToolkit(AWTEvent.COMPONENT_EVENT_MASK)
5581	componentListener != null
5582	parent != null
5583	foreground != null
5584	peer != null
5585	c != null
5586	background != null
5587	peer != null
5588	c != null
5589	font != null
5590	peer != null
5591	f != null
5592	oldFont == null
5592	oldFont.equals(f)
5592	f != oldFont
5593	locale != null
5594	parent == null
5595	peer != null
5595	peer instanceof LightweightPeer
5596	GraphicsEnvironment.isHeadless()
5597	isShowing()
5597	peer != null
5598	peer instanceof LightweightPeer
5599	resized
5599	moved
5600	resized
5601	peer != null
5602	peer instanceof LightweightPeer
5603	this instanceof Window
5604	resized
5605	parent != null
5606	needNotify
5607	parent != null
5607	isShowing()
5607	peer instanceof LightweightPeer
5608	(eventMask & AWTEvent.COMPONENT_EVENT_MASK) != 0
5608	Toolkit.enabledOnToolkit(AWTEvent.COMPONENT_EVENT_MASK)
5608	componentListener != null
5609	resized
5610	moved
5611	((Container)this).countComponents() > 0
5611	this instanceof Container
5612	resized
5613	moved
5614	rv == null
5615	rv == null
5616	rv == null
5617	getPeer() == null
5618	prefSizeSet
5619	isPreferredSizeSet()
5619	dim == null
5619	isValid()
5620	minSizeSet
5621	isMinimumSizeSet()
5621	dim == null
5621	isValid()
5622	maxSizeSet
5623	isMaximumSizeSet()
5624	width < 0
5624	height < 0
5625	wasValid
5625	peer != null
5626	newfont != oldfont
5626	oldfont == null
5626	oldfont.equals(newfont)
5627	wasValid
5628	isPreferredSizeSet()
5629	isMinimumSizeSet()
5630	isMaximumSizeSet()
5631	parent != null
5632	isValid()
5633	root == null
5634	root.getContainer() == null
5635	peer instanceof LightweightPeer
5636	parent == null
5637	g == null
5638	g instanceof ConstrainableGraphics
5639	peer instanceof LightweightPeer
5640	parent == null
5641	g == null
5642	g instanceof ConstrainableGraphics
5643	fm instanceof SunFontManager
5643	((SunFontManager) fm).usePlatformFontMetrics()
5644	peer != null
5644	peer instanceof LightweightPeer
5645	peer instanceof LightweightPeer
5646	nativeContainer == null
5647	cPeer != null
5648	peer != null
5649	cursor != null
5650	parent != null
5651	isShowing()
5652	this.peer instanceof LightweightPeer
5653	parent != null
5654	x < 0
5655	y < 0
5656	pwidth <= 0
5656	pheight <= 0
5657	width > 0
5657	height > 0
5657	isVisible()
5657	this.peer != null
5658	isShowing()
5659	peer instanceof ContainerPeer
5660	(infoflags & (FRAMEBITS|ALLBITS)) != 0
5661	(infoflags & SOMEBITS) != 0
5662	isInc
5663	rate < 0
5664	rate >= 0
5665	peer instanceof LightweightPeer
5665	peer != null
5666	peer instanceof LightweightPeer
5667	parent != null
5668	peer instanceof LightweightPeer
5669	parent != null
5670	peer instanceof LightweightPeer
5671	peer instanceof LightweightPeer
5672	numBuffers > 1
5673	numBuffers < 1
5674	caps == null
5675	bufferStrategy != null
5676	numBuffers == 1
5677	sge.isFlipStrategyPreferred(peer)
5677	caps.isPageFlipping()
5678	caps.isPageFlipping()
5679	bufferStrategy != null
5680	bufferStrategy instanceof BltBufferStrategy
5681	bufferStrategy instanceof FlipBufferStrategy
5682	compContext != null
5682	compContext.equals(AppContext.getAppContext())
5683	eventLog.isLoggable(PlatformLogger.FINE)
5684	eventLog.isLoggable(PlatformLogger.FINEST)
5685	e instanceof SunDropTargetEvent
5686	e.focusManagerIsDispatching
5687	e.isPosted
5688	KeyboardFocusManager.getCurrentKeyboardFocusManager(). dispatchEvent(e)
5689	e instanceof FocusEvent
5689	focusLog.isLoggable(PlatformLogger.FINEST)
5690	peer.handlesWheelScrolling()
5690	dispatchMouseWheelToAncestor((MouseWheelEvent)e)
5690	id == MouseEvent.MOUSE_WHEEL
5690	peer != null
5690	eventTypeEnabled(id)
5691	e.isConsumed()
5692	e instanceof java.awt.event.KeyEvent
5693	e.isConsumed()
5694	areInputMethodsEnabled()
5695	e instanceof InputMethodEvent
5695	e instanceof FocusEvent
5695	this instanceof CompositionArea
5695	e instanceof InputEvent
5696	inputContext != null
5697	e.isConsumed()
5698	e instanceof FocusEvent
5698	focusLog.isLoggable(PlatformLogger.FINEST)
5699	id == FocusEvent.FOCUS_GAINED
5700	inputContext instanceof sun.awt.im.InputContext
5700	inputContext != null
5701	p != null
5702	e.isConsumed()
5703	focusLog.isLoggable(PlatformLogger.FINEST)
5704	toolkit instanceof WindowClosingListener
5705	checkWindowClosingException()
5706	newEventsOnly
5707	eventEnabled(e)
5708	id == MouseEvent.MOUSE_WHEEL
5709	e instanceof MouseEvent
5709	postsOldMouseEvents()
5710	olde != null
5711	olde.isConsumed()
5712	olde.key != key
5713	olde.modifiers != modifiers
5714	id == WindowEvent.WINDOW_CLOSING
5714	e.isConsumed()
5715	toolkit instanceof WindowClosingListener
5716	checkWindowClosingException()
5717	e instanceof KeyEvent
5718	tpeer instanceof LightweightPeer
5718	tpeer == null
5718	e instanceof FocusEvent
5719	source != null
5720	target != null
5721	tpeer != null
5722	eventLog.isLoggable(PlatformLogger.FINEST)
5723	anc instanceof Window
5724	eventLog.isLoggable(PlatformLogger.FINEST)
5725	anc.eventEnabled(e)
5725	anc != null
5726	newMWE.isConsumed()
5727	windowClosingException != null
5728	this instanceof Dialog
5729	(eventMask & AWTEvent.COMPONENT_EVENT_MASK) != 0
5729	componentListener != null
5730	(eventMask & AWTEvent.FOCUS_EVENT_MASK) != 0
5730	focusListener != null
5731	keyListener != null
5731	(eventMask & AWTEvent.KEY_EVENT_MASK) != 0
5732	mouseListener != null
5732	(eventMask & AWTEvent.MOUSE_EVENT_MASK) != 0
5733	mouseMotionListener != null
5733	(eventMask & AWTEvent.MOUSE_MOTION_EVENT_MASK) != 0
5734	mouseWheelListener != null
5734	(eventMask & AWTEvent.MOUSE_WHEEL_EVENT_MASK) != 0
5735	(eventMask & AWTEvent.INPUT_METHOD_EVENT_MASK) != 0
5735	inputMethodListener != null
5736	(eventMask & AWTEvent.HIERARCHY_EVENT_MASK) != 0
5736	hierarchyListener != null
5737	hierarchyBoundsListener != null
5737	(eventMask & AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK) != 0
5738	(eventMask & AWTEvent.ACTION_EVENT_MASK) != 0
5739	(eventMask & AWTEvent.TEXT_EVENT_MASK) != 0
5740	(eventMask & AWTEvent.ITEM_EVENT_MASK) != 0
5741	(eventMask & AWTEvent.ADJUSTMENT_EVENT_MASK) != 0
5742	type > AWTEvent.RESERVED_ID_MAX
5743	handleEvent(e)
5744	parent != null
5745	parent.postEvent(e)
5746	l == null
5747	l == null
5748	l == null
5749	peer instanceof LightweightPeer
5750	l == null
5751	l == null
5752	notifyAncestors
5753	l == null
5754	notifyAncestors
5755	l == null
5756	notifyAncestors
5757	l == null
5758	notifyAncestors
5759	eventLog.isLoggable(PlatformLogger.FINE)
5760	mask != AWTEvent.HIERARCHY_EVENT_MASK
5760	mask != AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK
5761	mask == AWTEvent.HIERARCHY_EVENT_MASK
5761	(eventMask & AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK) != 0
5761	(eventMask & AWTEvent.HIERARCHY_EVENT_MASK) != 0
5761	hierarchyListener != null
5761	mask == AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK
5761	hierarchyBoundsListener != null
5762	(eventMask & AWTEvent.HIERARCHY_EVENT_MASK) != 0
5762	hierarchyListener != null
5762	enabledOnToolkit
5763	eventLog.isLoggable(PlatformLogger.FINE)
5764	changeFlags != 0
5765	hierarchyBoundsListener != null
5765	(eventMask & AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK) != 0
5765	enabledOnToolkit
5766	eventLog.isLoggable(PlatformLogger.FINE)
5767	parent != null
5768	l == null
5769	peer instanceof LightweightPeer
5770	l == null
5771	l == null
5772	peer instanceof LightweightPeer
5773	l == null
5774	l == null
5775	peer instanceof LightweightPeer
5776	l == null
5777	l == null
5778	peer instanceof LightweightPeer
5779	l == null
5780	l == null
5781	l == null
5782	listenerType == ComponentListener.class
5783	listenerType == FocusListener.class
5784	listenerType == HierarchyListener.class
5785	listenerType == HierarchyBoundsListener.class
5786	listenerType == KeyListener.class
5787	listenerType == MouseListener.class
5788	listenerType == MouseMotionListener.class
5789	listenerType == MouseWheelListener.class
5790	listenerType == InputMethodListener.class
5791	listenerType == PropertyChangeListener.class
5792	parent == null
5793	(eventsToEnable & AWTEvent.HIERARCHY_EVENT_MASK) != 0
5793	(eventMask & AWTEvent.HIERARCHY_EVENT_MASK) == 0
5793	hierarchyListener == null
5794	(eventMask & AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK) == 0
5794	hierarchyBoundsListener == null
5794	(eventsToEnable & AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK) != 0
5795	peer instanceof LightweightPeer
5796	notifyAncestors != 0
5797	(eventMask & AWTEvent.HIERARCHY_EVENT_MASK) != 0
5797	(eventsToDisable & AWTEvent.HIERARCHY_EVENT_MASK) != 0
5797	hierarchyListener == null
5798	(eventsToDisable & AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK)!=0
5798	hierarchyBoundsListener == null
5798	(eventMask & AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK) != 0
5799	notifyAncestors != 0
5800	getClass().getClassLoader()==null
5801	value != null
5802	e instanceof FocusEvent
5803	e instanceof MouseEvent
5804	e instanceof KeyEvent
5805	e instanceof ComponentEvent
5806	e instanceof InputMethodEvent
5807	e instanceof HierarchyEvent
5808	listener != null
5809	listener != null
5810	listener != null
5811	listener != null
5812	listener != null
5813	listener != null
5814	listener != null
5815	listener != null
5816	listener != null
5817	peer instanceof LightweightPeer
5817	peer == null
5818	peer == null
5819	parent != null
5820	mouseListener != null
5820	(eventMask & AWTEvent.MOUSE_EVENT_MASK) != 0
5821	(eventMask & AWTEvent.MOUSE_MOTION_EVENT_MASK) != 0
5821	mouseMotionListener != null
5822	mouseWheelListener != null
5822	(eventMask & AWTEvent.MOUSE_WHEEL_EVENT_MASK) != 0
5823	focusListener != null
5823	(eventMask & AWTEvent.FOCUS_EVENT_MASK) != 0
5824	(eventMask & AWTEvent.KEY_EVENT_MASK) != 0
5824	keyListener != null
5825	mask != 0
5826	parent.isLightweight()
5826	parent != null
5827	parent.isRecursivelyVisibleUpToHeavyweightContainer()
5828	dropTarget != null
5829	isAddNotifyComplete
5829	getContainer() != null
5830	isAddNotifyComplete
5831	Toolkit.enabledOnToolkit(AWTEvent.HIERARCHY_EVENT_MASK)
5831	hierarchyListener != null
5831	(eventMask & AWTEvent.HIERARCHY_EVENT_MASK) != 0
5832	KeyboardFocusManager.getCurrentKeyboardFocusManager(). getPermanentFocusOwner() == this
5833	isFocusOwner()
5833	KeyboardFocusManager.isAutoFocusTransferEnabledFor(this)
5834	getContainer() != null
5834	isAddNotifyComplete
5835	(eventMask & AWTEvent.INPUT_METHODS_ENABLED_MASK) != 0
5836	inputContext != null
5837	p != null
5838	bufferStrategy instanceof FlipBufferStrategy
5839	dropTarget != null
5840	visible
5841	Toolkit.enabledOnToolkit(AWTEvent.HIERARCHY_EVENT_MASK)
5841	hierarchyListener != null
5841	(eventMask & AWTEvent.HIERARCHY_EVENT_MASK) != 0
5842	isFocusTraversableOverridden == FOCUS_TRAVERSABLE_UNKNOWN
5843	oldFocusable
5843	focusable
5844	isFocusOwner()
5844	KeyboardFocusManager.isAutoFocusTransferEnabled()
5845	id < 0
5845	id >= KeyboardFocusManager.TRAVERSAL_KEY_LENGTH - 1
5846	id < 0
5846	id >= KeyboardFocusManager.TRAVERSAL_KEY_LENGTH - 1
5847	focusTraversalKeys == null
5848	keystrokes != null
5849	obj == null
5850	obj instanceof AWTKeyStroke
5851	keystroke.getKeyChar() != KeyEvent.CHAR_UNDEFINED
5852	i == id
5853	getFocusTraversalKeys_NoIDCheck(i).contains(keystroke)
5854	keystrokes != null
5855	parent != null
5856	id < 0
5856	id >= KeyboardFocusManager.TRAVERSAL_KEY_LENGTH - 1
5857	isRequestFocusAccepted(temporary, focusedWindowChangeAllowed, cause)
5858	focusLog.isLoggable(PlatformLogger.FINEST)
5859	window.isVisible()
5860	focusLog.isLoggable(PlatformLogger.FINEST)
5861	heavyweight == null
5861	heavyweight.isVisible()
5862	focusLog.isLoggable(PlatformLogger.FINEST)
5863	peer == null
5864	focusLog.isLoggable(PlatformLogger.FINEST)
5865	success
5866	focusLog.isLoggable(PlatformLogger.FINEST)
5867	focusLog.isLoggable(PlatformLogger.FINEST)
5868	isVisible()
5868	isFocusable()
5869	focusLog.isLoggable(PlatformLogger.FINEST)
5870	peer == null
5871	focusLog.isLoggable(PlatformLogger.FINEST)
5872	window == null
5872	((Window)window).isFocusableWindow()
5873	focusLog.isLoggable(PlatformLogger.FINEST)
5874	focusOwner == null
5875	focusOwner.getContainingWindow() != window
5875	focusOwner != null
5876	focusOwner == this
5876	focusOwner == null
5877	focusLog.isLoggable(PlatformLogger.FINEST)
5878	CausedFocusEvent.Cause.ACTIVATION == cause
5879	focusLog.isLoggable(PlatformLogger.FINEST)
5880	focusLog.isLoggable(PlatformLogger.FINEST)
5881	requestController == null
5882	focusLog.isLoggable(PlatformLogger.FINER)
5883	toFocus != null
5883	toFocus.isFocusOwner()
5883	toFocus != this
5884	clearOnFailure
5884	res
5885	focusLog.isLoggable(PlatformLogger.FINER)
5886	focusLog.isLoggable(PlatformLogger.FINER)
5887	focusLog.isLoggable(PlatformLogger.FINER)
5888	rootAncestor != null
5889	focusLog.isLoggable(PlatformLogger.FINER)
5890	toFocus == null
5891	focusLog.isLoggable(PlatformLogger.FINER)
5892	toFocus == null
5893	applet != null
5894	focusLog.isLoggable(PlatformLogger.FINER)
5895	rootAncestor != null
5896	toFocus == null
5897	toFocus != null
5898	clearOnFailure
5898	res
5899	focusLog.isLoggable(PlatformLogger.FINER)
5900	focusLog.isLoggable(PlatformLogger.FINER)
5901	rootAncestor != null
5902	window != null
5903	toFocus != null
5904	popup.parent != null
5905	popups == null
5906	peer != null
5907	popup.peer == null
5908	popups == null
5909	index >= 0
5910	pmenu.peer != null
5911	popups.size() == 0
5912	isValid()
5913	visible
5914	enabled
5915	listener == null
5916	changeSupport == null
5917	changeSupport == null
5917	listener == null
5918	changeSupport == null
5919	listener == null
5920	changeSupport == null
5921	changeSupport == null
5921	listener == null
5922	changeSupport == null
5923	oldValue.equals(newValue)
5923	oldValue != null
5923	newValue != null
5923	changeSupport == null
5924	oldValue == newValue
5924	changeSupport == null
5925	changeSupport == null
5925	oldValue == newValue
5926	changeSupport == null
5926	oldValue == newValue
5927	oldValue == newValue
5927	changeSupport == null
5928	oldValue == newValue
5928	changeSupport == null
5929	oldValue == newValue
5929	changeSupport == null
5930	changeSupport == null
5930	oldValue == newValue
5931	oldValue == newValue
5931	changeSupport == null
5932	klass.getClassLoader() == null
5932	klass.getPackage() == swingPackage
5933	method.getName().equals("compWriteObjectNotify")
5934	componentSerializedDataVersion < 4
5935	componentListenerK == key
5936	focusListenerK == key
5937	keyListenerK == key
5938	mouseListenerK == key
5939	mouseMotionListenerK == key
5940	inputMethodListenerK == key
5941	e.eof
5942	orient != null
5943	hierarchyListenerK == key
5944	hierarchyBoundsListenerK == key
5945	e.eof
5946	mouseWheelListenerK == key
5947	e.eof
5948	popups != null
5949	orientation == null
5950	isVisible()
5950	isDisplayable()
5950	isFocusable()
5950	isEnabled()
5951	canBeFocusOwner()
5952	parent != null
5953	peer == null
5954	parent != null
5954	parent instanceof Accessible
5955	ca[i] instanceof Accessible
5956	this.equals(ca[i])
5957	this.isEnabled()
5958	this.isFocusTraversable()
5959	this.isVisible()
5960	this.isShowing()
5961	this.isFocusOwner()
5962	this instanceof Accessible
5963	ac != null
5964	ap != null
5965	pac != null
5966	as != null
5967	i >= 0
5968	as.isAccessibleChildSelected(i)
5969	Component.isInstanceOf(this, "javax.swing.JComponent")
5970	((javax.swing.JComponent) this).isOpaque()
5971	obj == null
5972	className == null
5973	cls.getName().equals(className)
5974	areBoundsValid()
5975	mixingLog.isLoggable(PlatformLogger.FINE)
5976	isLightweight()
5977	peer != null
5978	shape.isEmpty()
5979	shape.equals(getNormalShape())
5980	this.compoundShape == null
5981	shape.equals(getAppliedShape())
5982	mixingLog.isLoggable(PlatformLogger.FINER)
5983	mixingCutoutRegion != null
5984	parent == null
5985	comp.isLightweight()
5985	comp != null
5985	comp.isDisplayable()
5986	cont.isLightweight()
5987	parent == null
5988	mixingLog.isLoggable(PlatformLogger.FINE)
5989	getContainer() != null
5990	c.isShowing()
5990	c.isLightweight()
5991	cont.isLightweight()
5992	mixingLog.isLoggable(PlatformLogger.FINE)
5993	areBoundsValid()
5994	mixingLog.isLoggable(PlatformLogger.FINE)
5995	mixingLog.isLoggable(PlatformLogger.FINE)
5996	mixingLog.isLoggable(PlatformLogger.FINE)
5997	parent.isShowing()
5997	parent != null
5998	isShowing()
5998	parent != null
5999	mixingLog.isLoggable(PlatformLogger.FINE)
6000	isMixingNeeded()
6001	isLightweight()
6002	mixingLog.isLoggable(PlatformLogger.FINE)
6003	isMixingNeeded()
6004	isLightweight
6005	mixingLog.isLoggable(PlatformLogger.FINE)
6006	isMixingNeeded()
6007	isLightweight()
6008	mixingLog.isLoggable(PlatformLogger.FINE)
6009	isMixingNeeded()
6010	isLightweight()
6011	becameHigher
6012	parent != null
6012	isShowing()
6013	parent != null
6014	becameHigher
6015	parent != null
6016	c.isShowing()
6016	c.isLightweight()
6017	SunToolkit.getSunAwtDisableMixing()
6018	mixingLog.isLoggable(PlatformLogger.FINEST)
6019	areBoundsValid()
6020	mixingLog.isLoggable(PlatformLogger.FINE)
6021	window != null
6022	window.hasHeavyweightDescendants()
6022	window.isDisposing()
6022	window.hasLightweightDescendants()
6023	mixingLog.isLoggable(PlatformLogger.FINE)
6024	mixingLog.isLoggable(PlatformLogger.FINE)
8120	hasAlpha
8121	origBits != null
8122	hasAlpha
8123	is_sRGB
8124	ColorModel.isLinearRGBspace(colorSpace)
8125	transferType == DataBuffer.TYPE_BYTE
8126	colorSpace.getMaxValue(0) == 1.0f
8126	colorSpace.getMinValue(0) == 0.0f
8126	colorSpaceType == ColorSpace.TYPE_GRAY
8126	colorSpace instanceof ICC_ColorSpace
8127	ColorModel.isLinearGRAYspace(ics)
8128	transferType == DataBuffer.TYPE_BYTE
8129	transferType == DataBuffer.TYPE_BYTE
8130	needScaleInit
8131	colorSpace.getMaxValue(i) != 1.0f
8131	colorSpace.getMinValue(i) != 0.0f
8132	nonStdScale
8133	nonStdScale
8133	signed
8134	supportsAlpha
8135	supportsAlpha
8136	supportsAlpha
8137	supportsAlpha
8138	highVal[i] != 1.0f
8138	lowVal[i] != 0.0f
8139	nonStdScale
8140	numComponents > 1
8141	signed
8142	needScaleInit
8143	supportsAlpha == false
8144	numComponents > 1
8145	signed
8146	numComponents > 1
8147	signed
8148	needAlpha
8149	s != (short) 0
8150	needAlpha
8151	f != 0.0f
8152	needAlpha
8153	d != 0.0
8154	needAlpha
8155	needAlpha
8156	needAlpha
8157	needAlpha
8158	alp != 0
8159	nBits[idx] != precision
8160	needScaleInit
8161	is_sRGB_stdScale
8162	is_LinearRGB_stdScale
8163	is_ICCGray_stdScale
8164	supportsAlpha == false
8165	nBits[aIdx] == 8
8166	needScaleInit
8167	is_LinearRGB_stdScale
8167	is_sRGB_stdScale
8168	colorSpaceType == ColorSpace.TYPE_GRAY
8169	needScaleInit
8170	signed
8171	pixel == null
8172	is_sRGB_stdScale
8172	is_LinearRGB_stdScale
8173	is_LinearRGB_stdScale
8174	supportsAlpha
8175	isAlphaPremultiplied
8176	is_LinearGray_stdScale
8177	supportsAlpha
8178	isAlphaPremultiplied
8179	is_ICCGray_stdScale
8180	supportsAlpha
8181	isAlphaPremultiplied
8182	nonStdScale
8183	norm[i] < 0.0f
8184	norm[i] > 1.0f
8185	supportsAlpha
8186	isAlphaPremultiplied
8187	pixel == null
8188	is_LinearRGB_stdScale
8188	is_sRGB_stdScale
8189	is_LinearRGB_stdScale
8190	supportsAlpha
8191	isAlphaPremultiplied
8192	is_LinearGray_stdScale
8193	supportsAlpha
8194	isAlphaPremultiplied
8195	is_ICCGray_stdScale
8196	supportsAlpha
8197	isAlphaPremultiplied
8198	supportsAlpha
8199	isAlphaPremultiplied
8200	pixel == null
8201	is_sRGB_stdScale
8201	is_LinearRGB_stdScale
8202	is_LinearRGB_stdScale
8203	supportsAlpha
8204	isAlphaPremultiplied
8205	is_LinearGray_stdScale
8206	supportsAlpha
8207	isAlphaPremultiplied
8208	is_ICCGray_stdScale
8209	supportsAlpha
8210	isAlphaPremultiplied
8211	supportsAlpha
8212	isAlphaPremultiplied
8213	transferType == DataBuffer.TYPE_INT
8213	pixel != null
8214	is_sRGB_stdScale
8214	is_LinearRGB_stdScale
8215	is_LinearRGB_stdScale
8216	transferType == DataBuffer.TYPE_BYTE
8217	supportsAlpha
8218	nBits[3] == 8
8219	isAlphaPremultiplied
8220	nBits[0] == precision
8221	nBits[1] == precision
8222	nBits[2] == precision
8223	is_LinearGray_stdScale
8224	supportsAlpha
8225	nBits[1] == 8
8226	isAlphaPremultiplied
8227	is_ICCGray_stdScale
8228	supportsAlpha
8229	nBits[1] == 8
8230	isAlphaPremultiplied
8231	nonStdScale
8232	norm[i] < 0.0f
8233	norm[i] > 1.0f
8234	supportsAlpha
8235	nBits[numColorComponents] == 8
8236	isAlphaPremultiplied
8237	pixel == null
8238	pixel == null
8239	maxBits > 23
8240	intpixel[i] > ((1<<nBits[i]) - 1)
8241	numComponents > 1
8242	needScaleInit
8243	noUnnorm
8244	components == null
8245	needScaleInit
8246	noUnnorm
8247	pixel instanceof int[]
8248	intpixel == null
8249	intpixel.length < numComponents
8250	components == null
8251	(components.length-offset) < numComponents
8252	needScaleInit
8253	noUnnorm
8254	needScaleInit
8255	noUnnorm
8256	needScaleInit
8257	numComponents == 1
8258	noUnnorm
8259	needScaleInit
8260	noUnnorm
8261	(components.length-offset) < numComponents
8262	obj == null
8263	obj == null
8264	obj == null
8265	numComponents > 1
8266	signed
8267	needScaleInit
8268	needScaleInit
8269	nonStdScale
8270	stdNormComponents[c] < 0.0f
8271	stdNormComponents[c] > 1.0f
8272	supportsAlpha
8273	obj == null
8274	needAlpha
8275	obj == null
8276	needAlpha
8277	obj == null
8278	needAlpha
8279	obj == null
8280	needAlpha
8281	obj == null
8282	needAlpha
8283	obj == null
8284	needAlpha
8285	normComponents == null
8286	isAlphaPremultiplied
8286	supportsAlpha
8287	alpha != 0.0f
8288	min != null
8289	supportsAlpha == false
8289	this.isAlphaPremultiplied == isAlphaPremultiplied
8290	isAlphaPremultiplied
8291	normAlpha != 0.0f
8292	zpixel == null
8293	normAlpha != 0.0f
8294	zpixel == null
8295	normAlpha != 0.0f
8296	zpixel == null
8297	normAlpha != 0.0f
8298	zpixel == null
8299	normAlpha != 0.0f
8300	zpixel == null
8301	dnormAlpha != 0.0
8302	zpixel == null
8303	normAlpha != 0.0f
8304	normAlpha != 0.0f
8305	normAlpha != 0.0f
8306	normAlpha != 0.0f
8307	normAlpha != 0.0f
8308	dnormAlpha != 0.0
8309	signed
8310	sm instanceof ComponentSampleModel
8311	sm.getNumBands() != getNumComponents()
8312	sm.getSampleSize(i) < nBits[i]
8313	sm instanceof ComponentSampleModel
8314	numComponents != sm.getNumBands()
8315	sm.getTransferType() != transferType
8316	hasAlpha() == false
8317	super.equals(obj)
8318	obj.getClass() != getClass()
9624	"iw".equals(lang)
9624	"fa".equals(lang)
9624	"ar".equals(lang)
9624	"ur".equals(lang)
9625	result == null
9626	result == null
8713	pixelStride < 0
8714	scanlineStride < 0
8715	numBands < 1
8716	dataType < DataBuffer.TYPE_BYTE
8716	dataType > DataBuffer.TYPE_DOUBLE
8717	pixelStride < 0
8718	scanlineStride < 0
8719	dataType < DataBuffer.TYPE_BYTE
8719	dataType > DataBuffer.TYPE_DOUBLE
8720	maxBank < 0
8721	this.bankIndices[i] > maxBank
8722	this.bankIndices[i] < 0
8723	this.bandOffsets.length != this.bankIndices.length
8724	maxBandOff >= 0
8725	pixelStride > 0
8726	scanlineStride > 0
8727	orig[map[index]] > orig[map[j]]
8728	pStride > lStride
8729	pStride > bStride
8730	lStride > bStride
8731	pStride > bStride
8732	lStride > bStride
8733	scanlineStride < 0
8734	pixelStride < 0
8735	bands.length > bankIndices.length
8736	y < 0
8736	y >= height
8736	x >= width
8736	x < 0
8737	obj == null
8738	obj == null
8739	obj == null
8740	obj == null
8741	obj == null
8742	x < 0
8742	x >= width
8742	y < 0
8742	y >= height
8743	iArray != null
8744	x1 < 0
8744	y1 > height
8744	w > width
8744	y < 0
8744	y >= height
8744	y > height
8744	x1 > width
8744	y1 < 0
8744	x >= width
8744	x < 0
8745	iArray != null
8746	y >= height
8746	x < 0
8746	x >= width
8746	y < 0
8747	x < 0
8747	y >= height
8747	y < 0
8747	x >= width
8748	x < 0
8748	y < 0
8748	x >= width
8748	y >= height
8749	x + w > width
8749	x < 0
8749	y + h > height
8749	y < 0
8750	iArray != null
8751	y < 0
8751	y >= height
8751	x >= width
8751	x < 0
8752	y >= height
8752	y < 0
8752	x < 0
8752	x >= width
8753	x < 0
8753	y1 < 0
8753	x >= width
8753	w > width
8753	y1 > height
8753	x1 < 0
8753	y >= height
8753	y < 0
8753	x1 > width
8753	h > height
8754	x < 0
8754	x >= width
8754	y >= height
8754	y < 0
8755	x < 0
8755	y < 0
8755	x >= width
8755	y >= height
8756	y < 0
8756	x >= width
8756	y >= height
8756	x < 0
8757	x < 0
8757	x + w > width
8757	y + h > height
8757	y < 0
8758	o instanceof ComponentSampleModel
8758	o == null
2563	Holder.ALTERNATIVE_HASHING
2563	sun.misc.VM.isBooted()
2564	k instanceof String
2564	0 != h
2565	(seg = (Segment<K,V>)UNSAFE.getObjectVolatile(ss, u)) == null
2566	(seg = (Segment<K,V>)UNSAFE.getObjectVolatile(ss, u)) == null
2567	UNSAFE.compareAndSwapObject(ss, u, null, seg = s)
2568	initialCapacity < 0
2568	loadFactor > 0
2568	concurrencyLevel <= 0
2569	concurrencyLevel > MAX_SEGMENTS
2570	initialCapacity > MAXIMUM_CAPACITY
2571	c * ssize < initialCapacity
2572	seg != null
2573	seg.count != 0
2574	sum != 0L
2575	seg != null
2576	seg.count != 0
2577	sum != 0L
2578	retries++ == RETRIES_BEFORE_LOCK
2579	seg != null
2580	(size += c) < 0
2580	c < 0
2581	sum == last
2582	retries > RETRIES_BEFORE_LOCK
2583	(tab = s.table) != null
2583	(s = (Segment<K,V>)UNSAFE.getObjectVolatile(segments, u)) != null
2584	(k = e.key) == key
2584	e.hash == h
2584	key.equals(k)
2585	(s = (Segment<K,V>)UNSAFE.getObjectVolatile(segments, u)) != null
2585	(tab = s.table) != null
2586	key.equals(k)
2586	(k = e.key) == key
2586	e.hash == h
2587	value == null
2588	retries++ == RETRIES_BEFORE_LOCK
2589	seg != null
2589	(tab = seg.table) != null
2590	value.equals(v)
2590	v != null
2591	retries > 0
2591	sum == last
2592	retries > RETRIES_BEFORE_LOCK
2593	value == null
2594	(s = (Segment<K,V>)UNSAFE.getObject // nonvolatile; recheck (segments, (j << SSHIFT) + SBASE)) == null
2595	value == null
2596	(s = (Segment<K,V>)UNSAFE.getObject (segments, (j << SSHIFT) + SBASE)) == null
2597	newValue == null
2597	oldValue == null
2598	value == null
2599	s != null
2600	ssize > MAX_SEGMENTS
2600	ssize < 1
2600	(ssize & (ssize-1)) != 0
2601	seg != null
2602	key == null
2384	(q = p.prev) != null
2384	(q = (p = q).prev) != null
2385	p.next == p
2386	p.casPrev(null, newNode)
2387	p != h
2388	(q = (p = q).next) != null
2388	(q = p.next) != null
2389	p.prev == p
2390	p.casNext(null, newNode)
2391	p != t
2392	prev == null
2393	next == null
2394	p.item != null
2395	q == null
2396	p.next == p
2397	p == q
2398	p.item != null
2399	q == null
2400	p.prev == p
2401	p == q
2402	hops < HOPS
2402	isFirst | isLast
2403	isFirst ? activePred.prev == null : activePred.item != null
2403	isLast ? activeSucc.next == null : activeSucc.item != null
2403	activeSucc.prev == activePred
2403	isFirst | isLast
2403	activePred.next == activeSucc
2404	p.item != null
2404	(q = p.next) == null
2405	o != null
2405	p.prev != p
2405	first.casNext(next, p)
2406	first.prev == null
2406	p.item != null
2406	p.next == null
2406	p.prev == first
2407	p == q
2408	(q = p.prev) == null
2408	p.item != null
2409	p.next != p
2409	o != null
2409	last.casPrev(prev, p)
2410	last.next == null
2410	p.next == last
2410	p.item != null
2410	p.prev == null
2411	p == q
2412	(q = p.prev) == null
2412	(q = (p = q).prev) == null
2413	casHead(h, p)
2414	h != head
2415	(q = p.next) == null
2415	(q = (p = q).next) == null
2416	casTail(t, p)
2417	t != tail
2418	p.item != null
2419	q == null
2420	p.next == p
2421	p == q
2422	x.casPrev(prev, p)
2422	prev == p
2423	p.item != null
2424	q == null
2425	p.prev == p
2426	p == q
2427	x.casNext(next, p)
2427	next == p
2428	(q = p.prev) != null
2428	(q = (p = q).prev) != null
2429	casHead(h, p)
2429	p == h
2430	(q = p.next) != null
2430	(q = (p = q).next) != null
2431	p == t
2431	casTail(t, p)
2432	v == null
2433	v == null
2434	item != null
2435	h == null
2436	h == t
2437	h == null
2438	item != null
2439	item != null
2440	p.casItem(item, null)
2440	item != null
2441	item != null
2441	p.casItem(item, null)
2442	o.equals(item)
2442	item != null
2442	p.casItem(item, null)
2443	o.equals(item)
2443	p.casItem(item, null)
2443	item != null
2444	o == null
2445	o.equals(item)
2445	item != null
2446	p.item != null
2447	++count == Integer.MAX_VALUE
2448	c == this
2449	beginningOfTheEnd == null
2450	beginningOfTheEnd == null
2451	(q = p.next) != null
2451	(q = (p = q).next) != null
2452	p.prev == p
2453	p.casNext(null, beginningOfTheEnd)
2454	casTail(t, last)
2455	last.next == null
2456	item != null
2457	h == null
3151	h == null
3152	h == null
3153	casHead(h, p)
3153	h != p
3154	q == null
3155	p.casNext(null, newNode)
3156	p != t
3157	p == q
3158	p.casItem(item, null)
3158	item != null
3159	p != h
3160	(q = p.next) == null
3161	p == q
3162	(q = p.next) == null
3162	item != null
3163	p == q
3164	(q = p.next) == null
3164	hasItem
3165	p == q
3166	p.item != null
3167	++count == Integer.MAX_VALUE
3168	o == null
3169	o.equals(item)
3169	item != null
3170	o == null
3171	item != null
3171	p.casItem(item, null)
3171	o.equals(item)
3172	pred != null
3172	next != null
3173	c == this
3174	beginningOfTheEnd == null
3175	beginningOfTheEnd == null
3176	q == null
3177	p.casNext(null, beginningOfTheEnd)
3178	casTail(t, last)
3179	last.next == null
3180	p == q
3181	item != null
3182	item != null
3183	p == null
3184	k < a.length
3185	item != null
3186	item != null
3187	h == null
3188	h == null
3189	v == null
3190	key == null
3191	comparator != null
3192	cmp != null
3193	key == null
3194	key == null
3195	key == null
3196	r != null
3197	n.value == null
3198	q.unlink(r)
3199	key.compareTo(k) > 0
3200	d != null
3201	n == null
3202	n != b.next
3203	v == null
3204	v == n
3204	b.value == null
3205	c == 0
3206	c < 0
3207	n == null
3208	v != null
3209	n != null
3210	n != b.next
3211	v == null
3212	b.value == null
3212	v == n
3213	c > 0
3214	c == 0
3215	onlyIfAbsent
3215	n.casValue(v, value)
3216	b.casNext(n, z)
3217	level > 0
3218	(x & 0x80000001) != 0
3219	level <= max
3220	level <= oldLevel
3221	casHead(oldh, newh)
3222	key == null
3223	r != null
3224	n.value == null
3225	q.unlink(r)
3226	c > 0
3227	j == insertionLevel
3228	t.indexesDeletedNode()
3229	q.link(r, t)
3230	--insertionLevel == 0
3231	t.indexesDeletedNode()
3232	j < indexLevel
3232	--j >= insertionLevel
3233	n == null
3234	n != b.next
3235	v == null
3236	b.value == null
3236	v == n
3237	c < 0
3238	c > 0
3239	value != null
3239	value.equals(v)
3240	n.casValue(v, null)
3241	b.casNext(n, f)
3241	n.appendMarker(f)
3242	head.right == null
3243	h.right == null
3243	h.level > 3
3243	(e = (HeadIndex<K,V>)d.down) != null
3243	e.right == null
3243	casHead(h, d)
3243	d.right == null
3243	(d = (HeadIndex<K,V>)h.down) != null
3243	h.right != null
3244	n == null
3245	n.value != null
3246	n == null
3247	n != b.next
3248	v == null
3249	n.casValue(v, null)
3250	n.appendMarker(f)
3250	b.casNext(n, f)
3251	q.unlink(r)
3251	r.indexesDeletedNode()
3251	r != null
3252	(q = q.down) == null
3253	head.right == null
3254	(r = q.right) != null
3255	r.indexesDeletedNode()
3256	(d = q.down) != null
3257	n == null
3258	n != b.next
3259	v == null
3260	v == n
3260	b.value == null
3261	(r = q.right) != null
3262	r.indexesDeletedNode()
3263	r.node.next != null
3264	(d = q.down) != null
3265	n == null
3266	b.isBaseHeader()
3267	n != b.next
3268	v == null
3269	b.value == null
3269	v == n
3270	f != null
3271	n.casValue(v, null)
3272	n.appendMarker(f)
3272	b.casNext(n, f)
3273	head.right == null
3274	n == null
3275	n != b.next
3276	v == null
3277	b.value == null
3277	v == n
3278	c < 0
3278	c == 0
3278	(rel & LT) == 0
3278	(rel & EQ) != 0
3279	(rel & LT) != 0
3279	c <= 0
3280	n == null
3281	e != null
3282	map == null
3283	j > h.level
3284	v == null
3284	k == null
3285	j > 0
3286	i > h.level
3287	i < preds.size()
3288	v != null
3289	k == null
3290	v == null
3291	j > h.level
3292	j > 0
3293	i > h.level
3294	i < preds.size()
3295	value == null
3296	value == null
3297	v != null
3297	value.equals(v)
3298	n.getValidValue() != null
3299	o == this
3300	o instanceof Map
3301	e.getValue().equals(m.get(e.getKey()))
3302	k == null
3302	v.equals(get(k))
3302	v == null
3303	value == null
3304	key == null
3305	value == null
3306	oldValue == null
3306	newValue == null
3307	n == null
3308	v != null
3309	oldValue.equals(v)
3310	n.casValue(v, newValue)
3311	value == null
3312	n == null
3313	n.casValue(v, value)
3313	v != null
3314	n == null
3315	n == null
3316	fromKey == null
3316	toKey == null
3317	toKey == null
3318	fromKey == null
3319	n == null
3320	e != null
3321	n == null
3322	e != null
2823	o == this
2824	o instanceof Set
2825	remove(i.next())
12450	result != null
12451	result.length == 1
12452	result != null
12453	result.length == 1
12454	result != null
12455	set != null
12456	isConditionMet(src, index, locale, entry.getCondition())
12456	conditionLang == null
12456	conditionLang.equals(currentLang)
12457	conditionLang != null
12458	isCased(ch)
12459	isCased(ch)
12460	ch == 'I'
12461	cc == 0
12461	cc == COMBINING_CLASS_ABOVE
12462	isSoftDotted(ch)
12463	cc == 0
12463	cc == COMBINING_CLASS_ABOVE
12464	cc == COMBINING_CLASS_ABOVE
12465	cc == 0
12466	ch == '\u0307'
12467	cc == COMBINING_CLASS_ABOVE
12467	cc == 0
12468	type == Character.TITLECASE_LETTER
12468	type == Character.LOWERCASE_LETTER
12468	type == Character.UPPERCASE_LETTER
12469	ch >= 0x02B0
12469	ch <= 0x02B8
12470	ch >= 0x02C0
12470	ch <= 0x02C1
12471	ch >= 0x02E0
12471	ch <= 0x02E4
12472	ch == 0x0345
12473	ch == 0x037A
12474	ch >= 0x1D2C
12474	ch <= 0x1D61
12475	ch >= 0x2160
12475	ch <= 0x217F
12476	ch >= 0x24B6
12476	ch <= 0x24E9
13562	fmt.length() != 0
13563	ca != null
13564	fmt.length() != 0
13565	ioe == null
13566	ioe != null
13567	len < 0
13568	rcb[len-1] == '\r'
13569	rcb[len-1] == '\n'
13570	len > 0
13570	rcb[len-1] == '\r'
13571	len > 0
13572	zeroOut
13573	csname != null
13574	cs == null
11536	isFrozen
12133	genericInfo == null
12134	getSignature() != null
12135	getSignature() != null
12136	getSignature() != null
12136	(result = getGenericInfo().getExceptionTypes()).length > 0
12137	obj instanceof Constructor
12137	obj != null
12138	getDeclaringClass() == other.getDeclaringClass()
12139	params1.length == params2.length
12140	params1[i] != params2[i]
12141	mod != 0
12142	j < (params.length - 1)
12143	exceptions.length > 0
12144	k < (exceptions.length - 1)
12145	mod != 0
12146	typeparms.length > 0
12147	first
12148	j == params.length - 1
12148	isVarArgs()
12149	j < (params.length - 1)
12150	exceptions.length > 0
12151	k < (exceptions.length - 1)
12152	override
12153	Reflection.quickCheckMemberAccess(clazz, modifiers)
12154	(clazz.getModifiers() & Modifier.ENUM) != 0
12155	ca == null
12156	root != null
12157	tmp != null
12158	root != null
12159	annotationClass == null
12160	declaredAnnotations == null
12161	parameterAnnotations == null
12162	result.length != numParameters
12163	declaringClass.isEnum()
12163	declaringClass.isAnonymousClass()
12163	declaringClass.isLocalClass()
12164	(declaringClass.getModifiers() & Modifier.STATIC) == 0
12164	declaringClass.isMemberClass()
12164	result.length + 1 != numParameters
12164	declaringClass.isMemberClass()
7702	peer instanceof ContainerPeer
7703	comp instanceof Container
7704	cn == comp
7705	comp instanceof Window
7706	index > component.size()
7706	index < 0
7707	comp.parent == this
7708	index == component.size()
7709	thisTopLevel != compTopLevel
7710	thisGC != null
7711	needRemoveNotify
7712	newParent != this
7713	layoutMgr != null
7714	needRemoveNotify
7715	comp.parent == null
7716	containerListener != null
7716	(eventMask & AWTEvent.CONTAINER_EVENT_MASK) != 0
7716	Toolkit.enabledOnToolkit(AWTEvent.CONTAINER_EVENT_MASK)
7717	peer != null
7717	isVisible()
7717	layoutMgr == null
7718	isFocusable()
7718	isDisplayable()
7718	isVisible()
7718	isEnabled()
7719	isFocusCycleRoot()
7720	policy instanceof DefaultFocusTraversalPolicy
7721	((DefaultFocusTraversalPolicy)policy).accept(focusOwnerCandidate)
7722	parent != null
7723	peer != null
7723	peer instanceof LightweightPeer
7724	oldContainer == null
7725	comp.peer == null
7726	newContainer.peer == null
7727	comp.isLightweight()
7728	isContainer
7728	((Container)comp).hasHeavyweightDescendants()
7728	isContainer
7729	newNativeContainer != oldNativeContainer
7730	curParent == this
7730	index == oldZindex
7731	oldZindex != -1
7731	peerRecreated
7732	comp.isLightweight()
7733	comp instanceof Container
7734	comp == null
7735	comp.isLightweight()
7736	comp instanceof Container
7737	curParent != this
7738	index == -1
7739	index < component.size()
7740	peer != null
7741	comp.peer == null
7742	oldNativeContainer != newNativeContainer
7743	isLightweight()
7743	comp.isLightweight()
7744	curParent != this
7745	layoutMgr != null
7746	layoutMgr instanceof LayoutManager2
7747	(eventMask & AWTEvent.CONTAINER_EVENT_MASK) != 0
7747	Toolkit.enabledOnToolkit(AWTEvent.CONTAINER_EVENT_MASK)
7747	containerListener != null
7748	comp.canBeFocusOwnerRecursively()
7748	comp.isFocusOwner()
7749	comp instanceof Container
7750	isParentOf(focusOwner)
7750	focusOwner.canBeFocusOwnerRecursively()
7750	focusOwner != null
7751	isVisible()
7751	peer != null
7751	layoutMgr == null
7752	comp == null
7753	comp.parent != this
7754	index != -1
7754	index < 0
7754	index > component.size()
7755	thisGC != null
7756	comp.parent != null
7757	index > component.size()
7758	index == -1
7759	peer != null
7760	layoutMgr != null
7761	layoutMgr instanceof LayoutManager2
7762	constraints instanceof String
7763	Toolkit.enabledOnToolkit(AWTEvent.CONTAINER_EVENT_MASK)
7763	containerListener != null
7763	(eventMask & AWTEvent.CONTAINER_EVENT_MASK) != 0
7764	isVisible()
7764	peer != null
7764	layoutMgr == null
7765	comp != null
7766	comp != null
7767	index < 0
7767	index >= component.size()
7768	peer != null
7769	layoutMgr != null
7770	(eventMask & AWTEvent.CONTAINER_EVENT_MASK) != 0
7770	containerListener != null
7770	Toolkit.enabledOnToolkit(AWTEvent.CONTAINER_EVENT_MASK)
7771	layoutMgr == null
7771	isVisible()
7771	peer != null
7772	comp.parent == this
7773	index >= 0
7774	peer != null
7775	layoutMgr != null
7776	(eventMask & AWTEvent.CONTAINER_EVENT_MASK) != 0
7776	Toolkit.enabledOnToolkit(AWTEvent.CONTAINER_EVENT_MASK)
7776	containerListener != null
7777	layoutMgr == null
7777	isVisible()
7777	peer != null
7778	mask == AWTEvent.HIERARCHY_EVENT_MASK
7779	eventLog.isLoggable(PlatformLogger.FINE)
7780	listeningChildren != sum
7781	mask == AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK
7782	eventLog.isLoggable(PlatformLogger.FINE)
7783	listeningBoundsChildren != sum
7784	eventLog.isLoggable(PlatformLogger.FINE)
7785	eventLog.isLoggable(PlatformLogger.FINE)
7786	toAssert
7787	num == 0
7788	(mask & AWTEvent.HIERARCHY_EVENT_MASK) != 0
7789	(mask & AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK) != 0
7790	num == 0
7791	parent != null
7792	log.isLoggable(PlatformLogger.FINE)
7793	descendantsCount != sum
7794	enabledOnToolkit
7795	component.isEmpty()
7796	layoutMgr != null
7797	isJavaAwtSmartInvalidate
7797	isValidateRoot()
7798	layoutMgr instanceof LayoutManager2
7799	isValid()
7799	peer != null
7799	descendUnconditionallyWhenValidating
7800	peer instanceof ContainerPeer
7801	p != null
7802	p != null
7803	descendUnconditionallyWhenValidating
7804	updateCur
7805	peer instanceof ContainerPeer
7806	updateCur
7807	isValid()
7807	descendUnconditionallyWhenValidating
7808	peer instanceof ContainerPeer
7809	isValid()
7810	comp.isValid()
7810	comp instanceof Window
7810	descendUnconditionallyWhenValidating
7810	comp instanceof Container
7811	peer instanceof ContainerPeer
7812	comp instanceof Container
7813	oldfont.equals(newfont)
7813	oldfont == null
7813	newfont != oldfont
7814	isPreferredSizeSet()
7814	dim == null
7814	isValid()
7815	dim != null
7816	dim == null
7816	isValid()
7816	isMinimumSizeSet()
7817	dim != null
7818	isMaximumSizeSet()
7818	dim == null
7818	isValid()
7819	layoutMgr instanceof LayoutManager2
7820	dim != null
7821	layoutMgr instanceof LayoutManager2
7822	layoutMgr instanceof LayoutManager2
7823	isShowing()
7824	printing
7825	printingThreads.contains(Thread.currentThread())
7826	isShowing()
7827	peer instanceof LightweightPeer
7828	isShowing()
7829	printingThreads == null
7830	isShowing()
7831	isShowing()
7832	isShowing()
7833	isShowing()
7834	l == null
7835	l == null
7836	listenerType == ContainerListener.class
7837	id == ContainerEvent.COMPONENT_REMOVED
7837	id == ContainerEvent.COMPONENT_ADDED
7838	containerListener != null
7838	(eventMask & AWTEvent.CONTAINER_EVENT_MASK) != 0
7839	e instanceof ContainerEvent
7840	listener != null
7841	dispatcher.dispatchEvent(e)
7841	dispatcher != null
7842	peer != null
7843	searchHeavyweights
7844	comp == null
7844	comp == this
7845	comp.contains(x - comp.x, y - comp.y)
7845	searchHeavyweightChildren
7845	searchHeavyweightChildren
7845	comp.visible
7845	comp != null
7845	comp.peer instanceof LightweightPeer
7845	comp.peer instanceof LightweightPeer
7846	comp instanceof Container
7847	deeper != null
7848	filter.accept(comp)
7849	isMouseOverMe
7849	isPeerOK
7849	filter.accept(this)
7850	peer instanceof LightweightPeer
7851	parent != null
7852	dispatcher != null
7853	comp != this
7853	comp != null
7854	contains(x, y)
7855	comp.peer instanceof LightweightPeer
7855	comp != null
7856	comp.contains(x - comp.x, y - comp.y)
7857	comp.peer instanceof LightweightPeer
7857	comp != null
7858	comp.contains(x - comp.x, y - comp.y)
7859	GraphicsEnvironment.isHeadless()
7860	isSameOrAncestorOf(inTheSameWindow, allowChildren)
7861	isRecursivelyVisible()
7862	contains(x, y)
7862	enabled
7862	visible
7862	ignoreEnabled
7863	comp.peer instanceof LightweightPeer
7863	comp != null
7864	comp instanceof Container
7865	comp != null
7865	comp.visible
7865	comp.enabled
7865	ignoreEnabled
7866	comp != null
7866	comp.peer instanceof LightweightPeer
7867	comp instanceof Container
7868	comp.visible
7868	comp.enabled
7868	comp != null
7868	ignoreEnabled
7869	peer instanceof LightweightPeer
7870	comp != null
7871	KeyboardFocusManager.isAutoFocusTransferEnabledFor(this)
7871	containsFocus()
7872	transferFocus(false)
7873	dispatcher != null
7874	(p = c.getParent()) == null
7874	c == null
7875	p == this
7876	predictedFocusOwner != null
7877	nativeContainer.modalComp != null
7878	EventQueue.isDispatchThread()
7879	currentSequencedEvent != null
7880	windowClosingException != null
7881	predictedFocusOwner != null
7882	modalAppContext != null
7883	nativeContainer != null
7884	this.modalComp != null
7885	layoutMgr != null
7886	comp != null
7887	comp != null
7888	id < 0
7888	id >= KeyboardFocusManager.TRAVERSAL_KEY_LENGTH
7889	id < 0
7889	id >= KeyboardFocusManager.TRAVERSAL_KEY_LENGTH
7890	id >= KeyboardFocusManager.TRAVERSAL_KEY_LENGTH
7890	id < 0
7891	isFocusCycleRoot()
7891	container == this
7892	currentFocusCycleRoot == this
7893	root == null
7894	root != currentFocusCycleRoot
7895	window != null
7896	isParentOf(storedComp)
7896	storedComp == this
7897	reset
7898	isParentOf(cont)
7898	cont == this
7899	isFocusCycleRoot()
7900	isFocusTraversalPolicyProvider()
7900	isFocusCycleRoot()
7901	policy != null
7902	rootAncestor != null
7903	isFocusCycleRoot()
7904	toFocus != null
7905	parent != null
7906	parent != null
7907	focusTraversalPolicy instanceof java.io.Serializable
7908	maxSize == null
7909	containerListenerK == key
7910	policy instanceof FocusTraversalPolicy
7911	e.eof
7912	this instanceof Accessible
7913	ac != null
7914	a != null
7915	ac != null
7916	acmp != null
7916	acmp.isShowing()
7917	acmp.contains(np)
7918	this.contains(p.x,p.y)
7919	comp != null
7919	comp.isShowing()
7920	comp.contains(p.x-location.x,p.y-location.y)
7921	ret instanceof Accessible
7922	children[i] instanceof Accessible
7923	children[j] instanceof Accessible
7924	count == i
7925	c.isDisplayable()
7926	c instanceof Container
7927	c.isLightweight()
7928	c.isDisplayable()
7929	c instanceof Container
7930	c.isLightweight()
7931	getComponentCount() > 0
7932	getComponentCount() > 0
7933	isLightweight()
7933	isNonOpaqueForMixing()
7933	hasLightweightDescendants()
7934	c.isLightweight()
7934	c.isShowing()
7935	mixingLog.isLoggable(PlatformLogger.FINE)
7936	fromZorder == -1
7937	shape.isEmpty()
7938	isValid()
7938	getLayout() != null
7939	comp.isLightweight()
7940	((Container)comp).hasHeavyweightDescendants()
7940	comp instanceof Container
7940	comp.isShowing()
7941	mixingLog.isLoggable(PlatformLogger.FINE)
7942	fromZorder == -1
7943	isValid()
7943	getLayout() != null
7944	comp.isLightweight()
7945	((Container)comp).hasHeavyweightDescendants()
7945	comp instanceof Container
7946	hasHeavyweightDescendants()
7946	isVisible()
7947	comp.isLightweight()
7948	comp instanceof Container
7949	comp.isVisible()
7950	peer != null
7951	hasHeavyweightDescendants()
7952	comp.isLightweight()
7953	comp instanceof Container
7954	comp.isVisible()
7955	peer != null
7956	comp.isLightweight()
7957	((Container)comp).hasHeavyweightDescendants()
7957	comp instanceof Container
7958	peer != null
7959	isLightweight()
7960	cont.isVisible()
7961	mixingLog.isLoggable(PlatformLogger.FINE)
7962	isLightweight
7962	isRecursivelyVisibleUpToHeavyweightContainer()
7963	isMixingNeeded()
7964	isLightweight
7964	isLightweight
7964	hasHeavyweightDescendants()
7965	mixingLog.isLoggable(PlatformLogger.FINE)
7966	isLightweight
7967	mixingLog.isLoggable(PlatformLogger.FINE)
7968	hasHeavyweightDescendants()
7968	isLightweight()
7969	isMixingNeeded
7970	isMixingNeeded
7971	mixingLog.isLoggable(PlatformLogger.FINE)
7972	isMixingNeeded()
7973	becameHigher
7973	hasHeavyweightDescendants()
7973	isLightweight()
7974	mixingLog.isLoggable(PlatformLogger.FINE)
7975	isMixingNeeded()
7976	hasHeavyweightDescendants()
7977	isNonOpaqueForMixing()
7977	isLightweight()
7978	e instanceof SunDropTargetEvent
7979	e instanceof MouseEvent
7979	(eventMask & MOUSE_MASK) != 0
7980	e.getID() == MouseEvent.MOUSE_MOVED
7981	e.getID() == MouseEvent.MOUSE_RELEASED
7981	e.getID() == MouseEvent.MOUSE_PRESSED
7982	id != MouseEvent.MOUSE_CLICKED
7982	isMouseGrab(e)
7983	mouseEventTarget != null
7984	mouseOver == mouseEventTarget
7985	isMouseGrab(e)
7986	eventLog.isLoggable(PlatformLogger.FINEST)
7986	mouseOver != null
7987	id != MouseEvent.MOUSE_WHEEL
7988	nativeContainer.contains(x, y)
7989	d.width <= x
7990	x < 0
7991	d.height <= y
7992	y < 0
7993	mouseOver != nativeContainer
7993	mouseOver != null
7994	e instanceof SunDropTargetEvent
7994	id == MouseEvent.MOUSE_ENTERED
7994	isMouseInNativeContainer == true
7995	id != LWD_MOUSE_DRAGGED_OVER
7995	id != MouseEvent.MOUSE_EXITED
7995	isMouseInNativeContainer == false
7995	id != MouseEvent.MOUSE_DRAGGED
7996	id == MouseEvent.MOUSE_EXITED
7997	isMouseInNativeContainer
7998	targetLastEntered == targetEnter
7999	targetLastEntered != null
8000	id == MouseEvent.MOUSE_EXITED
8001	targetEnter != null
8002	id == MouseEvent.MOUSE_ENTERED
8003	isForeignDrag
8004	srcComponent.isShowing()
8005	c == null
8005	((Window)c).isModalBlocked()
8006	AppContext.getAppContext() != nativeContainer.appContext
8007	nativeContainer.isShowing()
8008	target == null
8009	component != null
8010	e instanceof SunDropTargetEvent
8011	id == MouseEvent.MOUSE_WHEEL
8012	target == nativeContainer
8013	nativeContainer.modalComp != null
8014	((Container)nativeContainer.modalComp).isAncestorOf(target)
8015	retargeted.isConsumed()
8015	id == MouseEvent.MOUSE_WHEEL
4950	container.isVisible()
4950	container.isDisplayable()
4951	comp instanceof Container
4952	cont.isFocusCycleRoot()
4952	cont.isFocusTraversalPolicyProvider()
4953	aCont.isFocusTraversalPolicyProvider()
4954	aCont == null
4955	comp instanceof Container
4956	cont.isFocusCycleRoot()
4957	getImplicitDownCycleTraversal()
4958	retComp != null
4958	log.isLoggable(PlatformLogger.FINE)
4959	cont.isFocusTraversalPolicyProvider()
4960	log.isLoggable(PlatformLogger.FINE)
4960	retComp != null
4961	log.isLoggable(PlatformLogger.FINE)
4962	aComponent == null
4962	aContainer == null
4963	aContainer.isFocusTraversalPolicyProvider()
4963	aContainer.isFocusCycleRoot()
4964	aComponent.isFocusCycleRoot(aContainer)
4964	aContainer.isFocusCycleRoot()
4965	aContainer.isVisible()
4965	aContainer.isDisplayable()
4966	comp != null
4967	provider != null
4968	log.isLoggable(PlatformLogger.FINE)
4969	afterComp != null
4970	log.isLoggable(PlatformLogger.FINE)
4971	log.isLoggable(PlatformLogger.FINE)
4972	index < 0
4973	log.isLoggable(PlatformLogger.FINE)
4974	accept(comp)
4975	(comp = getComponentDownCycle(comp, FORWARD_TRAVERSAL)) != null
4976	aContainer.isFocusCycleRoot()
4977	aContainer == null
4977	aComponent == null
4978	aContainer.isFocusTraversalPolicyProvider()
4978	aContainer.isFocusCycleRoot()
4979	aComponent.isFocusCycleRoot(aContainer)
4979	aContainer.isFocusCycleRoot()
4980	aContainer.isVisible()
4980	aContainer.isDisplayable()
4981	provider != null
4982	log.isLoggable(PlatformLogger.FINE)
4983	beforeComp != null
4984	log.isLoggable(PlatformLogger.FINE)
4985	accept(aComponent)
4986	log.isLoggable(PlatformLogger.FINE)
4987	index < 0
4988	log.isLoggable(PlatformLogger.FINE)
4989	comp != aContainer
4989	(tryComp = getComponentDownCycle(comp, BACKWARD_TRAVERSAL)) != null
4990	accept(comp)
4991	aContainer.isFocusCycleRoot()
4992	log.isLoggable(PlatformLogger.FINE)
4993	aContainer == null
4994	aContainer.isDisplayable()
4994	aContainer.isVisible()
4995	this.cachedRoot == aContainer
4996	cycle.size() == 0
4997	log.isLoggable(PlatformLogger.FINE)
4998	log.isLoggable(PlatformLogger.FINE)
4999	accept(comp)
5000	comp != aContainer
5000	(comp = getComponentDownCycle(comp, FORWARD_TRAVERSAL)) != null
5001	log.isLoggable(PlatformLogger.FINE)
5002	aContainer == null
5003	aContainer.isVisible()
5003	aContainer.isDisplayable()
5004	this.cachedRoot == aContainer
5005	cycle.size() == 0
5006	log.isLoggable(PlatformLogger.FINE)
5007	log.isLoggable(PlatformLogger.FINE)
5008	accept(comp)
5009	comp instanceof Container
5009	comp != aContainer
5010	cont.isFocusTraversalPolicyProvider()
5011	aComponent.canBeFocusOwner()
5012	aComponent instanceof Window
5013	enableTest.isLightweight()
5013	enableTest.isEnabled()
5014	enableTest instanceof Window
15176	classes[i].isInstance(obj)
9075	src == null
9076	src == dst
9077	srcCM instanceof IndexColorModel
9078	dst == null
9079	srcCM.getColorSpace().getType() != dstCM.getColorSpace().getType()
9080	dstCM instanceof IndexColorModel
9081	ImagingLib.filter(this, src, dst) == null
9082	needToConvert
9083	origDst != dst
9084	dst == null
9085	src == dst
9086	src.getNumBands() != dst.getNumBands()
9087	ImagingLib.filter(this, src, dst) == null
9088	destCM == null
9089	destCM instanceof IndexColorModel
9090	wr == null
9091	dstPt == null
14356	sm != null
14357	sm != null
14658	store == null
14659	cookiePolicy != null
14660	requestHeaders == null
14660	uri == null
14661	cookieJar == null
14662	path.isEmpty()
14662	path == null
14663	secureLink
14663	pathMatches(path, cookie.getPath())
14663	cookie.getSecure()
14664	cookie.isHttpOnly()
14665	"http".equalsIgnoreCase(s)
14665	"https".equalsIgnoreCase(s)
14666	ports != null
14666	ports.isEmpty()
14667	port == -1
14668	isInPortList(ports, port)
14669	responseHeaders == null
14669	uri == null
14670	cookieJar == null
14671	headerKey.equalsIgnoreCase("Set-Cookie2")
14671	headerKey == null
14671	headerKey.equalsIgnoreCase("Set-Cookie")
14672	logger.isLoggable(PlatformLogger.SEVERE)
14673	cookie.getPath() == null
14674	path.endsWith("/")
14675	i > 0
14676	cookie.getDomain() == null
14677	ports != null
14678	port == -1
14679	ports.isEmpty()
14680	shouldAcceptInternal(uri, cookie)
14681	isInPortList(ports, port)
14681	shouldAcceptInternal(uri, cookie)
14682	shouldAcceptInternal(uri, cookie)
14683	val == port
14684	lst.isEmpty()
14685	val == port
14686	path == pathToMatchWith
14687	pathToMatchWith == null
14687	path == null
14688	path.startsWith(pathToMatchWith)
14689	cookie.getVersion() > 0
14689	cookies.indexOf(cookie) == 0
12930	option == StandardCopyOption.ATOMIC_MOVE
12931	attrs.isSymbolicLink()
12932	opts.replaceExisting
12933	Files.exists(target)
12934	attrs.isDirectory()
12935	opts.copyAttributes
2345	elements.getClass() != Object[].class
2346	o == null
2347	elements[i] == null
2348	o.equals(elements[i])
2349	o == null
2350	elements[i] == null
2351	o.equals(elements[i])
2352	a.length < len
2353	a.length > len
2354	oldValue != element
2355	index > len
2355	index < 0
2356	numMoved == 0
2357	numMoved == 0
2358	len != 0
2359	eq(o, elements[i])
2360	eq(o, elements[newlen])
2361	toIndex < fromIndex
2361	fromIndex < 0
2361	toIndex > len
2362	numMoved == 0
2363	eq(e, elements[i])
2364	indexOf(e, elements, 0, len) < 0
2365	len != 0
2366	c.contains(element)
2367	newlen != len
2368	len != 0
2369	c.contains(element)
2370	newlen != len
2371	cs.length == 0
2372	indexOf(e, elements, 0, len) < 0
2372	indexOf(e, uniq, 0, added) < 0
2373	added > 0
2374	cs.length == 0
2375	index > len
2375	index < 0
2376	cs.length == 0
2377	numMoved == 0
2378	o == this
2379	o instanceof List
2380	it.hasNext()
2380	eq(elements[i], it.next())
2381	it.hasNext()
2382	index<0
2382	index>len
2383	fromIndex < 0
2383	fromIndex > toIndex
2383	toIndex > len
2846	o == this
2847	o instanceof Set
2848	++k > len
2849	eq(x, elements[i])
2849	matched[i]
3015	count < 0
8532	x1 < cropX
8533	x2 > cropX + cropW
8534	y1 < cropY
8535	y2 > cropY + cropH
8536	y1 >= y2
8536	x1 >= x2
8537	x1 < cropX
8538	x2 > cropX + cropW
8539	y1 < cropY
8540	y2 > cropY + cropH
8541	x1 >= x2
8541	y1 >= y2
8542	x > 0
8542	x2 < 0
8542	w > 0
8543	x2 > 0
8543	w < 0
8543	x < 0
5267	left != null
5268	right != null
5269	left != null
5270	right != null
5271	left != null
5272	right != null
5273	d == 0
5274	D < 0
5275	res == eqn
5276	within(u, v, err)
5276	iszero(D, err)
5277	res == eqn
5278	num > 1
5279	res[2] == res[1]
5279	res[2] == res[0]
5279	num > 2
5280	num > 1
5280	res[1] == res[0]
5281	intervals[0] == intervals[1]
5281	critCount == 2
5282	critCount == 2
5282	intervals[0] > intervals[1]
5283	num == 3
5284	critCount == 2
5285	critCount == 1
5286	oppositeSigns(fx0, fx1)
5287	oppositeSigns(fx1, fxe)
5288	critCount == 0
5289	num == 2
5289	critCount == 2
5290	iszero(fx, 10000000*ulp(x))
5291	inInterval(t, min, max)
5292	y == 0
5292	t == newt
5292	slope == 0
5293	inInterval(t, min, max)
5293	within(t, origt, 1000*ulp(origt))
5294	x02 >= xe2
5295	fx02 == 0
5296	fxe2 == 0
5297	fm == 0
5298	oppositeSigns(fx0, fm)
5299	x * 0.0 + y * 0.0 == 0.0
5300	w <= 0
5300	h <= 0
5301	h <= 0
5301	w <= 0
5302	getY1() == getY2()
5302	getX1() == getX2()
5303	crossings == Curve.RECT_INTERSECTS
5379	isDone()
5380	index == 0
5381	affine != null
5382	isDone()
5383	index == 0
5384	affine != null
503	instance != null
504	defaultFractionDigits == Integer.MIN_VALUE
505	currencyCode.length() != 3
506	tableEntry != INVALID_COUNTRY_ENTRY
506	(tableEntry & COUNTRY_TYPE_MASK) == SIMPLE_CASE_COUNTRY_MASK
506	currencyCode.charAt(2) - 'A' == (tableEntry & SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK)
507	currencyCode.charAt(2) == '-'
508	index == -1
509	country == null
510	country.length() != 2
511	(tableEntry & COUNTRY_TYPE_MASK) == SIMPLE_CASE_COUNTRY_MASK
511	tableEntry != INVALID_COUNTRY_ENTRY
512	tableEntry == INVALID_COUNTRY_ENTRY
513	tableEntry == COUNTRY_WITHOUT_CURRENCY_ENTRY
514	System.currentTimeMillis() < scCutOverTimes[index]
514	scCutOverTimes[index] == Long.MAX_VALUE
515	available == null
516	(tableEntry & COUNTRY_TYPE_MASK) == SIMPLE_CASE_COUNTRY_MASK
516	tableEntry != INVALID_COUNTRY_ENTRY
517	pool.hasProviders()
518	symbol != null
519	pool.hasProviders()
520	result == null
521	result != null
522	char2 > 'Z'
522	char1 > 'Z'
522	char2 < 'A'
522	char1 < 'A'
523	char2 > 'Z'
523	char1 > 'Z'
523	char2 < 'A'
523	char1 < 'A'
524	ctry.length() != 2
525	m.find()
526	scOldCurrencies[index].equals(code)
527	index == scOldCurrencies.length
528	logger.isLoggable(PlatformLogger.INFO)
529	t != null
1443	locale == null
1443	currencyCode == null
1444	charray.length != 3
1445	c < 'A'
1445	c > 'Z'
1446	avail.contains(locale)
7594	GraphicsEnvironment.isHeadless()
7595	disposer == null
7596	anchor == null
7597	type < Cursor.DEFAULT_CURSOR
7597	type > Cursor.MOVE_CURSOR
7598	c == null
7599	predefined[type] == null
7600	cursor == null
7601	systemCustomCursorProperties == null
7602	systemCustomCursorProperties.containsKey(key)
7603	log.isLoggable(PlatformLogger.FINER)
7604	localized == null
7605	hotspot == null
7606	st.countTokens() != 2
7607	cursor == null
7608	log.isLoggable(PlatformLogger.FINER)
7609	type > Cursor.MOVE_CURSOR
7609	type < Cursor.DEFAULT_CURSOR
3056	g.broken
3057	Thread.interrupted()
3058	index == 0
3059	command != null
3060	ranAction
3061	timed
3062	nanos > 0L
3063	g.broken
3063	g == generation
3064	g.broken
3065	g != generation
3066	timed
3066	nanos <= 0L
3067	parties <= 0
9000	type > TYPE_DOUBLE
9000	type < TYPE_BYTE
9001	numBanks != offsets.length
9002	obj instanceof int[]
9003	obj == null
9004	obj instanceof short[]
9005	obj instanceof byte[]
8835	dataArray == null
8836	dataArray == null
8837	(size+offset) > dataArray.length
8838	dataArray == null
8839	dataArray[i] == null
8840	dataArray == null
8841	dataArray[i] == null
8842	(size+offsets[i]) > dataArray[i].length
9881	sm != null
9882	loader != null
9883	primaryType == null
9884	subType == null
9885	representationClass == null
9886	params == null
9887	humanPresentableName == null
9888	humanPresentableName == null
9889	representationClass == null
9890	mimeType == null
9891	mimeType == null
9892	mimeType == null
9893	mimeType == null
9894	rcn == null
9895	"application/x-java-serialized-object".equals(this.mimeType.getBaseType())
9896	humanPresentableName == null
9897	humanPresentableName == null
9898	mimeType == null
9899	representationClass == null
9900	isRepresentationClassInputStream()
9900	DataTransferer.byteArrayClass.equals(representationClass)
9900	isRepresentationClassByteBuffer()
9900	DataTransferer.isFlavorCharsetTextType(this)
9901	transferer != null
9902	availableFlavors == null
9902	availableFlavors.length == 0
9903	textFlavorComparator == null
9904	bestFlavor.isFlavorTextType()
9905	transferObject == null
9906	transferObject instanceof Reader
9907	transferObject instanceof String
9908	transferObject instanceof CharBuffer
9909	transferObject instanceof char[]
9910	transferObject instanceof InputStream
9911	transferObject instanceof ByteBuffer
9912	transferObject instanceof byte[]
9913	stream == null
9914	paramName.equals("humanPresentableName")
9915	that == null
9916	this == that
9917	representationClass == null
9918	that.getRepresentationClass() != null
9919	representationClass.equals(that.getRepresentationClass())
9920	mimeType == null
9921	that.mimeType != null
9922	mimeType.match(that.mimeType)
9923	DataTransferer.doesSubtypeSupportCharset(this)
9923	representationClass != null
9923	"text".equals(getPrimaryType())
9923	String.class.equals(representationClass)
9923	isRepresentationClassReader()
9923	isRepresentationClassCharBuffer()
9923	DataTransferer.charArrayClass.equals(representationClass)
9924	thisCharset == null
9925	thatCharset != null
9926	thisCharset.equals(thatCharset)
9927	mimeType == null
9927	s == null
9928	representationClass != null
9929	mimeType != null
9930	primaryType != null
9931	isRepresentationClassReader()
9931	"text".equals(primaryType)
9931	DataTransferer.charArrayClass.equals (representationClass)
9931	DataTransferer.doesSubtypeSupportCharset(this)
9931	representationClass != null
9931	isRepresentationClassCharBuffer()
9931	String.class.equals(representationClass)
9932	charset != null
9933	mimeType == null
9934	this.mimeType == null
9935	this.mimeType == null
9936	mimeType == null
9936	representationClass == null
9937	mimeType != null
9938	mimeType != null
9939	rcn == null
9940	ode.eof
9940	ode.length != 0
9941	rcn != null
9942	mimeType != null
13395	len < 0
13396	count < 0
13397	ch < 0
13398	ch < 0
13399	ch < 0
13400	(ch1 | ch2) < 0
13401	(ch1 | ch2) < 0
13402	(ch1 | ch2) < 0
13403	(ch1 | ch2 | ch3 | ch4) < 0
13404	buf == null
13405	c2 != '\n'
13405	c2 != -1
13406	in instanceof PushbackInputStream
13407	--room < 0
13408	offset == 0
13408	c == -1
13409	in instanceof DataInputStream
13410	dis.bytearr.length < utflen
13411	c > 127
13412	count > utflen
13413	(char2 & 0xC0) != 0x80
13414	count > utflen
13415	(char2 & 0xC0) != 0x80
13415	(char3 & 0xC0) != 0x80
13575	temp < 0
13576	c <= 0x007F
13576	c >= 0x0001
13577	c > 0x07FF
13578	utflen > 65535
13579	out instanceof DataOutputStream
13580	dos.bytearr == null
13580	dos.bytearr.length < (utflen+2)
13581	c <= 0x007F
13581	c >= 0x0001
13582	c <= 0x007F
13582	c >= 0x0001
13583	c > 0x07FF
15177	(length + offset) < 0
15177	length < 0
15177	(length + offset) > buf.length
15177	offset < 0
15178	iport > 0xFFFF
15178	iport < 0
15179	address instanceof InetSocketAddress
15179	address == null
15180	addr.isUnresolved()
15181	buf == null
15182	(length + offset) > buf.length
15182	(length + offset) < 0
15182	length < 0
14508	port > 0xFFFF
14508	port < 0
14509	address == null
14510	isClosed()
14511	security != null
14512	address.isMulticastAddress()
14513	isBound()
14514	((AbstractPlainDatagramSocketImpl)impl).nativeConnectDisabled()
14514	oldImpl
14514	impl instanceof AbstractPlainDatagramSocketImpl
14515	avail == -1
14516	explicitFilter
14517	impl == null
14518	bindaddr != null
14519	impl == null
14520	impl == null
14521	factory != null
14522	created
14523	isClosed()
14524	isBound()
14525	addr == null
14526	addr instanceof InetSocketAddress
14527	epoint.isUnresolved()
14528	sec != null
14529	addr == null
14530	addr instanceof Inet6Address
14530	addr instanceof Inet4Address
14531	addr == null
14532	addr instanceof InetSocketAddress
14533	epoint.isUnresolved()
14534	isClosed()
14535	connectState == ST_CONNECTED
14536	isConnected()
14537	isClosed()
14538	isBound()
14539	isClosed()
14540	connectState == ST_NOT_CONNECTED
14541	security != null
14542	p.getAddress().isMulticastAddress()
14543	packetAddress == null
14544	p.getPort() != connectedPort
14544	packetAddress.equals(connectedAddress)
14545	isBound()
14546	isBound()
14547	connectState == ST_NOT_CONNECTED
14548	security != null
14549	oldImpl
14550	explicitFilter
14550	connectState == ST_CONNECTED_NO_IMPL
14551	oldImpl
14552	connectedPort != peekPort
14552	connectedAddress.equals(peekAddress)
14553	explicitFilter
14554	checkFiltering(tmp)
14555	tmp == null
14555	explicitFilter
14556	getImpl().dataAvailable() <= 0
14556	bytesLeftToFilter <= 0
14557	isClosed()
14558	in.isAnyLocalAddress()
14559	s != null
14560	isClosed()
14561	isClosed()
14562	isClosed()
14563	getImpl() == null
14564	o instanceof Integer
14565	size > 0
14566	isClosed()
14567	isClosed()
14568	o instanceof Integer
14569	size <= 0
14570	isClosed()
14571	isClosed()
14572	o instanceof Integer
14573	isClosed()
14574	oldImpl
14575	isClosed()
14576	isClosed()
14577	isClosed()
14578	tc > 255
14578	tc < 0
14579	isClosed()
14580	isClosed()
14581	isClosed()
14582	factory != null
14583	security != null
12771	s == null
12772	secondDash < s.length() - 1
12772	firstDash > 0
12772	secondDash > 0
12773	yyyy.length() == YEAR_LENGTH
12773	dd.length() <= DAY_LENGTH
12773	mm.length() <= MONTH_LENGTH
12773	mm.length() >= 1
12773	dd.length() >= 1
12774	month <= MAX_MONTH
12774	day <= MAX_DAY
12774	month >= 1
12774	day >= 1
12775	d == null
4114	month >= 12
4115	month < 0
4116	cdate != null
4117	month >= 12
4118	month < 0
4119	s == null
4120	c <= ' '
4120	c == ','
4121	c == '('
4122	c == '('
4123	c == ')'
4124	--depth <= 0
4125	'0' <= c
4125	c <= '9'
4126	prevc == '+'
4126	prevc == '-'
4126	year != Integer.MIN_VALUE
4127	n < 24
4128	prevc == '+'
4129	tzoffset != -1
4129	tzoffset != 0
4130	n >= 70
4131	year != Integer.MIN_VALUE
4132	c <= ' '
4132	i >= limit
4132	c == ','
4132	c == '/'
4133	c == ':'
4134	hour < 0
4135	min < 0
4136	c == '/'
4137	mon < 0
4138	mday < 0
4139	c > ' '
4139	i < limit
4139	c != '-'
4139	c != ','
4140	min < 0
4140	hour >= 0
4141	min >= 0
4141	sec < 0
4142	mday < 0
4143	mday >= 0
4143	year == Integer.MIN_VALUE
4143	mon >= 0
4144	c == '/'
4144	c == '-'
4144	c == '+'
4144	c == ':'
4145	c <= 'Z'
4145	'a' <= c
4145	'A' <= c
4145	c <= 'z'
4146	i <= st + 1
4147	wtb[k].regionMatches(true, 0, s, st, i - st)
4148	action != 0
4149	action == 1
4150	hour > 12
4150	hour < 1
4151	hour < 12
4152	action == 14
4153	hour > 12
4153	hour < 1
4154	hour == 12
4155	action <= 13
4156	mon < 0
4157	k < 0
4158	mon < 0
4158	year == Integer.MIN_VALUE
4158	mday < 0
4159	year < 100
4160	defaultCenturyStart == 0
4161	year < defaultCenturyStart
4162	sec < 0
4163	min < 0
4164	hour < 0
4165	tzoffset == -1
4166	month >= 12
4167	month < 0
4168	y != 0
4169	cdate.isNormalized()
4169	cdate != null
4170	date.cdate.isNormalized()
4170	date.cdate == null
4171	index == gcal.SUNDAY
4172	zi != null
4173	cdate == null
4174	tz instanceof ZoneInfo
4175	cdate == null
4176	cdate == null
4177	cdate.isNormalized()
4178	tz != cdate.getZone()
4179	y == 1582
4179	y > 280000000
4179	y < -280000000
4180	tz == null
4181	cal != getCalendarSystem(date)
4182	ncal != cal
4183	year >= 1582
4184	utc >= GregorianCalendar.DEFAULT_GREGORIAN_CUTOVER - TimeZone.getDefaultRef().getOffset(utc)
4184	utc >= 0
4185	jcal == null
4186	cdate.getEra() != null
4187	jcal == null
15715	obj instanceof Date
15716	obj instanceof Number
15717	pos.index == 0
15718	this == obj
15719	getClass() != obj.getClass()
15719	obj == null
15720	(flags & 1) != 0
15721	timeStyle > 3
15721	timeStyle < 0
15722	(flags & 2) != 0
15723	dateStyle > 3
15723	dateStyle < 0
15724	pool.hasProviders()
15725	providersInstance != null
15652	dfs != null
15653	dfs != null
15654	pool.hasProviders()
15655	ref == null
15655	(dfs = ref.get()) == null
15656	x != null
15657	y != null
15658	len < 5
15659	this == obj
15660	getClass() != obj.getClass()
15660	obj == null
15661	ref != null
15661	(dfs = ref.get()) != null
15662	ID.equals(zoneStrings[lastZoneIndex][0])
15662	lastZoneIndex < zoneStrings.length
15663	ID.equals(zoneStrings[index][0])
15664	isSubclassObject()
15665	zoneStrings == null
15666	needsCopy
15667	src.zoneStrings != null
15668	zoneStrings == null
15811	pattern == null
15812	number instanceof Short
15812	number instanceof Integer
15812	number instanceof AtomicInteger
15812	number instanceof AtomicLong
15812	number instanceof Byte
15812	number instanceof BigInteger
15812	((BigInteger)number).bitLength () < 64
15812	number instanceof Long
15813	number instanceof BigDecimal
15814	number instanceof BigInteger
15815	number instanceof Number
15816	multiplier == 0
15816	Double.isInfinite(number)
15816	Double.isNaN(number)
15817	multiplier != 1
15818	Double.isInfinite(number)
15819	isNegative
15820	isNegative
15821	isNegative
15822	isNegative
15823	number < 0
15824	multiplier != 0
15825	multiplier != 0
15825	multiplier != 1
15826	cutoff < 0
15827	useBigInteger
15828	isNegative
15829	number == 0
15830	multiplier < 0
15831	multiplier != 1
15832	isNegative
15833	multiplier != 1
15834	isNegative
15835	formatLong
15836	maximumDigits < 0
15837	obj instanceof Float
15837	obj instanceof Double
15838	obj instanceof Byte
15838	obj instanceof AtomicInteger
15838	obj instanceof AtomicLong
15838	obj instanceof Short
15838	obj instanceof Integer
15838	obj instanceof Long
15839	obj instanceof BigDecimal
15840	obj instanceof BigInteger
15841	obj == null
15842	digitList.isZero()
15843	isNegative
15844	useExponentialNotation
15845	repeat > minIntDigits
15845	repeat > 1
15846	exponent >= 1
15847	minimumDigits < 0
15848	minimumDigits < integerDigits
15849	minimumDigits > totalDigits
15850	i == integerDigits
15851	decimalSeparatorAlwaysShown
15851	totalDigits == integerDigits
15852	iFieldEnd == -1
15853	addedDecimalSeparator
15854	fFieldStart == -1
15855	digitList.isZero()
15856	negativeExponent
15857	digitList.decimalAt > 0
15857	count < digitList.decimalAt
15858	count > maxIntDigits
15859	digitIndex < digitList.count
15859	i < digitList.decimalAt
15860	i % groupingSize == 0
15860	isGroupingUsed()
15860	i>0
15860	groupingSize != 0
15861	result.length() == sizeBeforeIntegerPart
15861	fractionPresent
15862	fractionPresent
15862	decimalSeparatorAlwaysShown
15863	sStart != result.length()
15864	isInteger
15864	digitIndex >= digitList.count
15864	i >= minFraDigits
15865	-1-i > (digitList.decimalAt-1)
15866	digitIndex < digitList.count
15866	isInteger
15867	isNegative
15868	string.length() > 0
15869	attribute == Field.SIGN
15870	text.regionMatches(pos.index, symbols.getNaN(), 0, symbols.getNaN().length())
15871	subparse(text, pos, positivePrefix, negativePrefix, digitList, false, status)
15872	status[STATUS_INFINITE]
15873	status[STATUS_POSITIVE] == (multiplier >= 0)
15874	multiplier == 0
15875	digitList.isZero()
15876	status[STATUS_POSITIVE]
15877	isParseBigDecimal()
15878	multiplier != 1
15879	status[STATUS_POSITIVE]
15880	digitList.fitsIntoLong(status[STATUS_POSITIVE], isParseIntegerOnly())
15881	longResult < 0
15882	multiplier != 1
15883	gotDouble
15884	longResult % multiplier == 0
15885	status[STATUS_POSITIVE]
15885	gotLongMinimum
15886	gotDouble
15886	multiplier != 1
15887	bigIntegerMultiplier == null
15888	bigDecimalMultiplier == null
15889	gotNegative
15889	gotPositive
15890	positivePrefix.length() > negativePrefix.length()
15891	positivePrefix.length() < negativePrefix.length()
15892	gotPositive
15893	gotNegative
15894	isExponent
15894	text.regionMatches(position,symbols.getInfinity(),0, symbols.getInfinity().length())
15895	digit < 0
15895	digit > 9
15896	digit == 0
15897	digits.count == 0
15898	sawDecimal
15899	digit <= 9
15899	digit > 0
15900	ch == decimal
15900	isExponent
15901	sawDecimal
15901	isParseIntegerOnly()
15902	ch == grouping
15902	isExponent
15902	isGroupingUsed()
15903	sawDecimal
15904	text.regionMatches(position, exponentString, 0, exponentString.length())
15904	sawExponent
15904	isExponent
15905	subparse(text, pos, "", Character.toString(symbols.getMinusSign()), exponentDigits, true, stat)
15905	exponentDigits.fitsIntoLong(stat[STATUS_POSITIVE], true)
15906	stat[STATUS_POSITIVE]
15907	backup != -1
15908	sawDecimal
15909	digitCount == 0
15909	sawDigit
15910	isExponent
15911	gotPositive
15912	gotNegative
15913	gotPositive
15913	gotNegative
15914	positiveSuffix.length() > negativeSuffix.length()
15915	positiveSuffix.length() < negativeSuffix.length()
15916	gotPositive == gotNegative
15917	parsePosition.index == oldStart
15918	positivePrefixFieldPositions == null
15919	posPrefixPattern != null
15920	negativePrefixFieldPositions == null
15921	negPrefixPattern != null
15922	positiveSuffixFieldPositions == null
15923	posSuffixPattern != null
15924	negativeSuffixFieldPositions == null
15925	negSuffixPattern != null
15926	obj == null
15927	super.equals(obj)
15928	posPrefixPattern != null
15929	posSuffixPattern != null
15930	negPrefixPattern != null
15931	negSuffixPattern != null
15932	c == QUOTE
15933	pattern.charAt(i) == CURRENCY_SIGN
15933	i<pattern.length()
15934	c == QUOTE
15935	i<pattern.length()
15935	pattern.charAt(i) == CURRENCY_SIGN
15936	string.length() > 0
15937	positions == null
15938	fieldID != null
15939	positions == null
15940	positions != null
15941	affixPattern == null
15942	i < 0
15943	i > pos
15944	c == QUOTE
15945	c == CURRENCY_SIGN
15945	affixPattern.charAt(i) == CURRENCY_SIGN
15945	i<affixPattern.length()
15946	localized
15947	localized
15948	needQuote
15949	affix.indexOf('\'') < 0
15950	c == '\''
15951	needQuote
15952	j == 1
15953	groupingSize != 0
15953	i % groupingSize == 0
15953	i != digitCount
15953	isGroupingUsed()
15954	decimalSeparatorAlwaysShown
15954	getMaximumFractionDigits() > 0
15955	i < getMinimumFractionDigits()
15956	useExponentialNotation
15957	j == 1
15958	negSuffixPattern == posSuffixPattern
15958	negSuffixPattern != null
15958	negativeSuffix.equals(positiveSuffix)
15958	negSuffixPattern.equals(posSuffixPattern)
15959	negPrefixPattern == posPrefixPattern
15959	negPrefixPattern.equals("'-" + posPrefixPattern)
15959	negativePrefix.equals(symbols.getMinusSign() + positivePrefix)
15959	negPrefixPattern != null
15959	posPrefixPattern != null
15960	localized
15961	inQuote
15962	ch == QUOTE
15963	(pos+1) < pattern.length()
15963	pattern.charAt(pos+1) == QUOTE
15964	ch == zeroDigit
15964	ch == groupingSeparator
15964	ch == digit
15964	ch == decimalSeparator
15965	j == 1
15966	ch == CURRENCY_SIGN
15967	doubled
15968	ch == QUOTE
15969	ch == QUOTE
15970	pattern.charAt(pos+1) == QUOTE
15970	(pos+1) < pattern.length()
15971	ch == separator
15972	phase == 0
15972	j == 0
15973	ch == percent
15974	multiplier != 1
15975	ch == perMill
15976	multiplier != 1
15977	ch == minus
15978	j == 1
15979	--phaseOneLength == 0
15980	ch == digit
15981	zeroDigitCount > 0
15982	groupingCount >= 0
15982	decimalPos < 0
15983	ch == zeroDigit
15984	digitRightCount > 0
15985	decimalPos < 0
15985	groupingCount >= 0
15986	ch == groupingSeparator
15987	ch == decimalSeparator
15988	decimalPos >= 0
15989	pattern.regionMatches(pos, exponent, 0, exponent.length())
15990	useExponentialNotation
15991	minExponentDigits < 1
15991	(digitLeftCount + zeroDigitCount) < 1
15992	zeroDigitCount == 0
15992	digitLeftCount > 0
15992	decimalPos >= 0
15993	n == 0
15994	decimalPos > (digitLeftCount + zeroDigitCount)
15994	decimalPos < digitLeftCount
15994	inQuote
15994	decimalPos >= 0
15994	groupingCount == 0
15994	decimalPos < 0
15994	digitRightCount > 0
15995	j == 1
15996	pattern.length() == 0
15997	gotNegative
15997	negSuffixPattern.equals(posSuffixPattern)
15997	negPrefixPattern.equals(posPrefixPattern)
15998	minimumIntegerDigits > maximumIntegerDigits
15999	minimumIntegerDigits > maximumIntegerDigits
16000	minimumFractionDigits > maximumFractionDigits
16001	minimumFractionDigits > maximumFractionDigits
16002	currency != symbols.getCurrency()
16003	isCurrencyFormat
16004	roundingMode == null
16005	currency == null
16006	currency != null
16007	digits != -1
16008	oldMinDigits == getMaximumFractionDigits()
16009	serialVersionOnStream < 4
16010	super.getMaximumFractionDigits() > DOUBLE_FRACTION_DIGITS
16010	super.getMaximumIntegerDigits() > DOUBLE_INTEGER_DIGITS
16011	serialVersionOnStream < 3
16012	serialVersionOnStream < 1
15697	pool.hasProviders()
15698	providersInstance != null
15699	currencyCode != null
15700	currency == null
15701	exp == null
15702	obj == null
15703	this == obj
15704	getClass() != obj.getClass()
15705	data == null
15706	numberType != null
15706	numberType.equals("thai")
15707	"".equals(locale.getCountry())
15708	currency != null
15709	data[1] == intlCurrencySymbol
15709	data[1] != null
15710	needCacheUpdate
15711	serialVersionOnStream < 1
15712	serialVersionOnStream < 2
15713	serialVersionOnStream < 3
15714	intlCurrencySymbol != null
14355	prefixImplClass != null
9243	aComponent.isVisible()
9243	aComponent.isDisplayable()
9243	aComponent.isEnabled()
9244	aComponent instanceof Window
9245	enableTest.isLightweight()
9245	enableTest.isEnabled()
9246	enableTest instanceof Window
9247	aComponent.isFocusTraversableOverridden()
6025	newFocusedWindow != null
6025	restoreFocus(newFocusedWindow, vetoedComponent, false)
6026	doRestoreFocus(realOppositeComponent, vetoedComponent, false)
6026	realOppositeComponent != null
6027	fe.getOppositeComponent() != null
6027	doRestoreFocus(fe.getOppositeComponent(), vetoedComponent, false)
6028	restoreFocus(realOppositeWindow, null, false)
6028	realOppositeWindow != null
6029	restoreFocus(we.getOppositeWindow(), null, false)
6029	we.getOppositeWindow() != null
6030	doRestoreFocus(toFocus, vetoedComponent, false)
6030	toFocus != null
6030	toFocus != vetoedComponent
6031	clearOnFailure
6032	toFocus.canBeFocusOwner()
6032	toFocus.requestFocus(false, CausedFocusEvent.Cause.ROLLBACK)
6032	toFocus != vetoedComponent
6032	toFocus.isShowing()
6033	nextFocus != null
6033	nextFocus != vetoedComponent
6033	nextFocus.requestFocusInWindow(CausedFocusEvent.Cause.ROLLBACK)
6034	clearOnFailure
6035	myAppContext == targetAppContext
6036	targetAppContext.isDisposed()
6037	EventQueue.isDispatchThread()
6038	focusLog.isLoggable(PlatformLogger.FINE)
6038	e instanceof FocusEvent
6038	e instanceof WindowEvent
6039	newFocusedWindow == oldFocusedWindow
6040	newFocusedWindow.isVisible()
6040	newFocusedWindow.isDisplayable()
6040	newFocusedWindow.isFocusableWindow()
6041	oldFocusedWindow != null
6042	isEventDispatched
6043	newActiveWindow != currentActiveWindow
6044	newActiveWindow != getGlobalActiveWindow()
6045	newFocusedWindow != getGlobalFocusedWindow()
6046	inSendMessage == 0
6047	newFocusedWindow.isFocusableWindow()
6047	toFocus == null
6048	focusLog.isLoggable(PlatformLogger.FINER)
6049	tempLost != null
6050	toFocus != null
6050	toFocus != tempLost
6051	realOppositeWindow != we.getOppositeWindow()
6052	oldActiveWindow == newActiveWindow
6053	oldActiveWindow != null
6054	isEventDispatched
6055	getGlobalActiveWindow() != null
6056	newActiveWindow != getGlobalActiveWindow()
6057	oldFocusOwner == newFocusOwner
6058	focusLog.isLoggable(PlatformLogger.FINE)
6059	oldFocusOwner != null
6060	isEventDispatched
6061	fe.isTemporary()
6062	newFocusedWindow != null
6062	newFocusedWindow != currentFocusedWindow
6063	newFocusedWindow != getGlobalFocusedWindow()
6064	newFocusOwner.isEnabled()
6064	cause.equals(CausedFocusEvent.Cause.UNKNOWN)
6064	newFocusOwner.isShowing()
6064	newFocusOwner.isFocusable()
6065	KeyboardFocusManager.isAutoFocusTransferEnabled()
6066	newFocusedWindow == null
6067	newFocusOwner != getGlobalFocusOwner()
6068	KeyboardFocusManager.isAutoFocusTransferEnabled()
6069	fe.isTemporary()
6070	newFocusOwner != getGlobalPermanentFocusOwner()
6071	KeyboardFocusManager.isAutoFocusTransferEnabled()
6072	realOppositeComponent != null
6072	realOppositeComponent != fe.getOppositeComponent()
6073	currentFocusOwner == null
6074	focusLog.isLoggable(PlatformLogger.FINE)
6075	currentFocusOwner == fe.getOppositeComponent()
6076	focusLog.isLoggable(PlatformLogger.FINE)
6077	getGlobalFocusOwner() != null
6078	fe.isTemporary()
6079	getGlobalPermanentFocusOwner() != null
6080	owningWindow != null
6081	currentActiveWindow == null
6082	currentActiveWindow != e.getSource()
6083	getGlobalActiveWindow() != null
6084	focusLog.isLoggable(PlatformLogger.FINE)
6085	currentFocusedWindow == null
6086	losingFocusWindow == activeWindow
6086	inSendMessage == 0
6086	oppositeWindow == currentFocusedWindow
6087	currentFocusOwner != null
6088	oppositeWindow != null
6089	oppositeComp == null
6090	oppositeComp == null
6091	getGlobalFocusedWindow() != null
6092	oppositeWindow == null
6093	getGlobalActiveWindow() != null
6094	focusOwner.canBeFocusOwner()
6094	focusOwner != null
6094	focusOwner.isShowing()
6095	e.isConsumed()
6096	comp.isEnabled()
6096	comp != null
6097	processors != null
6098	stopPostProcessing
6099	peer instanceof LightweightPeer
6099	peer == null
6100	target != null
6101	peer != null
6102	e.isConsumed()
6103	p != null
6104	enqueuedKeyEvents.size() != 0
6105	typeAheadMarkers.size() != 0
6106	ke.getWhen() > marker.after
6107	ke != null
6108	ke != null
6109	focusLog.isLoggable(PlatformLogger.FINEST)
6110	typeAheadMarkers.size() != 0
6111	e.isPosted
6111	typeAheadMarkers.size() != 0
6112	ke.getWhen() > marker.after
6113	hasMarker(target)
6114	((TypeAheadMarker)iter.next()).untilFocused == target
6115	found
6116	((TypeAheadMarker)iter.next()).untilFocused == comp
6117	((AWTEvent) ke).isPosted
6118	ke.getSource() == null
6119	KeyboardFocusManager.isProxyActive(ke)
6120	target != null
6121	peer != null
6122	dispatchers != null
6123	((KeyEventDispatcher)(iter.next())). dispatchKeyEvent(ke)
6124	consumeNextKeyTyped
6124	e.getID() == KeyEvent.KEY_TYPED
6125	consumeProcessedKeyEvent(e)
6126	e.getID() == KeyEvent.KEY_TYPED
6127	focusedComponent.getFocusTraversalKeysEnabled()
6127	e.isConsumed()
6128	containsOpp
6128	contains
6129	contains
6130	e.getID() == KeyEvent.KEY_PRESSED
6131	contains
6131	containsOpp
6132	contains
6133	containsOpp
6133	contains
6134	contains
6135	((Container)focusedComponent).isFocusCycleRoot()
6135	focusedComponent instanceof Container
6136	contains
6136	containsOpp
6137	contains
6138	untilFocused == null
6139	marker.after <= after
6140	untilFocused == null
6141	after < 0
6142	marker.untilFocused == untilFocused
6143	marker.after == after
6143	marker.untilFocused == untilFocused
6144	comp == null
6145	match
6146	start < 0
6147	start >= 0
6148	start < 0
6149	end < 0
6149	start < time
6149	time <= end
6150	time > end
6150	end >= 0
6151	aComponent != null
6152	aComponent != null
6153	aComponent != null
6154	aContainer != null
6154	aContainer.isFocusCycleRoot()
10632	definesEquals != null
10633	property == null
10634	pd == null
10635	method == null
10636	getter != null
10636	setter != null
10637	Objects.equals(newValue, out.get(oldValue))
10638	Array.getLength(e) % 3 == 0
10638	e instanceof Object[]
10639	f.get(null).equals(oldValue)
10640	ReflectUtil.isPackageAccessible(field.getDeclaringClass())
10641	Modifier.isFinal(mod)
10641	Modifier.isTransient(mod)
10641	Modifier.isStatic(mod)
10642	Objects.equals(newValue, out.get(oldValue))
10643	d.isTransient()
10644	java.awt.Component.class.isAssignableFrom(type)
10645	d.isTransient()
10646	listenerType == java.awt.event.ComponentListener.class
10647	listenerType == javax.swing.event.ChangeListener.class
10647	type == javax.swing.JMenuItem.class
10648	oldInstance.getClass() == type
10649	property.equals(pd.getName())
1883	b== null
1884	off < 0
1884	len < 0
1884	off > b.length - len
1885	b == null
1886	len < 0
1886	off < 0
1886	off > b.length - len
1887	this.strategy != strategy
1888	level > 9
1888	level != DEFAULT_COMPRESSION
1888	level < 0
1889	this.level != level
1890	b == null
1891	off < 0
1891	len < 0
1891	off > b.length - len
1892	flush == NO_FLUSH
1892	flush == FULL_FLUSH
1892	flush == SYNC_FLUSH
1893	addr != 0
1894	zsRef.address() == 0
1968	in == null
1969	in == null
1970	defl == null
1971	bufLen < 1
1972	in != null
1973	usesDefaultDeflater
1974	len <= 0
1975	b == null
1976	off < 0
1976	len > b.length - off
1976	len < 0
1977	len == 0
1978	def.needsInput()
1979	n < 0
1980	n > 0
1981	cnt == 0
1981	def.finished()
1982	n < 0
1983	rbuf.length < 512
1984	len < 0
1985	reachEOF
1895	out == null
1895	def == null
1896	size <= 0
1897	def.finished()
1898	(off | len | (off + len) | (b.length - (off + len))) < 0
1899	len == 0
1900	def.finished()
1901	def.finished()
1902	closed
1903	usesDefaultDeflater
1904	len > 0
1905	syncFlush
1905	def.finished()
1906	len < buf.length
3035	q.peek() == e
3036	first == null
3036	first.getDelay(TimeUnit.NANOSECONDS) > 0
3037	first == null
3038	delay <= 0
3039	leader != null
3040	leader == thisThread
3041	q.peek() != null
3041	leader == null
3042	first == null
3043	nanos <= 0
3044	delay <= 0
3045	nanos <= 0
3046	leader != null
3046	nanos < delay
3047	leader == thisThread
3048	leader == null
3048	q.peek() != null
3049	c == null
3050	c == this
3051	first == null
3051	first.getDelay(TimeUnit.NANOSECONDS) > 0
3052	c == null
3053	c == this
3054	maxElements <= 0
3055	first.getDelay(TimeUnit.NANOSECONDS) > 0
3055	first == null
13598	files == null
4743	GraphicsEnvironment.isHeadless()
4744	Desktop.isDesktopSupported()
4745	desktop == null
4746	defaultToolkit instanceof SunToolkit
4747	file == null
4748	file.exists()
4749	isSupported(actionType)
4750	sm != null
4751	sm != null
4752	uri == null
4753	securityException == null
4754	db == null
4755	mailtoURI == null
4756	"mailto".equalsIgnoreCase(mailtoURI.getScheme())
4757	sm != null
7441	owner instanceof Frame
7441	owner != null
7441	owner instanceof Dialog
7442	owner != null
7442	owner instanceof Dialog
7442	owner instanceof Frame
7443	parent.getPeer() == null
7443	parent != null
7444	peer == null
7445	type == null
7446	Toolkit.getDefaultToolkit().isModalityTypeSupported(type)
7447	modalityType == type
7448	peer != null
7449	peer == null
7450	visible
7451	isModal()
7452	time != null
7452	isFocusable()
7452	isModalBlocked()
7452	isEnabled()
7452	toFocus != null
7453	isModalBlocked()
7454	child.showWithParent
7454	child != null
7455	componentListener != null
7455	Toolkit.enabledOnToolkit(AWTEvent.COMPONENT_EVENT_MASK)
7455	(eventMask & AWTEvent.COMPONENT_EVENT_MASK) != 0
7456	(state & OPENED) == 0
7456	retval
7457	initialized
7458	isModal()
7459	conditionalShow(predictedFocusOwner, time)
7460	modalityType == ModalityType.TOOLKIT_MODAL
7461	appContext == showAppContext
7462	secondaryLoop.enter()
7463	modalityType == ModalityType.TOOLKIT_MODAL
7464	appContext == showAppContext
7465	windowClosingException != null
7466	predictedFocusOwner != null
7467	tk instanceof SunToolkit
7468	tk instanceof SunToolkit
7469	isModal()
7470	windowClosingException != null
7471	secondaryLoop != null
7472	modalFilter != null
7473	secondaryLoop != null
7474	isInDispose
7475	visible
7476	peer != null
7477	testvalid
7478	isDisplayable()
7479	undecorated
7480	getOpacity() < 1.0f
7481	getShape() != null
7482	bg != null
7482	bg.getAlpha() < 255
7483	isUndecorated()
7483	opacity < 1.0f
7484	isUndecorated()
7484	shape != null
7485	bgColor.getAlpha() < 255
7485	bgColor != null
7485	isUndecorated()
7486	title != null
7487	d.shouldBlock(this)
7488	w == this
7488	shouldBlock(d)
7488	modalityType.compareTo(d.getModalityType()) < 0
7489	blocker.isModalBlocked()
7490	blockers.contains(blockerBlocker)
7491	blockers.size() > 0
7492	shouldBlock(w)
7492	blockersHierarchies.contains(w)
7493	w instanceof Dialog
7493	((Dialog)w).isModal_NoClientCode()
7494	wd.shouldBlock(this)
7494	modalDialogs.indexOf(wd) > modalDialogs.indexOf(this)
7495	isModalBlocked()
7496	((Dialog)w).isModal_NoClientCode()
7496	w instanceof Dialog
7497	isModal_NoClientCode()
7497	w == this
7497	isVisible_NoClientCode()
7497	isInHide
7497	w.isVisible_NoClientCode()
7497	w.isInShow
7498	((Dialog)w).isInHide
7498	w instanceof Dialog
7499	c == blockerToCheck
7500	w.isModalExcluded(ModalExclusionType.APPLICATION_EXCLUDE)
7501	w.isModalBlocked()
7502	dpeer == null
7503	w.isModalBlocked()
7504	w.isModalBlocked()
7504	blockedWindows.contains(w)
7505	modalDialog.shouldBlock(w)
7506	mt == ModalityType.TOOLKIT_MODAL
7507	sm != null
7508	localModalityType == null
7509	accessibleContext == null
15678	tmp != null
15679	cachedBreakPositions != null
15679	positionInCache > 0
15680	cachedBreakPositions != null
15681	cachedBreakPositions == null
15681	offset > cachedBreakPositions[cachedBreakPositions.length - 1]
15681	offset <= cachedBreakPositions[0]
15682	cachedBreakPositions == null
15682	offset >= cachedBreakPositions[cachedBreakPositions.length - 1]
15682	offset < cachedBreakPositions[0]
15683	cachedBreakPositions == null
15683	positionInCache == cachedBreakPositions.length - 1
15684	dictionaryCharCount > 1
15684	result - startPos > 1
15685	cachedBreakPositions != null
15686	categoryFlags[result]
15686	result != RuleBasedBreakIterator.IGNORE
15687	dictionary.getNextState(state, 0) == -1
15688	state == -1
15689	state == 0
15689	text.getIndex() >= endPos
15690	text.getIndex() > farthestEndPoint
15691	possibleBreakPositions.isEmpty()
15692	bestBreakPositions != null
15693	farthestEndPoint < endPos
15694	currentBreakPositions.size() == 0
15694	text.getIndex() != startPos
15694	((Integer)(currentBreakPositions.peek())).intValue() != text.getIndex()
15695	text.getIndex() >= endPos
15696	currentBreakPositions.isEmpty()
16869	ch != -1
16869	on
16870	result != -1
16870	on
16942	on
16943	on
15731	digits[i] != '0'
15732	count == digits.length
15733	count == 0
15734	count == 0
15735	isLongMIN_VALUE()
15736	count == 0
15737	decimalAt == 0
15738	decimalAt == count
15739	count == 0
15740	decimalAt < count
15740	decimalAt > MAX_COUNT
15741	decimalAt < MAX_COUNT
15742	dig > max
15743	dig < max
15744	count < decimalAt
15745	c == '.'
15746	c == 'E'
15746	c == 'e'
15747	nonZeroDigitSeen
15748	decimalAt != -1
15748	nonZeroDigitSeen
15749	nonZeroDigitSeen
15750	decimalAt == -1
15751	nonZeroDigitSeen
15752	fixedPoint
15753	-decimalAt > maximumDigits
15754	-decimalAt == maximumDigits
15755	shouldRoundUp(0)
15756	maximumDigits >= 0
15756	maximumDigits < count
15757	shouldRoundUp(maximumDigits)
15758	maximumDigits < 0
15759	digits[maximumDigits] <= '9'
15760	maximumDigits < count
15761	digits[i] != '0'
15762	digits[i] != '0'
15763	digits[i] != '0'
15764	digits[maximumDigits] >= '5'
15765	digits[maximumDigits] > '5'
15766	digits[maximumDigits] == '5'
15767	digits[i] != '0'
15768	digits[maximumDigits] > '5'
15769	digits[maximumDigits] == '5'
15770	digits[i] != '0'
15771	digits[i] != '0'
15772	source <= 0
15773	source == Long.MIN_VALUE
15774	maximumDigits > 0
15775	maximumDigits > 0
15776	this == obj
15777	obj instanceof DigitList
15778	count != other.count
15778	decimalAt != other.decimalAt
15779	digits[i] != other.digits[i]
15780	decimalAt != count
15780	count != MAX_COUNT
15781	digits[i] != LONG_MIN_REP[i]
15782	(c = str[offset]) == '-'
15783	c == '+'
15784	c <= '9'
15784	c >= '0'
15785	isZero()
15786	tempBuffer == null
15787	len > digits.length
15788	data.length < length
15788	data == null
6847	obj instanceof Dimension
13091	base % ps != 0
13091	pa
13092	(length << 0) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD
13093	length > rem
13094	src instanceof DirectByteBuffer
13095	src == this
13096	srem > rem
13097	src.hb != null
13098	(length << 0) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
13099	length > rem
13100	unaligned
13101	unaligned
13102	(address + off) % (1 << 1) != 0
13102	unaligned
13103	unaligned
13104	unaligned
13105	unaligned
13105	(address + off) % (1 << 1) != 0
13106	unaligned
13107	unaligned
13108	unaligned
13108	(address + off) % (1 << 2) != 0
13109	unaligned
13110	unaligned
13111	(address + off) % (1 << 3) != 0
13111	unaligned
13112	unaligned
13113	unaligned
13114	unaligned
13114	(address + off) % (1 << 2) != 0
13115	unaligned
13116	unaligned
13117	unaligned
13117	(address + off) % (1 << 3) != 0
12788	(address + off) % (1 << 1) != 0
12788	unaligned
12789	(address + off) % (1 << 1) != 0
12789	unaligned
12790	(address + off) % (1 << 2) != 0
12790	unaligned
12791	unaligned
12791	(address + off) % (1 << 3) != 0
12792	(address + off) % (1 << 2) != 0
12792	unaligned
12793	unaligned
12793	(address + off) % (1 << 3) != 0
13346	end > limit()
13346	start > end
13347	start < 0
13347	start > end
13347	end > len
12776	end > limit()
12776	start > end
12777	start < 0
12777	end > len
12777	start > end
12794	(length << 1) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD
12795	length > rem
12796	order() != ByteOrder.nativeOrder()
12797	src instanceof DirectCharBufferS
12798	src == this
12799	srem > rem
12800	src.hb != null
12801	(length << 1) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
12802	length > rem
12803	order() != ByteOrder.nativeOrder()
12804	end > limit()
12804	start > end
12805	start < 0
12805	end > len
12805	start > end
12806	(length << 1) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD
12807	length > rem
12808	order() != ByteOrder.nativeOrder()
12809	src instanceof DirectCharBufferU
12810	src == this
12811	srem > rem
12812	src.hb != null
12813	(length << 1) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
12814	length > rem
12815	order() != ByteOrder.nativeOrder()
12816	end > limit()
12816	start > end
12817	end > len
12817	start > end
12817	start < 0
8052	ColorModel.isLinearRGBspace(colorSpace)
8053	maxBits <= 8
8054	is_sRGB
8055	space.getMinValue(i) != 0.0f
8055	space.getMaxValue(i) != 1.0f
8056	supportsAlpha
8057	isAlphaPremultiplied
8058	scaleFactors[idx] != 1.0f
8059	isAlphaPremultiplied
8060	nBits[idx] != lRGBprecision
8061	lRGBprecision == 16
8062	is_sRGB
8063	is_LinearRGB
8064	is_sRGB
8065	is_LinearRGB
8066	is_sRGB
8067	is_LinearRGB
8068	supportsAlpha
8069	scaleFactors[3] != 1.0f
8070	is_LinearRGB
8070	is_sRGB
8071	transferType == DataBuffer.TYPE_INT
8071	pixel != null
8072	this == defaultCM
8072	equals(defaultCM)
8073	is_LinearRGB
8073	is_sRGB
8074	is_LinearRGB
8075	lRGBprecision == 8
8076	supportsAlpha
8077	isAlphaPremultiplied
8078	nBits[3] != 8
8079	alp > ((1<<nBits[3]) - 1)
8080	nBits[0] != precision
8081	nBits[1] != precision
8082	nBits[2] != precision
8083	supportsAlpha
8084	isAlphaPremultiplied
8085	nBits[3] != 8
8086	alp > ((1<<nBits[3]) - 1)
8087	maxBits > 23
8088	red > ((1<<nBits[0]) - 1)
8089	grn > ((1<<nBits[1]) - 1)
8090	blu > ((1<<nBits[2]) - 1)
8091	pixel == null
8092	pixel == null
8093	components == null
8094	h <= 0
8094	w <= 0
8095	supportsAlpha
8096	pixel_bits > 16
8097	pixel_bits > 8
8098	obj instanceof byte[]
8099	obj instanceof short[]
8100	obj instanceof int[]
8101	supportsAlpha
8101	this.isAlphaPremultiplied() == isAlphaPremultiplied
8102	isAlphaPremultiplied
8103	normAlpha != 0.f
8104	zpixel == null
8105	normAlpha != 0.f
8106	zpixel == null
8107	normAlpha != 0.f
8108	zpixel == null
8109	normAlpha != 0.0f
8110	normAlpha != 0
8111	normAlpha != 0
8112	sm instanceof SinglePixelPackedSampleModel
8113	spsm.getNumBands() != getNumComponents()
8114	bitMasks[i] != maskArray[i]
8115	nBits[0] < 8
8116	nBits[1] < 8
8117	nBits[2] < 8
8118	supportsAlpha
8119	nBits[3] < 8
13348	(length << 3) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD
13349	length > rem
13350	order() != ByteOrder.nativeOrder()
13351	src instanceof DirectDoubleBufferS
13352	src == this
13353	srem > rem
13354	src.hb != null
13355	(length << 3) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
13356	length > rem
13357	order() != ByteOrder.nativeOrder()
12916	(length << 3) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD
12917	length > rem
12918	order() != ByteOrder.nativeOrder()
12919	src instanceof DirectDoubleBufferU
12920	src == this
12921	srem > rem
12922	src.hb != null
12923	(length << 3) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
12924	length > rem
12925	order() != ByteOrder.nativeOrder()
13069	(length << 2) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD
13070	length > rem
13071	order() != ByteOrder.nativeOrder()
13072	src instanceof DirectFloatBufferS
13073	src == this
13074	srem > rem
13075	src.hb != null
13076	(length << 2) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
13077	length > rem
13078	order() != ByteOrder.nativeOrder()
13155	(length << 2) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD
13156	length > rem
13157	order() != ByteOrder.nativeOrder()
13158	src instanceof DirectFloatBufferU
13159	src == this
13160	srem > rem
13161	src.hb != null
13162	(length << 2) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
13163	length > rem
13164	order() != ByteOrder.nativeOrder()
13118	(length << 2) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD
13119	length > rem
13120	order() != ByteOrder.nativeOrder()
13121	src instanceof DirectIntBufferS
13122	src == this
13123	srem > rem
13124	src.hb != null
13125	(length << 2) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
13126	length > rem
13127	order() != ByteOrder.nativeOrder()
13287	(length << 2) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD
13288	length > rem
13289	order() != ByteOrder.nativeOrder()
13290	src instanceof DirectIntBufferU
13291	src == this
13292	srem > rem
13293	src.hb != null
13294	(length << 2) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
13295	length > rem
13296	order() != ByteOrder.nativeOrder()
12826	(length << 3) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD
12827	length > rem
12828	order() != ByteOrder.nativeOrder()
12829	src instanceof DirectLongBufferS
12830	src == this
12831	srem > rem
12832	src.hb != null
12833	(length << 3) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
12834	length > rem
12835	order() != ByteOrder.nativeOrder()
13165	(length << 3) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD
13166	length > rem
13167	order() != ByteOrder.nativeOrder()
13168	src instanceof DirectLongBufferU
13169	src == this
13170	srem > rem
13171	src.hb != null
13172	(length << 3) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
13173	length > rem
13174	order() != ByteOrder.nativeOrder()
11633	member.isResolved()
11634	member.isAbstract()
11634	member.getDeclaringClass().isInterface()
11634	member.isMethod()
11635	m != null
11635	m.isPublic()
11636	member.isStatic()
11637	member.getDeclaringClass().isAssignableFrom(receiver)
11637	member.isConstructor()
11638	member.isField()
11639	member.isStatic()
11640	member.isConstructor()
11641	basicType == 'L'
11641	pos == 0
11642	concrete != null
11643	concrete != null
11644	receiver != null
11645	concrete != null
11646	shouldBeInitialized(m)
11646	which == LF_INVSTATIC
11647	lform != null
11648	doesAlloc
11649	doesAlloc
11650	needsInit
11651	doesAlloc
11652	VerifyAccess.isSamePackage(m.getDeclaringClass(), MethodHandle.class)
11653	cls == Invokers.class
11653	cls == MethodHandleImpl.class
11653	cls == ValueConversions.class
11654	VerifyAccess.isSamePackage(MethodHandle.class, cls)
11654	VerifyAccess.isSamePackage(ValueConversions.class, cls)
11655	UNSAFE.shouldBeInitialized(cls)
11656	checkInitialized(member)
11657	member.isField()
11658	ref == null
11659	clinitThread == Thread.currentThread()
11660	UNSAFE.shouldBeInitialized(defc)
11661	ftype.isPrimitive()
11662	VerifyType.isNullReferenceConversion(Object.class, ftype)
11663	shouldBeInitialized(m)
11664	lform != null
11665	isVolatile
11666	isGetter
11667	isGetter
11668	isStatic
11669	needsInit
11670	isGetter
11670	needsCast
11671	isStatic
11672	isGetter
11673	isGetter
11673	needsCast
11674	needsCast
11675	needsInit
12837	(length << 1) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD
12838	length > rem
12839	order() != ByteOrder.nativeOrder()
12840	src instanceof DirectShortBufferS
12841	src == this
12842	srem > rem
12843	src.hb != null
12844	(length << 1) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
12845	length > rem
12846	order() != ByteOrder.nativeOrder()
12778	(length << 1) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD
12779	length > rem
12780	order() != ByteOrder.nativeOrder()
12781	src instanceof DirectShortBufferU
12782	src == this
12783	srem > rem
12784	src.hb != null
12785	(length << 1) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
12786	length > rem
12787	order() != ByteOrder.nativeOrder()
13050	cause instanceof IOException
6201	dm == null
6202	dm instanceof DisplayMode
9315	a == null
9316	b == null
9317	oldl == a
9318	oldl == b
9319	b2 == b
9319	a2 == a
9320	l == oldl
9320	l == null
9321	l instanceof DnDEventMulticaster
11122	FpUtils.isFinite(d)
11123	FpUtils.rawCopySign(1.0, d) == -1.0
11124	d == 0.0
11125	(result & DoubleConsts.SIGNIF_BIT_MASK) != 0L
11125	(result & DoubleConsts.EXP_BIT_MASK) == DoubleConsts.EXP_BIT_MASK
11126	d1 < d2
11127	d1 > d2
13175	capacity < 0
13176	length > remaining()
13177	src == this
13178	n > remaining()
13179	length > remaining()
13180	hb == null
13181	isReadOnly
13182	hb == null
13183	isReadOnly
13184	this == ob
13185	ob instanceof DoubleBuffer
13186	this.remaining() != that.remaining()
13187	equals(this.get(i), that.get(j))
13188	cmp != 0
9353	(component = dgr.getComponent()) == null
9354	(dragSource = dgr.getDragSource()) == null
9355	evs == null
9355	evs.isEmpty()
9356	act != DnDConstants.ACTION_LINK
9356	act != DnDConstants.ACTION_COPY
9356	act != DnDConstants.ACTION_MOVE
9357	ori == null
9358	events == null
9322	ds == null
9323	dgl != null
9324	component != null
9324	dragGestureListener != null
9325	component != null
9325	dragGestureListener != null
9326	dragGestureListener != null
9327	component != null
9328	dragGestureListener == null
9328	dragGestureListener.equals(dgl)
9329	component != null
9330	dragGestureListener != null
9331	GraphicsEnvironment.isHeadless()
9332	GraphicsEnvironment.isHeadless()
9333	GraphicsEnvironment.isHeadless()
9334	flavorMap != null
9335	dsc == null
9336	dsl != null
9337	dsl != null
9338	dsml != null
9339	dsml != null
9340	listenerType == DragSourceListener.class
9341	listenerType == DragSourceMotionListener.class
9342	dsl != null
9343	dsl != null
9344	dsl != null
9345	dsl != null
9346	dsl != null
9347	dsml != null
9348	flavorMap == null
9349	dragSourceListenerK == key
9350	dragSourceMotionListenerK == key
9351	ts > 0
9352	td != null
9258	dscp == null
9259	trigger == null
9260	trigger.getDragSource() == null
9261	trigger.getComponent() == null
9262	trigger.getSourceAsDragGestureRecognizer().getSourceActions() == DnDConstants.ACTION_NONE
9263	trigger.getDragAction() == DnDConstants.ACTION_NONE
9264	t == null
9265	dragImage != null
9265	offset == null
9266	dsl == null
9267	equals(dsl)
9268	listener != null
9269	listener.equals(dsl)
9269	listener != null
9270	peer != null
9271	dsl != null
9272	dsl != null
9273	dsl != null
9274	dsl != null
9275	dsl != null
9276	useCustomCursor
9277	ra == DnDConstants.ACTION_NONE
9278	(sourceAct & DnDConstants.ACTION_LINK) == DnDConstants.ACTION_LINK
9279	(sourceAct & DnDConstants.ACTION_MOVE) == DnDConstants.ACTION_MOVE
9280	(ra & DnDConstants.ACTION_LINK) == DnDConstants.ACTION_LINK
9281	(ra & DnDConstants.ACTION_MOVE) == DnDConstants.ACTION_MOVE
9282	cursor == null
9282	cursor.equals(c)
9283	peer != null
9284	transferable == null
9285	emptyTransferable == null
9297	(modifiers & ~(JDK_1_3_MODIFIERS | JDK_1_4_MODIFIERS)) != 0
9298	getGestureModifiers() != 0
9298	getGestureModifiersEx() == 0
9299	getGestureModifiersEx() != 0
9299	getGestureModifiers() == 0
9300	(modifiers & ~(JDK_1_3_MODIFIERS | JDK_1_4_MODIFIERS)) != 0
9301	getGestureModifiers() != 0
9301	getGestureModifiersEx() == 0
9302	getGestureModifiersEx() != 0
9302	getGestureModifiers() == 0
9303	(gestureModifiers & InputEvent.BUTTON1_MASK) != 0
9304	(gestureModifiers & InputEvent.BUTTON2_MASK) != 0
9305	(gestureModifiers & InputEvent.BUTTON3_MASK) != 0
9306	(gestureModifiers & InputEvent.SHIFT_MASK) != 0
9307	(gestureModifiers & InputEvent.CTRL_MASK) != 0
9308	(gestureModifiers & InputEvent.ALT_GRAPH_MASK) != 0
9309	(gestureModifiers & InputEvent.BUTTON1_DOWN_MASK) != 0
9310	(gestureModifiers & InputEvent.BUTTON2_DOWN_MASK) != 0
9311	(gestureModifiers & InputEvent.BUTTON3_DOWN_MASK) != 0
9312	(gestureModifiers & InputEvent.SHIFT_DOWN_MASK) != 0
9313	(gestureModifiers & InputEvent.CTRL_DOWN_MASK) != 0
9314	(gestureModifiers & InputEvent.ALT_GRAPH_DOWN_MASK) != 0
9296	locationSpecified
12720	sec != null
12721	user != null
12722	password != null
12723	isDriverAllowed(aDriver.driver, callerClass)
12724	aDriver.driver.acceptsURL(url)
12725	driver != null
12726	driver == null
12727	registeredDrivers.contains(aDriver)
12728	isDriverAllowed(driver, Reflection.getCallerClass())
12729	isDriverAllowed(aDriver.driver, callerClass)
12730	sec != null
12731	out != null
12732	logWriter != null
12733	driver != null
12734	drivers == null
12734	drivers.equals("")
12735	callerCL == null
12736	url == null
12737	isDriverAllowed(aDriver.driver, callerCL)
12738	con != null
12739	reason == null
12740	reason != null
9362	GraphicsEnvironment.isHeadless()
9363	dtl != null
9364	c != null
9365	fm != null
9366	component.equals(c)
9366	component == c
9366	component != null
9367	(old = component) != null
9368	componentPeer != null
9369	(component = c) != null
9370	old != null
9371	isActive != active
9372	active
9373	dtl == null
9374	equals(dtl)
9375	dtListener == null
9376	dtl != null
9376	dtListener != null
9377	dtListener.equals(dtl)
9378	active
9379	dtListener != null
9380	active
9381	active
9381	dtListener != null
9382	active
9383	dtListener != null
9384	active
9385	active
9385	dtListener != null
9386	dtListener != null
9386	active
9387	peer == componentPeer
9388	peer instanceof DropTargetPeer
9389	nativePeer != null
9390	dropTargetContext == null
9391	component instanceof Autoscroll
9391	component == null
9392	autoScroller != null
9393	autoScroller != null
9286	peer != null
9287	peer != null
9288	peer != null
9289	peer != null
9290	peer != null
9291	peer != null
9292	peer == null
9293	transferable == null
9294	transferable == null
9359	cursorLocn == null
9360	dropAction != DnDConstants.ACTION_MOVE
9360	dropAction != DnDConstants.ACTION_COPY
9360	dropAction != DnDConstants.ACTION_NONE
9360	dropAction != DnDConstants.ACTION_LINK
9361	(srcActions & ~(DnDConstants.ACTION_COPY_OR_MOVE | DnDConstants.ACTION_LINK)) != 0
9255	cursorLocn == null
9256	dropAction != DnDConstants.ACTION_COPY
9256	dropAction != DnDConstants.ACTION_NONE
9256	dropAction != DnDConstants.ACTION_MOVE
9256	dropAction != DnDConstants.ACTION_LINK
9257	(srcActions & ~(DnDConstants.ACTION_COPY_OR_MOVE | DnDConstants.ACTION_LINK)) != 0
621	right - left < QUICKSORT_THRESHOLD
622	a[k] < a[k + 1]
623	a[k] > a[k + 1]
624	--m == 0
625	++count == MAX_RUN_COUNT
626	run[count] == right++
627	count == 1
628	odd == 0
629	a[p] <= a[q]
629	q >= hi
629	p < mi
630	(count & 1) != 0
631	length < INSERTION_SORT_THRESHOLD
632	leftmost
633	j-- == left
634	left >= right
635	a1 < a2
636	a[e2] < a[e1]
637	a[e3] < a[e2]
638	t < a[e1]
639	a[e4] < a[e3]
640	t < a[e2]
641	t < a[e1]
642	a[e5] < a[e4]
643	t < a[e3]
644	t < a[e2]
645	t < a[e1]
646	a[e1] != a[e2]
646	a[e3] != a[e4]
646	a[e4] != a[e5]
646	a[e2] != a[e3]
647	ak < pivot1
648	ak > pivot2
649	great-- == k
650	a[great] < pivot1
651	less < e1
651	e5 < great
652	ak == pivot1
653	ak == pivot2
654	great-- == k
655	a[great] == pivot1
656	a[k] == pivot
657	ak < pivot
658	a[great] < pivot
659	right - left < QUICKSORT_THRESHOLD
660	a[k] < a[k + 1]
661	a[k] > a[k + 1]
662	--m == 0
663	++count == MAX_RUN_COUNT
664	run[count] == right++
665	count == 1
666	odd == 0
667	q >= hi
667	a[p] <= a[q]
667	p < mi
668	(count & 1) != 0
669	length < INSERTION_SORT_THRESHOLD
670	leftmost
671	j-- == left
672	left >= right
673	a1 < a2
674	a[e2] < a[e1]
675	a[e3] < a[e2]
676	t < a[e1]
677	a[e4] < a[e3]
678	t < a[e2]
679	t < a[e1]
680	a[e5] < a[e4]
681	t < a[e3]
682	t < a[e2]
683	t < a[e1]
684	a[e3] != a[e4]
684	a[e4] != a[e5]
684	a[e2] != a[e3]
684	a[e1] != a[e2]
685	ak < pivot1
686	ak > pivot2
687	great-- == k
688	a[great] < pivot1
689	e5 < great
689	less < e1
690	ak == pivot1
691	ak == pivot2
692	great-- == k
693	a[great] == pivot1
694	a[k] == pivot
695	ak < pivot
696	a[great] < pivot
697	right - left > COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR
698	right - left < QUICKSORT_THRESHOLD
699	a[k] < a[k + 1]
700	a[k] > a[k + 1]
701	--m == 0
702	++count == MAX_RUN_COUNT
703	run[count] == right++
704	count == 1
705	odd == 0
706	p < mi
706	a[p] <= a[q]
706	q >= hi
707	(count & 1) != 0
708	length < INSERTION_SORT_THRESHOLD
709	leftmost
710	j-- == left
711	left >= right
712	a1 < a2
713	a[e2] < a[e1]
714	a[e3] < a[e2]
715	t < a[e1]
716	a[e4] < a[e3]
717	t < a[e2]
718	t < a[e1]
719	a[e5] < a[e4]
720	t < a[e3]
721	t < a[e2]
722	t < a[e1]
723	a[e3] != a[e4]
723	a[e2] != a[e3]
723	a[e4] != a[e5]
723	a[e1] != a[e2]
724	ak < pivot1
725	ak > pivot2
726	great-- == k
727	a[great] < pivot1
728	e5 < great
728	less < e1
729	ak == pivot1
730	ak == pivot2
731	great-- == k
732	a[great] == pivot1
733	a[k] == pivot
734	ak < pivot
735	a[great] < pivot
736	right - left > COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR
737	right - left < QUICKSORT_THRESHOLD
738	a[k] < a[k + 1]
739	a[k] > a[k + 1]
740	--m == 0
741	++count == MAX_RUN_COUNT
742	run[count] == right++
743	count == 1
744	odd == 0
745	q >= hi
745	p < mi
745	a[p] <= a[q]
746	(count & 1) != 0
747	length < INSERTION_SORT_THRESHOLD
748	leftmost
749	j-- == left
750	left >= right
751	a1 < a2
752	a[e2] < a[e1]
753	a[e3] < a[e2]
754	t < a[e1]
755	a[e4] < a[e3]
756	t < a[e2]
757	t < a[e1]
758	a[e5] < a[e4]
759	t < a[e3]
760	t < a[e2]
761	t < a[e1]
762	a[e2] != a[e3]
762	a[e4] != a[e5]
762	a[e3] != a[e4]
762	a[e1] != a[e2]
763	ak < pivot1
764	ak > pivot2
765	great-- == k
766	a[great] < pivot1
767	e5 < great
767	less < e1
768	ak == pivot1
769	ak == pivot2
770	great-- == k
771	a[great] == pivot1
772	a[k] == pivot
773	ak < pivot
774	a[great] < pivot
775	right - left > COUNTING_SORT_THRESHOLD_FOR_BYTE
776	j-- == left
777	ak != ak
778	middleValue < 0.0f
779	ak != 0.0f
780	Float.floatToRawIntBits(ak) < 0
781	right - left < QUICKSORT_THRESHOLD
782	a[k] < a[k + 1]
783	a[k] > a[k + 1]
784	--m == 0
785	++count == MAX_RUN_COUNT
786	run[count] == right++
787	count == 1
788	odd == 0
789	p < mi
789	q >= hi
789	a[p] <= a[q]
790	(count & 1) != 0
791	length < INSERTION_SORT_THRESHOLD
792	leftmost
793	j-- == left
794	left >= right
795	a1 < a2
796	a[e2] < a[e1]
797	a[e3] < a[e2]
798	t < a[e1]
799	a[e4] < a[e3]
800	t < a[e2]
801	t < a[e1]
802	a[e5] < a[e4]
803	t < a[e3]
804	t < a[e2]
805	t < a[e1]
806	a[e1] != a[e2]
806	a[e3] != a[e4]
806	a[e4] != a[e5]
806	a[e2] != a[e3]
807	ak < pivot1
808	ak > pivot2
809	great-- == k
810	a[great] < pivot1
811	e5 < great
811	less < e1
812	ak == pivot1
813	ak == pivot2
814	great-- == k
815	a[great] == pivot1
816	a[k] == pivot
817	ak < pivot
818	a[great] < pivot
819	ak != ak
820	middleValue < 0.0d
821	ak != 0.0d
822	Double.doubleToRawLongBits(ak) < 0
823	right - left < QUICKSORT_THRESHOLD
824	a[k] < a[k + 1]
825	a[k] > a[k + 1]
826	--m == 0
827	++count == MAX_RUN_COUNT
828	run[count] == right++
829	count == 1
830	odd == 0
831	q >= hi
831	a[p] <= a[q]
831	p < mi
832	(count & 1) != 0
833	length < INSERTION_SORT_THRESHOLD
834	leftmost
835	j-- == left
836	left >= right
837	a1 < a2
838	a[e2] < a[e1]
839	a[e3] < a[e2]
840	t < a[e1]
841	a[e4] < a[e3]
842	t < a[e2]
843	t < a[e1]
844	a[e5] < a[e4]
845	t < a[e3]
846	t < a[e2]
847	t < a[e1]
848	a[e4] != a[e5]
848	a[e1] != a[e2]
848	a[e3] != a[e4]
848	a[e2] != a[e3]
849	ak < pivot1
850	ak > pivot2
851	great-- == k
852	a[great] < pivot1
853	e5 < great
853	less < e1
854	ak == pivot1
855	ak == pivot2
856	great-- == k
857	a[great] == pivot1
858	a[k] == pivot
859	ak < pivot
860	a[great] < pivot
1385	f == null
16798	m <= 0
16799	m <= 0
16800	this.rp.testBit(m)
16800	bitCount != 3
16800	this.rp.testBit(0)
16800	bitCount != 5
16801	m <= 0
16802	this.ks.length != 1
16802	this.ks.length != 3
16803	this.ks[i] > m-1
16803	this.ks[i] < 1
16804	this.ks[i] >= this.ks[i-1]
16804	i != 0
16805	ks == null
16806	this == obj
16807	obj instanceof ECFieldF2m
16779	p.signum() != 1
16780	this == obj
16781	obj instanceof ECFieldFp
16767	stdName == null
16757	curve == null
16758	g == null
16759	n == null
16760	n.signum() != 1
16761	h <= 0
16762	y==null
16762	x==null
16763	this == obj
16764	this == POINT_INFINITY
16765	obj instanceof ECPoint
16766	this == POINT_INFINITY
16752	s == null
16753	params == null
16782	w == null
16783	params == null
16784	w == ECPoint.POINT_INFINITY
5070	ellw <= 0.0
5071	ellh <= 0.0
5072	w <= 0.0
5072	h <= 0.0
5073	ellw <= 0.0
5074	ellh <= 0.0
5075	normx0 > 0.0
5076	normx1 < 0.0
5077	normy0 > 0.0
5078	normy1 < 0.0
5079	obj == this
5080	obj instanceof Ellipse2D
5451	w < 0
5451	h < 0
5452	isDone()
5453	index == 5
5454	index == 0
5455	affine != null
5456	affine != null
5457	isDone()
5458	index == 5
5459	index == 0
5460	affine != null
5461	affine != null
16785	field instanceof ECFieldFp
16786	p.compareTo(c) != 1
16787	c.signum() < 0
16788	field instanceof ECFieldF2m
16789	c.bitLength() > m
16790	field == null
16791	a == null
16792	b == null
16793	seed != null
16794	seed == null
16795	this == obj
16796	obj instanceof EllipticCurve
16797	b.equals(curve.b)
16797	field.equals(curve.field)
16797	a.equals(curve.a)
10408	o == this
10409	pd == null
10410	pd != null
10411	oldInstance.getClass() == String.class
10411	oldInstance == this
10411	oldInstance == null
10412	o == null
10413	executeStatements
10413	oldStm.getTarget() != this
10414	get(oldValue) != null
10415	attributes == null
10416	attributes == null
12658	self.getDeclaringClass() != other.getDeclaringClass()
12658	self.getClass() != other.getClass()
12659	result != null
12660	name == null
4427	m instanceof EnumMap
4428	m.isEmpty()
4429	value.equals(val)
4430	oldValue == null
4431	isValidKey(key)
4432	oldValue != null
4433	isValidKey(key)
4434	maskNull(value).equals(vals[index])
4435	key == null
4436	m instanceof EnumMap
4437	em.keyType != keyType
4438	em.isEmpty()
4439	emValue != null
4440	vals[i] == null
4441	ks != null
4442	vs != null
4443	es != null
4444	this == o
4445	o instanceof EnumMap
4446	o instanceof Map
4447	size != m.size()
4448	null != vals[i]
4449	null == value
4450	m.containsKey(key)
4450	null == m.get(key)
4451	value.equals(m.get(key))
4452	em.keyType != keyType
4453	hisValue != ourValue
4453	hisValue == null
4453	hisValue.equals(ourValue)
4454	null != vals[i]
4455	keyClass != keyType
4455	keyClass.getSuperclass() != keyType
4456	null != vals[i]
550	universe == null
551	universe.length <= 64
552	c instanceof EnumSet
553	c.isEmpty()
554	from.compareTo(to) > 0
555	eClass.getSuperclass() != elementType
555	eClass != elementType
1644	reported
1645	msg != null
1646	ex != null
4710	actionKeyCodes[i][0] == keyCode
4711	actionKeyCodes[i][1] == key
4712	key != 0
4713	shiftDown()
4714	controlDown()
4715	metaDown()
4716	target != null
4717	arg != null
7410	isInterrupted()
7410	getEventQueue().detachDispatchThread(this, !doDispatch || isInterrupted())
7410	doDispatch
7411	eventFilters.contains(filter)
7412	filter instanceof ModalEventFilter
7413	f instanceof ModalEventFilter
7414	cf.compareTo(newFilter) > 0
7415	delegate != null
7415	id == ANY_EVENT
7416	accept == EventFilter.FilterAction.REJECT
7417	accept == EventFilter.FilterAction.ACCEPT_IMMEDIATELY
7418	eventOK
7419	eventLog.isLoggable(PlatformLogger.FINEST)
7420	delegate != null
7421	delegate != null
7422	eventLog.isLoggable(PlatformLogger.FINE)
10523	target == null
10524	action == null
10525	getters == null
10525	getters.equals("")
10526	firstDot == -1
10527	target != null
10528	getter == null
10529	getter == null
10530	getter == null
10531	System.getSecurityManager() != null
10531	acc == null
10532	method.getDeclaringClass() == Object.class
10533	methodName.equals("hashCode")
10534	methodName.equals("equals")
10535	methodName.equals("toString")
10536	listenerMethodName.equals(methodName)
10536	listenerMethodName == null
10537	eventPropertyName == null
10538	lastDot != -1
10539	targetMethod == null
10540	targetMethod == null
10541	listenerInterface == null
1386	source == null
7325	eventLog == null
7326	nextQueue != null
7327	dispatchThread == null
7328	theEvent.getSource() == AWTAutoShutdown.getInstance()
7329	theEvent instanceof PeerEvent
7330	(peerEvent.getFlags() & PeerEvent.ULTIMATE_PRIORITY_EVENT) != 0
7331	(peerEvent.getFlags() & PeerEvent.PRIORITY_EVENT) != 0
7332	(peerEvent.getFlags() & PeerEvent.LOW_PRIORITY_EVENT) != 0
7333	id <= PaintEvent.PAINT_LAST
7333	id >= PaintEvent.PAINT_FIRST
7334	coalesceEvent(theEvent, priority)
7335	queues[priority].head == null
7336	shouldNotify
7337	theEvent.getSource() != AWTAutoShutdown.getInstance()
7338	notifyID
7339	notifyID
7340	sourcePeer != null
7341	cache == null
7342	index != -1
7342	cache[index] != null
7343	merged != null
7344	bRect.contains(aRect)
7345	aRect.contains(bRect)
7346	e instanceof SunDropTargetEvent
7347	cache == null
7348	cache[index] != null
7348	index != -1
7349	cache == null
7350	index != -1
7350	cache[index] != null
7351	e != null
7352	entry.event.getSource() == source
7352	entry.event.getID() == id
7353	coalescedEvent != null
7354	e.getSource() instanceof Component
7355	e instanceof PeerEvent
7356	coalesceOtherEvent(e, priority)
7356	((Component)e.getSource()).isCoalescingEnabled()
7357	e instanceof PaintEvent
7358	e instanceof MouseEvent
7359	entry.event instanceof SunDropTargetEvent
7360	entry.event.getSource() instanceof Component
7360	index != -1
7361	source.eventCache == null
7362	entry.event.getSource() instanceof Component
7362	index != -1
7363	source.eventCache == null
7364	queues[i].head != null
7365	event != null
7366	queues[i].head != null
7367	entry.next == null
7368	entry.event.getID() == id
7369	prev == null
7370	queues[i].tail == entry
7371	queues[i].head != null
7372	q.event.getID() == id
7373	srcAcc == null
7374	event instanceof ActiveEvent
7375	src instanceof Component
7376	src instanceof MenuComponent
7377	src instanceof TrayIcon
7378	src instanceof AWTAutoShutdown
7379	noEvents()
7380	getEventLog().isLoggable(PlatformLogger.FINE)
7381	getEventLog().isLoggable(PlatformLogger.FINE)
7382	topQueue.dispatchThread.getEventQueue() == this
7382	topQueue.dispatchThread != null
7383	getEventLog().isLoggable(PlatformLogger.FINE)
7384	appContext.get(AppContext.EVENT_QUEUE_KEY) == topQueue
7385	getEventLog().isLoggable(PlatformLogger.FINE)
7386	prevQueue == null
7387	getEventLog().isLoggable(PlatformLogger.FINE)
7388	topQueue.dispatchThread.getEventQueue() == this
7388	topQueue.dispatchThread != null
7389	appContext.get(AppContext.EVENT_QUEUE_KEY) == this
7390	nextQueue != null
7391	dispatchThread == null
7392	threadGroup.isDestroyed()
7392	appContext.isDisposed()
7392	dispatchThread == null
7393	edt == dispatchThread
7394	forceDetach
7394	peekEvent() != null
7394	SunToolkit.isPostEventQueueEmpty()
7395	entry.event instanceof KeyEvent
7395	entry.event instanceof WindowEvent
7395	entry.event instanceof InputMethodEvent
7395	entry.event.getSource() == source
7395	removeAllEvents
7395	entry.event instanceof SequencedEvent
7395	entry.event instanceof FocusEvent
7395	entry.event instanceof SentEvent
7396	entry.event instanceof SequencedEvent
7397	entry.event instanceof SentEvent
7398	entry.event instanceof InvocationEvent
7399	prev == null
7400	Thread.currentThread() != dispatchThread
7401	e instanceof InputEvent
7402	e instanceof InputMethodEvent
7403	e instanceof ActionEvent
7404	e instanceof InvocationEvent
7405	EventQueue.isDispatchThread()
7406	eventThrowable != null
7407	nextQueue != null
7408	dispatchThread != null
7409	isShutdown
10431	listenerMethods.length > 0
10432	"vetoableChange".equals(eventSetName)
10432	args[0].getName().endsWith(eventName)
10433	sourceClass == null
10433	eventSetName == null
10433	listenerType == null
10434	listenerMethodNames[i] == null
10435	method != null
10436	name == null
10437	Modifier.isStatic(method.getModifiers())
10437	method == null
10438	methods == null
10439	listenerMethodDescriptors != null
10440	methods == null
10441	listenerMethodDescriptors == null
10442	method == null
10443	getClass0() == null
10444	method == null
10445	getClass0() == null
10446	method == null
10447	getClass0() == null
10448	y.listenerMethodDescriptors != null
10449	y.listenerTypeRef != null
10450	y.addMethodDescriptor != null
10451	y.removeMethodDescriptor != null
10452	y.getMethodDescriptor != null
10453	x.inDefaultEventSet
10453	y.inDefaultEventSet
10454	old.listenerMethodDescriptors != null
2603	slot == null
2604	(y = slot.get()) != null
2604	slot.compareAndSet(y, null)
2605	you.compareAndSet(null, item)
2606	y == null
2606	slot.compareAndSet(null, me)
2607	index == 0
2608	v != CANCEL
2609	m > (index >>>= 1)
2610	++fails > 1
2611	max.compareAndSet(m, m + 1)
2611	fails > 3
2611	m < FULL
2612	--index < 0
2613	a[index] == null
2614	node.compareAndSet(null, CANCEL)
2615	slot.get() == node
2616	v != null
2617	spins > 0
2618	v != null
2619	spins > 0
2620	node.waiter == null
2621	w.isInterrupted()
2622	v != null
2623	w == null
2624	nanos > 0
2625	spins > 0
2626	node.waiter == null
2627	w.isInterrupted()
2628	tryCancel(node, slot)
2628	w.isInterrupted()
2629	slot != null
2630	slot.compareAndSet(y, null)
2631	you.compareAndSet(null, node.item)
2632	Thread.interrupted()
2633	v == NULL_ITEM
2634	v != CANCEL
2635	Thread.interrupted()
2636	v == NULL_ITEM
2637	v != CANCEL
2638	Thread.interrupted()
2297	aes == null
2298	aes == null
2299	executor == null
2300	executor == null
2300	completionQueue == null
2301	task == null
2302	task == null
2639	executor == null
2640	executor == null
2641	task == null
2642	task == null
2643	action == null
2644	action == null
2645	callable == null
2646	callable == null
13584	++queryCount >= queryOverflow
13585	entry != null
13586	++queryCount >= queryOverflow
13587	entry != null
13588	entry != null
13589	delta >= millisUntilExpiration
13589	delta < 0
10350	value == unbound
10197	displayName == null
10198	shortDescription == null
10199	y.shortDescription != null
10200	y.displayName != null
10201	y.classRef != null
10202	table.isEmpty()
10202	table != null
10203	this.table == null
10204	null == getValue(TRANSIENT)
10204	annotation != null
10205	base == null
10206	base == null
10207	this.table != null
10207	this.table.isEmpty()
10208	reference != null
10209	value != null
10210	value
12052	genericInfo == null
12053	getGenericSignature() != null
12054	obj instanceof Field
12054	obj != null
12055	override
12056	Reflection.quickCheckMemberAccess(clazz, modifiers)
12057	override
12058	Reflection.quickCheckMemberAccess(clazz, modifiers)
12059	override
12060	Reflection.quickCheckMemberAccess(clazz, modifiers)
12061	override
12062	Reflection.quickCheckMemberAccess(clazz, modifiers)
12063	override
12064	Reflection.quickCheckMemberAccess(clazz, modifiers)
12065	override
12066	Reflection.quickCheckMemberAccess(clazz, modifiers)
12067	override
12068	Reflection.quickCheckMemberAccess(clazz, modifiers)
12069	override
12070	Reflection.quickCheckMemberAccess(clazz, modifiers)
12071	override
12072	Reflection.quickCheckMemberAccess(clazz, modifiers)
12073	override
12074	Reflection.quickCheckMemberAccess(clazz, modifiers)
12075	override
12076	Reflection.quickCheckMemberAccess(clazz, modifiers)
12077	override
12078	Reflection.quickCheckMemberAccess(clazz, modifiers)
12079	override
12080	Reflection.quickCheckMemberAccess(clazz, modifiers)
12081	override
12082	Reflection.quickCheckMemberAccess(clazz, modifiers)
12083	override
12084	Reflection.quickCheckMemberAccess(clazz, modifiers)
12085	override
12086	Reflection.quickCheckMemberAccess(clazz, modifiers)
12087	override
12088	Reflection.quickCheckMemberAccess(clazz, modifiers)
12089	override
12090	Reflection.quickCheckMemberAccess(clazz, modifiers)
12091	root != null
12092	tmp != null
12093	overrideFinalCheck
12094	overrideFinalCheck
12095	root != null
12096	type.isArray()
12097	annotationClass == null
12098	declaredAnnotations == null
16421	obj == null
16422	obj instanceof FieldPosition
16423	attribute == null
16424	other.attribute != null
16425	attribute.equals(other.attribute)
16426	this.attribute != null
16427	this.attribute != null
13899	status == null
13900	pathname == null
13901	child == null
13902	parent != null
13903	parent.equals("")
13904	child == null
13905	parent != null
13906	parent.path.equals("")
13907	uri.isAbsolute()
13908	uri.isOpaque()
13909	scheme == null
13909	scheme.equalsIgnoreCase("file")
13910	uri.getAuthority() != null
13911	uri.getFragment() != null
13912	uri.getQuery() != null
13913	p.equals("")
13914	File.separatorChar != '/'
13915	index < prefixLength
13916	index < prefixLength
13917	prefixLength > 0
13917	path.length() > prefixLength
13918	p == null
13919	isInvalid()
13920	File.separatorChar != '/'
13921	p.startsWith("/")
13922	isDirectory
13922	p.endsWith("/")
13923	isInvalid()
13924	sp.startsWith("//")
13925	security != null
13926	isInvalid()
13927	security != null
13928	isInvalid()
13929	security != null
13930	isInvalid()
13931	security != null
13932	isInvalid()
13933	security != null
13934	isInvalid()
13935	security != null
13936	isInvalid()
13937	security != null
13938	isInvalid()
13939	security != null
13940	isInvalid()
13941	security != null
13942	isInvalid()
13943	security != null
13944	isInvalid()
13945	security != null
13946	isInvalid()
13947	security != null
13948	isInvalid()
13949	names == null
13949	filter == null
13950	filter.accept(this, names[i])
13951	ss == null
13952	ss == null
13953	filter == null
13953	filter.accept(this, s)
13954	ss == null
13955	filter.accept(f)
13955	filter == null
13956	security != null
13957	isInvalid()
13958	exists()
13959	mkdir()
13960	security != null
13961	dest == null
13962	this.isInvalid()
13962	dest.isInvalid()
13963	time < 0
13964	security != null
13965	isInvalid()
13966	security != null
13967	isInvalid()
13968	security != null
13969	isInvalid()
13970	security != null
13971	isInvalid()
13972	security != null
13973	isInvalid()
13974	security != null
13975	isInvalid()
13976	sm != null
13977	isInvalid()
13978	sm != null
13979	isInvalid()
13980	sm != null
13981	isInvalid()
13982	prefix.length() < 3
13983	suffix == null
13984	sm != null
13985	directory == null
13986	fs.createFileExclusively(f.getPath())
13987	obj instanceof File
13987	obj != null
13988	sep != separatorChar
13989	result == null
13990	result == null
10042	parent != null
10042	parent.getPeer() == null
10043	peer == null
10044	peer != null
10045	files != null
10046	peer != null
10047	peer != null
10048	dir != null
10048	dir.equals("")
10049	file.equals("")
10049	file != null
1747	append
1748	limit < 0
1749	count <= 0
1750	pattern.length() < 1
1751	pattern.length() < 1
1752	limit < 0
1752	pattern.length() < 1
1752	count < 1
1753	count < 1
1753	pattern.length() < 1
1753	limit < 0
1754	count < 1
1755	limit < 0
1756	unique > MAX_LOCKS
1757	locks.get(lockFileName) != null
1758	available
1759	append
1760	ex != null
1761	ex instanceof IOException
1762	ex instanceof SecurityException
1763	ix < pattern.length()
1764	ch == '/'
1765	file == null
1766	ch == '%'
1767	ch2 == 't'
1768	tmpDir == null
1769	ch2 == 'h'
1770	isSetUID()
1771	ch2 == 'g'
1772	ch2 == 'u'
1773	ch2 == '%'
1774	count > 1
1774	sawg
1775	sawu
1775	unique > 0
1776	word.length() > 0
1777	file == null
1778	f1.exists()
1779	f2.exists()
1780	isLoggable(record)
1781	limit > 0
1781	meter.written >= limit
1782	lockFileName == null
13666	(val = runningFinalize.get()) != null
13667	security != null
13668	name == null
13669	file.isInvalid()
13670	fdObj == null
13671	security != null
13672	closed
13673	channel != null
13674	useCount <= 0
13674	isRunningFinalize()
13675	fd != null
13676	channel == null
13677	fd != null
13677	fd != FileDescriptor.in
13338	position < 0
13339	size < 0
13340	position + size < 0
13341	position < 0
13342	size < 0
13343	position + size < 0
13344	position + size <= this.position
13345	this.position + this.size <= position
13532	(val = runningFinalize.get()) != null
13533	security != null
13534	name == null
13535	file.isInvalid()
13536	fdObj == null
13537	security != null
13538	closed
13539	channel != null
13540	isRunningFinalize()
13540	useCount <= 0
13541	fd != null
13542	channel == null
13543	fd != null
13544	fd == FileDescriptor.out
13544	fd == FileDescriptor.err
14277	(mask & ALL) != mask
14278	mask == NONE
14279	(cpath = getName()) == null
14280	cpath.equals("<<ALL FILES>>")
14281	last == RECURSIVE_CHAR
14281	cpath.charAt(len - 2) == File.separatorChar
14282	cpath.charAt(len - 2) == File.separatorChar
14282	last == WILD_CHAR
14283	p instanceof FilePermission
14284	this.directory
14285	this.recursive
14286	that.directory
14287	that.directory
14288	that.recursive
14289	last == -1
14290	that.directory
14291	obj == this
14292	obj instanceof FilePermission
14293	actions == null
14294	actions == SecurityConstants.FILE_READ_ACTION
14295	actions == SecurityConstants.FILE_WRITE_ACTION
14296	actions == SecurityConstants.FILE_EXECUTE_ACTION
14297	actions == SecurityConstants.FILE_DELETE_ACTION
14298	actions == SecurityConstants.FILE_READLINK_ACTION
14299	i < 0
14300	a[i-1] == 'A'
14300	i >= 3
14300	a[i-2] == 'E'
14300	a[i-3] == 'R'
14300	a[i] == 'd'
14300	a[i] == 'D'
14300	a[i-3] == 'r'
14300	a[i-1] == 'a'
14300	a[i-2] == 'e'
14301	a[i-4] == 'w'
14301	i >= 4
14301	a[i-3] == 'R'
14301	a[i-2] == 'i'
14301	a[i-2] == 'I'
14301	a[i-1] == 'T'
14301	a[i-1] == 't'
14301	a[i] == 'E'
14301	a[i-4] == 'W'
14301	a[i] == 'e'
14301	a[i-3] == 'r'
14302	a[i-6] == 'e'
14302	a[i-5] == 'X'
14302	a[i-3] == 'c'
14302	a[i-6] == 'E'
14302	a[i-1] == 'T'
14302	a[i-5] == 'x'
14302	a[i] == 'E'
14302	a[i-4] == 'E'
14302	a[i-2] == 'u'
14302	a[i-4] == 'e'
14302	a[i] == 'e'
14302	i >= 6
14302	a[i-1] == 't'
14302	a[i-3] == 'C'
14302	a[i-2] == 'U'
14303	a[i] == 'E'
14303	a[i-3] == 'l'
14303	a[i-2] == 'E'
14303	a[i-4] == 'e'
14303	a[i-1] == 't'
14303	a[i-5] == 'D'
14303	a[i-1] == 'T'
14303	a[i-4] == 'E'
14303	a[i-5] == 'd'
14303	a[i] == 'e'
14303	i >= 5
14303	a[i-3] == 'L'
14303	a[i-2] == 'e'
14304	a[i-6] == 'E'
14304	a[i-2] == 'i'
14304	a[i-3] == 'l'
14304	a[i-7] == 'R'
14304	a[i-1] == 'N'
14304	a[i-5] == 'a'
14304	a[i-5] == 'A'
14304	a[i-4] == 'd'
14304	a[i-4] == 'D'
14304	a[i] == 'K'
14304	i >= 7
14304	a[i-2] == 'I'
14304	a[i-7] == 'r'
14304	a[i-6] == 'e'
14304	a[i-3] == 'L'
14304	a[i-1] == 'n'
14304	a[i] == 'k'
14305	(mask & READ) == READ
14306	(mask & WRITE) == WRITE
14307	comma
14308	(mask & EXECUTE) == EXECUTE
14309	comma
14310	(mask & DELETE) == DELETE
14311	comma
14312	(mask & READLINK) == READLINK
14313	comma
14314	actions == null
14315	actions == null
14316	permission instanceof FilePermission
14317	isReadOnly()
14318	permission instanceof FilePermission
14319	(needed & x.getMask()) != 0
14319	x.impliesIgnoreMask(fp)
14320	(effective & desired) == desired
13596	val == null
13597	val.equalsIgnoreCase("true")
12936	file == null
12936	other == null
12937	file != null
12938	other != null
12939	getReason() != null
4550	userRoot == null
4551	systemRoot == null
4552	userRt != null
4553	systemRt != null
4554	newNode
4555	prefsCache != null
4556	lockFile(false)
4557	userNode
4558	lockFile(shared)
4559	isRemoved()
4560	prefsCache == null
4561	isUserNode() ? isUserRootModified : isSystemRootModified
4562	lastModifiedTime != lastSyncTime
4563	dir.exists()
4563	lastSyncTime != 0
4564	changeLog.isEmpty()
4565	lastSyncTime <= lastModifiedTime
4566	isRemoved()
4567	isDirChar(nodeName.charAt(i))
4568	dirName.charAt(0) != '_'
4569	result[LOCK_HANDLE] != 0
4570	usernode
4571	errorCode == EACCES
4572	errorCode != EAGAIN
4573	lockHandle == 0
4574	result != 0
4575	result == EACCES
4576	isUserNode()
13003	sm != null
13004	scheme.equalsIgnoreCase("file")
13005	p.getScheme().equalsIgnoreCase(scheme)
13006	found
13007	installedProviders == null
13008	installedProviders == null
13009	loadingProviders
13010	options.length > 0
13011	opt != StandardOpenOption.READ
13012	len == 0
13013	opt == StandardOpenOption.READ
12996	scheme.equalsIgnoreCase(provider.getScheme())
12997	scheme.equalsIgnoreCase(provider.getScheme())
12998	loader != null
12999	scheme.equalsIgnoreCase(provider.getScheme())
13000	path == null
13001	loader != null
13024	daysAndNanos == null
13025	unit == null
13026	unit == other.unit
13027	v == null
13028	unit.compareTo(TimeUnit.SECONDS) < 0
13029	fraction != 0L
13030	fraction < 0L
13031	ms != Long.MIN_VALUE
13032	s.charAt(len-1) == '0'
13033	value < 0L
12980	System.getSecurityManager() == null
12980	file instanceof BasicFileAttributesHolder
12980	depth > 0
12981	followLinks
12981	cached != null
12981	cached.isSymbolicLink()
12982	attrs == null
12983	followLinks
12984	depth == 0
12985	exc != null
12986	depth >= maxDepth
12986	attrs.isDirectory()
12987	followLinks
12988	ancestorKey != null
12988	key != null
12989	key.equals(ancestorKey)
12990	isSameFile
12991	result != FileVisitResult.CONTINUE
12992	result == null
12992	result == FileVisitResult.TERMINATE
12993	result == FileVisitResult.SKIP_SIBLINGS
12994	ioe == null
12995	followLinks
13002	sm != null
12951	glob.equals("*")
12952	parent == null
12953	se != null
12954	isDirectory(dir, LinkOption.NOFOLLOW_LINKS)
12955	provider(target) == provider
12956	provider(target) == provider
12957	result != null
12958	attribute.indexOf('*') >= 0
12958	attribute.indexOf(',') >= 0
12959	pos == -1
12960	view == null
12961	view == null
12962	view == null
12963	opt == LinkOption.NOFOLLOW_LINKS
12964	opt == null
12965	followLinks(options)
12966	followLinks(options)
12967	maxDepth < 0
12968	opt == StandardCopyOption.REPLACE_EXISTING
12969	opt == null
12970	replaceExisting
12971	se != null
12972	n < 0
12972	(n = source.read()) < 0
12973	capacity <= MAX_BUFFER_SIZE - capacity
12974	capacity == MAX_BUFFER_SIZE
12975	size > (long)MAX_BUFFER_SIZE
12976	line == null
13678	(off | len | (b.length - (len + off)) | (off + len)) < 0
8625	proxies == null
8626	proxies.containsKey(ic)
8627	proxies != null
8628	imgf != null
8629	proxies.isEmpty()
8630	proxies == null
8631	imgf == null
8632	proxies != null
8633	imgf != null
11103	unfinalized != null
11104	unfinalized == this
11105	this.next != null
11106	this.next != null
11107	this.prev != null
11108	hasBeenFinalized()
11109	finalizee instanceof java.lang.Enum
11109	finalizee != null
11110	VM.isBooted()
11111	VM.isBooted()
5417	flatness < 0.0
5418	limit < 0
5419	holdIndex - want < 0
5420	holdIndex >= holdEnd
5421	doNext
5422	src.isDone()
5423	holdType == SEG_MOVETO
5424	holdIndex >= holdEnd
5425	QuadCurve2D.getFlatnessSq(hold, holdIndex) < squareflat
5426	holdIndex >= holdEnd
5427	CubicCurve2D.getFlatnessSq(hold, holdIndex) < squareflat
5428	isDone()
5429	type != SEG_CLOSE
5430	type != SEG_MOVETO
5431	isDone()
5432	type != SEG_CLOSE
5433	type != SEG_MOVETO
12394	f != 0.0f
12394	Math.abs(f) < FloatConsts.MIN_NORMAL
12395	(result & FloatConsts.SIGNIF_BIT_MASK) != 0
12395	(result & FloatConsts.EXP_BIT_MASK) == FloatConsts.EXP_BIT_MASK
12396	f1 < f2
12397	f1 > f2
12893	capacity < 0
12894	length > remaining()
12895	src == this
12896	n > remaining()
12897	length > remaining()
12898	hb == null
12899	isReadOnly
12900	hb == null
12901	isReadOnly
12902	this == ob
12903	ob instanceof FloatBuffer
12904	this.remaining() != that.remaining()
12905	equals(this.get(i), that.get(j))
12906	cmp != 0
8016	m.isVisible()
8017	firstVisibleComponent
8018	useBaseline
8019	baseline >= 0
8020	useBaseline
8021	m.visible
8022	firstVisibleComponent
8023	useBaseline
8024	baseline >= 0
8025	useBaseline
8026	useBaseline
8027	m.visible
8028	ascent[i] >= 0
8029	m.isVisible()
8030	useBaseline
8030	ascent[i] >= 0
8031	ltr
8032	useBaseline
8033	m.isVisible()
8034	useBaseline
8035	baseline >= 0
8036	x == 0
8036	(x + d.width) <= maxwidth
8037	x > 0
8038	serialVersionOnStream < 1
9695	opposite == null
5529	window == null
5530	def == null
5530	window.isFocusableWindow()
9518	peer == null
9519	values == null
9520	(style & BOLD) != 0
9521	(style & ITALIC) != 0
9522	fm.usingPerAppContextComposites()
9522	((CompositeFont)(font2DHandle.font2D)).isStdComposite()
9522	font2DHandle != null
9522	font2DHandle.font2D instanceof CompositeFont
9523	font2DHandle == null
9524	created
9525	handle.font2D instanceof CompositeFont
9525	handle.font2D.getStyle() != style
9526	created
9527	oldName != null
9528	oldName.equals(newName)
9529	oldStyle == -1
9530	values.getWeight() >= 2f
9531	values.getPosture() >= .2f
9532	oldStyle == newStyle
9533	handle.font2D instanceof CompositeFont
9534	newStyle != -1
9534	newName != null
9535	newName != null
9536	font.values != null
9537	values.getWeight() >= 2f
9538	values.getPosture() >= .2f
9539	attributes instanceof AttributeMap
9539	((AttributeMap)attributes).getValues() != null
9540	values.isNonDefault(EFONT)
9541	values.anyDefined(SECONDARY_MASK)
9542	font != null
9543	attributes.size() > 1
9544	System.getSecurityManager() == null
9545	hasTempPermission()
9546	acquired
9547	acquired
9548	fontFormat != Font.TYPE1_FONT
9548	fontFormat != Font.TRUETYPE_FONT
9549	tracker != null
9550	tracker != null
9551	bytesRead < 0
9552	tracker != null
9553	totalSize+bytesRead > tracker.MAX_FILE_SIZE
9554	totalSize+tracker.getNumBytes() > tracker.MAX_TOTAL_BYTES
9555	tracker != null
9556	copiedFontData
9557	tracker != null
9558	t instanceof FontFormatException
9559	t instanceof IOException
9560	cause instanceof FontFormatException
9561	fontFormat != Font.TRUETYPE_FONT
9561	fontFormat != Font.TYPE1_FONT
9562	sm != null
9563	fontFile.canRead()
9564	nonIdentityTx
9565	values.getSuperscript() != 0
9566	values.isNonDefault(EWIDTH)
9567	l == null
9568	l == null
9569	str == null
9570	sizeIndex+1 < strlen
9570	sizeIndex > 0
9571	fontSize <= 0
9572	str.charAt(sizeIndex-1) == sepChar
9573	styleIndex >= 0
9573	styleIndex+1 < strlen
9574	styleName.equals("bolditalic")
9575	styleName.equals("italic")
9576	styleName.equals("bold")
9577	styleName.equals("plain")
9578	str.charAt(styleIndex-1) == sepChar
9579	styleIndex > 0
9580	sizeIndex > 0
9581	fontEnd > 0
9581	str.charAt(fontEnd-1) == sepChar
9582	str == null
9583	hash == 0
9584	nonIdentityTx
9584	values.getTransform() != null
9584	values != null
9585	obj == this
9586	obj != null
9587	style == font.style
9587	nonIdentityTx == font.nonIdentityTx
9587	hasLayoutAttributes == font.hasLayoutAttributes
9587	pointSize == font.pointSize
9587	size == font.size
9587	name.equals(font.name)
9588	values == null
9589	font.values == null
9590	isBold()
9591	values != null
9592	pointSize == 0
9593	fRequestedAttributes != null
9594	AttributeValues.is16Hashtable(fRequestedAttributes)
9595	values == null
9596	values == null
9597	values == null
9598	attributes == null
9599	Character.isValidCodePoint(codePoint)
9600	font2d.canDisplay(c)
9601	Character.isHighSurrogate(c)
9602	font2d.canDisplay(str.codePointAt(i))
9603	font2d.canDisplay(c)
9604	Character.isHighSurrogate(c)
9605	font2d.canDisplay(Character.codePointAt(text, i, limit))
9606	font2d.canDisplay(c)
9607	Character.isHighSurrogate(c)
9608	Character.isLowSurrogate(c2)
9609	font2d.canDisplay(Character.toCodePoint(c, c2))
9610	frc == null
9611	flmref == null
9611	flm.frc.equals(frc)
9611	(flm = (FontLineMetrics)flmref.get()) == null
9612	values.getSuperscript() != 0
9612	values != null
9613	isTransformed()
9614	ctx != null
9615	beginIndex < 0
9616	limit > chars.length
9617	beginIndex > limit
9618	simple
9619	simple
9620	beginIndex < start
9621	limit > end
9622	beginIndex > limit
9623	trans == null
9970	Character.isValidCodePoint(codePoint)
9971	codePoint < 256
9972	ch < 256
9973	context instanceof Graphics2D
7251	tx.isIdentity()
7251	tx != null
7252	isAntiAliased
7253	usesFractionalMetrics
7254	tx != null
7254	tx.isIdentity()
7255	KEY_TEXT_ANTIALIASING.isCompatibleValue(aaHint)
7256	KEY_FRACTIONALMETRICS.isCompatibleValue(fmHint)
7257	defaulting
7258	defaulting
7259	tx == null
7260	defaulting
7261	isAntiAliased()
7262	defaulting
7263	usesFractionalMetrics()
7264	this == rhs
7265	rhs == null
7266	rhs.defaulting
7266	defaulting
7267	rhs.aaHintValue == aaHintValue
7267	rhs.fmHintValue == fmHintValue
7268	defaulting
2689	security != null
2690	swept
2690	(a = (int)(c >> AC_SHIFT)) <= 0
2691	tryAwaitWork(w, c)
2692	e > 0
2693	(i = ~e & SMASK) >= ws.length
2693	(ws = workers) == null
2693	(w = ws[i]) == null
2694	w.eventCount == e
2694	UNSAFE.compareAndSwapLong(this, ctlOffset, c, nc)
2695	w.parked
2696	UNSAFE.compareAndSwapLong (this, ctlOffset, c, (long)(((u + UTC_UNIT) & UTC_MASK) | ((u + UAC_UNIT) & UAC_MASK)) << 32)
2697	(i = ~e & SMASK) < ws.length
2697	(w = ws[i]) != null
2697	(int)(c >> AC_SHIFT) < 0
2697	(ws = workers) != null
2697	(e = (int)(c = ctl)) > 0
2698	w.eventCount != e
2698	UNSAFE.compareAndSwapLong(this, ctlOffset, c, nc)
2699	w.parked
2700	ws.length <= m
2700	ws == null
2701	(q = v.queue) != null
2701	(i = (q.length - 1) & b) >= 0
2701	(b = v.queueBase) != v.queueTop
2701	v != null
2702	(t = q[i]) != null
2702	UNSAFE.compareAndSwapObject(q, u, t, null)
2702	v.queueBase == b
2703	d != 0
2704	j < 0
2705	scanGuard != g
2706	(b = queueBase) != queueTop
2706	(q = submissionQueue) != null
2706	(i = (q.length - 1) & b) >= 0
2707	UNSAFE.compareAndSwapObject(q, u, t, null)
2707	(t = q[i]) != null
2707	queueBase == b
2708	ctl != c
2708	UNSAFE.compareAndSwapLong(this, ctlOffset, c, nc)
2709	UNSAFE.compareAndSwapLong(this, stealCountOffset, s, s + sc)
2710	w.eventCount != v
2711	tryTerminate(false)
2711	shutdown
2711	(int)c != 0
2711	parallelism + (int)(nc >> AC_SHIFT) == 0
2711	blockedCount == 0
2711	quiescerCount == 0
2712	w.eventCount != v
2713	rescanned
2714	m < ws.length
2714	ws != null
2715	u != null
2716	u.queueBase != u.queueTop
2716	tryReleaseWaiter()
2717	w.eventCount != v
2718	scanGuard != g
2718	tryReleaseWaiter()
2718	queueBase != queueTop
2719	rescanned
2720	w.eventCount != v
2721	w.eventCount == v
2722	shutdown
2723	w.eventCount == v
2724	w.eventCount != v
2725	System.nanoTime() - startTime < SHRINK_RATE - (SHRINK_RATE / 10)
2726	UNSAFE.compareAndSwapLong(this, ctlOffset, currentCtl, prevCtl)
2727	(q = submissionQueue) != null
2728	s - queueBase == m
2729	size > MAXIMUM_QUEUE_CAPACITY
2730	size < INITIAL_QUEUE_CAPACITY
2731	oldQ != null
2731	(oldMask = oldQ.length - 1) >= 0
2732	UNSAFE.compareAndSwapObject(oldQ, u, x, null)
2732	x != null
2733	UNSAFE.compareAndSwapInt(this, blockedCountOffset, b, b + 1)
2734	(e = (int)c) < 0
2735	(ac = (u >> UAC_SHIFT)) <= 0
2735	(i = ~e & SMASK) < ws.length
2735	e != 0
2735	(w = ws[i]) != null
2735	(ws = workers) != null
2736	UNSAFE.compareAndSwapLong(this, ctlOffset, c, nc)
2736	w.eventCount == e
2737	w.parked
2738	(tc = (short)(u >>> UTC_SHIFT)) >= 0
2738	ac + pc > 1
2739	UNSAFE.compareAndSwapLong(this, ctlOffset, c, nc)
2740	tc + pc < MAX_ID
2741	UNSAFE.compareAndSwapLong(this, ctlOffset, c, nc)
2742	joinMe.status >= 0
2743	tryPreBlock()
2744	(ctl & STOP_BIT) != 0L
2745	(ctl & STOP_BIT) != 0L
2746	tryPreBlock()
2747	millis <= 0
2748	joinMe.status < 0
2749	(ctl & STOP_BIT) != 0L
2750	tryPreBlock()
2751	t == null
2752	ex != null
2752	tryTerminate(false)
2752	Thread.currentThread() instanceof ForkJoinWorkerThread
2753	UNSAFE.compareAndSwapInt(this, nextWorkerNumberOffset, n = nextWorkerNumber, ++n)
2754	((g = scanGuard) & SG_UNIT) == 0
2754	UNSAFE.compareAndSwapInt(this, scanGuardOffset, g, g | SG_UNIT)
2755	(ws = workers) != null
2756	k >= n
2756	k < 0
2756	ws[k] != null
2757	k == n
2758	(ws = workers) != null
2759	u != null
2759	u.queueBase != u.queueTop
2760	tryReleaseWaiter()
2761	UNSAFE.compareAndSwapInt(this, scanGuardOffset, g, g |= SG_UNIT)
2761	((g = scanGuard) & SG_UNIT) == 0
2761	steps == 0
2762	ws[idx] == w
2762	ws != null
2762	idx >= 0
2762	idx < ws.length
2763	steps == 1
2763	UNSAFE.compareAndSwapLong(this, ctlOffset, c = ctl, (((c - AC_UNIT) & AC_MASK) | ((c - TC_UNIT) & TC_MASK) | (c & ~(AC_MASK|TC_MASK))))
2764	sc != 0
2764	UNSAFE.compareAndSwapLong(this, stealCountOffset, s = stealCount, s + sc)
2765	tryTerminate(false)
2766	ex != null
2767	now
2768	(int)(c >> AC_SHIFT) != -parallelism
2769	blockedCount != 0
2769	quiescerCount != 0
2769	shutdown
2769	queueBase != queueTop
2770	ctl == c
2771	UNSAFE.compareAndSwapLong(this, ctlOffset, c, c | STOP_BIT)
2772	(short)(c >>> TC_SHIFT) == -parallelism
2773	ws != null
2774	w != null
2775	pass > 0
2776	w.isInterrupted()
2776	pass > 1
2777	task != null
2778	ws != null
2779	UNSAFE.compareAndSwapLong(this, ctlOffset, c, (long)(w.nextWait & E_MASK) | ((c + AC_UNIT) & AC_MASK) | (c & (TC_MASK|STOP_BIT)))
2780	w.parked
2781	factory == null
2782	parallelism > MAX_ID
2782	parallelism <= 0
2783	n >= MAX_ID
2784	task == null
2785	shutdown
2786	t instanceof ForkJoinWorkerThread
2786	((ForkJoinWorkerThread)t).pool == this
2787	shutdown
2788	(w = (ForkJoinWorkerThread)t).pool == this
2788	t instanceof ForkJoinWorkerThread
2789	task == null
2790	task == null
2791	task instanceof ForkJoinTask<?>
2792	task == null
2793	task == null
2794	task == null
2795	task == null
2796	task instanceof ForkJoinTask<?>
2797	(short)(ctl >>> TC_SHIFT) > -parallelism
2797	(ws = workers) != null
2798	w != null
2799	(t = q[i]) != null
2799	UNSAFE.compareAndSwapObject(q, u, t, null)
2799	queueBase == b
2800	t != null
2801	(short)(ctl >>> TC_SHIFT) > -parallelism
2801	(ws = workers) != null
2802	w != null
2803	rc < 0
2804	(c & STOP_BIT) != 0
2805	isTerminated()
2806	nanos <= 0
2807	t instanceof ForkJoinWorkerThread
3323	(s = status) < 0
3324	UNSAFE.compareAndSwapInt(this, statusOffset, s, completion)
3325	s != 0
3326	(s = status) > 0
3326	s == 0
3326	UNSAFE.compareAndSwapInt(this, statusOffset, 0, SIGNAL)
3326	status > 0
3327	status > 0
3328	(s = status) >= 0
3329	s == 0
3330	interrupted
3331	Thread.interrupted()
3332	(s = status) >= 0
3333	s == 0
3334	millis > 0L
3335	status >= 0
3336	completed
3337	(t = Thread.currentThread()) instanceof ForkJoinWorkerThread
3338	(s = status) < 0
3339	(w = (ForkJoinWorkerThread)t).unpushTask(this)
3340	completed
3341	(s = status) < 0
3342	completed
3343	e == null
3344	e.get() == this
3345	e.get() == this
3346	pred == null
3347	status != EXCEPTIONAL
3348	e == null
3348	(ex = e.ex) == null
3349	e.thrower != Thread.currentThread().getId()
3350	ps.length == 0
3351	ps.length == 1
3351	ps[0] == Throwable.class
3352	noArgCtor != null
3353	x instanceof ExceptionNode
3354	e == x
3355	pred == null
3356	lock.tryLock()
3357	(s = status) == CANCELLED
3358	s == EXCEPTIONAL
3358	(ex = getThrowableException()) != null
3359	doJoin() != NORMAL
3360	doInvoke() != NORMAL
3361	t == null
3362	ex == null
3363	i != 0
3364	ex == null
3364	t.doInvoke() < NORMAL
3365	t != null
3366	ex != null
3367	t.doJoin() < NORMAL
3367	ex == null
3368	ex != null
3369	tasks instanceof List<?>
3369	tasks instanceof RandomAccess
3370	t == null
3371	ex == null
3372	i != 0
3373	t.doInvoke() < NORMAL
3373	ex == null
3374	t != null
3375	ex != null
3376	ex == null
3376	t.doJoin() < NORMAL
3377	ex != null
3378	s == CANCELLED
3379	s == EXCEPTIONAL
3379	(ex = getThrowableException()) != null
3380	t instanceof ForkJoinWorkerThread
3381	status >= 0
3382	w.unpushTask(this)
3383	completed
3384	status >= 0
3384	nanos > 0
3385	millis > 0
3386	s != NORMAL
3387	s == CANCELLED
3388	s != EXCEPTIONAL
3389	(ex = getThrowableException()) != null
3390	status == EXCEPTIONAL
3391	ex != null
2465	ueh != null
2466	exception == null
2467	exception != null
2468	(q = queue) != null
2469	(s -= queueBase) <= 2
2470	s == m
2471	size > MAXIMUM_QUEUE_CAPACITY
2472	size < INITIAL_QUEUE_CAPACITY
2473	(oldMask = oldQ.length - 1) >= 0
2473	oldQ != null
2474	x != null
2474	UNSAFE.compareAndSwapObject(oldQ, u, x, null)
2475	(q = queue) != null
2475	(t = q[i]) != null
2475	queueBase == b
2475	queueTop != (b = queueBase)
2475	(i = (q.length - 1) & b) >= 0
2475	UNSAFE.compareAndSwapObject(q, (i << ASHIFT) + ABASE, t, null)
2476	(m = q.length - 1) >= 0
2476	q != null
2477	(t = q[i = m & b]) != null
2477	UNSAFE.compareAndSwapObject(q, (i << ASHIFT) + ABASE, t, null)
2477	queueBase == b
2478	q != null
2478	(m = q.length - 1) >= 0
2479	t == null
2480	UNSAFE.compareAndSwapObject(q, u, t, null)
2481	(q = queue) != null
2481	(s = queueTop) != queueBase
2481	UNSAFE.compareAndSwapObject (q, (((q.length - 1) & --s) << ASHIFT) + ABASE, t, null)
2482	q == null
2482	(m = q.length - 1) < 0
2483	t != null
2484	queueTop == queueBase
2485	cj.status >= 0
2485	cj != null
2486	cs != null
2486	cs.status >= 0
2487	t != null
2488	t != null
2489	t != null
2489	(ws = pool.workers) == null
2490	w.queue != null
2490	w.queueBase != w.queueTop
2490	w != null
2491	(t = w.deqTask()) != null
2492	(s = joinMe.status) < 0
2493	retries > 0
2494	queueTop != queueBase
2495	localHelpJoinTask(joinMe)
2496	retries == MAX_HELP >>> 1
2497	tryDeqAndExec(joinMe) >= 0
2498	(i = (q.length - 1) & --s) >= 0
2498	(q = queue) != null
2498	(t = q[i]) != null
2498	(s = queueTop) != queueBase
2499	t != joinMe
2499	t.status >= 0
2500	UNSAFE.compareAndSwapObject (q, (i << ASHIFT) + ABASE, t, null)
2501	joinMe.status >= 0
2501	ws != null
2501	ws.length > m
2502	v == null
2502	v.currentSteal != task
2503	(v = ws[j]) != null
2503	v.currentSteal == task
2504	++j > m
2505	joinMe.status < 0
2506	(i = (q.length-1) & b) < 0
2506	(b = v.queueBase) == v.queueTop
2506	(q = v.queue) == null
2507	task.status < 0
2508	UNSAFE.compareAndSwapObject(q, u, t, null)
2508	t != null
2508	v.queueBase == b
2509	task.status >= 0
2509	next != null
2509	--levels > 0
2509	next != task
2510	ws.length > m
2510	t.status >= 0
2510	ws != null
2511	v != null
2511	(q = v.queue) != null
2511	(i = (q.length - 1) & b) >= 0
2511	q[i] == t
2511	(b = v.queueBase) != v.queueTop
2512	v.queueBase == b
2512	UNSAFE.compareAndSwapObject(q, u, t, null)
2513	queueTop != queueBase
2514	(n = ws.length) > 1
2514	ws != null
2515	w.queueBase != w.queueTop
2515	(w = ws[(i + r) & (n - 1)]) != null
2516	v != null
2517	active
2518	(t = (v != this) ? v.deqTask() : locallyFifo ? locallyDeqTask() : popTask()) != null
2519	active
2520	p.isQuiescent()
15726	pos.index == 0
4549	f == null
1373	a == null
1374	l != null
1374	l.equals(Locale.US)
1375	a instanceof Flushable
1376	a == null
1377	a instanceof Closeable
1378	a == null
1379	args != null
1379	last < 0
1379	last > args.length - 1
1380	lasto > args.length - 1
1380	args != null
1381	last > args.length - 1
1381	args != null
1382	m.find(i)
1383	m.start() != i
1384	s.charAt(i) == '%'
1711	catalog != null
1712	parameters == null
1712	parameters.length == 0
1713	format.indexOf("{1") >=0
1713	format.indexOf("{3") >=0
1713	format.indexOf("{0") >= 0
1713	format.indexOf("{2") >=0
6466	peer == null
6467	menuBar != null
6468	title == null
6469	peer != null
6470	icons != null
6471	icons.size() > 0
6472	menuBar == mb
6473	mb != null
6473	mb.parent != null
6474	menuBar != null
6475	menuBar != null
6476	peer != null
6477	peer != null
6478	testvalid
6479	(current & ICONIFIED) == 0
6479	state == ICONIFIED
6480	state == NORMAL
6480	(current & ICONIFIED) != 0
6481	isFrameStateSupported( state )
6482	peer != null
6483	getToolkit().isFrameStateSupported( state )
6484	(state & ICONIFIED) != 0
6484	getToolkit().isFrameStateSupported( ICONIFIED )
6485	peer != null
6486	isDisplayable()
6487	undecorated
6488	getOpacity() < 1.0f
6489	getShape() != null
6490	bg.getAlpha() < 255
6490	bg != null
6491	isUndecorated()
6491	opacity < 1.0f
6492	isUndecorated()
6492	shape != null
6493	bgColor.getAlpha() < 255
6493	bgColor != null
6493	isUndecorated()
6494	m == null
6495	m == menuBar
6496	peer != null
6497	peer != null
6498	menuBar != null
6499	menuBar != null
6499	menuBar.handleShortcut(e)
6500	title != null
6501	resizable
6502	state == NORMAL
6503	(state & ICONIFIED) != 0
6504	(state & MAXIMIZED_BOTH) == MAXIMIZED_BOTH
6505	(state & MAXIMIZED_HORIZ) != 0
6506	(state & MAXIMIZED_VERT) != 0
6507	cursorType > MOVE_CURSOR
6507	cursorType < DEFAULT_CURSOR
6508	w instanceof Frame
6509	w instanceof Frame
6510	icons != null
6510	icons.size() > 0
6511	icon1 instanceof Serializable
6512	icons == null
6513	e.eof
6514	menuBar != null
6515	ownedWindows != null
6516	accessibleContext == null
2856	s == NORMAL
2857	s >= CANCELLED
2858	callable == null
2859	state != NEW
2860	mayInterruptIfRunning
2861	UNSAFE.compareAndSwapInt(this, stateOffset, NEW, INTERRUPTING)
2862	t != null
2863	UNSAFE.compareAndSwapInt(this, stateOffset, NEW, CANCELLED)
2864	s <= COMPLETING
2865	unit == null
2866	(s = awaitDone(true, unit.toNanos(timeout))) <= COMPLETING
2866	s <= COMPLETING
2867	UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING)
2868	UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING)
2869	state != NEW
2869	UNSAFE.compareAndSwapObject(this, runnerOffset, null, Thread.currentThread())
2870	c != null
2870	state == NEW
2871	ran
2872	s >= INTERRUPTING
2873	UNSAFE.compareAndSwapObject(this, runnerOffset, null, Thread.currentThread())
2873	state != NEW
2874	c != null
2874	s == NEW
2875	s >= INTERRUPTING
2876	s == INTERRUPTING
2877	UNSAFE.compareAndSwapObject(this, waitersOffset, q, null)
2878	t != null
2879	next == null
2880	Thread.interrupted()
2881	s > COMPLETING
2882	q != null
2883	s == COMPLETING
2884	q == null
2885	queued
2886	timed
2887	nanos <= 0L
2888	node != null
2889	q.thread != null
2890	pred != null
2891	pred.thread == null
2892	UNSAFE.compareAndSwapObject(this, waitersOffset, q, s)
1949	closed
1950	eos
1951	n == -1
1952	readTrailer()
1953	closed
1954	readUShort(in) != GZIP_MAGIC
1955	readUByte(in) != 8
1956	(flg & FEXTRA) == FEXTRA
1957	(flg & FNAME) == FNAME
1958	(flg & FCOMMENT) == FCOMMENT
1959	(flg & FHCRC) == FHCRC
1960	readUShort(in) != v
1961	n > 0
1962	readUInt(in) != (inf.getBytesWritten() & 0xffffffffL)
1962	readUInt(in) != crc.getValue()
1963	this.in.available() > 0
1963	n > 26
1964	n > m
1965	b == -1
1966	b > 255
1966	b < -1
1967	len == -1
2058	def.finished()
2059	len <= buf.length - TRAILER_SIZE
2059	def.finished()
2060	len > 0
7108	weight < 0
7109	priorityIsValid(growPriority)
7110	growLeftLimit < 0
7111	growRightLimit < 0
7112	priorityIsValid(shrinkPriority)
7113	shrinkLeftLimit < 0
7114	shrinkRightLimit < 0
7107	codeReturn == null
6203	color1 == null
6203	color2 == null
6204	pt1 == null
6204	color2 == null
6204	color1 == null
6204	pt2 == null
6517	cm == cachedModel
6518	cached != null
6519	ras.getHeight() >= h
6519	ras.getWidth() >= w
6519	ras != null
6520	cached != null
6521	cras != null
6522	ch >= ih
6522	cw >= iw
6523	cw * ch >= iw * ih
6524	ulenSq <= Double.MIN_VALUE
6525	cyclic
6526	dx < 0
6527	a1 == 0xff
6527	da == 0
6528	cm instanceof DirectColorModel
6529	dcm.getGreenMask() == 0xff00
6529	tmp == 0xff
6529	tmp == 0
6529	dcm.getRedMask() == 0xff
6529	dcm.getBlueMask() == 0xff0000
6530	cyclic
6531	saved != null
6532	rast.getWidth() < w
6532	rast.getHeight() < h
6532	rast == null
6533	cyclic
6534	colrel <= 0.0
6535	j > 0
6908	alignment > HANGING_BASELINE
6908	alignment < BOTTOM_ALIGNMENT
6909	tx != null
6236	g == null
6237	width < 0
6237	height < 0
6238	height == 0
6238	width == 0
6239	raised
6240	clipRect == null
6241	clipRect != null
6242	r == null
4804	raised
4805	p != c
6548	getColorModel().getTransparency() == transparency
6549	cm == null
6550	caps.isAccelerated()
6550	caps != null
6550	vi.getCapabilities().isAccelerated()
6551	defaultBufferCaps == null
6552	defaultImageCaps == null
6449	w != null
6450	w.getShape() != null
6451	w.getOpacity() < 1.0f
6452	w.isOpaque()
6453	gc.getDevice() != this
6453	gc != null
6453	gc.getDevice().getFullScreenWindow() == w
6454	windowedModeBounds != null
6454	fullScreenWindow != null
6455	windowedModeBounds.width == 0
6456	windowedModeBounds.height == 0
6457	w == null
6458	fullScreenWindow != null
6459	fullScreenAppContext == AppContext.getAppContext()
6460	curToolkit instanceof SunToolkit
6461	curToolkit instanceof SunToolkit
6462	curToolkit instanceof SunToolkit
6463	((SunToolkit)curToolkit).isWindowTranslucencySupported()
6464	defaultGC.isTranslucencyCapable()
6465	configs[j].isTranslucencyCapable()
6195	localEnv == null
6196	isHeadless()
6197	headless == null
6198	headless == null
6199	isHeadless()
6200	font == null
1128	hourOfDay <= 23
1128	hourOfDay >= 12
1129	cutoverTime == gregorianCutover
1130	cutoverTime == Long.MAX_VALUE
1131	time < gregorianCutover
1132	(year & 3) != 0
1133	year > gregorianCutoverYear
1134	year < gregorianCutoverYearJulian
1135	gregorianCutoverYear == gregorianCutoverYearJulian
1136	amount == 0
1137	field < 0
1137	field >= ZONE_OFFSET
1138	field == YEAR
1139	internalGetEra() == CE
1140	year > 0
1141	year > 0
1142	field == MONTH
1143	month >= 0
1144	y_amount != 0
1145	internalGetEra() == CE
1146	year > 0
1147	year > 0
1148	month >= 0
1149	month < 0
1150	field == ERA
1151	era < 0
1152	era > 1
1153	field >= HOUR
1154	timeOfDay >= ONE_DAY
1155	timeOfDay < 0
1156	zoneOffset != 0
1157	fd2 != fd
1158	amount == 0
1159	field < 0
1159	field >= ZONE_OFFSET
1160	nh < 0
1161	internalGet(DAY_OF_MONTH) != d.getDayOfMonth()
1162	field == HOUR
1163	field == HOUR
1164	isCutoverYear(cdate.getNormalizedYear())
1165	mon < 0
1166	internalGet(DAY_OF_MONTH) > monthLen
1167	mon < 0
1168	internalGet(DAY_OF_MONTH) > monthLen
1169	isCutoverYear(y)
1170	value > min
1170	value < max
1171	calsys.getYearFromFixedDate(day1) != y
1172	calsys.getYearFromFixedDate(fd) != y
1173	gregorianCutoverYear == gregorianCutoverYearJulian
1174	y == gregorianCutoverYear
1175	cal.getYearFromFixedDate(day1) != y
1176	cal.getYearFromFixedDate(fd) != y
1177	dow < 0
1178	isCutoverYear
1179	(int)(monthDay1st - month1) >= getMinimalDaysInFirstWeek()
1180	nfd < month1
1181	nfd >= (month1 + monthLength)
1182	isCutoverYear
1183	isCutoverYear(cdate.getNormalizedYear())
1184	isCutoverYear(cdate.getNormalizedYear())
1185	isCutoverYear(cdate.getNormalizedYear())
1186	weekOfYear > 1
1186	weekOfYear < 52
1187	amount == 0
1188	fd < dowFirst
1189	fd >= dowFirst + 7
1190	isCutoverYear(cdate.getNormalizedYear())
1191	x < lastDays
1192	x < lastDays
1193	gregorianCutoverYear > 200
1194	field == DAY_OF_MONTH
1195	field == DAY_OF_MONTH
1196	year == gregorianCutoverYearJulian
1196	year == gregorianCutoverYear
1197	(fieldsForFixedMax & (1<<field)) != 0
1198	gc.isCutoverYear(normalizedYear)
1199	date.getDayOfMonth() == value
1199	gc.isCutoverYear(normalizedYear)
1200	fd >= gregorianCutoverDate
1201	gc.isCutoverYear(normalizedYear)
1202	gregorianCutoverYear == gregorianCutoverYearJulian
1203	normalizedYear == gregorianCutoverYearJulian
1204	nextJan1 < gregorianCutoverDate
1205	gc.isCutoverYear(normalizedYear)
1206	dayOfWeek < 0
1207	magic == 5
1207	magic == 12
1207	date.isLeapYear()
1207	magic == 6
1208	gc == this
1209	internalGet(YEAR) != gc.getWeekYear()
1210	gc.isCutoverYear(normalizedYear)
1211	dayOfWeek < 0
1212	nDaysFirstWeek >= getMinimalDaysInFirstWeek()
1213	monthLength > 0
1214	monthLength > 7
1215	gc == this
1216	gc.isCutoverYear(normalizedYear)
1217	gc == this
1218	x < 0
1219	gc == this
1220	gc.internalGetEra() == CE
1221	current > maxEnd
1222	value <= 0
1223	current < maxEnd
1224	cdate != null
1225	cdate != gdate
1226	cdate != gdate
1226	cdate != null
1227	cdate != null
1227	cdate != gdate
1228	internalGetEra() == BCE
1229	year > gregorianCutoverYear + 1
1230	internalGet(MONTH) == JANUARY
1231	weekOfYear >= 52
1232	weekOfYear == 1
1233	dayOfYear > minimalDays
1233	dayOfYear < (maxDayOfYear - 6)
1234	delta != 0
1235	delta < 0
1236	dayOfYear < minDayOfYear
1237	minDayOfYear <= minimalDays
1238	del != 0
1239	del < 0
1240	minDayOfYear == 0
1241	minDayOfYear >= minimalDays
1242	days <= (7 - minDayOfYear)
1243	dayOfWeek < SUNDAY
1243	dayOfWeek > SATURDAY
1244	days < 0
1245	days != 0
1246	gc.getWeekYear() != weekYear
1246	gc.internalGet(WEEK_OF_YEAR) != weekOfYear
1246	isLenient()
1246	gc.internalGet(DAY_OF_WEEK) != dayOfWeek
1247	weekYear == gc.internalGet(YEAR)
1248	gc == this
1249	isPartiallyNormalized()
1250	calsys == null
1250	fieldMask != 0
1251	zoneOffsets == null
1252	tzMask != (ZONE_OFFSET_MASK|DST_OFFSET_MASK)
1253	tz instanceof ZoneInfo
1254	tzMask != 0
1255	isFieldSet(tzMask, ZONE_OFFSET)
1256	isFieldSet(tzMask, DST_OFFSET)
1257	timeOfDay >= ONE_DAY
1258	fixedDate >= gregorianCutoverDate
1259	fixedDate != cachedFixedDate
1260	year <= 0
1261	e == jeras[0]
1262	(fieldMask & (MONTH_MASK|DAY_OF_MONTH_MASK|DAY_OF_WEEK_MASK)) != 0
1263	(fieldMask & (HOUR_OF_DAY_MASK|AM_PM_MASK|HOUR_MASK |MINUTE_MASK|SECOND_MASK|MILLISECOND_MASK)) != 0
1264	timeOfDay != 0
1265	(fieldMask & (ZONE_OFFSET_MASK|DST_OFFSET_MASK)) != 0
1266	(fieldMask & (DAY_OF_YEAR_MASK|WEEK_OF_YEAR_MASK|WEEK_OF_MONTH_MASK|DAY_OF_WEEK_IN_MONTH_MASK)) != 0
1267	normalizedYear == cutoverYear
1268	gregorianCutoverYearJulian <= gregorianCutoverYear
1269	fixedDate >= gregorianCutoverDate
1270	weekOfYear == 0
1271	normalizedYear > (cutoverYear + 1)
1272	CalendarUtils.isGregorianLeapYear(normalizedYear - 1)
1273	normalizedYear <= gregorianCutoverYearJulian
1274	CalendarUtils.isJulianLeapYear(normalizedYear - 1)
1275	prevYear == gregorianCutoverYear
1276	calForJan1 == jcal
1277	prevYear <= gregorianCutoverYearJulian
1278	normalizedYear > gregorianCutoverYear
1278	normalizedYear < (gregorianCutoverYearJulian - 1)
1279	weekOfYear >= 52
1280	cdate.isLeapYear()
1281	ndays >= getMinimalDaysInFirstWeek()
1281	fixedDate >= (nextJan1st - 7)
1282	nextYear == (gregorianCutoverYearJulian + 1)
1282	nextYear < gregorianCutoverYear
1283	nextYear == gregorianCutoverYear
1284	nextYear > gregorianCutoverYear
1284	nextYear == gregorianCutoverYearJulian
1284	gregorianCutoverYearJulian == gregorianCutoverYear
1285	ndays >= getMinimalDaysInFirstWeek()
1285	fixedDate >= (nextJan1st - 7)
1286	ndays >= getMinimalDaysInFirstWeek()
1287	normalizedDayOfPeriod >= 0
1288	isLenient()
1289	originalFields == null
1290	isExternallySet(field)
1291	value < getMinimum(field)
1291	value > getMaximum(field)
1292	era == BCE
1293	era != CE
1294	isSet(ERA)
1294	year <= 0
1295	isFieldSet(fieldMask, HOUR_OF_DAY)
1296	isFieldSet(fieldMask, AM_PM)
1297	year > gregorianCutoverYear
1297	year > gregorianCutoverYearJulian
1298	gfd >= gregorianCutoverDate
1299	year < gregorianCutoverYear
1299	year < gregorianCutoverYearJulian
1300	jfd < gregorianCutoverDate
1301	isFieldSet(fieldMask, WEEK_OF_YEAR)
1301	isFieldSet(fieldMask, DAY_OF_YEAR)
1302	gregorianCutoverYear == gregorianCutoverYearJulian
1303	year == gregorianCutoverYear
1304	gfd >= gregorianCutoverDate
1305	jfd >= gregorianCutoverDate
1306	calsys == null
1306	calsys == gcal
1307	jfd < gregorianCutoverDate
1308	isLenient()
1309	zoneOffsets == null
1310	tzMask != (ZONE_OFFSET_MASK|DST_OFFSET_MASK)
1311	zone instanceof ZoneInfo
1312	tzMask != 0
1313	isFieldSet(tzMask, ZONE_OFFSET)
1314	isFieldSet(tzMask, DST_OFFSET)
1315	isLenient()
1316	isExternallySet(field)
1317	originalFields[field] != internalGet(field)
1318	isFieldSet(fieldMask, MONTH)
1319	month > DECEMBER
1320	month < JANUARY
1321	isFieldSet(fieldMask, MONTH)
1322	isFieldSet(fieldMask, DAY_OF_MONTH)
1323	isSet(DAY_OF_MONTH)
1324	isFieldSet(fieldMask, WEEK_OF_MONTH)
1325	(firstDayOfWeek - fixedDate) >= getMinimalDaysInFirstWeek()
1326	isFieldSet(fieldMask, DAY_OF_WEEK)
1327	isFieldSet(fieldMask, DAY_OF_WEEK)
1328	isFieldSet(fieldMask, DAY_OF_WEEK_IN_MONTH)
1329	dowim >= 0
1330	fixedDate < gregorianCutoverDate
1330	gregorianCutoverYear != gregorianCutoverYearJulian
1330	year == gregorianCutoverYear
1330	cal == gcal
1331	isFieldSet(fieldMask, DAY_OF_YEAR)
1332	(firstDayOfWeek - fixedDate) >= getMinimalDaysInFirstWeek()
1333	isFieldSet(fieldMask, DAY_OF_WEEK)
1334	dayOfWeek != getFirstDayOfWeek()
1335	isFullyNormalized()
1336	jcal == null
1337	gregorianCutoverYearJulian < gregorianCutoverYear
1338	gregorianCutoverYear != gregorianCutoverYearJulian
1339	fixedDate >= gregorianCutoverDate
1340	gCutover.getMonth() == BaseCalendar.JANUARY
1340	gCutover.getDayOfMonth() == 1
1341	date.getMonth() == gCutover.getMonth()
1342	gCutover.getMonth() == jLastDate.getMonth()
1342	gregorianCutoverYear == gregorianCutoverYearJulian
1343	internalGetEra() == BCE
1344	year != gregorianCutoverYear
1344	year != gregorianCutoverYearJulian
1345	next1 < gregorianCutoverDate
1346	cdate != gdate
1347	internalGetEra() == BCE
1348	year > gregorianCutoverYear
1348	year < gregorianCutoverYearJulian
1349	dom > monthLen
1350	n > max
1351	n < min
1352	gdate == null
4806	constraints == null
4807	constraints == null
4808	layoutInfo != null
4809	layoutInfo == null
4810	layoutInfo == null
4811	layoutInfo == null
4812	rightToLeft
4813	d > x
4814	d > x
4815	d > y
4816	constraints instanceof GridBagConstraints
4817	constraints != null
4818	comp.isVisible()
4819	curX < 0
4820	curY < 0
4821	curWidth <= 0
4822	curHeight <= 0
4823	rowHeights != null
4824	columnWidths != null
4825	comp.isVisible()
4826	curWidth <= 0
4827	curHeight <= 0
4828	curY < 0
4828	curX < 0
4829	curRow >= 0
4830	curCol >= 0
4831	curX < 0
4832	curX < 0
4833	curY < 0
4834	curY < 0
4835	layoutWidth < px
4836	layoutHeight < py
4837	sizeflag == PREFERREDSIZE
4838	calculateBaseline(comp, constraints, d)
4839	constraints.gridwidth == 0
4839	constraints.gridheight == 0
4840	curRow < 0
4840	constraints.gridheight == 0
4841	curCol < 0
4841	constraints.gridwidth == 0
4842	columnWidths != null
4842	layoutWidth < columnWidths.length
4843	layoutHeight < rowHeights.length
4843	rowHeights != null
4844	hasBaseline
4845	comp.isVisible()
4846	curX < 0
4846	curY < 0
4847	curRow >= 0
4848	curCol >= 0
4849	curX < 0
4850	curHeight <= 0
4851	curHeight < 1
4852	curX < 0
4853	curY < 0
4854	curWidth <= 0
4855	curWidth < 1
4856	curY < 0
4857	curWidth <= 0
4858	curWidth < 1
4859	curHeight <= 0
4860	curHeight < 1
4861	constraints.gridwidth == 0
4861	constraints.gridheight == 0
4862	curRow < 0
4862	constraints.gridheight == 0
4863	constraints.gridwidth == 0
4863	curCol < 0
4864	hasBaseline
4865	constraints.ascent >= 0
4866	curHeight == 1
4867	constraints.baselineResizeBehavior == Component.BaselineResizeBehavior. CONSTANT_DESCENT
4868	constraints.baselineResizeBehavior == Component.BaselineResizeBehavior.CONSTANT_DESCENT
4869	columnWidths != null
4870	rowHeights != null
4871	columnWeights != null
4872	rowWeights != null
4873	comp.isVisible()
4874	constraints.tempWidth == i
4875	weight_diff > 0.0
4876	pixels_diff > 0
4877	constraints.tempWidth < nextSize
4877	constraints.tempWidth > i
4878	constraints.tempHeight == i
4879	weight_diff > 0.0
4880	hasBaseline
4881	constraints.ascent >= 0
4882	constraints.tempHeight == 1
4883	constraints.baselineResizeBehavior != Component.BaselineResizeBehavior. CONSTANT_DESCENT
4884	pixels_diff == -1
4885	pixels_diff > 0
4886	constraints.tempHeight > i
4886	constraints.tempHeight < nextSize
4887	anchor == GridBagConstraints.BASELINE_TRAILING
4887	anchor == GridBagConstraints.BASELINE
4887	anchor == GridBagConstraints.BASELINE_LEADING
4888	constraints.ascent >= 0
4889	constraints.baselineResizeBehavior == Component. BaselineResizeBehavior.CENTER_OFFSET
4890	h % 2 == 0
4891	baseline != nextBaseline
4892	baseline == nextBaseline
4893	rightToLeft
4894	r.width > (constraints.minWidth + constraints.ipadx)
4894	constraints.fill != GridBagConstraints.BOTH
4894	constraints.fill != GridBagConstraints.HORIZONTAL
4895	constraints.fill != GridBagConstraints.VERTICAL
4895	constraints.fill != GridBagConstraints.BOTH
4895	r.height > (constraints.minHeight + constraints.ipady)
4896	rightToLeft
4897	rightToLeft
4898	rightToLeft
4899	rightToLeft
4900	rightToLeft
4901	rightToLeft
4902	rightToLeft
4903	rightToLeft
4904	rightToLeft
4905	rightToLeft
4906	rightToLeft
4907	rightToLeft
4908	cons.ascent >= 0
4909	cons.baselineResizeBehavior == Component. BaselineResizeBehavior.CONSTANT_DESCENT
4910	cons.isVerticallyResizable()
4911	layoutInfo.hasConstantDescent(cons.tempY)
4912	cons.baselineResizeBehavior == Component. BaselineResizeBehavior.OTHER
4913	ascent >= 0
4914	ascent <= baseline
4914	ascent >= 0
4915	baseline + (r.height - ascent - cons.insets.top) <= cellHeight - cons.insets.bottom
4916	cons.isVerticallyResizable()
4917	ascent2 >= 0
4918	ascent2 >= 0
4918	ascent2 <= ascent
4919	fits
4920	cons.isVerticallyResizable()
4921	(cons.minHeight + cons.centerPadding + delta) / 2 + cons.centerOffset != baseline
4921	delta > 0
4922	layoutInfo.hasBaseline(cons.tempY)
4923	layoutInfo.hasConstantDescent(cons.tempY)
4924	cons.isVerticallyResizable()
4925	layoutInfo.hasBaseline(cons.tempY)
4926	layoutInfo.hasConstantDescent(cons.tempY)
4927	cons.isVerticallyResizable()
4928	cons.isVerticallyResizable()
4929	columnWidths.length == 0
4929	rowHeights == null
4929	components.length == 0
4929	columnWidths == null
4929	rowHeights.length == 0
4930	parent.width < d.width
4930	parent.height < d.height
4931	diffw != 0
4932	weight > 0.0
4933	info.minWidth[i] < 0
4934	diffh != 0
4935	weight > 0.0
4936	info.minHeight[i] < 0
4937	comp.isVisible()
4938	rightToLeft
4939	r.x < 0
4940	r.y < 0
4941	r.width <= 0
4941	r.height <= 0
4942	comp.height != r.height
4942	comp.x != r.x
4942	comp.width != r.width
4942	comp.y != r.y
7665	rows == 0
7665	cols == 0
7666	this.cols == 0
7666	rows == 0
7667	cols == 0
7667	this.rows == 0
7668	nrows > 0
7669	w < d.width
7670	h < d.height
7671	nrows > 0
7672	w < d.width
7673	h < d.height
7674	ncomponents == 0
7675	nrows > 0
7676	ltr
7677	i < ncomponents
7678	i < ncomponents
16907	guard != null
16908	guard != null
1724	encoding != null
1725	java.nio.charset.Charset.isSupported(encoding)
1726	em == null
1727	newLevel == null
1728	record.getLevel().intValue() < levelValue
1728	levelValue == offValue
1729	filter == null
1730	sealed
0	initialCapacity < 0
1	initialCapacity > MAXIMUM_CAPACITY
2	loadFactor <= 0
2	Float.isNaN(loadFactor)
3	switching
4	k instanceof String
4	0 != h
5	key == null
6	size == 0
7	e.key == null
8	size == 0
9	e.hash == hash
9	key != null
9	(k = e.key) == key
9	key.equals(k)
10	table == EMPTY_TABLE
11	key == null
12	(k = e.key) == key
12	key.equals(k)
12	e.hash == hash
13	e.key == null
14	e.hash == hash
14	(k = e.key) == key
14	key != null
14	key.equals(k)
15	oldCapacity == MAXIMUM_CAPACITY
16	rehash
17	numKeysToBeAdded == 0
18	table == EMPTY_TABLE
19	numKeysToBeAdded > threshold
20	targetCapacity > MAXIMUM_CAPACITY
21	newCapacity > table.length
22	size == 0
23	e.hash == hash
23	(k = e.key) == key
23	key.equals(k)
23	key != null
24	prev == e
25	size == 0
25	o instanceof Map.Entry
26	e.hash == hash
26	e.equals(entry)
27	prev == e
28	value == null
29	value.equals(e.value)
30	e.value == null
31	result.table != EMPTY_TABLE
32	null != table[bucketIndex]
32	size >= threshold
33	table==EMPTY_TABLE
34	size > 0
35	loadFactor <= 0
35	Float.isNaN(loadFactor)
36	mappings < 0
37	mappings > 0
3887	switching
3888	initialCapacity < 0
3889	loadFactor <= 0
3889	Float.isNaN(loadFactor)
3890	initialCapacity==0
3891	value == null
3892	e.value.equals(value)
3893	e.hash == hash
3893	e.key.equals(key)
3894	e.key.equals(key)
3894	e.hash == hash
3895	newCapacity - MAX_ARRAY_SIZE > 0
3896	oldCapacity == MAX_ARRAY_SIZE
3897	rehash
3898	value == null
3899	e.key.equals(key)
3899	e.hash == hash
3900	count >= threshold
3901	e.hash == hash
3901	e.key.equals(key)
3902	prev != null
3903	max == -1
3904	i == max
3905	count == 0
3906	count == 0
3907	keySet == null
3908	entrySet==null
3909	values==null
3910	o == this
3911	o instanceof Map
3912	t.size() != size()
3913	value == null
3914	t.get(key)==null
3914	t.containsKey(key)
3915	value.equals(t.get(key))
3916	count == 0
3916	loadFactor < 0
3917	(length & 1) == 0
3917	length > elements
3918	length > origlength
3918	origlength > 0
3919	value == null
3920	e.hash == hash
3920	e.key.equals(key)
7679	superMessage == null
7680	headlessMessage == null
13374	length > remaining()
13375	length > remaining()
13376	src instanceof HeapByteBuffer
13377	src == this
13378	n > remaining()
13379	src.isDirect()
13380	n > remaining()
12818	length > remaining()
12819	length > remaining()
12820	src instanceof HeapCharBuffer
12821	src == this
12822	n > remaining()
12823	src.isDirect()
12824	n > remaining()
12825	start > end
12825	start < 0
12825	end > length()
12836	end > length()
12836	start < 0
12836	start > end
12909	length > remaining()
12910	length > remaining()
12911	src instanceof HeapDoubleBuffer
12912	src == this
12913	n > remaining()
12914	src.isDirect()
12915	n > remaining()
13084	length > remaining()
13085	length > remaining()
13086	src instanceof HeapFloatBuffer
13087	src == this
13088	n > remaining()
13089	src.isDirect()
13090	n > remaining()
12865	length > remaining()
12866	length > remaining()
12867	src instanceof HeapIntBuffer
12868	src == this
12869	n > remaining()
12870	src.isDirect()
12871	n > remaining()
13148	length > remaining()
13149	length > remaining()
13150	src instanceof HeapLongBuffer
13151	src == this
13152	n > remaining()
13153	src.isDirect()
13154	n > remaining()
12872	length > remaining()
12873	length > remaining()
12874	src instanceof HeapShortBuffer
12875	src == this
12876	n > remaining()
12877	src.isDirect()
12878	n > remaining()
9689	(changeFlags & PARENT_CHANGED) != 0
9690	(changeFlags & DISPLAYABILITY_CHANGED) != 0
9691	first
9692	(changeFlags & SHOWING_CHANGED) != 0
9693	first
9694	first
14584	isToken(name)
14584	name.charAt(0) == '$'
14584	name.length() == 0
14585	startsWithIgnoreCase(header, SET_COOKIE2)
14586	startsWithIgnoreCase(header, SET_COOKIE)
14587	version == 0
14588	maxAge == 0
14589	maxAge == MAX_AGE_UNSPECIFIED
14590	deltaSecond > maxAge
14591	pattern != null
14592	v != 1
14592	v != 0
14593	domain == null
14593	host == null
14594	embeddedDotInDomain == 0
14595	isLocalDomain
14595	embeddedDotInDomain == -1
14595	embeddedDotInDomain == domain.length() - 1
14596	isLocalDomain
14596	firstDotInHost == -1
14597	lengthDiff == 0
14598	lengthDiff > 0
14599	lengthDiff == -1
14600	getVersion() > 0
14601	obj == this
14602	obj instanceof HttpCookie
14603	tspecials.indexOf(c) != -1
14603	c >= 0x7f
14603	c < 0x20
14604	index != -1
14605	retainHeader
14606	index != -1
14607	assignor != null
14608	getPath() != null
14609	getDomain() != null
14610	getPortlist() != null
14611	COOKIE_DATE_FORMATS[i].contains("yyyy")
14612	year < 70
14613	header.indexOf("expires=") != -1
14614	header.indexOf("version=") != -1
14615	header.indexOf("max-age") != -1
14616	startsWithIgnoreCase(header, SET_COOKIE2)
14617	str.length() > 2
14617	str != null
14617	str.charAt(0) == '"'
14617	str.charAt(str.length() - 1) == '"'
14618	str.length() > 2
14618	str.charAt(str.length() - 1) == '\''
14618	str != null
14618	str.charAt(0) == '\''
14619	s == t
14620	s != null
14620	t != null
14621	start == null
14621	s == null
14622	s.length() >= start.length()
14622	start.equalsIgnoreCase(s.substring(0, start.length()))
14623	c == '"'
14624	quoteCount % 2 == 0
14624	c == ','
15154	connected
15155	chunkLength != -1
15156	contentLength < 0
15157	connected
15158	chunkLength != -1
15159	contentLength < 0
15160	connected
15161	fixedContentLengthLong != -1
15161	fixedContentLength != -1
15162	sec != null
15163	connected
15164	methods[i].equals(method)
15165	method.equals("TRACE")
15166	s != null
15167	responseCode != -1
15168	statusLine == null
15169	exc != null
15170	exc instanceof RuntimeException
15171	statusLine.startsWith("HTTP/1.")
15172	codePos > 0
15173	phrasePos > 0
15173	phrasePos < statusLine.length()
15174	phrasePos < 0
15175	dateString.indexOf("GMT") == -1
10142	profileClass != ICC_Profile.CLASS_DISPLAY
10142	profileClass != ICC_Profile.CLASS_NAMEDCOLOR
10142	profileClass != ICC_Profile.CLASS_ABSTRACT
10142	profileClass != ICC_Profile.CLASS_COLORSPACECONVERSION
10142	profileClass != ICC_Profile.CLASS_INPUT
10142	profileClass != ICC_Profile.CLASS_OUTPUT
10143	this2srgb == null
10144	needScaleInit
10145	srgb2this == null
10146	needScaleInit
10147	this2xyz == null
10148	needScaleInit
10149	xyz2this == null
10150	needScaleInit
10151	component < 0
10151	component > this.getNumComponents() - 1
10152	component < 0
10152	component > this.getNumComponents() - 1
10153	type == ColorSpace.TYPE_Lab
10154	type == ColorSpace.TYPE_XYZ
10081	ID != 0
10082	profileActivator != null
10083	ProfileDeferralMgr.deferring
10084	getColorSpaceType (theID) == ColorSpace.TYPE_GRAY
10084	getData (theID, icSigMediaWhitePointTag) != null
10084	getData (theID, icSigGrayTRCTag) != null
10085	getColorSpaceType (theID) == ColorSpace.TYPE_RGB
10085	getData (theID, icSigRedColorantTag) != null
10085	getData (theID, icSigGreenColorantTag) != null
10085	getData (theID, icSigGreenTRCTag) != null
10085	getData (theID, icSigRedTRCTag) != null
10085	getData (theID, icSigMediaWhitePointTag) != null
10085	getData (theID, icSigBlueTRCTag) != null
10085	getData (theID, icSigBlueColorantTag) != null
10086	sRGBprofile == null
10087	XYZprofile == null
10088	PYCCprofile == null
10089	standardProfileExists("PYCC.pf")
10090	GRAYprofile == null
10091	LINEAR_RGBprofile == null
10092	f != null
10093	fis == null
10094	s instanceof ProfileDeferralInfo
10095	(profileData = getProfileDataFromStream(s)) == null
10096	(n = s.read(header, bytesread, bytestoread)) < 0
10097	header[39] != 0x70
10097	header[37] != 0x63
10097	header[36] != 0x61
10097	header[38] != 0x73
10098	(n = s.read(profileData, bytesread, bytestoread)) < 0
10099	ProfileDeferralMgr.deferring
10100	pdi.colorSpaceType == ColorSpace.TYPE_RGB
10101	pdi.colorSpaceType == ColorSpace.TYPE_GRAY
10102	(fis = AccessController.doPrivileged(pa)) == null
10103	profileData == null
10104	deferralInfo != null
10105	deferralInfo != null
10106	ProfileDeferralMgr.deferring
10107	ProfileDeferralMgr.deferring
10108	ProfileDeferralMgr.deferring
10109	ProfileDeferralMgr.deferring
10110	deferralInfo != null
10111	intFromBigEndian (theTRCData, icCurveCount) != 1
10112	nElements == 1
10113	f.isAbsolute()
10114	f.isFile()
10114	(path = System.getProperty("java.iccprofile.path")) != null
10115	isChildOf(f, dir)
10116	f.isFile()
10116	(path = System.getProperty("java.class.path")) != null
10116	f == null
10117	f == null
10117	f.isFile()
10118	f != null
10118	f.isFile()
10119	canonicalDirName.endsWith(File.separator)
10120	this == sRGBprofile
10121	this == XYZprofile
10122	this == PYCCprofile
10123	this == GRAYprofile
10124	this == LINEAR_RGBprofile
10125	csName == null
10126	csName != null
10127	csName.equals("CS_sRGB")
10128	csName.equals("CS_CIEXYZ")
10129	csName.equals("CS_PYCC")
10130	csName.equals("CS_GRAY")
10131	csName.equals("CS_LINEAR_RGB")
10132	isKnownPredefinedCS
15136	p < input.length()
15137	p < input.length()
15138	isASCII
15139	useSTD3ASCIIRules
15140	isNonLDHAsciiCodePoint(c)
15141	dest.charAt(0) == '-'
15141	dest.charAt(dest.length() - 1) == '-'
15142	isASCII
15143	isAllASCII(dest.toString())
15144	startsWithACEPrefix(dest)
15145	dest.length() > MAX_LABEL_LENGTH
15146	isASCII
15147	startsWithACEPrefix(dest)
15148	toASCIIOut.equalsIgnoreCase(dest.toString())
15149	c == '.'
15149	c == '\uFF0E'
15149	c == '\uFF61'
15149	c == '\u3002'
15150	c > 0x7F
15151	input.length() < ACE_PREFIX_LENGTH
15152	toASCIILower(input.charAt(i)) != ACE_PREFIX.charAt(i)
15153	'A' <= ch
15153	ch <= 'Z'
17047	scope != null
17048	certificates == null
17049	publicKey != null
17050	keyEquals(publicKey, certificate.getPublicKey())
17051	(aKeyFormat == null) ^ (anotherKeyFormat == null)
17052	anotherKeyFormat != null
17052	aKeyFormat != null
17053	aKeyFormat.equalsIgnoreCase(anotherKeyFormat)
17054	certificates != null
17055	certificates == null
17056	identity == this
17057	identity instanceof Identity
17058	this.fullName().equals(i.fullName())
17059	name.equalsIgnoreCase(identity.name)
17060	(publicKey == null) ^ (identity.publicKey == null)
17061	identity.publicKey != null
17061	publicKey != null
17062	publicKey.equals(identity.publicKey)
17063	scope != null
17064	scope != null
17065	detailed
17066	info != null
17067	publicKey != null
17068	certificates == null
17069	security != null
1041	expectedMaxSize < 0
1042	minCapacity > MAXIMUM_CAPACITY
1042	minCapacity < 0
1043	item == k
1044	item == null
1045	item == k
1046	item == null
1047	tab[i - 1] != null
1047	tab[i] == value
1048	item == k
1049	item == null
1050	item == k
1051	++size >= threshold
1052	oldLength == 2*MAXIMUM_CAPACITY
1053	threshold == MAXIMUM_CAPACITY-1
1054	oldLength >= newLength
1055	key != null
1056	n == 0
1057	n > threshold
1058	item == k
1059	item == null
1060	item == k
1061	tab[i + 1] != value
1062	item == null
1063	d <= i
1063	d <= i
1063	r <= d
1063	r <= d
1063	i < r
1064	o == this
1065	o instanceof IdentityHashMap
1066	m.size() != size
1067	k != null
1067	containsMapping(k, tab[i + 1])
1068	o instanceof Map
1069	key != null
1070	ks != null
1071	vs != null
1072	es != null
1073	key != null
1074	item == k
16871	classname == null
16872	scope == null
16873	security != null
4546	arg == null
4082	f == null
6190	(hints & (SCALE_SMOOTH | SCALE_AREA_AVERAGING)) != 0
6191	surfaceManager != null
6192	surfaceManager != null
6193	priority < 0
6193	priority > 1
6194	surfaceManager != null
8623	o == null
8624	o instanceof String
6848	rhs == null
6849	this == rhs
6850	fOriginX != rhs.fOriginX
6850	fOriginY != rhs.fOriginY
6851	getAlignment() != rhs.getAlignment()
6852	fImage.equals(rhs.fImage)
15297	cookie == null
15298	cookie.getMaxAge() != 0
15299	cookie.getDomain() != null
15300	uri != null
15301	uri == null
15302	it.next().hasExpired()
15303	cookies == null
15303	cookies.size() == 0
15304	ck == null
15305	host == null
15305	domain == null
15306	embeddedDotInDomain == 0
15307	embeddedDotInDomain == domain.length() - 1
15307	isLocalDomain
15307	embeddedDotInDomain == -1
15308	firstDotInHost == -1
15308	isLocalDomain
15309	lengthDiff == 0
15310	lengthDiff > 0
15311	lengthDiff == -1
15312	netscapeDomainMatches(domain, host)
15312	HttpCookie.domainMatches(domain, host)
15312	c.getVersion() == 0
15312	c.getVersion() == 1
15313	cookieJar.indexOf(c) != -1
15314	c.hasExpired()
15315	cookies.contains(c)
15315	c.getSecure()
15315	secureLink
15316	comparator.compareTo(index) == 0
15317	indexedCookies != null
15318	cookieJar.indexOf(ck) != -1
15319	ck.hasExpired()
15320	ck.getSecure()
15320	cookies.contains(ck)
15320	secureLink
15321	index != null
15322	cookies != null
8544	bits > 16
8544	bits < 1
8545	bits < 1
8545	bits > 16
8546	bits > 16
8546	bits < 1
8547	bits < 1
8547	bits > 16
8548	bits > 16
8548	bits < 1
8549	size < 1
8550	hasalpha
8551	alpha != 0xff
8552	alpha == 0x00
8553	transparency == OPAQUE
8554	transparent_index < 0
8555	bits > 16
8555	bits < 1
8556	size < 1
8557	transferType != DataBuffer.TYPE_BYTE
8557	transferType != DataBuffer.TYPE_USHORT
8558	bits > 16
8558	bits < 1
8559	size < 1
8560	transferType != DataBuffer.TYPE_USHORT
8560	transferType != DataBuffer.TYPE_BYTE
8561	validBits != null
8562	validBits.testBit(i)
8563	size < 1
8564	a != null
8565	alpha != 0xff
8566	alpha == 0x00
8567	transparency == OPAQUE
8568	transparent_index < 0
8569	validBits != null
8569	validBits.testBit(i)
8570	hasalpha
8571	alpha != 0xff
8572	alpha == 0x00
8573	transparency == OPAQUE
8574	transparent_index < 0
8575	nBits == null
8576	supportsAlpha
8577	trans < map_size
8577	trans >= 0
8578	this.transparency == OPAQUE
8579	this.transparency != transparency
8580	transparency == OPAQUE
8581	maskbits == 3
8582	maskbits > 4
8582	maskbits < 8
8583	(pix = lookupcache[i]) == 0
8584	rgb == lookupcache[i+1]
8585	allgrayopaque
8586	this.rgb[i] == 0x0
8587	d < 0
8588	d < minDist
8589	d == 0
8590	transparency == OPAQUE
8591	lutrgb == rgb
8591	lutrgb != 0
8592	smallestError != 0
8593	lutrgb == 0
8594	currentError < smallestError
8595	currentError < smallestError
8596	currentError < smallestError
8597	alpha == 0
8597	transparent_index >= 0
8598	lutrgb == rgb
8599	validBits.testBit(i)
8599	validBits != null
8600	currentError < smallestError
8601	currentError < smallestError
8602	currentError < smallestError
8603	validBits == null
8603	currentError < smallestError
8603	validBits.testBit(i)
8604	pixel == null
8605	pixel == null
8606	pixel == null
8607	components == null
8608	supportsAlpha
8608	(components.length-offset) > 3
8609	supportsAlpha
8610	supportsAlpha
8611	pixel_bits == 1
8611	pixel_bits == 4
8611	pixel_bits == 2
8612	pixel_bits <= 8
8613	pixel_bits <= 16
8614	pixel_bits == 4
8614	pixel_bits == 2
8614	pixel_bits == 1
8615	sm instanceof ComponentSampleModel
8615	sm instanceof MultiPixelPackedSampleModel
8616	sm.getTransferType() != transferType
8617	sm.getNumBands() != 1
8618	isCompatibleRaster(raster)
8619	transparency == TRANSLUCENT
8619	forceARGB
8620	transparency == BITMASK
8621	obj instanceof int[]
8622	validBits == null
10455	indexedReadMethodName != null
10455	getIndexedReadMethod() == null
10456	indexedWriteMethodName != null
10456	getIndexedWriteMethod() == null
10457	indexedReadMethod == null
10458	this.indexedReadMethodRef.isSet()
10458	cls == null
10458	indexedReadMethodName == null
10459	indexedReadMethodName == null
10460	type == null
10460	type == boolean.class
10461	indexedReadMethodName.equals(nextMethodName)
10461	indexedReadMethod == null
10462	readMethod == null
10463	indexedWriteMethod == null
10464	this.indexedWriteMethodRef.isSet()
10464	cls == null
10464	indexedWriteMethodName == null
10465	type == null
10466	propType.isArray()
10467	indexedWriteMethodName == null
10468	indexedWriteMethod != null
10469	indexedWriteMethod.getReturnType().equals(void.class)
10470	writeMethod == null
10471	type == null
10472	indexedReadMethod != null
10473	params.length != 1
10474	params[0] != Integer.TYPE
10475	indexedPropertyType == Void.TYPE
10476	indexedWriteMethod != null
10477	params.length != 2
10478	params[0] != Integer.TYPE
10479	indexedPropertyType != null
10479	indexedPropertyType != params[1]
10480	propertyType != null
10480	propertyType.isArray()
10480	propertyType.getComponentType() != indexedPropertyType
10481	this == obj
10482	obj != null
10482	obj instanceof IndexedPropertyDescriptor
10483	compareMethods(getIndexedReadMethod(), otherIndexedReadMethod)
10484	compareMethods(getIndexedWriteMethod(), otherIndexedWriteMethod)
10485	getIndexedPropertyType() != other.getIndexedPropertyType()
10486	x instanceof IndexedPropertyDescriptor
10487	xr != null
10488	xw != null
10489	y instanceof IndexedPropertyDescriptor
10490	yr.getDeclaringClass() == getClass0()
10490	yr != null
10491	yw.getDeclaringClass() == getClass0()
10491	yw != null
14349	addr != null
14350	addr.length == INADDRSZ
14351	anyLocalAddress == null
14352	loopbackAddress == null
14353	netif != null
14354	inetaddr instanceof Inet4Address
14730	host != null
14730	host.length() > 0
14730	host.charAt(0) == '['
14731	host.charAt(host.length()-1) == ']'
14732	addr != null
14733	addr.length == Inet6Address.INADDRSZ
14734	host.length() > 0
14734	host != null
14734	host.charAt(0) == '['
14735	host.charAt(host.length()-1) == ']'
14736	addr != null
14737	addr.length == Inet6Address.INADDRSZ
14738	nif == null
14739	addr.length == INADDRSZ
14740	Inet6Address.isLinkLocalAddress(otherAddr)
14740	Inet6Address.isLinkLocalAddress(thisAddr)
14741	Inet6Address.isSiteLocalAddress(otherAddr)
14741	Inet6Address.isSiteLocalAddress(thisAddr)
14742	addr instanceof Inet6Address
14743	differentLocalAddressTypes(thisAddr, ia6_addr.getAddress())
14744	ifc.getName().equals (ifname)
14745	getClass().getClassLoader() != null
14746	ifname != null
14746	"".equals (ifname)
14747	scope_ifname == null
14748	ipaddress.length != INADDRSZ
14749	holder.getFamily() != IPv6
14750	holder6.scope_ifname_set
14751	obj == null
14751	obj instanceof Inet6Address
14752	i < (INADDRSZ / INT16SZ) -1
14358	netif != null
14359	inetaddr.getClass().isInstance(addr)
14360	inetaddr instanceof Inet6Address
14361	ifaddr == null
14362	addr instanceof Inet6Address
14363	anyLocalAddress == null
14364	InetAddress.preferIPv6Address
14365	loopbackAddress == null
14366	InetAddress.preferIPv6Address
14437	ttl < 0
14438	timeout < 0
14439	holder().getHostName() == null
14440	canonicalHostName == null
14441	check
14442	sec != null
14443	arr != null
14444	ok
14445	addressCacheInit
14446	success
14447	entry == null
14448	entry != null
14449	providerName. equalsIgnoreCase(nsd.getType()+"," +nsd.getProviderName())
14450	host != null
14450	host.length() > 0
14450	host.charAt(0) == '['
14451	host.charAt(host.length()-1) == ']'
14452	addr != null
14453	addr.length == Inet4Address.INADDRSZ
14454	addr.length == Inet6Address.INADDRSZ
14455	newAddr != null
14456	host.length() == 0
14456	host == null
14457	host.charAt(0) == '['
14458	host.charAt(host.length()-1) == ']'
14458	host.length() > 2
14459	Character.digit(host.charAt(0), 16) != -1
14459	host.charAt(0) == ':'
14460	addr == null
14461	(pos=host.indexOf ("%")) != -1
14462	numericZone == -1
14463	host.contains(":")
14463	(addr = IPAddressUtil.textToNumericFormatV6(host)) == null
14464	ipv6Expected
14465	addr != null
14466	addr.length == Inet4Address.INADDRSZ
14467	ifname != null
14468	ipv6Expected
14469	percent == -1
14470	c == ']'
14471	i == percent+1
14472	(digit = Character.digit (c, 10)) < 0
14473	check
14474	security != null
14475	addresses == null
14476	addresses == unknown_array
14477	(addresses = checkLookupTable(host)) == null
14478	host.equalsIgnoreCase("localhost")
14479	reqAddr != null
14479	addresses.length > 1
14479	addresses[0].equals(reqAddr)
14480	addresses[i].equals(reqAddr)
14481	i < addresses.length
14482	success
14482	ex != null
14483	lookupTable.containsKey(host) == false
14484	addresses == null
14485	security != null
14486	local.equals("localhost")
14487	cachedLocalHost != null
14488	(now - cacheTime) < maxCacheTime
14489	ret == null
14490	impl == null
14491	getClass().getClassLoader() != null
14492	getClass().getClassLoader() != null
14493	getClass().getClassLoader() != null
15132	port > 0xFFFF
15132	port < 0
15133	hostname == null
15134	oisHostname == null
15134	oisAddr == null
15135	obj == null
15135	obj instanceof InetSocketAddress
1808	b == null
1809	len < 0
1809	off < 0
1809	off > b.length - len
1810	b == null
1811	off < 0
1811	off > b.length - len
1811	len < 0
1812	b == null
1813	off < 0
1813	len < 0
1813	off > b.length - len
1814	addr != 0
1815	zsRef.address() == 0
2043	closed
2044	in == null
2044	inf == null
2045	size <= 0
2046	b == null
2047	len > b.length - off
2047	len < 0
2047	off < 0
2048	len == 0
2049	inf.needsDictionary()
2049	inf.finished()
2050	inf.needsInput()
2051	reachEOF
2052	n < 0
2053	len > b.length
2054	len == -1
2055	closed
2056	usesDefaultInflater
2057	len == -1
2025	closed
2026	out == null
2027	infl == null
2028	bufLen <= 0
2029	closed
2030	inf.finished()
2031	n < 1
2032	msg == null
2033	usesDefaultInflater
2034	b == null
2035	len > b.length - off
2035	off < 0
2035	len < 0
2036	len == 0
2037	inf.needsInput()
2038	len < 1
2039	n > 0
2040	inf.finished()
2041	inf.needsDictionary()
2042	msg == null
9696	button <= 0
9696	button > BUTTON_DOWN_MASK.length
9697	GraphicsEnvironment.isHeadless()
9698	sm != null
9699	logger.isLoggable(PlatformLogger.FINE)
9700	(modifiers & InputEvent.META_DOWN_MASK) != 0
9701	(modifiers & InputEvent.CTRL_DOWN_MASK) != 0
9702	(modifiers & InputEvent.ALT_DOWN_MASK) != 0
9703	(modifiers & InputEvent.SHIFT_DOWN_MASK) != 0
9704	(modifiers & InputEvent.ALT_GRAPH_DOWN_MASK) != 0
9705	(modifiers & mask) != 0
9706	buf.length() > 0
9629	id < INPUT_METHOD_FIRST
9629	id > INPUT_METHOD_LAST
9630	text != null
9630	id == CARET_POSITION_CHANGED
9631	text != null
9632	committedCharacterCount > textLength
9632	committedCharacterCount < 0
9633	text == null
9634	caret == null
9635	visiblePosition == null
9636	when == 0
9637	source == null
5477	state == RAW_TEXT
5477	state == CONVERTED_TEXT
13545	b == null
13546	off < 0
13546	len < 0
13546	len > b.length - off
13547	len == 0
13548	c == -1
13549	c == -1
13550	n <= 0
13551	nr < 0
13708	charsetName == null
13709	cs == null
13710	dec == null
10077	obj instanceof Insets
13381	capacity < 0
13382	length > remaining()
13383	src == this
13384	n > remaining()
13385	length > remaining()
13386	hb == null
13387	isReadOnly
13388	hb == null
13389	isReadOnly
13390	this == ob
13391	ob instanceof IntBuffer
13392	this.remaining() != that.remaining()
13393	equals(this.get(i), that.get(j))
13394	cmp != 0
11462	radix > Character.MAX_RADIX
11462	radix < Character.MIN_RADIX
11463	radix == 10
11464	negative
11465	negative
11466	i == Integer.MIN_VALUE
11467	i < 0
11468	i == 0
11469	sign != 0
11470	x <= sizeTable[i]
11471	s == null
11472	radix < Character.MIN_RADIX
11473	radix > Character.MAX_RADIX
11474	len > 0
11475	firstChar < '0'
11476	firstChar == '-'
11477	firstChar != '+'
11478	len == 1
11479	digit < 0
11480	result < multmin
11481	result < limit + digit
11482	i >= IntegerCache.low
11482	i <= IntegerCache.high
11483	obj instanceof Integer
11484	v != null
11485	nm.length() == 0
11486	firstChar == '-'
11487	firstChar == '+'
11488	nm.startsWith("0X", index)
11488	nm.startsWith("0x", index)
11489	nm.startsWith("#", index)
11490	nm.length() > 1 + index
11490	nm.startsWith("0", index)
11491	nm.startsWith("+", index)
11491	nm.startsWith("-", index)
11492	i == 0
11493	i >>> 16 == 0
11494	i >>> 24 == 0
11495	i >>> 28 == 0
11496	i >>> 30 == 0
11497	i == 0
11498	y != 0
11499	y != 0
11500	y != 0
11501	y != 0
15365	obj instanceof InterfaceAddress
15366	address == null ? cmp.address == null : address.equals(cmp.address)
15367	broadcast == null ? cmp.broadcast == null : broadcast.equals(cmp.broadcast)
15368	maskLength != cmp.maskLength
10711	ReflectUtil.isPackageAccessible(beanClass)
10712	beanInfo == null
10713	stopClass == null
10713	flags == USE_ALL_BEANINFO
10714	name.length() == 0
10714	name == null
10715	Character.isUpperCase(name.charAt(0))
10715	name.length() > 1
10715	Character.isUpperCase(name.charAt(1))
10716	sm != null
10717	clz == null
10718	stopClass != null
10719	c == stopClass
10720	isSuper
10721	flags == USE_ALL_BEANINFO
10722	superClass != stopClass
10723	newFlags == IGNORE_IMMEDIATE_BEANINFO
10724	explicitBeanInfo != null
10725	additionalBeanInfo == null
10726	explicitBeanInfo != null
10727	superBeanInfo != null
10727	explicitProperties == null
10728	explicitProperties != null
10729	method == null
10730	Modifier.isStatic(mods)
10731	name.length() <= 3
10731	name.startsWith(IS_PREFIX)
10732	argCount == 0
10733	name.startsWith(GET_PREFIX)
10734	name.startsWith(IS_PREFIX)
10734	resultType == boolean.class
10735	argCount == 1
10736	int.class.equals(argTypes[0])
10736	name.startsWith(GET_PREFIX)
10737	void.class.equals(resultType)
10737	name.startsWith(SET_PREFIX)
10738	throwsException(method, PropertyVetoException.class)
10739	argCount == 2
10740	int.class.equals(argTypes[0])
10740	name.startsWith(SET_PREFIX)
10740	void.class.equals(resultType)
10741	throwsException(method, PropertyVetoException.class)
10742	pd != null
10743	propertyChangeSource
10744	defaultPropertyName != null
10745	defaultPropertyName.equals(result[i].getName())
10746	list == null
10747	this.beanClass != pd.getClass0()
10748	read != null
10749	write != null
10750	pd instanceof IndexedPropertyDescriptor
10751	readI != null
10752	writeI != null
10753	cls
10754	cls
10755	descriptors != null
10756	index < descriptors.length
10756	0 <= index
10757	properties == null
10758	pd instanceof IndexedPropertyDescriptor
10759	ipd.getIndexedReadMethod() != null
10760	igpd != null
10761	pd.getReadMethod() != null
10762	gpd != null
10763	method.getName().startsWith(IS_PREFIX)
10764	pd instanceof IndexedPropertyDescriptor
10765	ipd.getIndexedWriteMethod() != null
10766	igpd != null
10767	igpd.getIndexedPropertyType() == ipd.getIndexedPropertyType()
10768	ispd != null
10769	ispd != null
10770	pd.getWriteMethod() != null
10771	gpd != null
10772	gpd.getPropertyType() == pd.getPropertyType()
10773	spd != null
10774	spd != null
10775	igpd != null
10775	ispd != null
10776	gpd != null
10777	tpd instanceof IndexedPropertyDescriptor
10778	spd != null
10779	tpd instanceof IndexedPropertyDescriptor
10780	igpd == ispd
10781	gpd != null
10781	spd != null
10782	gpd == spd
10783	ispd != null
10784	spd != null
10785	gpd != null
10786	igpd != null
10787	gpd != null
10788	spd != null
10789	spd != null
10790	gpd != null
10791	pd instanceof IndexedPropertyDescriptor
10792	ipd.getIndexedReadMethod() == null
10792	ipd.getIndexedWriteMethod() == null
10793	pd == null
10793	list.size() > 0
10794	pd != null
10795	propType.isArray()
10795	propType.getComponentType() == ipropType
10796	pd.getClass0().isAssignableFrom(ipd.getClass0())
10797	pd.getClass0().isAssignableFrom(ipd.getClass0())
10798	write != null
10798	read == null
10799	read != null
10800	read != null
10800	write == null
10801	write != null
10802	pd1.getClass0().isAssignableFrom(pd2.getClass0())
10803	ipd1.getClass0().isAssignableFrom(ipd2.getClass0())
10804	events == null
10805	explicitBeanInfo != null
10806	ix >= 0
10806	ix < explicitEvents.length
10807	superBeanInfo != null
10807	explicitEvents == null
10808	ix >= 0
10808	ix < supers.length
10809	additional != null
10810	explicitEvents != null
10811	method == null
10812	Modifier.isStatic(mods)
10813	name.startsWith(REMOVE_PREFIX)
10813	name.startsWith(GET_PREFIX)
10813	name.startsWith(ADD_PREFIX)
10814	name.startsWith(ADD_PREFIX)
10815	returnType == void.class
10816	parameterTypes.length == 1
10817	Introspector.isSubclass(type, eventListenerType)
10818	listenerName.length() > 0
10818	type.getName().endsWith(listenerName)
10819	adds == null
10820	name.startsWith(REMOVE_PREFIX)
10821	returnType == void.class
10822	parameterTypes.length == 1
10823	Introspector.isSubclass(type, eventListenerType)
10824	type.getName().endsWith(listenerName)
10824	listenerName.length() > 0
10825	removes == null
10826	name.startsWith(GET_PREFIX)
10827	parameterTypes.length == 0
10828	returnType.isArray()
10829	Introspector.isSubclass(type, eventListenerType)
10830	type.getName().endsWith(listenerName)
10830	listenerName.length() > 0
10831	gets == null
10832	removes != null
10832	adds != null
10833	listenerName.endsWith("Listener")
10833	removes.get(listenerName) == null
10834	gets != null
10835	allMethods[i] == null
10836	isEventHandler(allMethods[i])
10837	throwsException(addMethod, java.util.TooManyListenersException.class)
10838	events.size() == 0
10839	defaultEventName != null
10840	defaultEventName.equals(result[i].getName())
10841	esd.getName().equals("propertyChange")
10842	old == null
10843	methods == null
10844	explicitBeanInfo != null
10845	explicitMethods == null
10845	superBeanInfo != null
10846	additional != null
10847	explicitMethods != null
10848	method == null
10849	old == null
10850	p1.length == p2.length
10851	p1[i] != p2[i]
10852	match
10853	old == null
10854	explicitBeanInfo != null
10855	bd != null
10856	Component.class.isAssignableFrom(type)
10856	Customizer.class.isAssignableFrom(type)
10857	argTypes.length != 1
10858	ReflectUtil.isPackageAccessible(clz)
10859	result == null
10860	method.getDeclaringClass().equals(clz)
10861	method == null
10862	method.getName().equals(methodName)
10863	params.length == argCount
10864	args != null
10865	argCount > 0
10866	TypeResolver.erase(TypeResolver.resolveInClass(start, params[j])) != args[j]
10867	different
10868	method != null
10869	methodName == null
10870	a == b
10871	b == null
10871	a == null
10872	x == b
10873	b.isInterface()
10874	isSubclass(interfaces[i], b)
10875	exs[i] == exception
10876	old.events != null
10877	old.properties != null
10878	oldp instanceof IndexedPropertyDescriptor
10879	old.methods != null
10880	targetBeanInfo != null
10881	this.targetBeanInfoRef == null
10882	targetBeanInfo == null
10883	targetBeanInfo != null
14154	classname == null
12977	input == null
12977	reason == null
12978	index < -1
12979	index > -1
9685	catchExceptions
9686	t instanceof Exception
9687	notifier != null
9688	listener != null
11779	returnConversionPossible()
11780	target.isVarargsCollector()
11780	USE_AS_TYPE_PATH
11781	invoker == null
11782	returnConversionNeeded(callerType, target)
11783	needType == erasedCallerType.returnType()
11784	VerifyType.isNullConversion(haveType, needType)
11784	needType.isInterface()
11710	invokerName.contains(".")
11711	DUMP_CLASS_FILES
11712	DUMP_CLASS_FILES
11713	ctr == null
11714	DUMP_CLASS_FILES
11715	cpPatches.containsKey(cpPlaceholder)
11716	p.index >= size
11717	con == null
11718	con instanceof Integer
11719	con instanceof Long
11720	x == (short) x
11721	con instanceof Float
11722	x == (short) x
11723	con instanceof Double
11724	x == (short) x
11725	con instanceof Boolean
11726	i == (byte) i
11727	i == (short) i
11728	VerifyType.isNullConversion(Object.class, pclass)
11729	isStaticallyNameable(pclass)
11730	pclass.isArray()
11731	VerifyType.isNullConversion(int.class, pclass)
11732	isSelectAlternative(member)
11733	isStaticallyInvocable(member)
11734	i == lambdaForm.names.length - 1
11734	i == lambdaForm.result
11735	name.type != 'V'
11736	member == null
11737	member.isConstructor()
11738	cls.isPrimitive()
11738	cls.isArray()
11739	cls.isLocalClass()
11739	cls.isAnonymousClass()
11740	cls.getClassLoader() != MethodHandle.class.getClassLoader()
11741	isStaticallyNameable(mtype.returnType())
11742	isStaticallyNameable(ptype)
11743	VerifyAccess.isSamePackage(MethodHandle.class, cls)
11743	member.isPrivate()
11744	member.isPublic()
11744	isStaticallyNameable(cls)
11745	cls.isPrimitive()
11746	cls.getClassLoader() != Object.class.getClassLoader()
11747	VerifyAccess.isSamePackage(MethodHandle.class, cls)
11748	Modifier.isPublic(cls.getModifiers())
11749	VerifyAccess.isSamePackage(pkgcls, cls)
11750	refKind == REF_invokeSpecial
11751	member.getDeclaringClass().isInterface()
11751	refKind == REF_invokeVirtual
11752	member.isMethod()
11753	arg instanceof Name
11754	arg instanceof String
11754	arg == null
11754	ptype == 'L'
11755	Wrapper.isWrapperType(arg.getClass())
11755	ptype != 'L'
11756	lambdaForm.result == -1
11757	lambdaForm.result != lambdaForm.names.length - 1
11758	rtype != rn.type
11759	rtype == 'L'
11760	boxedType != rn.type
11761	rn.type != 'L'
11762	from == to
11763	wfrom.isSubwordOrInt()
11764	wto.isSubwordOrInt()
11765	wto.bitWidth() < 32
11766	to == 'F'
11767	to == 'D'
11768	to == 'J'
11769	to == 'D'
11770	to == 'J'
11771	to == 'F'
11772	error
11773	ptype.isPrimitive()
11774	rtype.isPrimitive()
11774	rtype != void.class
11775	dptype.isPrimitive()
11776	rtype != void.class
11776	rtype.isPrimitive()
11777	rtype == void.class
11778	DUMP_CLASS_FILES
11683	invoker != null
11684	mtype.parameterSlotCount() <= MethodType.MAX_MH_INVOKER_ARITY - MTYPE_ARG_APPENDED
11685	invoker != null
11686	mtype.parameterSlotCount() <= MethodType.MAX_MH_INVOKER_ARITY - GENERIC_INVOKER_SLOP
11687	invoker != null
11688	vaInvoker != null
11689	targetType.parameterSlotCount() <= MethodType.MAX_MH_INVOKER_ARITY
11690	vaInvoker != null
11691	invoker != null
11692	targetType.parameterCount() > 0
11693	invoker == null
11694	mtype.parameterSlotCount() <= MethodType.MAX_MH_ARITY - MTYPE_ARG_APPENDED
11695	mtype.parameterSlotCount() <= MethodType.MAX_MH_ARITY - (MTYPE_ARG_APPENDED + GENERIC_INVOKER_SLOP)
11696	customized
11697	isCached
11698	lform != null
11699	isLinker
11700	customized
11701	MTYPE_ARG >= INARG_LIMIT
11702	isGeneric
11703	customized
11704	isLinker
11705	isCached
11706	actual != expected
11707	gamh != null
11708	gamh != null
11709	lform != null
99	amount == 0
100	field >= ZONE_OFFSET
100	field < 0
101	field == YEAR
102	field == MONTH
103	field == ERA
104	era < 0
105	era > eras.length - 1
106	field >= HOUR
107	timeOfDay >= ONE_DAY
108	timeOfDay < 0
109	zoneOffset != 0
110	fd2 != fd
111	amount == 0
112	field < 0
112	field >= ZONE_OFFSET
113	nh < 0
114	internalGet(DAY_OF_MONTH) != d.getDayOfMonth()
115	field == HOUR
116	field == HOUR
117	isTransitionYear(jdate.getNormalizedYear())
118	year == getMaximum(YEAR)
119	n == max
120	jd.getDayOfMonth() > d.getDayOfMonth()
121	jd.getDayOfMonth() == d.getDayOfMonth()
121	jd.getTimeOfDay() > d.getTimeOfDay()
122	year == getMinimum(YEAR)
123	n == min
124	jd.getDayOfMonth() < d.getDayOfMonth()
125	jd.getTimeOfDay() < d.getTimeOfDay()
125	jd.getDayOfMonth() == d.getDayOfMonth()
126	mon < 0
127	internalGet(DAY_OF_MONTH) > monthLen
128	jdate.getYear() == 1
129	eraIndex < eras.length - 1
130	transition.getYear() == jdate.getNormalizedYear()
131	transition.getDayOfMonth() == 1
132	min == max
133	n == min
134	transition.getDayOfMonth() == 1
134	transition.getMonth() == BaseCalendar.JANUARY
135	jdate.getDayOfMonth() < transition.getDayOfMonth()
136	transition.getMonth() - 1 == n
136	n == max
137	jdate.getDayOfMonth() >= dom
138	isTransitionYear(jdate.getNormalizedYear())
139	year == getMaximum(YEAR)
140	year == getMinimum(YEAR)
141	value > min
141	value < max
142	value < max
142	value > min
143	year != getMinimum(YEAR)
144	gcal.getYearFromFixedDate(day1) != y
145	day1 < jcal.getFixedDate(d)
146	gcal.getYearFromFixedDate(fd) != y
147	d.getEra() == jdate.getEra()
147	d.getYear() == jdate.getYear()
148	d.getYear() == jdate.getYear()
148	d.getEra() == jdate.getEra()
149	dow < 0
150	isTransitionYear
151	(int)(monthDay1st - month1) >= getMinimalDaysInFirstWeek()
152	nfd < month1
153	nfd >= (month1 + monthLength)
154	isTransitionYear(jdate.getNormalizedYear())
155	isTransitionYear(jdate.getNormalizedYear())
156	isTransitionYear(normalizedYear)
156	isTransitionYear(normalizedYear - 1)
157	weekOfYear > 1
157	weekOfYear < 52
158	amount == 0
159	fd < dowFirst
160	fd >= dowFirst + 7
161	isTransitionYear(jdate.getNormalizedYear())
162	x < lastDays
163	x < lastDays
164	checkDisplayNameParams(field, style, SHORT, LONG, locale, ERA_MASK|YEAR_MASK|MONTH_MASK|DAY_OF_WEEK_MASK|AM_PM_MASK)
165	field == YEAR
165	get(ERA) == 0
165	style == SHORT
165	get(YEAR) != 1
166	key != null
167	field == YEAR
168	strings.length > 0
169	field == ERA
169	index < eras.length
169	index >= strings.length
170	field == DAY_OF_WEEK
171	checkDisplayNameParams(field, style, ALL_STYLES, LONG, locale, ERA_MASK|YEAR_MASK|MONTH_MASK|DAY_OF_WEEK_MASK|AM_PM_MASK)
172	style == ALL_STYLES
173	field == AM_PM
174	shortNames == null
175	longNames != null
176	key != null
177	field == YEAR
178	strings.length > 0
179	strings.length < eras.length
179	field == ERA
180	style == SHORT
181	isFieldSet(YEAR_MASK|MONTH_MASK|WEEK_OF_YEAR_MASK, field)
182	eraIndex > BEFORE_MEIJI
183	getYearOffsetInMillis(jd) < getYearOffsetInMillis(d)
184	y > 400
185	getYearOffsetInMillis(jd) < getYearOffsetInMillis(d)
186	jd.getYear() == 1
186	eraIndex > MEIJI
187	jd.getDayOfMonth() < d.getDayOfMonth()
188	day1 < jan1
188	jd.getTimeOfDay() < d.getTimeOfDay()
188	day1 == jan1
189	(fieldsForFixedMax & (1<<field)) != 0
190	isTransitionYear(date.getNormalizedYear())
191	date.getYear() != 1
192	fd < transition
193	date.getEra() == d.getEra()
193	date.getYear() == d.getYear()
194	isTransitionYear(date.getNormalizedYear())
195	date.getYear() != 1
196	fd < transition
197	date.getEra() == d.getEra()
197	date.getYear() == d.getYear()
198	date.getYear() == getMinimum(YEAR)
199	isTransitionYear(date.getNormalizedYear())
200	date.getYear() == jd.getYear()
200	date.getEra() == jd.getEra()
201	date.getEra() == null
201	date.getYear() == getMinimum(YEAR)
202	ndays >= getMinimalDaysInFirstWeek()
203	dayOfWeek < 0
204	date.isLeapYear()
204	magic == 5
204	magic == 6
204	magic == 12
205	jc == this
206	value == 1
206	max > 7
207	date.getEra() == jd.getEra()
207	date.getYear() == jd.getYear()
208	dayOfWeek < 0
209	nDaysFirstWeek >= getMinimalDaysInFirstWeek()
210	monthLength > 0
211	monthLength > 7
212	x < 0
213	eraIndex == eras.length - 1
214	value > 400
215	getYearOffsetInMillis(jd) > getYearOffsetInMillis(d)
216	isPartiallyNormalized()
217	fieldMask != 0
217	cachedFixedDate == Long.MIN_VALUE
218	zoneOffsets == null
219	tzMask != (ZONE_OFFSET_MASK|DST_OFFSET_MASK)
220	tz instanceof ZoneInfo
221	tzMask != 0
222	isFieldSet(tzMask, ZONE_OFFSET)
223	isFieldSet(tzMask, DST_OFFSET)
224	timeOfDay >= ONE_DAY
225	fixedDate < 0
225	fixedDate != cachedFixedDate
226	(fieldMask & (MONTH_MASK|DAY_OF_MONTH_MASK|DAY_OF_WEEK_MASK)) != 0
227	(fieldMask & (HOUR_OF_DAY_MASK|AM_PM_MASK|HOUR_MASK |MINUTE_MASK|SECOND_MASK|MILLISECOND_MASK)) != 0
228	timeOfDay != 0
229	(fieldMask & (ZONE_OFFSET_MASK|DST_OFFSET_MASK)) != 0
230	(fieldMask & (DAY_OF_YEAR_MASK|WEEK_OF_YEAR_MASK |WEEK_OF_MONTH_MASK|DAY_OF_WEEK_IN_MONTH_MASK)) != 0
231	transitionYear
232	normalizedYear == MIN_VALUES[YEAR]
233	weekOfYear == 0
234	transitionYear
234	isTransitionYear(d.getNormalizedYear())
235	d.isLeapYear()
236	transitionYear
237	jdate.getYear() == 1
238	era > HEISEI
239	normalizedYear == pd.getYear()
240	d.isLeapYear()
241	transitionYear
242	weekOfYear >= 52
243	jdate.isLeapYear()
244	fixedDate >= (nextJan1st - 7)
244	ndays >= getMinimalDaysInFirstWeek()
245	jdate.getYear() == 1
246	ndays >= getMinimalDaysInFirstWeek()
246	fixedDate >= (nextJan1st - 7)
247	ndays >= getMinimalDaysInFirstWeek()
248	normalizedDayOfPeriod >= 0
249	isLenient()
250	originalFields == null
251	isExternallySet(field)
252	value < getMinimum(field)
252	value > getMaximum(field)
253	isSet(ERA)
254	isSet(YEAR)
255	isFieldSet(fieldMask, HOUR_OF_DAY)
256	isFieldSet(fieldMask, AM_PM)
257	zoneOffsets == null
258	tzMask != (ZONE_OFFSET_MASK|DST_OFFSET_MASK)
259	zone instanceof ZoneInfo
260	tzMask != 0
261	isFieldSet(tzMask, ZONE_OFFSET)
262	isFieldSet(tzMask, DST_OFFSET)
263	isLenient()
264	isExternallySet(field)
265	originalFields[field] != internalGet(field)
266	isFieldSet(fieldMask, MONTH)
267	month > DECEMBER
268	month < JANUARY
269	era != 0
269	year == 1
270	year == MIN_VALUES[YEAR]
271	month < m
272	month == m
273	isFieldSet(fieldMask, MONTH)
274	isFieldSet(fieldMask, DAY_OF_MONTH)
275	isSet(DAY_OF_MONTH)
276	isFieldSet(fieldMask, WEEK_OF_MONTH)
277	(firstDayOfWeek - fixedDate) >= getMinimalDaysInFirstWeek()
278	isFieldSet(fieldMask, DAY_OF_WEEK)
279	isFieldSet(fieldMask, DAY_OF_WEEK)
280	isFieldSet(fieldMask, DAY_OF_WEEK_IN_MONTH)
281	dowim >= 0
282	isFieldSet(fieldMask, DAY_OF_YEAR)
283	isTransitionYear(date.getNormalizedYear())
284	(firstDayOfWeek - fixedDate) >= getMinimalDaysInFirstWeek()
285	isFieldSet(fieldMask, DAY_OF_WEEK)
286	dayOfWeek != getFirstDayOfWeek()
287	date.getYear() == 1
287	date.getEra() != null
288	fd > fixedDate
289	eraIndex != -1
290	transition <= fixedDate
291	eraIndex == -1
292	transitionFixedDate <= cachedFixedDate
293	transitionDate.getMonth() == date.getMonth()
293	transitionDate.getYear() == date.getNormalizedYear()
294	eraIndex < eras.length - 1
295	transitionDate.getMonth() == date.getMonth()
295	transitionDate.getYear() == date.getNormalizedYear()
296	normalizedYear == transitionYear
297	normalizedYear > transitionYear
298	eras[i] == era
299	isFullyNormalized()
300	year != getMinimum(YEAR)
301	dom > monthLength
302	dom > monthLength
303	dom < d.getDayOfMonth()
304	tod < d.getTimeOfDay()
304	realDate.getDayOfMonth() == d.getDayOfMonth()
305	n > max
306	n < min
307	jdate == null
3560	man == null
3561	manEntry != null
3562	verify
3563	jvInitialized
3564	ze != null
3565	jv != null
3566	verify
3567	names != null
3568	name.endsWith(".DSA")
3568	name.endsWith(".RSA")
3568	name.endsWith(".SF")
3568	name.endsWith(".EC")
3569	names != null
3570	MANIFEST_NAME.equals(uname)
3570	SignatureFileVerifier.isBlockOrSF(uname)
3571	e == null
3572	mev == null
3573	b != null
3573	b.length > 0
3574	JarVerifier.debug != null
3575	jv != null
3576	JarVerifier.debug != null
3577	jv.nothingToVerify()
3578	JarVerifier.debug != null
3579	jv == null
3580	jvInitialized
3581	jv == null
3582	manEntry == null
3583	manEntry == null
3584	names != null
3585	MANIFEST_NAME.equals( names[i].toUpperCase(Locale.ENGLISH))
3586	computedHasClassPathAttribute
3587	isKnownToNotHaveClassPathAttribute()
3588	manEntry != null
3589	c != src[j]
3590	javaHome == null
3591	jarNames == null
3592	name.startsWith(localJavaHome)
3593	name.endsWith(names[i])
3594	jvInitialized
3594	jv != null
3595	jv != null
3596	cs[i].getCodeSigners() == null
3597	includeUnsigned
3598	jv != null
3599	jv != null
3600	unsigned.hasMoreElements()
3601	jv != null
3602	jv.eagerValidation
3603	je != null
3604	jv != null
3605	jv != null
3482	e.getName().equalsIgnoreCase("META-INF/")
3482	e != null
3483	JarFile.MANIFEST_NAME.equalsIgnoreCase(e.getName())
3483	e != null
3484	doVerify
3485	first == null
3486	tryManifest
3487	first.getName().equalsIgnoreCase(JarIndex.INDEX_NAME)
3488	jv != null
3488	e != null
3489	jv.nothingToVerify() == true
3490	first == null
3491	jv != null
3492	man != null
3543	man == null
3544	firstEntry
3545	hasMagic(edata)
3545	edata == null
3546	edata == null
3547	get16(edata, i) == JAR_MAGIC
15130	separator == -1
15131	++separator != spec.length()
3493	je == null
3494	debug != null
3495	parsingMeta
3496	uname.startsWith("META-INF/")
3496	uname.startsWith("/META-INF/")
3497	je.isDirectory()
3498	uname.equals(JarIndex.INDEX_NAME)
3498	uname.equals(JarFile.MANIFEST_NAME)
3499	SignatureFileVerifier.isBlockOrSF(uname)
3500	parsingMeta
3501	je.isDirectory()
3502	name.startsWith("./")
3503	name.startsWith("/")
3504	sigFileSigners.get(name) != null
3504	verifiedSigners.get(name) != null
3505	b != -1
3506	parsingBlockOrSF
3507	n != -1
3508	parsingBlockOrSF
3509	parsingBlockOrSF
3510	je.signers == null
3510	je != null
3511	debug != null
3512	uname.endsWith(".SF")
3513	sfv.needSignatureFile(key)
3514	debug != null
3515	signerCache == null
3516	manDig == null
3517	manDig == null
3518	sfv.needSignatureFileBytes()
3519	bytes == null
3520	debug != null
3521	debug != null
3522	debug != null
3523	debug != null
3524	debug != null
3525	eagerValidation
3525	sigFileSigners.get(name) != null
3526	signers != null
3527	sigFileSigners.containsKey(JarFile.MANIFEST_NAME)
3528	url == lastURL
3529	map == null
3530	cs == null
3531	unsigned
3532	cs instanceof VerifierCodeSource
3533	vcs.isSameDomain(csdomain)
3534	j != -1
3535	match == null
3536	signerMap == null
3537	match != null
3538	match.length > 0
3539	jarCodeSigners == null
9457	copies <= 0
9458	defaultSelection == null
9459	destination == null
9460	dialog == null
9461	fromPage != 0
9462	toPage != 0
9463	pageRanges != null
9464	fromPage > toPage
9464	toPage != 0
9464	fromPage < minPage
9464	fromPage > maxPage
9464	fromPage <= 0
9465	maxPage <= 0
9465	maxPage < minPage
9466	minPage <= 0
9466	minPage > maxPage
9467	multipleDocumentHandling == null
9468	pageRanges != null
9469	fromPage != 0
9469	toPage != 0
9470	pageRanges == null
9471	pageRanges[i][0] <= last
9471	pageRanges[i][1] < pageRanges[i][0]
9471	pageRanges[i].length != 2
9471	pageRanges[i] == null
9472	first == 0
9473	first < minPage
9473	last > maxPage
9474	sides == null
9475	toPage != 0
9476	fromPage != 0
9477	pageRanges != null
9478	toPage < minPage
9478	toPage <= 0
9478	toPage < fromPage
9478	toPage > maxPage
9478	fromPage != 0
9479	obj instanceof JobAttributes
9480	fileName == null
9481	rhs.fileName != null
9482	fileName.equals(rhs.fileName)
9483	pageRanges == null
9484	rhs.pageRanges != null
9485	pageRanges.length != rhs.pageRanges.length
9485	rhs.pageRanges == null
9486	pageRanges[i][0] != rhs.pageRanges[i][0]
9486	pageRanges[i][1] != rhs.pageRanges[i][1]
9487	printer == null
9488	rhs.printer != null
9489	printer.equals(rhs.printer)
9490	pageRanges != null
9491	fileName != null
9492	printer != null
9493	first
1109	fromIndex == toIndex
1110	e == null
1111	eClass != elementType
1111	eClass.getSuperclass() != elementType
1112	result
1113	e == null
1114	eClass != elementType
1114	eClass.getSuperclass() != elementType
1115	result
1116	c instanceof JumboEnumSet
1117	es.elementType != elementType
1118	(es.elements[i] & ~elements[i]) != 0
1119	c instanceof JumboEnumSet
1120	es.elementType != elementType
1121	es.isEmpty()
1122	c instanceof JumboEnumSet
1123	es.elementType != elementType
1124	c instanceof JumboEnumSet
1125	es.elementType != elementType
1126	o instanceof JumboEnumSet
1127	es.elementType != elementType
8832	data.length < len
8833	data == null
8834	data.length < this.data.length
9707	id == KEY_TYPED
9708	keyChar == CHAR_UNDEFINED
9709	keyCode != VK_UNDEFINED
9710	keyLocation != KEY_LOCATION_UNKNOWN
9711	keyLocation > KEY_LOCATION_NUMPAD
9711	keyLocation < KEY_LOCATION_UNKNOWN
9712	getModifiers() != 0
9712	getModifiersEx() == 0
9713	getModifiersEx() != 0
9713	getModifiers() == 0
9714	getModifiers() != 0
9714	getModifiersEx() == 0
9715	getModifiersEx() != 0
9715	getModifiers() == 0
9716	keyCode >= VK_A
9716	keyCode <= VK_Z
9716	keyCode <= VK_9
9716	keyCode >= VK_0
9717	keyCode >= VK_NUMPAD0
9717	keyCode <= VK_NUMPAD9
9718	(keyCode & 0x01000000) != 0
9719	(modifiers & InputEvent.META_MASK) != 0
9720	(modifiers & InputEvent.CTRL_MASK) != 0
9721	(modifiers & InputEvent.ALT_MASK) != 0
9722	(modifiers & InputEvent.SHIFT_MASK) != 0
9723	(modifiers & InputEvent.ALT_GRAPH_MASK) != 0
9724	(modifiers & InputEvent.BUTTON1_MASK) != 0
9725	buf.length() > 0
9726	getModifiers() != 0
9727	getModifiersEx() != 0
9728	(modifiers & SHIFT_MASK) != 0
9729	(modifiers & ALT_MASK) != 0
9730	(modifiers & CTRL_MASK) != 0
9731	(modifiers & META_MASK) != 0
9732	(modifiers & ALT_GRAPH_MASK) != 0
9733	(modifiers & BUTTON1_MASK) != 0
9734	(modifiers & SHIFT_DOWN_MASK) != 0
9735	(modifiers & ALT_DOWN_MASK) != 0
9736	(modifiers & CTRL_DOWN_MASK) != 0
9737	(modifiers & META_DOWN_MASK) != 0
9738	(modifiers & ALT_GRAPH_DOWN_MASK) != 0
9739	(modifiers & BUTTON1_DOWN_MASK) != 0
9740	getModifiers() != 0
9740	getModifiersEx() == 0
16575	nextSpi(null) == null
16576	oldSpi != null
16576	oldSpi != spi
16577	serviceIterator == null
16578	obj instanceof KeyFactorySpi == false
16579	serviceIterator == null
16580	failure == null
16581	failure instanceof RuntimeException
16582	failure instanceof InvalidKeySpecException
16583	serviceIterator == null
16584	failure == null
16585	failure instanceof RuntimeException
16586	failure instanceof InvalidKeySpecException
16587	serviceIterator == null
16588	failure == null
16589	failure instanceof RuntimeException
16590	failure instanceof InvalidKeySpecException
16591	serviceIterator == null
16592	failure == null
16593	failure instanceof RuntimeException
16594	failure instanceof InvalidKeyException
16933	instance.impl instanceof KeyPairGenerator
16934	t.hasNext() == false
16935	instance.impl instanceof KeyPairGenerator
16936	failure == null
16828	encoded == null
16828	algorithm == null
16828	type == null
16828	format == null
16829	type == Type.SECRET
16829	RAW.equals(format)
16830	X509.equals(format)
16830	type == Type.PUBLIC
16831	type == Type.PRIVATE
16831	PKCS8.equals(format)
16597	provider == null
16597	provider.length() == 0
16598	provider == null
16599	kstype == null
16600	initialized
16601	initialized
16602	initialized
16603	initialized
16604	initialized
16605	chain.length == 0
16605	key instanceof PrivateKey
16605	chain == null
16606	initialized
16607	initialized
16608	initialized
16609	initialized
16610	initialized
16611	initialized
16612	initialized
16613	initialized
16614	initialized
16615	initialized
16616	initialized
16617	alias == null
16618	initialized
16619	entry == null
16619	alias == null
16620	initialized
16621	alias == null
16621	entryClass == null
16622	initialized
16909	param == null
16910	param instanceof KeyStore.SimpleLoadStoreParameter
16911	protection instanceof PasswordProtection
16912	protection instanceof CallbackHandlerProtection
16913	password == null
16914	engineContainsAlias(alias)
16915	protParam == null
16916	engineIsCertificateEntry(alias)
16917	protParam instanceof KeyStore.PasswordProtection
16918	engineIsCertificateEntry(alias)
16919	engineIsKeyEntry(alias)
16920	key instanceof PrivateKey
16921	key instanceof SecretKey
16922	protParam instanceof KeyStore.PasswordProtection
16922	protParam != null
16923	protParam != null
16924	entry instanceof KeyStore.TrustedCertificateEntry
16925	protParam != null
16925	pProtect.getPassword() != null
16926	entry instanceof KeyStore.PrivateKeyEntry
16927	pProtect == null
16927	pProtect.getPassword() == null
16928	entry instanceof KeyStore.SecretKeyEntry
16929	pProtect.getPassword() == null
16929	pProtect == null
16930	entryClass == KeyStore.TrustedCertificateEntry.class
16931	entryClass == KeyStore.PrivateKeyEntry.class
16932	entryClass == KeyStore.SecretKeyEntry.class
6642	manager == null
6643	newManager != null
6644	oldManager != null
6645	newManager != null
6646	focusOwner == null
6647	focusOwner.isFocusable()
6647	focusOwner == null
6648	getCurrentFocusCycleRoot() == null
6648	focusOwner.isFocusCycleRoot(getCurrentFocusCycleRoot())
6648	focusOwner != null
6649	rootAncestor == null
6649	focusOwner instanceof Window
6650	rootAncestor != null
6651	shouldFire
6652	GraphicsEnvironment.isHeadless()
6653	focusLog.isLoggable(PlatformLogger.FINEST)
6654	permanentFocusOwner == null
6655	permanentFocusOwner.isFocusable()
6655	permanentFocusOwner == null
6656	shouldFire
6657	focusedWindow == null
6658	focusedWindow == null
6658	focusedWindow.isFocusableWindow()
6659	shouldFire
6660	activeWindow == null
6661	focusLog.isLoggable(PlatformLogger.FINER)
6662	defaultPolicy == null
6663	id < 0
6663	id >= TRAVERSAL_KEY_LENGTH
6664	keystrokes == null
6665	obj == null
6666	obj instanceof AWTKeyStroke
6667	keystroke.getKeyChar() != KeyEvent.CHAR_UNDEFINED
6668	i == id
6669	defaultFocusTraversalKeys[i].contains(keystroke)
6670	id >= TRAVERSAL_KEY_LENGTH
6670	id < 0
6671	currentFocusCycleRoot == null
6672	listener != null
6673	changeSupport == null
6674	listener != null
6675	changeSupport != null
6676	changeSupport == null
6677	listener != null
6678	changeSupport == null
6679	listener != null
6680	changeSupport != null
6681	changeSupport == null
6682	oldValue == newValue
6683	changeSupport != null
6684	listener != null
6685	vetoableSupport == null
6686	listener != null
6687	vetoableSupport != null
6688	vetoableSupport == null
6689	listener != null
6690	vetoableSupport == null
6691	listener != null
6692	vetoableSupport != null
6693	vetoableSupport == null
6694	oldValue == newValue
6695	vetoableSupport != null
6696	dispatcher != null
6697	keyEventDispatchers == null
6698	dispatcher != null
6699	keyEventDispatchers != null
6700	processor != null
6701	keyEventPostProcessors == null
6702	processor != null
6703	keyEventPostProcessors != null
6704	window != null
6705	component != null
6706	comp == null
6707	getMostRecentFocusOwner((Window)window) == comp
6707	window != null
6708	window != null
6709	realWindow.getTemporaryLostComponent() == comp
6710	focusOwner != null
6711	focusOwner != null
6712	focusOwner != null
6713	focusOwner instanceof Container
6714	parentWindow.syncLWRequests
6714	parentWindow == null
6715	descendant == null
6716	allowSyncFocusRequests
6716	hwFocusRequest == null
6716	heavyweight == manager.getNativeFocusOwner()
6717	descendant == currentFocusOwner
6718	currentFocusOwner != null
6719	currentFocusOwner != null
6719	currentFocusOwnerEvent != null
6720	descendant != null
6720	newFocusOwnerEvent != null
6721	caughtEx instanceof RuntimeException
6722	caughtEx instanceof Error
6723	log.isLoggable(PlatformLogger.FINE)
6724	heavyweight == null
6725	time == 0
6726	descendant == null
6727	focusLog.isLoggable(PlatformLogger.FINER)
6728	focusLog.isLoggable(PlatformLogger.FINEST)
6729	focusLog.isLoggable(PlatformLogger.FINEST)
6730	heavyweight.getContainingWindow() == nativeFocusedWindow
6730	hwFocusRequest == null
6730	heavyweight == nativeFocusOwner
6731	descendant == currentFocusOwner
6732	focusLog.isLoggable(PlatformLogger.FINEST)
6733	currentFocusOwner != null
6734	focusLog.isLoggable(PlatformLogger.FINEST)
6735	hwFocusRequest != null
6735	hwFocusRequest.heavyweight == heavyweight
6736	hwFocusRequest.addLightweightRequest(descendant, temporary, cause)
6737	focusLog.isLoggable(PlatformLogger.FINEST)
6738	focusedWindowChangeAllowed
6739	hwFocusRequest == HeavyweightFocusRequest.CLEAR_GLOBAL_FOCUS_OWNER
6740	focusedWindowChanged(heavyweight, (hwFocusRequest != null) ? hwFocusRequest.heavyweight : nativeFocusedWindow)
6741	focusLog.isLoggable(PlatformLogger.FINEST)
6742	focusLog.isLoggable(PlatformLogger.FINEST)
6743	hwFocusRequest == HeavyweightFocusRequest.CLEAR_GLOBAL_FOCUS_OWNER
6744	hwFocusRequest != null
6745	hwFocusRequest.heavyweight == parent
6746	lwFocusRequest != null
6747	retEx != null
6748	ex != null
6749	globalFocusOwner.appContext != AppContext.getAppContext()
6749	globalFocusOwner != null
6750	currentLightweightRequests != null
6751	localLightweightRequests != null
6752	iter.hasNext()
6753	currentFocusOwner != null
6754	currentFocusOwner != null
6755	manager.getGlobalFocusOwner() == lwFocusRequest.component
6756	caughtEx instanceof RuntimeException
6757	caughtEx instanceof Error
6758	removeFirstRequest()
6759	fe.getID() == FocusEvent.FOCUS_LOST
6759	isTemporary(opposite, source)
6759	opposite == null
6760	hwFocusRequest == HeavyweightFocusRequest.CLEAR_GLOBAL_FOCUS_OWNER
6761	hwFocusRequest != null
6761	source != null
6761	nativeSource == null
6762	source == hwFocusRequest.getFirstLightweightRequest().component
6763	hwFocusRequest != null
6763	nativeSource == hwFocusRequest.heavyweight
6764	currentFocusOwner != null
6765	hwFocusRequest.lightweightRequests.size() > 0
6766	hwFocusRequest == null
6766	currentFocusOwner.getContainingWindow() == source
6766	source != hwFocusRequest.heavyweight
6766	currentFocusOwner != null
6767	hwFocusRequest == HeavyweightFocusRequest.CLEAR_GLOBAL_FOCUS_OWNER
6768	currentFocusOwner != null
6769	opposite == null
6770	currentFocusOwner != null
6771	opposite == hwFocusRequest.getFirstLightweightRequest().component
6771	nativeOpposite == null
6771	hwFocusRequest != null
6771	nativeOpposite == hwFocusRequest.heavyweight
6772	currentFocusOwner == null
6773	focusedWindowChanged(opposite, currentFocusOwner)
6774	fe.isTemporary()
6774	currentFocusOwner != null
6775	clearingCurrentLightweightRequests
6776	focusLog.isLoggable(PlatformLogger.FINER)
6777	event instanceof FocusEvent
6777	event instanceof WindowEvent
6778	focusLog.isLoggable(PlatformLogger.FINER)
6778	event instanceof KeyEvent
6779	event.getID() == FocusEvent.FOCUS_LOST
6779	newFocusOwner != null
6780	manager.getGlobalFocusOwner() == fe.getComponent()
6780	fe.getOppositeComponent() == newFocusOwner
6781	hwFocusRequest != null
6782	hwFocusRequest.lightweightRequests != null
6783	heavyweightRequests.size() == 0
6784	log.isLoggable(PlatformLogger.FINE)
6785	heavyweight == null
6786	hwFocusRequest.heavyweight == heavyweight
6786	hwFocusRequest != null
6787	heavyweightRequests.size() == 0
6788	wfrom == null
6788	wto == null
6789	wto == null
6790	wfrom == null
6791	wto == null
6791	wfrom == null
6792	wto == null
6793	wfrom == null
6794	comp == null
6794	comp.getPeer() == null
6795	comp.getPeer() instanceof LightweightPeer
6796	proxyActive == null
6797	GraphicsEnvironment.isHeadless()
6798	security != null
6799	replaceKeyboardFocusManagerPermission == null
6800	this != getCurrentKeyboardFocusManager()
17226	serverName == null
7687	peer == null
7688	peer != null
7689	this.text.equals(text)
7689	this.text == null
7689	text != this.text
7690	peer != null
7691	testvalid
7692	accessibleContext == null
11959	result != null
11960	arity < 0
11960	basicTypeSignature.length() != resultPos+1
11961	result >= 0
11962	names[result].type == 'V'
11963	result == LAST_RESULT
11964	i < arity
11965	n.initIndex(i)
11966	oldNames == null
11967	oldNames != null
11968	startFixing <= changesStart
11969	n != n2
11970	needIntern
11971	arg instanceof Name
11972	result < 0
11973	arity < 0
11974	siglen != arity + 2
11975	i == arity
11976	c == 'V'
11977	ALL_TYPES.indexOf(c) < 0
11978	COMPILE_THRESHOLD == 0
11979	this.vmentry != null
11980	isCompiled
11980	vmentry != null
11981	TRACE_INTERPRETER
11982	m.isPackage()
11982	m.isStatic()
11983	mt.parameterType(0) == MethodHandle.class
11983	m.getName().startsWith("interpret_")
11983	mt.parameterCount() > 0
11984	prep != null
11985	type == void.class
11986	type == int.class
11987	x == null
11988	type.isInterface()
11989	TRACE_INTERPRETER
11990	TRACE_INTERPRETER
11991	a instanceof Name
11992	COMPILE_THRESHOLD != 0
11992	invocationCounter < COMPILE_THRESHOLD
11993	invocationCounter >= COMPILE_THRESHOLD
11994	invocationCounter < COMPILE_THRESHOLD
11995	invocationCounter >= COMPILE_THRESHOLD
11996	TRACE_INTERPRETER
11997	result < 0
11998	names.length == arity + 1
11998	result == arity
11999	i == arity
12000	i >= arity
12001	i < arity
12002	i+1 < arity
12003	TRACE_INTERPRETER
12004	n.isParam()
12005	n.index == pos
12006	arg instanceof Name
12007	ni == pos
12008	ni < pos
12009	bindCache != null
12010	form != null
12011	n.function.memberDeclaringClassOrNull() == oldData.clazz
12011	n.function != null
12012	oldGetter == oldData.getters[j]
12013	newGetter != null
12014	firstOldRef < 0
12015	i <= arity2
12016	n.isSiblingBindingBefore(binding)
12017	result2 == pos
12018	result2 <= insPos
12018	result2 > pos
12019	pos >= 0
12020	name.equals(names[i])
12021	result2 >= arity
12022	result2 >= 0
12023	result2 < skip+outArgs
12024	n2 == null
12025	names2[i] == null
12026	n != n2
12027	"ZBSC".indexOf(c) >= 0
12028	which >= INTERNED_ARGUMENT_LIMIT
12028	tn < 0
1787	name == null
1788	isDefaultBundle
1789	localizedLevelName != null
1790	cachedLocale != null
1791	cachedLocale.equals(Locale.getDefault())
1792	resourceBundleName == null
1793	cachedLocalizedName != null
1794	name == null
1795	level != null
1796	level == null
1797	level != null
1798	o != null
1799	level != null
1800	level == null
1801	level != null
5112	ccw == 0.0
5113	ccw > 0.0
5114	ccw < 0.0
5115	dotprod <= 0.0
5116	dotprod <= 0.0
5117	lenSq < 0
5118	lenSq < 0
6860	text.getEndIndex() - text.getBeginIndex() < 1
6861	pos < limit
6862	offsetLimit <= pos
6863	charAtMaxAdvance == limit
6864	Character.isWhitespace(measurer.getChars()[charAtMaxAdvance-start])
6865	testPos == limit
6866	nextOffset <= pos
6867	requireNextWord
6868	nextOffset > offsetLimit
6869	pos < limit
6870	layoutLimit == pos
6871	newPosition < start
6871	newPosition > limit
5445	isDone()
5446	index == 0
5447	affine != null
5448	isDone()
5449	index == 0
5450	affine != null
13552	c != -1
13553	pushBack == '\n'
13554	b == null
13555	len < 0
13555	off > b.length
13555	(off + len) < 0
13555	(off + len) > b.length
13555	off < 0
13556	len == 0
13557	c == -1
13558	c == -1
13559	b != null
13560	n <= 0
13561	nr < 0
13426	skipLF
13427	c == '\n'
13428	skipLF
13429	c == '\n'
13430	l != null
13431	n < 0
13432	skipBuffer.length < nn
13432	skipBuffer == null
13433	nc == -1
9943	start == null
9943	end == null
9944	start.equals(end)
9945	cycleMethod != CycleMethod.REPEAT
9945	fractions.length == 2
9945	colorSpace == ColorSpaceType.SRGB
13014	name.equals("hard")
13014	name.equals("symbolic")
13015	actions != null
13015	actions.length() > 0
2647	capacity <= 0
2648	e == null
2649	linkLast(new Node<E>(e))
2650	count >= capacity
2651	last == null
2652	count >= capacity
2653	first == null
2654	f == null
2655	n == null
2656	l == null
2657	p == null
2658	p == null
2659	n == null
2660	offerFirst(e)
2661	offerLast(e)
2662	e == null
2663	e == null
2664	e == null
2665	e == null
2666	e == null
2667	nanos <= 0
2668	e == null
2669	nanos <= 0
2670	x == null
2671	x == null
2672	nanos <= 0
2673	nanos <= 0
2674	x == null
2675	x == null
2676	o == null
2677	o.equals(p.item)
2678	o == null
2679	o.equals(p.item)
2680	c == null
2681	c == this
2682	o == null
2683	o.equals(p.item)
2684	a.length < count
2685	a.length > k
2686	p == null
2687	p == null
2688	item == null
2521	capacity <= 0
2522	e == null
2523	n == capacity
2524	e == null
2525	c + 1 < capacity
2526	c == 0
2527	e == null
2528	nanos <= 0
2529	c + 1 < capacity
2530	c == 0
2531	e == null
2532	count.get() == capacity
2533	count.get() < capacity
2534	c + 1 < capacity
2535	c == 0
2536	c > 1
2537	c == capacity
2538	nanos <= 0
2539	c > 1
2540	c == capacity
2541	count.get() == 0
2542	count.get() > 0
2543	c > 1
2544	c == capacity
2545	count.get() == 0
2546	first == null
2547	last == p
2548	count.getAndDecrement() == capacity
2549	o == null
2550	o.equals(p.item)
2551	o == null
2552	o.equals(p.item)
2553	a.length < size
2554	a.length > k
2555	p == null
2556	p == null
2557	count.getAndSet(0) == capacity
2558	c == null
2559	c == this
2560	i > 0
2561	signalNotFull
2562	item == null
970	rehash
971	value==null
972	e.value==null
973	value.equals(e.value)
974	e == null
975	removeEldestEntry(eldest)
588	f == null
589	l == null
590	pred == null
591	next == null
592	prev == null
593	prev == null
594	next == null
595	f == null
596	l == null
597	f == null
598	l == null
599	o == null
600	x.item == null
601	o.equals(x.item)
602	numNew == 0
603	index == size
604	pred == null
605	succ == null
606	index == size
607	isElementIndex(index)
608	isPositionIndex(index)
609	index < (size >> 1)
610	o == null
611	x.item == null
612	o.equals(x.item)
613	o == null
614	x.item == null
615	o.equals(x.item)
616	o == null
617	x.item == null
618	o.equals(x.item)
619	a.length < size
620	a.length > size
2945	haveData
2945	e == null
2946	(item != null) == isData
2946	item != p
2947	isData == haveData
2948	p.casItem(item, e)
2949	casHead(h, n == null ? q : n)
2949	head == h
2950	(q = h.next) == null
2950	(h = head) == null
2950	q.isMatched()
2951	how != NOW
2952	s == null
2953	pred == null
2954	how != ASYNC
2955	(p = head) == null
2955	p == null
2956	casHead(null, s)
2957	p.cannotPrecede(haveData)
2958	(n = p.next) != null
2959	p.casNext(null, s)
2960	p != t
2961	item != e
2962	s.casItem(e, s)
2962	w.isInterrupted()
2962	nanos <= 0
2962	timed
2963	spins < 0
2964	(spins = spinsFor(pred, s.isData)) > 0
2965	spins > 0
2966	randomYields.nextInt(CHAINED_SPINS) == 0
2967	s.waiter == null
2968	timed
2969	(nanos -= now - lastTime) > 0
2970	pred != null
2970	MP
2971	pred.isData != haveData
2972	pred.isMatched()
2973	pred.waiter == null
2974	p.isMatched()
2975	p.isData
2976	item != null
2976	item != p
2977	item == null
2978	p.isMatched()
2979	p.isData != data
2980	++count == Integer.MAX_VALUE
2981	n != p
2982	pred != s
2982	pred != null
2982	pred.next == s
2983	n == null
2983	pred.casNext(s, n)
2983	n != s
2983	pred.isMatched()
2984	h == s
2984	h == pred
2984	h == null
2985	h.isMatched()
2986	hn == null
2987	casHead(h, hn)
2987	hn != h
2988	pred.next != pred
2988	s.next != s
2989	v < SWEEP_THRESHOLD
2990	casSweepVotes(v, v + 1)
2991	casSweepVotes(v, 0)
2992	s.isMatched()
2993	(n = s.next) == null
2994	s == n
2995	e != null
2996	p.isData
2997	item != p
2997	e.equals(item)
2997	p.tryMatchData()
2997	item != null
2998	item == null
2999	(p = p.next) == pred
3000	xfer(e, true, SYNC, 0) != null
3001	xfer(e, true, TIMED, unit.toNanos(timeout)) == null
3002	Thread.interrupted()
3003	e != null
3004	Thread.interrupted()
3004	e != null
3005	c == null
3006	c == this
3007	c == null
3008	c == this
3009	p.isMatched()
3010	o == null
3011	p.isData
3012	item != null
3012	o.equals(item)
3012	item != p
3013	item == null
3014	item == null
7510	peer == null
7511	peer != null
7512	index < -1
7512	index >= items.size()
7513	item == null
7514	index == -1
7515	peer != null
7516	peer != null
7517	index < 0
7518	peer != null
7519	peer != null
7520	selected[i] == index
7521	alreadySelected
7522	multipleMode
7523	peer != null
7524	isMultipleMode()
7524	getSelectedIndex() == index
7525	selected[i] == index
7526	sel[i] == index
7527	b != multipleMode
7528	peer != null
7529	peer != null
7530	l == null
7531	l == null
7532	l == null
7533	l == null
7534	listenerType == ActionListener.class
7535	listenerType == ItemListener.class
7536	(eventMask & AWTEvent.ACTION_EVENT_MASK) != 0
7536	actionListener != null
7537	(eventMask & AWTEvent.ITEM_EVENT_MASK) != 0
7537	itemListener != null
7538	e instanceof ItemEvent
7539	e instanceof ActionEvent
7540	listener != null
7541	listener != null
7542	peer != null
7543	peer != null
7544	itemListenerK == key
7545	actionListenerK == key
7546	accessibleContext == null
1802	lookup == null
1803	key == null
1804	lookup == null
1805	lookup == null
1806	lookup != null
1807	value == null
1807	key == null
864	language== null
864	variant == null
864	country == null
865	country == null
865	script == null
865	language== null
865	variant == null
866	extensions == null
867	defaultLocale == null
868	defaultDisplayLocale == null
869	defaultFormatLocale == null
870	region != null
871	i >= 0
872	defaultLocale == null
873	category == null
874	newLocale == null
875	sm != null
876	isoCountries == null
877	isoLanguages == null
878	LocaleExtensions.isValidKey(key)
879	localeExtensions == null
880	localeExtensions == null
881	UnicodeLocaleExtension.isKey(key)
882	localeExtensions == null
883	r
883	v
883	e
883	l
883	s
884	r
884	l
884	v
885	r
885	l
885	s
886	r
886	e
886	l
887	s
888	subtag.length() > 0
889	subtag.length() > 0
890	subtag.length() > 0
891	subtag.length() > 0
892	buf.length() > 0
893	exts == null
893	base.getVariant().length() > 0
894	lang.length() == 3
895	language3 == null
896	country3 == null
897	codeLength == 0
898	codeLength == 2
899	table.charAt(index) == c1
899	table.charAt(index + 1) == c2
900	code.length() == 0
901	inLocale == null
902	pool.hasProviders()
903	result == null
904	result != null
905	baseLocale.getVariant().length() == 0
906	scriptName.length() == 0
906	languageName.length() == 0
906	countryName.length() == 0
907	variantNames.length == 0
908	languageName.length() != 0
909	scriptName.length() != 0
910	countryName.length() != 0
911	variantNames.length != 0
912	displayNamePattern != null
913	displayNames.length > 2
914	hc == 0
915	localeExtensions != null
916	this == obj
917	obj instanceof Locale
918	baseLocale.equals(otherBase)
919	localeExtensions == null
920	listPattern == null
920	listCompositionPattern == null
921	i>0
922	stringList.length > 3
923	list.length <= 3
924	extStr.length() > 0
925	language == "he"
926	language == "yi"
927	language == "id"
928	script.length() == 0
928	LocaleUtils.caseIgnoreMatch(language, "ja")
928	LocaleUtils.caseIgnoreMatch(country, "jp")
928	"JP".equals(variant)
929	LocaleUtils.caseIgnoreMatch(country, "th")
929	LocaleUtils.caseIgnoreMatch(language, "th")
929	script.length() == 0
929	"TH".equals(variant)
930	sts.isError()
931	baseloc.getVariant().length() > 0
931	extensions == null
10932	port <= 0
10933	host.length() == 0
10933	host == null
11341	className == null
2062	thread != null
2063	nanos > 0
2064	t == null
2065	nanos > 0
1656	sm != null
1657	manager != null
1658	readPrimordialConfiguration
1659	readPrimordialConfiguration
1660	System.out == null
1661	l == null
1662	javaAwtAccess != null
1662	sm != null
1663	ecx != null
1664	contextsMap == null
1665	context == null
1666	result == null
1667	addLogger(newLogger)
1668	addLogger(sysLogger)
1669	sysLogger.accessCheckedHandlers().length == 0
1669	logger != sysLogger
1670	loggerRefQueue == null
1671	ref == null
1672	name == null
1673	cx.addLocalLogger(logger)
1674	sm == null
1675	sm == null
1676	cname != null
1677	fname == null
1678	fname == null
1679	in != null
1680	logger != null
1681	name.equals("")
1681	name != null
1682	hands == null
1683	Character.isWhitespace(hands.charAt(end))
1684	hands.charAt(end) == ','
1685	word.length() == 0
1686	val == null
1687	val == null
1688	val == null
1689	val.equals("1")
1689	val.equals("true")
1690	val.equals("false")
1690	val.equals("0")
1691	val == null
1692	val != null
1693	val != null
1694	initializedGlobalHandlers
1695	deathImminent
1696	sm != null
1697	key.endsWith(".level")
1698	level == null
1699	l == null
1700	loggingMXBean == null
1731	tid < MIN_SEQUENTIAL_THREAD_ID
1732	id == null
1733	level == null
1734	needToInferCaller
1735	needToInferCaller
1736	parameters == null
1737	parameters[i] == null
1738	major != 1
1739	len == -1
1740	resourceBundleName != null
1741	lookingForLogger
1742	isLoggerImpl
1743	isLoggerImpl
1744	cname.startsWith("java.lang.reflect.")
1744	cname.startsWith("sun.reflect.")
10943	stream == null
10944	sm != null
10945	b == '\n'
10946	len < 0
10947	s == null
10947	s.length() < 1
10948	s.length() < 1
10949	"SILENT".startsWith(s.toUpperCase())
10950	"BRIEF".startsWith(s.toUpperCase())
10951	"VERBOSE".startsWith(s.toUpperCase())
1578	callersClassLoader != null
1579	anonymous
1580	manager == null
1581	LoggerHelper.disableCallerCheck
1581	sm != null
1582	caller.getClassLoader() == null
1583	result.resourceBundleName == null
1584	result.resourceBundleName.equals(resourceBundleName)
1585	record.getLevel().intValue() < levelValue
1585	levelValue == offValue
1586	theFilter != null
1586	theFilter.isLoggable(record)
1587	useParentHdls
1588	ebname != null
1588	ebname.equals(SYSTEM_LOGGER_RB_NAME)
1589	level.intValue() < levelValue
1589	levelValue == offValue
1590	level.intValue() < levelValue
1590	levelValue == offValue
1591	levelValue == offValue
1591	level.intValue() < levelValue
1592	level.intValue() < levelValue
1592	levelValue == offValue
1593	levelValue == offValue
1593	level.intValue() < levelValue
1594	level.intValue() < levelValue
1594	levelValue == offValue
1595	level.intValue() < levelValue
1595	levelValue == offValue
1596	level.intValue() < levelValue
1596	levelValue == offValue
1597	rbname != null
1598	level.intValue() < levelValue
1598	levelValue == offValue
1599	levelValue == offValue
1599	level.intValue() < levelValue
1600	levelValue == offValue
1600	level.intValue() < levelValue
1601	level.intValue() < levelValue
1601	levelValue == offValue
1602	Level.FINER.intValue() < levelValue
1603	Level.FINER.intValue() < levelValue
1604	Level.FINER.intValue() < levelValue
1605	params == null
1606	Level.FINER.intValue() < levelValue
1607	Level.FINER.intValue() < levelValue
1608	Level.FINER.intValue() < levelValue
1608	levelValue == offValue
1609	Level.SEVERE.intValue() < levelValue
1610	Level.WARNING.intValue() < levelValue
1611	Level.INFO.intValue() < levelValue
1612	Level.CONFIG.intValue() < levelValue
1613	Level.FINE.intValue() < levelValue
1614	Level.FINER.intValue() < levelValue
1615	Level.FINEST.intValue() < levelValue
1616	levelValue == offValue
1616	level.intValue() < levelValue
1617	handler == null
1618	name == null
1619	name.equals(catalogName)
1619	currentLocale.equals(catalogLocale)
1619	catalog != null
1620	name.equals(SYSTEM_LOGGER_RB_NAME)
1621	cl == null
1622	useCallersClassLoader
1623	callersClassLoader != null
1623	callersClassLoader != cl
1624	LoggerHelper.allowStackWalkSearch
1625	clz == null
1626	cl2 == null
1627	cl == cl2
1628	name == null
1629	getCallersClassLoader() != null
1629	isSystemLogger
1630	findResourceBundle(name, true) == null
1631	parent == null
1632	manager == null
1633	parent != null
1634	kid == this
1635	parent.kids == null
1636	ref == null
1637	ref == child
1638	levelObject != null
1639	parent != null
1640	levelValue == newLevelValue
1641	kids != null
1642	kid != null
1643	rbn != null
1647	l == null
1648	level == null
1649	loggerName == null
1650	logger == null
1651	levelName != null
1652	level == null
1653	l == null
1654	p == null
1745	name.equals("control")
1746	actions != null
1746	actions.length() > 0
1655	level == null
11391	radix > Character.MAX_RADIX
11391	radix < Character.MIN_RADIX
11392	radix == 10
11393	negative
11394	negative
11395	i == Long.MIN_VALUE
11396	i < 0
11397	i2 == 0
11398	sign != 0
11399	x < p
11400	s == null
11401	radix < Character.MIN_RADIX
11402	radix > Character.MAX_RADIX
11403	len > 0
11404	firstChar < '0'
11405	firstChar == '-'
11406	firstChar != '+'
11407	len == 1
11408	digit < 0
11409	result < multmin
11410	result < limit + digit
11411	l >= -128
11411	l <= 127
11412	nm.length() == 0
11413	firstChar == '-'
11414	firstChar == '+'
11415	nm.startsWith("0x", index)
11415	nm.startsWith("0X", index)
11416	nm.startsWith("#", index)
11417	nm.startsWith("0", index)
11417	nm.length() > 1 + index
11418	nm.startsWith("-", index)
11418	nm.startsWith("+", index)
11419	obj instanceof Long
11420	v != null
11421	i == 0
11422	x == 0
11423	x >>> 16 == 0
11424	x >>> 24 == 0
11425	x >>> 28 == 0
11426	x >>> 30 == 0
11427	i == 0
11428	y != 0
11429	y != 0
11430	y != 0
11431	y != 0
11432	y != 0
12879	capacity < 0
12880	length > remaining()
12881	src == this
12882	n > remaining()
12883	length > remaining()
12884	hb == null
12885	isReadOnly
12886	hb == null
12887	isReadOnly
12888	this == ob
12889	ob instanceof LongBuffer
12890	this.remaining() != that.remaining()
12891	equals(this.get(i), that.get(j))
12892	cmp != 0
8759	srcCM instanceof IndexColorModel
8760	numComponents != srcCM.getNumColorComponents()
8760	numComponents != srcCM.getNumComponents()
8760	numComponents != 1
8761	dst == null
8762	width != dst.getWidth()
8763	height != dst.getHeight()
8764	srcCM.getColorSpace().getType() != dstCM.getColorSpace().getType()
8765	ImagingLib.filter(this, src, dst) == null
8766	srcCM.hasAlpha()
8767	numBands-1 == numComponents
8767	numComponents == 1
8768	dstCM.hasAlpha()
8769	dstNumBands-1 == numComponents
8769	numComponents == 1
8770	needToConvert
8771	dst == null
8772	width != dst.getWidth()
8772	height != dst.getHeight()
8773	numBands != dstLength
8774	numComponents != 1
8774	numComponents != src.getNumBands()
8775	ImagingLib.filter(this, src, dst) != null
8776	ltable instanceof ByteLookupTable
8777	ltable instanceof ShortLookupTable
8778	destCM == null
8779	cm instanceof ComponentColorModel
8780	ltable instanceof ByteLookupTable
8781	db.getDataType() == db.TYPE_USHORT
8782	hasAlpha
8783	trans == cm.BITMASK
8784	ltable instanceof ShortLookupTable
8785	db.getDataType() == db.TYPE_BYTE
8786	hasAlpha
8787	trans == cm.BITMASK
8788	nbits != null
8789	dstPt == null
8790	table.length == 1
8791	index > len
8791	index < 0
8792	table.length == 1
8793	index < 0
8793	index > maxShort
8319	offset < 0
8320	numComponents < 1
16746	mdName == null
11326	sm != null
11327	platformMBeanServer == null
11328	platformMBeanServer.isRegistered(o.getObjectName())
11329	loader != null
11330	connection.isInstanceOf(objName, intfName)
11331	pc == null
11332	pc.isSingleton()
11333	pc == null
11334	pc == null
11335	pc.isSingleton()
11336	pc == null
11372	name.equals("control")
11372	name.equals("monitor")
11373	name.equals("control")
11373	name.equals("monitor")
11374	actions.length() > 0
11374	actions != null
3548	value != null
3549	length > 72
3550	lbuf[--len] != '\n'
3551	len > 0
3551	lbuf[len-1] == '\r'
3552	skipEmptyLines
3552	len == 0
3553	name == null
3554	name == null
3555	fis.peek() == ' '
3556	fis.peek() == ' '
3557	attr == null
3558	toLower(lbuf[2]) == 'm'
3558	toLower(lbuf[3]) == 'e'
3558	toLower(lbuf[1]) == 'a'
3558	lbuf[4] == ':'
3558	lbuf[5] == ' '
3558	toLower(lbuf[0]) == 'n'
3559	o instanceof Manifest
13079	fd == null
13080	address == 0
13080	capacity() == 0
13081	capacity() == 0
13081	address == 0
13082	unused != 0
13083	address != 0
13083	capacity() != 0
10934	obj == null
10935	objBytes == null
10936	obj == this
10937	obj != null
10937	obj instanceof MarshalledObject
10938	objBytes == null
10938	other.objBytes == null
10939	objBytes.length != other.objBytes.length
10940	objBytes[i] != other.objBytes[i]
3608	newPattern == null
3609	first < 0
3610	first < 0
3611	group > groupCount()
3612	first < 0
3613	first < 0
3614	group > groupCount()
3615	first < 0
3616	group > groupCount()
3616	group < 0
3617	groups[group*2+1] == -1
3617	groups[group*2] == -1
3618	name == null
3619	first < 0
3620	parentPattern.namedGroups().containsKey(name)
3621	groups[group*2] == -1
3621	groups[group*2+1] == -1
3622	nextSearchIndex == first
3623	nextSearchIndex < from
3624	nextSearchIndex > to
3625	start < 0
3625	start > limit
3626	s.indexOf('\\') == -1
3626	s.indexOf('$') == -1
3627	c == '$'
3627	c == '\\'
3628	first < 0
3629	nextChar == '\\'
3630	nextChar == '$'
3631	nextChar == '{'
3632	ASCII.isDigit(nextChar)
3632	ASCII.isLower(nextChar)
3632	ASCII.isUpper(nextChar)
3633	gsb.length() == 0
3634	nextChar != '}'
3635	ASCII.isDigit(gname.charAt(0))
3636	parentPattern.namedGroups().containsKey(gname)
3637	refNum < 0
3637	refNum > 9
3638	cursor >= replacement.length()
3639	nextDigit > 9
3639	nextDigit < 0
3640	groupCount() < newRefNum
3641	start(refNum) != -1
3641	end(refNum) != -1
3642	result
3643	replacement == null
3644	find()
3645	start > getTextLength()
3645	start < 0
3646	end > getTextLength()
3646	end < 0
3647	start > end
3648	group() != null
3648	first >= 0
3649	result
3650	result
10996	rnd == null
10997	a != a
10998	a == 0.0f
10998	Float.floatToIntBits(a) == negativeZeroFloatBits
10998	b == 0.0f
10999	a != a
11000	b == 0.0d
11000	Double.doubleToLongBits(a) == negativeZeroDoubleBits
11000	a == 0.0d
11001	a != a
11002	Float.floatToIntBits(b) == negativeZeroFloatBits
11002	a == 0.0f
11002	b == 0.0f
11003	a != a
11004	b == 0.0d
11004	Double.doubleToLongBits(b) == negativeZeroDoubleBits
11004	a == 0.0d
17674	setPrecision < MIN_DIGITS
17675	setRoundingMode == null
17676	val == null
17677	val.startsWith("precision=")
17678	val.startsWith("roundingMode=", fence+1)
17679	setPrecision < MIN_DIGITS
17680	x instanceof MathContext
17681	precision < MIN_DIGITS
17682	roundingMode == null
5027	(cur.getStatus(load, verify) & DONE) == 0
5028	(cur.getStatus(false, true) & ERRORED) != 0
5029	(cur.getStatus(false, true) & ERRORED) != 0
5030	numerrors == 0
5031	(cur.getStatus(false, false) & ERRORED) != 0
5032	(status & LOADING) == 0
5033	ms == 0
5034	timeout <= 0
5035	cur.getID() == id
5035	(cur.getStatus(load, verify) & DONE) == 0
5036	(cur.getStatus(false, true) & ERRORED) != 0
5036	cur.getID() == id
5037	cur.getID() == id
5037	(cur.getStatus(false, true) & ERRORED) != 0
5038	numerrors == 0
5039	cur.getID() == id
5039	(cur.getStatus(false, false) & ERRORED) != 0
5040	(status & LOADING) == 0
5041	ms == 0
5042	timeout <= 0
5043	cur.getID() == id
5044	cur.getMedia() == image
5045	prev == null
5046	cur.getMedia() == image
5046	cur.getID() == id
5047	prev == null
5048	((ImageMediaEntry) cur).matches(image, width, height)
5048	cur instanceof ImageMediaEntry
5048	cur.getID() == id
5049	prev == null
5050	cur.ID > me.ID
5051	prev == null
5052	(status & LOADSTARTED) == 0
5052	doLoad
5053	doVerify
5054	s == 0
5055	(status & (ERRORED | COMPLETE)) != 0
5056	s != status
5057	tracker.target.prepareImage(image, width, height, this)
5058	(infoflags & ERROR) != 0
5059	(infoflags & ABORT) != 0
5060	(infoflags & (ALLBITS | FRAMEBITS)) != 0
5061	cancelled
5062	s != status
5062	s != 0
11786	name == null
11787	name == null
11788	isInvocable()
11789	isGetter()
11790	isSetter()
11791	type == null
11792	type == null
11793	isInvocable()
11794	type instanceof MethodType
11795	type instanceof String
11796	type instanceof Object[]
11797	getReferenceKind() == REF_newInvokeSpecial
11797	isConstructor()
11798	isStatic()
11799	type == null
11800	type == null
11801	isInvocable()
11802	type instanceof Class<?>
11803	type instanceof String
11804	type == null
11805	type == null
11806	type instanceof String
11807	isInvocable()
11808	refKind == REF_NONE
11809	isField()
11810	isConstructor()
11811	isMethod()
11812	clazz.isInterface()
11813	clazz == Object.class
11814	mtype.returnType() == String.class
11814	name.equals("toString")
11814	mtype.parameterCount() == 0
11815	name.equals("hashCode")
11815	mtype.returnType() == int.class
11815	mtype.parameterCount() == 0
11816	mtype.parameterCount() == 1
11816	mtype.parameterType(0) == Object.class
11816	mtype.returnType() == boolean.class
11816	name.equals("equals")
11817	refKind == originalRefKind
11818	MethodHandleNatives.refKindIsField(refKind)
11819	MethodHandleNatives.refKindDoesDispatch(refKind)
11820	clazz == MethodHandle.class
11820	testFlags(bits | negs, bits)
11821	isResolved()
11822	type instanceof Object[]
11823	this.type == null
11824	wantSpecial
11825	getReferenceKind() == REF_invokeVirtual
11826	this.type == null
11827	makeSetter
11828	isResolved()
11829	isType()
11830	this == that
11831	that == null
11832	isResolved
11833	isInvocable()
11834	this.type instanceof MethodType
11835	type.erase() == type
11836	VerifyAccess.isTypeVisible(type, clazz)
11837	this.type instanceof Class<?>
11838	VerifyAccess.isTypeVisible(type, clazz)
11839	isType()
11840	getDeclaringClass() != null
11841	isInvocable()
11842	refKind != REF_NONE
11843	obj instanceof Class<?>
11844	from != null
11845	isResolved()
11846	isConstructor()
11847	isMethod()
11848	resolution instanceof NoSuchFieldError
11848	isResolved()
11848	resolution instanceof NoSuchMethodError
11849	isConstructor()
11850	isMethod()
11851	resolution instanceof Throwable
1701	size <= 0
1702	pushLevel == null
1702	target == null
1703	size <= 0
1704	isLoggable(record)
1705	count < buffer.length
1706	record.getLevel().intValue() >= pushLevel.intValue()
1707	newLevel == null
9146	props == null
9147	theConsumers.contains(ic)
9148	isConsumer(ic)
9149	isConsumer(ic)
9149	animating
9150	isConsumer(ic)
9151	animating
9152	isConsumer(ic)
9153	this.fullbuffers == fullbuffers
9154	animating
9155	animating
9156	fullbuffers
9157	x < 0
9158	x + w > width
9159	y < 0
9160	y + h > height
9161	h <= 0
9161	framenotify
9161	w <= 0
9162	w > 0
9162	h > 0
9163	isConsumer(ic)
9163	framenotify
9164	isConsumer(ic)
9165	isConsumer(ic)
9166	isConsumer(ic)
9167	isConsumer(ic)
9168	isConsumer(ic)
9169	pixels instanceof byte[]
11368	poolName == null
11369	usage == null
11370	cd == null
11371	cd instanceof MemoryNotifInfoCompositeData
11342	init < -1
11343	max < -1
11344	used < 0
11345	committed < 0
11346	used > committed
11347	max >= 0
11347	committed > max
11348	cd == null
11349	cd instanceof MemoryUsageCompositeData
5015	peer == null
5016	mi.parent != null
5017	peer != null
5018	index < 0
5019	index < 0
5020	peer != null
5021	index >= 0
5022	mi.handleShortcut(e)
5023	mi != null
5024	mi instanceof Menu
5025	ms != null
5026	accessibleContext == null
6404	peer == null
6405	helpMenu == m
6406	helpMenu != null
6407	m.parent != this
6408	m != null
6409	peer != null
6410	m.peer == null
6411	m.parent != null
6412	peer != null
6413	m.peer == null
6414	peer != null
6415	index >= 0
6416	mi != null
6417	id != KeyEvent.KEY_RELEASED
6417	id != KeyEvent.KEY_PRESSED
6418	(e.getModifiers() & accelKey) == 0
6419	m.handleShortcut(e)
6420	accessibleContext == null
9440	acc == null
9441	nameExplicitlySet
9441	name == null
9442	name == null
9442	nameExplicitlySet
9443	font != null
9444	parent != null
9445	font != null
9446	parent != null
9447	parent instanceof Component
9448	parent instanceof MenuComponent
9449	peer != null
9450	p != null
9451	parent != null
9452	((MenuComponent)parent).newEventsOnly
9452	parent instanceof MenuComponent
9452	newEventsOnly
9452	parent != null
9453	eventEnabled(e)
9454	parent != null
9454	e instanceof ActionEvent
9455	olde != null
9456	localParent instanceof MenuComponent
9494	peer == null
9495	peer != null
9496	peer != null
9497	b
9498	peer != null
9499	peer != null
9500	peer != null
9501	s.equals(shortcut)
9502	peer != null
9503	isEnabled()
9504	container instanceof Menu
9505	menu.isEnabled()
9506	s.equals(shortcut)
9506	isItemEnabled()
9506	sE.equals(shortcut)
9507	e.getID() == KeyEvent.KEY_PRESSED
9508	l == null
9509	l == null
9510	listenerType == ActionListener.class
9511	e instanceof ActionEvent
9512	e.id == ActionEvent.ACTION_PERFORMED
9513	actionListener != null
9513	(eventMask & AWTEvent.ACTION_EVENT_MASK) != 0
9514	listener != null
9515	shortcut != null
9516	actionListenerK == key
9517	accessibleContext == null
9170	obj instanceof MenuShortcut
9171	GraphicsEnvironment.isHeadless()
9172	usesShiftModifier()
9173	usesShiftModifier()
16294	entry.extension.length() != 0
16295	extList == null
16296	extList != null
16297	extList != null
16298	entry.extension.length() == 0
16299	entry != null
16300	pattern == null
16301	lastEntry != null
16301	newEntry.extension.equals(lastEntry.extension)
16301	newEntry.chars.equals(lastEntry.chars)
16302	newEntry.strength != Collator.IDENTICAL
16302	newEntry.strength != PatternEntry.RESET
16303	newEntry.strength != PatternEntry.RESET
16304	newEntry.chars.length() == 1
16305	(bitClump & setBit) != 0
16305	bitClump != 0
16306	oldIndex != -1
16307	excess.length() != 0
16308	lastIndex != patterns.size()
16309	lastIndex == patterns.size()
16310	changeLastEntry
16311	entry == null
16312	entry.strength != PatternEntry.RESET
16313	entry.chars.length() == 1
16314	(statusArray[index] & (BITARRAYMASK << (entry.chars.charAt(0) & BYTEMASK))) != 0
16315	oldIndex == -1
16316	e.chars.regionMatches(0,entry.chars,0, e.chars.length())
16317	i == -1
16808	objs[0] instanceof MessageDigest
16809	provider == null
16809	provider.length() == 0
16810	objs[0] instanceof MessageDigest
16811	provider == null
16812	objs[0] instanceof MessageDigest
16813	input == null
16814	input.length - offset < len
16815	input == null
16816	buf == null
16817	buf.length - offset < len
16818	digesta.length != digestb.length
16819	digestLen == 0
16820	this instanceof Cloneable
16991	input.hasRemaining() == false
16992	input.hasArray()
16993	tempArray == null
16993	n > tempArray.length
16994	len < digest.length
16995	buf.length - offset < digest.length
16996	this instanceof Cloneable
16428	part == SEG_RAW
16429	ch == '\''
16430	pattern.charAt(i+1) == '\''
16430	i + 1 < pattern.length()
16431	inQuote
16431	ch == '{'
16432	segments[SEG_INDEX] == null
16433	inQuote
16434	ch == '\''
16435	part < SEG_MODIFIER
16436	segments[++part] == null
16437	braceStack == 0
16438	part != SEG_TYPE
16438	segments[SEG_TYPE].length() > 0
16439	braceStack == 0
16439	part != 0
16440	fmt == null
16441	fmt instanceof NumberFormat
16442	fmt.equals(NumberFormat.getInstance(locale))
16443	fmt.equals(NumberFormat.getCurrencyInstance(locale))
16444	fmt.equals(NumberFormat.getPercentInstance(locale))
16445	fmt.equals(NumberFormat.getIntegerInstance(locale))
16446	fmt instanceof DecimalFormat
16447	fmt instanceof ChoiceFormat
16448	fmt instanceof DateFormat
16449	fmt.equals(df)
16450	fmt.equals(df)
16451	index >= DATE_TIME_MODIFIERS.length
16452	fmt instanceof SimpleDateFormat
16453	index != MODIFIER_DEFAULT
16454	j < newFormats.length
16455	runsToCopy > maxOffset + 1
16456	argumentNumbers[j] == argumentIndex
16457	argumentNumbers[i] > maximumArgumentNumber
16458	arguments == null
16459	iterators.size() == 0
16460	source == null
16461	argumentNumbers[i] > maximumArgumentNumber
16462	len == 0
16462	pattern.regionMatches(patternOffset, source, sourceOffset, len)
16463	formats[i] == null
16464	patternOffset >= tempLength
16465	next < 0
16466	strValue.equals("{"+argumentNumbers[i]+"}")
16467	tempStatus.index == sourceOffset
16468	len == 0
16468	pattern.regionMatches(patternOffset, source, sourceOffset, len)
16469	pos.index == 0
16470	formats[i] != null
16471	this == obj
16472	obj == null
16472	getClass() != obj.getClass()
16473	arguments == null
16473	argumentNumber >= arguments.length
16474	obj == null
16475	formats[i] != null
16476	subFormatter instanceof ChoiceFormat
16477	arg.indexOf('{') >= 0
16478	obj instanceof Number
16479	obj instanceof Date
16480	obj instanceof String
16481	arg == null
16482	characterIterators != null
16483	last != result.length()
16484	subFormatter != null
16485	last != result.length()
16486	arg != null
16486	arg.length() > 0
16487	subFormatter != null
16488	i == 0
16488	Field.ARGUMENT.equals( fp.getFieldAttribute())
16488	fp != null
16489	last != result.length()
16489	characterIterators != null
16490	iterator.first() != CharacterIterator.DONE
16491	argumentNumber < 0
16492	offsetNumber >= formats.length
16493	segments[SEG_TYPE].length() != 0
16494	mod < DATE_TIME_MODIFIER_KEYWORDS.length
16494	mod >= 0
16495	type == TYPE_DATE
16496	s.equals(list[i])
16497	ls != s
16498	ls.equals(list[i])
16499	ch == '{'
16500	quoted
16501	ch == '\''
16502	quoted
16503	quoted
16504	isValid
16505	offsets[i] < 0
16505	offsets[i] > lastOffset
16506	isValid
10417	type == null
10418	Enum.class.isAssignableFrom(type)
10419	null != XMLEncoder.primitiveTypeFor(type)
10420	type.isArray()
10421	arrayPersistenceDelegate == null
10422	java.lang.reflect.Proxy.isProxyClass(type)
10423	proxyPersistenceDelegate == null
10424	pd == null
10425	pd != null
10426	properties != null
10427	length < value.length
10427	isValid(constructor, value)
10427	value != null
10428	names.length != parameters.length
10429	name == null
10430	field == null
12165	genericInfo == null
12166	getGenericSignature() != null
12167	getGenericSignature() != null
12168	getGenericSignature() != null
12169	getGenericSignature() != null
12169	(result = getGenericInfo().getExceptionTypes()).length > 0
12170	obj != null
12170	obj instanceof Method
12171	getName() == other.getName()
12171	getDeclaringClass() == other.getDeclaringClass()
12172	returnType.equals(other.getReturnType())
12173	params1.length == params2.length
12174	params1[i] != params2[i]
12175	mod != 0
12176	j < (params.length - 1)
12177	exceptions.length > 0
12178	k < (exceptions.length - 1)
12179	mod != 0
12180	typeparms.length > 0
12181	first
12182	j == params.length - 1
12182	isVarArgs()
12183	j < (params.length - 1)
12184	exceptions.length > 0
12185	k < (exceptions.length - 1)
12186	override
12187	Reflection.quickCheckMemberAccess(clazz, modifiers)
12188	ma == null
12189	root != null
12190	tmp != null
12191	root != null
12192	annotationClass == null
12193	declaredAnnotations == null
12194	annotationDefault == null
12195	result instanceof sun.reflect.annotation.ExceptionProxy
12196	parameterAnnotations == null
12197	result.length != numParameters
10373	method == null
10374	name != null
10374	cls != null
10375	params == null
10376	method != null
10377	method == null
10378	getClass0() == null
10379	param == null
10380	cls == null
10381	y.params != null
10382	y.paramNames != null
10383	y.parameterDescriptors != null
10384	old.parameterDescriptors != null
10385	this.parameterDescriptors != null
11852	type.parameterCount() != argc
11852	isVarargsCollector()
11853	type.isConvertibleTo(newType)
11854	arrayLength < 0
11854	nargs < arrayLength
11855	arrayType != Object[].class
11855	arrayLength != 0
11856	MethodType.canConvert(arrayElement, type().parameterType(i))
11857	sawProblem
11858	arrayElement == null
11859	(arrayLength & 0x7F) != arrayLength
11860	(arrayLength & 0xFF) != arrayLength
11861	arrayElement == double.class
11861	arrayElement == long.class
11862	arrayType != type().parameterType(collectArgPos)
11863	nargs != 0
11864	lastParam == arrayType
11865	lastParam.isAssignableFrom(arrayType)
11866	lastMatch
11866	isVarargsCollector()
11867	(ptype = type.parameterType(0)).isPrimitive()
11867	type.parameterCount() == 0
11868	DEBUG_METHOD_HANDLE_NAMES
11869	member.isVarargs()
11870	argc != 0
11871	arrayType.isArray()
11872	reinvoker != null
11873	form == newForm
11927	arrayClass.isArray()
11928	ArrayAccessor.needCast(arrayClass)
11929	srcType == dstType
11930	VerifyType.isNullConversion(src, dst)
11930	dst.isAssignableFrom(src)
11930	dst.isInterface()
11930	level <= 1
11931	needConv[i]
11932	src.isPrimitive()
11933	dst.isPrimitive()
11934	dst == w.wrapperType()
11935	dst.isPrimitive()
11936	VerifyType.isNullConversion(src, w.wrapperType())
11936	level == 0
11937	Wrapper.isWrapperType(src)
11937	src == Object.class
11938	RETURN_CONV < 0
11939	haveReturn == void.class
11940	type.parameterType(last) != arrayType
11941	arg == null
11942	i == spreadArgPos
11943	i < indexes.length
11944	av == null
11945	n == 0
11946	av instanceof Object[]
11947	len == n
11948	len == n
11949	retainOriginalArgs
11950	collectValType != void.class
11951	retainOriginalArgs
11952	SELECT_ALTERNATIVE != null
11953	nargs < GuardWithCatch.INVOKES.length
11954	gtarget == null
11954	gcatcher == null
11955	gcatcher == null
11955	gtarget == null
11956	arity > 1
11957	mh != null
11958	mh != null
11614	box[0] == null
11615	jval == vmval
11616	name.equals("CONV_OP_LIMIT")
11617	TRACE_METHOD_LINKAGE
11618	refKind == REF_invokeVirtual
11618	defc == MethodHandle.class
11619	ex instanceof LinkageError
11620	type instanceof MethodType
11621	mem.isMethod()
11622	defc == java.lang.reflect.Constructor.class
11623	defc == java.lang.Class.class
11624	defc == java.util.concurrent.atomic.AtomicIntegerFieldUpdater.class
11625	defc == java.util.concurrent.atomic.AtomicLongFieldUpdater.class
11626	defc == java.util.concurrent.atomic.AtomicReferenceFieldUpdater.class
11627	defc == java.lang.Runtime.class
11628	defc == java.lang.System.class
11629	defc == sun.reflect.Reflection.class
11630	defc == java.lang.System.class
11631	symbolicRefClass == definingClass
11632	symbolicRef.isPrivate()
11632	symbolicRef.isStatic()
11875	Modifier.isPublic(intfc.getModifiers())
11875	intfc.isInterface()
11876	System.getSecurityManager() != null
11877	proxyLoader == null
11878	methods == null
11879	System.getSecurityManager() != null
11880	hostClass == null
11880	hostClass.getClassLoader() == null
11881	target.isVarargsCollector()
11882	x != null
11883	isObjectMethod(m)
11884	Modifier.isAbstract(m.getModifiers())
11885	uniqueName == null
11886	uniqueName.equals(mname)
11887	uniqueName == null
11676	type == null
11677	target != null
11678	name == null
11679	target == null
11680	paren >= 0
11681	obj != null
11682	obj != null
11682	obj2 != null
11888	leadingArgCount < 0
11888	leadingArgCount > type.parameterCount()
11889	target.type().isCastableTo(newType)
11890	newType.returnType() != oldType.returnType()
11891	reorder.length == oldType.parameterCount()
11892	i < 0
11892	i >= limit
11893	src != dst
11894	bad
11895	type.isPrimitive()
11896	type == void.class
11897	type == void.class
11898	type == Object.class
11899	type.isPrimitive()
11900	inargs < 0
11901	pos < 0
11901	pos > inargs
11902	ptype.isPrimitive()
11903	pos == 0
11904	dropped == 0
11905	pos >= inargs
11905	pos < 0
11906	ptypes.size() != inargs
11907	pos + filters.length > maxPos
11908	filter == null
11909	filterType.parameterCount() != 1
11909	filterType.returnType() != targetType.parameterType(pos)
11910	filterType.returnType() != void.class
11910	filterType.returnType() != targetType.parameterType(pos)
11911	filterValues == 0 ? (rtype != void.class) : (rtype != filterType.parameterType(0))
11912	ok
11912	combinerType.parameterList() .equals(targetType.parameterList().subList(afterInsertPos, afterInsertPos + foldArgs))
11913	foldVals != 0
11913	combinerType.returnType().equals(targetType.parameterType(0))
11913	ok
11914	ok
11915	ttype.equals(ftype)
11916	gtype.returnType() != boolean.class
11917	targs.equals(gargs)
11918	gpc >= tpc
11918	targs.subList(0, gpc).equals(gargs)
11919	htype.parameterType(0).isAssignableFrom(exType)
11919	htype.parameterCount() < 1
11920	htype.returnType() != ttype.returnType()
11921	targs.equals(hargs)
11922	targs.subList(0, hpc).equals(hargs)
11922	hpc >= tpc
11923	Throwable.class.isAssignableFrom(exType)
10213	method == null
10214	this.methodRef == null
10215	method == null
10216	method == null
10217	type != null
10218	type.equals(method.getDeclaringClass())
10219	method.toGenericString().equals(signature)
11537	ptype == void.class
11538	ptype == long.class
11538	ptype == double.class
11539	(count & MAX_JVM_ARITY) != count
11540	num instanceof Integer
11541	ptypes.length == 0
11542	mt0 != null
11543	trusted
11544	ootIndex < objectOnlyTypes.length
11545	mt != null
11546	ivarargs != 0
11547	ootIndex < objectOnlyTypes.length
11548	parameterType(num) == nptype
11549	num < 0
11549	num > len
11550	ilen == 0
11551	start == end
11552	end <= len
11552	start <= end
11552	0 <= start
11553	ilen == 0
11554	end <= len
11554	0 <= start
11554	start <= end
11555	start == end
11556	start == 0
11557	end == len
11558	end == len
11559	returnType() == nrtype
11560	wt == null
11561	uwt == null
11562	uwt == null
11563	i > 0
11564	VerifyType.isNullConversion(returnType(), newType.returnType())
11565	argc != newType.parameterCount()
11566	VerifyType.isNullConversion(newType.parameterType(i), parameterType(i))
11567	argc != newType.parameterCount()
11568	canConvert(returnType(), newType.returnType())
11569	argc != newType.parameterCount()
11570	canConvert(newType.parameterType(i), parameterType(i))
11571	dst == Object.class
11571	src == dst
11572	src.isPrimitive()
11573	src == void.class
11574	dst.isPrimitive()
11575	dst.isPrimitive()
11576	dst == void.class
11577	src.isAssignableFrom(dw.wrapperType())
11578	Wrapper.isWrapperType(src)
11578	dw.isConvertibleFrom(Wrapper.forWrapperType(src))
11579	inv != null
11580	num > ptypes.length
11580	num < 0
11581	descriptor.indexOf(')') < 0
11581	descriptor.indexOf('.') >= 0
11581	descriptor.startsWith("(")
11582	invoker != null
11583	pt != Object.class
11584	w.isDoubleWord()
11585	w.isSubwordOrInt()
11585	pt != int.class
11586	bpts == epts
11587	rt != Object.class
11588	w.isDoubleWord()
11589	w.isSubwordOrInt()
11589	rt != int.class
11590	rt == void.class
11591	epts == bpts
11591	bt == rt
11592	lac != 0
11593	w.isDoubleWord()
11594	slotToArgTab == null
11595	pslotCount >= 256
11596	basicType == erasedType
11597	primCounts == 0
11598	primitiveParameterCount() != 0
11599	erased == null
11600	rtc == null
11600	ptc == null
11601	rtc == null
11602	ptc == null
11603	t == Object.class
11604	t.isPrimitive()
11605	ct != t
11606	t == void.class
11607	t == int.class
11607	t == long.class
11608	t == double.class
11609	t == long.class
11610	t == long.class
11610	t == int.class
11610	t == double.class
11610	t == float.class
11611	c == void.class
11612	c != null
11613	cs == null
9866	isValidToken(primary)
9867	isValidToken(sub)
9868	thatObject instanceof MimeType
9869	slashIndex < 0
9869	semIndex < 0
9870	slashIndex < 0
9870	semIndex >= 0
9871	semIndex < 0
9871	slashIndex >= 0
9872	slashIndex < semIndex
9873	isValidToken(primaryType)
9874	isValidToken(subType)
9875	type == null
9876	rawdata == null
9877	s.length() <= 65535
9878	s == null
9878	s.length() == 0
9879	len > 0
9880	isTokenChar(c)
9758	thatObject instanceof MimeTypeParameterList
9759	this.size() != that.size()
9760	thisValue == null
9760	thatValue == null
9761	thisValue != thatValue
9762	thisValue.equals(thatValue)
9763	length > 0
9764	currentIndex < length
9765	currentIndex < length
9766	currentIndex < length
9766	rawdata.charAt(currentIndex) == '='
9767	currentIndex < length
9768	currentChar == '"'
9769	currentIndex < length
9770	currentChar == '\\'
9771	currentChar == '"'
9772	currentChar == '"'
9773	isTokenChar(currentChar)
9774	isTokenChar(currentChar)
9775	currentIndex < length
9776	currentIndex < length
9777	i < length
9778	needsQuotes
9779	c == '\\'
9779	c == '"'
9780	escaped
9780	currentChar != '\\'
9781	escaped
1414	s == null
4547	s == null
7693	modalDialog.isVisible()
7693	disabled
7694	eventID <= MouseEvent.MOUSE_LAST
7694	eventID >= ActionEvent.ACTION_FIRST
7694	eventID >= MouseEvent.MOUSE_FIRST
7694	eventID == WindowEvent.WINDOW_CLOSING
7694	eventID <= ActionEvent.ACTION_LAST
7695	o instanceof sun.awt.ModalExclude
7696	o instanceof Component
7697	c != null
7698	c == anotherDialog
7699	c == modalDialog
7700	blocker == anotherDialog
7701	blocker == modalDialog
12120	(mod & PUBLIC) != 0
12121	(mod & PROTECTED) != 0
12122	(mod & PRIVATE) != 0
12123	(mod & ABSTRACT) != 0
12124	(mod & STATIC) != 0
12125	(mod & FINAL) != 0
12126	(mod & TRANSIENT) != 0
12127	(mod & VOLATILE) != 0
12128	(mod & SYNCHRONIZED) != 0
12129	(mod & NATIVE) != 0
12130	(mod & STRICT) != 0
12131	(mod & INTERFACE) != 0
12132	(len = sb.length()) > 0
11337	stackDepth >= 0
11337	stackFrame == null
11338	stackFrame != null
11338	stackDepth < 0
11339	cd == null
11340	cd instanceof MonitorInfoCompositeData
9638	shouldExcludeButtonFromExtModifiers
9639	button < NOBUTTON
9640	button > BUTTON3
9641	Toolkit.getDefaultToolkit().areExtraMouseButtonsEnabled()
9642	button > cachedNumberOfButtons
9643	getModifiersEx() != 0
9644	id == MouseEvent.MOUSE_RELEASED
9644	id == MouseEvent.MOUSE_CLICKED
9645	getModifiers() != 0
9645	getModifiersEx() == 0
9646	button != NOBUTTON
9646	button <= BUTTON3
9646	getModifiers() == 0
9646	getModifiersEx() != 0
9647	(modifiers & InputEvent.ALT_MASK) != 0
9648	(modifiers & InputEvent.META_MASK) != 0
9649	(modifiers & InputEvent.CTRL_MASK) != 0
9650	(modifiers & InputEvent.SHIFT_MASK) != 0
9651	(modifiers & InputEvent.ALT_GRAPH_MASK) != 0
9652	(modifiers & InputEvent.BUTTON1_MASK) != 0
9653	(modifiers & InputEvent.BUTTON2_MASK) != 0
9654	(modifiers & InputEvent.BUTTON3_MASK) != 0
9655	buf.indexOf(Toolkit.getProperty("AWT.button"+i, "Button"+i)) == -1
9655	(modifiers & mask) != 0
9656	buf.length() > 0
9657	id != MOUSE_DRAGGED
9657	id != MOUSE_MOVED
9658	getModifiers() != 0
9659	getModifiersEx() != 0
9660	(modifiers & BUTTON1_MASK) != 0
9661	(modifiers & BUTTON2_MASK) != 0
9662	(modifiers & BUTTON3_MASK) != 0
9663	id == MOUSE_RELEASED
9663	id == MOUSE_PRESSED
9663	id == MOUSE_CLICKED
9664	(modifiers & BUTTON1_MASK) != 0
9665	id != MOUSE_PRESSED
9666	(modifiers & BUTTON2_MASK) != 0
9667	id != MOUSE_PRESSED
9668	(modifiers & BUTTON3_MASK) != 0
9669	id != MOUSE_PRESSED
9670	(modifiers & InputEvent.ALT_MASK) != 0
9671	(modifiers & InputEvent.META_MASK) != 0
9672	(modifiers & InputEvent.SHIFT_MASK) != 0
9673	(modifiers & InputEvent.CTRL_MASK) != 0
9674	(modifiers & InputEvent.ALT_GRAPH_MASK) != 0
9675	id == MOUSE_PRESSED
9675	id == MOUSE_CLICKED
9675	id == MOUSE_RELEASED
9676	(modifiers & BUTTON1_DOWN_MASK) != 0
9677	(modifiers & BUTTON2_DOWN_MASK) != 0
9678	(modifiers & BUTTON3_DOWN_MASK) != 0
9679	(modifiers & ALT_DOWN_MASK) != 0
9680	(modifiers & META_DOWN_MASK) != 0
9681	(modifiers & SHIFT_DOWN_MASK) != 0
9682	(modifiers & CTRL_DOWN_MASK) != 0
9683	(modifiers & ALT_GRAPH_DOWN_MASK) != 0
9684	getModifiers() != 0
9684	getModifiersEx() == 0
6243	GraphicsEnvironment.isHeadless()
6244	security != null
6245	areScreenDevicesIndependent(gds)
6246	bounds.contains(point)
6247	bounds.y != 0
6247	bounds.x != 0
6248	GraphicsEnvironment.isHeadless()
6249	prop instanceof Integer
9627	getScrollType() == WHEEL_UNIT_SCROLL
9628	getScrollType() == WHEEL_BLOCK_SCROLL
8514	dataType != DataBuffer.TYPE_BYTE
8514	dataType != DataBuffer.TYPE_INT
8514	dataType != DataBuffer.TYPE_USHORT
8515	dataType != DataBuffer.TYPE_BYTE
8515	dataType != DataBuffer.TYPE_USHORT
8515	dataType != DataBuffer.TYPE_INT
8516	pixelsPerDataElement*numberOfBits != dataElementSize
8517	pixelBitStride > 16
8518	pixelBitStride > 8
8519	bands != null
8520	bands.length != 1
8521	y >= height
8521	y < 0
8521	x < 0
8521	x >= width
8521	b != 0
8522	x >= width
8522	b != 0
8522	y < 0
8522	y >= height
8522	x < 0
8523	x >= width
8523	x < 0
8523	y < 0
8523	y >= height
8524	obj == null
8525	obj == null
8526	obj == null
8527	x < 0
8527	y >= height
8527	y < 0
8527	x >= width
8528	iArray != null
8529	x < 0
8529	y >= height
8529	y < 0
8529	x >= width
8530	x < 0
8530	y < 0
8530	y >= height
8530	x >= width
8531	o == null
8531	o instanceof MultiPixelPackedSampleModel
15325	bindaddr != null
15326	isClosed()
15327	ttl < 0
15327	ttl > 255
15328	isClosed()
15329	isClosed()
15330	isClosed()
15331	isClosed()
15332	security != null
15333	mcastaddr.isMulticastAddress()
15334	interfaceSet
15334	defaultInterface != null
15335	isClosed()
15336	security != null
15337	mcastaddr.isMulticastAddress()
15338	isClosed()
15339	mcastaddr == null
15339	mcastaddr instanceof InetSocketAddress
15340	oldImpl
15341	security != null
15342	((InetSocketAddress)mcastaddr).getAddress().isMulticastAddress()
15343	isClosed()
15344	mcastaddr == null
15344	mcastaddr instanceof InetSocketAddress
15345	oldImpl
15346	security != null
15347	((InetSocketAddress)mcastaddr).getAddress().isMulticastAddress()
15348	isClosed()
15349	isClosed()
15350	infAddress == null
15351	ia.equals(infAddress)
15352	addr.equals(infAddress)
15353	ni.getIndex() == 0
15353	ni.getIndex() == -1
15354	isClosed()
15355	connectState == ST_NOT_CONNECTED
15356	security != null
15357	p.getAddress().isMulticastAddress()
15358	packetAddress == null
15359	packetAddress.equals(connectedAddress)
15359	p.getPort() != connectedPort
15360	ttl != dttl
15361	ttl != dttl
8039	fractions == null
8040	colors == null
8041	cycleMethod == null
8042	colorSpace == null
8043	gradientTransform == null
8044	fractions.length != colors.length
8045	colors.length < 2
8046	currentFraction < 0f
8046	currentFraction > 1f
8047	currentFraction <= previousFraction
8048	fractions[0] != 0f
8049	fractions[fractions.length-1] != 1f
8050	fixFirst
8051	fixLast
6205	deviceBounds == null
6206	userBounds == null
6207	t == null
6208	hints == null
6209	gradient == null
6209	gradients == null
6210	isSimpleLookup
6211	colorSpace == ColorSpaceType.LINEAR_RGB
6212	estimatedSize > MAX_GRADIENT_ARRAY_SIZE
6213	(transparencyTest >>> 24) == 0xff
6214	colorSpace == ColorSpaceType.LINEAR_RGB
6215	colorSpace == ColorSpaceType.LINEAR_RGB
6216	cycleMethod == CycleMethod.NO_CYCLE
6217	position > 1
6218	position < 0
6219	cycleMethod == CycleMethod.REPEAT
6220	position < 0
6221	position < 0
6222	(part & 1) == 1
6223	isSimpleLookup
6224	position < fractions[i+1]
6225	input <= 0.04045f
6226	input <= 0.0031308
6227	raster.getHeight() < h
6227	raster.getWidth() < w
6227	raster == null
6228	cm == cachedModel
6229	cached != null
6230	ras.getWidth() >= w
6230	ras != null
6230	ras.getHeight() >= h
6231	cached != null
6232	cras != null
6233	cw >= iw
6233	ch >= ih
6234	cw * ch >= iw * ih
6235	saved != null
17683	offset > 0
17683	value.length != intLen
17684	intLen == 0
17685	intLen == 0
17685	sign == 0
17686	sign == 0
17686	intLen == 0
17687	len > 2
17687	d < 0
17687	len == 2
17688	intLen < blen
17689	intLen > blen
17690	b1 < b2
17691	b1 > b2
17692	len <= 0
17693	len > blen
17694	len < blen - 1
17695	len != blen
17696	bval[bstart] == 1
17697	v != hb
17698	intLen == 0
17699	b==0
17700	intLen == 0
17701	value[index] != 0
17702	value.length < len
17703	value.length < len
17704	value.length < len
17705	intLen + offset > value.length
17706	intLen ==0
17707	intLen == 0
17708	nBits == 0
17709	nBits >= bitsInHighWord
17710	intLen == 0
17711	n <= (32-bitsInHighWord)
17712	nBits <= (32-bitsInHighWord)
17713	value.length < newLen
17714	value.length - offset >= newLen
17715	nBits == 0
17716	nBits <= (32-bitsInHighWord)
17717	carry == 0
17717	result == value
17717	rstart == (x + offset)
17718	carry > 0
17719	result.length < resultLen
17720	sign == 0
17721	sign < 0
17722	result.length < resultLen
17723	sign ==0
17724	sign < 0
17725	z.value.length < newLen
17726	y == 1
17727	y == 0
17728	carry == 0
17729	intLen == 1
17730	quotient.value.length < intLen
17731	remLong < divisorLong
17732	dividendEstimate >= 0
17733	shift > 0
17734	b.intLen == 0
17735	intLen == 0
17736	cmp < 0
17737	cmp == 0
17738	b.intLen == 1
17739	r == 0
17740	v == 0
17741	intLen == 0
17742	v < 0
17743	d == 0
17744	quotient.value.length < limit
17745	shift > 0
17746	rem.intLen == nlen
17747	nh == dh
17748	nChunk >= 0
17749	qhat == 0
17750	skipCorrection
17751	unsignedLongCompare(estProduct, rs)
17752	(qrem & LONG_MASK) >= dhLong
17753	unsignedLongCompare(estProduct, rs)
17754	borrow + 0x80000000 > nh2
17755	shift > 0
17756	dLong == 1
17757	Math.abs(a.intLen - b.intLen) < 2
17758	k != 0
17759	tsign > 0
17760	u.intLen < 2
17760	v.intLen < 2
17761	k > 0
17762	(tsign = u.difference(v)) == 0
17763	k > 0
17764	b==0
17765	a==0
17766	(a+0x80000000) > (b+0x80000000)
17767	p.isOdd()
17768	isEven()
17769	oddMod.isOne()
17770	isEven()
17771	k > 64
17772	k < 33
17773	intLen > 1
17774	f.isEven()
17775	f.isZero()
17776	f.compare(g) < 0
17777	((f.value[f.offset + f.intLen - 1] ^ g.value[g.offset + g.intLen - 1]) & 3) == 0
17778	numBits != 0
17779	r.intLen == 0
17780	q.intLen == 1
17781	a.isOne()
17782	r.intLen == 0
17783	q.intLen == 1
11874	sites.length == 0
10706	type.isArray()
10707	name == null
10707	name.length() == 0
10708	instance == null
10709	instance instanceof Class
10710	result != null
10913	parsed.name == null
10914	obj == null
10915	obj == null
10916	parsed.host.equals("")
10916	parsed.port > 0
10917	parsed.port > 0
10918	indexAuthorityBegin < 0
10919	indexAuthorityBegin == 0
10919	indexAuthorityBegin == indexSchemeEnd + 1
10919	indexSchemeEnd > 0
10920	uri.isOpaque()
10921	uri.getFragment() != null
10922	uri.getQuery() != null
10923	uri.getUserInfo() != null
10924	scheme != null
10924	scheme.equals("rmi")
10925	name != null
10926	name.startsWith("/")
10927	name.length() == 0
10928	host == null
10929	authority.startsWith(":")
10929	authority != null
10930	port == -1
15129	sm != null
14632	sec != null
14633	name == null
14634	index < 0
14635	addr == null
14636	addr instanceof Inet4Address
14636	addr instanceof Inet6Address
14637	netifs == null
14638	sec != null
14639	getInetAddresses().hasMoreElements()
14640	addr instanceof Inet4Address
14641	obj instanceof NetworkInterface
14642	this.name != null
14643	this.name.equals(that.name)
14644	that.name != null
14645	this.addrs == null
14646	that.addrs == null
14647	this.addrs.length != that.addrs.length
14648	addrs[i].equals(thatAddrs[j])
14649	found
14650	displayName != null
16507	number instanceof Long
16507	number instanceof Byte
16507	number instanceof BigInteger
16507	number instanceof Integer
16507	number instanceof Short
16507	((BigInteger)number).bitLength() < 64
16507	number instanceof AtomicLong
16507	number instanceof AtomicInteger
16508	number instanceof Number
16509	parsePosition.index == 0
16510	obj == null
16511	this == obj
16512	getClass() != obj.getClass()
16513	minimumIntegerDigits > maximumIntegerDigits
16514	minimumIntegerDigits > maximumIntegerDigits
16515	maximumFractionDigits < minimumFractionDigits
16516	maximumFractionDigits < minimumFractionDigits
16517	pool.hasProviders()
16518	providersInstance != null
16519	numberPatterns == null
16520	choice == INTEGERSTYLE
16521	choice == CURRENCYSTYLE
16522	serialVersionOnStream < 1
16523	minimumIntegerDigits < 0
16523	minimumIntegerDigits > maximumIntegerDigits
16523	minimumFractionDigits > maximumFractionDigits
16523	minimumFractionDigits < 0
7115	index < NUM_KEYS
7116	(mask & (1 << i)) != 0
7117	c < contexts[ctCache]
7118	c >= contexts[ctCache + 1]
7119	currentRange.inRange(codepoint)
7120	ranges.length > BSEARCH_THRESHOLD
7121	codepoint < range.start
7122	codepoint >= range.end
7123	ranges[i].inRange(codepoint)
7124	c < strongTable[cachedIndex]
7125	c >= strongTable[cachedIndex + 1]
7126	key == NUM_KEYS
7126	(mask & ~(1<<key)) != 0
7127	defaultContext == null
7128	rangeSet.contains(Range.EASTERN_ARABIC)
7128	rangeSet.contains(Range.ARABIC)
7129	rangeSet.contains(Range.TAI_THAM_THAM)
7129	rangeSet.contains(Range.TAI_THAM_HORA)
7130	rangeArray.length > BSEARCH_THRESHOLD
7131	isContextual()
7132	rangeSet == null
7133	isContextual()
7134	rangeSet == null
7135	context == null
7136	isContextual()
7137	rangeSet != null
7138	key >= 0
7139	text == null
7140	start > text.length
7140	start < 0
7140	(start + count) < 0
7140	(start + count) > text.length
7141	rangeSet != null
7142	shapingRange != null
7143	key == ETHIOPIC_KEY
7144	c <= '\u0039'
7144	c >= minDigit
7145	(mask & (1<<ctxKey)) == 0
7146	c >= minDigit
7146	c <= '\u0039'
7147	isStrongDirectional(c)
7148	newkey != lastkey
7149	ctxKey == ARABIC_KEY
7149	ctxKey == EASTERN_ARABIC_KEY
7149	(mask & EASTERN_ARABIC) != 0
7150	(mask & ARABIC) != 0
7150	ctxKey == EASTERN_ARABIC_KEY
7150	ctxKey == ARABIC_KEY
7151	(mask & (1<<ctxKey)) == 0
7152	ctxKey == null
7152	rangeSet.contains(ctxKey)
7153	c >= minDigit
7153	c <= '9'
7154	isStrongDirectional(c)
7155	ctxKey != lastKey
7156	rangeSet != null
7157	o != null
7158	rangeSet != null
7159	rhs.rangeSet != null
7160	rhs.rangeSet != null
7161	isContextual()
7162	rangeSet == null
7163	(mask & (1 << i)) != 0
7164	first
7165	value <= 0
7166	value >= 1 << 16
7167	value >= 1 << 8
7168	value >= 1 << 4
7169	value >= 1 << 2
7170	value >= 1 << 1
7171	value >= array[index + extra]
7172	value >= array[index + probe]
7173	shapingRange != null
7174	index >= 0
7175	rangeSet != null
10972	useRandomIDs()
10973	obj instanceof ObjID
12538	timeout < 0
12539	nanos > 999999
12539	nanos < 0
12540	nanos != 0
12540	nanos >= 500000
12540	timeout == 0
14024	sm != null
14025	enableOverride
14026	ex != null
14027	depth == 0
14028	closed
14028	depth == 0
14029	ex != null
14030	depth == 0
14031	closed
14031	depth == 0
14032	ctx == null
14033	curDesc.hasWriteObjectData()
14034	ex != null
14035	ctx == null
14036	curDesc.hasWriteObjectData()
14037	depth == 0
14038	cl != null
14039	(cl.getModifiers() & Modifier.PUBLIC) == 0
14040	hasNonPublicInterface
14041	nonPublicLoader != cl.getClassLoader()
14042	enable == enableResolve
14043	enable
14044	sm != null
14045	s1 != STREAM_VERSION
14045	s0 != STREAM_MAGIC
14046	buf == null
14047	len < 0
14047	off < 0
14047	endoff < 0
14047	endoff > buf.length
14048	depth == 0
14049	endoff > buf.length
14049	endoff < 0
14049	off < 0
14049	len < 0
14050	cl == ObjectInputStream.class
14051	sm == null
14052	result == null
14053	result.booleanValue()
14054	oldMode
14055	remain > 0
14056	defaultDataEnd
14057	oldMode
14058	oldMode
14059	enableResolve
14059	handles.lookupException(passHandle) != null
14060	rep != obj
14061	bin.readByte() != TC_NULL
14062	bin.readByte() != TC_REFERENCE
14063	passHandle < 0
14063	passHandle >= handles.size()
14064	unshared
14065	obj == unsharedMarker
14066	bin.readByte() != TC_CLASS
14067	resolveEx != null
14068	bin.readByte() != TC_PROXYCLASSDESC
14069	(cl = resolveProxyClass(ifaces)) == null
14070	Proxy.isProxyClass(cl)
14071	bin.readByte() != TC_CLASSDESC
14072	(cl = resolveClass(readDesc)) == null
14073	checksRequired
14074	bin.readByte() != TC_ARRAY
14075	(cl = desc.forClass()) != null
14076	resolveEx != null
14077	ccl == null
14078	ccl.isPrimitive()
14079	ccl == Integer.TYPE
14080	ccl == Byte.TYPE
14081	ccl == Long.TYPE
14082	ccl == Float.TYPE
14083	ccl == Double.TYPE
14084	ccl == Short.TYPE
14085	ccl == Character.TYPE
14086	ccl == Boolean.TYPE
14087	bin.readByte() != TC_ENUM
14088	desc.isEnum()
14089	resolveEx != null
14090	cl != null
14091	unshared
14092	bin.readByte() != TC_OBJECT
14093	cl == ObjectStreamClass.class
14093	cl == Class.class
14093	cl == String.class
14094	resolveEx != null
14095	desc.isExternalizable()
14096	desc.hasReadResolveMethod()
14096	handles.lookupException(passHandle) == null
14096	obj != null
14097	unshared
14097	rep.getClass().isArray()
14098	rep != obj
14099	blocked
14100	obj != null
14101	blocked
14102	slots[i].hasData
14103	handles.lookupException(passHandle) == null
14103	obj != null
14103	slotDesc.hasReadObjectMethod()
14104	slotDesc.hasWriteObjectData()
14105	obj != null
14105	slotDesc.hasReadObjectNoDataMethod()
14105	handles.lookupException(passHandle) == null
14106	bin.getBlockDataMode()
14107	obj != null
14107	cl != null
14107	cl.isInstance(obj)
14108	primVals.length < primDataSize
14108	primVals == null
14109	obj != null
14110	f.getField() != null
14111	obj != null
14112	bin.readByte() != TC_EXCEPTION
14113	depth > 0
14114	array instanceof Object[]
14115	array instanceof boolean[]
14116	array instanceof byte[]
14117	array instanceof char[]
14118	array instanceof double[]
14119	array instanceof float[]
14120	array instanceof int[]
14121	array instanceof long[]
14122	array instanceof short[]
13434	extendedDebugInfo
13435	sm != null
13436	handles.size() != 0
13437	enableOverride
13438	depth == 0
13439	depth == 0
13440	ctx == null
13441	curPut == null
13442	ctx == null
13443	curPut == null
13444	depth != 0
13445	enable == enableReplace
13446	enable
13447	sm != null
13448	buf == null
13449	off < 0
13449	endoff > buf.length
13449	endoff < 0
13449	len < 0
13450	str == null
13451	(handle = handles.lookup(str)) != -1
13452	cl == ObjectOutputStream.class
13453	sm == null
13454	result == null
13455	result.booleanValue()
13456	(obj = subs.lookup(obj)) == null
13457	(h = handles.lookup(obj)) != -1
13457	unshared
13458	obj instanceof Class
13459	obj instanceof ObjectStreamClass
13460	(obj = desc.invokeWriteReplace(obj)) == null
13460	desc.hasWriteReplaceMethod()
13460	(repCl = obj.getClass()) == cl
13461	enableReplace
13462	rep != null
13462	rep != obj
13463	obj != orig
13464	obj == null
13465	unshared
13465	(h = handles.lookup(obj)) != -1
13466	obj instanceof Class
13467	obj instanceof ObjectStreamClass
13468	obj instanceof String
13469	cl.isArray()
13470	obj instanceof Enum
13471	obj instanceof Serializable
13472	extendedDebugInfo
13473	desc == null
13474	unshared
13474	(handle = handles.lookup(desc)) != -1
13475	desc.isProxy()
13476	isCustomSubclass()
13476	cl != null
13477	protocol == PROTOCOL_VERSION_1
13478	cl != null
13478	isCustomSubclass()
13479	utflen <= 0xFFFF
13480	ccl.isPrimitive()
13481	ccl == Integer.TYPE
13482	ccl == Byte.TYPE
13483	ccl == Long.TYPE
13484	ccl == Float.TYPE
13485	ccl == Double.TYPE
13486	ccl == Short.TYPE
13487	ccl == Character.TYPE
13488	ccl == Boolean.TYPE
13489	extendedDebugInfo
13490	extendedDebugInfo
13491	extendedDebugInfo
13492	extendedDebugInfo
13493	extendedDebugInfo
13494	desc.isExternalizable()
13494	desc.isProxy()
13495	extendedDebugInfo
13496	extendedDebugInfo
13497	protocol == PROTOCOL_VERSION_1
13498	extendedDebugInfo
13499	slotDesc.hasWriteObjectMethod()
13500	extendedDebugInfo
13501	extendedDebugInfo
13502	cl.isInstance(obj)
13502	cl != null
13502	obj != null
13503	primVals.length < primDataSize
13503	primVals == null
13504	extendedDebugInfo
13505	extendedDebugInfo
13778	suid == null
13779	cl == null
13780	System.getSecurityManager() != null
13781	ReflectUtil.needsPackageAccessCheck(caller.getClassLoader(), cl.getClassLoader())
13782	Serializable.class.isAssignableFrom(cl)
13782	all
13783	ref != null
13784	entry == null
13785	ref != null
13786	ref != null
13787	entry == null
13788	entry instanceof ObjectStreamClass
13789	entry instanceof EntryFuture
13790	future.getOwner() == Thread.currentThread()
13791	entry == null
13792	future.set(entry)
13793	entry instanceof ObjectStreamClass
13794	entry instanceof RuntimeException
13795	entry instanceof Error
13796	serializable
13797	deserializeEx == null
13798	isEnum
13799	cons == null
13800	fields[i].getField() == null
13801	cl != null
13802	localDesc.isProxy
13803	cl != null
13804	localDesc.isProxy
13805	isEnum != localDesc.isEnum
13806	serializable == localDesc.serializable
13806	suid.longValue() != localDesc.getSerialVersionUID()
13806	cl.isArray()
13807	classNamesEqual(name, localDesc.name)
13808	isEnum
13809	serializable == localDesc.serializable
13809	externalizable != localDesc.externalizable
13810	serializable
13810	externalizable != localDesc.externalizable
13810	externalizable
13810	serializable != localDesc.serializable
13811	deserializeEx == null
13812	externalizable
13812	sflag
13813	isEnum
13813	suid.longValue() != 0L
13814	numFields != 0
13814	isEnum
13815	externalizable
13816	protocol != ObjectStreamConstants.PROTOCOL_VERSION_1
13817	serializable
13818	hasWriteObjectData
13819	isEnum
13820	f.isPrimitive()
13821	deserializeEx != null
13822	serializeEx != null
13823	defaultSerializeEx != null
13824	f.getName().equals(name)
13825	type == Object.class
13825	type == null
13825	f.isPrimitive()
13826	ftype != null
13826	type.isAssignableFrom(ftype)
13827	cons != null
13828	writeObjectMethod != null
13829	th instanceof IOException
13830	readObjectMethod != null
13831	th instanceof ClassNotFoundException
13832	th instanceof IOException
13833	readObjectNoDataMethod != null
13834	th instanceof ObjectStreamException
13835	writeReplaceMethod != null
13836	th instanceof ObjectStreamException
13837	readResolveMethod != null
13838	th instanceof ObjectStreamException
13839	dataLayout == null
13840	oscNames.contains(d.name)
13841	searchName.equals(c.getName())
13842	match != null
13843	firstObjIndex == -1
13844	firstObjIndex != -1
13844	firstObjIndex + numObjFields != fields.length
13845	this.cl == cl
13846	isProxy
13847	(initCl = initCl.getSuperclass()) == null
13848	(mods & Modifier.PRIVATE) != 0
13848	(mods & (Modifier.PUBLIC | Modifier.PROTECTED)) == 0
13848	packageEquals(cl, initCl)
13849	meth.getReturnType() != returnType
13849	meth == null
13850	(mods & (Modifier.STATIC | Modifier.ABSTRACT)) != 0
13851	(mods & (Modifier.PUBLIC | Modifier.PROTECTED)) != 0
13852	(mods & Modifier.PRIVATE) != 0
13853	i >= 0
13854	cl.isPrimitive()
13855	cl == Integer.TYPE
13856	cl == Byte.TYPE
13857	cl == Long.TYPE
13858	cl == Float.TYPE
13859	cl == Double.TYPE
13860	cl == Short.TYPE
13861	cl == Character.TYPE
13862	cl == Boolean.TYPE
13863	cl == Void.TYPE
13864	th instanceof RuntimeException
13865	th instanceof Error
13866	Externalizable.class.isAssignableFrom(cl)
13866	cl.isInterface()
13866	Proxy.isProxyClass(cl)
13866	Serializable.class.isAssignableFrom(cl)
13867	(fields = getDeclaredSerialFields(cl)) == null
13868	(f.getModifiers() & mask) == mask
13869	serialPersistentFields == null
13870	serialPersistentFields.length == 0
13871	fieldNames.contains(fname)
13872	(f.getModifiers() & Modifier.STATIC) == 0
13872	f.getType() == spf.getType()
13873	boundFields[i] == null
13874	(clFields[i].getModifiers() & mask) == 0
13875	(f.getModifiers() & mask) == mask
13876	Proxy.isProxyClass(cl)
13876	Serializable.class.isAssignableFrom(cl)
13877	(classMods & Modifier.INTERFACE) != 0
13878	cl.isArray()
13879	(mods & (Modifier.STATIC | Modifier.TRANSIENT)) == 0
13879	(mods & Modifier.PRIVATE) == 0
13880	hasStaticInitializer(cl)
13881	(mods & Modifier.PRIVATE) == 0
13882	(mods & Modifier.PRIVATE) == 0
13883	ref != null
13884	entry == null
13885	ref != null
13886	ref != null
13887	entry == null
13888	entry instanceof FieldReflector
13889	entry instanceof EntryFuture
13890	entry == null
13891	entry instanceof FieldReflector
13892	entry instanceof InvalidClassException
13893	entry instanceof RuntimeException
13894	entry instanceof Error
13895	f.getName().equals(lf.getName())
13896	f.isPrimitive()
13896	lf.isPrimitive()
13896	f.getTypeCode() != lf.getTypeCode()
13897	lf.getField() != null
13898	m == null
13651	name == null
13652	name == null
13653	System.getSecurityManager() != null
13654	ReflectUtil.needsPackageAccessCheck(caller.getClassLoader(), type.getClassLoader())
13655	isPrim != other.isPrimitive()
13656	cl.isPrimitive()
13657	cl == Integer.TYPE
13658	cl == Byte.TYPE
13659	cl == Long.TYPE
13660	cl == Float.TYPE
13661	cl == Double.TYPE
13662	cl == Short.TYPE
13663	cl == Character.TYPE
13664	cl == Boolean.TYPE
13665	cl == Void.TYPE
1410	a == b
1411	a == null
1411	b == null
1412	obj == null
1413	obj == null
308	o == null
309	obs.contains(o)
310	changed
14167	b == null
14168	off < 0
14168	off > b.length
14168	(off + len) < 0
14168	len < 0
14168	(off + len) > b.length
14169	len == 0
13423	charsetName == null
13424	cs == null
13425	enc == null
17227	maxPathLength < -1
17457	certPath == null
17455	subjectPublicKey == null
17456	trustAnchor == null
17202	keystore == null
17203	keystore.isCertificateEntry(alias)
17204	cert instanceof X509Certificate
17205	trustAnchors == null
17206	trustAnchors.isEmpty()
17207	i.next() instanceof TrustAnchor
17208	initialPolicies != null
17209	i.next() instanceof String
17210	stores == null
17211	i.next() instanceof CertStore
17212	store != null
17213	date == null
17214	date != null
17215	checkers != null
17216	checker != null
17217	certSelector != null
17218	selector != null
17219	certStores != null
17220	certPathCheckers != null
17221	unmodTrustAnchors != null
17222	unmodInitialPolicies != null
17223	unmodInitialPolicies.isEmpty()
17224	certPathCheckers != null
17225	certStores != null
16747	mdName == null
16748	mgfName == null
16749	saltLen < 0
16750	trailerField < 0
16751	saltLen < 0
3540	impl == null
3541	implName != null
3541	implName.equals("")
3542	PACK_PROVIDER.equals(prop)
12661	specVersion == null
12661	specVersion.length() < 1
12662	si[i] < 0
12663	di[i] < 0
12664	s < d
12665	s > d
12666	l != null
12667	l != null
12668	i != -1
12669	cl != null
12670	spec.length() > 0
12670	spec != null
12671	ver != null
12671	ver.length() > 0
12672	packageInfo == null
12673	attr != null
12674	attr != null
12675	specTitle == null
12676	specVersion == null
12677	specVendor == null
12678	implTitle == null
12679	implVersion == null
12680	implVendor == null
12681	sealed == null
12682	"true".equalsIgnoreCase(sealed)
12683	pkg == null
12684	fn != null
8843	bits < 1
8843	bits > 32
8844	alphaMask != 0
8845	nBits[numComponents-1] == 1
8846	space.getType() != ColorSpace.TYPE_RGB
8847	amask != 0
8848	nBits[3] == 1
8849	mask != 0
8850	off + count > pixel_bits
8851	count == 0
8852	sm instanceof SinglePixelPackedSampleModel
8853	numComponents != sm.getNumBands()
8854	sm.getTransferType() != transferType
8855	bitMasks.length != maskArray.length
8856	(maxMask & bitMasks[i]) != (maxMask & maskArray[i])
8857	hasAlpha() == false
8858	obj instanceof PackedColorModel
8859	super.equals(obj)
8860	numC != numComponents
8861	maskArray[i] != cm.getMask(i)
8862	arr[i] < 0
8863	alphaMask != 0
8864	arr[numColors] < 0
8865	arr[0] < 0
8866	arr[1] < 0
8867	arr[2] < 0
8868	amask != 0
8869	arr[3] < 0
8870	mask != 0
8871	mask != 0
10069	color == null
10070	media == null
10071	defaultCountry.equals(Locale.US.getCountry())
10071	defaultCountry.equals(Locale.CANADA.getCountry())
10071	defaultCountry != null
10072	orientationRequested == null
10073	origin == null
10074	printQuality == null
10075	printerResolution[2] != 3
10075	printerResolution.length != 3
10075	printerResolution[1] <= 0
10075	printerResolution[2] != 4
10075	printerResolution[0] <= 0
10075	printerResolution == null
10076	obj instanceof PageAttributes
7574	orientation == PORTRAIT
7575	orientation == PORTRAIT
7576	getOrientation() == PORTRAIT
7577	getOrientation() == PORTRAIT
7578	0 <= orientation
7578	orientation <= REVERSE_LANDSCAPE
5066	peer == null
5067	accessibleContext == null
8989	sources != null
8990	parameters != null
8991	oldSize < newSize
8992	oldSize < newSize
8993	obj instanceof Byte
8994	obj instanceof Character
8995	obj instanceof Short
8996	obj instanceof Integer
8997	obj instanceof Long
8998	obj instanceof Float
8999	obj instanceof Double
16573	obj == null
16574	obj instanceof ParsePosition
5089	numTypes == 0
5089	pointTypes[numTypes - 1] != SEG_CLOSE
5090	rule != WIND_EVEN_ODD
5090	rule != WIND_NON_ZERO
5091	numTypes < 1
5091	index < 1
5092	pointTypes[numTypes - 1] == SEG_CLOSE
5093	at != null
5094	x * 0.0 + y * 0.0 == 0.0
5095	x * 0.0 + y * 0.0 == 0.0
5096	numTypes < 2
5097	java.lang.Double.isNaN(x+w)
5097	java.lang.Double.isNaN(y+h)
5098	w <= 0
5098	h <= 0
5099	java.lang.Double.isNaN(x+w)
5099	java.lang.Double.isNaN(y+h)
5100	w <= 0
5100	h <= 0
5101	java.lang.Double.isNaN(y+h)
5101	java.lang.Double.isNaN(x+w)
5102	w <= 0
5102	h <= 0
5103	java.lang.Double.isNaN(x+w)
5103	java.lang.Double.isNaN(y+h)
5104	h <= 0
5104	w <= 0
5105	isdbl
5106	isdbl
5107	nC < 0
5108	storedbl
5109	nT < 0
5110	isdbl
5111	nT >= 0
5111	s.readByte() != SERIAL_PATH_END
12926	scheme == null
12927	scheme.equalsIgnoreCase("file")
12928	provider.getScheme().equalsIgnoreCase(scheme)
3651	compiled
3652	compiled
3653	matchList.size() < limit - 1
3653	matchLimited
3654	matchList.size() == limit - 1
3655	index == 0
3656	matchList.size() < limit
3656	matchLimited
3657	limit == 0
3658	slashEIndex == -1
3659	pattern.length() == 0
3660	(flags & UNICODE_CHARACTER_CLASS) != 0
3661	pattern.length() > 0
3662	Character.getType(c) == Character.NON_SPACING_MARK
3662	lastCodePoint != -1
3663	i >= patternLength
3664	lastCodePoint != '\\'
3664	c == '['
3665	c == ']'
3665	lastCodePoint != '\\'
3666	Character.getType(c) == Character.NON_SPACING_MARK
3667	i >= normalizedPattern.length()
3668	eq == null
3669	i == normalizedPattern.length()
3670	eq != null
3671	source.length() == len
3672	x>0
3673	next != null
3674	input.length() == countChars(input, 0, 1)
3675	input.length() == countChars(input, 0, 2)
3676	getClass(c1) == getClass(c0)
3677	combClass[y] == combClass[x]
3678	result.equals(firstTwoCharacters)
3679	temp[i] != '\\'
3680	temp[i + 1] != 'Q'
3681	i >= pLen - 1
3682	ASCII.isAscii(c)
3682	ASCII.isAlnum(c)
3683	c != '\\'
3684	inQuote
3685	inQuote
3686	temp[i] == 'E'
3687	temp[i] == 'Q'
3688	i != pLen
3689	has(LITERAL)
3689	has(CANON_EQ)
3690	isSupplementary(c)
3691	has(LITERAL)
3692	has(LITERAL)
3693	patternLength != cursor
3694	peek() == ')'
3695	matchRoot instanceof Slice
3696	root == matchRoot
3697	matchRoot instanceof Begin
3697	matchRoot instanceof First
3698	namedGroups == null
3699	node instanceof Prolog
3700	node instanceof Loop
3701	node instanceof Curly
3702	node instanceof GroupCurly
3703	node instanceof GroupTail
3704	node != null
3705	node == Pattern.accept
3706	has(COMMENTS)
3707	ch != testChar
3708	has(COMMENTS)
3709	has(COMMENTS)
3710	has(COMMENTS)
3711	ch == '#'
3712	ch == '#'
3713	has(UNIX_LINES)
3714	isSupplementary(temp[i])
3715	prev == null
3716	branchConn == null
3717	node == end
3718	prev instanceof Branch
3719	prev == end
3720	peek() != '|'
3721	node == null
3722	head == null
3723	ch == 'p'
3723	ch == 'P'
3724	ch != '{'
3725	has(MULTILINE)
3726	has(UNIX_LINES)
3727	has(UNIX_LINES)
3728	has(DOTALL)
3729	has(UNIX_LINES)
3730	cursor >= patternLength
3731	head == null
3732	head == null
3733	first > 1
3734	ch == 'P'
3734	ch == 'p'
3735	first > 0
3736	ch != '{'
3737	ch >= 0
3738	isSupplementary(ch)
3739	first == 0
3740	cursor >= patternLength
3741	isSupplementary(ch)
3742	first == 1
3743	len >= buffer.length
3744	capturingGroupCount - 1 < newRefNum
3745	has(CASE_INSENSITIVE)
3746	inclass
3747	create
3748	inclass
3749	create
3750	inclass
3751	create
3752	create
3753	inclass
3754	create
3755	create
3756	create
3757	inclass
3758	create
3759	has(UNIX_LINES)
3760	inclass
3761	create
3762	create
3763	inclass
3764	read() != '<'
3765	namedGroups().containsKey(name)
3766	create
3767	has(CASE_INSENSITIVE)
3768	create
3769	create
3770	inclass
3771	create
3772	firstInClass
3773	temp[cursor-1] != '['
3774	prev == null
3775	ch == '&'
3776	ch == '['
3777	rightNode == null
3778	rightNode != null
3779	prev == null
3780	rightNode == null
3781	cursor >= patternLength
3782	prev != null
3783	consume
3784	include
3785	prev == null
3786	prev != node
3787	prev == null
3788	prev != node
3789	ch == 0x4b
3789	has(UNICODE_CASE)
3789	ch == 0x49
3789	ch < 256
3789	ch == 0xc5
3789	has(CASE_INSENSITIVE)
3789	ch == 0x53
3789	ch == 0x73
3789	ch == 0xe5
3789	ch == 0x6b
3789	ch == 0x69
3789	ch == 0xff
3789	ch == 0xb5
3790	ch == '\\'
3791	ch == 'p'
3791	ch == 'P'
3792	ch != '{'
3793	ch == -1
3794	ch >= 0
3795	peek() == '-'
3796	endRange == '['
3797	endRange != ']'
3798	m < ch
3799	has(CASE_INSENSITIVE)
3800	singleLetter
3801	Character.isSupplementaryCodePoint(c)
3802	j > patternLength
3803	i + 1 >= j
3804	i != -1
3805	"script".equals(name)
3805	"sc".equals(name)
3806	"block".equals(name)
3806	"blk".equals(name)
3807	"gc".equals(name)
3807	"general_category".equals(name)
3808	name.startsWith("In")
3809	name.startsWith("Is")
3810	uprop != null
3811	node == null
3812	node == null
3813	has(UNICODE_CHARACTER_CLASS)
3814	uprop != null
3815	node == null
3816	maybeComplement
3817	node instanceof Category
3817	node instanceof Block
3818	p == null
3819	sb.length() == 0
3820	ch != '>'
3821	ch == '?'
3822	ch == '='
3823	ASCII.isUpper(ch)
3823	ASCII.isLower(ch)
3824	namedGroups().containsKey(name)
3825	info.maxValid == false
3826	ch == '='
3827	ch == '!'
3828	ch == ')'
3829	ch != ':'
3830	node == head
3831	head == tail
3832	node instanceof Ques
3833	ques.type == POSSESSIVE
3834	ques.type == GREEDY
3835	node instanceof Curly
3836	curly.type == POSSESSIVE
3837	head.study(info)
3838	curly.type == GREEDY
3839	anonymous
3840	anonymous
3840	groupIndex < 10
3841	ch == '?'
3842	ch == '+'
3843	ch == '?'
3844	ch == '+'
3845	ch == '?'
3846	ch == '+'
3847	ASCII.isDigit(ch)
3848	ch == ','
3849	ch != '}'
3850	ch != '}'
3851	((cmin) | (cmax) | (cmax - cmin)) < 0
3852	ch == '?'
3853	ch == '+'
3854	cursor < patternLength
3855	((n-'0')|('7'-n)) >= 0
3856	((m-'0')|('7'-m)) >= 0
3857	((o-'0')|('7'-o)) >= 0
3857	((n-'0')|('3'-n)) >= 0
3858	ASCII.isHexDigit(n)
3859	ASCII.isHexDigit(m)
3860	n == '{'
3860	ASCII.isHexDigit(peek())
3861	ch > Character.MAX_CODE_POINT
3862	n != '}'
3863	ASCII.isHexDigit(ch)
3864	Character.isHighSurrogate((char)n)
3865	read() == '\\'
3865	read() == 'u'
3866	Character.isLowSurrogate((char)n2)
3867	lengthInCodePoints == 1
3867	Character.isHighSurrogate(seq.charAt(index))
3868	lengthInCodePoints >= 0
3869	Character.isHighSurrogate(seq.charAt(x++))
3870	Character.isLowSurrogate(seq.charAt(x))
3870	x < length
3871	index == 0
3872	Character.isLowSurrogate(seq.charAt(--x))
3873	Character.isHighSurrogate(seq.charAt(x-1))
3873	x > 0
3874	Character.isHighSurrogate(seq.charAt(i++))
3875	i < length
3875	Character.isLowSurrogate(seq.charAt(i))
3876	has(CASE_INSENSITIVE)
3877	has(UNICODE_CASE)
3878	upper != lower
3879	ASCII.isAscii(ch)
3880	lower != upper
3881	isSupplementary(ch)
3882	has(CASE_INSENSITIVE)
3883	has(UNICODE_CASE)
3884	has(UNICODE_CASE)
3885	Character.isLetterOrDigit(ch)
3886	Character.getType(ch) == Character.NON_SPACING_MARK
16282	obj == null
16283	toAddTo.length() > 0
16283	showWhiteSpace
16284	lastEntry != null
16284	strength == Collator.PRIMARY
16285	lastEntry != null
16286	showWhiteSpace
16287	showWhiteSpace
16288	showWhiteSpace
16289	showExtension
16289	extension.length() != 0
16290	Character.isSpaceChar(ch)
16291	PatternEntry.isSpecialChar(ch)
16292	inQuote
16293	inQuote
3606	index >= 0
3607	index >= 0
17125	sm != null
17126	actions.length() == 0
17126	actions == null
17157	isReadOnly()
17158	permission instanceof AllPermission
17159	permission instanceof UnresolvedPermission
17160	allPermission != null
17161	pc != null
17162	hasUnresolved
17162	createEmpty
17163	pc == null
17164	pc == null
17164	createEmpty
17165	pc == null
17166	pc != null
17167	uc == null
17168	unresolvedPerms == null
17169	signers != null
17170	signers[j] instanceof java.security.cert.Certificate
17171	signers[j] instanceof java.security.cert.Certificate
17172	perm != null
17173	pc == null
17174	pc == null
17175	permset == null
17176	permset.hasMoreElements()
17177	hasMoreElements()
17178	next.hasMoreElements()
17179	p == null
17180	p_.implies(permission)
10332	mutatesTo(oldInstance, newInstance)
2242	phase < 0
2243	counts == EMPTY
2243	unarrived < 0
2244	root == this
2244	reconcileState() == s
2245	UNSAFE.compareAndSwapLong(this, stateOffset, s, s-=adj)
2246	unarrived == 0
2247	root != this
2248	onAdvance(phase, nextUnarrived)
2249	nextUnarrived == 0
2250	registrations > MAX_PARTIES - parties
2251	(phase = (int)(s >>> PHASE_SHIFT)) < 0
2252	counts != EMPTY
2253	reconcileState() == s
2253	parent == null
2254	unarrived == 0
2255	UNSAFE.compareAndSwapLong(this, stateOffset, s, s + adj)
2256	parent == null
2257	UNSAFE.compareAndSwapLong(this, stateOffset, s, next)
2258	state == s
2259	root != this
2260	parties >>> PARTIES_SHIFT != 0
2261	parent != null
2262	parties != 0
2263	parties < 0
2264	parties == 0
2265	phase < 0
2266	counts == EMPTY
2266	unarrived < 0
2267	reconcileState() == s
2268	UNSAFE.compareAndSwapLong(this, stateOffset, s, s -= ONE_ARRIVAL)
2269	unarrived != 0
2270	root != this
2271	onAdvance(phase, nextUnarrived)
2272	nextUnarrived == 0
2273	UNSAFE.compareAndSwapLong(this, stateOffset, s, n)
2274	phase < 0
2275	p == phase
2276	phase < 0
2277	p == phase
2278	node.wasInterrupted
2279	phase < 0
2280	p == phase
2281	node.wasInterrupted
2282	p == phase
2283	UNSAFE.compareAndSwapLong(root, stateOffset, s, s | TERMINATION_BIT)
2284	head.compareAndSet(q, q.next)
2284	(t = q.thread) != null
2285	(t = q.thread) != null
2285	q == null
2285	q.phase == p
2286	t != null
2286	head.compareAndSet(q, q.next)
2287	node == null
2288	unarrived != lastUnarrived
2288	(lastUnarrived = unarrived) < NCPU
2289	interrupted
2289	--spins < 0
2290	node.isReleasable()
2291	queued
2292	q == null
2292	q.phase == phase
2292	(int)(state >>> PHASE_SHIFT) == phase
2293	node != null
2294	node.thread != null
2295	node.interruptible
2295	node.wasInterrupted
2296	p == phase
2296	(p = (int)(state >>> PHASE_SHIFT)) == phase
14123	pipeSize <= 0
14124	in == out
14125	in < 0
14126	in >= buffer.length
14127	in == out
14128	out < in
14129	in < out
14130	in == -1
14131	nextTransferAmount > bytesToTransfer
14132	in >= buffer.length
14133	connected
14134	closedByReader
14134	closedByWriter
14135	readSide.isAlive()
14135	readSide != null
14136	connected
14137	closedByReader
14138	in < 0
14138	closedByWriter
14138	writeSide != null
14138	writeSide.isAlive()
14139	closedByWriter
14140	writeSide.isAlive()
14140	writeSide != null
14140	--trials < 0
14141	out >= buffer.length
14142	in == out
14143	b == null
14144	len < 0
14144	off < 0
14144	len > b.length - off
14145	len == 0
14146	c < 0
14147	in > out
14148	available > (len - 1)
14149	out >= buffer.length
14150	in == out
14151	in < 0
14152	in == out
14153	in > out
14334	snk == null
14335	snk.connected
14335	sink != null
14336	sink == null
14337	sink == null
14338	b == null
14339	(off + len) < 0
14339	off < 0
14339	len < 0
14339	(off + len) > b.length
14339	off > b.length
14340	len == 0
14341	sink != null
14342	sink != null
13991	pipeSize <= 0
13992	connected
13993	closedByWriter
13993	closedByReader
13994	readSide != null
13994	readSide.isAlive()
13995	readSide.isAlive()
13995	readSide != null
13996	in < 0
13997	in >= buffer.length
13998	connected
13999	closedByReader
14000	writeSide != null
14000	writeSide.isAlive()
14000	in < 0
14000	closedByWriter
14001	closedByWriter
14002	writeSide != null
14002	--trials < 0
14002	writeSide.isAlive()
14003	out >= buffer.length
14004	in == out
14005	connected
14006	closedByReader
14007	writeSide.isAlive()
14007	closedByWriter
14007	in < 0
14007	writeSide != null
14008	(off + len) < 0
14008	len < 0
14008	off < 0
14008	off > cbuf.length
14008	(off + len) > cbuf.length
14009	len == 0
14010	c < 0
14011	out >= buffer.length
14012	in == out
14013	connected
14014	closedByReader
14015	writeSide != null
14015	writeSide.isAlive()
14015	closedByWriter
14015	in < 0
14016	in < 0
14325	snk == null
14326	snk.connected
14326	sink != null
14327	snk.closedByReader
14327	closed
14328	sink == null
14329	sink == null
14330	(off | len | (off + len) | (cbuf.length - (off + len))) < 0
14331	sink != null
14332	sink.closedByReader
14332	closed
14333	sink != null
8794	forceRGB
8795	(flags & DONEBITS) != 0
8796	grabbing
8797	(flags & DONEBITS) != 0
8798	grabbing
8799	ms == 0
8800	timeout <= 0
8801	dstW < 0
8802	dstH < 0
8803	dstH <= 0
8803	dstW <= 0
8804	imageModel == ColorModel.getRGBdefault()
8804	intPixels == null
8805	bytePixels != null
8806	intPixels != null
8807	srcY < dstY
8808	diff >= srcH
8809	srcY + srcH > dstY + dstH
8810	srcH <= 0
8811	srcX < dstX
8812	diff >= srcW
8813	srcX + srcW > dstX + dstW
8814	srcW <= 0
8815	intPixels == null
8816	bytePixels == null
8817	imageModel != model
8818	bytePixels != null
8819	intPixels != null
8820	srcY < dstY
8821	diff >= srcH
8822	srcY + srcH > dstY + dstH
8823	srcH <= 0
8824	srcX < dstX
8825	diff >= srcW
8826	srcX + srcW > dstX + dstW
8827	srcW <= 0
8828	intPixels == null
8829	bytePixels == null
8830	imageModel == model
8831	imageModel != ColorModel.getRGBdefault()
8321	maxBandOff > scanlineStride
8322	pixelStride*w > scanlineStride
8323	pixelStride < maxBandOff
8324	bandOffsets[i] < minBandoff
8325	minBandoff > 0
10078	obj instanceof Point
5069	obj instanceof Point2D
16883	sm != null
16884	sm != null
16885	pi.initialized == false
16885	pi.policy == null
16886	pinfo.policy == null
16887	policy_class == null
16888	pol != null
16889	debug != null
16890	sm != null
16891	p != null
16892	p.pdMapping == null
16893	policyDomain.getCodeSource() != null
16894	pol != null
16895	policyPerms == null
16896	provider.length() == 0
16896	provider == null
16897	provider == null
16898	cause instanceof IllegalArgumentException
16899	domain == null
16900	pdMapping == null
16901	pc != null
16902	pc == null
16902	pc == UNSUPPORTED_EMPTY_COLLECTION
16903	statics != null
16904	pdMapping == null
16905	pc != null
16906	pc == null
17448	val.tag != DerValue.tag_Sequence
17449	tmp == null
17450	pqiString != null
6424	npoints > xpoints.length
6424	npoints > ypoints.length
6425	npoints < 0
6426	bounds != null
6427	x < bounds.x
6428	y < bounds.y
6429	npoints >= ypoints.length
6429	npoints >= xpoints.length
6430	newLength < MIN_LENGTH
6431	(newLength & (newLength - 1)) != 0
6432	bounds != null
6433	npoints == 0
6434	bounds == null
6435	npoints <= 2
6435	getBoundingBox().contains(x, y)
6436	cury == lasty
6437	curx < lastx
6438	x >= lastx
6439	x >= curx
6440	cury < lasty
6441	y < cury
6441	y >= lasty
6442	x < leftx
6443	y >= cury
6443	y < lasty
6444	x < leftx
6445	test1 < (test2 / (lasty - cury) * (lastx - curx))
6446	cross.accumulateLine(lastx, lasty, curx, cury)
6447	getBoundingBox().intersects(x, y, w, h)
6447	npoints <= 0
6448	getBoundingBox().intersects(x, y, w, h)
6448	npoints <= 0
9958	isTrayIconPopup
9959	parent instanceof Component
9959	parent != null
9960	peer == null
9961	localParent == null
9962	localParent instanceof Component
9963	compParent != origin
9964	compParent instanceof Container
9965	((Container)compParent).isAncestorOf(origin)
9966	compParent.getPeer() == null
9966	compParent.isShowing()
9967	peer == null
9968	peer != null
9969	accessibleContext == null
13034	r
13035	w
13036	x
13037	c == setValue
13038	c == '-'
13039	perms.length() != 9
13040	isR(perms.charAt(0))
13041	isW(perms.charAt(1))
13042	isX(perms.charAt(2))
13043	isR(perms.charAt(3))
13044	isW(perms.charAt(4))
13045	isX(perms.charAt(5))
13046	isR(perms.charAt(6))
13047	isW(perms.charAt(7))
13048	isX(perms.charAt(8))
13049	p == null
4577	factoryName != null
4578	sm != null
4579	sce.getCause() instanceof SecurityException
4580	osName.startsWith("Windows")
4581	osName.contains("OS X")
4582	c.isArray()
4583	pkgEndIndex < 0
4584	security != null
4585	security != null
13763	obj == null
13764	out == null
13765	closing
13766	out != null
13767	out instanceof java.io.PrintStream
13768	autoFlush
13768	b == '\n'
13769	autoFlush
13770	autoFlush
13771	buf[i] == '\n'
13772	s.indexOf('\n') >= 0
13772	autoFlush
13773	autoFlush
13774	s == null
13775	formatter == null
13775	formatter.locale() != Locale.getDefault()
13776	formatter.locale() != l
13776	formatter == null
13777	csq == null
13604	out instanceof java.io.PrintStream
13605	out == null
13606	out == null
13607	out != null
13608	out instanceof java.io.PrintWriter
13609	psOut != null
13610	autoFlush
13611	s == null
13612	formatter.locale() != Locale.getDefault()
13612	formatter == null
13613	autoFlush
13614	formatter.locale() != l
13614	formatter == null
13615	autoFlush
13616	csq == null
7579	security != null
7580	attributes == null
7581	attributes == null
7582	attributes == null
7582	service == null
7583	orientReq == null
7583	media == null
7583	mpa == null
7584	media != null
7584	service.isAttributeCategorySupported(MediaPrintableArea.class)
7584	mpa == null
7585	((MediaPrintableArea[])mpaVals).length > 0
7585	mpaVals instanceof MediaPrintableArea[]
7586	service.isAttributeValueSupported(media, null, attributes)
7586	media != null
7587	media instanceof MediaSizeName
7588	msz != null
7589	mpa == null
7590	service.isAttributeValueSupported(mpa, null, attributes)
7590	mpa != null
7591	service.isAttributeValueSupported(orientReq, null, attributes)
7591	orientReq != null
7592	orientReq.equals(OrientationRequested.REVERSE_LANDSCAPE)
7593	orientReq.equals(OrientationRequested.LANDSCAPE)
2303	initialCapacity < 1
2304	c instanceof SortedSet<?>
2305	c instanceof PriorityBlockingQueue<?>
2306	pq.getClass() == PriorityBlockingQueue.class
2307	a.getClass() != Object[].class
2308	this.comparator != null
2308	n == 1
2308	screen
2309	a[i] == null
2310	heapify
2311	allocationSpinLock == 0
2311	UNSAFE.compareAndSwapInt(this, allocationSpinLockOffset, 0, 1)
2312	newCap - MAX_ARRAY_SIZE > 0
2313	minCap < 0
2313	minCap > MAX_ARRAY_SIZE
2314	queue == array
2314	newCap > oldCap
2315	newArray == null
2316	queue == array
2316	newArray != null
2317	n < 0
2318	cmp == null
2319	key.compareTo((T) e) >= 0
2320	cmp.compare(x, (T) e) >= 0
2321	n > 0
2322	right < n
2322	((Comparable<? super T>) c).compareTo((T) array[right]) > 0
2323	key.compareTo((T) c) <= 0
2324	n > 0
2325	cmp.compare((T) c, (T) array[right]) > 0
2325	right < n
2326	cmp.compare(x, (T) c) <= 0
2327	cmp == null
2328	e == null
2329	cmp == null
2330	o != null
2331	o.equals(array[i])
2332	n == i
2333	cmp == null
2334	array[i] == moved
2335	cmp == null
2336	i == -1
2337	o == array[i]
2338	n == 0
2339	i != n - 1
2340	c == null
2341	c == this
2342	maxElements <= 0
2343	a.length < n
2344	a.length > n
556	initialCapacity < 1
557	c instanceof SortedSet<?>
558	c instanceof PriorityQueue<?>
559	c.getClass() == PriorityQueue.class
560	a.getClass() != Object[].class
561	this.comparator != null
561	len == 1
562	a[i] == null
563	newCapacity - MAX_ARRAY_SIZE > 0
564	minCapacity < 0
565	e == null
566	i >= queue.length
567	i == 0
568	size == 0
569	o != null
570	o.equals(queue[i])
571	i == -1
572	o == queue[i]
573	a.length < size
574	a.length > size
575	size == 0
576	s != 0
577	s == i
578	queue[i] == moved
579	queue[i] != moved
580	comparator != null
581	key.compareTo((E) e) >= 0
582	comparator.compare(x, (E) e) >= 0
583	comparator != null
584	right < size
584	((Comparable<? super E>) c).compareTo((E) queue[right]) > 0
585	key.compareTo((E) c) <= 0
586	right < size
586	comparator.compare((E) c, (E) queue[right]) > 0
587	comparator.compare(x, (E) c) <= 0
11138	command == null
11139	command == null
11140	security != null
11141	environment == null
11142	redirects == null
11143	source.type() == Redirect.Type.APPEND
11143	source.type() == Redirect.Type.WRITE
11144	destination.type() == Redirect.Type.READ
11145	destination.type() == Redirect.Type.READ
11146	arg == null
11147	security != null
11148	cmdarray[i].indexOf('\u0000') >= 0
11149	security != null
11149	e instanceof IOException
12616	name.indexOf('=') != -1
12616	name.indexOf('\u0000') != -1
12617	value.indexOf('\u0000') != -1
12618	x[i] != y[i]
12619	x.length != y.length
12620	x[i] != y[i]
11451	s == null
11452	redirects == null
11453	redirects[0] == Redirect.PIPE
11454	redirects[0] == Redirect.INHERIT
11455	redirects[1] == Redirect.PIPE
11456	redirects[1] == Redirect.INHERIT
11457	redirects[2] == Redirect.PIPE
11458	redirects[2] == Redirect.INHERIT
11459	f0 != null
11460	f1 != null
11461	f2 != null
4222	c == '='
4222	precedingBackslash
4222	c == ':'
4223	c == '\t'
4223	c == '\f'
4223	precedingBackslash
4223	c == ' '
4224	c == '\\'
4225	c != ' '
4225	c != '\t'
4225	c != '\f'
4226	hasSep
4226	c == ':'
4226	c == '='
4227	convtBuf.length < len
4228	newLen < 0
4229	aChar == '\\'
4230	aChar == 'u'
4231	aChar == 't'
4232	aChar == 'r'
4233	aChar == 'n'
4234	aChar == 'f'
4235	bufLen < 0
4236	aChar > 61
4236	aChar < 127
4237	aChar == '\\'
4238	escapeSpace
4238	x == 0
4239	aChar < 0x0020
4239	((aChar < 0x0020) || (aChar > 0x007e)) & escapeUnicode
4239	aChar > 0x007e
4240	c > '\u00ff'
4240	c == '\r'
4240	c == '\n'
4241	last != current
4242	c > '\u00ff'
4243	comments.charAt(current + 1) == '\n'
4243	c == '\r'
4243	current != len - 1
4244	current == len - 1
4244	comments.charAt(current + 1) != '#'
4244	comments.charAt(current + 1) != '!'
4245	last != current
4246	comments != null
4247	in == null
4248	os == null
4249	os == null
4250	val.length() > 40
4251	val.length() > 40
4252	defaults != null
4253	defaults != null
4254	k instanceof String
4254	v instanceof String
10351	sourceBean == null
10352	listener == null
10353	listener instanceof PropertyChangeListenerProxy
10354	listener == null
10355	listener instanceof PropertyChangeListenerProxy
10356	propertyName == null
10356	listener == null
10357	listener != null
10358	propertyName == null
10358	listener == null
10359	listener != null
10360	oldValue.equals(newValue)
10360	oldValue == null
10360	newValue == null
10361	oldValue != newValue
10362	oldValue != newValue
10363	newValue == null
10363	oldValue == null
10363	oldValue.equals(newValue)
10364	listeners != null
10365	oldValue == null
10365	newValue == null
10365	oldValue.equals(newValue)
10366	oldValue != newValue
10367	oldValue != newValue
10368	property == null
10369	children == null
10370	listeners != null
10371	l instanceof Serializable
10372	children != null
10547	beanClass == null
10548	propertyName == null
10548	propertyName.length() == 0
10549	"".equals(writeMethodName)
10549	"".equals(readMethodName)
10550	getReadMethod() == null
10550	readMethodName != null
10551	writeMethodName != null
10551	getWriteMethod() == null
10552	propertyName == null
10552	propertyName.length() == 0
10553	bean == null
10554	type == null
10555	readMethod == null
10556	cls == null
10556	readMethodName == null
10556	this.readMethodRef.isSet()
10557	readMethodName == null
10558	type == boolean.class
10558	type == null
10559	readMethod == null
10559	readMethodName.equals(nextMethodName)
10560	readMethod == null
10561	writeMethod == null
10562	cls == null
10562	this.writeMethodRef.isSet()
10562	writeMethodName == null
10563	type == null
10564	writeMethodName == null
10565	writeMethod != null
10566	writeMethod.getReturnType().equals(void.class)
10567	writeMethod == null
10568	clz.isAssignableFrom(getClass0())
10568	getClass0() != null
10569	cls != null
10570	bean != null
10571	ctor == null
10572	this == obj
10573	obj instanceof PropertyDescriptor
10573	obj != null
10574	compareMethods(getReadMethod(), otherReadMethod)
10575	compareMethods(getWriteMethod(), otherWriteMethod)
10576	bound == other.isBound()
10576	writeMethodName == other.writeMethodName
10576	getPropertyType() == other.getPropertyType()
10576	constrained == other.isConstrained()
10576	readMethodName == other.readMethodName
10576	getPropertyEditorClass() == other.getPropertyEditorClass()
10577	(a == null) != (b == null)
10578	b != null
10578	a != null
10579	a.equals(b)
10580	y.baseName != null
10581	y.readMethodName != null
10582	y.writeMethodName != null
10583	y.propertyTypeRef != null
10584	isAssignable(xr, yr)
10585	xr.getName().indexOf(Introspector.IS_PREFIX) == 0
10585	yr != null
10585	xr != null
10585	getReturnType(getClass0(), yr) == boolean.class
10585	getReturnType(getClass0(), xr) == boolean.class
10585	xr.getDeclaringClass() == yr.getDeclaringClass()
10585	yr.getName().indexOf(Introspector.GET_PREFIX) == 0
10586	yw != null
10587	y.getPropertyEditorClass() != null
10588	readMethod != null
10589	params.length != 0
10590	propertyType == Void.TYPE
10591	writeMethod != null
10592	params.length != 1
10593	params[0].isAssignableFrom(propertyType)
10593	propertyType != null
10594	baseName == null
10595	m1 == null
10596	m2 == null
10597	m1.getName().equals(m2.getName())
10598	type1.isAssignableFrom(type2)
10599	type1.isAssignableFrom(type2)
10600	args1.length != args2.length
10601	args1[i].isAssignableFrom(args2[i])
10406	sm != null
10407	sm != null
10627	source == null
10628	value instanceof String
10629	listeners == null
10630	listeners == null
10631	listeners == null
932	(mask & ALL) != mask
933	mask == NONE
934	getName() == null
935	p instanceof PropertyPermission
936	obj == this
937	obj instanceof PropertyPermission
938	actions == null
939	actions == SecurityConstants.PROPERTY_READ_ACTION
940	actions == SecurityConstants.PROPERTY_WRITE_ACTION
941	actions == SecurityConstants.PROPERTY_RW_ACTION
942	i < 0
943	a[i-3] == 'r'
943	a[i-2] == 'E'
943	a[i] == 'd'
943	a[i-2] == 'e'
943	a[i-3] == 'R'
943	i >= 3
943	a[i-1] == 'A'
943	a[i] == 'D'
943	a[i-1] == 'a'
944	a[i] == 'E'
944	a[i] == 'e'
944	a[i-2] == 'I'
944	a[i-1] == 't'
944	i >= 4
944	a[i-4] == 'w'
944	a[i-4] == 'W'
944	a[i-3] == 'R'
944	a[i-1] == 'T'
944	a[i-3] == 'r'
944	a[i-2] == 'i'
945	(mask & READ) == READ
946	(mask & WRITE) == WRITE
947	comma
948	actions == null
949	actions == null
950	permission instanceof PropertyPermission
951	isReadOnly()
952	existing != null
953	oldMask != newMask
954	all_allowed
955	propName.equals("*")
956	permission instanceof PropertyPermission
957	all_allowed
958	x != null
959	(effective & desired) == desired
960	x != null
961	(effective & desired) == desired
962	x != null
963	(effective & desired) == desired
4085	key == null
17127	permissions != null
17128	((Permissions)permissions).allPermission != null
17128	permissions instanceof Permissions
17129	permissions != null
17130	((Permissions)permissions).allPermission != null
17130	permissions instanceof Permissions
17131	hasAllPerm
17132	Policy.getPolicyNoCheck().implies(this, permission)
17132	staticPermissions
17133	permissions != null
17134	principals != null
17134	principals.length > 0
17135	i < principals.length-1
17136	sm == null
17137	debug != null
17138	Policy.getPolicyNoCheck().getClass().getClassLoader() == null
17138	sm.getClass().getClassLoader() == null
17139	staticPermissions
17140	permissions != null
17141	perms != null
17142	perms != null
17142	permissions != null
17143	pdpClass.isInstance(pp)
17144	pdpActions.equals(pp.getActions())
17144	pdpName.equals(pp.getName())
17145	perms !=null
17146	permissions != null
16944	debug != null
16945	debug != null
16946	debug != null
16947	entrySet == null
16948	entrySetCallCount++ == 0
16949	entrySetCallCount != 2
16950	debug != null
16951	debug != null
16952	initialized
16953	security != null
16954	key instanceof String
16955	keyString.startsWith("Provider.")
16956	legacyStrings == null
16957	value instanceof String
16957	key instanceof String
16958	keyString.startsWith("Provider.")
16959	legacyStrings == null
16960	legacyStrings != null
16961	legacyMap != null
16962	serviceMap != null
16963	legacyChanged == false
16963	legacyStrings == null
16964	legacyMap == null
16965	s.isValid() == false
16966	i < 1
16967	debug != null
16968	name.toLowerCase(ENGLISH).startsWith(ALIAS_PREFIX_LOWER)
16969	typeAndAlg == null
16970	s == null
16971	typeAndAlg == null
16972	i == -1
16973	s == null
16974	s == null
16975	key.matches(type, algorithm) == false
16976	serviceMap != null
16977	service != null
16978	servicesChanged
16978	legacyChanged
16979	serviceSet == null
16980	serviceMap != null
16981	legacyMap != null
16982	debug != null
16983	s == null
16984	s.getProvider() != this
16985	serviceMap == null
16986	debug != null
16987	s == null
16988	s == null
16988	serviceMap == null
16989	s != oldService
16990	e == null
12099	ProxyAccessHelper.needsNewInstanceCheck(proxyClass)
12099	sm != null
12100	sm != null
12101	sm != null
12102	loader == null
12102	ccl != null
12103	ProxyAccessHelper.allowNullLoader
12104	interfaces.length > 65535
12105	h == null
12106	sm != null
12107	sm != null
12107	ProxyAccessHelper.needsNewInstanceCheck(cl)
12108	t instanceof RuntimeException
12109	isProxyClass(proxy.getClass())
12110	System.getSecurityManager() != null
12111	ReflectUtil.needsPackageAccessCheck(caller.getClassLoader(), ihClass.getClassLoader())
14502	type == Type.DIRECT
14502	sa instanceof InetSocketAddress
14503	type() == Type.DIRECT
14504	obj == null
14504	obj instanceof Proxy
14505	p.type() == type()
14506	address() == null
14507	address() == null
15323	sm != null
15324	sm != null
14170	in == null
14171	size <= 0
14172	pos < buf.length
14173	b == null
14174	len > b.length - off
14174	len < 0
14174	off < 0
14175	len == 0
14176	avail > 0
14177	len < avail
14178	len > 0
14179	len == -1
14180	pos == 0
14181	len > pos
14182	n <= 0
14183	pskip > 0
14184	n < pskip
14185	n > 0
14186	in == null
14193	size <= 0
14194	buf == null
14195	pos < buf.length
14196	len <= 0
14197	len < 0
14198	off > cbuf.length
14198	off < 0
14199	avail > 0
14200	len < avail
14201	len > 0
14202	len == -1
14203	pos == 0
14204	len > pos
14205	n < 0L
14206	avail > 0
14207	n <= avail
5385	left != null
5386	right != null
5387	left != null
5388	right != null
5389	left != null
5390	right != null
5391	a == 0.0
5392	b == 0.0
5393	d < 0.0
5394	b < 0.0
5395	q != 0.0
5396	t0 != t0
5396	t0 > 1
5396	t0 < 0
5397	include0 ? t >= 0 : t > 0
5397	inflect == null
5397	include1 ? t <= 1 : t < 1
5397	inflect[1] + 2*inflect[2]*t != 0
5398	coord <= low
5399	coord >= high
5400	w <= 0
5400	h <= 0
5401	y1tag == INSIDE
5401	x1tag == INSIDE
5402	x2tag == INSIDE
5402	y2tag == INSIDE
5403	x2tag < INSIDE
5403	x1tag < INSIDE
5403	ctrlxtag < INSIDE
5404	ctrlytag < INSIDE
5404	y1tag < INSIDE
5404	y2tag < INSIDE
5405	x1tag > INSIDE
5405	x2tag > INSIDE
5405	ctrlxtag > INSIDE
5406	ctrlytag > INSIDE
5406	y1tag > INSIDE
5406	y2tag > INSIDE
5407	inwards(x1tag, x2tag, ctrlxtag)
5407	inwards(y1tag, y2tag, ctrlytag)
5408	inwards(x2tag, x1tag, ctrlxtag)
5408	inwards(y2tag, y1tag, ctrlytag)
5409	x2tag == INSIDE
5409	yoverlap
5409	x1tag == INSIDE
5410	y1tag == INSIDE
5410	y2tag == INSIDE
5410	xoverlap
5411	yoverlap
5412	xoverlap
5413	y1tag == INSIDE
5414	y2tag == INSIDE
5415	c1tag * c2tag <= 0
5416	w <= 0
5416	h <= 0
5119	isDone()
5120	index == 0
5121	affine != null
5122	isDone()
5123	index == 0
5124	affine != null
15727	index >= 0
15728	expandTable != null
15729	length > result
15729	valueList[length-1] == order
15730	pair.entryName.equals(name)
15730	pair.fwd == fwd
16326	pattern.length() == 0
16327	entry != null
16328	groupChars.length() > 1
16329	expChars.length() != 0
16330	groupChars.length() > 1
16331	Character.isHighSurrogate(ch)
16331	groupChars.length() == 2
16332	getCharOrder(c) == RBCollationTables.UNMAPPED
16333	s.length() == 1
16334	order != RBCollationTables.UNMAPPED
16335	s.length() == 2
16336	Character.isHighSurrogate(ch0)
16337	order != RBCollationTables.UNMAPPED
16338	contractOrder != RBCollationTables.UNMAPPED
16339	getCharOrder(s.charAt(i)) == RBCollationTables.UNMAPPED
16340	allThere
16341	expandTable != null
16342	order < RBCollationTables.EXPANDCHARINDEX
16342	order > CHARINDEX
16343	realValue == RBCollationTables.UNMAPPED
16344	isOverIgnore
16345	isOverIgnore
16346	order >= RBCollationTables.CONTRACTCHARINDEX
16347	Character.isSupplementaryCodePoint(ch)
16348	contractTable == null
16349	entryTable == null
16350	index != RBCollationTables.UNMAPPED
16351	groupChars.length() > pair.entryName.length()
16352	fwd
16352	groupChars.length() > 1
16353	contractTable != null
16354	entryTable != null
16355	index != RBCollationTables.UNMAPPED
16356	order >= RBCollationTables.CONTRACTCHARINDEX
16357	index >= 0
16358	contractChars.length() > 1
16359	Character.isHighSurrogate(ch)
16359	contractChars.length() == 2
16360	Character.isLowSurrogate(ch2)
16361	expandTable == null
16362	offset == 1
16363	Character.isHighSurrogate(ch0)
16364	++i == expandChars.length()
16364	Character.isLowSurrogate(ch1=expandChars.charAt(i))
16365	mapValue != RBCollationTables.UNMAPPED
16366	j < valueList.length
8501	canFilterIndexColorModel
8501	model instanceof IndexColorModel
8502	i != trans
8502	a[i] != ((byte)0xff)
8503	needalpha
8504	model == origmodel
8505	model == origmodel
10975	sm != null
10976	providerClassName != null
10977	providerClassName.equals("default")
10978	iter.hasNext()
10963	factory != null
10964	security != null
10965	defaultSocketFactory == null
10966	security != null
16768	modulus == null
16769	publicExponent == null
16770	privateExponent == null
16771	primeP == null
16772	primeQ == null
16773	primeExponentP == null
16774	primeExponentQ == null
16775	crtCoefficient == null
16776	otherPrimeInfo == null
16777	otherPrimeInfo.length == 0
16778	otherPrimeInfo == null
16754	prime == null
16755	primeExponent == null
16756	crtCoefficient == null
9436	center == null
9437	focus == null
9438	radius <= 0
9439	gradientBounds.isEmpty()
9248	distSq > radiusSq * SCALEBACK
9249	isSimpleFocus
9249	isNonCyclic
9249	isSimpleLookup
9250	gRel <= 0
9251	X == focusX
328	seedUniquifier.compareAndSet(current, next)
329	getClass() == Random.class
330	n <= 0
331	(n & -n) == n
332	haveNextNextGaussian
333	seedVal < 0
14251	mode.equals("r")
14252	mode.startsWith("rw")
14253	mode.length() > 2
14254	mode.equals("rws")
14255	mode.equals("rwd")
14256	imode < 0
14257	security != null
14258	rw
14259	name == null
14260	file.isInvalid()
14261	fd != null
14262	channel == null
14263	count < 0
14264	n <= 0
14265	newpos > len
14266	closed
14267	channel != null
14268	ch < 0
14269	ch < 0
14270	ch < 0
14271	(ch1 | ch2) < 0
14272	(ch1 | ch2) < 0
14273	(ch1 | ch2) < 0
14274	(ch1 | ch2 | ch3 | ch4) < 0
14275	(read()) != '\n'
14276	input.length() == 0
14276	c == -1
9103	bands < 1
9104	bankIndices == null
9105	bandOffsets == null
9106	bankIndices[i] > maxBank
9107	bandOffsets[i] > maxBandOff
9108	bands <= 0
9109	bitsPerBand <= 0
9110	bands != 1
9111	shift+bitsPerBand > DataBuffer.getDataTypeSize(dataType)
9112	dataBuffer == null
9113	location == null
9114	dataBuffer == null
9115	location == null
9116	bandOffsets.length != bands
9117	dataBuffer == null
9118	location == null
9119	dataBuffer == null
9120	location == null
9121	dataType != DataBuffer.TYPE_INT
9121	dataType != DataBuffer.TYPE_USHORT
9121	dataType != DataBuffer.TYPE_BYTE
9122	dataBuffer.getNumBanks() != 1
9123	bitsPerPixel == 1
9123	bitsPerPixel == 2
9123	bitsPerPixel == 4
9123	dataType == DataBuffer.TYPE_BYTE
9124	sm == null
9124	db == null
9125	location == null
9126	sm instanceof PixelInterleavedSampleModel
9127	sm instanceof SinglePixelPackedSampleModel
9128	sm instanceof MultiPixelPackedSampleModel
9128	sm.getSampleSize(0) < 8
9128	dataType == DataBuffer.TYPE_BYTE
9129	location == null
9130	db == null
9130	sm == null
9131	location == null
9132	sm instanceof PixelInterleavedSampleModel
9133	sm instanceof SinglePixelPackedSampleModel
9134	dataType == DataBuffer.TYPE_BYTE
9134	sm instanceof MultiPixelPackedSampleModel
9134	sm.getSampleSize(0) < 8
9135	aRegion == null
9135	dataBuffer == null
9135	sampleModelTranslate == null
9135	sampleModel == null
9136	height <= 0
9136	width <= 0
9137	(minX + width) < minX
9138	(minY + height) < minY
9139	h <=0
9139	w <= 0
9140	rect == null
9141	parentX < this.minX
9142	parentY < this.minY
9143	parentX + width < parentX
9143	parentX + width > this.width + this.minX
9144	parentY + height < parentY
9144	parentY + height > this.height + this.minY
9145	bandList == null
14343	lock == null
14344	n > 0
14345	read(cb, 0, 1) == -1
14346	n < 0L
14347	skipBuffer.length < nn
14347	skipBuffer == null
14348	nc == -1
5434	w < 0
5434	h < 0
5435	isDone()
5436	index == 5
5437	index == 2
5437	index == 1
5438	index == 3
5438	index == 2
5439	affine != null
5440	isDone()
5441	index == 5
5442	index == 2
5442	index == 1
5443	index == 2
5443	index == 3
5444	affine != null
6553	x > 2.0 * Integer.MAX_VALUE
6554	width >= 0
6555	y > 2.0 * Integer.MAX_VALUE
6556	height >= 0
6557	v <= Integer.MIN_VALUE
6558	v >= Integer.MAX_VALUE
6559	dx < 0
6560	newv > oldv
6561	width >= 0
6562	newv < oldv
6563	width >= 0
6564	width < 0
6565	dy < 0
6566	newv > oldv
6567	height >= 0
6568	newv < oldv
6569	height >= 0
6570	height < 0
6571	(w | h | W | H) < 0
6572	Y < y
6572	X < x
6573	W <= X
6574	W > w
6574	w >= x
6575	w >= x
6575	W > w
6576	H <= Y
6577	H > h
6577	h >= y
6578	H > h
6578	h >= y
6579	(w | h) < 0
6580	Y < y
6580	X < x
6581	rh <= 0
6581	tw <= 0
6581	rw <= 0
6581	th <= 0
6582	tx1 < rx1
6583	ty1 < ry1
6584	tx2 > rx2
6585	ty2 > ry2
6586	tx2 < Integer.MIN_VALUE
6587	ty2 < Integer.MIN_VALUE
6588	(tx2 | ty2) < 0
6589	(rx2 | ry2) < 0
6590	tx1 > rx1
6591	ty1 > ry1
6592	tx2 < rx2
6593	ty2 < ry2
6594	tx2 > Integer.MAX_VALUE
6595	ty2 > Integer.MAX_VALUE
6596	(width | height) < 0
6597	x1 > newx
6598	y1 > newy
6599	x2 < newx
6600	y2 < newy
6601	x2 > Integer.MAX_VALUE
6602	y2 > Integer.MAX_VALUE
6603	(tx2 | ty2) < 0
6604	(rx2 | ry2) < 0
6605	tx1 > rx1
6606	ty1 > ry1
6607	tx2 < rx2
6608	ty2 < ry2
6609	tx2 > Integer.MAX_VALUE
6610	ty2 > Integer.MAX_VALUE
6611	x1 < x0
6612	x1 < Integer.MIN_VALUE
6613	x0 < Integer.MIN_VALUE
6614	x0 > Integer.MAX_VALUE
6615	x0 < Integer.MIN_VALUE
6616	x0 > Integer.MAX_VALUE
6617	x1 < Integer.MIN_VALUE
6618	x1 > Integer.MAX_VALUE
6619	y1 < y0
6620	y1 < Integer.MIN_VALUE
6621	y0 < Integer.MIN_VALUE
6622	y0 > Integer.MAX_VALUE
6623	y0 < Integer.MIN_VALUE
6624	y0 > Integer.MAX_VALUE
6625	y1 < Integer.MIN_VALUE
6626	y1 > Integer.MAX_VALUE
6627	this.width <= 0
6628	x < this.x
6629	x > this.x + (double) this.width
6630	this.height <= 0
6631	y < this.y
6632	y > this.y + (double) this.height
6633	r instanceof Rectangle
6634	r instanceof Rectangle
6635	obj instanceof Rectangle
5125	(out2 = outcode(x2, y2)) == 0
5126	(out1 & out2) != 0
5127	(out1 & (OUT_LEFT | OUT_RIGHT)) != 0
5128	(out1 & OUT_RIGHT) != 0
5129	(out1 & OUT_BOTTOM) != 0
5130	w <= 0
5130	isEmpty()
5130	h <= 0
5131	h <= 0
5131	w <= 0
5131	isEmpty()
5132	obj == this
5133	obj instanceof Rectangle2D
5081	x2 < x1
5082	y2 < y1
5083	width < 0
5083	height < 0
2066	condition == null
2067	condition instanceof AbstractQueuedSynchronizer.ConditionObject
2068	condition == null
2069	condition instanceof AbstractQueuedSynchronizer.ConditionObject
2070	condition == null
2071	condition instanceof AbstractQueuedSynchronizer.ConditionObject
2072	condition == null
2073	condition instanceof AbstractQueuedSynchronizer.ConditionObject
2074	condition == null
2075	condition instanceof AbstractQueuedSynchronizer.ConditionObject
2076	condition == null
2077	condition instanceof AbstractQueuedSynchronizer.ConditionObject
11113	r.queue == ENQUEUED
11114	r instanceof FinalReference
11115	head != null
11116	r instanceof FinalReference
11117	head == null
11118	timeout < 0
11119	r != null
11120	r != null
11121	timeout != 0
1356	universe.length != 0
1357	universe.length != 0
1358	e == null
1359	eClass.getSuperclass() != elementType
1359	eClass != elementType
1360	e == null
1361	eClass.getSuperclass() != elementType
1361	eClass != elementType
1362	c instanceof RegularEnumSet
1363	es.elementType != elementType
1364	c instanceof RegularEnumSet
1365	es.elementType != elementType
1366	es.isEmpty()
1367	c instanceof RegularEnumSet
1368	es.elementType != elementType
1369	c instanceof RegularEnumSet
1370	es.elementType != elementType
1371	o instanceof RegularEnumSet
1372	es.elementType != elementType
10931	detail == null
10979	obj instanceof RemoteStub
10979	obj != null
10979	Proxy.getInvocationHandler(obj) instanceof RemoteObjectInvocationHandler
10979	Proxy.isProxyClass(obj.getClass())
10980	obj instanceof RemoteObject
10981	ref == null
10982	obj != null
10983	ref == null
10984	refClassName.length() == 0
10984	refClassName == null
10985	refClassName.length() == 0
10985	refClassName == null
10952	ref == null
10953	method.getDeclaringClass() == Object.class
10954	name.equals("hashCode")
10955	name.equals("equals")
10956	name.equals("toString")
10957	proxy instanceof Remote
10958	e instanceof RuntimeException
10959	declaredType.isAssignableFrom(thrownType)
10960	interfaces.length == 0
10961	iface.equals("java.rmi.Remote")
10961	interfaces.length > 1
10962	dot >= 0
8979	paramBlock.getNumSources() > 0
8980	o instanceof RenderableImage
8981	boundingBox == null
8982	boundingBox == null
8983	boundingBox == null
8984	boundingBox == null
8985	Math.abs(sx/sy - 1.0) < 0.01
8986	sources != null
8987	rdrdImage == null
8988	renderedSources.size() > 0
8976	ics.contains(ic)
8977	rc != null
8978	colorModel == null
4943	init != null
4944	((Key) key).isCompatibleValue(value)
4945	RenderingHints.class.isInstance(m)
4946	o instanceof RenderingHints
4947	o instanceof Map
4948	hintmap != null
4949	hintmap == null
8391	height == 0
8391	width == 0
8392	o instanceof String
8392	o != null
8393	destWidth < 0
8394	destHeight < 0
8395	destHeight < 0
8396	srccols == null
8396	srcrows == null
8397	outpixbuf != null
8397	outpixbuf instanceof byte[]
8398	dx > dx1
8399	srccols == null
8399	srcrows == null
8400	outpixbuf != null
8400	outpixbuf instanceof int[]
8401	dx > dx1
8676	length > offsets.length
8677	scaleFactors == null
8678	offsets == null
8679	(val & 0xffffff00) != 0
8680	val < 0
8681	(val & 0xffff0000) != 0
8682	val < 0
8683	datatype != DataBuffer.TYPE_BYTE
8683	datatype != DataBuffer.TYPE_USHORT
8684	dstNbits == 16
8684	dstNbits == 8
8685	bandSize != dstNbits
8686	srcNbits > 16
8687	bandSize != srcNbits
8688	srcCM instanceof IndexColorModel
8689	length != srcCM.getNumComponents()
8689	length != numBands
8689	length != 1
8690	srcCM.hasAlpha()
8690	length > numBands
8691	dst == null
8692	width != dst.getWidth()
8693	height != dst.getHeight()
8694	srcCM.getColorSpace().getType() != dstCM.getColorSpace().getType()
8695	ImagingLib.filter(this, src, dst) == null
8696	srcCM.hasAlpha()
8697	length == 1
8697	numBands-1 == length
8698	dstCM.hasAlpha()
8699	dstNumBands-1 == length
8699	length == 1
8700	needToConvert
8701	dst == null
8702	height != dst.getHeight()
8702	width != dst.getWidth()
8703	numBands != dst.getNumBands()
8704	length != 1
8704	length != src.getNumBands()
8705	ImagingLib.filter(this, src, dst) != null
8706	canUseLookup(src, dst)
8707	dstNgray == 256
8708	length > 1
8709	(val & dstMask[z]) != 0
8710	val < 0
8711	destCM == null
8712	dstPt == null
334	obj == null
335	parent != null
336	obj == null
337	cl == null
338	loader == null
339	loader == null
339	control == null
340	control == null
340	locale == null
341	bundleRef != null
342	isValidBundle(bundle)
342	hasValidParentChain(bundle)
343	isKnownControl
343	checkList(formats)
344	checkList(candidateLocales)
344	isKnownControl
345	isValidBundle(bundle)
346	bundle.locale.equals(locale)
346	candidateLocales.size() == 1
346	isBaseBundle
346	bundle.locale.equals(candidateLocales.get(0))
347	isBaseBundle
347	baseBundle == null
348	bundle == null
349	baseBundle == null
350	valid
351	index != candidateLocales.size() - 1
352	baseBundle != null
352	Locale.ROOT.equals(targetLocale)
353	isValidBundle(bundle)
354	expiredBundle
355	bundle.parent == parent
356	bundleRef.get() == bundle
356	bundleRef != null
357	bundle != NONEXISTENT_BUNDLE
358	bundle != null
359	bundle.parent == null
360	constKey.getCause() instanceof InterruptedException
361	bundle != null
362	bundle.expired
363	key != null
364	expirationTime >= 0
364	expirationTime <= now
365	cause instanceof MissingResourceException
366	bundleRef == null
367	bundle == null
368	p != null
368	p.expired
369	expirationTime <= System.currentTimeMillis()
369	bundle.expired
369	expirationTime >= 0
370	bundle != NONEXISTENT_BUNDLE
371	expirationTime <= System.currentTimeMillis()
371	expirationTime >= 0
371	bundle.expired
372	bundle.expired
373	cacheKey.expirationTime != Control.TTL_DONT_CACHE
374	result != null
375	rb != null
375	rb.expired
376	ttl >= 0
377	ttl >= Control.TTL_NO_EXPIRATION_CONTROL
378	loader == null
379	key.getLoader() == loader
380	key == null
381	rb.handleKeySet().contains(key)
382	keySet == null
383	keySet == null
384	handleGetObject(key) != null
14938	sm != null
14939	sm != null
4668	GraphicsEnvironment.isHeadless()
4669	toolkit instanceof ComponentFactory
4670	LEGAL_BUTTON_MASK != 0
4671	Toolkit.getDefaultToolkit().areExtraMouseButtonsEnabled()
4672	Toolkit.getDefaultToolkit() instanceof SunToolkit
4673	security != null
4674	device.getType() != GraphicsDevice.TYPE_RASTER_SCREEN
4674	device == null
4675	(buttons|LEGAL_BUTTON_MASK) != LEGAL_BUTTON_MASK
4676	keycode == KeyEvent.VK_UNDEFINED
4677	screenCapCM == null
4678	rect.height <= 0
4678	rect.width <= 0
4679	security != null
4680	isAutoWaitForIdle
4681	ms < 0
4681	ms > MAX_DELAY
4682	EventQueue.isDispatchThread()
5084	ah < 0
5084	aw < 0
5085	isDone()
5086	affine != null
5087	isDone()
5088	affine != null
5462	isEmpty()
5463	y < rry0
5463	x >= rrx1
5463	x < rrx0
5463	y >= rry1
5464	x < (rrx0 = rrx1 - aw)
5464	x >= (rrx0 += aw)
5465	y < (rry0 = rry1 - ah)
5465	y >= (rry0 += ah)
5466	coord < left
5467	coord < left + arcsize
5468	coord < right - arcsize
5469	coord < right
5470	h <= 0
5470	w <= 0
5470	isEmpty()
5471	x + w <= rrx0
5471	y + h <= rry0
5471	x >= rrx1
5471	y >= rry1
5472	y0class == 2
5472	x0class == 2
5472	y1class == 2
5472	x1class == 2
5473	y0class < 2
5473	y1class > 2
5473	x0class < 2
5473	x1class > 2
5474	isEmpty()
5474	h <= 0
5474	w <= 0
5475	obj == this
5476	obj instanceof RoundRectangle2D
16013	additionalDataLength > 0
16014	is.read(buf) != len
16015	buf[offset] != LABEL[offset]
16016	buf[offset] != supportedVersion
16017	is.read(buf) != len
16018	text != null
16019	that == null
16020	checksum != other.checksum
16021	text == null
16022	current() == text.getBeginIndex()
16023	lastResult >= start
16023	lastResult <= BreakIterator.DONE
16024	Character.isLowSurrogate(c2)
16024	text.getIndex() > text.getBeginIndex()
16025	Character.isHighSurrogate(c1)
16026	Character.isHighSurrogate(c1)
16026	text.getIndex() < text.getEndIndex()
16027	Character.isLowSurrogate(c2)
16028	Character.isHighSurrogate(c1)
16028	text.getIndex() < text.getEndIndex()
16029	Character.isLowSurrogate(c2)
16030	index == endIndex
16030	(index = index + getCurrentCodePointCount()) >= endIndex
16031	index > endIndex
16032	offset < text.getBeginIndex()
16032	offset > text.getEndIndex()
16033	offset == text.getBeginIndex()
16034	result <= BreakIterator.DONE
16034	result >= offset
16035	offset == text.getBeginIndex()
16036	text == null
16037	goodIterator
16038	text.getIndex() == text.getEndIndex()
16039	category != IGNORE
16040	lookaheadStates[state]
16041	endStates[state]
16042	endStates[state]
16043	c == CharacterIterator.DONE
16043	lookaheadResult == text.getEndIndex()
16044	category != IGNORE
16045	c != CharacterIterator.DONE
16046	lastCategory != IGNORE
16047	c < Character.MIN_SUPPLEMENTARY_CODE_POINT
15674	result <= Collator.LESS
15675	result >= Collator.GREATER
15676	this == target
15677	target == null
15677	getClass().equals(target.getClass())
16524	source == null
16524	target == null
16525	sourceCursor == null
16526	targetCursor == null
16527	gets
16528	gett
16529	tOrder == CollationElementIterator.NULLORDER
16529	sOrder == CollationElementIterator.NULLORDER
16530	sOrder == tOrder
16531	pSOrder != 0
16531	tables.isFrenchSec()
16532	checkSecTer
16533	pSOrder != pTOrder
16534	sOrder == 0
16535	tOrder == 0
16536	pSOrder == 0
16537	checkSecTer
16538	pTOrder == 0
16539	checkSecTer
16540	pSOrder < pTOrder
16541	checkSecTer
16542	secSOrder != secTOrder
16543	checkTertiary
16544	terSOrder != terTOrder
16545	sOrder != CollationElementIterator.NULLORDER
16546	CollationElementIterator.primaryOrder(sOrder) != 0
16547	CollationElementIterator.secondaryOrder(sOrder) != 0
16548	checkSecTer
16549	tOrder != CollationElementIterator.NULLORDER
16550	CollationElementIterator.primaryOrder(tOrder) != 0
16551	CollationElementIterator.secondaryOrder(tOrder) != 0
16552	checkSecTer
16553	result == 0
16553	getStrength() == IDENTICAL
16554	mode == CANONICAL_DECOMPOSITION
16555	mode == FULL_DECOMPOSITION
16556	source == null
16557	primResult == null
16558	sourceCursor == null
16559	CollationElementIterator.isIgnorable(order)
16560	compareSec
16561	preSecIgnore < secResult.length()
16561	tables.isFrenchSec()
16562	compareTer
16563	compareSec
16563	secOrder != 0
16564	compareTer
16564	terOrder != 0
16565	tables.isFrenchSec()
16566	preSecIgnore < secResult.length()
16567	getStrength() == IDENTICAL
16568	mode == CANONICAL_DECOMPOSITION
16569	mode == FULL_DECOMPOSITION
16570	getClass() == RuleBasedCollator.class
16571	obj == null
16572	super.equals(obj)
11375	security != null
11376	sm != null
11377	sm != null
11378	sm != null
11379	security != null
11380	command.length() == 0
11381	security != null
11382	new File(filename).isAbsolute()
11383	security != null
11384	libname.indexOf((int)File.separatorChar) != -1
12697	this instanceof SQLWarning
12698	DriverManager.getLogWriter() != null
12699	this instanceof SQLWarning
12700	DriverManager.getLogWriter() != null
12701	this instanceof SQLWarning
12702	DriverManager.getLogWriter() != null
12703	this instanceof SQLWarning
12704	DriverManager.getLogWriter() != null
12705	this instanceof SQLWarning
12706	DriverManager.getLogWriter() != null
12707	this instanceof SQLWarning
12708	DriverManager.getLogWriter() != null
12709	this instanceof SQLWarning
12710	DriverManager.getLogWriter() != null
12711	this instanceof SQLWarning
12712	DriverManager.getLogWriter() != null
12713	next != null
12714	nextUpdater.compareAndSet(current,null,ex)
8469	w <= 0
8469	h <= 0
8470	size >= Integer.MAX_VALUE
8471	dataType != DataBuffer.TYPE_UNDEFINED
8471	dataType < DataBuffer.TYPE_BYTE
8471	dataType > DataBuffer.TYPE_DOUBLE
8472	numBands <= 0
8473	iArray != null
8474	y1 < 0
8474	w > width
8474	y1 > height
8474	y < 0
8474	x1 < 0
8474	x < 0
8474	y >= height
8474	x >= width
8474	x1 > width
8474	h > height
8475	obj == null
8476	obj == null
8477	obj == null
8478	obj == null
8479	obj == null
8480	x1 > width
8480	y1 < 0
8480	x1 < 0
8480	y < 0
8480	y >= height
8480	w > width
8480	x >= width
8480	h > height
8480	x < 0
8480	y1 > height
8481	fArray != null
8482	dArray != null
8483	x >= width
8483	h > height
8483	y < 0
8483	y1 > height
8483	x < 0
8483	x1 > width
8483	w > width
8483	y >= height
8483	x1 < 0
8483	y1 < 0
8484	iArray != null
8485	x1 < 0
8485	y1 < 0
8485	y1 > height
8485	x1 > width
8485	w > width
8485	x < 0
8485	h > height
8485	x >= width
8485	y >= height
8485	y < 0
8486	fArray != null
8487	h > height
8487	x < 0
8487	x1 < 0
8487	y1 > height
8487	w > width
8487	x1 > width
8487	y < 0
8487	y >= height
8487	x >= width
8487	y1 < 0
8488	dArray != null
8489	x < 0
8489	y < 0
8489	y1 < y
8489	y1 > height
8489	x1 > width
8489	x1 < x
8490	iArray != null
8491	y1 > height
8491	x1 > width
8491	x < 0
8491	y < 0
8491	y1 < y
8491	x1 < x
8492	fArray != null
8493	y < 0
8493	y1 < y
8493	y1 > height
8493	x1 > width
8493	x < 0
8493	x1 < x
8494	dArray != null
8495	x1 < 0
8495	w > width
8495	y1 > height
8495	x < 0
8495	h > height
8495	y1 < 0
8495	x >= width
8495	x1 > width
8495	y < 0
8495	y >= height
8496	y >= height
8496	w > width
8496	y1 > height
8496	x1 < 0
8496	x1 > width
8496	x >= width
8496	y1 < 0
8496	h > height
8496	x < 0
8496	y < 0
8497	x < 0
8497	y >= height
8497	x1 < 0
8497	w > width
8497	x >= width
8497	y1 < 0
8497	x1 > width
8497	y < 0
8497	y1 > height
8497	h > height
8498	x1 > width
8498	x1 < 0
8498	y < 0
8498	y1 > height
8498	x >= width
8498	y1 < 0
8498	w > width
8498	y >= height
8498	x < 0
8498	h > height
8499	w > width
8499	h > height
8499	x1 > width
8499	y1 > height
8499	x < 0
8499	x >= width
8499	y < 0
8499	x1 < 0
8499	y1 < 0
8499	y >= height
8500	x1 < 0
8500	y1 > height
8500	x < 0
8500	x >= width
8500	w > width
8500	h > height
8500	y < 0
8500	y >= height
8500	y1 < 0
8500	x1 > width
1452	bp == null
1453	integerPattern == null
1454	sp == null
1455	lp == null
1456	floatPattern == null
1457	decimalPattern == null
1458	closed
1459	buf.limit() == buf.capacity()
1460	n == -1
1461	n > 0
1462	offset > 0
1463	savedScannerPosition != -1
1464	sourceClosed
1464	position == buf.limit()
1465	matcher.lookingAt()
1466	position == buf.limit()
1467	skipped
1468	matcher.lookingAt()
1469	matcher.hitEnd()
1469	sourceClosed
1470	position == buf.limit()
1471	sourceClosed
1472	matcher.end() == position
1472	foundNextDelim
1473	foundNextDelim
1474	matcher.requireEnd()
1474	sourceClosed
1475	pattern == null
1476	matcher.matches()
1477	sourceClosed
1478	pattern == null
1479	matcher.matches()
1480	horizon > 0
1481	horizonLimit < bufferLimit
1482	matcher.find()
1483	matcher.hitEnd()
1483	sourceClosed
1484	searchLimit != horizonLimit
1485	searchLimit == horizonLimit
1485	matcher.requireEnd()
1486	sourceClosed
1487	horizon == 0
1487	searchLimit != horizonLimit
1488	matcher.lookingAt()
1489	sourceClosed
1489	matcher.hitEnd()
1490	sourceClosed
1491	closed
1492	closed
1493	source instanceof Closeable
1494	locale.equals(this.locale)
1495	positivePrefix.length() > 0
1496	negativePrefix.length() > 0
1497	positiveSuffix.length() > 0
1498	negativeSuffix.length() > 0
1499	radix > Character.MAX_RADIX
1499	radix < Character.MIN_RADIX
1500	this.defaultRadix == radix
1501	this.radix != radix
1502	matchValid
1503	hasTokenInBuffer()
1504	token != null
1505	needInput
1506	pattern == null
1507	getCompleteTokenInBuffer(pattern) != null
1508	needInput
1509	pattern == null
1510	hasNextPattern == pattern
1511	token != null
1512	needInput
1513	result != null
1514	lineSep != null
1515	hasNextPattern == linePattern()
1516	result == null
1517	lineSep != null
1518	result == null
1519	pattern == null
1520	token != null
1521	needInput
1522	horizonForLine == 0
1523	pattern == null
1524	horizon < 0
1525	token != null
1526	needInput
1527	pattern == null
1528	token != null
1529	needInput
1530	result
1531	typeCache instanceof Byte
1531	typeCache != null
1531	this.radix == radix
1532	matcher.group(SIMPLE_GROUP_INDEX) == null
1533	result
1534	typeCache != null
1534	typeCache instanceof Short
1534	this.radix == radix
1535	matcher.group(SIMPLE_GROUP_INDEX) == null
1536	result
1537	preLen > 0
1537	result.startsWith(negativePrefix)
1538	sufLen > 0
1538	result.endsWith(negativeSuffix)
1539	isNegative
1540	typeCache != null
1540	typeCache instanceof Integer
1540	this.radix == radix
1541	matcher.group(SIMPLE_GROUP_INDEX) == null
1542	result
1543	this.radix == radix
1543	typeCache != null
1543	typeCache instanceof Long
1544	matcher.group(SIMPLE_GROUP_INDEX) == null
1545	decimalSeparator.equals("\\.")
1546	result.startsWith(negativePrefix)
1546	preLen > 0
1547	sufLen > 0
1547	result.endsWith(negativeSuffix)
1548	result.equals(nanString)
1549	result.equals(infinityString)
1550	isNegative
1551	m.find()
1552	Character.isDigit(nextChar)
1553	d != -1
1554	result
1555	typeCache != null
1555	typeCache instanceof Float
1556	result
1557	typeCache instanceof Double
1557	typeCache != null
1558	result
1559	typeCache != null
1559	typeCache instanceof BigInteger
1559	this.radix == radix
1560	matcher.group(SIMPLE_GROUP_INDEX) == null
1561	result
1562	typeCache != null
1562	typeCache instanceof BigDecimal
3016	isShutdown()
3017	isShutdown()
3017	remove(task)
3017	canRunInCurrentRunState(task.isPeriodic())
3018	canRunInCurrentRunState(true)
3019	remove(task)
3019	canRunInCurrentRunState(true)
3020	keepPeriodic
3020	keepDelayed
3021	e instanceof RunnableScheduledFuture<?>
3022	e instanceof RunnableScheduledFuture
3023	t.isPeriodic() ? !keepPeriodic : !keepDelayed
3023	keepPeriodic
3023	keepDelayed
3023	t.isCancelled()
3024	q.remove(t)
3025	head != null
3026	delay - headDelay < 0
3026	headDelay < 0
3027	command == null
3027	unit == null
3028	unit == null
3028	callable == null
3029	unit == null
3029	command == null
3030	period <= 0
3031	command == null
3031	unit == null
3032	delay <= 0
3033	isShutdown()
3033	value
3034	isShutdown()
3034	value
7547	getComponentCount() > 0
7548	index > 0
7549	SunToolkit.isLightweightOrUnknown(comp)
7550	scrollbarDisplayPolicy != SCROLLBARS_NEVER
7551	peer != null
7552	scrollbarDisplayPolicy != SCROLLBARS_NEVER
7553	peer != null
7554	getComponentCount()==0
7555	getComponentCount()==0
7556	scrollbarDisplayPolicy == SCROLLBARS_AS_NEEDED
7557	scrollbarDisplayPolicy == SCROLLBARS_ALWAYS
7558	vbarOn
7559	hbarOn
7560	childSize.width < viewWidth
7561	childSize.height < viewHeight
7562	getComponentCount()==0
7563	peer != null
7564	getComponentCount()==0
7565	getComponentCount() > 0
7566	peer == null
7567	getComponentCount() > 0
7568	isWheelScrollingEnabled()
7569	isWheelScrollingEnabled()
7569	type == MouseEvent.MOUSE_WHEEL
7570	accessibleContext == null
7571	peer != null
6636	u != unitIncrement
6637	sp.peer != null
6638	isAdjusting != b
6639	v != value
6640	l == null
6641	l == null
10155	peer == null
10156	orientation == this.orientation
10157	peer != null
10158	accessibleContext != null
10159	newMaximum == Integer.MIN_VALUE
10160	minimum >= newMaximum
10161	lineIncrement == tmp
10162	peer != null
10163	pageIncrement == tmp
10164	peer != null
10165	minimum == Integer.MAX_VALUE
10166	maximum <= minimum
10167	maxMinusMin > Integer.MAX_VALUE
10168	visible > (int) maxMinusMin
10169	visible < 1
10170	value < minimum
10171	value > maximum - visible
10172	peer != null
10173	oldValue != value
10173	accessibleContext != null
10174	accessibleContext != null
10174	oldValue != b
10175	l == null
10176	l == null
10177	listenerType == AdjustmentListener.class
10178	e.id == AdjustmentEvent.ADJUSTMENT_VALUE_CHANGED
10179	adjustmentListener != null
10179	(eventMask & AWTEvent.ADJUSTMENT_EVENT_MASK) != 0
10180	e instanceof AdjustmentEvent
10181	listener != null
10182	adjustmentListenerK == key
10183	accessibleContext == null
15362	stream
15363	socket != null
15364	serverSocket != null
16822	security != null
16823	security != null
16824	cs == null
16825	pd == null
16826	debug != null
16827	initialized
17473	prng == null
17474	setSeed
17475	setSeed
17476	getClass() == SecureRandom.class
17477	seed != 0
17478	seedGenerator == null
17479	s.getType().equals("SecureRandom")
16652	propFile.exists()
16653	sdebug != null
16654	sdebug != null
16655	is != null
16656	sdebug != null
16657	"true".equalsIgnoreCase(props.getProperty ("security.overridePropertiesFile"))
16658	extraPropFile.startsWith("=")
16658	extraPropFile != null
16659	overrideAll
16660	sdebug != null
16661	extraPropFile != null
16662	propFile.exists()
16663	sdebug != null
16664	overrideAll
16665	sdebug != null
16666	bis != null
16667	sdebug != null
16668	loadedProps
16669	sdebug != null
16670	prop == null
16671	key.equalsIgnoreCase(matchKey)
16672	prop != null
16673	prop == null
16674	key.equalsIgnoreCase(matchKey)
16675	entry != null
16676	list == newList
16677	index == -1
16678	allProviders == null
16678	keySet == null
16679	firstSearch
16680	newCandidates != null
16680	newCandidates.isEmpty()
16681	newCandidates.contains(prov)
16682	candidates.isEmpty()
16682	candidates == null
16683	clazz != null
16684	provider == null
16685	provider == null
16686	sm != null
16687	name != null
16688	pa
16688	pd
16689	security != null
16690	isCriterionSatisfied(allProviders[i], serviceName, algName, attrName, filterValue)
16691	attrName != null
16692	propValue == null
16693	standardName != null
16694	attrName != null
16695	propValue == null
16696	attrName == null
16697	isStandardAttr(attrName)
16698	attribute.equalsIgnoreCase("KeySize")
16699	attribute.equalsIgnoreCase("ImplementedIn")
16700	attribute.equalsIgnoreCase("KeySize")
16701	requestedSize <= maxSize
16702	attribute.equalsIgnoreCase("ImplementedIn")
16703	algIndex < 0
16704	filterValue.length() == 0
16705	algName.length() == 0
16706	attrIndex == -1
16707	attrName.length() == 0
16708	algIndex == attrIndex - 1
16708	attrIndex < algIndex
16709	serviceName == null
16709	serviceName.length() == 0
16709	serviceName.endsWith(".")
16710	currentKey.startsWith(serviceName.toUpperCase())
16711	currentKey.indexOf(" ") < 0
12621	sm != null
12622	hasAllPermission()
12622	cl != null
12623	c != null
12623	hasAllPermission()
12624	depth != -1
12625	hasAllPermission()
12626	context instanceof AccessControlContext
12627	t == null
12628	t.getThreadGroup() == rootGroup
12629	g == null
12630	g == rootGroup
12631	f.isAbsolute()
12632	lib == null
12633	fd == null
12634	fd == null
12635	host == null
12636	host.indexOf(':') != -1
12636	host.startsWith("[")
12637	port == -1
12638	host == null
12639	host.startsWith("[")
12639	host.indexOf(':') != -1
12640	port == -1
12641	host == null
12642	host.indexOf(':') != -1
12642	host.startsWith("[")
12643	host.indexOf(':') != -1
12643	host.startsWith("[")
12644	host.startsWith("[")
12644	host.indexOf(':') != -1
12645	window == null
12646	p.equals("")
12646	p != null
12647	n > 0
12648	packages == null
12649	pkg == null
12650	packageAccessValid
12651	pkg.startsWith(pkgs[i])
12651	pkgs[i].equals(pkg + ".")
12652	pkg == null
12653	packageDefinitionValid
12654	pkgs[i].equals(pkg + ".")
12654	pkg.startsWith(pkgs[i])
12655	clazz == null
12656	which != Member.PUBLIC
12657	stack.length<4
12657	stack[3].getClassLoader() != clazz.getClassLoader()
13332	sm != null
13333	cn == null
13334	i.hasNext()
13335	sce.getCause() instanceof SecurityException
13336	provider != null
2850	permits < 0
2851	permits < 0
2852	permits < 0
2853	permits < 0
2854	permits < 0
2855	reduction < 0
5063	nested != null
5064	toNotify != null
5065	toNotify != null
14155	in != null
14156	e.hasMoreElements()
14157	in == null
14158	in == null
14159	in == null
14160	c == -1
14161	in == null
14162	b == null
14163	len > b.length - off
14163	len < 0
14163	off < 0
14164	len == 0
14165	n <= 0
9946	getFirst() != this
9947	EventQueue.isDispatchThread()
9948	disposed
9949	se != null
9950	target instanceof Component
9951	disposed
9952	disposed
9953	KeyboardFocusManager.getCurrentKeyboardFocusManager(). getCurrentSequencedEvent() == this
9954	appContext != null
9955	list.getFirst() == this
9956	list.isEmpty()
9957	next != null
9957	next.appContext != null
14166	thread != Thread.currentThread()
9295	obj instanceof Serializable
10974	detail == null
14690	port > 0xFFFF
14690	port < 0
14691	backlog < 1
14692	created
14693	impl == null
14694	factory != null
14695	impl != null
14696	impl == null
14697	isClosed()
14698	oldImpl
14698	isBound()
14699	endpoint == null
14700	endpoint instanceof InetSocketAddress
14701	epoint.isUnresolved()
14702	backlog < 1
14703	security != null
14704	isBound()
14705	NetUtil.doRevealLocalAddress()
14706	sm != null
14707	isBound()
14708	isBound()
14709	isClosed()
14710	isBound()
14711	s.impl == null
14712	security != null
14713	si != null
14714	si != null
14715	isClosed()
14716	created
14717	isClosed()
14718	isClosed()
14719	o instanceof Integer
14720	isClosed()
14721	isClosed()
14722	isBound()
14723	NetUtil.doRevealLocalAddress()
14723	System.getSecurityManager() != null
14724	factory != null
14725	security != null
14726	size > 0
14727	isClosed()
14728	isClosed()
14729	o instanceof Integer
4537	ln == null
4538	ci >= 0
4539	n != 0
4540	ln.indexOf('\t') >= 0
4540	ln.indexOf(' ') >= 0
4541	Character.isJavaIdentifierStart(cp)
4542	cp != '.'
4542	Character.isJavaIdentifierPart(cp)
4543	providers.containsKey(ln)
4543	names.contains(ln)
4544	r != null
4545	in != null
7269	fStroke == STROKE
7270	fStroke == STROKE
7271	rhs == null
7272	this == rhs
7273	fStroke != rhs.fStroke
7274	getAlignment() != rhs.getAlignment()
7275	fShape.equals(rhs.fShape)
12029	i < MIN_VALUE
12029	i > MAX_VALUE
12030	sAsInt <= 127
12030	sAsInt >= -128
12031	i > MAX_VALUE
12031	i < MIN_VALUE
12032	obj instanceof Short
13189	capacity < 0
13190	length > remaining()
13191	src == this
13192	n > remaining()
13193	length > remaining()
13194	hb == null
13195	isReadOnly
13196	hb == null
13197	isReadOnly
13198	this == ob
13199	ob instanceof ShortBuffer
13200	this.remaining() != that.remaining()
13201	equals(this.get(i), that.get(j))
13202	cmp != 0
8402	dst == null
8403	numComponents == 1
8404	s < 0
8405	s < 0
8406	dst == null
8407	numComponents == 1
8408	s < 0
8409	s < 0
11284	hooks[slot] != null
11285	registerShutdownInProgress
11286	state > RUNNING
11287	slot <= currentRunningHook
11287	state > HOOKS
11287	state == HOOKS
11288	hook != null
11289	t instanceof ThreadDeath
11290	state != HOOKS
11291	rfoe
11292	status != 0
11293	status != 0
11294	runMoreFinalizers
16712	algorithm.equalsIgnoreCase(RSA_SIGNATURE)
16713	t.hasNext() == false
16714	isSpi(s)
16715	instance.impl instanceof Signature
16716	s.getType().equals("Cipher")
16717	result == null
16718	debug != null
16718	r == false
16719	algorithm.equalsIgnoreCase(RSA_SIGNATURE)
16720	provider == null
16720	provider.length() == 0
16721	p == null
16722	algorithm.equalsIgnoreCase(RSA_SIGNATURE)
16723	provider == null
16724	s != null
16725	certificate instanceof java.security.cert.X509Certificate
16726	critSet != null
16726	critSet.contains("2.5.29.15")
16726	critSet.isEmpty()
16727	keyUsageInfo[0] == false
16727	keyUsageInfo != null
16728	state == SIGN
16729	outbuf == null
16730	offset < 0
16730	len < 0
16731	outbuf.length - offset < len
16732	state != SIGN
16733	state == VERIFY
16734	state == VERIFY
16735	signature == null
16736	offset < 0
16736	length < 0
16737	signature.length - offset < length
16738	state == SIGN
16738	state == VERIFY
16739	state == SIGN
16739	state == VERIFY
16740	data == null
16741	len < 0
16741	off < 0
16742	data.length - off < len
16743	state != VERIFY
16743	state != SIGN
16744	data == null
16745	this instanceof Cloneable
16623	input.hasRemaining() == false
16624	input.hasArray()
16625	len < sig.length
16626	outbuf.length - offset < sig.length
16627	this instanceof Cloneable
18004	sign == addend.sign
18005	sign == 1
18006	sign == addend.sign
18007	sign == 1
18008	intLen == 0
16832	priv == null
16832	pub == null
16833	publicKey != null
16833	privateKey != null
16834	security != null
10211	url != null
10212	ip != null
16054	pattern == null
16054	locale == null
16055	pattern == null
16055	formatSymbols == null
16056	loc == null
16057	dateTimePatterns == null
16058	isGregorianCalendar()
16059	dateTimePatterns == null
16060	timeStyle >= 0
16060	dateStyle >= 0
16061	timeStyle >= 0
16062	dateStyle >= 0
16063	numberFormat == null
16064	calendar == null
16065	c == '\''
16066	(i + 1) < length
16067	c == '\''
16068	count != 0
16069	inQuote
16070	inQuote
16071	count != 0
16072	tmpBuffer == null
16073	len == 1
16074	ch < 128
16075	inQuote
16076	c >= 'a'
16076	c <= 'Z'
16076	c <= 'z'
16076	c >= 'A'
16077	count != 0
16078	c < 128
16079	d == '\''
16079	d <= 'Z'
16079	d >= 'a'
16079	d >= 'A'
16079	d <= 'z'
16080	(tag = DateFormatSymbols.patternChars.indexOf(c)) == -1
16081	lastTag == -1
16081	lastTag == tag
16082	inQuote
16083	count != 0
16084	length >= 4
16084	tag == PATTERN_ISO_ZONE
16085	length < 255
16086	count == 255
16087	obj instanceof Date
16088	obj instanceof Number
16089	obj == null
16090	field == CalendarBuilder.WEEK_YEAR
16091	calendar.isWeekDateSupported()
16092	field == CalendarBuilder.ISO_DAY_OF_WEEK
16093	field != CalendarBuilder.ISO_DAY_OF_WEEK
16093	useDateFormatSymbols
16094	useDateFormatSymbols
16095	value < eras.length
16096	current == null
16097	calendar instanceof GregorianCalendar
16098	count != 2
16099	current == null
16100	useDateFormatSymbols
16101	count >= 4
16102	count == 3
16103	count < 3
16104	current == null
16105	current == null
16106	value == 0
16107	useDateFormatSymbols
16108	count >= 4
16109	useDateFormatSymbols
16110	current == null
16111	value == 0
16112	current == null
16113	formatData.locale == null
16113	formatData.isZoneStringsSet
16114	zoneIndex == -1
16115	count < 4
16116	value >= 0
16117	value == 0
16118	value >= 0
16119	count == 1
16120	count == 3
16121	current == null
16122	current != null
16123	zeroDigit == 0
16124	value >= 0
16125	minDigits <= 2
16125	value < 100
16125	minDigits >= 1
16126	value < 10
16127	minDigits == 2
16128	value >= 1000
16128	value < 10000
16129	minDigits == 4
16130	maxDigits == 2
16130	minDigits == 2
16131	count == 255
16132	text.charAt(start) != (char)count
16132	start >= textLength
16133	text.charAt(start) != compiledPattern[i++]
16133	start >= textLength
16134	i < compiledPattern.length
16135	nextTag == TAG_QUOTE_CHARS
16135	nextTag == TAG_QUOTE_ASCII_CHAR
16136	nextTag == TAG_QUOTE_ASCII_CHAR
16136	hasFollowingMinusSign
16136	nextTag == TAG_QUOTE_CHARS
16137	nextTag == TAG_QUOTE_ASCII_CHAR
16138	c == minusSign
16139	start < 0
16140	ambiguousYear[0]
16141	parsedDate.before(defaultCenturyStart)
16142	field == Calendar.DAY_OF_WEEK
16143	length > bestMatchLength
16143	text.regionMatches(true, start, data[i], 0, length)
16144	bestMatch >= 0
16145	data != null
16146	length > bestMatch.length()
16146	bestMatch == null
16147	text.regionMatches(true, start, name, 0, length)
16148	bestMatch != null
16149	text.regionMatches(true, start, zoneName, 0, zoneName.length())
16150	text.regionMatches(true, start, zoneName, 0, zoneName.length())
16151	zoneIndex != -1
16152	(nameIndex = matchZoneString(text, start, zoneNames)) > 0
16153	nameIndex <= 2
16154	tz == null
16155	zoneIndex != -1
16156	(nameIndex = matchZoneString(text, start, zoneNames)) > 0
16157	nameIndex <= 2
16158	tz == null
16159	(nameIndex = matchZoneString(text, start, zoneNames)) > 0
16160	nameIndex <= 2
16161	tz != null
16162	tz.equals(currentTimeZone)
16163	nameIndex >= 3
16163	useSameName
16163	dstAmount == 0
16164	isDigit(c)
16165	isDigit(c)
16166	colon
16166	count > 0
16167	hours > 23
16168	count != 1
16169	colon
16170	c != ':'
16171	isDigit(c)
16172	isDigit(c)
16173	minutes > 59
16174	patternCharIndex == PATTERN_WEEK_YEAR
16174	calendar.isWeekDateSupported()
16175	pos.index >= text.length()
16176	c != ' '
16176	c != '\t'
16177	patternCharIndex == PATTERN_HOUR1
16177	patternCharIndex == PATTERN_YEAR
16177	patternCharIndex == PATTERN_MONTH
16177	patternCharIndex == PATTERN_HOUR_OF_DAY1
16177	count <= 2
16177	patternCharIndex == PATTERN_WEEK_YEAR
16178	obeyCount
16179	(start+count) > text.length()
16180	number == null
16181	patternCharIndex != PATTERN_YEAR
16181	calendar instanceof GregorianCalendar
16182	pos.index == text.length()
16182	pos.index < text.length()
16182	text.charAt(pos.index) != minusSign
16182	useFollowingMinusSignAsDelimiter
16182	text.charAt(pos.index-1) == minusSign
16182	value < 0
16183	useDateFormatSymbols
16184	(index = matchString(text, start, Calendar.ERA, formatData.getEras(), calb)) > 0
16185	(index = matchString(text, start, field, map, calb)) > 0
16186	calendar instanceof GregorianCalendar
16187	map != null
16188	(index = matchString(text, start, field, map, calb)) > 0
16189	count <= 2
16189	Character.isDigit(text.charAt(start))
16189	(pos.index - start) == 2
16189	Character.isDigit(text.charAt(start+1))
16190	count <= 2
16191	useDateFormatSymbols
16192	(newStart = matchString(text, start, Calendar.MONTH, formatData.getMonths(), calb)) > 0
16193	(index = matchString(text, start, Calendar.MONTH, formatData.getShortMonths(), calb)) > 0
16194	(index = matchString(text, start, field, map, calb)) > 0
16195	isLenient()
16196	value < 1
16196	value > 24
16197	value == calendar.getMaximum(Calendar.HOUR_OF_DAY)+1
16198	useDateFormatSymbols
16199	(newStart=matchString(text, start, Calendar.DAY_OF_WEEK, formatData.getWeekdays(), calb)) > 0
16200	(index = matchString(text, start, Calendar.DAY_OF_WEEK, formatData.getShortWeekdays(), calb)) > 0
16201	(index = matchString(text, start, field, map, calb)) > 0
16202	useDateFormatSymbols
16203	(index = matchString(text, start, Calendar.AM_PM, formatData.getAmPmStrings(), calb)) > 0
16204	(index = matchString(text, start, field, map, calb)) > 0
16205	isLenient()
16206	value > 12
16206	value < 1
16207	value == calendar.getLeastMaximum(Calendar.HOUR)+1
16208	c == '+'
16209	c == '-'
16210	sign == 0
16211	c == 'G'
16211	text.regionMatches(true, start, GMT, 0, GMT.length())
16211	(text.length() - start) >= GMT.length()
16211	c == 'g'
16212	(text.length() - pos.index) > 0
16213	c == '+'
16214	c == '-'
16215	sign == 0
16216	i > 0
16217	i > 0
16218	i > 0
16219	(text.length() - pos.index) <= 0
16220	c == 'Z'
16221	c == '+'
16222	c == '-'
16223	i > 0
16224	obeyCount
16225	(start+count) > text.length()
16226	number != null
16227	useFollowingMinusSignAsDelimiter
16227	value < 0
16227	pos.index == text.length()
16227	text.charAt(pos.index-1) == minusSign
16227	pos.index < text.length()
16227	text.charAt(pos.index) != minusSign
16228	useDateFormatSymbols
16229	inQuote
16230	c == '\''
16231	c == '\''
16232	c <= 'z'
16232	c <= 'Z'
16232	c >= 'A'
16232	c >= 'a'
16233	ci >= 0
16234	ci < to.length()
16235	inQuote
16236	super.equals(obj)
16237	serialVersionOnStream < 1
16238	tz instanceof SimpleTimeZone
16239	zi.getID().equals(id)
16239	zi != null
16239	zi.hasSameRules(tz)
16240	numberFormat instanceof DecimalFormat
16240	numberFormat.equals(originalNumberFormat)
16241	numberPattern.equals(originalNumberPattern)
16242	separatorIndex > -1
16243	minusIndex > numberPattern.lastIndexOf('0')
16243	minusIndex > numberPattern.lastIndexOf('#')
12929	exc != null
1708	record.getSourceClassName() != null
1709	record.getSourceMethodName() != null
1710	record.getThrown() != null
4364	dstSavings <= 0
4365	after
4366	after
4367	useDaylight
4368	cacheStart != 0
4369	date >= cacheStart
4369	date < cacheEnd
4370	year >= startYear
4371	offsets != null
4372	era != GregorianCalendar.BC
4372	era != GregorianCalendar.AD
4373	era == GregorianCalendar.BC
4374	y >= 292278994
4375	y <= -292269054
4376	time < GregorianCalendar.DEFAULT_GREGORIAN_CUTOVER
4377	dayOfWeek > Calendar.SATURDAY
4377	millis < 0
4377	cdate.getMonth() != m
4377	cdate.getNormalizedYear() != y
4377	millis >= (24*60*60*1000)
4377	cdate.getDayOfMonth() != day
4377	dayOfWeek < Calendar.SUNDAY
4378	era != GregorianCalendar.CE
4378	year < startYear
4378	useDaylight
4379	cacheStart != 0
4380	time >= cacheStart
4380	time < cacheEnd
4381	year == cacheYear
4382	start <= end
4383	time < end
4383	time >= start
4384	time < end
4385	time >= start
4386	time >= start
4387	time < end
4388	start <= end
4389	startTimeMode != UTC_TIME
4390	endTimeMode != UTC_TIME
4391	endTimeMode == WALL_TIME
4392	dayOfMonth < 0
4393	millisSavedDuringDST <= 0
4394	this == obj
4395	obj instanceof SimpleTimeZone
4396	this == other
4397	other instanceof SimpleTimeZone
4398	startDay != 0
4399	startMonth > Calendar.DECEMBER
4399	startMonth < Calendar.JANUARY
4400	startTime < 0
4400	startTime > millisPerDay
4401	startDayOfWeek == 0
4402	startDayOfWeek > 0
4403	startDay > 0
4404	startDayOfWeek > Calendar.SATURDAY
4405	startMode == DOW_IN_MONTH_MODE
4406	startDay < -5
4406	startDay > 5
4407	startDay < 1
4407	startDay > staticMonthLength[startMonth]
4408	endDay != 0
4409	endMonth < Calendar.JANUARY
4409	endMonth > Calendar.DECEMBER
4410	endTime < 0
4410	endTime > millisPerDay
4411	endDayOfWeek == 0
4412	endDayOfWeek > 0
4413	endDay > 0
4414	endDayOfWeek > Calendar.SATURDAY
4415	endMode == DOW_IN_MONTH_MODE
4416	endDay < -5
4416	endDay > 5
4417	endDay > staticMonthLength[endMonth]
4417	endDay < 1
4418	startDay != 1
4419	startDay >= 30
4420	endDay != 1
4421	endDay >= 30
4422	rules.length >= 6
4423	serialVersionOnStream < 1
4424	startDayOfWeek == 0
4425	endDayOfWeek == 0
4426	serialVersionOnStream >= 2
8359	dataType != DataBuffer.TYPE_BYTE
8359	dataType != DataBuffer.TYPE_USHORT
8359	dataType != DataBuffer.TYPE_INT
8360	dataType != DataBuffer.TYPE_BYTE
8360	dataType != DataBuffer.TYPE_USHORT
8360	dataType != DataBuffer.TYPE_INT
8361	mask != 0
8362	mask != 0
8363	bitSize > maxBitSize
8364	bands.length > numBands
8365	y >= height
8365	x >= width
8365	y < 0
8365	x < 0
8366	obj == null
8367	obj == null
8368	obj == null
8369	x >= width
8369	y >= height
8369	x < 0
8369	y < 0
8370	iArray == null
8371	x < 0
8371	x >= width
8371	h > height
8371	y >= height
8371	y1 > height
8371	w > width
8371	y < 0
8371	x1 > width
8371	y1 < 0
8371	x1 < 0
8372	iArray != null
8373	y < 0
8373	x < 0
8373	y >= height
8373	x >= width
8374	y + h > height
8374	x + w > width
8374	x < 0
8374	y < 0
8375	iArray != null
8376	x >= width
8376	x < 0
8376	y >= height
8376	y < 0
8377	x >= width
8377	x < 0
8377	y < 0
8377	y >= height
8378	w > width
8378	y1 < 0
8378	h > height
8378	y < 0
8378	x < 0
8378	x1 < 0
8378	y1 > height
8378	x1 > width
8378	x >= width
8378	y >= height
8379	x >= width
8379	y >= height
8379	x < 0
8379	y < 0
8380	y + h > height
8380	y < 0
8380	x + w > width
8380	x < 0
8381	o instanceof SinglePixelPackedSampleModel
8381	o == null
15487	proxy == null
15488	p.type() == Proxy.Type.SOCKS
15489	epoint.getAddress() != null
15490	security != null
15491	epoint.isUnresolved()
15492	epoint.isUnresolved()
15493	p == Proxy.NO_PROXY
15494	factory == null
15495	impl != null
15496	address == null
15497	localAddr != null
15498	address != null
15499	impl == null
15500	impl == null
15501	factory != null
15502	impl != null
15503	created
15504	endpoint == null
15505	timeout < 0
15506	isClosed()
15507	isConnected()
15507	oldImpl
15508	endpoint instanceof InetSocketAddress
15509	security != null
15510	epoint.isUnresolved()
15511	created
15512	oldImpl
15513	timeout == 0
15514	epoint.isUnresolved()
15515	isClosed()
15516	isBound()
15516	oldImpl
15517	bindpoint != null
15517	bindpoint instanceof InetSocketAddress
15518	epoint.isUnresolved()
15518	epoint != null
15519	epoint == null
15520	security != null
15521	addr == null
15522	addr instanceof Inet6Address
15522	addr instanceof Inet4Address
15523	isConnected()
15524	isBound()
15525	NetUtil.doRevealLocalAddress()
15526	sm != null
15527	in.isAnyLocalAddress()
15528	isConnected()
15529	isBound()
15530	isConnected()
15531	isBound()
15532	isClosed()
15533	isConnected()
15534	isInputShutdown()
15535	isClosed()
15536	isConnected()
15537	isOutputShutdown()
15538	isClosed()
15539	isClosed()
15540	isClosed()
15541	on
15542	linger < 0
15543	linger > 65535
15544	isClosed()
15545	o instanceof Integer
15546	getImpl().supportsUrgentData ()
15547	isClosed()
15548	isClosed()
15549	isClosed()
15550	timeout < 0
15551	isClosed()
15552	o instanceof Integer
15553	size > 0
15554	isClosed()
15555	isClosed()
15556	o instanceof Integer
15557	size <= 0
15558	isClosed()
15559	isClosed()
15560	o instanceof Integer
15561	isClosed()
15562	isClosed()
15563	tc < 0
15563	tc > 255
15564	isClosed()
15565	isClosed()
15566	isClosed()
15567	isClosed()
15568	created
15569	isClosed()
15570	isConnected()
15571	isInputShutdown()
15572	isClosed()
15573	isConnected()
15574	isOutputShutdown()
15575	isConnected()
15576	factory != null
15577	security != null
1783	port == 0
1784	host == null
1785	sock != null
1786	isLoggable(record)
15369	eof
15370	impl.isConnectionReset()
15371	off + length > b.length
15371	length <= 0
15371	off < 0
15372	length == 0
15373	n > 0
15374	gotReset
15375	n > 0
15376	impl.isClosedOrPending()
15377	impl.isConnectionResetPending()
15378	impl.isConnectionReset()
15379	eof
15380	n <= 0
15381	numbytes <= 0
15382	r < 0
15383	closing
15384	socket != null
15385	socket.isClosed()
14651	len <= 0
14651	off < 0
14651	off + len > b.length
14652	len == 0
14653	se instanceof sun.net.ConnectionResetException
14654	impl.isClosedOrPending()
14655	closing
14656	socket != null
14657	socket.isClosed()
15183	debugInit
15184	host.equals("")
15185	host.charAt(0) != '['
15186	(ind = host.indexOf(':')) != host.lastIndexOf(':')
15187	tokens == 9
15188	tokens == 8
15188	host.indexOf("::") == -1
15189	port.equals("")
15189	port.equals("*")
15189	port == null
15190	dash == -1
15191	low.equals("")
15192	high.equals("")
15193	h<l
15193	h < 0
15193	l < 0
15194	(mask & ALL) != mask
15195	host.charAt(0) == '['
15196	rb != -1
15197	sep != -1
15198	sep != -1
15199	host.lastIndexOf('*') > 0
15200	host.startsWith("*")
15201	host.equals("*")
15202	host.startsWith("*.")
15203	host.length() > 0
15204	ch == ':'
15204	Character.digit(ch, 16) != -1
15205	ip == null
15206	ip != null
15207	action == null
15208	action.equals("")
15209	action == SecurityConstants.SOCKET_RESOLVE_ACTION
15210	action == SecurityConstants.SOCKET_CONNECT_ACTION
15211	action == SecurityConstants.SOCKET_LISTEN_ACTION
15212	action == SecurityConstants.SOCKET_ACCEPT_ACTION
15213	action == SecurityConstants.SOCKET_CONNECT_ACCEPT_ACTION
15214	i < 0
15215	a[i-4] == 'N'
15215	a[i-3] == 'N'
15215	a[i-5] == 'o'
15215	a[i-5] == 'O'
15215	a[i-1] == 'C'
15215	a[i-3] == 'n'
15215	i >= 6
15215	a[i] == 'T'
15215	a[i-1] == 'c'
15215	a[i] == 't'
15215	a[i-2] == 'e'
15215	a[i-6] == 'C'
15215	a[i-6] == 'c'
15215	a[i-4] == 'n'
15215	a[i-2] == 'E'
15216	a[i-3] == 'O'
15216	a[i-6] == 'r'
15216	a[i-5] == 'e'
15216	a[i-2] == 'l'
15216	a[i-1] == 'v'
15216	a[i-4] == 's'
15216	a[i-1] == 'V'
15216	i >= 6
15216	a[i-6] == 'R'
15216	a[i-3] == 'o'
15216	a[i-5] == 'E'
15216	a[i] == 'E'
15216	a[i-4] == 'S'
15216	a[i-2] == 'L'
15216	a[i] == 'e'
15217	a[i] == 'N'
15217	a[i-1] == 'E'
15217	a[i-4] == 'I'
15217	a[i-3] == 'S'
15217	i >= 5
15217	a[i-2] == 'T'
15217	a[i-4] == 'i'
15217	a[i-1] == 'e'
15217	a[i] == 'n'
15217	a[i-2] == 't'
15217	a[i-5] == 'l'
15217	a[i-5] == 'L'
15217	a[i-3] == 's'
15218	a[i-4] == 'C'
15218	a[i-5] == 'a'
15218	a[i] == 'T'
15218	i >= 5
15218	a[i-3] == 'C'
15218	a[i-3] == 'c'
15218	a[i-4] == 'c'
15218	a[i-1] == 'P'
15218	a[i-5] == 'A'
15218	a[i-2] == 'e'
15218	a[i-2] == 'E'
15218	a[i-1] == 'p'
15218	a[i] == 't'
15219	trusted
15220	untrusted
15220	invalid
15221	sun.net.www.URLConnection.isProxiedHost(hostname)
15221	defaultDeny
15221	trustNameService
15222	this.cname == null
15223	match(cname, hostname)
15224	authorized(hostname, addresses[0].getAddress())
15225	Debug.isOn("failure")
15225	debug != null
15226	cname != null
15226	invalid
15226	untrusted
15227	addresses == null
15228	init_with_ip
15229	a.charAt(b.length()) == '.'
15229	a.startsWith(b)
15229	a.length() == b.length()
15230	cdomain == null
15231	hdomain == null
15232	addr.length == 4
15233	addr.length == 16
15234	auth.equals(InetAddress.getByAddress(addr))
15235	Debug.isOn("failure")
15235	debug != null
15236	debug != null
15236	Debug.isOn("failure")
15237	auth.equals(InetAddress.getByAddress(addr))
15238	debug != null
15238	Debug.isOn("failure")
15239	debug != null
15239	Debug.isOn("failure")
15240	addresses != null
15240	wildcard
15240	invalid
15241	getName().charAt(0) == '['
15242	i == -1
15243	p instanceof SocketPermission
15244	p == this
15245	(that.mask & RESOLVE) != that.mask
15246	that.portrange[0] < this.portrange[0]
15246	that.portrange[1] > this.portrange[1]
15247	that.includesEphemerals()
15247	this.includesEphemerals()
15248	inRange(this.portrange[0], this.portrange[1], that.portrange[0], that.portrange[1])
15249	"".equals(this.cname)
15249	this.wildcard
15250	this.invalid
15250	that.invalid
15251	this.init_with_ip
15252	that.wildcard
15253	that.init_with_ip
15254	that.addresses == null
15255	this.addresses[0].equals(that.addresses[i])
15256	this.wildcard
15256	that.wildcard
15257	this.wildcard
15257	that.wildcard
15258	that.wildcard
15259	that.cname == null
15260	this.addresses == null
15261	that.addresses == null
15262	that.init_with_ip
15262	this.isUntrusted()
15263	this.addresses[j].equals(that.addresses[i])
15264	this.cname == null
15265	that.cname == null
15266	thisHost == null
15267	obj == this
15268	obj instanceof SocketPermission
15269	this.mask != that.mask
15270	(that.mask & RESOLVE) != that.mask
15271	this.portrange[0] != that.portrange[0]
15271	this.portrange[1] != that.portrange[1]
15272	this.getName().equalsIgnoreCase(that.getName())
15273	this.invalid
15273	that.invalid
15274	this.cname != null
15275	init_with_ip
15275	wildcard
15276	invalid
15276	cname == null
15277	(mask & CONNECT) == CONNECT
15278	(mask & LISTEN) == LISTEN
15279	comma
15280	(mask & ACCEPT) == ACCEPT
15281	comma
15282	(mask & RESOLVE) == RESOLVE
15283	comma
15284	actions == null
15285	actions == null
15286	targetLow == 0
15287	inRange(policyLow, policyHigh, ephemeralLow, ephemeralHigh)
15288	targetHigh == 0
15289	policyHigh == 0
15289	policyLow == 0
15290	policyLow != 0
15291	policyHigh >= ephemeralLow - 1
15292	permission instanceof SocketPermission
15293	isReadOnly()
15294	permission instanceof SocketPermission
15295	x.impliesIgnoreMask(np)
15295	(needed & x.getMask()) != 0
15296	(effective & desired) == desired
14367	a instanceof InetSocketAddress
14368	deadlineMillis == 0L
14369	remaining > 0
14370	count < 0
14371	method == NO_AUTH
14372	method == USER_PASSW
14373	pw != null
14374	userName == null
14375	password != null
14376	i != 2
14376	data[1] != 0
14377	endpoint.getAddress() instanceof Inet4Address
14378	n != 8
14379	data[0] != 0
14379	data[0] != 4
14380	ex != null
14381	timeout == 0
14382	endpoint instanceof InetSocketAddress
14382	endpoint == null
14383	security != null
14384	epoint.isUnresolved()
14385	server == null
14386	sel == null
14387	host.indexOf(":") >= 0
14387	epoint.getAddress() instanceof Inet6Address
14387	host.startsWith("[")
14388	iProxy == null
14388	iProxy.hasNext()
14389	p == Proxy.NO_PROXY
14389	p == null
14390	p.type() != Proxy.Type.SOCKS
14391	p.address() instanceof InetSocketAddress
14392	p instanceof SocksProxy
14393	((SocksProxy)p).protocolVersion() == 4
14394	server == null
14395	useV4
14396	epoint.isUnresolved()
14397	i != 2
14397	((int)data[0]) != PROTO_VERS
14398	epoint.isUnresolved()
14399	((int)data[1]) == NO_METHODS
14400	authenticate(data[1], in, out, deadlineMillis)
14401	epoint.isUnresolved()
14402	epoint.getAddress() instanceof Inet6Address
14403	i != 4
14404	i != 4
14405	i != 2
14406	i != len
14407	i != 2
14408	i != len
14409	i != 2
14410	ex != null
14411	baddr instanceof Inet4Address
14412	naddr.isAnyLocalAddress()
14413	n != 8
14414	data[0] != 4
14414	data[0] != 0
14415	ex != null
14416	socket != null
14417	server == null
14418	sel == null
14419	host.startsWith("[")
14419	host.indexOf(":") >= 0
14419	saddr.getAddress() instanceof Inet6Address
14420	iProxy.hasNext()
14420	iProxy == null
14421	p == null
14421	p == Proxy.NO_PROXY
14422	p.type() != Proxy.Type.SOCKS
14423	p.address() instanceof InetSocketAddress
14424	p instanceof SocksProxy
14425	((SocksProxy)p).protocolVersion() == 4
14426	cmdsock == null
14426	server == null
14427	cmdsock == null
14428	ex != null
14429	s instanceof SocksSocketImpl
14430	s instanceof PlainSocketImpl
14431	external_address != null
14432	external_address != null
14433	socket != null
14434	external_address != null
14435	cmdsock != null
14436	applicationSetProxy
11112	this.timestamp != clock
11112	o != null
7647	GraphicsEnvironment.isHeadless()
7648	theInstance == null
7648	wasClosed
7649	_isVisible(ptr)
7649	ptr != 0
7650	available <= 0
7651	off + available > length
7652	off + available > length
7653	result < 0
7654	_setImageData(splashPtr, buf)
7655	isVisible()
7656	imageURL == null
7657	fileName != null
7658	jarName != null
7659	log.isLoggable(PlatformLogger.FINE)
7660	image==null
7661	image == null
7662	buf instanceof DataBufferInt
7663	numBanks!=1
7664	image.getSampleModel() instanceof SinglePixelPackedSampleModel
4083	len == 0
4084	i >= 0
12033	obj==this
12034	obj instanceof StackTraceElement
10386	acc == null
10386	System.getSecurityManager() != null
10387	methodName == null
10387	target == null
10388	arguments == null
10389	target == Class.class
10389	methodName.equals("forName")
10390	target instanceof Class
10391	methodName.equals("new")
10392	methodName.equals("newInstance")
10392	((Class)target).isArray()
10393	arguments.length != 0
10393	methodName.equals("newInstance")
10394	arguments.length == 1
10394	argClasses[0] == String.class
10394	target == Character.class
10395	m == null
10395	target != Class.class
10396	m == null
10397	methodName.equals("get")
10397	target.getClass().isArray()
10397	methodName.equals("set")
10398	methodName.equals("get")
10399	m != null
10400	m instanceof Method
10401	te instanceof Exception
10402	instance == null
10403	instance.getClass() == String.class
10404	arguments == null
10405	i != n -1
1714	out == null
1715	encoding == null
1716	output == null
1717	encoding == null
1718	isLoggable(record)
1719	doneHeader
1720	record == null
1720	writer == null
1721	writer != null
1722	writer != null
1723	doneHeader
13711	is == null
13712	r == null
13713	low < 0
13714	hi >= ctype.length
13715	low < 0
13716	hi >= ctype.length
13717	low < 0
13718	hi >= ctype.length
13719	ch < ctype.length
13719	ch >= 0
13720	ch < ctype.length
13720	ch >= 0
13721	ch < ctype.length
13721	ch >= 0
13722	reader != null
13723	input != null
13724	pushedBack
13725	c < 0
13726	c == SKIP_LF
13727	c < 0
13728	c == '\n'
13729	c == NEED_CHAR
13730	c < 0
13731	c == '\r'
13732	eolIsSignificantP
13733	c == '\n'
13734	c == '\n'
13735	eolIsSignificantP
13736	c < 0
13737	(ctype & CT_DIGIT) != 0
13738	c == '-'
13739	c < '0'
13739	c != '.'
13739	c > '9'
13740	c == '.'
13740	seendot == 0
13741	'0' <= c
13741	c <= '9'
13742	decexp != 0
13743	(ctype & CT_ALPHA) != 0
13744	i >= buf.length
13745	forceLower
13746	(ctype & CT_QUOTE) != 0
13747	d == '\\'
13748	c <= '7'
13748	c >= '0'
13749	'0' <= c2
13749	c2 <= '7'
13750	'0' <= c2
13750	c2 <= '7'
13750	first <= '3'
13751	i >= buf.length
13752	slashSlashCommentsP
13752	c == '/'
13752	slashStarCommentsP
13753	slashStarCommentsP
13753	c == '*'
13754	c == '\r'
13755	c == '\n'
13756	c == '\n'
13757	c < 0
13758	c == '/'
13758	slashSlashCommentsP
13759	(ct['/'] & CT_COMMENT) != 0
13760	(ctype & CT_COMMENT) != 0
13761	ttype != TT_NOTHING
13762	ttype < 256
13762	(ctype[ttype] & CT_QUOTE) != 0
11502	exponent < 0
11503	exponent >= 52
11504	(mask & doppel) == 0L
11505	sign*a > 0.0
11506	a < twoToThe52
11507	rnd == null
11508	a != a
11509	a == 0.0f
11509	Float.floatToRawIntBits(a) == negativeZeroFloatBits
11509	b == 0.0f
11510	a != a
11511	a == 0.0d
11511	b == 0.0d
11511	Double.doubleToRawLongBits(a) == negativeZeroDoubleBits
11512	a != a
11513	b == 0.0f
11513	Float.floatToRawIntBits(b) == negativeZeroFloatBits
11513	a == 0.0f
11514	a != a
11515	a == 0.0d
11515	b == 0.0d
11515	Double.doubleToRawLongBits(b) == negativeZeroDoubleBits
12290	offset < 0
12291	count < 0
12292	offset > value.length - count
12293	offset < 0
12294	count < 0
12295	offset > codePoints.length - count
12296	Character.isBmpCodePoint(c)
12297	Character.isValidCodePoint(c)
12298	Character.isBmpCodePoint(c)
12299	hibyte == 0
12300	length < 0
12301	offset < 0
12302	offset > bytes.length - length
12303	charsetName == null
12304	charset == null
12305	index < 0
12305	index >= value.length
12306	index < 0
12306	index >= value.length
12307	i < 0
12307	i >= value.length
12308	beginIndex > endIndex
12308	beginIndex < 0
12308	endIndex > value.length
12309	index < 0
12309	index > value.length
12310	srcBegin < 0
12311	srcEnd > value.length
12312	srcBegin > srcEnd
12313	srcBegin < 0
12314	srcEnd > value.length
12315	srcBegin > srcEnd
12316	charsetName == null
12317	charset == null
12318	this == anObject
12319	anObject instanceof String
12320	n == anotherString.value.length
12321	v1[i] != v2[i]
12322	value.length != cs.length()
12323	cs instanceof AbstractStringBuilder
12324	v1[i] != v2[i]
12325	cs.equals(this)
12326	v1[i] != cs.charAt(i)
12327	c1 != c2
12328	toffset > (long)value.length - len
12328	toffset < 0
12328	ooffset < 0
12328	ooffset > (long)other.value.length - len
12329	ta[to++] != pa[po++]
12330	toffset > (long)value.length - len
12330	ooffset < 0
12330	ooffset > (long)other.value.length - len
12330	toffset < 0
12331	c1 == c2
12332	ignoreCase
12333	u1 == u2
12334	Character.toLowerCase(u1) == Character.toLowerCase(u2)
12335	toffset < 0
12335	toffset > value.length - pc
12336	ta[to++] != pa[po++]
12337	h == 0
12337	value.length > 0
12338	fromIndex < 0
12339	fromIndex >= max
12340	ch < Character.MIN_SUPPLEMENTARY_CODE_POINT
12341	value[i] == ch
12342	Character.isValidCodePoint(ch)
12343	value[i + 1] == lo
12343	value[i] == hi
12344	ch < Character.MIN_SUPPLEMENTARY_CODE_POINT
12345	value[i] == ch
12346	Character.isValidCodePoint(ch)
12347	value[i + 1] == lo
12347	value[i] == hi
12348	fromIndex >= sourceCount
12349	fromIndex < 0
12350	targetCount == 0
12351	source[i] != first
12352	i <= max
12353	j == end
12354	fromIndex < 0
12355	fromIndex > rightIndex
12356	targetCount == 0
12357	i < min
12358	source[j--] != target[k--]
12359	beginIndex < 0
12360	subLen < 0
12361	beginIndex < 0
12362	endIndex > value.length
12363	subLen < 0
12364	otherLen == 0
12365	oldChar != newChar
12366	val[i] == oldChar
12367	i < len
12368	ch > Character.MAX_LOW_SURROGATE
12368	((ch-'a')|('z'-ch)) < 0
12368	regex.value.length == 1
12368	regex.length() == 2
12368	".$|()[{^?*+\\".indexOf(ch = regex.charAt(0)) == -1
12368	(((ch = regex.charAt(1))-'0')|('9'-ch)) < 0
12368	regex.charAt(0) == '\\'
12368	((ch-'A')|('Z'-ch)) < 0
12368	ch < Character.MIN_HIGH_SURROGATE
12369	limited
12369	list.size() < limit - 1
12370	off == 0
12371	list.size() < limit
12371	limited
12372	limit == 0
12373	locale == null
12374	c <= Character.MAX_HIGH_SURROGATE
12374	c >= Character.MIN_HIGH_SURROGATE
12375	supplChar != Character.toLowerCase(supplChar)
12376	c != Character.toLowerCase(c)
12377	(char)srcChar <= Character.MAX_HIGH_SURROGATE
12377	(char)srcChar >= Character.MIN_HIGH_SURROGATE
12378	localeDependent
12378	srcChar == '\u03A3'
12378	srcChar == '\u0130'
12379	lowerChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT
12379	lowerChar == Character.ERROR
12380	lowerChar == Character.ERROR
12381	srcCount == 2
12382	mapLen > srcCount
12383	locale == null
12384	c >= Character.MIN_HIGH_SURROGATE
12384	c <= Character.MAX_HIGH_SURROGATE
12385	c != upperCaseChar
12385	upperCaseChar == Character.ERROR
12386	(char)srcChar <= Character.MAX_HIGH_SURROGATE
12386	(char)srcChar >= Character.MIN_HIGH_SURROGATE
12387	localeDependent
12388	upperChar == Character.ERROR
12388	upperChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT
12389	upperChar == Character.ERROR
12390	localeDependent
12391	srcCount == 2
12392	mapLen > srcCount
12393	0 == h
12035	minimumCapacity > value.length
12036	index < 0
12036	index >= count
12037	index >= count
12037	index < 0
12038	s == null
12039	s instanceof String
12040	s instanceof StringBuffer
12041	s == null
12042	s instanceof String
13416	b == null
13417	len < 0
13417	off < 0
13417	off > b.length
13417	(off + len) < 0
13417	(off + len) > b.length
13418	pos >= count
13419	pos + len > count
13420	len <= 0
13421	n < 0
13422	n > count - pos
11318	sb == null
11319	newcount > value.length
11320	s == null
11321	s instanceof String
11322	s instanceof StringBuffer
11323	s instanceof StringBuilder
11324	s == null
11325	s instanceof String
13147	start < 0
13147	end < start
13147	end > n
13147	start > n
15578	text == null
15579	end > text.length()
15579	begin < 0
15579	begin > end
15580	pos > end
15580	pos < begin
15581	text == null
15582	end != begin
15583	p > end
15583	p < begin
15584	pos < end
15584	pos >= begin
15585	pos < end - 1
15586	pos > begin
15587	this == obj
15588	obj instanceof StringCharacterIterator
15589	hashCode() != that.hashCode()
15590	text.equals(that.text)
15591	begin != that.begin
15591	end != that.end
15591	pos != that.pos
11295	sr == null
11296	isTrusted
11296	System.getSecurityManager() == null
11296	len == ba.length
11297	isTrusted
11297	System.getSecurityManager() == null
11297	len == ca.length
11298	Charset.isSupported(csn)
11299	warnUnsupportedCharset
11300	sd == null
11300	csn.equals(sd.requestedCharsetName())
11300	csn.equals(sd.charsetName())
11301	cs != null
11302	sd == null
11303	len == 0
11304	System.getSecurityManager() != null
11305	isTrusted = (cs.getClass().getClassLoader0() == null)
11306	cd instanceof ArrayDecoder
11307	cr.isUnderflow()
11308	cr.isUnderflow()
11309	csn.equals(se.requestedCharsetName())
11309	se == null
11309	csn.equals(se.charsetName())
11310	cs != null
11311	se == null
11312	len == 0
11313	System.getSecurityManager() != null
11314	isTrusted = (cs.getClass().getClassLoader0() == null)
11315	ce instanceof ArrayEncoder
11316	cr.isUnderflow()
11317	cr.isUnderflow()
13644	str == null
13645	next >= length
13646	off < 0
13646	(off + len) > cbuf.length
13646	(off + len) < 0
13646	len < 0
13646	off > cbuf.length
13647	len == 0
13648	next >= length
13649	next >= length
13650	readAheadLimit < 0
9755	flavor.equals(flavors[i])
9756	flavor.equals(flavors[STRING])
9757	flavor.equals(flavors[PLAIN_TEXT])
4346	delimiters == null
4347	c <= Character.MAX_LOW_SURROGATE
4347	c >= Character.MIN_HIGH_SURROGATE
4348	m < c
4349	hasSurrogates
4350	delimiters == null
4351	hasSurrogates
4352	delimiters.indexOf(c) < 0
4352	c > maxDelimCodePoint
4353	c > maxDelimCodePoint
4353	isDelimiter(c)
4354	hasSurrogates
4355	c <= maxDelimCodePoint
4355	delimiters.indexOf(c) >= 0
4356	c <= maxDelimCodePoint
4356	isDelimiter(c)
4357	startPos == position
4357	retDelims
4358	hasSurrogates
4359	delimiters.indexOf(c) >= 0
4359	c <= maxDelimCodePoint
4360	isDelimiter(c)
4360	c <= maxDelimCodePoint
4361	delimiterCodePoints[i] == codePoint
4362	currentPosition >= maxPosition
4363	currpos >= maxPosition
14321	initialSize < 0
14322	off > cbuf.length
14322	(off + len) > cbuf.length
14322	(off + len) < 0
14322	off < 0
14322	len < 0
14323	len == 0
14324	csq == null
6872	f == null
6873	decorations != null
6874	fonts != null
6875	oldParagraph.getDecorationAt(relativePos).equals(d)
6876	f == null
6877	oldParagraph.getFontOrGraphicAt(relativePos).equals(f)
6878	oldParagraph.decorations != null
6879	oldParagraph.fonts != null
6880	oldParagraph.fonts == null
6880	oldParagraph.decorations == null
6881	oldParagraph.getRunLimit(deletePos) == deletePos+1
6882	oldParagraph.getRunLimit(deletePos-1) == deletePos
6882	deletePos == 0
6883	oldParagraph.decorations != null
6884	oldParagraph.fonts != null
6885	index < 0
6885	index >= length
6886	decorations != null
6887	fonts != null
6888	index >= length
6888	index < 0
6889	decorations == null
6890	index < 0
6890	index >= length
6891	fonts == null
6892	starts[i] > index
6893	v.lastElement().equals(obj)
6894	starts.length == count
6895	decorations != null
6896	decoration == null
6897	decoration.equals(d)
6898	fonts != null
6899	font == null
6900	font.equals(f)
6901	value != null
6902	value instanceof Annotation
6903	imStyles == null
6904	imStyles != null
6905	value != null
6906	value != null
6907	attributes.get(TextAttribute.FAMILY) != null
11924	mcs.getTarget() == K_false
11925	switchPoints.length == 0
11926	spt == null
2808	o == null
2809	transferer.transfer(o, false, 0) == null
2810	o == null
2811	transferer.transfer(o, true, unit.toNanos(timeout)) != null
2812	Thread.interrupted()
2813	e == null
2814	e != null
2815	e != null
2815	Thread.interrupted()
2816	a.length > 0
2817	c == null
2818	c == this
2819	c == null
2820	c == this
2821	fair
2822	waitingProducers instanceof FifoWaitQueue
12523	cons == null
12524	sm != null
12525	sm != null
12526	s != null
12526	s.getClass().getClassLoader() != null
12527	sm != null
12528	sm != null
12529	props == null
12530	sm != null
12531	sm != null
12532	sm != null
12533	sm != null
12534	key == null
12535	key.equals("")
12536	sm != null
12537	sm != null
7423	GraphicsEnvironment.isHeadless()
9782	isMapInitialized
9783	isMapInitialized
9784	fm == null
9785	isMapInitialized
9786	flavormapDotProperties != null
9787	url != null
9788	flavormapURL != null
9789	line == null
9790	line.length() > 0
9791	firstChar != '#'
9791	firstChar != '!'
9792	nextLine == null
9793	whiteSpaceChars. indexOf(nextLine.charAt(startIndex)) == -1
9794	whiteSpaceChars. indexOf(line.charAt(keyStart)) == -1
9795	keyStart == len
9796	currentChar == '\\'
9797	keyValueSeparators. indexOf(currentChar) != -1
9798	whiteSpaceChars. indexOf(line.charAt(valueIndex)) == -1
9799	valueIndex < len
9800	strictKeyValueSeparators. indexOf(line.charAt(valueIndex)) != -1
9801	whiteSpaceChars. indexOf(line.charAt(valueIndex)) == -1
9802	"text".equals(mime.getPrimaryType())
9803	DataTransferer.doesSubtypeSupportCharset (mime.getSubType(), charset)
9804	transferer != null
9805	"text".equals(flavor.getPrimaryType())
9806	aChar == '\\'
9807	aChar == 'u'
9808	aChar == 't'
9809	aChar == 'r'
9810	aChar == 'n'
9811	aChar == 'f'
9812	list == null
9813	list.contains(listed)
9814	nat != null
9814	disabledMappingGenerationKeys.contains(nat)
9815	transferer != null
9816	platformFlavors.isEmpty()
9817	flavors != null
9818	isJavaMIMEType(nat)
9818	flavors == null
9819	flavor != null
9820	natives == null
9821	flav != null
9821	disabledMappingGenerationKeys.contains(flav)
9822	transferer != null
9823	platformNatives.isEmpty()
9824	natives != null
9825	natives == null
9826	synthesize
9827	flavors == null
9828	ref != null
9829	retval != null
9830	flav == null
9831	disabledMappingGenerationKeys.contains(flav)
9832	DataTransferer.isFlavorCharsetTextType(flav)
9833	"text".equals(flav.getPrimaryType())
9834	retval != null
9835	textPlainList != null
9835	textPlainList.isEmpty()
9836	retval != null
9836	retval.isEmpty()
9837	retval == null
9837	retval.isEmpty()
9838	explicitList.isEmpty()
9839	DataTransferer.isFlavorNoncharsetTextType(flav)
9840	retval == null
9840	retval.isEmpty()
9841	explicitList.isEmpty()
9842	ref != null
9843	retval != null
9844	nat == null
9845	dups.add(flavor)
9846	disabledMappingGenerationKeys.contains(nat)
9847	value instanceof String
9848	DataTransferer.doesSubtypeSupportCharset(subType, null)
9849	TEXT_PLAIN_BASE_TYPE.equals(baseType)
9849	dups.add(DataFlavor.stringFlavor)
9850	dups.add(toAdd)
9851	toAdd.equals(DataFlavor.plainTextFlavor)
9852	dups.add(toAdd)
9853	dups.add(DataFlavor.plainTextFlavor)
9853	TEXT_PLAIN_BASE_TYPE.equals(baseType)
9854	dups.add(toAdd)
9855	dups.add(flavor)
9856	flavors == null
9857	natives == null
9858	flav == null
9858	nat == null
9859	natives == null
9860	natives.contains(nat)
9861	natives == null
9861	flav == null
9862	flav == null
9862	nat == null
9863	flavors == null
9864	flavors.contains(flav)
9865	nat == null
9865	flavors == null
10050	GraphicsEnvironment.isHeadless()
10051	isSupported()
10052	toolkit instanceof SunToolkit
10053	toolkit instanceof HeadlessToolkit
10054	trayIcon == null
10055	icons == null
10056	icons.contains(trayIcon)
10057	trayIcon == null
10058	icons == null
10058	icons.remove(trayIcon)
10059	icons != null
10060	listener == null
10061	listener == null
10062	oldValue.equals(newValue)
10062	oldValue != null
10062	newValue != null
10063	changeSupport == null
10064	peer == null
10065	toolkit instanceof SunToolkit
10066	toolkit instanceof HeadlessToolkit
10067	security != null
10068	systemTray == null
12940	name.getParent() != null
12941	prefix == null
12942	suffix == null
12943	dir == null
12944	dir.getFileSystem() == FileSystems.getDefault()
12944	isPosix
12945	attrs.length == 0
12946	attrs[i].name().equals("posix:permissions")
12947	hasPermissions
12948	sm != null
12949	createDirectory
12950	dir == tmpdir
12950	sm != null
12597	handler != null
9995	scrollbars <= SCROLLBARS_NONE
9995	scrollbars >= SCROLLBARS_BOTH
9996	peer == null
9997	peer != null
9998	peer != null
9999	peer != null
10000	rows < 0
10001	rows != oldVal
10002	columns < 0
10003	columns != oldVal
10004	columns < 0
10005	rows < 0
10006	scrollbarVisibility < SCROLLBARS_BOTH
10006	scrollbarVisibility > SCROLLBARS_NONE
10007	textAreaSerializedDataVersion < 2
10008	accessibleContext == null
6853	this.getClass() == TextAttribute.class
6854	this.getClass() != TextAttribute.class
6855	instance != null
6155	checkForEnableIM
6156	toolkit instanceof InputMethodSupport
6157	checkForEnableIM
6158	peer != null
6159	peer != null
6160	peer != null
6160	skipTextEvent
6161	peer != null
6162	editable == b
6163	peer != null
6164	backgroundSetByClientCode
6164	editable
6165	peer != null
6166	peer != null
6167	selectionStart < 0
6168	selectionStart > text.length()
6169	selectionEnd > text.length()
6170	selectionEnd < selectionStart
6171	peer != null
6172	peer != null
6173	position < 0
6174	position > maxposition
6175	peer != null
6176	peer != null
6177	position > maxposition
6178	l == null
6179	l == null
6180	listenerType == TextListener.class
6181	e.id == TextEvent.TEXT_VALUE_CHANGED
6182	textListener != null
6182	(eventMask & AWTEvent.TEXT_EVENT_MASK) != 0
6183	e instanceof TextEvent
6184	listener != null
6185	editable
6186	sm == null
6187	peer != null
6188	textListenerK == key
6189	accessibleContext == null
7424	peer == null
7425	echoChar != c
7426	peer != null
7427	columns < 0
7428	columns != oldVal
7429	columns != oldVal
7430	l == null
7431	l == null
7432	listenerType == ActionListener.class
7433	e.id == ActionEvent.ACTION_PERFORMED
7434	actionListener != null
7434	(eventMask & AWTEvent.ACTION_EVENT_MASK) != 0
7435	e instanceof ActionEvent
7436	listener != null
7437	echoChar != 0
7438	columns < 0
7439	actionListenerK == key
7440	accessibleContext == null
7302	isLeadingEdge
7276	DEBUG
7277	DEBUG
7278	lastPass
7279	(grow ? gi.growPriority : gi.shrinkPriority) == p
7280	fallbackPriority == -1
7281	i != start
7282	grow
7283	gi.growAbsorb
7284	gi.shrinkAbsorb
7285	i + 1 != limit
7286	grow
7287	gi.growAbsorb
7288	gi.shrinkAbsorb
7289	grow
7290	absorbweight > 0
7290	hitLimit
7291	DEBUG
7292	(grow ? gi.growPriority : gi.shrinkPriority) == p
7293	i != start
7294	hitLimit
7295	absorbing
7296	i + 1 != limit
7297	hitLimit
7298	absorbing
7299	hitLimit
7299	lastPass
7299	absorbing
7300	DEBUG
7301	i % 20 == 9
6953	font == null
6954	string == null
6955	string.length() == 0
6956	font.hasLayoutAttributes()
6957	sameBaselineUpTo(font, text, 0, text.length) == text.length
6958	string == null
6959	attributes == null
6960	string.length() == 0
6961	font != null
6962	attributes.get(TextAttribute.CHAR_REPLACEMENT) != null
6963	font == null
6964	attributes.get(TextAttribute.FAMILY) != null
6965	font.canDisplayUpTo(text, start, limit) != -1
6966	iter.charIndex() == limit
6967	sameBaselineUpTo(font, text, start, limit) != limit
6968	text == null
6969	start == limit
6970	text.getRunLimit() == limit
6971	font != null
6972	shaper != null
6973	attrs == null
6974	haveFont
6975	cacheIsValid
6976	textLine.isDirectionLTR()
6977	textLine.isCharSpace(logIndex)
6978	lastNonSpace == characterCount-1
6979	lastNonSpace == -1
6980	textLine.isCharSpace(logIndex)
6981	leftmostNonSpace == characterCount
6982	leftmostNonSpace == 0
6983	naturalBounds == null
6984	hit == null
6985	hit.getInsertionIndex() < 0
6985	hit.getInsertionIndex() > characterCount
6986	justificationWidth <= 0
6987	justifyRatio == ALREADY_JUSTIFIED
6988	newLine != null
6989	boundsRect == null
6990	dx != 0
6990	dy != 0
6991	caret == 0
6991	caret == characterCount
6992	caret == characterCount
6993	angle1 != 0
6994	angle2 != 0
6995	info == null
6996	isVerticalLine
6997	charix == characterCount
6997	charix == -1
6998	horiz
6999	thiscm.baselineIndex < 0
7000	horiz
7001	thiscm.baselineIndex == GraphicAttribute.TOP_ALIGNMENT
7002	horiz
7003	hitIndex < 0
7004	hitIndex >= characterCount
7005	hit.isLeadingEdge() != textLine.isCharLTR(hitIndex)
7006	caret == characterCount
7006	caret == 0
7007	(caret == characterCount) == textLine.isDirectionLTR()
7008	caret == 0
7008	caret == characterCount
7009	textLine.isCharLTR(offset)
7010	textLine.isCharLTR(offset)
7011	caret == characterCount
7012	offset > characterCount
7012	offset < 0
7013	policy == null
7014	nextHit != null
7015	caret == 0
7016	policy == null
7017	offset > characterCount
7017	offset < 0
7018	nextHit != null
7019	hitCharIndex == -1
7019	hitCharIndex == characterCount
7020	textLine.isDirectionLTR() == (hitCharIndex == -1)
7021	textLine.isDirectionLTR() == (hitCharIndex == -1)
7022	textLine.isCharLTR(hitCharIndex) == hit.isLeadingEdge()
7023	visIndex < characterCount
7023	visIndex > -1
7024	isVerticalLine
7025	slope >= 0
7026	clipToBounds
7027	y0 < top
7028	y1 <= top
7028	slope <= 0
7029	y1 > bottom
7030	y1 > bottom
7031	slope >= 0
7031	y0 >= bottom
7032	slope >= 0
7033	clipToBounds
7034	x0 < left
7035	slope <= 0
7035	x1 <= left
7036	x1 > right
7037	x1 > right
7038	slope >= 0
7038	x0 >= right
7039	close
7040	lp != null
7041	bounds == null
7042	hit1Level == hit2Level
7043	hit1.isLeadingEdge()
7043	hit2.isLeadingEdge()
7044	index < -1
7044	index > characterCount
7045	index == -1
7045	index == characterCount
7046	offset > characterCount
7046	offset < 0
7047	bounds == null
7048	policy == null
7049	hitCaret == otherCaret
7050	hitIsStrong
7051	isVerticalLine
7052	sameDirection
7053	caret0 > caret1
7054	isVerticalLine
7055	isVerticalLine
7056	startIndex > limitIndex
7057	startIndex < limitIndex
7058	included[i] != inrun
7059	inrun
7060	included[i] != inrun
7061	inrun
7062	bounds == null
7063	firstCaret == 0
7063	secondCaret == 0
7064	ls.getBounds().isEmpty()
7065	firstCaret == characterCount
7065	secondCaret == characterCount
7066	rs.getBounds().isEmpty()
7067	lp != null
7068	bounds == null
7069	firstEndpoint > secondEndpoint
7070	firstEndpoint < 0
7070	secondEndpoint > characterCount
7071	firstEndpoint < secondEndpoint
7072	count == carets.length
7073	firstEndpoint != secondEndpoint
7074	secondEndpoint == characterCount
7074	textLine.isDirectionLTR()
7074	textLine.isDirectionLTR()
7074	firstEndpoint == 0
7075	ls.getBounds().isEmpty()
7076	textLine.isDirectionLTR()
7076	secondEndpoint == characterCount
7076	textLine.isDirectionLTR()
7076	firstEndpoint == 0
7077	rs.getBounds().isEmpty()
7078	lp != null
7079	firstEndpoint > secondEndpoint
7080	secondEndpoint > characterCount
7080	firstEndpoint < 0
7081	firstEndpoint < characterCount
7082	r.isEmpty()
7083	dy != 0
7083	dx != 0
7084	lp != null
7085	lp != null
7086	isVertical()
7087	y < bounds.getMinY()
7088	y >= bounds.getMaxY()
7089	x < bounds.getMinX()
7090	x >= bounds.getMaxX()
7091	textLine.caretAtOffsetIsValid(i)
7092	trail == -1
7093	cm != lcm
7094	cm.baselineIndex == GraphicAttribute.TOP_ALIGNMENT
7095	cm.baselineIndex == GraphicAttribute.BOTTOM_ALIGNMENT
7096	nd < distance
7097	trail == -1
7098	hashCodeCache == 0
7099	rhs == null
7100	rhs == this
7101	g2 == null
7102	alignment == GraphicAttribute.BOTTOM_ALIGNMENT
7102	alignment == GraphicAttribute.TOP_ALIGNMENT
7103	lp != null
7104	point == null
7104	hit == null
7105	ix == -1
7105	ix == textLine.characterCount()
7106	lp != null
7176	checkCharCount != this.characterCount()
7177	baseline >= 0
7178	fitTopAndBottomGraphics
7179	maxGraphicHeight > ascent + descent
7180	maxGraphicHeightWithLeading > ascent + leading
7181	fitTopAndBottomGraphics
7182	pcm.italicAngle != 0
7182	pcm.italicAngle != cm.italicAngle
7182	pcm != null
7182	cm.italicAngle != 0
7182	pcm.ssOffset != cm.ssOffset
7182	pcm.baselineIndex != cm.baselineIndex
7183	pcm.italicAngle != 0
7184	pcm.italicAngle > 0
7185	needPath
7186	at != null
7186	(at.getType() & at.TYPE_TRANSLATION) != 0
7187	at != null
7188	lp == null
7189	at != null
7190	frc != null
7190	frc.equals(this.frc)
7191	canCache
7191	pixelBounds != null
7192	isSimple
7193	pb.isEmpty()
7194	result == null
7195	result == null
7196	lp != null
7197	canCache
7198	buf[i] != -1
7199	buf[i] != -1
7200	v != -1
7201	v != -1
7202	fCharLogicalOrder == null
7203	fCharVisualOrder == null
7204	logicalIndex < 0
7205	logicalIndex > fCharsLimit - fCharsStart
7206	tlcLimit > logicalIndex
7207	logicalIndex < 0
7208	tlcLimit > logicalIndex
7209	offset < 0
7210	tlcLimit > offset
7211	fComponentVisualOrder == null
7212	fComponentVisualOrder == null
7213	fComponentVisualOrder[i] == li
7214	logicalIndex < 0
7215	tlcLimit > logicalIndex
7216	lp == null
7217	at != null
7218	lp == null
7219	at != null
7220	result == null
7221	result == null
7222	tx != null
7223	attributes != null
7224	values.getRunDirection() >= 0
7225	values.getBidiEmbedding() != 0
7226	requiresBidi
7227	requiresBidi
7228	bidi.isLeftToRight()
7229	numComponents != components.length
7230	cm == null
7231	numComponents >= components.length
7232	graphicOrFont instanceof GraphicAttribute
7233	numComponents >= tempComponents.length
7234	tempComponents.length == numComponents
7235	lineBidi != null
7236	charsLtoV != null
7236	components.length > 1
7237	bidi.isLeftToRight()
7238	bidi != null
7239	aci.getAttribute(TextAttribute.CHAR_REPLACEMENT) == null
7240	baselineOffsets[baseline] != 0
7241	value != null
7242	aci.getAttribute(TextAttribute.FAMILY) != null
7243	ch != CodePointIterator.DONE
7244	direction != null
7244	order != null
7245	compLimit > justStart
7246	compLimit >= justLimit
7247	compLimit > justStart
7248	compLimit >= justLimit
7249	tlcLimit > start
7250	tlcLimit >= limit
6915	fComponents != null
6916	fBidi.isLeftToRight()
6917	shaper != null
6918	haveFont
6919	collectStats
6920	fBidi != null
6921	gaLimit > startPos
6922	tlcIndex < fComponents.length
6922	lineBreak == numCharsInGa
6923	fComponentLimit < fChars.length
6924	fLevels != null
6925	(fLevels[cdWsStart] % 2) == baseLevel
6925	Character.getDirectionality(fChars[cdWsStart]) != Character.DIRECTIONALITY_WHITESPACE
6926	gaLimit > startPos
6927	cdWsStart > Math.max(compStart, startPos)
6927	cdWsStart < Math.min(gaLimit, limitPos)
6928	gaLimit >= limitPos
6929	split
6930	breakPt == startPos
6931	linePos == breakPt
6932	linePos == tlcLimit
6933	fBidi != null
6934	limit > fComponentLimit
6934	start < fComponentStart
6935	layoutCount > 0
6935	haveLayoutWindow
6936	localStart > 0
6936	compLimit < fChars.length
6937	charIter == null
6938	fLineBreak == null
6939	localStart > 0
6940	fLineBreak.isBoundary(localStart)
6941	compLimit < fChars.length
6942	fLineBreak.isBoundary(compLimit)
6943	localStart < fComponentStart
6943	haveLayoutWindow
6943	localStart >= fComponentLimit
6944	localLimit < fChars.length
6945	collectStats
6946	wantStats
6947	end - fStart != fChars.length+1
6948	fBidi != null
6948	newParagraph.getAttribute(TextAttribute.BIDI_EMBEDDING) != null
6948	Bidi.requiresBidi(newChars, newCharIndex, newCharIndex + 1)
6949	fBidi.isLeftToRight()
6950	end - fStart != fChars.length-1
6951	fBidi != null
6952	fBidi.isLeftToRight()
5068	xform == null
10009	raster instanceof IntegerInterleavedRaster
10009	isFilterableDCM(cm)
10009	filter
10010	iir.getNumDataElements() == 1
10010	iir.getPixelStride() == 1
10011	raster instanceof ByteInterleavedRaster
10012	bir.getPixelStride() == 1
10012	bir.getNumDataElements() == 1
10013	filter
10014	isFilterableICM(cm)
10015	cm instanceof IndexColorModel
10016	icm.getMapSize() <= 256
10017	cm instanceof DirectColorModel
10018	mask == 0
10018	canbezero
10019	xrgbmodel == cm
10019	xrgbmodel.equals(cm)
10020	argbmodel == cm
10020	argbmodel.equals(cm)
10021	num < 0
10022	num >= den
10023	outRas == null
10023	outRas.getHeight() < h
10023	outRas.getWidth() < w
10024	xrgbmodel == cm
10025	xrgbRasRef != null
10026	wr.getWidth() >= w
10026	wr.getHeight() >= h
10026	wr != null
10027	w <= 32
10027	h <= 32
10028	argbmodel == cm
10029	argbRasRef != null
10030	wr.getWidth() >= w
10030	wr.getHeight() >= h
10030	wr != null
10031	w <= 32
10031	h <= 32
10032	srcRas != null
10033	outRas == null
10034	xrgbmodel == cm
10035	argbmodel == cm
10036	byteRasRef != null
10037	wr.getHeight() >= h
10037	wr.getWidth() >= w
10037	wr != null
10038	w <= 32
10038	h <= 32
10039	outRas == null
10040	(i & 1) == 0
10041	factor != 0
12198	millis < 0
12199	nanos > 999999
12199	nanos < 0
12200	millis == 0
12200	nanos >= 500000
12200	nanos != 0
12201	name == null
12202	g == null
12203	security != null
12204	g == null
12205	security != null
12206	isCCLOverridden(getClass())
12207	isCCLOverridden(parent.getClass())
12207	security == null
12208	parent.inheritableThreadLocals != null
12209	threadStatus != 0
12210	started
12211	target != null
12212	group != null
12213	obj == null
12214	security != null
12215	this != Thread.currentThread()
12215	obj instanceof ThreadDeath
12216	threadStatus != 0
12217	this != Thread.currentThread()
12218	b != null
12219	newPriority > MAX_PRIORITY
12219	newPriority < MIN_PRIORITY
12220	(g = getThreadGroup()) != null
12221	newPriority > g.getMaxPriority()
12222	millis < 0
12223	millis == 0
12224	delay <= 0
12225	millis < 0
12226	nanos < 0
12226	nanos > 999999
12227	nanos >= 500000
12227	millis == 0
12227	nanos != 0
12228	isAlive()
12229	security != null
12230	group != null
12231	contextClassLoader == null
12232	sm != null
12233	sm != null
12234	this != Thread.currentThread()
12235	security != null
12236	isAlive()
12237	stackTrace == null
12238	security != null
12239	stackTrace != null
12240	cl == Thread.class
12241	result == null
12242	sm != null
12398	parent != null
12399	pri > Thread.MAX_PRIORITY
12399	pri < Thread.MIN_PRIORITY
12400	groups != null
12401	g == this
12402	security != null
12403	destroyed
12404	groups != null
12405	destroyed
12406	nt > list.length - n
12407	threads[i].isAlive()
12408	recurse
12409	groups != null
12410	recurse
12411	destroyed
12412	groups != null
12413	destroyed
12414	ng > list.length - n
12415	ng > 0
12416	recurse
12417	groups != null
12418	recurse
12419	stopOrSuspend(false)
12420	groups != null
12421	stopOrSuspend(true)
12422	threads[i]==us
12423	suspend
12424	groups != null
12425	groups != null
12426	nthreads > 0
12426	destroyed
12427	groups != null
12428	parent != null
12429	parent != null
12430	destroyed
12431	groups == null
12432	ngroups == groups.length
12433	destroyed
12434	groups[i] == g
12435	nthreads == 0
12436	nUnstartedThreads == 0
12436	nthreads == 0
12436	daemon
12436	ngroups == 0
12437	destroyed
12438	destroyed
12439	threads == null
12440	nthreads == threads.length
12441	nthreads == 0
12442	nUnstartedThreads == 0
12442	daemon
12442	nthreads == 0
12442	ngroups == 0
12443	destroyed
12444	threads[i] == t
12445	groups != null
12446	parent != null
12447	ueh != null
12448	e instanceof ThreadDeath
12449	b
10542	this.beanInfoCache == null
10543	this.beanInfoCache != null
10544	this.beanInfoCache != null
10545	this.beanInfoFinder == null
10546	this.propertyEditorFinder == null
11350	numMonitors == 0
11351	numSyncs == 0
11352	lockObj == null
11353	lockOwner == null
11354	stackTrace == null
11355	ticd.isCurrentVersion()
11356	lockName != null
11357	result.length == 2
11358	getLockName() != null
11359	getLockOwnerName() != null
11360	isSuspended()
11361	isInNative()
11362	i == 0
11362	getLockInfo() != null
11363	mi.getLockedStackDepth() == i
11364	i < stackTrace.length
11365	locks.length > 0
11366	cd == null
11367	cd instanceof ThreadInfoCompositeData
11133	map != null
11134	e != null
11135	map != null
11136	map != null
11137	m != null
2458	initialized
2459	least >= bound
2460	n <= 0
2461	(bits & 1) == 0
2462	least >= bound
2463	n <= 0
2464	least >= bound
3068	runStateAtLeast(c, targetState)
3068	ctl.compareAndSet(c, ctlOf(targetState, workerCountOf(c)))
3069	runStateAtLeast(c, TIDYING)
3069	workQueue.isEmpty()
3069	runStateOf(c) == SHUTDOWN
3069	isRunning(c)
3070	workerCountOf(c) != 0
3071	ctl.compareAndSet(c, ctlOf(TIDYING, 0))
3072	security != null
3073	t.isInterrupted()
3073	w.tryLock()
3074	onlyOne
3075	q.isEmpty()
3076	q.remove(r)
3077	firstTask == null
3077	workQueue.isEmpty()
3077	rs == SHUTDOWN
3077	rs >= SHUTDOWN
3078	wc >= CAPACITY
3078	wc >= (core ? corePoolSize : maximumPoolSize)
3079	compareAndIncrementWorkerCount(c)
3080	runStateOf(c) != rs
3081	t != null
3082	firstTask == null
3082	rs == SHUTDOWN
3082	rs < SHUTDOWN
3083	t.isAlive()
3084	s > largestPoolSize
3085	workerAdded
3086	workerStarted
3087	w != null
3088	completedAbruptly
3089	runStateLessThan(c, STOP)
3090	completedAbruptly
3091	workQueue.isEmpty()
3091	min == 0
3092	workerCountOf(c) >= min
3093	workQueue.isEmpty()
3093	rs >= STOP
3093	rs >= SHUTDOWN
3094	timedOut
3094	timed
3094	wc <= maximumPoolSize
3095	compareAndDecrementWorkerCount(c)
3096	runStateOf(c) != rs
3097	r != null
3098	runStateAtLeast(ctl.get(), STOP)
3098	runStateAtLeast(ctl.get(), STOP)
3098	wt.isInterrupted()
3098	Thread.interrupted()
3099	maximumPoolSize < corePoolSize
3099	maximumPoolSize <= 0
3099	corePoolSize < 0
3099	keepAliveTime < 0
3100	threadFactory == null
3100	workQueue == null
3100	handler == null
3101	command == null
3102	workerCountOf(c) < corePoolSize
3103	addWorker(command, true)
3104	isRunning(c)
3104	workQueue.offer(command)
3105	remove(command)
3105	isRunning(recheck)
3106	workerCountOf(recheck) == 0
3107	addWorker(command, false)
3108	runStateAtLeast(ctl.get(), TERMINATED)
3109	nanos <= 0
3110	threadFactory == null
3111	handler == null
3112	corePoolSize < 0
3113	workerCountOf(ctl.get()) > corePoolSize
3114	delta > 0
3115	workQueue.isEmpty()
3116	wc < corePoolSize
3117	wc == 0
3118	keepAliveTime <= 0
3118	value
3119	value != allowCoreThreadTimeOut
3120	value
3121	maximumPoolSize <= 0
3121	maximumPoolSize < corePoolSize
3122	workerCountOf(ctl.get()) > maximumPoolSize
3123	time < 0
3124	time == 0
3124	allowsCoreThreadTimeOut()
3125	delta < 0
3126	r instanceof Future<?>
3126	((Future<?>)r).isCancelled()
3127	((Future<?>)r).isCancelled()
3127	r instanceof Future<?>
3128	w.isLocked()
3129	w.isLocked()
3130	w.isLocked()
12478	writableStackTrace
12479	enableSuppression
12480	this.cause != this
12481	cause == this
12482	ourCause != null
12483	dejaVu.contains(this)
12484	framesInCommon != 0
12485	ourCause != null
12486	backtrace != null
12486	stackTrace != null
12487	stackTrace == UNASSIGNED_STACK
12487	stackTrace == null
12487	backtrace != null
12488	stackTrace == null
12489	defensiveCopy[i] == null
12490	backtrace == null
12490	this.stackTrace == null
12491	suppressedExceptions != null
12492	suppressedExceptions.isEmpty()
12493	t == null
12494	t == this
12495	stackTrace != null
12496	stackTrace.length == 0
12497	stackTrace.length == 1
12497	SentinelHolder.STACK_TRACE_ELEMENT_SENTINEL.equals(stackTrace[0])
12498	ste == null
12499	stackTrace == null
12500	exception == this
12501	exception == null
12502	suppressedExceptions == null
12503	suppressedExceptions == SUPPRESSED_SENTINEL
12504	suppressedExceptions == null
12504	suppressedExceptions == SUPPRESSED_SENTINEL
38	c == null
39	nRemaining < 2
40	nRemaining < MIN_MERGE
41	runLen < minRun
42	start == lo
43	c.compare(pivot, a[mid]) < 0
44	runHi == hi
45	c.compare(a[runHi++], a[lo]) < 0
46	n > 0
46	runLen[n-1] <= runLen[n] + runLen[n+1]
47	runLen[n - 1] < runLen[n + 1]
48	runLen[n] <= runLen[n + 1]
49	runLen[n - 1] < runLen[n + 1]
49	n > 0
50	i == stackSize - 3
51	len1 == 0
52	len2 == 0
53	len1 <= len2
54	c.compare(key, a[base + hint]) > 0
55	ofs <= 0
56	ofs > maxOfs
57	ofs <= 0
58	ofs > maxOfs
59	c.compare(key, a[base + m]) > 0
60	c.compare(key, a[base + hint]) < 0
61	ofs <= 0
62	ofs > maxOfs
63	ofs <= 0
64	ofs > maxOfs
65	c.compare(key, a[base + m]) < 0
66	--len2 == 0
67	len1 == 1
68	c.compare(a[cursor2], tmp[cursor1]) < 0
69	--len2 == 0
70	--len1 == 1
71	count1 != 0
72	len1 <= 1
73	--len2 == 0
74	count2 != 0
75	len2 == 0
76	--len1 == 1
77	minGallop < 0
78	len1 == 1
79	len1 == 0
80	--len1 == 0
81	len2 == 1
82	c.compare(tmp[cursor2], a[cursor1]) < 0
83	--len1 == 0
84	--len2 == 1
85	count1 != 0
86	len1 == 0
87	--len2 == 1
88	count2 != 0
89	len2 <= 1
90	--len1 == 0
91	minGallop < 0
92	len2 == 1
93	len2 == 0
94	tmp.length < minCapacity
95	newSize < 0
96	fromIndex > toIndex
97	fromIndex < 0
98	toIndex > arrayLen
12715	s == null
12716	(firstColon > 0) & (secondColon > 0) & (secondColon < s.length()-1)
12717	hour < 10
12718	minute < 10
12719	second < 10
3392	inDaylightTime(new Date(date))
3393	inDaylightTime(new Date(date))
3394	offsets != null
3395	ID == null
3396	style != SHORT
3396	style != LONG
3397	names == null
3398	id.startsWith("GMT")
3399	sign == '+'
3399	sign == '-'
3400	daylight
3401	style == SHORT
3402	ref != null
3403	perLocale != null
3404	names != null
3405	names != null
3406	names != null
3407	useDaylightTime()
3408	tz == null
3409	tz == null
3409	fallback
3410	defaultZone == null
3411	defaultZone == null
3412	zoneID == null
3412	zoneID.equals("")
3413	zoneID == null
3414	tz == null
3415	gmtOffsetID != null
3416	sm != null
3417	allowSetDefault
3418	hasPermission()
3419	allowSetDefault
3420	javaAWTAccess == null
3420	System.getSecurityManager() == null
3421	javaAWTAccess.isDisposed()
3422	javaAWTAccess.isMainAppContext()
3422	tz == null
3423	allowSetDefault
3424	javaAWTAccess == null
3424	System.getSecurityManager() == null
3425	javaAWTAccess.isDisposed()
3426	javaAWTAccess.isMainAppContext()
3427	(length = id.length()) < (GMT_ID_LENGTH + 2)
3427	id.indexOf(GMT_ID) != 0
3428	zi != null
3429	c == '-'
3430	c != '+'
3431	c == ':'
3432	countDelim > 0
3433	len > 2
3434	c < '0'
3434	c > '9'
3435	index != length
3436	countDelim == 0
3437	len <= 2
3438	len != 2
3439	num > 59
3439	hours > 23
3440	gmtOffset == 0
3441	negative
3442	delay < 0
3443	delay < 0
3444	period <= 0
3445	period <= 0
3446	delay < 0
3447	period <= 0
3448	period <= 0
3449	time < 0
3450	Math.abs(period) > (Long.MAX_VALUE >> 1)
3451	thread.newTasksMayBeScheduled
3452	task.state != TimerTask.VIRGIN
3453	queue.getMin() == task
3454	queue.get(i).state == TimerTask.CANCELLED
3455	result != 0
3456	queue.isEmpty()
3457	task.state == TimerTask.CANCELLED
3458	taskFired = (executionTime<=currentTime)
3459	task.period == 0
3460	taskFired
3461	taskFired
3462	size + 1 == queue.length
3463	queue[j].nextExecutionTime <= queue[k].nextExecutionTime
3464	j < size
3464	queue[j].nextExecutionTime > queue[j+1].nextExecutionTime
3465	queue[k].nextExecutionTime <= queue[j].nextExecutionTime
16937	signerCertPath == null
16937	timestamp == null
16938	myhash == -1
16939	obj == null
16939	obj instanceof Timestamp
16940	this == that
16941	certs.isEmpty()
12741	nano < 0
12741	nano > 999999999
12742	nanos < 0
12743	nanos < 0
12744	s == null
12745	dividingSpace > 0
12746	time_s == null
12747	firstDash > 0
12747	secondDash > 0
12747	secondDash < date_s.length() - 1
12748	yyyy.length() == YEAR_LENGTH
12748	mm.length() >= 1
12748	mm.length() <= MONTH_LENGTH
12748	dd.length() <= DAY_LENGTH
12748	dd.length() >= 1
12749	day >= 1
12749	day <= MAX_DAY
12749	month <= MAX_MONTH
12749	month >= 1
12750	parsedDate
12751	(firstColon > 0) & (secondColon > 0) & (secondColon < time_s.length()-1)
12752	(period > 0) & (period < time_s.length()-1)
12753	nanos_s.length() > 9
12754	Character.isDigit(nanos_s.charAt(0))
12755	period > 0
12756	year < 1000
12757	month < 10
12758	day < 10
12759	hour < 10
12760	minute < 10
12761	second < 10
12762	nanos == 0
12763	n < 0
12763	n > 999999999
12764	super.equals(ts)
12765	nanos == ts.nanos
12766	ts instanceof Timestamp
12767	i == 0
12768	nanos > ts.nanos
12769	nanos < ts.nanos
12770	o instanceof Timestamp
9394	lightweightMarker == null
9395	this != Toolkit.getDefaultToolkit()
9396	this != Toolkit.getDefaultToolkit()
9397	this != Toolkit.getDefaultToolkit()
9398	atNames != null
9399	cl != null
9400	toolkit == null
9401	this != Toolkit.getDefaultToolkit()
9402	this != Toolkit.getDefaultToolkit()
9403	keyCode == KeyEvent.VK_NUM_LOCK
9403	keyCode == KeyEvent.VK_CAPS_LOCK
9403	keyCode == KeyEvent.VK_KANA_LOCK
9403	keyCode == KeyEvent.VK_SCROLL_LOCK
9404	keyCode == KeyEvent.VK_CAPS_LOCK
9404	keyCode == KeyEvent.VK_KANA_LOCK
9404	keyCode == KeyEvent.VK_NUM_LOCK
9404	keyCode == KeyEvent.VK_SCROLL_LOCK
9405	this != Toolkit.getDefaultToolkit()
9406	this != Toolkit.getDefaultToolkit()
9407	this != Toolkit.getDefaultToolkit()
9408	this != Toolkit.getDefaultToolkit()
9409	loaded
9410	platformResources != null
9411	resources != null
9412	security != null
9413	this instanceof HeadlessToolkit
9414	desktopProperties.isEmpty()
9415	propertyName.equals("awt.dynamicLayoutSupported")
9416	value == null
9417	value != null
9418	value instanceof RenderingHints
9419	this instanceof HeadlessToolkit
9420	oldValue != null
9420	newValue != null
9421	localL == null
9422	l instanceof AWTEventListenerProxy
9423	localL == null
9424	security != null
9425	selectiveListener == null
9426	mask == 0
9427	(mask & 1L) != 0
9428	listener == null
9429	security != null
9430	security != null
9431	security != null
9432	(sael.getEventMask() & eventMask) == eventMask
9433	this instanceof HeadlessToolkit
9434	eventListener != null
9435	toolkit instanceof SunToolkit
9435	toolkit instanceof HeadlessToolkit
6856	transform != null
6856	transform.isIdentity()
6857	this.transform == null
6858	transform == null
6858	transform.isIdentity()
6859	transform == null
5500	acc == null
5501	GraphicsEnvironment.isHeadless()
5502	SystemTray.isSupported()
5503	image == null
5504	image == null
5505	peer != null
5506	popup == this.popup
5507	popup != null
5508	popup.isTrayIconPopup
5509	this.popup != null
5510	peer != null
5511	peer != null
5512	listener == null
5513	listener == null
5514	listener == null
5515	listener == null
5516	listener == null
5517	listener == null
5518	caption == null
5518	text == null
5519	peer != null
5520	peer == null
5521	toolkit instanceof SunToolkit
5522	toolkit instanceof HeadlessToolkit
5523	p != null
5524	e instanceof MouseEvent
5525	e instanceof ActionEvent
5526	listener != null
5527	listener != null
5527	e.getID() == MouseEvent.MOUSE_MOVED
5528	listener != null
4457	valEquals(value, e.value)
4458	mapSize!=0
4458	size==0
4458	map instanceof SortedMap
4459	c != null
4459	c == comparator
4459	c.equals(comparator)
4460	comparator != null
4461	key == null
4462	cmp < 0
4463	cmp > 0
4464	cpr != null
4465	cmp < 0
4466	cmp > 0
4467	cmp < 0
4468	p.left != null
4469	cmp > 0
4470	p.right != null
4471	cmp > 0
4472	p.right != null
4473	cmp < 0
4474	p.left != null
4475	cmp < 0
4476	p.left != null
4477	p.right != null
4478	cmp > 0
4479	p.right != null
4480	p.left != null
4481	t == null
4482	cpr != null
4483	cmp < 0
4484	cmp > 0
4485	key == null
4486	cmp < 0
4487	cmp > 0
4488	cmp < 0
4489	p == null
4490	p != null
4491	p != null
4492	e==null
4493	p != null
4494	p != null
4495	t == null
4496	t.right != null
4497	t == null
4498	t.left != null
4499	p != null
4500	p != null
4501	r.left != null
4502	p.parent == null
4503	p.parent.left == p
4504	p != null
4505	l.right != null
4506	p.parent == null
4507	p.parent.right == p
4508	parentOf(x) == leftOf(parentOf(parentOf(x)))
4509	colorOf(y) == RED
4510	x == rightOf(parentOf(x))
4511	colorOf(y) == RED
4512	x == leftOf(parentOf(x))
4513	p.left != null
4513	p.right != null
4514	replacement != null
4515	p.parent == null
4516	p == p.parent.left
4517	p.color == BLACK
4518	p.parent == null
4519	p.color == BLACK
4520	p.parent != null
4521	p == p.parent.left
4522	p == p.parent.right
4523	x == leftOf(parentOf(x))
4524	colorOf(sib) == RED
4525	colorOf(rightOf(sib)) == BLACK
4525	colorOf(leftOf(sib)) == BLACK
4526	colorOf(rightOf(sib)) == BLACK
4527	colorOf(sib) == RED
4528	colorOf(leftOf(sib)) == BLACK
4528	colorOf(rightOf(sib)) == BLACK
4529	colorOf(leftOf(sib)) == BLACK
4530	hi < lo
4531	lo < mid
4532	it != null
4533	defaultVal==null
4534	level == redLevel
4535	left != null
4536	mid < hi
861	c instanceof SortedSet
861	m.size()==0
861	c.size() > 0
861	m instanceof TreeMap
862	cc != null
862	cc==mc
862	cc.equals(mc)
863	c==null
17230	trustedCert == null
17231	pubKey == null
17231	caPrincipal == null
17232	pubKey == null
17233	caName == null
17234	caName.length() == 0
17235	bytes == null
17236	pubKey != null
17237	nc != null
10967	hostUniqueSet
10968	lastCount == Short.MAX_VALUE
10969	now == lastTime
10970	interrupted
10971	obj instanceof UID
11385	s == null
11386	stdout instanceof ProcessPipeInputStream
11387	stderr instanceof ProcessPipeInputStream
11388	stdin instanceof ProcessPipeOutputStream
11389	hasExited
11390	hasExited
14753	host != null
14753	authority == null
14754	isAbsolute()
14755	decodedSchemeSpecificPart == null
14756	decodedAuthority == null
14757	userInfo != null
14757	decodedUserInfo == null
14758	decodedPath == null
14758	path != null
14759	query != null
14759	decodedQuery == null
14760	fragment != null
14760	decodedFragment == null
14761	ob == this
14762	ob instanceof URI
14763	this.isOpaque() != that.isOpaque()
14764	equalIgnoringCase(this.scheme, that.scheme)
14765	equal(this.fragment, that.fragment)
14766	this.isOpaque()
14767	equal(this.path, that.path)
14768	equal(this.query, that.query)
14769	this.authority == that.authority
14770	this.host != null
14771	equal(this.userInfo, that.userInfo)
14772	equalIgnoringCase(this.host, that.host)
14773	this.port != that.port
14774	this.authority != null
14775	equal(this.authority, that.authority)
14776	this.authority != that.authority
14777	hash != 0
14778	isOpaque()
14779	host != null
14780	(c = compareIgnoringCase(this.scheme, that.scheme)) != 0
14781	this.isOpaque()
14782	that.isOpaque()
14783	(c = compare(this.schemeSpecificPart, that.schemeSpecificPart)) != 0
14784	that.isOpaque()
14785	this.host != null
14785	that.host != null
14786	(c = compare(this.userInfo, that.userInfo)) != 0
14787	(c = compareIgnoringCase(this.host, that.host)) != 0
14788	(c = this.port - that.port) != 0
14789	(c = compare(this.authority, that.authority)) != 0
14790	(c = compare(this.path, that.path)) != 0
14791	(c = compare(this.query, that.query)) != 0
14792	c >= 'A'
14792	c <= 'Z'
14793	s == t
14794	s != null
14794	t != null
14795	s.length() != t.length()
14796	s.indexOf('%') < 0
14797	c != '%'
14798	c != d
14799	d != '%'
14800	toLower(s.charAt(i)) != toLower(t.charAt(i))
14801	toLower(s.charAt(i)) != toLower(t.charAt(i))
14802	s == t
14803	t != null
14803	s != null
14804	t.length() != n
14805	toLower(s.charAt(i)) != toLower(t.charAt(i))
14806	s == null
14807	s == null
14808	s == t
14809	s != null
14810	t != null
14811	s == t
14812	s != null
14813	t != null
14814	c != 0
14815	scheme != null
14816	path.charAt(0) != '/'
14816	path.length() > 0
14816	path != null
14817	host != null
14818	userInfo != null
14819	needBrackets
14820	needBrackets
14821	port != -1
14822	authority != null
14823	authority.startsWith("[")
14824	authority.indexOf(":") != -1
14824	end != -1
14825	end == authority.length()
14826	opaquePart != null
14827	opaquePart.startsWith("//[")
14828	opaquePart.indexOf(":")!=-1
14828	end != -1
14829	end == opaquePart.length()
14830	path != null
14831	query != null
14832	fragment != null
14833	scheme != null
14834	schemeSpecificPart != null
14835	sb.length() == 0
14836	string != null
14837	scheme != null
14838	isOpaque()
14839	host != null
14840	userInfo != null
14841	needBrackets
14842	needBrackets
14843	port != -1
14844	authority != null
14845	path != null
14846	query != null
14847	fragment != null
14848	cn == 0
14849	i >= 0
14850	i >= 0
14851	base.isOpaque()
14851	child.isOpaque()
14852	child.scheme == null
14852	child.authority == null
14852	child.path.equals("")
14852	child.query == null
14852	child.fragment != null
14853	child.fragment.equals(base.fragment)
14853	base.fragment != null
14854	child.scheme != null
14855	child.authority == null
14856	cp.length() > 0
14856	cp.charAt(0) == '/'
14857	u.isOpaque()
14857	u.path == null
14857	u.path.length() == 0
14858	np == u.path
14859	child.isOpaque()
14859	base.isOpaque()
14860	equal(base.authority, child.authority)
14860	equalIgnoringCase(base.scheme, child.scheme)
14861	bp.equals(cp)
14862	bp.endsWith("/")
14863	cp.startsWith(bp)
14864	path.charAt(p) != '/'
14865	p > 1
14866	path.charAt(p) == '.'
14866	path.charAt(p + 2) == '/'
14866	path.charAt(p + 1) == '.'
14866	path.charAt(p + 1) == '/'
14866	p == end
14866	p + 1 == end
14867	path.charAt(p++) != '/'
14868	path.charAt(p) != '/'
14869	path[p] != '/'
14870	path[p++] != '/'
14871	path[p] != '/'
14872	i != segs.length
14873	path[p] == '\0'
14874	q == -1
14875	p == q
14876	p <= end
14877	p < q
14878	q <= end
14879	path[p] == '.'
14880	p == end
14881	path[p + 1] == '\0'
14882	path[p + 2] == '\0'
14882	p + 1 == end
14882	path[p + 1] == '.'
14883	i > ns
14883	dots == 0
14884	dots == 1
14885	segs[j] != -1
14886	j >= 0
14887	path[q + 1] == '.'
14887	path[q] == '.'
14887	path[q + 2] == '\0'
14888	path[0] == '\0'
14889	segs[f] >= 0
14890	f >= ns
14890	f == 0
14891	p >= path.length
14891	path[p] == '\0'
14892	ns < 0
14893	s.equals(ps)
14894	c < 64
14895	c < 128
14895	c >= 64
14896	c == 0
14897	c < 64
14898	c < 128
14899	b >= 0x80
14900	c < '\u0080'
14901	match(c, lowMask, highMask)
14902	sb == null
14903	sb != null
14904	allowNonASCII
14904	Character.isSpaceChar(c)
14904	Character.isISOControl(c)
14905	sb == null
14906	sb != null
14907	n == 0
14908	s.charAt(i) >= '\u0080'
14909	++i >= n
14910	b >= 0x80
14911	c <= '9'
14911	c >= '0'
14912	c <= 'f'
14912	c >= 'a'
14913	c >= 'A'
14913	c <= 'F'
14914	s == null
14915	n == 0
14916	s.indexOf('%') < 0
14917	c == '['
14918	betweenBrackets
14918	c == ']'
14919	c != '%'
14919	betweenBrackets
14920	++i >= n
14921	++i >= n
14922	c != '%'
16821	uri == null
15049	input == null
15049	reason == null
15050	index < -1
15051	index > -1
15429	handler != null
15430	sm != null
15431	host != null
15432	host.indexOf(':') >= 0
15432	host.startsWith("[")
15433	port < -1
15434	query != null
15435	(handler = getURLStreamHandler(protocol)) == null
15435	handler == null
15436	handler != null
15437	sm != null
15438	spec.regionMatches(true, start, "url:", 0, 4)
15439	start < spec.length()
15439	spec.charAt(start) == '#'
15440	c == ':'
15441	isValidProtocol(s)
15442	context != null
15442	newProtocol == null
15442	newProtocol.equalsIgnoreCase(context.protocol)
15443	handler == null
15444	context.path != null
15444	context.path.startsWith("/")
15445	newProtocol == null
15446	protocol == null
15447	handler == null
15447	(handler = getURLStreamHandler(protocol)) == null
15448	i >= 0
15449	start == limit
15449	isRelative
15450	ref == null
15451	len < 1
15452	Character.isLetter(c)
15453	Character.isLetterOrDigit(c)
15453	c != '.'
15453	c != '-'
15453	c != '+'
15454	q != -1
15455	obj instanceof URL
15456	hashCode != -1
15457	proxy == null
15458	p.type() != Proxy.Type.DIRECT
15458	sm != null
15459	epoint.isUnresolved()
15460	factory != null
15461	security != null
15462	handler == null
15463	factory != null
15464	handler == null
15465	packagePrefixList != ""
15466	protocol.equalsIgnoreCase(GOPHER)
15466	packagePrefix.equals(JDK_PACKAGE_PREFIX)
15466	enableGopher
15467	cl != null
15468	cls != null
15469	handler2 != null
15470	factory != null
15470	checkedWithFactory
15471	handler2 != null
15472	handler != null
15473	(handler = getURLStreamHandler(protocol)) == null
15474	host != null
15474	port != -1
15474	authority == null
15474	host.length() > 0
15475	host == null
15476	at != -1
15477	authority != null
15478	ind != -1
15479	file != null
15480	q != -1
15481	q != -1
15386	security != null
15387	security != null
15388	security != null
15389	security != null
15390	security != null
15391	url == null
15392	urlc instanceof JarURLConnection
15393	closeables.containsKey(jar)
15394	urlc instanceof sun.net.www.protocol.file.FileURLConnection
15395	security != null
15396	errors.isEmpty()
15397	pkg != null
15398	pkg.isSealed()
15399	pkg.isSealed(url)
15400	man != null
15400	isSealed(pkgname, man)
15401	i != -1
15402	getAndVerifyPackage(pkgname, man, url) == null
15403	man != null
15404	getAndVerifyPackage(pkgname, man, url) == null
15405	bb != null
15406	attr != null
15407	attr != null
15408	specTitle == null
15409	specVersion == null
15410	specVendor == null
15411	implTitle == null
15412	implVersion == null
15413	implVendor == null
15414	sealed == null
15415	"true".equalsIgnoreCase(sealed)
15416	attr != null
15417	sealed == null
15418	(attr = man.getMainAttributes()) != null
15419	p instanceof FilePermission
15420	path.endsWith(File.separator)
15421	url.getProtocol().equals("file")
15421	p == null
15422	path.endsWith(File.separator)
15423	urlConnection instanceof JarURLConnection
15424	host != null
15424	host.length() > 0
15425	p != null
15426	sm != null
15427	sm != null
15428	i != -1
15052	fileNameMap == null
15052	fileNameMapLoaded
15053	sm != null
15054	timeout < 0
15055	timeout < 0
15056	l > Integer.MAX_VALUE
15057	connected
15058	connected
15059	connected
15060	connected
15061	connected
15062	connected
15063	key == null
15064	requests == null
15065	connected
15066	key == null
15067	requests == null
15068	connected
15069	requests == null
15070	connected
15071	requests == null
15072	factory != null
15073	security != null
15074	contentType == null
15075	handler != null
15076	factory != null
15077	handler == null
15078	contentType == null
15079	index > 0
15080	cl != null
15081	cls != null
15082	c == '/'
15083	c <= '9'
15083	'A' <= c
15083	'0' <= c
15083	c <= 'Z'
15083	c <= 'z'
15083	'a' <= c
15084	packagePrefixList != ""
15085	is.markSupported()
15086	c1 == 0xCA
15086	c2 == 0xFE
15086	c3 == 0xBA
15086	c4 == 0xBE
15087	c1 == 0xAC
15087	c2 == 0xED
15088	c1 == '<'
15089	c3 == 'E'
15089	c2 == 'b'
15089	c4 == 'M'
15089	c3 == 'O'
15089	c5 == 'd'
15089	c3 == 't'
15089	c4 == 'd'
15089	c5 == 'D'
15089	c4 == 'A'
15089	c2 == 'H'
15089	c5 == 'l'
15089	c4 == 'm'
15089	c5 == 'y'
15089	c2 == 'B'
15089	c4 == 'D'
15089	c2 == '!'
15089	c2 == 'h'
15089	c4 == 'a'
15089	c3 == 'o'
15089	c3 == 'T'
15089	c5 == 'L'
15089	c5 == 'Y'
15089	c3 == 'e'
15090	c3 == 'x'
15090	c6 == ' '
15090	c2 == '?'
15090	c5 == 'l'
15090	c4 == 'm'
15091	c2 == 0xbb
15091	c1 == 0xef
15091	c3 == 0xbf
15092	c5 == '?'
15092	c6 == 'x'
15092	c4 == '<'
15093	c2 == 0xff
15093	c1 == 0xfe
15094	c6 == '?'
15094	c4 == '<'
15094	c8 == 'x'
15094	c3 == 0
15094	c5 == 0
15094	c7 == 0
15095	c1 == 0xff
15095	c2 == 0xfe
15096	c8 == 0
15096	c7 == 'x'
15096	c3 == '<'
15096	c5 == '?'
15096	c6 == 0
15096	c4 == 0
15097	c1 == 0x00
15097	c2 == 0x00
15097	c4 == 0xff
15097	c3 == 0xfe
15098	c6 == 0
15098	c14 == 0
15098	c13 == 0
15098	c15 == 0
15098	c11 == 0
15098	c9 == 0
15098	c7 == 0
15098	c16 == 'x'
15098	c8 == '<'
15098	c10 == 0
15098	c12 == '?'
15098	c5 == 0
15099	c3 == 0x00
15099	c4 == 0x00
15099	c1 == 0xff
15099	c2 == 0xfe
15100	c7 == 0
15100	c6 == 0
15100	c10 == 0
15100	c12 == 0
15100	c11 == 0
15100	c8 == 0
15100	c9 == '?'
15100	c14 == 0
15100	c15 == 0
15100	c16 == 0
15100	c5 == '<'
15100	c13 == 'x'
15101	c3 == 'F'
15101	c2 == 'I'
15101	c1 == 'G'
15101	c4 == '8'
15102	c2 == 'd'
15102	c3 == 'e'
15102	c4 == 'f'
15102	c1 == '#'
15103	c5 == 'M'
15103	c6 == '2'
15103	c2 == ' '
15103	c1 == '!'
15103	c4 == 'P'
15103	c3 == 'X'
15104	c2 == 80
15104	c7 == 26
15104	c5 == 13
15104	c6 == 10
15104	c4 == 71
15104	c3 == 78
15104	c1 == 137
15104	c8 == 10
15105	c2 == 0xD8
15105	c1 == 0xFF
15105	c3 == 0xFF
15106	c4 == 0xE0
15107	c8 == 'x'
15107	c9 == 'i'
15107	c7 == 'E'
15107	c10 =='f'
15107	c11 == 0
15107	c4 == 0xE1
15108	c4 == 0xEE
15109	c8 == 0xE1
15109	c7 == 0x1A
15109	c3 == 0x11
15109	c1 == 0xD0
15109	c4 == 0xE0
15109	c2 == 0xCF
15109	c5 == 0xA1
15109	c6 == 0xB1
15110	checkfpx(is)
15111	c2 == 0x73
15111	c3 == 0x6E
15111	c1 == 0x2E
15111	c4 == 0x64
15112	c1 == 0x64
15112	c2 == 0x6E
15112	c3 == 0x73
15112	c4 == 0x2E
15113	c2 == 'I'
15113	c4 == 'F'
15113	c1 == 'R'
15113	c3 == 'F'
15114	(posn = skipForward(is, toSkip)) < toSkip
15115	readBytes(c, 2, is) < 0
15116	readBytes(c, 2, is) < 0
15117	byteOrder == 0xFE
15118	(skipped = skipForward(is, toSkip)) < toSkip
15119	readBytes(c, 4, is) < 0
15120	byteOrder == 0xFE
15121	toSkip < 0
15122	(skipForward(is, toSkip)) < toSkip
15123	readBytes(c, 16, is) < 0
15124	c[11]== 0xAA
15124	c[12]== 0x00
15124	c[13]== 0xA1
15124	c[14]== 0xF9
15124	byteOrder == 0xFE
15124	c[8] == 0x85
15124	c[5] == 0xC1
15124	c[0] == 0x00
15124	c[10]== 0x00
15124	c[2] == 0x61
15124	c[6] == 0xCE
15124	c[7] == 0x11
15124	c[4] == 0x54
15124	c[3] == 0x56
15124	c[15]== 0x5B
15124	c[9] == 0x53
15125	c[3] == 0x00
15125	c[0] == 0x56
15125	c[6] == 0x11
15125	c[11]== 0xAA
15125	c[9] == 0x53
15125	c[10]== 0x00
15125	c[12]== 0x00
15125	c[13]== 0xA1
15125	c[4] == 0xC1
15125	c[14]== 0xF9
15125	c[15]== 0x5B
15125	c[1] == 0x61
15125	c[5] == 0x54
15125	c[7] == 0xCE
15125	c[8] == 0x85
15126	is.read(buf, 0, len) < len
15127	eachSkip <= 0
15128	is.read() == -1
15482	enc.length() == 0
15483	bytes == null
15484	v < 0
15485	i < numChars
15486	c=='%'
15486	i < numChars
14494	enc == null
14495	dontNeedEncoding.get(c)
14496	c == ' '
14497	c >= 0xD800
14497	c <= 0xDBFF
14498	(i+1) < s.length()
14499	d <= 0xDFFF
14499	d >= 0xDC00
14500	Character.isLetter(ch)
14501	Character.isLetter(ch)
14940	start < limit
14941	queryStart != -1
14941	queryStart < limit
14942	limit > queryStart
14943	isUNCName
14943	start <= limit - 2
14943	spec.charAt(start) == '/'
14943	spec.charAt(start + 1) == '/'
14944	i < 0
14945	i < 0
14946	ind != -1
14947	host != null
14948	host.charAt(0) == '['
14948	host.length()>0
14949	(ind = host.indexOf(']')) > 2
14950	IPAddressUtil. isIPv6LiteralAddress(host.substring(1, ind))
14951	nhost.length() > ind+1
14952	nhost.charAt(ind+1) == ':'
14953	nhost.length() > (ind + 1)
14954	ind >= 0
14955	host.length() > (ind + 1)
14956	port < -1
14957	authority.length() > 0
14957	authority != null
14958	host == null
14959	start < limit
14960	spec.charAt(start) == '/'
14961	path.length() > 0
14961	path != null
14962	ind == -1
14962	authority != null
14963	queryOnly
14963	path != null
14964	ind < 0
14965	path == null
14966	isRelPath
14967	path.indexOf("/../", limit) != 0
14967	i > 0
14967	(limit = path.lastIndexOf('/', i - 1)) >= 0
14968	(limit = path.lastIndexOf('/', i - 1)) >= 0
14969	path.startsWith("./")
14969	path.length() > 2
14970	path.endsWith("/.")
14971	protocol != null
14972	addr != null
14973	host != null
14974	file != null
14975	u.getPort() == -1
14976	ref != null
14977	u1.getProtocol() == u2.getProtocol()
14977	u1.getProtocol().equalsIgnoreCase(u2.getProtocol())
14977	u1.getProtocol() != null
14978	u1.getFile().equals(u2.getFile())
14978	u1.getFile() == u2.getFile()
14978	u1.getFile() != null
14979	port1 != port2
14980	hostsEqual(u1, u2)
14981	u.hostAddress != null
14982	host == null
14982	host.equals("")
14983	a1 != null
14983	a2 != null
14984	u1.getHost() != null
14984	u2.getHost() != null
14985	u.getAuthority() != null
14985	u.getAuthority().length() > 0
14986	u.getPath() != null
14987	u.getQuery() != null
14988	u.getRef() != null
14989	u.getAuthority() != null
14989	u.getAuthority().length() > 0
14990	u.getPath() != null
14991	u.getQuery() != null
14992	u.getRef() != null
14993	this != u.handler
14994	host.length() != 0
14994	host != null
14995	at != -1
14996	file != null
14997	q != -1
1447	components.length != 5
1448	version() != 1
1449	version() != 1
1450	version() != 1
1451	obj.getClass() != UUID.class
1451	null == obj
10941	csf == null
10941	ssf == null
10942	obj instanceof UnicastRemoteObject
13679	len == 0
13680	n == 0
13681	off > 0
13682	c == '/'
13682	prevChar == '/'
13683	prevChar == '/'
13683	c == '/'
13684	prevChar == '/'
13685	pathname.length() == 0
13686	child.equals("")
13687	child.charAt(0) == '/'
13688	parent.equals("/")
13689	parent.equals("/")
13690	p.endsWith("/")
13690	p.length() > 1
13691	isAbsolute(f)
13692	useCanonCaches
13693	res == null
13694	useCanonPrefixCache
13695	dir != null
13696	resDir != null
13697	res == null
13698	dir.startsWith(javaHome)
13698	useCanonPrefixCache
13698	dir != null
13699	resDir.equals(dir)
13699	resDir != null
13700	f.exists()
13700	f.isDirectory()
13701	path == null
13702	c == '.'
13703	++adjacentDots >= 2
13704	c == sep
13705	nonDotCount == 0
13705	adjacentDots == 1
13706	idx == 0
13706	path.charAt(idx - 1) == sep
13706	idx >= last - 1
13707	security != null
2061	s == null
4548	f == null
16835	type == null
16836	certs != null
16837	certs[i] instanceof X509Certificate
16838	this.certs == null
16839	count == certs.length
16840	this.certs == null
16841	this.certs != null
16842	certs == null
16843	this.certs[i].equals(certs[j])
16844	match
16845	actions == null
16845	name == null
16846	name != null
16846	actions == null
16847	debug != null
16848	debug != null
16849	obj == this
16850	obj instanceof UnresolvedPermission
16851	this.type.equals(that.type)
16852	this.name == null
16853	that.name != null
16854	this.name.equals(that.name)
16855	this.actions == null
16856	that.actions != null
16857	this.actions.equals(that.actions)
16858	this.certs != null
16858	this.certs != null
16858	that.certs == null
16858	that.certs != null
16858	this.certs.length != that.certs.length
16858	this.certs == null
16858	that.certs != null
16859	this.certs[i].equals(that.certs[j])
16860	match
16861	that.certs[i].equals(this.certs[j])
16862	match
16863	name != null
16864	actions != null
16865	certs==null
16865	certs.length==0
16866	type == null
16867	size > 0
16868	cfs.containsKey(certType)
17471	permission instanceof UnresolvedPermission
17472	v == null
10906	obj instanceof VMID
10907	uid.equals(vmid.uid)
10908	(addr == null) ^ (vmid.addr == null)
10909	addr != null
10910	addr.length != vmid.addr.length
10911	addr[i] != vmid.addr[i]
10912	addr != null
1075	initialCapacity < 0
1076	elementData.getClass() != Object[].class
1077	elementCount < oldCapacity
1078	minCapacity > 0
1079	minCapacity - elementData.length > 0
1080	newCapacity - minCapacity < 0
1081	newCapacity - MAX_ARRAY_SIZE > 0
1082	minCapacity < 0
1083	newSize > elementCount
1084	o == null
1085	elementData[i]==null
1086	o.equals(elementData[i])
1087	index >= elementCount
1088	o == null
1089	elementData[i]==null
1090	o.equals(elementData[i])
1091	index >= elementCount
1092	elementCount == 0
1093	elementCount == 0
1094	index >= elementCount
1095	index >= elementCount
1096	index < 0
1097	j > 0
1098	index > elementCount
1099	i >= 0
1100	a.length < elementCount
1101	a.length > elementCount
1102	index >= elementCount
1103	index >= elementCount
1104	index >= elementCount
1105	numMoved > 0
1106	index > elementCount
1106	index < 0
1107	numMoved > 0
1108	index < 0
1108	index > elementCount
10502	sourceBean == null
10503	listener == null
10504	listener instanceof VetoableChangeListenerProxy
10505	listener == null
10506	listener instanceof VetoableChangeListenerProxy
10507	listener == null
10507	propertyName == null
10508	listener != null
10509	propertyName == null
10509	listener == null
10510	listener != null
10511	oldValue == null
10511	oldValue.equals(newValue)
10511	newValue == null
10512	oldValue != newValue
10513	oldValue != newValue
10514	newValue == null
10514	oldValue == null
10514	oldValue.equals(newValue)
10515	common == null
10516	named == null
10517	listeners != null
10518	property == null
10519	children == null
10520	listeners != null
10521	l instanceof Serializable
10522	children != null
6536	timer == null
6537	dispatchThread == null
6538	interval < 0
6539	interval != 0
6540	keepBlockingEDT.compareAndSet(false, true)
6541	currentThread == dispatchThread
6542	interval != 0
6543	currentSE != null
6544	filter != null
6545	interval > 0
6546	filter != null
6547	keepBlockingEDT.compareAndSet(true, false)
12112	valuesMap == null
12113	oldValuesMap != null
12114	supplier != null
12115	value != null
12116	factory == null
12117	supplier == null
12118	supplier == null
12119	valuesMap.replace(subKey, supplier, factory)
4086	initialCapacity < 0
4087	initialCapacity > MAXIMUM_CAPACITY
4088	Float.isNaN(loadFactor)
4088	loadFactor <= 0
4089	useAltHashing
4090	k instanceof String
4091	p == e
4092	prev == e
4093	size == 0
4094	e.hash == h
4094	eq(k, e.get())
4095	h == e.hash
4095	eq(k, e.get())
4096	value != oldValue
4097	++size >= threshold
4098	oldCapacity == MAXIMUM_CAPACITY
4099	size >= threshold / 2
4100	key == null
4101	rehash
4102	numKeysToBeAdded == 0
4103	numKeysToBeAdded > threshold
4104	targetCapacity > MAXIMUM_CAPACITY
4105	newCapacity > table.length
4106	eq(k, e.get())
4106	h == e.hash
4107	prev == e
4108	o instanceof Map.Entry
4109	h == e.hash
4109	e.equals(entry)
4110	prev == e
4111	value==null
4112	value.equals(e.value)
4113	e.value==null
10492	key == null
10493	entry.isMatched(key, hash)
10494	entry.isMatched(key, hash)
10495	++this.size >= this.threshold
10496	this.table.length == MAXIMUM_CAPACITY
10497	this.size >= this.threshold / 2
10498	ref != null
10499	current == entry
10500	prev == entry
10501	key == null
6250	gc == null
6251	gc.getDevice().getType() != GraphicsDevice.TYPE_RASTER_SCREEN
6252	y != this.y
6252	x != this.x
6253	owner != null
6254	icons.size() == 0
6254	icons == null
6255	peer != null
6256	image != null
6257	parent != null
6257	parent.getPeer() == null
6258	peer == null
6259	parent != null
6259	parent.getPeer() == null
6260	peer == null
6261	peer != null
6262	beforeFirstShow
6263	isMinimumSizeSet()
6264	size.width < minimumSize.width
6264	size.height < minimumSize.height
6265	peer != null
6266	isMinimumSizeSet()
6267	width < minSize.width
6268	height < minSize.height
6269	isTrayIconWindow
6270	beforeFirstWindowShown.getAndSet(false)
6271	peer == null
6272	visible
6273	child.showWithParent
6273	child != null
6274	isModalBlocked()
6275	this instanceof Frame
6275	this instanceof Dialog
6276	(state & OPENED) == 0
6277	w.getPeer() != null
6277	w.isShowing()
6278	child != null
6279	(eventMask & AWTEvent.WINDOW_EVENT_MASK) != 0
6279	windowListener != null
6279	Toolkit.enabledOnToolkit(AWTEvent.WINDOW_EVENT_MASK)
6280	child != null
6280	child.visible
6281	isModalBlocked()
6282	getPeer() != null
6283	EventQueue.isDispatchThread()
6284	visible
6285	peer != null
6286	isModalBlocked()
6287	isAlwaysOnTop()
6288	visible
6289	peer != null
6290	sm != null
6291	sm.checkTopLevelWindow(this)
6292	this.locale == null
6293	inputContext == null
6294	cursor == null
6295	fullCopy[realSize] != null
6296	fullSize != realSize
6297	peerCall
6298	peer != null
6299	w.isModalBlocked()
6300	windowList != null
6301	w != null
6302	fullSize != realSize
6303	w.getOwner() == null
6304	w.getOwner() == null
6305	exclusionType == null
6306	Toolkit.getDefaultToolkit().isModalExclusionTypeSupported(exclusionType)
6307	modalExclusionType == exclusionType
6308	exclusionType == Dialog.ModalExclusionType.TOOLKIT_EXCLUDE
6309	sm != null
6310	modalExclusionType != null
6310	modalExclusionType.compareTo(exclusionType) >= 0
6311	w.isVisible()
6312	w.isModalBlocked()
6313	l == null
6314	l == null
6315	l == null
6316	l == null
6317	l == null
6318	l == null
6319	listenerType == WindowFocusListener.class
6320	listenerType == WindowStateListener.class
6321	listenerType == WindowListener.class
6322	windowListener != null
6322	(eventMask & AWTEvent.WINDOW_EVENT_MASK) != 0
6323	windowFocusListener != null
6323	(eventMask & AWTEvent.WINDOW_FOCUS_EVENT_MASK) != 0
6324	(eventMask & AWTEvent.WINDOW_STATE_EVENT_MASK) != 0
6324	windowStateListener != null
6325	e instanceof WindowEvent
6326	listener != null
6327	listener != null
6328	listener != null
6329	e.getKeyCode() == KeyEvent.VK_F1
6329	e.getID() == KeyEvent.KEY_PRESSED
6329	e.isControlDown()
6329	e.isActionKey()
6329	e.isShiftDown()
6330	security != null
6331	oldAlwaysOnTop != alwaysOnTop
6332	isAlwaysOnTopSupported()
6333	peer != null
6334	isFocused()
6335	mostRecent != null
6336	id < 0
6336	id >= KeyboardFocusManager.TRAVERSAL_KEY_LENGTH
6337	keystrokes != null
6338	getFocusableWindowState()
6339	this instanceof Dialog
6339	this instanceof Frame
6340	getFocusTraversalPolicy().getDefaultComponent(this) == null
6341	owner instanceof Dialog
6341	owner instanceof Frame
6342	peer != null
6343	oldFocusableWindowState
6343	isFocused()
6343	focusableWindowState
6344	toFocus != null
6344	toFocus.requestFocus(false, CausedFocusEvent.Cause.ACTIVATION)
6345	e.getID() == ComponentEvent.COMPONENT_RESIZED
6346	handleEvent(e)
6347	weakWindow != null
6348	ownedWindowList.contains(weakWindow)
6349	weakWindow != null
6350	windowList == null
6351	windowList != null
6352	type == null
6353	isDisplayable()
6354	child != null
6355	icons != null
6356	i instanceof Serializable
6357	windowSerializedDataVersion < 2
6358	focusMgr != null
6359	focusMgr.focusOwner != null
6360	windowListenerK == key
6361	windowFocusListenerK == key
6362	windowStateListenerK == key
6363	ownedWindowK == key
6364	obj instanceof Image
6365	aot
6366	accessibleContext == null
6367	gc == null
6368	log.isLoggable(PlatformLogger.FINER)
6369	componentWindow == null
6369	c == null
6370	c.isShowing()
6371	dy + windowSize.height > gcBounds.y + gcBounds.height
6372	compLocation.x - gcBounds.x + compSize.width / 2 < gcBounds.width / 2
6373	dy + windowSize.height > gcBounds.y + gcBounds.height
6374	dy < gcBounds.y
6375	dx + windowSize.width > gcBounds.x + gcBounds.width
6376	dx < gcBounds.x
6377	component == null
6377	component.canBeFocusOwner()
6378	isShowing()
6378	locationByPlatform
6379	getBoundsOp() == ComponentPeer.SET_BOUNDS
6379	getBoundsOp() == ComponentPeer.SET_LOCATION
6380	opacity < 0.0f
6380	opacity > 1.0f
6381	opacity < 1.0f
6382	gc.getDevice().getFullScreenWindow() == this
6383	gd.isWindowTranslucencySupported( GraphicsDevice.WindowTranslucency.TRANSLUCENT)
6384	peer != null
6385	shape != null
6386	gc.getDevice().getFullScreenWindow() == this
6387	gd.isWindowTranslucencySupported( GraphicsDevice.WindowTranslucency.PERPIXEL_TRANSPARENT)
6388	peer != null
6389	oldBg.equals(bgColor)
6389	oldBg != null
6390	oldAlpha == 255
6390	alpha < 255
6391	gc.getDevice().getFullScreenWindow() == this
6392	gc.isTranslucencyCapable()
6393	capableGC == null
6394	alpha == 255
6394	oldAlpha < 255
6395	peer != null
6396	peer != null
6397	isOpaque()
6398	gg instanceof Graphics2D
6399	SunToolkit.isInstanceOf(component, "javax.swing.RootPaneContainer")
6400	content != null
6401	numChildren > 0
6402	child instanceof javax.swing.RootPaneContainer
9741	opposite == null
9092	parentX < this.minX
9093	parentY < this.minY
9094	parentX+w > this.width + this.minX
9094	parentX+w < parentX
9095	parentY+h < parentY
9095	parentY+h > this.height + this.minY
9096	bandList != null
9097	dstOffY < this.minY
9097	dstOffX + width > this.minX + this.width
9097	dstOffY + height > this.minY + this.height
9097	dstOffX < this.minX
9098	dstOffX < this.minX
9099	dstOffY < this.minY
9100	dstOffX+width > this.minX+this.width
9101	dstOffY+height > this.minY+this.height
9102	height <= 0
9102	width <= 0
14017	detail == null
13506	lock == null
13507	writeBuffer == null
13508	len <= writeBufferSize
13509	writeBuffer == null
13510	csq == null
17451	this == other
17452	other instanceof X509CRL
17453	issuerPrincipal == null
17454	certIssuer.equals(crlIssuer) == false
17466	this == other
17467	other instanceof X509CRLEntry
17468	thisCRLEntry.length != otherCRLEntry.length
17469	thisCRLEntry[i] != otherCRLEntry[i]
17470	hasExtensions()
17410	issuers.isEmpty()
17410	issuers == null
17411	names == null
17411	names.size() == 0
17412	issuerNames == null
17413	issuerX500Principals == null
17414	nameObject instanceof byte []
17414	nameObject instanceof String
17415	nameObject instanceof byte []
17416	nameObject instanceof String
17417	dateAndTime == null
17418	issuerX500Principals == null
17419	issuerNames == null
17420	dateAndTime == null
17421	issuerNames != null
17422	minCRL != null
17423	maxCRL != null
17424	dateAndTime != null
17425	certChecking != null
17426	crl instanceof X509CRL
17427	issuerNames != null
17428	i.next().equals(issuer)
17429	found
17430	debug != null
17431	minCRL != null
17431	maxCRL != null
17432	crlNumExtVal == null
17433	debug != null
17434	debug != null
17435	minCRL != null
17436	crlNum.compareTo(minCRL) < 0
17437	debug != null
17438	maxCRL != null
17439	crlNum.compareTo(maxCRL) > 0
17440	debug != null
17441	dateAndTime != null
17442	nextUpdate == null
17443	debug != null
17444	skew > 0
17445	nowPlusSkew.before(crlThisUpdate)
17445	nowMinusSkew.after(nextUpdate)
17446	debug != null
17447	issuerNames != null
17238	issuerDN == null
17239	subjectDN == null
17240	subjectKeyID == null
17241	authorityKeyID == null
17242	certValid == null
17243	privateKeyValid == null
17244	oid == null
17245	key == null
17246	key == null
17247	keyUsage == null
17248	keyPurposeSet == null
17248	keyPurposeSet.isEmpty()
17249	names == null
17250	names.isEmpty()
17251	subjectAlternativeNames == null
17252	subjectAlternativeGeneralNames == null
17253	nameList.size() != 2
17254	o instanceof Integer
17255	object1 == null
17255	object2 == null
17256	debug != null
17257	name instanceof String
17258	debug != null
17259	debug != null
17260	name instanceof byte[]
17261	debug != null
17262	debug != null
17263	debug != null
17264	bytes == null
17265	minMaxPathLen < -2
17266	certPolicySet == null
17267	o instanceof String
17268	names == null
17268	names.isEmpty()
17269	pathToGeneralNames == null
17270	subjectKeyID == null
17271	authorityKeyID == null
17272	certificateValid == null
17273	privateKeyValid == null
17274	subjectPublicKeyAlgID == null
17275	keyUsage == null
17276	subjectAlternativeNames == null
17277	o instanceof List
17278	nameList.size() != 2
17279	o instanceof Integer
17280	nameType < 0
17280	nameType > 8
17281	nameObject instanceof String
17281	nameObject instanceof byte[]
17282	debug != null
17283	nameObject instanceof byte[]
17284	ncBytes == null
17285	pathToNames == null
17286	x509Cert != null
17287	serialNumber != null
17288	issuer != null
17289	subject != null
17290	subjectAlternativeNames != null
17291	subjectKeyID != null
17292	authorityKeyID != null
17293	certificateValid != null
17294	privateKeyValid != null
17295	subjectPublicKeyAlgID != null
17296	subjectPublicKey != null
17297	keyUsage != null
17298	keyPurposeSet != null
17299	policy != null
17300	pathToGeneralNames != null
17301	k[0]
17302	k[1]
17303	k[2]
17304	k[3]
17305	k[4]
17306	k[5]
17307	k[6]
17308	k[7]
17309	k[8]
17310	cert instanceof X509CertImpl
17311	rawExtVal == null
17312	cert instanceof X509Certificate
17313	debug != null
17314	x509Cert != null
17315	x509Cert.equals(xcert)
17316	debug != null
17317	serialNumber != null
17318	serialNumber.equals(xcert.getSerialNumber())
17319	debug != null
17320	issuer != null
17321	issuer.equals(xcert.getIssuerX500Principal())
17322	debug != null
17323	subject != null
17324	subject.equals(xcert.getSubjectX500Principal())
17325	debug != null
17326	certificateValid != null
17327	debug != null
17328	subjectPublicKeyBytes != null
17329	Arrays.equals(subjectPublicKeyBytes, certKey)
17330	debug != null
17331	debug != null
17331	result
17332	subjectKeyID == null
17333	extVal == null
17334	debug != null
17335	Arrays.equals(subjectKeyID, certSubjectKeyID)
17335	certSubjectKeyID == null
17336	debug != null
17337	debug != null
17338	authorityKeyID == null
17339	extVal == null
17340	debug != null
17341	Arrays.equals(authorityKeyID, certAuthKeyID)
17341	certAuthKeyID == null
17342	debug != null
17343	debug != null
17344	privateKeyValid == null
17345	ext != null
17346	debug != null
17347	debug != null
17348	debug != null
17349	debug != null
17350	subjectPublicKeyAlgID == null
17351	val.tag != DerValue.tag_Sequence
17352	debug != null
17353	subjectPublicKeyAlgID.equals(algID.getOID())
17354	debug != null
17355	debug != null
17356	keyUsage == null
17357	certKeyUsage != null
17358	keyUsage[keyBit]
17358	keyBit >= certKeyUsage.length
17358	certKeyUsage[keyBit]
17359	debug != null
17360	keyPurposeSet.isEmpty()
17360	keyPurposeSet == null
17361	ext != null
17362	certKeyPurposeVector.containsAll(keyPurposeOIDSet)
17362	certKeyPurposeVector.contains(ANY_EXTENDED_KEY_USAGE)
17363	debug != null
17364	debug != null
17365	subjectAlternativeNames.isEmpty()
17365	subjectAlternativeNames == null
17366	sanExt == null
17367	debug != null
17368	matchAllSubjectAltNames
17368	i.hasNext()
17368	found
17369	debug != null
17370	found
17370	matchAllSubjectAltNames
17371	debug != null
17372	nc == null
17373	nc.verify(xcert)
17374	debug != null
17375	debug != null
17376	policy == null
17377	ext == null
17378	debug != null
17379	policy != null
17380	policy.getCertPolicyIds().isEmpty()
17381	policyIDs.isEmpty()
17382	debug != null
17383	policyIDs.contains(id)
17384	foundOne
17385	debug != null
17386	debug != null
17387	pathToGeneralNames == null
17388	ext == null
17389	debug != null
17389	debug.isOn("certpath")
17390	excluded != null
17391	matchExcluded(excluded) == false
17392	permitted != null
17393	matchPermitted(permitted) == false
17394	debug != null
17395	excludedName.getType() == pathToName.getType()
17396	debug != null
17397	permittedName.getType() == pathToName.getType()
17398	permittedNameFound
17398	nameTypeFound
17399	debug != null
17400	basicConstraints == -1
17401	basicConstraints == -2
17402	maxPathLen != -1
17403	debug != null
17404	maxPathLen < basicConstraints
17405	debug != null
17406	set instanceof HashSet
17407	subjectAlternativeNames != null
17408	pathToGeneralNames != null
17199	issuerX500Principal == null
17200	subjectX500Principal == null
10220	parsingComplete()
10221	in != null
10222	this.input == null
10223	this.array == null
10224	null != System.getSecurityManager()
10224	this.acc == null
10225	exceptionListener == null
10650	out == null
10651	indentation < 0
10652	internal
10653	list == null
10654	o == this
10654	o == null
10655	exp == null
10655	o.getClass() == String.class
10656	isArgument
10657	d.marked
10658	target instanceof Class
10659	target instanceof Field
10660	args == null
10660	method == null
10661	args.length == 1
10661	method.equals("get")
10662	method.equals("set")
10662	args.length == 2
10663	get(oldValue) == null
10663	oldValue instanceof String
10663	internal
10664	preambleWritten
10665	this.declaration
10666	"writeObject".equals(s.getMethodName())
10667	Statement.class == statements.get(i).getClass()
10668	d == null
10669	value == null
10670	value instanceof Class
10671	d.exp != null
10672	target == null
10672	methodName == null
10673	isArgument
10673	methodName.equals("get")
10673	target instanceof Field
10674	target == value.getClass()
10674	primitiveType != null
10674	methodName.equals("new")
10675	primitiveType == Character.TYPE
10676	isValidCharCode(code)
10677	value == null
10678	value instanceof String
10679	d.name != null
10680	isArgument
10681	d.exp != null
10682	isValidCharCode(point)
10682	this.encoder.canEncode(string.substring(index, index + count))
10683	value != null
10684	target == null
10684	methodName == null
10685	target == outer
10686	methodName.equals("newInstance")
10686	target == Array.class
10687	target.getClass() == Class.class
10688	d.name == null
10689	statements.contains(exp)
10690	expression
10691	d.refs > 1
10691	expression
10692	args.length == 2
10692	methodName.equals("set")
10692	args.length == 1
10692	expression
10692	args[0] instanceof Integer
10692	methodName.equals("get")
10692	expression
10692	args[0] instanceof Integer
10693	expression
10693	args.length == 0
10693	expression
10693	methodName.startsWith("set")
10693	methodName.startsWith("get")
10693	args.length == 1
10694	3 < methodName.length()
10695	methodName.equals("newInstance")
10695	methodName.equals("new")
10696	args.length == 0
10696	statements.size() == 0
10697	wrapper == Boolean.class
10698	wrapper == Byte.class
10699	wrapper == Character.class
10700	wrapper == Short.class
10701	wrapper == Integer.class
10702	wrapper == Long.class
10703	wrapper == Float.class
10704	wrapper == Double.class
10705	wrapper == Void.class
1563	x < 10
1564	text == null
1565	ch == '<'
1566	ch == '>'
1567	ch == '&'
1568	name != null
1569	record.getSourceClassName() != null
1570	record.getSourceMethodName() != null
1571	record.getMessage() != null
1572	bundle.getString(record.getMessage()) != null
1572	bundle != null
1573	parameters.length != 0
1573	record.getMessage().indexOf("{") == -1
1573	parameters != null
1574	record.getThrown() != null
1575	frame.getLineNumber() >= 0
1576	h != null
1577	encoding == null
1353	xmlVersion.compareTo(EXTERNAL_XML_VERSION) > 0
1354	entry.hasAttribute("key")
1355	comment != null
4597	((AbstractPreferences)p).isRemoved()
4598	((AbstractPreferences)prefs).isRemoved()
4599	subTree
4600	subTree
4601	xmlVersion.compareTo(EXTERNAL_XML_VERSION) > 0
4602	((AbstractPreferences)prefsNode).isRemoved()
4603	mapVersion.compareTo(MAP_XML_VERSION) > 0
1932	len == 0
1933	isUTF8
1933	cd instanceof ArrayDecoder
1934	clen == -1
1935	cr.isUnderflow()
1936	cr.isUnderflow()
1937	len == 0
1938	ce instanceof ArrayEncoder
1938	isUTF8
1939	blen == -1
1940	cr.isUnderflow()
1941	cr.isUnderflow()
1942	bb.position() == ba.length
1943	isUTF8
1944	utf8 == null
1945	isUTF8
1946	utf8 == null
1947	dec == null
1948	enc == null
1873	name == null
1874	name.length() > 0xFFFF
1875	size < 0
1876	crc < 0
1876	crc > 0xFFFFFFFFL
1877	method != DEFLATED
1877	method != STORED
1878	extra != null
1878	extra.length > 0xFFFF
1879	year < 1980
1907	(mode & OPEN_READ) == 0
1907	(mode & ~(OPEN_READ | OPEN_DELETE)) != 0
1908	sm != null
1909	(mode & OPEN_DELETE) != 0
1910	charset == null
1911	bcomm == null
1912	name == null
1913	jzentry != 0
1914	entry == null
1915	(entry.flag & EFS) != 0
1915	zc.isUTF8()
1916	jzentry == 0
1917	size > 65536
1918	size <= 0
1919	false == inf.ended()
1920	false == inf.ended()
1921	name != null
1922	(e.flag & EFS) != 0
1922	zc.isUTF8()
1923	bcomm == null
1924	zc.isUTF8()
1924	(e.flag & EFS) != 0
1925	closeRequested
1926	false == streams.isEmpty()
1927	inf != null
1928	jzfile != 0
1929	closeRequested
1930	jzfile == 0
1931	closeRequested
1988	closed
1989	in == null
1990	charset == null
1991	entry != null
1992	(entry = readLOC()) == null
1993	entry.method == STORED
1994	entryEOF
1995	off > b.length - len
1995	off < 0
1995	len < 0
1996	len == 0
1997	entry == null
1998	len == -1
1999	remaining <= 0
2000	len > remaining
2001	len == -1
2002	entry.crc != crc.getValue()
2002	remaining == 0
2003	n < 0
2004	len > tmpbuf.length
2005	len == -1
2006	closed
2007	get32(tmpbuf, 0) != LOCSIG
2008	len > blen
2009	(flag & 1) == 1
2010	(flag & 8) == 8
2011	e.method != DEFLATED
2012	len > 0
2013	e.csize == ZIP64_MAGICVAL
2013	e.size == ZIP64_MAGICVAL
2014	get16(bb, off) == ZIP64_EXTID
2015	sz < 16
2015	(off + sz) > len
2016	n > 0
2017	(flag & 8) == 8
2018	inf.getBytesRead() > ZIP64_MAGICVAL
2018	inf.getBytesWritten() > ZIP64_MAGICVAL
2019	sig != EXTSIG
2020	sig != EXTSIG
2021	e.size != inf.getBytesWritten()
2022	e.csize != inf.getBytesRead()
2023	e.crc != crc.getValue()
2024	n == -1
1816	closed
1817	charset == null
1818	comment != null
1819	this.comment.length > 0xffff
1820	method != DEFLATED
1820	method != STORED
1821	current != null
1822	e.time == -1
1823	e.method == -1
1824	e.csize == -1
1824	e.crc == -1
1824	e.size == -1
1825	e.size == -1
1826	e.csize == -1
1827	e.size != e.csize
1828	e.crc == -1
1828	e.size == -1
1829	names.add(e.name)
1830	zc.isUTF8()
1831	current != null
1832	(e.flag & 8) == 0
1833	e.size != def.getBytesRead()
1834	e.csize != def.getBytesWritten()
1835	e.crc != crc.getValue()
1836	e.size != written - locoff
1837	e.crc != crc.getValue()
1838	off < 0
1838	off > b.length - len
1838	len < 0
1839	len == 0
1840	current == null
1841	written - locoff > entry.size
1842	finished
1843	current != null
1844	closed
1845	(flag & 8) == 8
1846	e.size >= ZIP64_MAGICVAL
1846	e.csize >= ZIP64_MAGICVAL
1847	hasZip64
1848	hasZip64
1849	e.extra != null
1850	e.size >= ZIP64_MAGICVAL
1850	e.csize >= ZIP64_MAGICVAL
1851	e.csize >= ZIP64_MAGICVAL
1852	e.size >= ZIP64_MAGICVAL
1853	xentry.offset >= ZIP64_MAGICVAL
1854	hasZip64
1855	hasZip64
1856	e.comment != null
1857	hasZip64
1858	size == ZIP64_MAGICVAL
1859	csize == ZIP64_MAGICVAL
1860	offset == ZIP64_MAGICVAL
1861	e.extra != null
1862	commentBytes != null
1863	xlen >= ZIP64_MAGICVAL
1864	xoff >= ZIP64_MAGICVAL
1865	count >= ZIP64_MAGICCOUNT
1866	hasZip64
1867	comment != null
