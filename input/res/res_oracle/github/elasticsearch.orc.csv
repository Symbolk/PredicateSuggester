id	oracle
6177	preserveOriginal == false
2950	aggregation == null
2951	aggregation == null
2952	subFactories == null
2953	metaData == null
2954	this.metaData != null
2955	factoriesBuilder != null
2955	(factoriesBuilder.count()) > 0
2956	obj == null
2957	getClass() != obj.getClass()
2958	Objects.equals(name, other.name)
2959	Objects.equals(metaData, other.metaData)
2960	Objects.equals(factoriesBuilder, other.factoriesBuilder)
12122	discoNode.isDataNode()
12123	explain
12124	explain
12125	unassigned.equalsIgnoringMetaData(shardRouting)
12126	recoverySource != null
12126	unassignedInfo != null
12127	getClass() != obj.getClass()
12127	obj == null
11829	nodeDecisions != null
11830	isDecisionTaken() == false
11831	node.getAttributes().isEmpty() == false
11832	nodeDecisions != null
11832	nodeDecisions.isEmpty() == false
11833	nodeDecisions == null
11834	result.getNodeDecision() == AllocationDecision.YES
11835	this == other
11836	other instanceof AbstractAllocationDecision == false
11836	other == null
7186	closed.compareAndSet(false, true)
11304	sorts == null
11304	sorts.isEmpty()
11305	doc.getSource() == null
11306	accept(doc)
11307	request != null
11308	task.isCancelled()
11309	task.isCancelled()
11310	response.isTimedOut()
11310	response.getFailures().size() > 0
11311	mainRequest.getSize() > 0
11312	task.isCancelled()
11313	response.getHits().isEmpty()
11314	mainRequest.getSize() != SIZE_ALL_MATCHES
11315	remaining < hits.size()
11316	request.requests().isEmpty()
11317	logger.isDebugEnabled()
11318	task.isCancelled()
11319	item.isFailed()
11320	item.getResponse().getResult() == DocWriteResponse.Result.CREATED
11321	task.isCancelled()
11322	false == failures.isEmpty()
11323	mainRequest.getSize() != SIZE_ALL_MATCHES
11323	task.getSuccessfullyProcessed() >= mainRequest.getSize()
11324	task.isCancelled()
11325	failure.getStatus() == CONFLICT
11326	false == mainRequest.isAbortOnVersionConflict()
11327	false == mainRequest.isRefresh()
11327	destinationIndices.isEmpty()
11327	task.isCancelled()
7019	pageSize < 128
7020	(pageSize & (pageSize - 1)) != 0
7021	this.recycler != null
7022	numPages > Integer.MAX_VALUE
7023	array.length < minSize
7024	recycler != null
7025	recycler != null
7026	recycler != null
7027	recycler != null
7028	recycler != null
7029	recycler != null
7618	binding instanceof UntargettedBindingImpl
7619	binding.getKey().getAnnotationType() != null
7620	binding instanceof InstanceBinding
7621	binding.getScoping().isExplicitlyScoped()
11279	setDefaults
11280	searchRequest.source().from() != -1
11281	searchRequest.source().storedFields() != null
11282	maxRetries < 0
11283	size == -1
11283	size > 0
11284	searchRequest.source().slice() != null
11284	slices != 1
11285	requestsPerSecond <= 0
11286	slices < 1
11287	slices > 1
11288	in.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
11289	out.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
11290	slices > 1
11291	searchRequest.indices().length != 0
11291	searchRequest.indices() != null
11292	searchRequest.types() != null
11292	searchRequest.types().length != 0
557	helpWanted
7768	Strings.isNullOrEmpty(settings.get(settingName))
7769	Strings.isNullOrEmpty(settings.get(settingName))
6233	wordList == null
12742	this.get().equals(previousState)
2770	valuesSource == null
2771	bucketOrd >= states.size()
1323	in.readBoolean()
1324	in.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)
1325	in.readBoolean()
1326	in.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)
1327	in.readBoolean()
1328	in.readBoolean()
1329	hasQuery
1330	out.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)
1331	hasBounaryChars
1332	out.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)
1333	hasBoundaryScannerLocale
1334	hasOptions
1335	boundaryScannerLocale != null
1336	preTags != null
1337	postTags != null
1338	fragmentSize != null
1339	numOfFragments != null
1340	highlighterType != null
1341	fragmenter != null
1342	highlightQuery != null
1343	order != null
1344	highlightFilter != null
1345	boundaryScannerType != null
1346	boundaryMaxScan != null
1347	boundaryChars != null
1348	boundaryScannerLocale != null
1349	options != null
1349	options.size() > 0
1350	forceSource != null
1351	requireFieldMatch != null
1352	noMatchSize != null
1353	phraseLimit != null
1354	this == obj
1355	getClass() != obj.getClass()
1355	obj == null
5661	context.reader().getFieldInfos().fieldInfo(fieldName) == null
5662	e instanceof ElasticsearchException
5670	indexReader.leaves().size() <= 1
5671	context.reader().getFieldInfos().fieldInfo(getFieldName()) != null
5672	fieldFound == false
5673	e instanceof ElasticsearchException
5674	iterator == null
5675	docCount == -1
5676	docCount >= minSegmentSize
5677	maxFreq < docCount
5677	minFreq > 1
2764	merged == null
2765	keyed
2766	format != DocValueFormat.RAW
2767	format != DocValueFormat.RAW
3054	stackEmpty
3055	children != null
2780	merged == null
2781	keyed
2782	format != DocValueFormat.RAW
2783	format != DocValueFormat.RAW
7770	lifecycle.canMoveToStarted()
7771	lifecycle.canMoveToStopped()
7772	lifecycle.started()
7773	lifecycle.canMoveToClosed()
7169	lifecycle.stoppedOrClosed()
7170	lifecycle.stoppedOrClosed() == false
11589	executedListeners
11590	listeners == null
11591	listeners instanceof List
11592	executeImmediate
11593	listeners != null
11594	listeners instanceof List
7705	this.binder != null
12743	this.get().equals(previousState)
8398	parser == null
8399	parser.currentToken().isValue()
8399	parser.currentToken() == XContentParser.Token.START_OBJECT
8400	parser.currentToken().isValue()
8400	parser.currentToken() == XContentParser.Token.START_OBJECT
7030	capacity < 0
7031	maxLoadFactor >= 1
7031	maxLoadFactor <= 0
7032	used(i)
7033	used(i)
2351	type == null
2352	this.metaData != null
2353	bucketsPaths != null
2353	overrideBucketsPath()
2354	obj == null
2355	getClass() != obj.getClass()
2356	Objects.equals(name, other.name)
2357	Objects.equals(type, other.type)
2358	Objects.deepEquals(bucketsPaths, other.bucketsPaths)
2359	Objects.equals(metaData, other.metaData)
7648	allDone
4557	queryName != null
4558	query != null
4559	boost != DEFAULT_BOOST
4560	query instanceof SpanQuery
4561	queryName != null
4562	this == obj
4563	getClass() != obj.getClass()
4563	obj == null
4564	obj instanceof String
4565	obj instanceof BytesRef
4566	query != null
4567	rewritten == this
4568	rewritten.queryName() == null
4568	queryName() != null
4569	rewritten.boost() == DEFAULT_BOOST
4569	boost() != DEFAULT_BOOST
4570	value == null
4571	processedFieldName != null
5687	i < cardinality()
2258	range == null
7116	tryIncRef() == false
7117	i > 0
7118	refCount.compareAndSet(i, i + 1)
7119	i == 0
642	initialized
279	responseContentType == null
280	requestContentType != null
281	useFiltering
282	pretty
283	bytesOut == null
8793	setting.getProperties().contains(scope) == false
8794	setting.hasComplexMatcher()
8795	overlappingSetting != null
8796	isValidKey(setting.getKey()) == false
8796	setting.isGroupSetting()
8796	isValidGroupKey(setting.getKey())
8796	isValidAffixKey(setting.getKey())
8797	lastSettingsApplied != null
8797	newSettings.equals(lastSettingsApplied)
8798	setting != get(setting.getKey())
8799	setting != registeredSetting
8800	a != get(a.getKey())
8801	b != get(b.getKey())
8802	setting == null
8803	distance > 0.7f
8804	settings.getSecureSettings().getSettingNames().contains(key)
8804	secureSettings != null
8805	keys.isEmpty() == false
8806	setting != null
8807	entry.getValue().match(key)
8808	entry.getValue().match(key)
8809	setting.getProperties().contains(scope) == false
8810	get(setting.getKey()) == null
8811	canRemove.test(entry.getKey())
8811	entry.getValue() == null
8811	entry.getKey().endsWith("*")
8812	canUpdate.test(entry.getKey())
8812	entry.getValue() != null
8813	isFinalSetting(entry.getKey())
8814	Regex.simpleMatch(entry, key)
8814	canRemove.test(key)
8815	complexMatchers.containsKey(newSetting.getKey())
8816	newSetting.match(existingSetting.getKey())
8816	existingSetting.match(newSetting.getKey())
8817	setting != null
8818	entry.getKey().startsWith(ARCHIVED_SETTINGS_PREFIX)
8818	isPrivateSetting(entry.getKey())
8819	changed
10124	getNumShards() == 0
10125	successfulOps.get() == 0
10126	logger.isDebugEnabled()
10127	logger.isTraceEnabled()
10128	logger.isDebugEnabled()
10129	shardFailures == null
10130	TransportActions.isShardNotAvailableException(e)
10131	shardFailures == null
10132	shardFailures == null
10133	failure == null
10134	TransportActions.isReadOverrideException(e)
10135	results.hasResult(shardIndex)
10136	logger.isTraceEnabled()
10137	shardFailures != null
5715	"no".equals(normalization)
5716	"h1".equals(normalization)
5717	"h2".equals(normalization)
5718	"h3".equals(normalization)
5719	"z".equals(normalization)
2788	valuesSource == null
2789	bucketOrd >= states.size()
8371	coerce
8372	coerce
8373	result != fullVal
8374	token == Token.VALUE_STRING
8375	token == Token.VALUE_NUMBER
8376	token == Token.VALUE_STRING
8377	token == Token.VALUE_STRING
8378	token == Token.VALUE_STRING
8379	token == Token.VALUE_STRING
8380	token == Token.VALUE_STRING
8381	token == Token.VALUE_STRING
8382	currentToken() == Token.VALUE_NULL
8383	currentToken() == Token.VALUE_NULL
8384	token == null
8385	token == XContentParser.Token.START_OBJECT
8386	token == null
8387	token == XContentParser.Token.START_OBJECT
8388	token == null
8389	token == XContentParser.Token.FIELD_NAME
8390	token == XContentParser.Token.START_ARRAY
8391	token == XContentParser.Token.VALUE_NULL
8392	token == XContentParser.Token.VALUE_STRING
8393	token == XContentParser.Token.VALUE_NUMBER
8394	token == XContentParser.Token.VALUE_BOOLEAN
8395	token == XContentParser.Token.START_OBJECT
8396	token == XContentParser.Token.START_ARRAY
8397	token == XContentParser.Token.VALUE_EMBEDDED_OBJECT
10218	newRestWrapper != null
10219	restWrapper != null
10220	transportClient
10221	false == transportClient
9297	name != null
9298	address != null
9299	action != null
9300	msg != null
11652	value < 0
11653	str == null
11654	str.equals("all")
11655	this.value < 0
11656	activeShardCount < 0
11657	this == ActiveShardCount.NONE
11658	indexMetaData == null
11659	indexRoutingTable.allPrimaryShardsActive() == false
11660	waitForActiveShards == ActiveShardCount.DEFAULT
11661	waitForActiveShards.enoughShardsActive(shardRouting.value) == false
11662	this == ActiveShardCount.ALL
11663	this == ActiveShardCount.DEFAULT
11664	this == o
11665	getClass() != o.getClass()
11665	o == null
11570	activeShardCount == ActiveShardCount.NONE
11571	activeShardCount.enoughShardsActive(state, indexName)
11648	e.getCause() instanceof ElasticsearchException
11649	root instanceof ElasticsearchException
11650	root instanceof RuntimeException
11651	e.getCause() instanceof RuntimeException
8645	keystore == null
8646	argumentValues.size() == 0
8647	options.has(forceOption) == false
8647	keystore.getSettingNames().contains(setting)
8648	terminal.promptYesNo("Setting " + setting + " already exists. Overwrite?", false) == false
8649	argumentValues.size() == 1
8650	Files.exists(file) == false
8651	argumentValues.size() > 2
8699	keystore == null
8700	setting == null
8701	keystore.getSettingNames().contains(setting)
8701	options.has(forceOption) == false
8702	terminal.promptYesNo("Setting " + setting + " already exists. Overwrite?", false) == false
8703	options.has(stdinOption)
1802	filters.size() == 0
1802	filters == null
1803	separator == null
1804	filters.size() > maxFilters
1808	docCount > 0
1809	docCount > 0
2273	name == null
2874	i == elements.length - 1
2875	index >= 0
2876	index == 0
2876	index > element.length() - 3
2877	element.charAt(element.length() - 1) != ']'
2878	index < 0
2879	index > element.length() - 2
2879	index == 0
2880	index >= 0
2881	index > element.length() - 3
2881	index == 0
2882	element.charAt(element.length() - 1) != ']'
2883	tokens == null
2883	tokens.size() == 0
2884	pathElement.key != null
2885	agg == null
2886	agg instanceof SingleBucketAggregation
2887	token.key.equals("doc_count")
2887	token.key != null
2888	i != pathElements.size() - 1
2889	agg instanceof InternalNumericMetricsAggregation.SingleValue
2890	token.key.equals("value")
2890	token.key != null
2891	token.key == null
2892	aggregator == null
2893	i < pathElements.size() - 1
2894	aggregator instanceof SingleBucketAggregator
2895	pathElements.get(i).key != null
2896	aggregator instanceof NumericMetricsAggregator
2896	singleBucket
2897	singleBucket
2898	lastToken.key != null
2898	"doc_count".equals(lastToken.key)
2899	aggregator instanceof NumericMetricsAggregator.SingleValue
2900	"value".equals(lastToken.key)
2900	lastToken.key != null
2901	lastToken.key == null
2902	((NumericMetricsAggregator.MultiValue) aggregator).hasMetric(lastToken.key)
2940	context.aggregations() != null
2941	aggregators[i] instanceof GlobalAggregator == false
2942	collectors.isEmpty()
2943	context.getProfilers() != null
2944	context.aggregations() == null
2945	context.queryResult().hasAggs()
2946	aggregators[i] instanceof GlobalAggregator
2947	globals.isEmpty()
2948	context.getProfilers() == null
2949	pipelineAggregator instanceof SiblingPipelineAggregator
3052	aggregationProfileBreakdown == null
1767	parent instanceof BucketsAggregator
1768	mode.parseField.match(value)
1769	ordinal < 0
1769	ordinal >= values().length
1770	agg.needsScores()
1771	shouldDefer(subAggregators[i])
1772	recordingWrapper == null
1773	recordingWrapper != null
1774	recordingWrapper != null
1775	subAggregatorbyName == null
1776	this.failed
1754	token != XContentParser.Token.FIELD_NAME
1755	validAggMatcher.reset(aggregationName).matches()
1756	token != XContentParser.Token.START_OBJECT
1757	token != XContentParser.Token.FIELD_NAME
1758	token == XContentParser.Token.START_OBJECT
1759	subFactories != null
1760	aggBuilder != null
1761	aggBuilder == null
1762	metaData != null
1763	subFactories != null
1764	aggBuilder instanceof AggregationBuilder
1765	profilers != null
1766	profilers != null
10527	filter == null
10527	filter.isEmpty()
10528	filterBuilder == null
10529	token == null
10530	token == XContentParser.Token.FIELD_NAME
10531	token == XContentParser.Token.START_OBJECT
10532	"filter".equals(currentFieldName)
10533	token == XContentParser.Token.VALUE_STRING
10534	"routing".equals(currentFieldName)
10535	"index-routing".equals(currentFieldName)
10535	"index_routing".equals(currentFieldName)
10535	"indexRouting".equals(currentFieldName)
10536	"searchRouting".equals(currentFieldName)
10536	"search-routing".equals(currentFieldName)
10536	"search_routing".equals(currentFieldName)
10537	this == o
10538	o == null
10538	getClass() != o.getClass()
10539	name != null ? !name.equals(alias.name) : alias.name != null
10539	name.equals(alias.name)
12317	false == Strings.hasText(index)
1594	input.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
1595	reparseAliases
1596	queryBuilder != null
1597	out.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
1598	reparseAliases
1599	this == o
1600	getClass() != o.getClass()
1600	o == null
12465	searchRouting != null
12466	this == o
12467	o == null
12467	getClass() != o.getClass()
12468	alias.equals(that.alias)
12468	alias != null ? !alias.equals(that.alias) : that.alias != null
12469	filter != null ? !filter.equals(that.filter) : that.filter != null
12469	filter.equals(that.filter)
12470	indexRouting.equals(that.indexRouting)
12470	indexRouting != null ? !indexRouting.equals(that.indexRouting) : that.indexRouting != null
12471	searchRouting.equals(that.searchRouting)
12471	searchRouting != null ? !searchRouting.equals(that.searchRouting) : that.searchRouting != null
12472	filter() != null
12473	indexRouting() != null
12474	searchRouting() != null
12475	in.readBoolean()
12476	in.readBoolean()
12477	in.readBoolean()
12478	Strings.hasLength(alias.filter())
12479	Strings.hasText(index)
12480	indexNamedSameAsAlias != null
12481	Strings.hasText(alias)
12482	indexRouting != null
12482	indexRouting.indexOf(',') != -1
6787	stats.getName().equals(name)
6788	stats != null
7348	fieldType().indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0
7348	boost != 1.0f
3992	enabledState.enabled
3993	includeDefaults
3994	pos == bytesStreamOutput.position()
3995	includeDefaults
3995	enabledState != Defaults.ENABLED
3996	includeDefaults
3996	fieldType().stored() != Defaults.FIELD_TYPE.stored()
3997	fieldType().storeTermVectors() != Defaults.FIELD_TYPE.storeTermVectors()
3997	includeDefaults
3998	includeDefaults
3998	fieldType().storeTermVectorOffsets() != Defaults.FIELD_TYPE.storeTermVectorOffsets()
3999	includeDefaults
3999	fieldType().storeTermVectorPositions() != Defaults.FIELD_TYPE.storeTermVectorPositions()
4000	includeDefaults
4000	fieldType().storeTermVectorPayloads() != Defaults.FIELD_TYPE.storeTermVectorPayloads()
4001	includeDefaults
4001	fieldType().omitNorms() != Defaults.FIELD_TYPE.omitNorms()
4002	fieldType().similarity() != null
4003	includeDefaults
4004	((AllFieldMapper)mergeWith).enabledState != Defaults.ENABLED
4004	((AllFieldMapper)mergeWith).enabled() != this.enabled()
7349	sameClassAs(obj) == false
7350	rewritten != this
7351	terms != null
7352	terms.hasPayloads()
7353	hasPayloads == false
7354	needsScores == false
7347	input.incrementToken()
12139	routingNode == null
12140	shardRouting.unassigned() == false
12141	shardRouting.recoverySource().getType() != RecoverySource.Type.EMPTY_STORE
12141	acceptDataLoss == false
12142	shardRouting.unassignedInfo().getReason() != UnassignedInfo.Reason.FORCED_EMPTY_PRIMARY
12144	routingNode == null
12145	primaryShardRouting.unassigned()
12146	replicaShardRoutings.isEmpty()
12147	decision.type() == Decision.Type.NO
12148	explain
12166	routingNode == null
12167	shardRouting.unassigned() == false
12168	acceptDataLoss == false
12169	shardRouting.recoverySource().getType() != RecoverySource.Type.EXISTING_STORE
11913	decisions != null
11914	decisions != null
11915	allocationDecision == AllocationDecision.YES
11916	allocationDecision == AllocationDecision.THROTTLED
11917	allocationDecision == AllocationDecision.AWAITING_INFO
11918	allocationDecision == AllocationDecision.NO_VALID_SHARD_COPY
11919	hasNodeWithStaleOrCorruptShard()
11920	allocationDecision == AllocationDecision.ALLOCATION_DELAYED
11921	reuseStore
11922	targetNode != null
11923	allocationId != null
11924	allocationStatus == AllocationStatus.DELAYED_ALLOCATION
11925	super.equals(other) == false
11926	other instanceof AllocateUnassignedDecision == false
12128	commands != null
12129	commands != null
12130	token == null
12131	token == XContentParser.Token.FIELD_NAME
12132	parser.currentName().equals("commands")
12133	parser.currentName().equals("commands")
12134	token != XContentParser.Token.START_ARRAY
12135	token == XContentParser.Token.START_ARRAY
12136	token == XContentParser.Token.START_OBJECT
12137	parser.nextToken() != XContentParser.Token.END_OBJECT
12138	obj == null
12138	getClass() != obj.getClass()
11944	decision.type() == Type.NO
12060	decision == Decision.NO
12061	allocation.debugDecision()
12062	decision.type() != Decision.Type.YES
12062	decision != Decision.ALWAYS
12062	allocation.getDebugMode() != EXCLUDE_YES_DECISIONS
12063	allocation.shouldIgnoreShardForNode(shardRouting.shardId(), node.nodeId())
12064	decision == Decision.NO
12065	logger.isTraceEnabled()
12066	allocation.debugDecision()
12067	allocation.getDebugMode() != EXCLUDE_YES_DECISIONS
12067	decision.type() != Decision.Type.YES
12067	decision != Decision.ALWAYS
12068	allocation.shouldIgnoreShardForNode(shardRouting.shardId(), node.nodeId())
12069	logger.isTraceEnabled()
12070	decision == Decision.NO
12071	logger.isTraceEnabled()
12072	allocation.debugDecision()
12073	decision != Decision.ALWAYS
12073	allocation.getDebugMode() != EXCLUDE_YES_DECISIONS
12073	decision.type() != Decision.Type.YES
12074	decision == Decision.NO
12075	allocation.debugDecision()
12076	allocation.getDebugMode() != EXCLUDE_YES_DECISIONS
12076	decision != Decision.ALWAYS
12076	decision.type() != Decision.Type.YES
12077	decision == Decision.NO
12078	allocation.debugDecision()
12079	decision.type() != Decision.Type.YES
12079	allocation.getDebugMode() != EXCLUDE_YES_DECISIONS
12079	decision != Decision.ALWAYS
12080	decision == Decision.NO
12081	allocation.debugDecision()
12082	decision.type() != Decision.Type.YES
12082	decision != Decision.ALWAYS
12082	allocation.getDebugMode() != EXCLUDE_YES_DECISIONS
12083	decision == Decision.NO
12084	allocation.debugDecision()
12085	allocation.getDebugMode() != EXCLUDE_YES_DECISIONS
12085	decision.type() != Decision.Type.YES
12085	decision != Decision.ALWAYS
12086	allocation.shouldIgnoreShardForNode(shardRouting.shardId(), node.nodeId())
12087	decision == Decision.NO
12088	logger.isTraceEnabled()
12089	allocation.debugDecision()
12090	decision.type() != Decision.Type.YES
12090	decision != Decision.ALWAYS
12090	allocation.getDebugMode() != EXCLUDE_YES_DECISIONS
11756	this == o
11757	o == null
11758	id.equals(that.id)
11759	relocationId != null
11839	startedShards.isEmpty()
11840	restoreInProgress != null
11841	updatedRestoreInProgress != restoreInProgress
11842	failedShards.isEmpty()
11842	staleShards.isEmpty()
11843	failedShard != null
11844	failedShard != shardToFail
11845	reroute
11846	allocation.routingNodesChanged() == false
11847	unassignedInfo.isDelayed()
11848	newComputedLeftDelayNanos == 0
11849	allocation.routingNodesChanged() == false
11850	previousHealth.equals(currentHealth)
11851	allocation.nodes().getDataNodes().containsKey(routingNode.nodeId()) == false
11852	allocation.routingNodes().unassigned().size() > 0
11853	allocation.nodes().getDataNodes().containsKey(node.nodeId())
6178	sVersion != null
6179	sVersion != null
6180	value != null
6181	"_none_".equals(value)
6182	stemExclusion != null
6183	value != null
6184	"_none_".equals(value)
6185	pathLoadedWords != null
6186	namedWords == null
6187	namedWords.containsKey(word)
6188	wordList == null
6189	wordListPath == null
6190	explicitWordList == null
6191	reader instanceof BufferedReader
6192	Strings.hasText(word)
6193	word.startsWith(comment)
6194	br != null
6195	filePath == null
6076	settings.isEmpty()
6077	analyzerProvider == null
6078	tokenizerSettings.containsKey(tokenizer)
6079	tokenFilterSettings.containsKey(tokenFilter)
6080	"synonym".equals(typeName)
6081	"synonym_graph".equals(typeName)
6082	tokenFilterSettings.containsKey(charFilter)
6083	component == Component.ANALYZER
6084	typeName == null
6085	currentSettings.get("tokenizer") != null
6086	typeName.equals("custom")
6087	factory != null
6088	component == Component.NORMALIZER
6089	typeName == null
6089	typeName.equals("custom")
6090	type == null
6091	settingsMap.containsKey(name)
6092	provider.requiresAnalysisSettings()
6093	defaultProvider == null
6094	factories.containsKey(name) == false
6095	factories.containsKey(name) == false
6096	typeName == null
6097	type == null
6098	"default_search_quoted".equals(key)
6098	analyzers.containsKey(key)
6098	"default".equals(key)
6098	"default_search".equals(key)
6099	analyzers.containsKey("default")
6100	analyzers.containsKey("default_search")
6101	analyzers.containsKey("default_search_quoted")
6102	defaultAnalyzer == null
6103	analyzers.containsKey("default_index")
6104	createdVersion.onOrAfter(Version.V_5_0_0_alpha1)
6105	analyzer.getKey().startsWith("_")
6106	analyzerFactory instanceof CustomAnalyzerProvider
6107	analyzerF == null
6108	analyzerF instanceof NamedAnalyzer
6109	analyzer.getPositionIncrementGap(analyzer.name()) != overridePositionIncrementGap
6109	overridePositionIncrementGap >= 0
6110	analyzers.containsKey(name)
6111	indexSettings.getSettings().get(analyzerAliasKey) != null
6112	indexSettings.getIndexVersionCreated().onOrAfter(Version.V_5_0_0_beta1)
6113	analyzerAliases.putIfAbsent(alias, analyzer) != null
6114	normalizerFactory instanceof CustomNormalizerProvider
6115	normalizerF == null
6116	normalizers.containsKey(name)
10573	attributes == null
10574	text.length == 0
10574	text == null
10560	tokens != null
10561	detail != null
10562	tokens != null
7612	annotation.annotationType().getAnnotation(ScopeAnnotation.class) != null
7613	found != null
7614	Classes.isConcrete(type)
7615	scopeAnnotation != null
7616	annotation.annotationType().getAnnotation(BindingAnnotation.class) != null
7617	found != null
7198	array.length == 0
7199	index < 0
7200	lowIndex >= 0
7201	highIndex < array.length
7202	highError < lowError
7203	highError < tolerance
7204	lowError < tolerance
7715	parameter.isProvidedByFactory()
7175	promised == false
7176	promised
7176	promiseSemaphore.tryAcquire()
7177	promised
7178	candidates.isEmpty() == false
6361	nodeEntry.isFetching()
6362	closed
6363	nodesToFetch.isEmpty() == false
6364	hasAnyNodeFetching(cache)
6365	node != null
6366	nodeEntry.isFailed()
6367	nodeEntry.getValue() != null
6368	failedNodes.isEmpty() == false
6368	allIgnoreNodes.isEmpty() == false
6369	closed
6370	responses != null
6371	nodeEntry == null
6372	nodeEntry.isFailed()
6373	failures != null
6374	nodeEntry.isFailed() == false
6374	nodeEntry != null
6375	unwrappedCause instanceof EsRejectedExecutionException
6375	unwrappedCause instanceof ReceiveTimeoutTransportException
6375	unwrappedCause instanceof ElasticsearchTimeoutException
6376	shardCache.containsKey(node.getId()) == false
6377	nodes.nodeExists(nodeId) == false
6378	nodeEntry.isFetching() == false
6378	nodeEntry.hasData() == false
6379	nodeEntry.isFetching()
7179	nonNullList != null
7180	array.compareAndSet(i, null, value) == false
7181	nonNullList != null
7182	nonNullList == null
7183	array.length() == 0
7183	array == null
7184	e != null
7185	a.length != array.length()
11576	resolver.hasIndexOrAlias(index, state)
11577	autoCreate.autoCreateIndex == false
11578	dynamicMappingDisabled
11579	autoCreate.expressions.isEmpty()
11580	Regex.simpleMatch(indexExpression, index)
11581	include
12332	minReplicas > maxReplicas
2572	valuesSource != null
2573	valuesSource == null
2574	owningBucketOrd >= sums.size()
2574	valuesSource == null
2575	valuesSource == null
2575	bucket >= sums.size()
2383	bucketsPaths.length != 1
11999	aValues.length > 0
12000	awarenessAttributes.length == 0
12001	node.node().getAttributes().containsKey(awarenessAttribute)
12002	assignedShard.started()
12002	assignedShard.initializing()
12003	moveToNode
12004	shardRouting.assignedToNode()
12005	node.nodeId().equals(nodeId)
12006	fullValues != null
12007	shardPerAttribute.containsKey(fullValue)
12008	averagePerAttribute == 0
12009	currentNodeCount > (requiredCountPerAttribute + leftoverPerAttribute)
12010	currentNodeCount <= requiredCountPerAttribute
11143	delay.millis() > Integer.MAX_VALUE
11910	allocation.routingNodes().size() == 0
11911	shard.unassigned()
11912	moveDecision.canRemain()
11912	moveDecision.isDecisionTaken()
7120	sync.cancel()
7121	mayInterruptIfRunning
7122	result
7123	result
6467	allocateUnassignedDecision.isDecisionTaken() == false
6468	allocateUnassignedDecision.getAllocationDecision() == AllocationDecision.YES
11647	nodesMap == null
12143	false == super.equals(obj)
638	unconsumedParams.isEmpty()
639	distance > 0.5f
640	first == false
641	keys.isEmpty() == false
11595	taskId.isSet()
11595	nodes.length > 0
11596	Regex.simpleMatch(getActions(), task.getAction()) == false
11596	getActions() != null
11596	getActions().length > 0
11597	getTaskId().isSet()
11598	getTaskId().getId() != task.getId()
11599	parentTaskId.isSet()
11600	parentTaskId.equals(task.getParentTaskId()) == false
4752	Strings.isEmpty(fieldName)
4753	value == null
5356	size > maxSize
5356	size < 0
5357	reusableBuffer.capacity() >= opSize
1793	collector == null
1794	context != null
1795	finished
1796	this.selectedBuckets != null
1797	needsScores
1798	needsScores
1798	entry.docDeltas.size() > 0
1799	rebasedBucket != -1
1800	needsScores
1801	docIt.docID() < doc
2103	perBucketSample == null
2104	sampler == null
7077	minTargetSize < 0
7078	pageSize < 0
7079	bytesPerElement <= 0
7080	minTargetSize < pageSize
7081	newSize > pageSize
7082	checkBreaker
7083	this.breakerService != null
7084	this.checkBreaker
7085	delta > 0
7086	success
7087	size > BYTE_PAGE_SIZE
7088	size >= BYTE_PAGE_SIZE / 2
7088	recycler != null
7089	array instanceof BigByteArray
7090	minSize <= array.size()
7091	array == null
7092	array == other
7093	array.size() != other.size()
7094	array.get(i) != other.get(i)
7095	size > INT_PAGE_SIZE
7096	size >= INT_PAGE_SIZE / 2
7096	recycler != null
7097	array instanceof BigIntArray
7098	minSize <= array.size()
7099	size > LONG_PAGE_SIZE
7100	size >= LONG_PAGE_SIZE / 2
7100	recycler != null
7101	array instanceof BigLongArray
7102	minSize <= array.size()
7103	size > LONG_PAGE_SIZE
7104	recycler != null
7104	size >= LONG_PAGE_SIZE / 2
7105	array instanceof BigDoubleArray
7106	minSize <= array.size()
7107	size > INT_PAGE_SIZE
7108	recycler != null
7108	size >= INT_PAGE_SIZE / 2
7109	array instanceof BigFloatArray
7110	minSize <= array.size()
7111	size > OBJECT_PAGE_SIZE
7112	size >= OBJECT_PAGE_SIZE / 2
7112	recycler != null
7113	array instanceof BigObjectArray
7114	minSize <= array.size()
7034	indexInPage + len <= pageSize()
7035	indexInPage + len <= pageSize()
7036	fromIndex > toIndex
7037	fromPage == toPage
7038	numPages > pages.length
7008	numPages > pages.length
7009	fromIndex > toIndex
7010	fromPage == toPage
7011	numPages > pages.length
7012	fromIndex > toIndex
7013	fromPage == toPage
7074	fromIndex > toIndex
7075	fromPage == toPage
7076	numPages > pages.length
7043	numPages > pages.length
7044	fromIndex > toIndex
7045	fromIndex == toIndex
7046	fromPage == toPage
7187	numPages > pages.length
5678	source.sortMissingFirst(missingValue) == false
5678	sortMode != MultiValueMode.MAX
5678	sortMode != MultiValueMode.MIN
5678	source.sortMissingLast(missingValue) == false
5678	nested != null
3481	fieldType().stored()
3481	fieldType().hasDocValues()
3482	value == null
3483	context.parser().currentToken() == XContentParser.Token.VALUE_NULL
3484	value == null
3485	fieldType().stored()
3486	fieldType().hasDocValues()
3487	field == null
2262	valuesSource == null
2263	valuesSource instanceof ValuesSource.Bytes.WithOrdinals
7562	instance != null
7601	provider == null
7602	injector == null
7658	Void.class.equals(command.getKey().getRawType())
7659	command instanceof ProviderInstanceBinding
7659	((ProviderInstanceBinding) command).getProviderInstance() instanceof ProviderMethod
7660	rawType == Provider.class
7661	FORBIDDEN_TYPES.contains(rawType)
7662	original != null
7662	isOkayDuplicate(original, binding)
7663	original instanceof ExposedBindingImpl
5691	listener == null
5692	shardId != null
5692	indexSettings.getIndex().equals(shardId.getIndex()) == false
5693	notification.getKey() == null
5694	valueCache == null
124	terms == null
124	terms.length == 0
125	boosts.length != terms.length
125	boosts != null
126	rewritten != this
127	contexts.length <= 1
128	ctx.totalTermFreq() != -1
128	minSumTTF != -1
129	maxDoc > minSumTTF
129	minSumTTF != -1
130	max == 0
131	sumTTF == -1
131	termContext.totalTermFreq() == -1
132	leaves == null
133	termState == null
134	ctx.totalTermFreq() < 0
135	leaves == null
136	termState == null
137	boosts != null
138	boost != 1f
139	terms.length > 0
140	terms.length == 1
141	equalTerms == null
142	this == o
143	sameClassAs(o) == false
8639	p.isEmpty()
8639	p.endsWith(SEPARATOR)
5745	parser.currentToken() == null
5746	token == XContentParser.Token.START_OBJECT
5747	token == XContentParser.Token.FIELD_NAME
5748	token.isValue()
5749	PARSE_NAME.match(currentFieldName)
5750	PARSE_INDEX_VERSION.match(currentFieldName)
5751	PARSE_START_TIME.match(currentFieldName)
5752	PARSE_TIME.match(currentFieldName)
5753	PARSE_NUMBER_OF_FILES.match(currentFieldName)
5754	PARSE_TOTAL_SIZE.match(currentFieldName)
5755	token == XContentParser.Token.START_ARRAY
5756	PARSE_FILES.match(currentFieldName)
5767	physicalFileList == null
5768	token == null
5769	token == XContentParser.Token.START_OBJECT
5770	token != XContentParser.Token.FIELD_NAME
5771	token == XContentParser.Token.START_ARRAY
5772	ParseFields.FILES.match(currentFieldName) == false
5773	token == XContentParser.Token.START_OBJECT
5774	ParseFields.SNAPSHOTS.match(currentFieldName) == false
5775	token != XContentParser.Token.FIELD_NAME
5776	parser.nextToken() != XContentParser.Token.START_OBJECT
5777	token == XContentParser.Token.FIELD_NAME
5778	parser.nextToken() == XContentParser.Token.START_ARRAY
5779	ParseFields.FILES.match(currentFieldName) == false
9752	isReadOnly()
9753	repositoryData.getAllSnapshotIds().stream().anyMatch(s -> s.getName().equals(snapshotName))
9754	snapshotFormat.exists(snapshotsBlobContainer, snapshotId.getUUID())
9755	isReadOnly()
9756	snapshot != null
9757	metaData != null
9758	indexMetaData != null
9759	snapshotInfo != null
9760	snapshotInfo != null
9761	snapshotIds.contains(snapshotId)
9762	getRepositoryData().getIncompatibleSnapshotIds().contains(snapshotId)
9763	snapshotVersion == null
9764	globalMetaDataFormat.exists(snapshotsBlobContainer, snapshotId.getUUID())
9765	ignoreIndexErrors
9766	maxSnapshotBytesPerSec.getBytes() <= 0
9767	isReadOnly()
9768	isReadOnly()
9769	currentGen != repositoryStateId
9769	repositoryStateId != SnapshotsInProgress.UNDEFINED_REPOSITORY_STATE_ID
9770	newGen - 2 >= 0
9770	isReadOnly() == false
9771	snapshotsBlobContainer.blobExists(oldSnapshotIndexFile)
9772	snapshotsBlobContainer.blobExists(INDEX_LATEST_BLOB)
9773	blobs.isEmpty()
9774	e instanceof IndexShardSnapshotFailedException
9775	testBlobContainer.blobExists("master.dat")
9776	fileInfo != null
9776	(metadata = snapshot.get(fileInfo.physicalName())) != null
9777	fileInfo.metadata().hash().length == 0
9777	metadata.hash().length > 0
4639	queryBuilder == null
4640	queryBuilder == null
4641	queryBuilder == null
4642	queryBuilder == null
4643	minimumShouldMatch != null
4644	clauses.isEmpty()
4645	token == XContentParser.Token.FIELD_NAME
4646	parseContext.isDeprecatedSetting(currentFieldName)
4647	token == XContentParser.Token.START_OBJECT
4648	token == XContentParser.Token.START_ARRAY
4649	token.isValue()
4650	DISABLE_COORD_FIELD.match(currentFieldName)
4651	MINIMUM_SHOULD_MATCH.match(currentFieldName)
4652	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4653	ADJUST_PURE_NEGATIVE.match(currentFieldName)
4654	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4655	booleanQuery.clauses().isEmpty()
4656	shouldClauses.size() > 0
4656	this.minimumShouldMatch == null
4656	context.isFilter()
4657	clauses == 0
4658	changed
4659	result != builder
3892	fieldType().indexOptions() == IndexOptions.NONE
3892	fieldType().stored()
3892	fieldType().hasDocValues()
3893	value == null
3894	token == XContentParser.Token.VALUE_NULL
3895	fieldType().nullValue() != null
3896	indexCreatedVersion.onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
3897	context.parser().isBooleanValueLenient() != context.parser().isBooleanValue()
3898	value == null
3899	fieldType().indexOptions() != IndexOptions.NONE
3899	fieldType().stored()
3900	fieldType().hasDocValues()
3901	includeDefaults
3901	fieldType().nullValue() != null
6961	length == 0
6961	text == null
6962	text == null
6962	length == 0
6963	isFalse(value)
6964	isTrue(value)
6965	Strings.hasText(value)
6966	Strings.hasText(value)
6967	value == null
6968	value == null
6969	length == 0
6969	text == null
6970	length == 1
6971	length == 2
6972	length == 3
6973	length == 5
6974	length == 0
6974	text == null
6975	length == 1
6976	length == 2
6977	length == 3
6978	length == 4
6979	length == 5
4533	positiveQuery == null
4534	negativeQuery == null
4535	negativeBoost < 0
4536	token == XContentParser.Token.FIELD_NAME
4537	token == XContentParser.Token.START_OBJECT
4538	POSITIVE_FIELD.match(currentFieldName)
4539	NEGATIVE_FIELD.match(currentFieldName)
4540	token.isValue()
4541	NEGATIVE_BOOST_FIELD.match(currentFieldName)
4542	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4543	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4544	positiveQueryFound
4545	negativeQueryFound
4546	negativeBoost < 0
4547	negativeQuery != this.negativeQuery
4547	positiveQuery != this.positiveQuery
3251	Natives.definitelyRunningAsRoot()
3252	systemCallFilter
3253	mlockAll
3254	Constants.WINDOWS
3255	ctrlHandler
3256	addShutdownHook
3257	keystore == null
3258	pidFile != null
3259	secureSettings != null
3260	environment.pidFile() != null
3261	closeStandardStreams
3262	maybeConsoleAppender != null
3263	closeStandardStreams
3264	foreground
3264	maybeConsoleAppender != null
3265	INSTANCE.node != null
3266	e instanceof CreationException
3267	e instanceof NodeValidationException
3268	maybeConsoleAppender != null
3268	foreground
3269	confFileSetting != null
3269	confFileSetting.isEmpty() == false
3270	Version.CURRENT.luceneVersion.equals(org.apache.lucene.util.Version.LATEST) == false
3240	esEnforceBootstrapChecks == null
3241	Boolean.TRUE.toString().equals(esEnforceBootstrapChecks)
3242	enforceLimits
3243	enforceBootstrapChecks
3244	check.check()
3245	check.alwaysEnforce()
3245	enforceBootstrapChecks
3245	enforceLimits
3246	ignoredErrors.isEmpty()
3247	errors.isEmpty()
3248	Constants.LINUX
3249	Constants.MAC_OS_X
3249	Constants.LINUX
3250	Constants.LINUX
3181	sm != null
8049	boundAddresses == null
8049	boundAddresses.length < 1
8050	firstAdded
67	offset < lastPrecedingOffset
68	offset < windowEnd
68	offset > windowStart
69	innerEnd - innerStart > maxLen
70	offset - maxLen > innerStart
71	offset + remaining < windowEnd
72	innerEnd == -1
72	offset != lastPrecedingOffset
11582	failedShards > 0
11583	size > 0
2403	policy.parseField.match(text)
2404	result == null
2405	result == null
2406	id == gapPolicy.id
2407	propertyValue == null
2408	propertyValue instanceof Number
2409	propertyValue instanceof InternalNumericMetricsAggregation.SingleValue
2410	Double.isInfinite(value)
2410	isDocCountProperty
2410	Double.isNaN(value)
2410	bucket.getDocCount() == 0
2366	token == XContentParser.Token.FIELD_NAME
2367	token == XContentParser.Token.VALUE_STRING
2368	FORMAT.match(currentFieldName)
2369	BUCKETS_PATH.match(currentFieldName)
2370	GAP_POLICY.match(currentFieldName)
2371	token == XContentParser.Token.START_ARRAY
2372	BUCKETS_PATH.match(currentFieldName)
2373	bucketsPaths == null
2374	format != null
2375	gapPolicy != null
2376	token(parser, context, currentFieldName, currentToken, params) == false
2377	format != null
2378	bucketsPaths.length != 1
2379	format != null
2380	gapPolicy != null
2381	aggregation.getName().equals(bucketsPath.get(0))
2382	Double.isNaN(bucketValue)
2382	bucketValue != null
2469	format == null
2470	format != null
2471	gapPolicy == null
2472	format != null
2473	token == XContentParser.Token.FIELD_NAME
2474	token == XContentParser.Token.VALUE_STRING
2475	FORMAT.match(currentFieldName)
2476	BUCKETS_PATH.match(currentFieldName)
2477	GAP_POLICY.match(currentFieldName)
2478	Script.SCRIPT_PARSE_FIELD.match(currentFieldName)
2479	token == XContentParser.Token.START_ARRAY
2480	BUCKETS_PATH.match(currentFieldName)
2481	token == XContentParser.Token.START_OBJECT
2482	Script.SCRIPT_PARSE_FIELD.match(currentFieldName)
2483	BUCKETS_PATH.match(currentFieldName)
2484	bucketsPathsMap == null
2485	script == null
2486	format != null
2487	gapPolicy != null
2488	script.getParams() != null
2489	value == null
2489	Double.isNaN(value)
2489	GapPolicy.SKIP == gapPolicy
2490	skipBucket
2491	returned == null
2492	returned instanceof Number
2413	gapPolicy == null
2414	token == XContentParser.Token.FIELD_NAME
2415	token == XContentParser.Token.VALUE_STRING
2416	BUCKETS_PATH.match(currentFieldName)
2417	GAP_POLICY.match(currentFieldName)
2418	Script.SCRIPT_PARSE_FIELD.match(currentFieldName)
2419	token == XContentParser.Token.START_ARRAY
2420	BUCKETS_PATH.match(currentFieldName)
2421	token == XContentParser.Token.START_OBJECT
2422	Script.SCRIPT_PARSE_FIELD.match(currentFieldName)
2423	BUCKETS_PATH.match(currentFieldName)
2424	bucketsPathsMap == null
2425	script == null
2426	gapPolicy != null
2427	script.getParams() != null
2428	"expression".equals(script.getLang())
2429	keepBucket
1810	finalSize < 1
1811	numberOfShards < 1
1812	numberOfShards == 1
2264	bucketOrd >= docCounts.size()
5337	reuse == null
5338	numBytes < 0
5339	skipBuffer == null
11684	this == o
11685	o == null
11685	getClass() != o.getClass()
11686	isSnapshot != build.isSnapshot
11687	shortHash.equals(build.shortHash)
11302	request.source() == null
11303	request.source().slice() != null
11332	in.readBoolean()
11333	in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
11334	primaryResponse != null
11334	ignoreOnReplica == false
11335	out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
11336	primaryResponse != null
11337	out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
11338	primaryResponse != null
11159	failure == null
11160	opType == OpType.CREATE
11160	opType == OpType.INDEX
11161	opType == OpType.UPDATE
11162	opType == OpType.DELETE
11163	token == XContentParser.Token.FIELD_NAME
11164	ERROR.equals(currentFieldName)
11165	token == XContentParser.Token.START_OBJECT
11166	STATUS.equals(currentFieldName)
11167	token == XContentParser.Token.VALUE_NUMBER
11168	exception != null
11169	failure != null
11170	failure != null
11171	failure != null
11172	failure != null
11173	failure != null
11174	in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
11175	type == 0
11176	type == 1
11177	type == 3
11178	in.readBoolean()
11179	out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
11180	response == null
11181	response instanceof IndexResponse
11182	response instanceof DeleteResponse
11183	response instanceof UpdateResponse
11184	failure == null
11185	concurrentRequests == 0
11186	closed
11187	bulkRequest.numberOfActions() > 0
11188	closed
11189	flushInterval == null
11190	isOverTheLimit()
11191	bulkRequest.numberOfActions() >= bulkActions
11191	bulkActions != -1
11192	bulkSize != -1
11192	bulkRequest.estimatedSizeInBytes() >= bulkSize
11193	bulkRequest.numberOfActions() > 0
11224	request instanceof IndexRequest
11225	request instanceof DeleteRequest
11226	request instanceof UpdateRequest
11227	request.doc() != null
11228	request.upsertRequest() != null
11229	request.script() != null
11230	payloads == null
11231	payload == null
11232	nextMarker == -1
11233	token == null
11234	token == XContentParser.Token.START_OBJECT
11235	token == XContentParser.Token.FIELD_NAME
11236	token.isValue()
11237	"_index".equals(currentFieldName)
11238	allowExplicitIndex
11239	"_type".equals(currentFieldName)
11240	"_id".equals(currentFieldName)
11241	"_routing".equals(currentFieldName)
11241	"routing".equals(currentFieldName)
11242	"_parent".equals(currentFieldName)
11242	"parent".equals(currentFieldName)
11243	"op_type".equals(currentFieldName)
11243	"opType".equals(currentFieldName)
11244	"version".equals(currentFieldName)
11244	"_version".equals(currentFieldName)
11245	"_versionType".equals(currentFieldName)
11245	"versionType".equals(currentFieldName)
11245	"version_type".equals(currentFieldName)
11245	"_version_type".equals(currentFieldName)
11246	"_retry_on_conflict".equals(currentFieldName)
11246	"_retryOnConflict".equals(currentFieldName)
11247	"pipeline".equals(currentFieldName)
11248	"fields".equals(currentFieldName)
11249	"_source".equals(currentFieldName)
11250	token == XContentParser.Token.START_ARRAY
11251	"fields".equals(currentFieldName)
11252	token == XContentParser.Token.START_OBJECT
11252	"_source".equals(currentFieldName)
11253	token != XContentParser.Token.VALUE_NULL
11254	token != XContentParser.Token.END_OBJECT
11255	"delete".equals(action)
11256	nextMarker == -1
11257	"index".equals(action)
11258	opType == null
11259	"create".equals(action)
11260	"update".equals(action)
11261	fetchSourceContext != null
11262	fields != null
11263	upsertRequest != null
11264	doc != null
11265	bytesReference.get(nextMarker - 1) == (byte) '\r'
11265	XContentType.JSON == xContentType
11266	data.get(i) == marker
11267	actionRequest instanceof IndexRequest
11268	Strings.hasText(indexRequest.getPipeline())
11269	requests.isEmpty()
11270	((WriteRequest<?>) request).getRefreshPolicy() != RefreshPolicy.NONE
11271	ex != null
11272	validationException == null
11195	response.isFailed()
11196	response.isFailed()
11197	ingestTookInMillis != BulkResponse.NO_INGEST_TOOK
11198	token == XContentParser.Token.FIELD_NAME
11199	token.isValue()
11200	TOOK.equals(currentFieldName)
11201	INGEST_TOOK.equals(currentFieldName)
11202	ERRORS.equals(currentFieldName) == false
11203	token == XContentParser.Token.START_ARRAY
11204	ITEMS.equals(currentFieldName)
11154	item != null
11155	item != null
11156	in.readBoolean()
11157	items.length > 1
11158	item.request() instanceof ReplicationRequest
11142	r != null
7447	l < 0
7448	l > length
7449	length >= 0L
7449	offset + length <= this.length
7449	offset >= 0L
7450	pos >= offset + length
7451	pos + len > this.offset + length
8569	buffer.hasRemaining()
8570	buffer.hasRemaining()
8571	buffer.hasRemaining()
8572	n > buffer.remaining()
8573	buffer.remaining() < len
8574	buffer.remaining() < length
7850	bytes > Integer.MAX_VALUE
7851	bytes >= ByteSizeUnit.C5
7852	bytes >= ByteSizeUnit.C4
7853	bytes >= ByteSizeUnit.C3
7854	bytes >= ByteSizeUnit.C2
7855	bytes >= ByteSizeUnit.C1
7856	sValue == null
7857	lowerSValue.endsWith("k")
7858	lowerSValue.endsWith("kb")
7859	lowerSValue.endsWith("m")
7860	lowerSValue.endsWith("mb")
7861	lowerSValue.endsWith("g")
7862	lowerSValue.endsWith("gb")
7863	lowerSValue.endsWith("t")
7864	lowerSValue.endsWith("tb")
7865	lowerSValue.endsWith("p")
7866	lowerSValue.endsWith("pb")
7867	lowerSValue.endsWith("b")
7868	lowerSValue.equals("-1")
7869	lowerSValue.equals("0")
7870	this == o
7871	o == null
7871	getClass() != o.getClass()
8114	deepCopy
8115	from < 0
8115	(from + length) > this.length
5651	sortMissingLast(missingValue)
5651	sortMissingFirst(missingValue)
5652	sortMissingLast(missingValue) ^ reversed
5653	indexFieldData instanceof IndexOrdinalsFieldData
7056	id == -1L
7056	key.bytesEquals(get(id, spare))
7057	curId == -1
7058	key.bytesEquals(get(curId, spare))
7059	curId == -1
7060	size >= maxSize
8120	this == other
8121	other instanceof BytesReference
8122	length() != otherRef.length()
8123	hash == null
8124	bytesRef.offset == 0
8124	bytesRef.length == bytesRef.bytes.length
8125	aRef != null
8125	bRef != null
8126	bRef.length == b.length()
8126	aRef.length == a.length()
8127	aRef.length == 0
8128	bRef.length == 0
8129	diff != 0
8108	offset >= length
8109	slice == null
8110	offset + len > length
8111	offset >= length
8112	offset >= length
8113	bytesAvailable < bytesToRead
7355	value == null
7356	value instanceof BytesRef
7357	value == null
7358	value instanceof BytesRef
7359	value == null
7360	value instanceof BytesRef
263	channel.request().method() == RestRequest.Method.HEAD
264	e instanceof ElasticsearchException
265	params.paramAsBoolean("error_trace", !REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT)
265	REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT
266	e != null
267	status.getStatus() < 500
268	token == XContentParser.Token.FIELD_NAME
269	STATUS.equals(currentFieldName)
270	token != XContentParser.Token.FIELD_NAME
271	exception == null
8564	length == 0
8565	b.length < (offset + length)
8566	bytes.size() > BigArrays.PAGE_SIZE_IN_BYTES
8567	offset > Integer.MAX_VALUE
6252	asArray != null
6253	"han".equals(script)
6254	"hiragana".equals(script)
6255	"katakana".equals(script)
6256	"hangul".equals(script)
6257	outputUnigrams
9104	expireAfterAccessNanos <= 0
9105	expireAfterWriteNanos <= 0
9106	maximumWeight < 0
9107	entry == null
9107	isExpired(entry, now)
9108	value == null
9109	future == null
9110	loaded == null
9111	future.isCompletedExceptionally()
9112	tuple.v2() != null
9112	tuple.v2().state == State.EXISTING
9113	unlink(tuple.v2())
9114	replaced
9115	entry != null
9116	haveSegmentLock[i]
9117	promoted
9118	before == null
9119	head != null
9120	after == null
9121	tail != null
9122	h == null
9123	head != entry
9096	maximumWeight < 0
9097	expireAfterAccessNanos <= 0
9098	expireAfterWriteNanos <= 0
9099	maximumWeight != -1
9100	expireAfterAccessNanos != -1
9101	expireAfterWriteNanos != -1
9102	weigher != null
9103	removalListener != null
1439	freq == 0
1440	currPayload != null
12149	routingNode != null
12150	indexMetaData == null
12151	shardRouting == null
12152	explain
12153	allowPrimary == false
12153	shardRouting.primary()
12154	shardRouting.initializing()
12154	shardRouting.relocatingNodeId() != null
12155	explain
12156	token == XContentParser.Token.FIELD_NAME
12157	token.isValue()
12158	"index".equals(currentFieldName)
12159	"shard".equals(currentFieldName)
12160	"node".equals(currentFieldName)
12161	"allowPrimary".equals(currentFieldName)
12161	"allow_primary".equals(currentFieldName)
12162	index == null
12163	shardId == -1
12164	nodeId == null
12165	obj == null
12165	getClass() != obj.getClass()
673	cancelled.get()
674	leafLevel
7047	isCancelled()
7048	suppressedException != null
7049	wasInterrupted
7050	isCancelled()
7051	ioException != null
7052	runtimeException != null
7053	cancelledByExternalInterrupt
7054	cancelled
849	sets.length == 0
850	errorFraction >= 1.0
851	ord == candidates.length - 1
852	numMissspellingsLeft > 0
853	numMissspellingsLeft > 0
854	score > cutoffScore
855	corrections.size() < maxNumCorrections
856	corrections.top().compareTo(score, path) < 0
2596	in.readBoolean()
2597	hasPrecisionThreshold
2598	precisionThreshold < 0
2599	precisionThreshold != null
2605	valuesSource == null
2606	valuesSource instanceof ValuesSource.Numeric
2607	valuesSource instanceof ValuesSource.Bytes.WithOrdinals
2608	maxOrd == 0
2609	ordinalsMemoryUsage < countsMemoryUsage / 4
2610	collector != null
2611	counts.cardinality(owningBucketOrdinal) == 0
2611	counts == null
2611	owningBucketOrdinal >= counts.maxBucket()
1002	fieldName != null
1003	fieldName != null
1004	token == Token.VALUE_STRING
1005	token == Token.START_ARRAY
1006	token == Token.VALUE_STRING
1007	fieldName != null
1008	this == o
1009	o == null
1009	getClass() != o.getClass()
1010	super.equals(o)
1027	this == o
1028	o == null
1028	getClass() != o.getClass()
1029	isPrefix != that.isPrefix
1030	boost != that.boost
1031	token == XContentParser.Token.START_OBJECT
1032	token == XContentParser.Token.VALUE_STRING
8436	read < 0
8437	read < 0
8438	dest.remaining() < READ_CHUNK_SIZE
8438	dest.isDirect()
8439	read < 0
8440	read < 0
8441	byteBuffer.remaining() <= WRITE_CHUNK_SIZE
8441	byteBuffer.isDirect()
5318	fileVersion == INITIAL_VERSION
5319	this == o
5320	getClass() != o.getClass()
5320	o == null
5321	offset != that.offset
5322	numOps != that.numOps
5323	generation != that.generation
5324	minSeqNo != that.minSeqNo
5325	maxSeqNo != that.maxSeqNo
9751	compress
2124	other instanceof ChiSquare
2125	frequencies.N11 / frequencies.N_1 < frequencies.N10 / frequencies.N_0
2125	includeNegatives
7463	oldBreaker == null
7464	logger.isTraceEnabled()
7465	memoryBytesLimit == 0
7466	this.memoryBytesLimit == -1
7467	logger.isTraceEnabled()
7468	logger.isTraceEnabled()
7469	newUsedWithOverhead > memoryBytesLimit
7469	memoryBytesLimit > 0
7470	logger.isTraceEnabled()
2213	childType == null
2214	childDocMapper != null
2215	parentFieldMapper.active()
2216	parentDocMapper != null
2217	token == XContentParser.Token.FIELD_NAME
2218	token == XContentParser.Token.VALUE_STRING
2219	"type".equals(currentFieldName)
2220	childType == null
7953	fields.length != 2
7954	fields[0].contains(":")
7955	networkMask < 0
7955	networkMask > 32
7956	(accumulator & (blockSize - 1)) != 0
8983	this == obj
8984	getClass() != obj.getClass()
8984	obj == null
9230	p != null
9230	p.getClass() == getClass()
9231	STANDARD_CLASSES.contains(other.getName())
9231	STANDARD.equals(getName())
10197	scrollIds == null
10198	scrollIds.isEmpty()
10198	scrollIds == null
10199	scrollIds == null
11329	logger.isDebugEnabled()
11330	response.getShardFailures() == null
11331	response.getHits().getHits().length == 0
11331	response.getHits().getHits() == null
10630	CollectionUtils.isEmpty(indices)
10935	this.useAnyUnassignedShard() == false
10936	this.index == null
10937	this.shard == null
10938	this.primary == null
10939	this.useAnyUnassignedShard()
10940	currentNode != null
10941	version.before(Version.V_5_2_0_UNRELEASED)
10927	shardRouting.unassignedInfo() != null
10928	currentNode != null
10929	shardAllocationDecision.getMoveDecision().getCurrentNodeRanking() > 0
10929	shardAllocationDecision.getMoveDecision().isDecisionTaken()
10930	this.clusterInfo != null
10931	shardAllocationDecision.isDecisionTaken()
10932	shardRouting.state() == ShardRoutingState.RELOCATING
10933	unassignedInfo.getNumFailedAllocations() > 0
10934	details != null
12726	testLevel == level
12727	disableStatePersistence
12728	this == o
12729	o == null
12729	getClass() != o.getClass()
12730	id != that.id
12731	blocks != null
12732	block.retryable()
12733	status == null
12734	status.getStatus() < block.status().getStatus()
12715	clusterBlock.disableStatePersistence()
12716	clusterBlock.id() == blockId
12717	clusterBlock.status().equals(status)
12718	blockException != null
12719	globalBlocked(level) == false
12720	blockException != null
12721	indexBlocked(level, index)
12722	indexBlocked(level, index)
12723	globalBlocked(level) == false
12723	indexIsBlocked == false
12724	indices().isEmpty()
12724	global.isEmpty()
12725	global.isEmpty() == false
12509	previousState.routingTable().hasIndex(index)
12509	state.routingTable().hasIndex(index)
12510	previousState.routingTable().hasIndex(index)
12510	state.routingTable().hasIndex(index)
12511	metaDataChanged()
12512	previousState.metaData().hasIndex(index)
12513	created == null
12514	previousState.blocks().hasGlobalBlock(GatewayService.STATE_NOT_RECOVERED_BLOCK)
12515	currentCustoms.equals(previousCustoms) == false
12516	currentCustomMetaData.value.equals(previousCustoms.get(currentCustomMetaData.key)) == false
12516	previousCustoms.containsKey(currentCustomMetaData.key) == false
12517	currentCustoms.containsKey(previousCustomMetaData.key) == false
12518	isNewCluster()
12518	metaDataChanged() == false
12519	current == null
12520	deleted == null
10895	masterNodeTimeout == DEFAULT_MASTER_NODE_TIMEOUT
10896	waitForActiveShards.equals(ActiveShardCount.DEFAULT)
10897	size == 0
10898	in.readBoolean()
10899	in.readBoolean()
10900	indices == null
10901	waitForStatus == null
10902	waitForEvents == null
10861	waitForActiveShards.equals(ActiveShardCount.DEFAULT)
10903	status == null
10904	outputIndices
11695	shardHealth.isPrimaryActive()
11696	shardHealth.getStatus() == ClusterHealthStatus.RED
11697	computeStatus != ClusterHealthStatus.RED
11697	shardHealth.getStatus() == ClusterHealthStatus.YELLOW
11698	shards.isEmpty()
11699	"shards".equals(params.param("level", "indices"))
11706	c.value == null
11707	most != null
11708	deciders.put(decider.getClass(), decider) != null
11709	allocatorSupplier == null
12583	this == o
12584	getClass() != o.getClass()
12584	o == null
12585	value.equals(that.value)
12585	value != null ? !value.equals(that.value) : that.value != null
12449	remoteClusters.contains(clusterExpression)
12450	Regex.isSimpleMatchPattern(clusterExpression)
11990	"always".equalsIgnoreCase(typeString)
11991	"indices_primaries_active".equalsIgnoreCase(typeString)
11991	"indicesPrimariesActive".equalsIgnoreCase(typeString)
11992	"indicesAllActive".equalsIgnoreCase(typeString)
11992	"indices_all_active".equalsIgnoreCase(typeString)
11993	type == ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE
11994	allocation.routingNodes().hasUnassignedPrimaries()
11995	allocation.routingNodes().hasInactivePrimaries()
11996	type == ClusterRebalanceType.INDICES_ALL_ACTIVE
11997	allocation.routingNodes().hasUnassignedShards()
11998	allocation.routingNodes().hasInactiveShards()
10905	obj == null
10905	getClass() != obj.getClass()
10910	in.getVersion().onOrBefore(Version.V_5_1_1_UNRELEASED)
10911	out.getVersion().onOrBefore(Version.V_5_1_1_UNRELEASED)
10906	in.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
10907	out.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
10908	indicesAndFilters != null
10909	aliasFilter.getAliases().length > 0
12586	lifecycle.started()
12587	lifecycle.started()
12588	localNode == null
12589	timeout.listener.equals(listener)
12590	lifecycle.stoppedOrClosed()
12591	lifecycle.stoppedOrClosed()
12592	lifecycle.started()
12593	tasks.isEmpty()
12594	tasksIdentity.containsKey(existing.task)
12595	timeout != null
12596	lifecycle.stoppedOrClosed()
12597	task == null
12598	task instanceof SourcePrioritizedRunnable
12599	Thread.currentThread().getName().contains(UPDATE_THREAD_NAME)
12600	className.equals(ClusterStateObserver.class.getName())
12601	methodName.equals("callClusterStateAppliers")
12601	className.equals(ClusterService.class.getName())
12602	lifecycle.started()
12603	taskInputs.runOnlyOnMaster()
12603	previousClusterState.nodes().isLocalNodeElectedMaster()
12604	taskOutputs.clusterStateUnchanged()
12605	logger.isTraceEnabled()
12606	logger.isDebugEnabled()
12607	taskResult.isSuccess()
12608	logger.isTraceEnabled()
12609	assertsEnabled
12610	executionResult.noMaster
12611	previousClusterState.nodes().getMasterNodeId() != null
12612	previousClusterState != newClusterState
12612	newClusterState.nodes().isLocalNodeElectedMaster()
12613	previousClusterState.routingTable() != newClusterState.routingTable()
12614	previousClusterState.metaData() != newClusterState.metaData()
12615	newClusterState.blocks().hasGlobalBlock(discoverySettings.getNoMasterBlock().id())
12616	nodesDelta.hasChanges()
12616	logger.isInfoEnabled()
12617	summary.length() > 0
12618	newClusterState.nodes().isLocalNodeElectedMaster()
12619	clusterChangedEvent.state().blocks().disableStatePersistence() == false
12619	clusterChangedEvent.metaDataChanged()
12620	newClusterState.nodes().isLocalNodeElectedMaster()
12621	newClusterState.nodes().isLocalNodeElectedMaster()
12622	listener instanceof AckedClusterStateTaskListener
12623	executionTime.getMillis() > slowTaskLoggingThreshold.getMillis()
11688	shardRouting.active()
11689	shardRouting.relocating()
11690	shardRouting.initializing()
11691	shardRouting.unassigned()
11692	primaryRouting.active()
11693	computeActiveShards == shardRoutingTable.size()
11694	unassignedInfo.getNumFailedAllocations() == 0
11694	unassignedInfo.getLastAllocationStatus() != AllocationStatus.DECIDERS_NO
11694	recoveryType == RecoverySource.Type.EMPTY_STORE
11694	recoveryType == RecoverySource.Type.SNAPSHOT
11694	recoveryType == RecoverySource.Type.LOCAL_SHARDS
12553	routingNodes != null
12554	customs.isEmpty() == false
12555	"_all".equals(metric)
12556	m == null
12557	ignoreUnknown
12558	metrics.contains(Metric.VERSION)
12559	metrics.contains(Metric.MASTER_NODE)
12560	metrics.contains(Metric.BLOCKS)
12561	blocks().global().isEmpty()
12562	blocks().indices().isEmpty()
12563	metrics.contains(Metric.NODES)
12564	metrics.contains(Metric.METADATA)
12565	mapping.containsKey(cursor1.key)
12565	mapping.size() == 1
12566	mapping.size() == 1
12566	mapping.containsKey(cursor.key)
12567	metrics.contains(Metric.ROUTING_TABLE)
12568	metrics.contains(Metric.ROUTING_NODES)
12569	metrics.contains(Metric.CUSTOMS)
12570	out.getVersion().onOrAfter(cursor.value.getMinimalSupportedVersion())
12571	out.getVersion().onOrAfter(cursor.value.getMinimalSupportedVersion())
11700	indexRoutingTable == null
11701	indexHealth.getStatus() == ClusterHealthStatus.RED
11702	indexHealth.getStatus() == ClusterHealthStatus.YELLOW
11702	computeStatus != ClusterHealthStatus.RED
11703	clusterState.blocks().hasGlobalBlock(RestStatus.SERVICE_UNAVAILABLE)
11704	computeStatus.equals(ClusterHealthStatus.GREEN)
11705	shardRouting.active()
12575	timeOutValue != null
12576	observingContext.get() != null
12577	observingContext.get() != null
12578	timeOutValue == null
12579	timeOutValue != null
12580	timeoutTimeLeftMS <= 0L
12581	lastObservedState.get().isOlderOrDifferentMaster(newState)
12581	statePredicate.test(newState)
12582	observingContext.compareAndSet(null, context)
11049	in.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
11050	out.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
11134	indexShardStats == null
11135	shardStats.getShardRouting().primary()
11138	in.readBoolean()
11139	clusterStatus == null
11136	seenAddresses.add(inetAddress)
11137	nodeResponse.nodeStats().getFs() != null
11132	response.clusterStatus() != null
11133	status != null
11015	persistentSettings.isEmpty()
11015	transientSettings.isEmpty()
5487	mapperService == null
5488	codec == null
2963	Strings.isEmpty(field)
2964	num < 1
2965	maxConcurrentGroupRequests > 0
2966	innerHit != null
2967	this == o
2968	o == null
2968	getClass() != o.getClass()
2969	maxConcurrentGroupRequests != that.maxConcurrentGroupRequests
2970	field.equals(that.field)
2971	context.scrollContext() != null
2972	context.searchAfter() != null
2973	context.rescore() != null
2973	context.rescore().isEmpty() == false
2974	fieldType == null
2975	fieldType instanceof NumberFieldMapper.NumberFieldType == false
2975	fieldType instanceof KeywordFieldMapper.KeywordFieldType == false
2976	fieldType.hasDocValues() == false
2977	innerHit != null
2977	fieldType.indexOptions() == IndexOptions.NONE
2978	fieldType instanceof KeywordFieldMapper.KeywordFieldType
2979	fieldType instanceof NumberFieldMapper.NumberFieldType
98	firstShardIndex < secondShardIndex
99	firstShardIndex > secondShardIndex
100	collapseField.equals(shardHits[i].field) == false
101	shard.scoreDocs.length > 0
101	shard.scoreDocs != null
102	availHitCount == 0
103	availHitCount <= start
104	queue.size() == 0
105	seen.contains(collapseValue)
106	ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length
107	setShardIndex
108	hitUpto >= start
109	ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length
92	fi != null
93	trackMaxScore
94	groups == null
95	sortField.getType() == SCORE
96	super.needsScores() == false
97	trackMaxScore
6986	list.isEmpty()
6987	d < 0
6988	d == 0
6989	len > 1
6990	Arrays.equals(array.get(i), array.get(i - 1))
6991	numValues <= 1
6992	previous.get().equals(current.get())
6993	elements == null
6994	elements instanceof Collection
6995	elements == null
6996	other == null
6997	other == null
6998	elements == null
6999	list == null
7000	size <= 0
7001	count == size
7002	count > 0
3035	children.isEmpty()
3036	token == XContentParser.Token.FIELD_NAME
3037	token.isValue()
3038	NAME.match(currentFieldName)
3039	REASON.match(currentFieldName)
3040	TIME.match(currentFieldName)
3041	TIME_NANOS.match(currentFieldName)
3042	token == XContentParser.Token.START_ARRAY
3043	CHILDREN.match(currentFieldName)
656	addShutdownHook()
657	e.exitCode == ExitCodes.USAGE
658	options.has(helpOption)
659	options.has(silentOption)
660	options.has(verboseOption)
5969	file.physicalName().equals(physicalName)
5970	fileInfo != null
5971	file.name().equals(name)
5972	file.name().equals(name)
5839	commitPoint.version() == version
5840	fileInfo != null
5841	fileInfo != null
5842	fileInfo.checksum() != null
5843	token == null
5844	token == XContentParser.Token.FIELD_NAME
5845	token == XContentParser.Token.START_OBJECT
5846	"index_files".equals(currentFieldName)
5846	"indexFiles".equals(currentFieldName)
5847	"translog_files".equals(currentFieldName)
5847	"translogFiles".equals(currentFieldName)
5848	token == XContentParser.Token.FIELD_NAME
5849	token == XContentParser.Token.START_OBJECT
5850	token == XContentParser.Token.FIELD_NAME
5851	token.isValue()
5852	"physical_name".equals(currentFieldName)
5852	"physicalName".equals(currentFieldName)
5853	"length".equals(currentFieldName)
5854	"checksum".equals(currentFieldName)
5855	physicalName == null
5856	size == -1
5857	token.isValue()
5858	"version".equals(currentFieldName)
5859	"name".equals(currentFieldName)
5860	"type".equals(currentFieldName)
5861	version == -1
5862	name == null
5863	type == null
6196	this.words == null
6197	queryMode
10804	docs == null
10805	stats.getDocs() != null
10806	store == null
10807	stats.getStore() != null
10808	indexing == null
10809	stats.getIndexing() != null
10810	get == null
10811	stats.getGet() != null
10812	search == null
10813	stats.getSearch() != null
10814	merge == null
10815	stats.getMerge() != null
10816	refresh == null
10817	stats.getRefresh() != null
10818	flush == null
10819	stats.getFlush() != null
10820	warmer == null
10821	stats.getWarmer() != null
10822	queryCache == null
10823	stats.getQueryCache() != null
10824	fieldData == null
10825	stats.getFieldData() != null
10826	completion == null
10827	stats.getCompletion() != null
10828	segments == null
10829	stats.getSegments() != null
10830	translog == null
10831	stats.getTranslog() != null
10832	requestCache == null
10833	stats.getRequestCache() != null
10834	recoveryStats == null
10835	stats.getRecoveryStats() != null
10836	this.getFieldData() != null
10837	this.getQueryCache() != null
10838	this.getSegments() != null
10844	flags.length > 0
10845	(longFlags & (1 << flag.ordinal())) != 0
10846	add
4409	Strings.isEmpty(fieldName)
4410	text == null
4411	analyzer != null
4412	lowFreqMinimumShouldMatch != null
4412	highFreqMinimumShouldMatch != null
4413	lowFreqMinimumShouldMatch != null
4414	highFreqMinimumShouldMatch != null
4415	token == XContentParser.Token.FIELD_NAME
4416	parseContext.isDeprecatedSetting(currentFieldName)
4417	token == XContentParser.Token.START_OBJECT
4418	token == XContentParser.Token.FIELD_NAME
4419	token == XContentParser.Token.START_OBJECT
4420	MINIMUM_SHOULD_MATCH_FIELD.match(currentFieldName)
4421	token == XContentParser.Token.FIELD_NAME
4422	token.isValue()
4423	LOW_FREQ_FIELD.match(innerFieldName)
4424	HIGH_FREQ_FIELD.match(innerFieldName)
4425	token.isValue()
4426	QUERY_FIELD.match(currentFieldName)
4427	ANALYZER_FIELD.match(currentFieldName)
4428	DISABLE_COORD_FIELD.match(currentFieldName)
4429	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4430	HIGH_FREQ_OPERATOR_FIELD.match(currentFieldName)
4431	LOW_FREQ_OPERATOR_FIELD.match(currentFieldName)
4432	MINIMUM_SHOULD_MATCH_FIELD.match(currentFieldName)
4433	CUTOFF_FREQUENCY_FIELD.match(currentFieldName)
4434	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4435	fieldType != null
4436	analyzer == null
4437	fieldType != null
4438	analyzerObj == null
3547	token == Token.VALUE_NULL
3548	token == Token.START_ARRAY
3549	input.length() > maxInputLength
3550	Character.isHighSurrogate(input.charAt(len - 1))
3551	fieldType().hasContextMappings()
3552	token == Token.VALUE_STRING
3553	token == Token.START_OBJECT
3554	token == Token.FIELD_NAME
3555	ALLOWED_CONTENT_FIELD_NAMES.contains(currentFieldName)
3556	currentFieldName != null
3557	Fields.CONTENT_FIELD_NAME_INPUT.equals(currentFieldName)
3558	token == Token.VALUE_STRING
3559	token == Token.START_ARRAY
3560	token == Token.VALUE_STRING
3561	Fields.CONTENT_FIELD_NAME_WEIGHT.equals(currentFieldName)
3562	token == Token.VALUE_STRING
3563	token == Token.VALUE_NUMBER
3564	NumberType.INT != numberType
3564	NumberType.LONG != numberType
3565	weightValue.longValue() > Integer.MAX_VALUE
3565	weightValue.longValue() < 0
3566	Fields.CONTENT_FIELD_NAME_CONTEXTS.equals(currentFieldName)
3567	fieldType().hasContextMappings() == false
3568	currentToken == XContentParser.Token.START_OBJECT
3569	currentToken == XContentParser.Token.FIELD_NAME
3570	currentToken == XContentParser.Token.START_OBJECT
3570	currentToken == XContentParser.Token.START_ARRAY
3570	currentToken == XContentParser.Token.VALUE_STRING
3571	inputMap.get(input).weight < weight
3571	inputMap.containsKey(input) == false
3572	fieldType().indexAnalyzer().name().equals(fieldType().searchAnalyzer().name()) == false
3573	fieldType().hasContextMappings()
990	fieldNamePatterns.length > 0
990	fieldNamePatterns != null
991	terms instanceof CompletionTerms
992	Regex.simpleMatch(fieldNamePatterns, fieldName)
992	fieldNamePatterns.length > 0
992	fieldNamePatterns != null
1083	fields != null
1084	completion == null
1085	completion.fields != null
1086	fields == null
998	suggestionContext.getFieldType() != null
999	fieldType.hasContextMappings()
999	suggestDoc.getContexts().isEmpty() == false
1000	numResult++ < suggestionContext.getSize()
1001	scorer != null
993	entries.isEmpty() == false
994	toReduce.isEmpty()
995	toReduce.size() == 1
996	option == priorityQueue.insertWithOverflow(option)
997	entries.isEmpty() == false
1066	fuzzyOptions != null
1067	regexOptions != null
1068	contextBytes != null
1069	field == null
1070	mappedFieldType == null
1070	mappedFieldType instanceof CompletionFieldMapper.CompletionFieldType == false
1071	mappedFieldType instanceof CompletionFieldMapper.CompletionFieldType
1072	contextBytes != null
1072	type.hasContextMappings()
1073	contextParser != null
1073	type.hasContextMappings()
1074	currentToken == XContentParser.Token.FIELD_NAME
1075	contextBytes != null
1076	getPrefix() != null
1077	getRegex() != null
1078	fuzzyOptions != null
1079	regexOptions == null
1080	getText() != null
1081	fieldType.hasContextMappings()
1082	fuzzyOptions != null
8116	reference == null
8117	inSlice.length == 1
8118	references.length > 0
5812	listener == null
9498	processor instanceof CompoundProcessor
9499	ignoreFailure
9500	onFailureProcessors.isEmpty()
9501	e instanceof ElasticsearchException
9501	((ElasticsearchException)e).getHeader("processor_type") != null
9502	processorType != null
9503	processorTag != null
8070	compressor != null
8071	this == o
8072	getClass() != o.getClass()
8072	o == null
8073	Arrays.equals(compressed(), that.compressed())
8074	crc32 != that.crc32
8065	COMPRESSOR.isCompressed(bytes)
8066	contentType == null
8067	isAncient(bytes)
8068	compressor != null
8069	compressor == null
7461	v.isRecycled()
7462	recycled
11984	clusterConcurrentRebalance == -1
11985	relocatingShards >= clusterConcurrentRebalance
7490	this.partialValue != null
9471	value == null
9471	defaultValue != null
9472	value == null
9473	value == null
9474	value instanceof String
9475	value == null
9476	value == null
9477	value instanceof Boolean
9478	value == null
9479	value == null
9480	value == null
9481	value instanceof List
9482	value == null
9483	value == null
9484	value instanceof Map
9485	value == null
9486	propertyName == null
9487	processorConfigs != null
9488	exception != null
9489	processorType != null
9490	processorTag != null
9491	propertyName != null
9492	factory != null
9493	onFailureProcessorConfigs != null
9493	onFailureProcessors.isEmpty()
9494	config.isEmpty() == false
9495	ignoreFailure
9495	onFailureProcessors.size() > 0
9326	connectTimeout != null
9327	handshakeTimeout != null
9328	handle.getTypes().contains(type)
7497	keyTypeIsSet()
7498	base.getKey().getAnnotation() != null
7499	base.getKey().getAnnotationType() != null
7500	instanceAsT == null
4398	filterBuilder == null
4399	token == XContentParser.Token.FIELD_NAME
4400	parseContext.isDeprecatedSetting(currentFieldName)
4401	token == XContentParser.Token.START_OBJECT
4402	INNER_QUERY_FIELD.match(currentFieldName)
4403	queryFound
4404	token.isValue()
4405	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4406	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4407	queryFound
4408	rewrite != filterBuilder
8301	consumer == null
8302	parser == null
8303	parseField == null
8304	type == null
8305	consumer == REQUIRED_CONSTRUCTOR_ARG_MARKER
8305	consumer == OPTIONAL_CONSTRUCTOR_ARG_MARKER
7603	expectedType.isInterface()
7604	invocationHandlers == null
7605	invocationHandlers != null
7700	factory.constructorInjector == null
7701	factory.constructorInjector == null
7702	factory.constructorInjector == null
7706	constructionContext.isConstructing()
7707	t != null
3948	index == path.length
1601	profiler != null
1602	profiler != null
1603	aggregatedDfs != null
1603	needsScores
1604	profiler != null
1605	profiler != null
1606	aggregatedDfs != null
1607	aggregatedDfs == null
1608	termStatistics == null
1609	aggregatedDfs == null
1610	collectionStatistics == null
1011	type.equalsIgnoreCase("category")
1012	type.equalsIgnoreCase("geo")
1013	token == Token.START_OBJECT
1013	token == Token.VALUE_STRING
1014	token == Token.START_ARRAY
1015	this == o
1016	getClass() != o.getClass()
1016	o == null
1017	type != that.type
1018	contextMappings.size() > 255
1019	contextMapping == null
1020	queryContexts.isEmpty() == false
1021	internalQueryContext != null
1022	configuration instanceof List
1023	contextMappings.size() == 0
1024	configuration instanceof Map
1025	paramValue == null
1026	obj == null
1026	(obj instanceof ContextMappings) == false
8998	coordinates.size() == 0
8998	coordinates == null
8999	closed
9000	closed
9001	start.x != end.x
9001	start.y != end.y
8985	start.x != end.x
8985	start.y != end.y
8406	map instanceof CopyOnWriteHashMap
8407	index < array.length - 1
8408	index < array.length
8409	key == null
8410	key == null
8411	value == null
8412	key == null
8413	root == newRoot
838	candidate.userInput
838	preTag == null
839	i == 0
839	candidates[i-1].userInput
840	toJoin.length == i + 1
840	candidates[i+1].userInput
841	score == otherScore
842	cmp != 0
7150	count < 0
7151	current == 0
7152	countDown.compareAndSet(current, current - 1)
10063	counter.countDown()
10753	index == null
10754	mappings.containsKey(type)
10755	mappings.containsKey(type)
10756	source.containsKey(type)
10756	source.size() != 1
10757	name.equals("settings")
10758	name.equals("mappings")
10759	name.equals("aliases")
10760	proto != null
10761	found
10762	in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
8691	Files.exists(keystoreFile)
8692	terminal.promptYesNo("An elasticsearch keystore already exists. Overwrite?", false) == false
11092	snapshot == null
11093	repository == null
11094	indices == null
11095	index == null
11096	indicesOptions == null
11097	settings == null
11098	name.equals("indices")
11099	entry.getValue() instanceof String
11100	entry.getValue() instanceof ArrayList
11101	name.equals("partial")
11102	name.equals("settings")
11103	entry.getValue() instanceof Map
11104	name.equals("include_global_state")
11090	snapshotInfo == null
11091	snapshotInfo != null
7697	this.messages.isEmpty()
2430	format == null
2431	format != null
2432	bucketsPaths.length != 1
2433	parent instanceof HistogramAggregatorFactory
2434	histoParent.minDocCount() != 0
2435	parent instanceof DateHistogramAggregatorFactory
2436	histoParent.minDocCount() != 0
2437	format != null
2438	token == XContentParser.Token.FIELD_NAME
2439	token == XContentParser.Token.VALUE_STRING
2440	FORMAT.match(currentFieldName)
2441	BUCKETS_PATH.match(currentFieldName)
2442	token == XContentParser.Token.START_ARRAY
2443	BUCKETS_PATH.match(currentFieldName)
2444	bucketsPaths == null
2445	format != null
6219	offsetGap < 0
6220	charFilters != null
6220	charFilters.length > 0
6221	charFilter instanceof MultiTermAwareComponent
6222	filter instanceof MultiTermAwareComponent
6271	tokenizerName == null
6272	tokenizer == null
6273	charFilter == null
6274	tokenFilter == null
62	noMatchSize > 0
63	pos < fieldValue.length()
64	end == -1
65	noMatchSize+pos < end
66	end == BreakIterator.DONE
48	sourceQuery instanceof BoostQuery
49	sourceQuery instanceof SpanTermQuery
50	sourceQuery instanceof ConstantScoreQuery
51	sourceQuery instanceof FunctionScoreQuery
52	sourceQuery instanceof MultiPhrasePrefixQuery
53	sourceQuery instanceof FiltersFunctionScoreQuery
54	sourceQuery instanceof MultiPhraseQuery
55	sourceQuery instanceof BlendedTermQuery
56	sourceQuery instanceof ESToParentBlockJoinQuery
57	sourceQuery instanceof BoostingQuery
58	sourceQuery instanceof SynonymQuery
59	currentPos == 0
60	numTerms > 16
61	currentPos == terms.length
5461	super.needsField(fieldInfo) == Status.YES
5462	fields.contains(fieldInfo.name)
5463	Regex.simpleMatch(pattern, fieldInfo.name)
6235	tokenizerName != null
6236	charFilter == null
6237	charFilter instanceof MultiTermAwareComponent == false
6238	tokenFilter == null
6239	tokenFilter instanceof MultiTermAwareComponent == false
110	start > pos
111	end > pos
112	sb.charAt(sb.length() - 1) == HighlightUtils.PARAGRAPH_SEPARATOR
113	sb.charAt(sb.length() - 1) == HighlightUtils.NULL_SEPARATOR
73	start > pos
74	end > pos
75	sb.charAt(sb.length() - 1) == HighlightUtils.PARAGRAPH_SEPARATOR
76	sb.charAt(sb.length() - 1) == HighlightUtils.NULL_SEPARATOR
114	snippetObjects != null
115	snippetObject instanceof Snippet[]
115	snippetObject != null
116	breakIterator == null
117	returnNonHighlightedSnippets
77	snippetObjects != null
78	snippetObject != null
78	snippetObject instanceof Snippet[]
79	query instanceof MultiPhrasePrefixQuery
80	i == sizeMinus1
81	innerQueries.length > 1
82	positions.length >= 2
83	query instanceof CommonTermsQuery
84	query instanceof AllTermQuery
85	query instanceof FunctionScoreQuery
86	query instanceof FiltersFunctionScoreQuery
5720	measure == null
5713	model == null
5714	effect == null
6433	nodeEnv.hasNodeFile() == false
6434	indexMetaData != null
6434	indexMetaData.getIndex().getName().equals(index.getName())
6435	indexMetaData.getIndex().getUUID().equals(index.getUUID()) == false
6436	metaData.hasIndex(indexMetaData.getIndex().getName())
6437	graveyard.containsIndex(indexMetaData.getIndex())
6438	danglingIndices.isEmpty()
6439	event.state().blocks().disableStatePersistence() == false
8568	out instanceof Closeable
3651	context.externalValueSet()
3652	dateAsObject == null
3653	dateAsString == null
3654	dateAsString == null
3655	ignoreMalformed.value()
3656	context.includeInAll(includeInAll, this)
3657	fieldType().indexOptions() != IndexOptions.NONE
3658	fieldType().hasDocValues()
3659	fieldType().stored()
3660	other.ignoreMalformed.explicit()
3661	includeDefaults
3661	ignoreMalformed.explicit()
3662	fieldType().nullValue() != null
3662	includeDefaults
3663	includeInAll != null
3664	includeDefaults
3665	fieldType().dateTimeFormatter().format().equals(DEFAULT_DATE_TIME_FORMATTER.format()) == false
3665	includeDefaults
3666	includeDefaults
3666	fieldType().dateTimeFormatter().locale() != Locale.ROOT
1854	in.readBoolean()
1855	hasOrder
1856	interval < 1
1857	dateHistogramInterval == null
1858	offset == null
1859	offset.charAt(0) == '-'
1860	extendedBounds == null
1861	order == null
1862	minDocCount < 0
1863	dateHistogramInterval == null
1864	order != null
1865	extendedBounds != null
1866	this.extendedBounds != null
1867	dateHistogramInterval != null
1868	dateTimeUnit != null
1869	timeZone() != null
1870	token == XContentParser.Token.FIELD_NAME
1871	token == XContentParser.Token.VALUE_STRING
1872	asc
1872	"desc".equals(dir)
1873	"_time".equals(key)
1873	"_key".equals(key)
1874	"_count".equals(key)
1853	valuesSource == null
1815	collectsFromSingleBucket == false
1911	obj == null
1912	getClass() != obj.getClass()
8820	text.startsWith("now")
8821	index == -1
8822	timeZone == null
8823	c == '/'
8824	c == '+'
8825	c == '-'
8826	i >= mathString.length()
8827	Character.isDigit(mathString.charAt(i))
8828	i >= mathString.length()
8829	round
8830	num != 1
8831	round
8832	round
8833	round
8834	round
8835	round
8836	round
8837	round
8838	propertyToRound != null
8839	roundUp
8840	timeZone != null
8841	roundUpIfNoTime
8842	end < 0
8843	end != value.length()
2261	dateTime == null
12845	deadlockedThreads == null
12845	deadlockedThreads.length == 0
12846	cycles.contains(cycle)
12847	state == Thread.State.BLOCKED
12847	knownDeadlockedThreads.contains(threadInfo.getThreadId())
12848	cycle.contains(threadInfoMap.get(Long.valueOf(threadInfo.getLockOwnerId())))
5181	fieldName == null
5182	scale == null
5183	decay <= 0
5183	decay >= 1.0
5184	origin != null
5185	offset != null
5186	fieldName == null
5187	functionBytes == null
5188	multiValueMode == null
5189	fieldType == null
5190	fieldType instanceof DateFieldMapper.DateFieldType
5191	fieldType instanceof GeoPointFieldType
5192	fieldType instanceof NumberFieldMapper.NumberFieldType
5193	token == XContentParser.Token.FIELD_NAME
5194	DecayFunctionBuilder.SCALE.equals(parameterName)
5195	DecayFunctionBuilder.DECAY.equals(parameterName)
5196	DecayFunctionBuilder.ORIGIN.equals(parameterName)
5197	DecayFunctionBuilder.OFFSET.equals(parameterName)
5198	scaleFound
5198	refFound
5199	token == XContentParser.Token.FIELD_NAME
5200	DecayFunctionBuilder.SCALE.equals(parameterName)
5201	DecayFunctionBuilder.ORIGIN.equals(parameterName)
5202	DecayFunctionBuilder.DECAY.equals(parameterName)
5203	DecayFunctionBuilder.OFFSET.equals(parameterName)
5204	origin == null
5204	scaleString == null
5205	token == XContentParser.Token.FIELD_NAME
5206	DecayFunctionBuilder.SCALE.equals(parameterName)
5207	DecayFunctionBuilder.ORIGIN.equals(parameterName)
5208	DecayFunctionBuilder.DECAY.equals(parameterName)
5209	DecayFunctionBuilder.OFFSET.equals(parameterName)
5210	originString == null
5211	scaleString == null
5132	token == XContentParser.Token.START_OBJECT
5133	MULTI_VALUE_MODE.match(currentFieldName)
5134	functionBytes == null
5134	fieldName == null
11986	in.readBoolean()
11987	this == NO
11988	other == NO
11989	this == YES
11989	other == THROTTLE
1137	hasOnlySuggest()
1138	resultWindow > maxResultWindow
1139	scrollContext == null
1140	rescore != null
1141	rescoreContext.window() > maxWindow
1142	sliceBuilder != null
1143	numSlices > sliceLimit
1144	query() == null
1145	queryBoost() != AbstractQueryBuilder.DEFAULT_BOOST
1146	rewrite
1147	typeFilter != null
1148	new NestedHelper(mapperService()).mightMatchNestedDocs(query)
1148	mapperService().hasNested()
1148	typeFilter == null
1148	aliasFilter == null
1148	new NestedHelper(mapperService()).mightMatchNestedDocs(aliasFilter)
1149	aliasFilter != null
1150	sliceBuilder != null
1151	filters.isEmpty()
1152	types.length >= 1
1152	types != null
1153	rescore == null
1154	this.rescore == null
1155	scriptFields == null
11586	in.readBoolean()
11587	index == null
11588	reason != null
8061	bytes.length() < HEADER.length
8062	bytes.get(i) != HEADER[i]
8063	read == -1
8064	len != HEADER.length
8064	Arrays.equals(headerBytes, HEADER) == false
11710	event.state().nodes().isLocalNodeElectedMaster()
11711	existingTask != null
11712	nextDelayNanos < 0
11713	existingTask == null
11714	newTask.scheduledTimeToRunInNanos() < existingTask.scheduledTimeToRunInNanos()
11715	earlierRerouteNeeded
11298	setDefaults
11299	getSearchRequest().indices().length == 0
11299	getSearchRequest().indices() == null
11300	getSearchRequest() == null
11300	getSearchRequest().source() == null
11301	getSearchRequest().source().query() == null
10666	CollectionUtils.isEmpty(indices)
10526	name == null
11448	id == null
10954	name == null
10347	type == null
10348	id == null
10349	versionType.validateVersionForWrites(version)
10350	versionType == VersionType.FORCE
10351	routing != null
10351	routing.length() == 0
10345	FOUND.equals(currentFieldName)
10346	token.isValue()
11088	repository == null
11089	snapshot == null
11034	id == null
11034	id.isEmpty()
11035	id.contains("#")
11036	lang.contains("#")
11036	lang != null
11037	lang.isEmpty()
6068	delimiterConf != null
6069	settings.get(ENCODING) != null
6070	settings.get(ENCODING).equals("float")
6071	settings.get(ENCODING).equals("int")
6072	settings.get(ENCODING).equals("identity")
7645	o instanceof Dependency
7646	injectionPoint != null
7647	parameterIndex != -1
7984	THREAD_CONTEXT.add(threadContext) == false
7985	THREAD_CONTEXT.remove(threadContext) == false
7986	name.startsWith("org.elasticsearch")
7987	iterator.hasNext()
276	Strings.hasText(value) == false
277	c < 32
277	c > 126
278	validHeaderValue(value) == false
7460	v == null
2495	in.readBoolean()
2496	hasGapPolicy
2497	format == null
2498	gapPolicy == null
2499	units == null
2500	units == null
2501	format != null
2502	units != null
2503	dateTimeUnit != null
2504	timeValue != null
2505	bucketsPaths.length != 1
2506	parent instanceof HistogramAggregatorFactory
2507	histoParent.minDocCount() != 0
2508	parent instanceof DateHistogramAggregatorFactory
2509	histoParent.minDocCount() != 0
2510	format != null
2511	gapPolicy != null
2512	units != null
2513	token == XContentParser.Token.FIELD_NAME
2514	token == XContentParser.Token.VALUE_STRING
2515	FORMAT_FIELD.match(currentFieldName)
2516	BUCKETS_PATH_FIELD.match(currentFieldName)
2517	GAP_POLICY_FIELD.match(currentFieldName)
2518	UNIT_FIELD.match(currentFieldName)
2519	token == XContentParser.Token.START_ARRAY
2520	BUCKETS_PATH_FIELD.match(currentFieldName)
2521	bucketsPaths == null
2522	format != null
2523	gapPolicy != null
2524	units != null
2525	Objects.equals(format, other.format)
2526	Objects.equals(gapPolicy, other.gapPolicy)
2527	Objects.equals(units, other.units)
2493	thisBucketValue != null
2493	lastBucketValue != null
2494	xAxisUnits != null
11640	destructiveRequiresName
11641	aliasesOrIndices == null
11641	aliasesOrIndices.length == 0
11642	aliasesOrIndices.length == 1
11643	hasWildcardUsage(aliasesOrIndices[0])
11644	hasWildcardUsage(aliasesOrIndex)
10563	analyzer != null
10564	charfilters != null
10565	tokenizer != null
10566	tokenfilters != null
10567	customAnalyzer
10568	size > 0
10569	size > 0
10570	customAnalyzer
10571	charfilters != null
10572	tokenfilters != null
1096	context.isCancelled()
1097	fieldStatistics.containsKey(term.field())
1098	context.isCancelled()
1093	termsSize == 0
1094	fieldStatistics == null
1095	termsStatsSize == 0
890	terms == null
891	termsEnum.seekExact(term)
892	preFilter == null
893	postFilter == null
894	termFrequency > 0
895	success
859	size <= 0
860	maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE
860	maxEdits < 1
861	value != null
862	this.preFilter != null
863	generator.preFilter() == null
864	this.postFilter != null
865	generator.postFilter() == null
866	this.suggestMode != null
867	this.sort != null
868	this.stringDistance != null
869	generator.maxEdits() < 1
869	generator.maxEdits() > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE
870	"missing".equals(suggestMode)
871	"popular".equals(suggestMode)
872	"always".equals(suggestMode)
873	"internal".equals(distanceVal)
874	"damerauLevenshtein".equals(distanceVal)
874	"damerau_levenshtein".equals(distanceVal)
875	"levenstein".equals(distanceVal)
876	"jarowinkler".equals(distanceVal)
877	"ngram".equals(distanceVal)
878	value != null
879	this == obj
880	obj == null
880	getClass() != obj.getClass()
6277	current instanceof FilterDirectory
6278	targetClass.isAssignableFrom(current.getClass())
6278	targetClass != null
6279	dir instanceof FilterDirectory
6280	d instanceof FileSwitchDirectory
6281	leaf == null
6282	d != null
6282	targetClass.isAssignableFrom(d.getClass())
4837	queryBuilder == null
4838	token == XContentParser.Token.FIELD_NAME
4839	token == XContentParser.Token.START_OBJECT
4840	QUERIES_FIELD.match(currentFieldName)
4841	token == XContentParser.Token.START_ARRAY
4842	QUERIES_FIELD.match(currentFieldName)
4843	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4844	TIE_BREAKER_FIELD.match(currentFieldName)
4845	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4846	queriesFound
4847	luceneQueries.isEmpty()
6681	hostsProviderName.isPresent()
6682	hostsProviderSupplier == null
6683	discoverySupplier == null
12703	Node.NODE_MASTER_SETTING.get(settings)
12703	Node.NODE_DATA_SETTING.get(settings)
12703	localStorageEnable == false
12704	nodeName != null
12705	version == null
12706	Node.NODE_INGEST_SETTING.get(settings)
12707	Node.NODE_MASTER_SETTING.get(settings)
12708	Node.NODE_DATA_SETTING.get(settings)
12709	in.getVersion().onOrAfter(Version.V_5_0_3_UNRELEASED)
12710	ordinal >= Role.values().length
12710	ordinal < 0
12711	this == o
12712	o == null
12712	getClass() != o.getClass()
12713	nodeName.length() > 0
12714	attributes.isEmpty()
12663	values.length > 0
12664	bFilters.isEmpty()
12665	matchIp
12666	"_ip".equals(attr)
12667	node.getAddress() instanceof TransportAddress
12668	opType == OpType.AND
12669	match
12670	match
12670	opType == OpType.OR
12671	"_host_ip".equals(attr)
12672	opType == OpType.AND
12673	match
12674	opType == OpType.OR
12674	match
12675	"_publish_ip".equals(attr)
12676	node.getAddress() instanceof TransportAddress
12677	opType == OpType.AND
12678	match
12679	opType == OpType.OR
12679	match
12680	"_host".equals(attr)
12681	Regex.simpleMatch(value, node.getHostName())
12682	opType == OpType.OR
12683	opType == OpType.AND
12684	Regex.simpleMatch(value, node.getHostAddress())
12685	opType == OpType.OR
12686	opType == OpType.AND
12687	"_id".equals(attr)
12688	node.getId().equals(value)
12689	opType == OpType.OR
12690	opType == OpType.AND
12691	"name".equals(attr)
12691	"_name".equals(attr)
12692	Regex.simpleMatch(value, node.getName())
12693	opType == OpType.OR
12694	opType == OpType.AND
12695	nodeAttributeValue == null
12696	opType == OpType.AND
12697	Regex.simpleMatch(value, nodeAttributeValue)
12698	opType == OpType.OR
12699	opType == OpType.AND
12700	opType == OpType.OR
12701	valueCount > 1
12702	entryCount > 1
12632	localNodeId == null
12633	node.getAddress().equals(address)
12634	resolvedNodeIds.length > 1
12635	resolvedNodeIds.length == 0
12636	isAllNodes(nodes)
12637	nodeId.equals("_local")
12638	localNodeId != null
12639	nodeId.equals("_master")
12640	masterNodeId != null
12641	nodeExists(nodeId)
12642	Regex.simpleMatch(nodeId, node.getName())
12643	Regex.simpleMatch(nodeId, node.getHostAddress())
12644	Regex.simpleMatch(nodeId, node.getHostName())
12645	index != -1
12646	DiscoveryNode.Role.DATA.getRoleName().equals(matchAttrName)
12647	Booleans.parseBoolean(matchAttrValue, true)
12648	DiscoveryNode.Role.MASTER.getRoleName().equals(matchAttrName)
12649	Booleans.parseBoolean(matchAttrValue, true)
12650	DiscoveryNode.Role.INGEST.getRoleName().equals(matchAttrName)
12651	Booleans.parseBoolean(matchAttrValue, true)
12652	Regex.simpleMatch(matchAttrName, attrName)
12652	Regex.simpleMatch(matchAttrValue, attrValue)
12653	this.nodeExists(node)
12654	other.nodeExists(node)
12655	masterNodeId != null
12656	other.masterNodeId.equals(masterNodeId)
12656	other.masterNodeId == null
12657	node == getLocalNode()
12658	node == getMasterNode()
12659	masterNodeId == null
12660	in.readBoolean()
12661	localNode != null
12662	localNode != null
12662	node.getId().equals(localNode.getId())
6680	queueStats != null
12011	dataPath.equals(actualPath)
12012	routing.initializing()
12012	routing.relocatingNodeId() != null
12013	subtractShardsMovingAway
12013	routing.relocating()
12014	decision != null
12015	logger.isTraceEnabled()
12016	freeBytes < diskThresholdSettings.getFreeBytesThresholdLow().getBytes()
12017	skipLowTresholdChecks == false
12018	logger.isDebugEnabled()
12019	freeBytes > diskThresholdSettings.getFreeBytesThresholdHigh().getBytes()
12020	logger.isDebugEnabled()
12021	logger.isDebugEnabled()
12022	freeDiskPercentage < diskThresholdSettings.getFreeDiskThresholdLow()
12023	skipLowTresholdChecks == false
12024	logger.isDebugEnabled()
12025	freeDiskPercentage > diskThresholdSettings.getFreeDiskThresholdHigh()
12026	logger.isDebugEnabled()
12027	logger.isDebugEnabled()
12028	freeBytesAfterShard < diskThresholdSettings.getFreeBytesThresholdHigh().getBytes()
12029	freeSpaceAfterShard < diskThresholdSettings.getFreeDiskThresholdHigh()
12030	shardRouting.currentNodeId().equals(node.nodeId()) == false
12031	decision != null
12032	logger.isTraceEnabled()
12033	dataPath == null
12033	usage.getPath().equals(dataPath) == false
12034	freeBytes < diskThresholdSettings.getFreeBytesThresholdHigh().getBytes()
12035	logger.isDebugEnabled()
12036	freeDiskPercentage < diskThresholdSettings.getFreeDiskThresholdHigh()
12037	logger.isDebugEnabled()
12038	usage == null
12039	logger.isDebugEnabled()
12040	diskThresholdSettings.includeRelocations()
12041	logger.isTraceEnabled()
12042	usages.size() == 0
12043	diskThresholdSettings.isEnabled() == false
12044	allocation.nodes().getDataNodes().size() <= 1
12045	logger.isTraceEnabled()
12046	clusterInfo == null
12047	logger.isTraceEnabled()
12048	usages.isEmpty()
12049	logger.isTraceEnabled()
12050	shard.recoverySource().getType() == RecoverySource.Type.LOCAL_SHARDS
12050	shard.active() == false
12050	metaData.getMergeSourceIndex() != null
12051	shardIds.contains(shardRoutingTable.shardId())
11892	usage.getFreeBytes() < diskThresholdSettings.getFreeBytesThresholdHigh().getBytes()
11893	usage.getFreeBytes() < diskThresholdSettings.getFreeBytesThresholdLow().getBytes()
11894	usage.getFreeDiskAsPercentage() < diskThresholdSettings.getFreeDiskThresholdHigh()
11895	usage.getFreeDiskAsPercentage() < diskThresholdSettings.getFreeDiskThresholdLow()
11896	usages != null
11897	nodes.contains(node) == false
11898	usage.getFreeBytes() < diskThresholdSettings.getFreeBytesThresholdHigh().getBytes()
11898	usage.getFreeDiskAsPercentage() < diskThresholdSettings.getFreeDiskThresholdHigh()
11899	(System.nanoTime() - lastRunNS) > diskThresholdSettings.getRerouteInterval().nanos()
11900	usage.getFreeBytes() < diskThresholdSettings.getFreeBytesThresholdLow().getBytes()
11900	usage.getFreeDiskAsPercentage() < diskThresholdSettings.getFreeDiskThresholdLow()
11901	nodeHasPassedWatermark.contains(node)
11902	(System.nanoTime() - lastRunNS) > diskThresholdSettings.getRerouteInterval().nanos()
11903	reroute
12550	totalBytes == 0
12551	this == o
12552	getClass() != o.getClass()
12552	o == null
7872	this.unit == unit
7873	obj == null
7874	obj instanceof Distance
7875	distance.endsWith(name)
7876	b < 0
7876	b >= values().length
2100	shardSize < 0
2101	maxDocsPerValue < 0
2102	executionHint != null
2095	valuesSource instanceof ValuesSource.Numeric
2096	valuesSource instanceof ValuesSource.Bytes
2097	executionHint != null
2098	execution == null
2099	execution.needsGlobalOrdinals()
2099	valuesSource instanceof ValuesSource.Bytes.WithOrdinals
1398	context.collapse() != null
1399	context.docValueFieldsContext() == null
1400	context.docValueFieldsContext().fields().contains(name) == false
1401	context.docValueFieldsContext() == null
1402	hitContext.hit().fieldsOrNull() == null
1403	hitField == null
1404	fieldType != null
11466	opType.getLowercase().equals(lowerCase)
11467	type == 0
11468	type == 1
11469	type == 2
11470	request instanceof IndexRequest
11471	request instanceof DeleteRequest
11472	request instanceof UpdateRequest
11418	encodedRouting == null
11419	encodedRouting != null
11420	in.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
11421	out.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
11422	forcedRefresh
11423	getSeqNo() >= 0
11424	token.isValue()
11425	_INDEX.equals(currentFieldName)
11426	_TYPE.equals(currentFieldName)
11427	_ID.equals(currentFieldName)
11428	_VERSION.equals(currentFieldName)
11429	RESULT.equals(currentFieldName)
11430	r.getLowercase().equals(result)
11431	FORCED_REFRESH.equals(currentFieldName)
11432	_SEQ_NO.equals(currentFieldName)
11433	token == XContentParser.Token.START_OBJECT
11434	_SHARDS.equals(currentFieldName)
6045	docsStats == null
3543	value == null
3544	Regex.simpleMatch(pattern, fieldMapper.fieldType().name())
3545	fieldMapper != null
3546	otherFieldMapper.fieldType().name().equals(name)
3590	metadataMapper(ParentFieldMapper.class).active()
3591	metadataMapper instanceof FieldMapper
3592	previous != null
3593	objectMapper.nested().isNested()
3594	objectMapper.nested().isNested()
3595	filter == null
3596	scorer == null
3597	scorer.iterator().advance(nestedDocId) == nestedDocId
3598	nestedObjectMapper == null
3599	nestedObjectMapper.fullPath().length() < objectMapper.fullPath().length()
3600	indexOfLastDot != -1
3601	updated == this.mapping
3502	source != null
3503	mapping == null
3504	type == null
3505	defaultSource != null
3506	t.v2() != null
3507	typeParser != null
3508	false == fieldNode instanceof Map
3509	meta != null
3510	fieldNodeMap.isEmpty()
3511	root.size() == 0
3512	type == null
3512	type.equals(rootName)
3748	remainingPath.isEmpty() == false
3749	mapping.root.isEnabled() == false
3750	emptyDoc == false
3751	docMapper.type().equals(MapperService.DEFAULT_MAPPING)
3752	Objects.equals(source.type(), docMapper.type()) == false
3753	token != XContentParser.Token.START_OBJECT
3754	token != null
3755	mapping.root.isEnabled()
3756	token == XContentParser.Token.END_OBJECT
3757	token != XContentParser.Token.FIELD_NAME
3758	context.docs().size() > 1
3759	e instanceof MapperParsingException
3760	source.source().length() == 0
3760	source.source() != null
3761	Strings.hasText(part) == false
3762	dynamicMappers.isEmpty()
3763	newMapper.name().equals(previousMapper.name())
3763	previousMapper != null
3764	i < nameParts.length - 1
3765	newMapper instanceof ObjectMapper
3766	merge
3767	parentMappers.size() > 1
3768	parentMappers.isEmpty() == false
3769	mapper.isEnabled() == false
3770	token == XContentParser.Token.VALUE_NULL
3771	token.isValue()
3772	nested.isNested()
3773	includeInAll != null
3774	token == XContentParser.Token.END_OBJECT
3775	token == XContentParser.Token.START_OBJECT
3776	nested.isNested()
3777	token == XContentParser.Token.START_OBJECT
3778	token == XContentParser.Token.START_ARRAY
3779	token == XContentParser.Token.FIELD_NAME
3780	MapperService.isMetadataField(context.path().pathAsText(currentFieldName))
3781	token == XContentParser.Token.VALUE_NULL
3782	token == null
3783	token.isValue()
3784	nested.isIncludeInParent()
3785	nested.isIncludeInRoot()
3786	parentDoc != rootDoc
3786	nested.isIncludeInParent()
3787	field.name().equals(UidFieldMapper.NAME)
3787	field.name().equals(TypeFieldMapper.NAME)
3788	uidField != null
3789	mapper instanceof ObjectMapper
3790	update != null
3791	fieldMapper.copyTo() != null
3792	objectMapper != null
3793	dynamic == ObjectMapper.Dynamic.STRICT
3794	dynamic == ObjectMapper.Dynamic.TRUE
3795	builder == null
3796	mapper != null
3797	mapper instanceof ArrayValueMapperParser
3798	dynamic == ObjectMapper.Dynamic.STRICT
3799	dynamic == ObjectMapper.Dynamic.TRUE
3800	builder == null
3801	mapper instanceof ArrayValueMapperParser
3802	token == XContentParser.Token.START_OBJECT
3803	token == XContentParser.Token.START_ARRAY
3804	token == XContentParser.Token.FIELD_NAME
3805	token == XContentParser.Token.VALUE_NULL
3806	token == null
3807	currentFieldName == null
3808	mapper != null
3809	mapper != null
3810	parentMapper.dynamic() == ObjectMapper.Dynamic.STRICT
3811	fieldType instanceof StringFieldType
3812	fieldType instanceof TextFieldType
3813	builder == null
3814	fieldType instanceof KeywordFieldType
3815	builder == null
3816	typeParser == null
3817	dateTimeFormatter != null
3818	token == XContentParser.Token.VALUE_STRING
3819	parseableAsLong
3819	context.root().numericDetection()
3820	builder == null
3821	context.root().numericDetection()
3821	parseableAsDouble
3822	builder == null
3823	parseableAsDouble == false
3823	parseableAsLong == false
3823	context.root().dateDetection()
3824	builder == null
3825	builder instanceof DateFieldMapper.Builder
3826	dateBuilder.isDateTimeFormatterSet() == false
3827	builder == null
3828	token == XContentParser.Token.VALUE_NUMBER
3829	numberType == XContentParser.NumberType.LONG
3829	numberType == XContentParser.NumberType.INT
3830	builder == null
3831	numberType == XContentParser.NumberType.FLOAT
3831	numberType == XContentParser.NumberType.DOUBLE
3832	builder == null
3833	token == XContentParser.Token.VALUE_BOOLEAN
3834	builder == null
3835	token == XContentParser.Token.VALUE_EMBEDDED_OBJECT
3836	builder == null
3837	builder != null
3838	dynamic == ObjectMapper.Dynamic.STRICT
3839	dynamic == ObjectMapper.Dynamic.FALSE
3840	existingFieldType != null
3841	existingFieldType != null
3842	copyToFields.isEmpty() == false
3842	context.isWithinCopyTo()
3843	field.startsWith(doc.getPrefix())
3844	targetDoc == context.doc()
3845	fieldMapper != null
3846	existingFieldMapper != null
3847	mapper == null
3848	builder == null
3849	mapper.nested() != ObjectMapper.Nested.NO
3850	lastDotNdx == -1
3851	parentMapper == null
3852	dynamic == null
3853	mapper == null
3853	(mapper instanceof ObjectMapper) == false
3854	objectMapper.nested().isNested()
1998	agg instanceof LongTerms
1998	((LongTerms) agg).format == DocValueFormat.RAW
1999	promoteToDouble == false
2000	agg instanceof LongTerms
3275	v.toString().equals(value)
3276	v.toString().equals(value)
3277	"match".equals(propName)
3278	"path_match".equals(propName)
3279	"unmatch".equals(propName)
3280	"path_unmatch".equals(propName)
3281	"match_mapping_type".equals(propName)
3282	"match_pattern".equals(propName)
3283	"mapping".equals(propName)
3284	indexVersionCreated.onOrAfter(Version.V_5_0_0_alpha1)
3285	match == null
3285	pathMatch == null
3285	matchMappingType == null
3286	mapping == null
3287	matchMappingType != null
3287	matchMappingType.equals("*") == false
3288	indexVersionCreated.onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
3289	pathMatch != null
3289	matchType.matches(pathMatch, path)
3290	match != null
3290	matchType.matches(match, name)
3291	pathUnmatch != null
3291	matchType.matches(pathUnmatch, path)
3292	unmatch != null
3292	matchType.matches(unmatch, name)
3293	this.xcontentFieldType != null
3293	this.xcontentFieldType != xcontentFieldType
3294	mapping.containsKey("type")
3295	type.equals(mapping.get("type")) == false
3295	"text".equals(type)
3296	"not_analyzed".equals(index)
3296	"no".equals(index)
3297	value instanceof Map
3298	value instanceof List
3299	value instanceof String
3300	value instanceof Map
3301	value instanceof List
3302	value instanceof String
3303	match != null
3304	pathMatch != null
3305	unmatch != null
3306	pathUnmatch != null
3307	xcontentFieldType != null
3308	pathMatch == null
3308	match == null
3309	matchType != MatchType.SIMPLE
9691	Constants.LINUX
9692	mountPoint.equals(getMountPointLinux(in))
9693	index != -1
9694	Constants.WINDOWS
9695	Constants.FREE_BSD
9696	mount.equals(getMountPointLinux(fs))
9697	sameMountPoint == null
9698	sameMountPoint != null
9699	root.length() < 2
9700	Character.isAlphabetic(driveLetter) == false
9700	root.charAt(1) != ':'
9701	toString.charAt(length - 4) == '('
9701	toString.endsWith(":)")
9701	length > 3
9702	Character.toLowerCase(toString.charAt(length - 3)) == driveLetter
9703	result < 0
9704	result < 0
9705	result < 0
9706	"lucene".equals(name)
3163	filterBadDefaults
3164	codeSource == null
3165	location != null
3166	BootstrapInfo.UNTRUSTED_CODEBASE.equals(location.getFile())
3167	plugin.implies(domain, permission)
3167	plugin != null
3168	permission instanceof FilePermission
3168	"<<ALL FILES>>".equals(permission.getName())
3169	"runCommand".equals(element.getMethodName())
3169	"org.apache.hadoop.util.Shell".equals(element.getClassName())
3170	"sun.rmi.server.LoaderHandler".equals(element.getClassName())
3170	"loadClass".equals(element.getMethodName())
4060	innerRewrite != query
4061	innerRewrite instanceof ToParentBlockJoinQuery
4062	sameClassAs(obj) == false
9124	initialized
6240	side == SIDE_BACK
6241	side == SIDE_BACK
6049	matcher == null
3217	status != ExitCodes.OK
3218	options.nonOptionArguments().isEmpty() == false
3219	options.has(versionOption)
3220	options.has(pidfileOption)
3220	options.has(daemonizeOption)
5623	logger.isTraceEnabled()
5624	tookMS > 20000
5625	logger.isTraceEnabled()
5626	this.getMaxThreadCount() != config.getMaxThreadCount()
5626	this.getMaxMergeCount() != config.getMaxMergeCount()
5627	config.isAutoThrottle()
5627	isEnabled == false
5628	config.isAutoThrottle() == false
5628	isEnabled
7327	elasticsearchDirectoryReader != null
7328	reader instanceof FilterDirectoryReader
7329	reader instanceof ElasticsearchDirectoryReader
9413	in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
9414	header.getKey().startsWith("es.")
9415	key.startsWith("es.") == false
9416	key.startsWith("es.")
9417	cause == this
9418	getCause() != null
9419	getCause() instanceof ElasticsearchException
9420	out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
9421	elasticsearchException == null
9422	elasticsearchExceptionHandle != null
9423	ex != this
9424	throwable instanceof ElasticsearchException
9425	params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, REST_EXCEPTION_SKIP_CAUSE_DEFAULT) == false
9426	cause != null
9427	headers.isEmpty() == false
9428	params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false
9429	values.isEmpty() == false
9429	values != null
9430	values.size() == 1
9431	token.isValue()
9432	TYPE.equals(currentFieldName)
9433	REASON.equals(currentFieldName)
9434	STACK_TRACE.equals(currentFieldName)
9435	token == XContentParser.Token.VALUE_STRING
9436	token == XContentParser.Token.START_OBJECT
9437	CAUSED_BY.equals(currentFieldName)
9438	HEADER.equals(currentFieldName)
9439	token == XContentParser.Token.FIELD_NAME
9440	token == XContentParser.Token.VALUE_STRING
9441	token == XContentParser.Token.START_ARRAY
9442	token == XContentParser.Token.VALUE_STRING
9443	token == XContentParser.Token.START_OBJECT
9444	token == XContentParser.Token.START_ARRAY
9445	parseRootCauses
9445	ROOT_CAUSE.equals(currentFieldName)
9446	token == XContentParser.Token.VALUE_STRING
9447	values.size() > 0
9448	metadata.containsKey(currentFieldName)
9449	t instanceof ElasticsearchException
9450	e == null
9451	detailed == false
9452	t instanceof ElasticsearchException
9453	token.isValue()
9454	cause instanceof ElasticsearchException
9454	cause != null
9455	ex instanceof ElasticsearchException
9456	simpleName.startsWith("Elasticsearch")
9457	stack != null
9458	metadata.containsKey(INDEX_METADATA_KEY)
9459	metadata.containsKey(SHARD_METADATA_KEY)
9460	index != null
9460	index.isEmpty() == false
9461	shard != null
9461	shard.isEmpty() == false
9462	index != null
9463	index != null
9464	shardId != null
9465	header != null
9465	header.isEmpty() == false
9466	Character.isUpperCase(c)
9467	changed
9468	i == 0
9469	changed
9470	changed
7318	reader instanceof FilterLeafReader
7319	reader instanceof ElasticsearchLeafReader
6008	cur.major > old.major
6009	cur.minor > old.minor
6009	upgradeOnlyAncientSegments == false
6010	upgradeInProgress
6011	shouldUpgrade(info)
6012	spec.merges.size() == MAX_CONCURRENT_UPGRADE_MERGES
6013	spec.merges.isEmpty() == false
5991	query.getClass() != TermQuery.class
5992	query.getClass() == TermQuery.class
3117	isFatalUncaught(e)
3118	e instanceof InternalError
3119	e instanceof OutOfMemoryError
3120	e instanceof StackOverflowError
3121	e instanceof UnknownError
3122	e instanceof IOError
6645	node.isMasterNode()
6646	candidates.isEmpty()
6647	minimumMasterNodes < 1
6648	node.isMasterNode()
6649	hasTooManyMasterNodes(oldState.nodes()) == false
6649	hasTooManyMasterNodes(newState.nodes())
6650	sortedNodes == null
6651	++counter >= numberOfPossibleMasters
6652	possibleNodes.isEmpty()
6653	node.isMasterNode()
6654	o1.isMasterNode()
6654	o2.isMasterNode()
6655	o2.isMasterNode()
6655	o1.isMasterNode()
11946	allocation.ignoreDisable()
11947	INDEX_ROUTING_ALLOCATION_ENABLE_SETTING.exists(indexMetaData.getSettings())
11948	shardRouting.active() == false
11948	shardRouting.recoverySource().getType() != RecoverySource.Type.EXISTING_STORE
11948	shardRouting.primary()
11949	shardRouting.primary()
11950	allocation.ignoreDisable()
11951	INDEX_ROUTING_REBALANCE_ENABLE_SETTING.exists(indexSettings)
11952	shardRouting.primary()
11953	shardRouting.primary() == false
11954	usedIndexSetting
11955	usedIndexSetting
11956	strValue == null
11957	strValue == null
7688	valid
7689	membersInjectors == null
7690	valid
7691	injectionListeners == null
7692	valid
7693	valid
7694	valid
7695	valid
7696	valid
5599	a == null
5600	reader instanceof SegmentReader
5601	reader instanceof FilterLeafReader
5602	docIdAndVersion != null
5603	get.versionType().isVersionConflictForReads(docIdAndVersion.version, get.version())
5604	docIdAndVersion != null
5605	success
5606	success
5607	isClosed.get()
5608	includeSegmentFileSizes
5609	useCompoundFile
5610	verbose
5611	lastCommittedSegmentInfos != null
5612	segment == null
5613	store.tryIncRef()
5614	failEngineLock.tryLock()
5615	failedEngine.get() != null
5616	Lucene.isCorruptionException(failure)
5617	failure != null
5618	Lucene.isCorruptionException(e)
5619	isClosed.get() == false
5620	isClosed.get() == false
5597	openMode == null
5598	released.compareAndSet(false, true)
8988	this == obj
8989	obj == null
8989	getClass() != obj.getClass()
9676	PATH_HOME_SETTING.exists(settings)
9677	PATH_CONF_SETTING.exists(settings)
9678	PATH_SCRIPTS_SETTING.exists(settings)
9679	dataPaths.isEmpty() == false
9680	PATH_SHARED_DATA_SETTING.exists(settings)
9681	repoPaths.isEmpty() == false
9682	PATH_LOGS_SETTING.exists(settings)
9683	PIDFILE_SETTING.exists(settings)
9684	"file".equalsIgnoreCase(url.getProtocol())
9685	url.getHost() == null
9685	"".equals(url.getHost())
9686	path == null
9687	"jar".equals(url.getProtocol())
9688	pos < 0
9689	normalizedUrl == null
645	kvp.value.isEmpty()
646	settings.containsKey(kvp.key)
647	value != null
648	settings.containsKey(setting)
7563	throwable instanceof ProvisionException
7564	throwable instanceof ConfigurationException
7565	throwable instanceof CreationException
7566	messages.isEmpty()
7567	hasErrors()
7568	hasErrors()
7569	hasErrors()
7570	moreErrors.root.errors == null
7570	moreErrors.root == root
7571	e.source != SourceProvider.UNKNOWN_SOURCE
7572	size() == expectedSize
7573	root.errors == null
7574	root.errors == null
7575	displayCauses
7575	cause != null
7576	errorMessages.size() == 1
7577	value != null
7577	dependency.isNullable()
7578	messageCause == null
7579	onlyCause != null
7580	converter.appliesTo(o)
7581	source instanceof Dependency
7582	injectionPoint != null
7583	source instanceof InjectionPoint
7584	source instanceof Class
7585	source instanceof Member
7586	source instanceof TypeLiteral
7587	source instanceof Key
7588	memberType == Field.class
7589	dependency != null
7140	r instanceof AbstractRunnable
7141	((AbstractRunnable) r).isForceExecution()
7142	queue instanceof SizeBlockingQueue
7171	queueCapacity < 0
7172	Node.NODE_NAME_SETTING.exists(settings)
7163	this.listener != null
7164	isTerminated()
7165	listener != null
7166	command instanceof AbstractRunnable
7167	contextHolder.isClosed() == false
7168	getQueue() instanceof SizeBlockingQueue
8402	maximumSize < 0
8403	maximumSize == 0
8404	queue.size() == maximumSize
8405	add(e)
2282	first
2283	obj == null
2284	getClass() != obj.getClass()
6684	e instanceof RuntimeException
6685	e instanceof ElasticsearchException
6686	t != null
6687	t instanceof ElasticsearchException
6688	t instanceof IllegalArgumentException
6689	result.getCause() == null
6690	result.getCause() == result
6691	counter++ > 10
6692	t == null
6693	t.getCause() != null
6694	t.getMessage() != null
6695	t != null
6696	main != null
6697	main != null
6698	first == null
6699	t != null
6700	clazz.isInstance(t)
6701	e != null
6702	e instanceof RuntimeException
6703	reasons.contains(reason) == false
144	fieldNamesFieldType.isEnabled() == false
4754	Strings.isEmpty(fieldName)
4755	token == XContentParser.Token.FIELD_NAME
4756	token.isValue()
4757	FIELD_FIELD.match(currentFieldName)
4758	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4759	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4760	fieldPattern == null
4761	fieldNamesFieldType == null
4762	context.getObjectMapper(fieldPattern) != null
4763	fields.size() == 1
10033	isCollapseRequest()
10034	collapseBuilder.getMaxConcurrentGroupRequests() > 0
10035	collapseValue != null
10036	origQuery != null
10037	options.getSorts() != null
10038	options.getFetchSourceContext() != null
10039	options.getFetchSourceContext().includes() == null
10039	options.getFetchSourceContext().excludes() == null
10040	options.getDocValueFields() != null
10041	options.getStoredFieldsContext() != null
10041	options.getStoredFieldsContext().fieldNames() != null
10042	options.getScriptFields() != null
10043	options.getHighlightBuilder() != null
1359	context.explain() == false
11539	filteringAlias != null
11540	type == null
11541	id == null
11542	query == null
11543	in.readBoolean()
11544	in.readBoolean()
11545	explanation == null
11546	getResult == null
7623	explicitBinding.getInternalFactory() == this
7611	key.getAnnotationType() != null
1816	maxAsStr != null
1817	min != null
1817	max != null
1817	min.compareTo(max) > 0
1818	min != null
1819	max != null
1820	obj == null
1821	getClass() != obj.getClass()
1822	min != null
1823	minAsStr != null
1824	minAsStr != null
1825	max != null
1826	maxAsStr != null
1827	maxAsStr != null
120	spec == null
121	fieldType == null
122	query == null
2822	sigma < 0.0
2810	valuesSource != null
2811	valuesSource == null
2812	owningBucketOrd >= counts.size()
2812	valuesSource == null
2813	valuesSource == null
2813	bucket >= counts.size()
2397	sigma != null
2398	token == XContentParser.Token.VALUE_NUMBER
2398	SIGMA.match(field)
2399	sigma < 0.0
2400	bucketsPaths.length != 1
2401	sigma < 0.0
7716	isConstructorExceptionCompatibleWithFactoryExeception( constructorException, entry.getKey().getExceptionTypes())
7717	factoryException.isAssignableFrom(constructorException)
7718	parameter.isProvidedByFactory()
7606	resultOrError == null
7607	resultOrError instanceof Errors
8446	offset > buf.length
8446	(offset + length) < 0
8446	length < 0
8446	offset < 0
8447	buf == null
8448	pos >= count
8449	len < 0
8449	(off + len) < 0
8449	off > b.length
8449	off < 0
8449	(off + len) > b.length
8450	len == 0
8451	pos >= count
8452	pos + len > count
8453	len <= 0
8454	pos + n > count
8455	n < 0
8628	initialSize < 0
8629	newcount > buf.length
8630	(off + len) < 0
8630	(off + len) > c.length
8630	off < 0
8630	off > c.length
8630	len < 0
8631	len == 0
8632	newcount > buf.length
8633	newcount > buf.length
8430	length == -1
8431	next >= length
8432	len == 0
8433	next >= length
8434	next >= length
8435	readAheadLimit < 0
1274	canHighlight(mapper) == false
1275	hitContext.cache().containsKey(CACHE_KEY)
1276	field.fieldOptions().requireFieldMatch()
1277	cache.fieldMatchFieldQuery == null
1278	cache.noFieldMatchFieldQuery == null
1279	entry == null
1280	field.fieldOptions().numberOfFragments() == 0
1281	mapper.fieldType().stored()
1281	forceSource
1282	field.fieldOptions().scoreOrdered()
1283	mapper.fieldType().stored()
1283	forceSource
1284	mapper.fieldType().stored()
1284	forceSource
1285	cache.fvh == null
1286	field.fieldOptions().matchedFields().isEmpty()
1286	field.fieldOptions().matchedFields() != null
1287	fragments.length > 0
1287	fragments != null
1288	noMatchSize > 0
1289	fragments.length > 0
1289	fragments != null
1290	boundaryScannerLocale != null
1291	boundaryScannerLocale != null
1292	fieldOptions.boundaryChars() != SimpleBoundaryScanner.DEFAULT_BOUNDARY_CHARS
1292	fieldOptions.boundaryMaxScan() != SimpleBoundaryScanner.DEFAULT_MAX_SCAN
6574	registerConnectionListener
1156	storedFieldsContext == null
1157	context.hasFetchSourceContext()
1157	context.hasScriptFields()
1158	storedFieldsContext.fetchFields() == false
1159	fieldName.equals(SourceFieldMapper.NAME)
1160	Regex.isSimpleMatchPattern(fieldName)
1161	fieldNamePatterns == null
1162	fieldType == null
1163	context.getObjectMapper(fieldName) != null
1164	fieldNames == null
1165	fieldNamePatterns == null
1165	fieldNames == null
1166	context.isCancelled()
1167	rootDocId != -1
1168	context.mapperService().hasNested()
1169	bits.get(subDocId)
1170	fieldsVisitor == null
1171	fieldsVisitor.fields().isEmpty()
1172	documentMapper == null
1173	fieldsVisitor.source() != null
1174	source != null
1175	extractedValue instanceof List
1176	extractedValue instanceof Map
1177	nested.getChild() == null
1178	context.hasStoredFields()
1178	context.storedFieldsContext().fieldNames().isEmpty()
1179	nestedFieldsVisitor != null
1180	nestedFieldsVisitor.fields().isEmpty()
1181	nestedParentObjectMapper != null
1182	nestedParentObjectMapper.nested().isNested() == false
1183	childFilter == null
1184	childScorer == null
1185	current != null
10118	context.getNumShards() != resultConsumer.getNumShards()
10119	queryAndFetchOptimization
10120	reducedQueryPhase.scoreDocs.length == 0
10121	entry == null
10122	queryResult != null
10123	queryResult.hasSearchContext()
10123	context.getRequest().scroll() == null
1372	source != null
1373	Booleans.isTrue(source)
1374	Booleans.isFalse(source)
1375	sIncludes != null
1376	sExcludes != null
1377	source_excludes != null
1377	source_includes != null
1377	fetchSource != null
1378	token == XContentParser.Token.VALUE_BOOLEAN
1379	token == XContentParser.Token.VALUE_STRING
1380	token == XContentParser.Token.START_ARRAY
1381	token == XContentParser.Token.START_OBJECT
1382	token == XContentParser.Token.FIELD_NAME
1383	token == XContentParser.Token.START_ARRAY
1384	INCLUDES_FIELD.match(currentFieldName)
1385	token == XContentParser.Token.VALUE_STRING
1386	EXCLUDES_FIELD.match(currentFieldName)
1387	token == XContentParser.Token.VALUE_STRING
1388	token == XContentParser.Token.VALUE_STRING
1389	INCLUDES_FIELD.match(currentFieldName)
1390	EXCLUDES_FIELD.match(currentFieldName)
1391	fetchSource
1392	this == o
1393	o == null
1393	getClass() != o.getClass()
1394	fetchSource != that.fetchSource
1395	Arrays.equals(excludes, that.excludes)
1396	Arrays.equals(includes, that.includes)
1397	filter == null
1405	context.sourceRequested() == false
1406	fetchSourceContext.excludes().length == 0
1406	fetchSourceContext.includes().length == 0
1407	source.internalSourceRef() == null
10272	indices != null
10273	nonSearchableIndices != null
10274	nonAggregatableIndices != null
10275	this == o
10276	getClass() != o.getClass()
10276	o == null
10277	isSearchable != that.isSearchable
10278	isAggregatable != that.isAggregatable
10279	name.equals(that.name)
10280	type.equals(that.type)
10281	Arrays.equals(indices, that.indices)
10282	Arrays.equals(nonSearchableIndices, that.nonSearchableIndices)
10257	fields == null
10257	fields.length == 0
10270	this == o
10271	o == null
10271	getClass() != o.getClass()
10264	fields == null
10264	fields.length == 0
10265	fields == null
10265	fields.length == 0
10266	this == o
10267	getClass() != o.getClass()
10267	o == null
10268	Arrays.equals(indices, that.indices)
10269	indicesOptions.equals(that.indicesOptions)
10258	this == o
10259	o == null
10259	getClass() != o.getClass()
5640	stats.fields != null
5641	fields == null
5642	fields != null
5643	this == o
5644	getClass() != o.getClass()
5644	o == null
1450	valueLoaded
1451	valuesLoaded
1452	valueLoaded
1453	valuesLoaded
3602	indexCreatedVersion.onOrAfter(Version.V_5_0_0_beta1)
3603	simpleName.isEmpty()
3604	customBoost()
3604	indexCreatedVersion.before(Version.V_5_0_0_alpha1)
3604	field.fieldType().indexOptions() != IndexOptions.NONE
3605	this.getClass().equals(mergeWith.getClass())
3606	mergeWith instanceof FieldMapper
3607	newFieldType == null
3608	fieldType.getClass() != newFieldType.getClass()
3609	multiFields == updatedMultiFields
3609	fieldType == newFieldType
3610	fieldType().boost() != 1.0f
3610	includeDefaults
3611	indexed != defaultIndexed
3611	fieldType().tokenized() != defaultFieldType.tokenized()
3611	includeDefaults
3612	fieldType().stored() != defaultFieldType.stored()
3612	includeDefaults
3613	fieldType().storeTermVectors() != defaultFieldType.storeTermVectors()
3613	includeDefaults
3614	fieldType().omitNorms() != defaultFieldType.omitNorms()
3614	includeDefaults
3615	indexed
3615	fieldType().indexOptions() != defaultFieldType.indexOptions()
3615	includeDefaults
3616	fieldType().eagerGlobalOrdinals() != defaultFieldType.eagerGlobalOrdinals()
3616	includeDefaults
3617	fieldType().similarity() != null
3618	includeDefaults
3619	copyTo != null
3620	fieldType.tokenized() == false
3621	fieldType().indexAnalyzer() == null
3622	includeDefaults
3623	includeDefaults
3623	hasDefaultIndexAnalyzer == false
3623	hasDifferentSearchQuoteAnalyzer
3623	hasDifferentSearchAnalyzer
3624	hasDifferentSearchQuoteAnalyzer
3624	includeDefaults
3624	hasDifferentSearchAnalyzer
3625	includeDefaults
3625	hasDifferentSearchQuoteAnalyzer
3626	includeDefaults
3626	defaultFieldType.hasDocValues() != fieldType().hasDocValues()
3627	fieldType.storeTermVectors()
3628	fieldType.storeTermVectorOffsets()
3628	fieldType.storeTermVectorPositions()
3629	fieldType.storeTermVectorPositions()
3629	fieldType.storeTermVectorOffsets()
3630	fieldType.storeTermVectorPositions()
3631	fieldType.storeTermVectorOffsets()
3632	fieldType.storeTermVectorPayloads()
4338	Strings.isEmpty(fieldName)
4339	queryBuilder == null
4340	token == XContentParser.Token.FIELD_NAME
4341	token == XContentParser.Token.START_OBJECT
4342	QUERY_FIELD.match(currentFieldName)
4343	query instanceof SpanQueryBuilder == false
4344	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4345	FIELD_FIELD.match(currentFieldName)
4346	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4347	inner == null
4348	field == null
4349	fieldType != null
8075	this == o
8076	o == null
8076	getClass() != o.getClass()
6243	analyzer != null
3271	fieldType().isEnabled() == false
3272	fieldType().indexOptions() != IndexOptions.NONE
3272	fieldType().stored()
3273	includeDefaults == false
3273	fieldType().isEnabled() == Defaults.ENABLED
3274	fieldType().isEnabled() != Defaults.ENABLED
3274	includeDefaults
1678	template.sortMode != null
1679	fieldName == null
1680	missing != null
1681	unmappedType != null
1682	sortMode != null
1683	nestedFilter != null
1684	nestedPath != null
1685	DOC_FIELD_NAME.equals(fieldName)
1686	order == SortOrder.DESC
1687	fieldType == null
1688	unmappedType != null
1689	sortMode != null
1690	localSortMode == null
1691	sortMode == SortMode.SUM
1691	sortMode == SortMode.MEDIAN
1691	fieldData instanceof IndexNumericFieldData == false
1691	sortMode == SortMode.AVG
1692	this == other
1693	other == null
1693	getClass() != other.getClass()
11504	docCount < 0
11504	maxDoc <= 0
11505	other.docCount == -1
11506	this.docCount != -1
11507	other.sumDocFreq == -1
11508	this.sumDocFreq != -1
11509	other.sumTotalTermFreq == -1
11510	this.sumTotalTermFreq != -1
11511	hasMinMax
11511	other.hasMinMax
11512	compare(minValue, min) > 0
11513	compare(maxValue, max) < 0
11514	hasMinMax
11515	out.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)
11516	hasMinMax
11517	hasMinMax == false
11518	constraint.getProperty() == IndexConstraint.Property.MIN
11519	constraint.getProperty() == IndexConstraint.Property.MAX
11520	this == o
11521	getClass() != o.getClass()
11521	o == null
11522	type != that.type
11523	maxDoc != that.maxDoc
11524	docCount != that.docCount
11525	sumDocFreq != that.sumDocFreq
11526	sumTotalTermFreq != that.sumTotalTermFreq
11527	isSearchable != that.isSearchable
11528	isAggregatable != that.isAggregatable
11529	hasMinMax != that.hasMinMax
11530	hasMinMax == false
11531	minValue.equals(that.minValue)
11532	in.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)
11533	hasMinMax
11534	hasMinMax
11535	hasMinMax
11536	hasMinMax
11537	hasMinMax == false
11538	hasMinMax == false
11473	fields == null
11474	indexConstraints == null
11475	"index_constraints".equals(fieldName)
11476	"fields".equals(fieldName)
11477	token.isValue()
11478	token == Token.FIELD_NAME
11479	token == Token.START_OBJECT
11480	fieldToken == Token.FIELD_NAME
11481	fieldToken == Token.START_OBJECT
11482	propertyToken.isValue()
11483	"format".equals(parser.currentName())
11484	propertyToken != Token.FIELD_NAME
11485	"indices".equals(level) == false
11485	"cluster".equals(level) == false
11486	fields == null
11486	fields.length == 0
11501	out.getVersion().before(Version.V_5_2_0_UNRELEASED)
11502	stats.hasMinMax() == false
11503	entry2.getValue().hasMinMax()
11503	out.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)
11500	out.getVersion().before(Version.V_5_2_0_UNRELEASED)
3514	types == null
3515	types.contains(type)
3516	MapperService.DEFAULT_MAPPING.equals(type)
3517	fieldType.equals(fullNameFieldType) == false
3518	updateAllTypes
3519	types.contains(type)
3519	types.size() == 1
3520	fieldType != null
3521	conflicts.isEmpty() == false
3522	types == null
3523	Regex.simpleMatch(pattern, fieldType.name())
7218	indexFieldData == null
7219	ordinal < 0
7219	ordinal >= values().length
5220	fieldName == null
5221	modifier == null
5222	missing != null
5223	fieldType == null
5224	missing == null
5225	token == XContentParser.Token.FIELD_NAME
5226	token.isValue()
5227	"field".equals(currentFieldName)
5228	"factor".equals(currentFieldName)
5229	"modifier".equals(currentFieldName)
5230	"missing".equals(currentFieldName)
5231	"factor".equals(currentFieldName)
5231	token == XContentParser.Token.START_OBJECT
5231	token == XContentParser.Token.START_ARRAY
5232	field == null
5233	missing != null
5464	requiredFields.remove(fieldInfo.name)
5465	fieldType == null
5466	SourceFieldMapper.NAME.equals(fieldInfo.name)
5467	UidFieldMapper.NAME.equals(fieldInfo.name)
5468	fieldsValues == null
5469	values.isEmpty()
5469	values == null
5470	fieldsValues != null
5471	loadSource
5472	fieldsValues == null
5473	values == null
8494	Files.exists(file)
8495	fileName == null
8496	strip-- > 0
8497	Files.isDirectory(subPath)
8498	Files.exists(directory)
8499	Files.isDirectory(directory)
8500	Files.isReadable(directory)
8501	"file".equals(protocol) == false
8501	"jar".equals(protocol) == false
8502	Strings.isEmpty(url.getHost()) == false
8503	url.getPort() != -1
1777	filter == null
1778	filter != null
11966	shardRouting.unassigned()
11967	RecoverySource.isInitialRecovery(shardRouting.recoverySource().getType())
11967	initialRecoveryFilters.match(node.node()) == false
11967	initialRecoveryFilters != null
11968	decision != null
11969	decision != null
11970	decision != null
11971	decision != null
11972	indexMd.requireFilters() != null
11973	indexMd.requireFilters().match(node.node())
11974	indexMd.includeFilters() != null
11975	indexMd.includeFilters().match(node.node())
11976	indexMd.excludeFilters() != null
11977	indexMd.excludeFilters().match(node.node())
11978	clusterRequireFilters != null
11979	clusterRequireFilters.match(node.node())
11980	clusterIncludeFilters != null
11981	clusterIncludeFilters.match(node.node())
11982	clusterExcludeFilters != null
11983	clusterExcludeFilters.match(node.node())
8315	Regex.simpleMatch(segment, name)
8315	doubleWildcard
8315	next != null
8315	simpleWildcard
8316	filters == null
8316	filters.isEmpty()
8317	filter != null
8318	filter.length() > 0
8319	c == '.'
8320	i < end
8320	segment.charAt(i) == '.'
8320	c == '\\'
8306	CollectionUtils.isEmpty(filters)
8307	filters != null
8308	next != null
8309	next.matches()
8310	nextFilters == null
8311	filter.isDoubleWildcard()
8312	nextFilters.isEmpty() == false
8312	nextFilters != null
8313	filter == MATCHING
8314	filter == NO_MATCHING
7330	docsEnumFlag != PostingsEnum.NONE
7330	docsEnumFlag != PostingsEnum.FREQS
7331	filter == null
7332	terms == null
7333	termsEnum == null
7334	weight != null
7335	scorer == null
7336	liveDocs != null
7337	anEnum.termsEnum.seekExact(text)
7338	anEnum.bits == null
7339	docsEnumFlag == PostingsEnum.FREQS
7340	leafTotalTermFreq == -1
7340	totalTermFreq == -1
7341	docsEnumFlag == PostingsEnum.FREQS
7342	anEnum.bits.get(docId) == false
7342	anEnum.bits != null
7343	anEnum.bits != null
7343	anEnum.bits.get(docId) == false
7344	docFreq > 0
1914	keyed
1915	keyed
1916	otherBucketKey == null
1917	keyed
1918	token == XContentParser.Token.FIELD_NAME
1919	token == XContentParser.Token.VALUE_BOOLEAN
1920	OTHER_BUCKET_FIELD.match(currentFieldName)
1921	token == XContentParser.Token.VALUE_STRING
1922	OTHER_BUCKET_KEY_FIELD.match(currentFieldName)
1923	token == XContentParser.Token.START_OBJECT
1924	FILTERS_FIELD.match(currentFieldName)
1925	token == XContentParser.Token.FIELD_NAME
1926	token == XContentParser.Token.START_ARRAY
1927	FILTERS_FIELD.match(currentFieldName)
1928	otherBucketKey != null
1928	otherBucket == null
1929	keyedFilters != null
1930	otherBucket != null
1931	otherBucketKey != null
1936	showOtherBucket
1937	showOtherBucket
1938	showOtherBucket
7220	ordinal >= values().length
7220	ordinal < 0
7221	rewritten != this
7222	newQ == subQuery
7223	needsScores == false
7223	minScore == null
7224	this == o
7225	sameClassAs(o) == false
6118	customSeparator == null
6119	customSeparator.length() == 1
9828	name.equals(ThreadPool.Names.BULK)
9828	name.equals(ThreadPool.Names.INDEX)
5780	flushStats == null
1232	fragInfo.getSubInfos().isEmpty()
1232	containsBrokenAnalysis(mapper.fieldType().indexAnalyzer())
1233	analyzer instanceof NamedAnalyzer
1234	analyzer instanceof CustomAnalyzer
1235	tokenFilterFactory instanceof EdgeNGramTokenFilterFactory
1235	tokenFilterFactory instanceof WordDelimiterTokenFilterFactory
7320	needDocFreq
7321	needTotalTermFreq
7322	currentTermOrd < 0
7323	needDocFreqs
7324	needTotalTermFreqs
7325	needDocFreqs
7326	needTotalTermFreqs
8636	attrs.isRegularFile()
8637	Files.isDirectory(blobPath)
8638	blobExists(blobName)
8634	paths.length == 0
8635	paths.length > 1
6283	IndexModule.Type.FS.match(storeType)
6284	IndexModule.Type.SIMPLEFS.match(storeType)
6285	IndexModule.Type.NIOFS.match(storeType)
6286	IndexModule.Type.MMAPFS.match(storeType)
6287	preLoadExtensions.isEmpty() == false
6287	((MMapDirectory) directory).getPreload() == false
6287	directory instanceof MMapDirectory
6288	preLoadExtensions.contains("*")
12752	in.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
12753	out.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
12754	subPath.path != null
12755	seenDevices.add(subPath.path)
12756	leastDiskEstimate != null
12757	mostDiskEstimate != null
12758	ioStats != null
12744	nodeEnv.hasNodeFile()
12745	Constants.LINUX
12746	dataLocations[i].minorDeviceNumber != -1
12746	dataLocations[i].majorDeviceNumber != -1
12747	clusterInfo != null
12748	previous != null
12748	previous.getIoStats().devicesStats != null
12748	previous.getIoStats() != null
12749	lines.isEmpty()
12750	devicesNumbers.contains(Tuple.tuple(majorDeviceNumber, minorDeviceNumber))
12751	bytes < 0
9707	location.isEmpty()
9708	locationFile == null
9709	environment.repoFiles().length > 0
9710	CHUNK_SIZE_SETTING.exists(metadata.settings())
9711	REPOSITORIES_CHUNK_SIZE_SETTING.exists(settings)
7213	rewritten != this
7214	newQ == subQuery
7215	needsScores == false
7215	minScore == null
7216	this == o
7217	sameClassAs(o) == false
5135	query == null
5136	filterFunctionBuilders == null
5137	filterFunctionBuilder == null
5138	scoreMode == null
5139	combineFunction == null
5140	query != null
5141	boostMode != null
5142	minScore != null
5143	query == null
5144	filterFunctions.length == 0
5144	this.filterFunctionBuilders[0].getFilter().getName().equals(MatchAllQueryBuilder.NAME)
5144	filterFunctions.length == 1
5145	combineFunction == null
5146	function != null
5147	queryBuilder != query
5147	rewritten
5148	token == XContentParser.Token.FIELD_NAME
5149	token == XContentParser.Token.START_OBJECT
5150	QUERY_FIELD.match(currentFieldName)
5151	query != null
5152	singleFunctionFound
5153	functionArrayFound
5154	token == XContentParser.Token.START_ARRAY
5155	FUNCTIONS_FIELD.match(currentFieldName)
5156	singleFunctionFound
5157	token.isValue()
5158	SCORE_MODE_FIELD.match(currentFieldName)
5159	BOOST_MODE_FIELD.match(currentFieldName)
5160	MAX_BOOST_FIELD.match(currentFieldName)
5161	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
5162	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
5163	MIN_SCORE_FIELD.match(currentFieldName)
5164	singleFunctionFound
5165	functionArrayFound
5166	WEIGHT_FIELD.match(currentFieldName)
5167	query == null
5168	combineFunction != null
5169	minScore != null
5170	token != XContentParser.Token.START_OBJECT
5171	token == XContentParser.Token.FIELD_NAME
5172	token == XContentParser.Token.START_OBJECT
5173	FILTER_FIELD.match(currentFieldName)
5174	scoreFunction != null
5175	token.isValue()
5176	WEIGHT_FIELD.match(currentFieldName)
5177	functionWeight != null
5178	scoreFunction == null
5179	filter == null
5180	scoreFunction == null
7115	toCancel != null
7821	fuzziness != 0
7821	fuzziness != 2
7821	fuzziness != 1
7822	fuzziness == null
7823	fuzziness instanceof Fuzziness
7824	AUTO.asString().equalsIgnoreCase(string)
7825	AUTO.asString().equalsIgnoreCase(fuzziness)
7826	includeFieldName
7827	this.equals(AUTO)
7828	len <= 2
7829	len > 5
7830	this.equals(AUTO)
7831	this == obj
7832	getClass() != obj.getClass()
7832	obj == null
980	this == o
981	getClass() != o.getClass()
981	o == null
982	editDistance != that.editDistance
983	transpositions != that.transpositions
984	fuzzyMinLength != that.fuzzyMinLength
985	fuzzyPrefixLength != that.fuzzyPrefixLength
986	unicodeAware != that.unicodeAware
4481	Strings.isEmpty(fieldName)
4482	value == null
4483	rewrite != null
4484	token == XContentParser.Token.FIELD_NAME
4485	parseContext.isDeprecatedSetting(currentFieldName)
4486	token == XContentParser.Token.START_OBJECT
4487	token == XContentParser.Token.FIELD_NAME
4488	token.isValue()
4489	TERM_FIELD.match(currentFieldName)
4490	VALUE_FIELD.match(currentFieldName)
4491	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4492	Fuzziness.FIELD.match(currentFieldName)
4493	PREFIX_LENGTH_FIELD.match(currentFieldName)
4494	MAX_EXPANSIONS_FIELD.match(currentFieldName)
4495	TRANSPOSITIONS_FIELD.match(currentFieldName)
4496	REWRITE_FIELD.match(currentFieldName)
4497	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4498	context.isFilter()
4498	rewrite == null
4499	fieldType != null
4500	query == null
4501	query instanceof MultiTermQuery
2121	other instanceof GND
2122	fxy == 0
2123	fx == fxy
2123	fx == fy
6386	nodesState.hasFailures()
6387	nodeState.metaData() == null
6388	electedGlobalState == null
6389	nodeState.metaData().version() > electedGlobalState.version()
6390	found < requiredAllocation
6391	keys[i] != null
6392	nodeState.metaData() == null
6393	indexMetaData == null
6394	electedIndexMetaData == null
6395	indexMetaData.getVersion() > electedIndexMetaData.getVersion()
6396	electedIndexMetaData != null
6397	indexMetaDataCount < requiredAllocation
6398	electedIndexMetaData.getState() == IndexMetaData.State.OPEN
6385	unassignedShard.primary()
6440	DiscoveryNode.isDataNode(settings)
6441	DiscoveryNode.isMasterNode(settings)
6441	DiscoveryNode.isDataNode(settings)
6442	DiscoveryNode.isDataNode(settings)
6442	DiscoveryNode.isMasterNode(settings)
6443	metaData != upgradedMetaData
6444	MetaData.isGlobalStateEquals(metaData, upgradedMetaData) == false
6445	metaData.hasIndexMetaData(indexMetaData) == false
6446	state.blocks().disableStatePersistence()
6447	state.nodes().getLocalNode().isMasterNode()
6447	state.nodes().getLocalNode().isDataNode()
6448	previousMetaData == null
6449	isDataOnlyNode(state)
6450	indexMetaData.getState().equals(IndexMetaData.State.CLOSE)
6451	indexMetaDataOnDisk != null
6452	previousMetaData == null
6452	MetaData.isGlobalStateEquals(previousMetaData, newMetaData)
6453	success
6454	isDataOnlyNode(state)
6455	state.nodes().getLocalNode().isMasterNode()
6456	Files.exists(stateLocation)
6457	logger.isTraceEnabled()
6458	name.startsWith("metadata-")
6459	upgradedCustoms.equals(existingCustoms) == false
6460	Files.exists(stateLocation)
6461	previousIndexMetaData == null
6461	previouslyWrittenIndices.contains(index) == false
6462	previousIndexMetaData.getVersion() != newIndexMetaData.getVersion()
6463	writeReason != null
6464	newRoutingNode == null
6465	previousMetaData != null
6466	previouslyWrittenIndices.contains(indexMetaData.getIndex())
6466	isOrWasClosed
6470	RECOVER_AFTER_TIME_SETTING.exists(this.settings)
6471	expectedNodes >= 0
6471	expectedMasterNodes >= 0
6471	expectedDataNodes >= 0
6472	RECOVER_AFTER_MASTER_NODES_SETTING.exists(this.settings)
6473	lifecycle.stoppedOrClosed()
6474	state.nodes().isLocalNodeElectedMaster() == false
6475	state.blocks().hasGlobalBlock(STATE_NOT_RECOVERED_BLOCK) == false
6476	state.nodes().getMasterNodeId() == null
6477	(nodes.getMasterAndDataNodes().size()) < recoverAfterNodes
6477	recoverAfterNodes != -1
6478	recoverAfterDataNodes != -1
6478	nodes.getDataNodes().size() < recoverAfterDataNodes
6479	nodes.getMasterNodes().size() < recoverAfterMasterNodes
6479	recoverAfterMasterNodes != -1
6480	expectedDataNodes == -1
6480	expectedNodes == -1
6480	expectedMasterNodes == -1
6481	expectedNodes != -1
6481	nodes.getMasterAndDataNodes().size() < expectedNodes
6482	nodes.getDataNodes().size() < expectedDataNodes
6482	expectedDataNodes != -1
6483	expectedMasterNodes != -1
6483	nodes.getMasterNodes().size() < expectedMasterNodes
6484	enforceRecoverAfterTime
6484	recoverAfterTime != null
6485	scheduledRecovery.compareAndSet(false, true)
6486	recovered.compareAndSet(false, true)
12827	"G1 Eden Space".equals(poolName)
12827	"Eden Space".equals(poolName)
12827	"Par Eden Space".equals(poolName)
12827	"PS Eden Space".equals(poolName)
12828	"G1 Survivor Space".equals(poolName)
12828	"Par Survivor Space".equals(poolName)
12828	"PS Survivor Space".equals(poolName)
12828	"Survivor Space".equals(poolName)
12829	"CMS Old Gen".equals(poolName)
12829	"PS Old Gen".equals(poolName)
12829	"Tenured Gen".equals(poolName)
12829	"G1 Old Gen".equals(poolName)
12830	"G1 Young Generation".equals(gcName)
12830	"PS Scavenge".equals(gcName)
12830	"ParNew".equals(gcName)
12830	"Copy".equals(gcName)
12831	"ConcurrentMarkSweep".equals(gcName)
12831	"G1 Old Generation".equals(gcName)
12831	"MarkSweepCompact".equals(gcName)
12831	"PS MarkSweep".equals(gcName)
4439	fieldName == null
4440	GeoValidationMethod.isIgnoreMalformed(validationMethod) == false
4441	Numbers.isValidDouble(top) == false
4442	Numbers.isValidDouble(left) == false
4443	Numbers.isValidDouble(bottom) == false
4444	Numbers.isValidDouble(right) == false
4445	top < bottom
4446	top == bottom
4447	left == right
4448	type == null
4449	GeoValidationMethod.isIgnoreMalformed(validationMethod)
4450	GeoUtils.isValidLatitude(topLeft.getLat()) == false
4451	GeoUtils.isValidLongitude(topLeft.getLon()) == false
4452	GeoUtils.isValidLatitude(bottomRight.getLat()) == false
4453	GeoUtils.isValidLongitude(bottomRight.getLon()) == false
4454	fieldType == null
4455	ignoreUnmapped
4456	fieldType instanceof GeoPointFieldType
4457	exception != null
4458	GeoValidationMethod.isCoerce(validationMethod)
4459	completeLonRange
4460	fieldType.hasDocValues()
4461	token == XContentParser.Token.FIELD_NAME
4462	token == XContentParser.Token.START_OBJECT
4463	token == XContentParser.Token.FIELD_NAME
4464	parseContext.isDeprecatedSetting(currentFieldName)
4465	FIELD_FIELD.match(currentFieldName)
4466	TOP_FIELD.match(currentFieldName)
4467	BOTTOM_FIELD.match(currentFieldName)
4468	LEFT_FIELD.match(currentFieldName)
4469	RIGHT_FIELD.match(currentFieldName)
4470	TOP_LEFT_FIELD.match(currentFieldName)
4471	BOTTOM_RIGHT_FIELD.match(currentFieldName)
4472	TOP_RIGHT_FIELD.match(currentFieldName)
4473	BOTTOM_LEFT_FIELD.match(currentFieldName)
4474	token.isValue()
4475	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4476	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4477	VALIDATION_METHOD_FIELD.match(currentFieldName)
4478	IGNORE_UNMAPPED_FIELD.match(currentFieldName)
4479	TYPE_FIELD.match(currentFieldName)
4480	validationMethod != null
2568	valuesSource != null
2569	valuesSource == null
2570	valuesSource == null
2800	valuesSource != null
2801	valuesSource == null
2802	valuesSource == null
2802	bucket >= centroids.size()
1033	config != null
1034	configPrecision != null
1035	configPrecision instanceof Integer
1036	configPrecision instanceof Long
1037	configPrecision instanceof Double
1038	configPrecision instanceof Float
1039	fieldName != null
1040	fieldName != null
1041	fieldName != null
1042	mapper instanceof GeoPointFieldMapper
1043	token == Token.START_ARRAY
1044	token == Token.VALUE_NUMBER
1045	parser.nextToken() == Token.VALUE_NUMBER
1046	parser.nextToken() == Token.END_ARRAY
1047	token == Token.VALUE_STRING
1048	fieldName != null
1049	fields.length == 0
1050	latFields.length > 0
1050	lonFields.length > 0
1051	lonField.fieldType().docValuesType() == DocValuesType.NONE
1052	field instanceof StringField
1053	queryContext.getNeighbours().isEmpty()
1053	geoHash.length() == this.precision
1054	queryContext.getNeighbours().isEmpty() == false
1055	this == o
1056	o == null
1056	getClass() != o.getClass()
1057	super.equals(o)
1058	precision != that.precision
2234	builder.origin() == null
2235	token == XContentParser.Token.VALUE_STRING
2236	token == XContentParser.Token.START_ARRAY
2237	Double.isNaN(lon)
2238	Double.isNaN(lat)
2239	token == XContentParser.Token.START_OBJECT
2240	token == XContentParser.Token.FIELD_NAME
2241	token == XContentParser.Token.VALUE_NUMBER
2242	"lat".equals(currentFieldName)
2243	"lon".equals(currentFieldName)
2244	Double.isNaN(lat)
2244	Double.isNaN(lon)
2245	token == XContentParser.Token.FIELD_NAME
2246	token == XContentParser.Token.VALUE_NUMBER
2247	Range.FROM_FIELD.match(toOrFromOrKey)
2248	Range.TO_FIELD.match(toOrFromOrKey)
2249	token == XContentParser.Token.VALUE_STRING
2250	Range.KEY_FIELD.match(toOrFromOrKey)
2251	Range.FROM_FIELD.match(toOrFromOrKey)
2252	Range.TO_FIELD.match(toOrFromOrKey)
2253	toAsStr != null
2253	fromAsStr != null
2254	origin == null
2255	range == null
2256	unit == null
2257	distanceType == null
4774	Strings.isEmpty(fieldName)
4775	point == null
4776	Strings.isEmpty(distance)
4777	unit == null
4778	newDistance <= 0.0
4779	Strings.isEmpty(geohash)
4780	geoDistance == null
4781	fieldType == null
4782	ignoreUnmapped
4783	fieldType instanceof GeoPointFieldType
4784	exception != null
4785	GeoValidationMethod.isCoerce(validationMethod)
4786	fieldType.hasDocValues()
4787	token == XContentParser.Token.FIELD_NAME
4788	parseContext.isDeprecatedSetting(currentFieldName)
4789	token == XContentParser.Token.START_ARRAY
4790	token == XContentParser.Token.START_OBJECT
4791	token == XContentParser.Token.FIELD_NAME
4792	token.isValue()
4793	currentName.equals("lat")
4794	currentName.equals("lon")
4795	currentName.equals("geohash")
4796	token.isValue()
4797	DISTANCE_FIELD.match(currentFieldName)
4798	token == XContentParser.Token.VALUE_STRING
4799	UNIT_FIELD.match(currentFieldName)
4800	DISTANCE_TYPE_FIELD.match(currentFieldName)
4801	currentFieldName.endsWith(".lat")
4802	currentFieldName.endsWith(".lon")
4803	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4804	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4805	IGNORE_UNMAPPED_FIELD.match(currentFieldName)
4806	VALIDATION_METHOD_FIELD.match(currentFieldName)
4807	fieldName == null
4808	vDistance == null
4809	vDistance instanceof Number
4810	validationMethod != null
4811	GeoValidationMethod.isIgnoreMalformed(validationMethod)
4812	GeoUtils.isValidLatitude(center.getLat()) == false
4813	GeoUtils.isValidLongitude(center.getLon()) == false
1640	points.length == 0
1641	geohashes.length == 0
1642	sortMode == SortMode.SUM
1643	sortMode != null
1644	nestedPath != null
1645	nestedFilter != null
1646	this == object
1647	object == null
1647	getClass() != object.getClass()
1648	token == XContentParser.Token.FIELD_NAME
1649	token == XContentParser.Token.START_ARRAY
1650	token == XContentParser.Token.START_OBJECT
1651	NESTED_FILTER_FIELD.match(currentName)
1652	fieldName != null
1652	fieldName.equals(currentName) == false
1653	token.isValue()
1654	ORDER_FIELD.match(currentName)
1655	UNIT_FIELD.match(currentName)
1656	DISTANCE_TYPE_FIELD.match(currentName)
1657	VALIDATION_METHOD_FIELD.match(currentName)
1658	SORTMODE_FIELD.match(currentName)
1659	NESTED_PATH_FIELD.match(currentName)
1660	token == Token.VALUE_STRING
1661	fieldName != null
1661	fieldName.equals(currentName) == false
1662	fieldName.equals(currentName)
1663	sortMode != null
1664	nestedFilter != null
1665	validation != null
1666	GeoValidationMethod.isIgnoreMalformed(validation) == false
1667	GeoUtils.isValidLatitude(point.lat()) == false
1668	GeoUtils.isValidLongitude(point.lon()) == false
1669	GeoValidationMethod.isCoerce(validation)
1670	sortMode == null
1671	fieldType == null
1672	geoIndexFieldData.getClass() == LatLonPointDVIndexFieldData.class
1672	unit == DistanceUnit.METERS
1672	reverse == false
1672	finalSortMode == MultiValueMode.MIN
1672	localPoints.length == 1
1672	nested == null
1673	parser.currentToken() == XContentParser.Token.VALUE_NUMBER
1674	parser.currentToken().equals(XContentParser.Token.VALUE_NUMBER)
1780	size <= 0
1781	shardSize <= 0
1782	shardSize < 0
1783	requiredSize <= 0
1783	shardSize <= 0
1784	shardSize < requiredSize
1785	shardSize > -1
1786	precision != other.precision
1787	requiredSize != other.requiredSize
1788	shardSize != other.shardSize
1789	spare == null
1790	collectsFromSingleBucket == false
1779	precision > 12
1779	precision < 1
8935	precision == level
8936	precision > level
8937	level == 1
8938	dy < 0
8938	y == 0
8938	dy > 0
8938	y == 3
8939	nx <= 7
8939	nx >= 0
8939	ny >= 0
8939	ny <= 3
8940	north != null
8941	south != null
9089	comma != -1
9090	field instanceof LatLonPoint
9091	field instanceof LatLonDocValuesField
9092	this == o
9093	getClass() != o.getClass()
9093	o == null
9094	Double.compare(geoPoint.lat, lat) != 0
9095	Double.compare(geoPoint.lon, lon) != 0
3461	gpfmMergeWith.ignoreMalformed.explicit()
3462	ignoreMalformed.value() == false
3463	point.lat() < -90.0
3463	point.lat() > 90.0
3464	point.lon() > 180.0
3464	point.lon() < -180
3465	fieldType().indexOptions() != IndexOptions.NONE
3466	fieldType().stored()
3467	fieldType.hasDocValues()
3468	multiFields.iterator().hasNext()
3469	sparse != null
3470	token == XContentParser.Token.START_ARRAY
3471	token == XContentParser.Token.START_ARRAY
3472	ignoreMalformed.value() == false
3473	token == XContentParser.Token.VALUE_NUMBER
3474	token == XContentParser.Token.VALUE_STRING
3475	ignoreMalformed.value() == false
3476	token == XContentParser.Token.VALUE_STRING
3477	token != XContentParser.Token.VALUE_NULL
3478	ignoreMalformed.value() == false
3479	point.indexOf(',') < 0
3480	ignoreMalformed.explicit()
3480	includeDefaults
4502	Strings.isEmpty(fieldName)
4503	points.isEmpty()
4503	points == null
4504	start.equals(points.get(points.size() - 1))
4505	points.size() < 4
4506	points.size() < 3
4507	shell.get(shell.size() - 1).equals(shell.get(0))
4508	fieldType == null
4509	ignoreUnmapped
4510	fieldType instanceof GeoPointFieldType
4511	GeoValidationMethod.isIgnoreMalformed(validationMethod)
4512	GeoUtils.isValidLatitude(point.lat())
4513	GeoUtils.isValidLongitude(point.lat())
4514	GeoValidationMethod.isCoerce(validationMethod)
4515	token == XContentParser.Token.FIELD_NAME
4516	parseContext.isDeprecatedSetting(currentFieldName)
4517	token == XContentParser.Token.START_OBJECT
4518	token == XContentParser.Token.FIELD_NAME
4519	token == XContentParser.Token.START_ARRAY
4520	POINTS_FIELD.match(currentFieldName)
4521	token.isValue()
4522	"_name".equals(currentFieldName)
4523	"boost".equals(currentFieldName)
4524	IGNORE_UNMAPPED_FIELD.match(currentFieldName)
4525	VALIDATION_METHOD.match(currentFieldName)
4526	validationMethod != null
4527	queryName != null
4528	boost != null
1059	this == o
1060	o == null
1060	getClass() != o.getClass()
1061	boost != that.boost
1062	precision != that.precision
1063	geoPoint.equals(that.geoPoint)
1063	geoPoint != null ? !geoPoint.equals(that.geoPoint) : that.geoPoint != null
1064	token == XContentParser.Token.START_OBJECT
1065	token == XContentParser.Token.VALUE_STRING
3669	shape == null
3670	shapeBuilder == null
3671	fieldType().pointsOnly()
3671	shape instanceof Point
3672	fields.length == 0
3672	fields == null
3673	fieldType.boost() != 1f
3673	Version.indexCreated(context.indexSettings()).before(Version.V_5_0_0_alpha1)
3673	customBoost()
3674	gsfm.coerce.explicit()
3675	includeDefaults
3675	fieldType().tree().equals(Defaults.TREE) == false
3676	fieldType().treeLevels() != 0
3676	includeDefaults
3677	fieldType().precisionInMeters() != -1
3677	includeDefaults
3678	includeDefaults
3678	fieldType().strategyName() != Defaults.STRATEGY
3679	includeDefaults
3679	fieldType().distanceErrorPct() != fieldType().defaultDistanceErrorPct
3680	fieldType().orientation() != Defaults.ORIENTATION
3680	includeDefaults
3681	fieldType().pointsOnly() != GeoShapeFieldMapper.Defaults.POINTS_ONLY
3681	includeDefaults
3682	includeDefaults
3682	coerce.explicit()
4695	fieldName == null
4696	shape == null
4696	indexedShapeId == null
4697	indexedShapeId != null
4697	indexedShapeType == null
4698	in.readBoolean()
4699	hasShape
4700	relation != ShapeRelation.INTERSECTS
4700	strategy == SpatialStrategy.TERM
4700	strategy != null
4701	relation == null
4702	relation != ShapeRelation.INTERSECTS
4702	strategy != null
4702	strategy == SpatialStrategy.TERM
4703	shape == null
4704	fieldType == null
4705	ignoreUnmapped
4706	fieldType instanceof GeoShapeFieldMapper.GeoShapeFieldType
4707	this.strategy != null
4708	strategy instanceof RecursivePrefixTreeStrategy
4708	relation == ShapeRelation.DISJOINT
4709	ShapesAvailability.JTS_AVAILABLE == false
4710	response.isExists()
4711	response.isSourceEmpty()
4712	currentToken == XContentParser.Token.FIELD_NAME
4713	pathElements[currentPathSlot].equals(parser.currentName())
4714	++currentPathSlot == pathElements.length
4715	strategy != null
4716	shape != null
4717	indexedShapeIndex != null
4718	indexedShapePath != null
4719	relation != null
4720	token == XContentParser.Token.FIELD_NAME
4721	token == XContentParser.Token.START_OBJECT
4722	fieldName != null
4723	token == XContentParser.Token.FIELD_NAME
4724	SHAPE_FIELD.match(currentFieldName)
4725	STRATEGY_FIELD.match(currentFieldName)
4726	strategy == null
4727	RELATION_FIELD.match(currentFieldName)
4728	shapeRelation == null
4729	INDEXED_SHAPE_FIELD.match(currentFieldName)
4730	token == XContentParser.Token.FIELD_NAME
4731	token.isValue()
4732	SHAPE_ID_FIELD.match(currentFieldName)
4733	SHAPE_TYPE_FIELD.match(currentFieldName)
4734	SHAPE_INDEX_FIELD.match(currentFieldName)
4735	SHAPE_PATH_FIELD.match(currentFieldName)
4736	token.isValue()
4737	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4738	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4739	IGNORE_UNMAPPED_FIELD.match(currentFieldName)
4740	shape != null
4741	index != null
4742	shapePath != null
4743	shapeRelation != null
4744	strategy != null
4745	queryName != null
4746	this.shape == null
8942	latitude < GeoUtils.MIN_LAT
8942	Double.isInfinite(latitude)
8942	Double.isNaN(latitude)
8942	latitude > GeoUtils.MAX_LAT
8943	longitude > GeoUtils.MAX_LON
8943	longitude < GeoUtils.MIN_LON
8943	Double.isNaN(longitude)
8943	Double.isNaN(longitude)
8944	meters == 0
8945	meters == 0
8946	part == 1
8947	lat < -90
8948	lat > 90
8949	normLat
8950	lonLat[1] < -90
8951	lonLat[1] > 90
8952	shift
8953	normLon
8954	normLon
8955	rtn <= 0
8956	rtn > divisor / 2
8957	parser.currentToken() == Token.START_OBJECT
8958	parser.currentToken() == Token.FIELD_NAME
8959	LATITUDE.equals(field)
8960	LONGITUDE.equals(field)
8961	GEOHASH.equals(field)
8962	parser.nextToken() == Token.VALUE_STRING
8963	geohash != null
8964	Double.isNaN(lon)
8964	Double.isNaN(lat)
8965	numberFormatException != null
8966	Double.isNaN(lat)
8967	Double.isNaN(lon)
8968	parser.currentToken() == Token.START_ARRAY
8969	parser.currentToken() == Token.VALUE_NUMBER
8970	element == 1
8971	element == 2
8972	parser.currentToken() == Token.VALUE_STRING
8973	comma > 0
8974	Math.abs(centerLat) == MAX_LAT
8975	lat >= r.minLat
8975	lat <= r.maxLat
8976	fromPoints.length == 1
8976	singleValues != null
8979	i < 0
8979	i >= this.shapes.size()
8980	shapes.size() == 1
8981	this == obj
8982	obj == null
8982	getClass() != obj.getClass()
5388	values.isEmpty()
5388	values != null
5389	this == o
5390	getClass() != o.getClass()
5390	o == null
10706	indexMapping == null
10707	typeMapping == null
10662	feature.validName(name)
10663	id >= FEATURES.length
10663	id < 0
10664	features == null
10665	this.features == DEFAULT_FEATURES
10655	mappings != null
10656	aliases != null
10657	settings != null
10524	names == null
10525	Strings.hasText(name)
10525	name == null
11449	ids == null
10947	repositories == null
10339	type == null
10340	id == null
10341	versionType.validateVersionForReads(version)
10342	versionType == VersionType.FORCE
10343	type == null
10287	this == o
10288	getClass() != o.getClass()
10288	o == null
5391	this.fields == null
5392	source == null
5393	sourceAsBytes != null
5394	source == null
5395	source == null
5396	source == null
5397	sourceAsMap != null
5398	fields == null
5399	fields.isEmpty()
5399	fields != null
5400	field.getValues().isEmpty()
5401	field.isMetadataField()
5402	source != null
5403	otherFields.isEmpty()
5404	isExists()
5405	version != -1
5406	token == XContentParser.Token.FIELD_NAME
5407	token.isValue()
5408	_INDEX.equals(currentFieldName)
5409	_TYPE.equals(currentFieldName)
5410	_ID.equals(currentFieldName)
5411	_VERSION.equals(currentFieldName)
5412	FOUND.equals(currentFieldName)
5413	token == XContentParser.Token.START_OBJECT
5414	SourceFieldMapper.NAME.equals(currentFieldName)
5415	FIELDS.equals(currentFieldName)
5416	exists
5417	source.length() == 0
5418	size == 0
5419	exists
5420	fields == null
5421	this == o
5422	getClass() != o.getClass()
5422	o == null
10766	names == null
10771	setting != null
11087	repository == null
5423	stats == null
5424	stats == null
11030	id == null
11030	id.isEmpty()
11031	id.contains("#")
11032	lang != null
11032	lang.contains("#")
11033	lang.isEmpty()
11019	in.readBoolean()
11020	in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
11021	source == null
11022	out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
10963	false == getTaskId().isSet()
1813	parent != null
1814	collectsFromSingleBucket == false
5789	node.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
5790	indexOfKey >= 0
5791	current < checkpoint
5792	logger.isTraceEnabled()
5793	inSyncLocalCheckpoints.isEmpty()
5794	cp.value == UNASSIGNED_SEQ_NO
5795	minCheckpoint < globalCheckpoint
5796	globalCheckpoint != minCheckpoint
5797	this.globalCheckpoint <= checkpoint
5798	inSyncLocalCheckpoints.containsKey(activeId) == false
5799	assignedAllocationIds.contains(allocationId) == false
5800	inSyncLocalCheckpoints.containsKey(allocationId)
2112	globalOrds == null
2113	bucketCountThresholds.getMinDocCount() == 0
2114	acceptedGlobalOrdinals.get(globalTermOrd)
2114	includeExclude != null
2115	bucketDocCount == 0
2115	bucketCountThresholds.getMinDocCount() > 0
2116	bucketDocCount < bucketCountThresholds.getShardMinDocCount()
2117	spare == null
1949	includeExclude != null
1949	acceptedGlobalOrdinals == null
1950	acceptedGlobalOrdinals != null
1951	to.bytes.length < from.length
1952	globalOrds == null
1953	bucketCountThresholds.getMinDocCount() == 0
1954	acceptedGlobalOrdinals.get(globalTermOrd)
1954	includeExclude != null
1955	bucketDocCount == 0
1955	bucketCountThresholds.getMinDocCount() > 0
1956	bucketCountThresholds.getShardMinDocCount() <= spare.docCount
1957	spare == null
11566	countDown.countDown()
11567	failure.get() != null
11568	failure.compareAndSet(null, e) == false
11569	countDown.countDown()
2768	state == null
2769	state == null
2759	state == null
2760	state == null
5014	minChildren < 0
5015	maxChildren < 0
5016	maxChildren < minChildren
5017	innerHitBuilder != null
5018	token == XContentParser.Token.FIELD_NAME
5019	parseContext.isDeprecatedSetting(currentFieldName)
5020	token == XContentParser.Token.START_OBJECT
5021	QUERY_FIELD.match(currentFieldName)
5022	INNER_HITS_FIELD.match(currentFieldName)
5023	token.isValue()
5024	TYPE_FIELD.match(currentFieldName)
5025	SCORE_MODE_FIELD.match(currentFieldName)
5026	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
5027	MIN_CHILDREN_FIELD.match(currentFieldName)
5028	MAX_CHILDREN_FIELD.match(currentFieldName)
5029	IGNORE_UNMAPPED_FIELD.match(currentFieldName)
5030	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
5031	innerHitBuilder != null
5032	"none".equals(scoreModeString)
5033	"min".equals(scoreModeString)
5034	"max".equals(scoreModeString)
5035	"avg".equals(scoreModeString)
5036	"sum".equals(scoreModeString)
5037	scoreMode == ScoreMode.Total
5038	childDocMapper == null
5039	ignoreUnmapped
5040	parentFieldMapper.active() == false
5041	parentDocMapper == null
5042	rewrittenQuery != query
5043	innerHitBuilder != null
4660	parentDocMapper == null
4661	ignoreUnmapped
4662	type.equals(parentFieldMapper.type())
4662	parentFieldMapper.active()
4663	childTypes.isEmpty()
4664	childTypes.size() == 1
4665	innerHit != null
4666	token == XContentParser.Token.FIELD_NAME
4667	token == XContentParser.Token.START_OBJECT
4668	QUERY_FIELD.match(currentFieldName)
4669	INNER_HITS_FIELD.match(currentFieldName)
4670	token.isValue()
4671	TYPE_FIELD.match(currentFieldName)
4672	SCORE_MODE_FIELD.match(currentFieldName)
4673	"score".equals(scoreModeValue)
4674	"none".equals(scoreModeValue)
4675	SCORE_FIELD.match(currentFieldName)
4676	IGNORE_UNMAPPED_FIELD.match(currentFieldName)
4677	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4678	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4679	innerHits != null
4680	rewrittenQuery != query
4681	innerHit!= null
6789	logger.isTraceEnabled()
6790	childSettings.getLimit() == -1
6791	childSettings.getOverhead() < 0
6792	totalUsed > parentLimit
6793	breakerSettings.getType() == CircuitBreaker.Type.NOOP
6794	oldBreaker == null
6795	breakers.replace(breakerSettings.getName(), oldBreaker, breaker)
1294	field.matchedFields != null
1295	highlighterBuilder.preTags != null
1296	highlighterBuilder.postTags != null
1297	highlighterBuilder.order != null
1298	highlighterBuilder.highlightFilter != null
1299	highlighterBuilder.fragmentSize != null
1300	highlighterBuilder.numOfFragments != null
1301	highlighterBuilder.requireFieldMatch != null
1302	highlighterBuilder.boundaryScannerType != null
1303	highlighterBuilder.boundaryMaxScan != null
1304	highlighterBuilder.boundaryChars != null
1305	highlighterBuilder.boundaryScannerLocale != null
1306	highlighterBuilder.highlighterType != null
1307	highlighterBuilder.fragmenter != null
1308	highlighterBuilder.noMatchSize != null
1309	highlighterBuilder.forceSource != null
1310	highlighterBuilder.phraseLimit != null
1311	highlighterBuilder.options != null
1312	highlighterBuilder.highlightQuery != null
1313	array == null
1314	encoder != null
1315	fields.size() > 0
1316	useExplicitFieldOrder
1317	useExplicitFieldOrder
1318	useExplicitFieldOrder
1319	useExplicitFieldOrder
1320	ordinal < 0
1320	ordinal >= values().length
1321	order.toUpperCase(Locale.ROOT).equals(SCORE.name())
1322	ordinal < 0
1322	ordinal >= values().length
1211	in.readBoolean()
1212	size == 0
1213	fragments == null
1214	token == XContentParser.Token.START_ARRAY
1215	token == XContentParser.Token.VALUE_NULL
1216	fragments == null
1217	this == obj
1218	getClass() != obj.getClass()
1218	obj == null
1219	context.highlight() == null
1220	Regex.isSimpleMatchPattern(field.field())
1221	context.highlight().forceSource(field)
1222	sourceFieldMapper.enabled()
1223	fieldMapper == null
1224	fieldNameContainsWildcards
1225	fieldMapper.fieldType().typeName().equals(KeywordFieldMapper.CONTENT_TYPE) == false
1225	fieldMapper.fieldType().typeName().equals(TextFieldMapper.CONTENT_TYPE) == false
1226	highlighterType == null
1227	highlighters.get(highlighterCandidate).canHighlight(fieldMapper)
1228	highlighter == null
1229	highlightQuery == null
1230	highlighter.canHighlight(fieldMapper) == false
1230	fieldNameContainsWildcards
1231	highlightField != null
1356	forceSource
1356	mapper.fieldType().stored()
1357	textsToHighlight == null
1875	in.readBoolean()
1876	hasOrder
1877	interval <= 0
1878	Double.isFinite(minBound) == false
1879	Double.isFinite(maxBound) == false
1880	maxBound < minBound
1881	order == null
1882	minDocCount < 0
1883	order != null
1884	Double.isFinite(minBound)
1884	Double.isFinite(maxBound)
1885	Double.isFinite(minBound)
1886	Double.isFinite(maxBound)
1887	token == XContentParser.Token.FIELD_NAME
1888	token == XContentParser.Token.VALUE_STRING
1889	"desc".equals(dir)
1889	asc
1890	"_key".equals(key)
1891	"_count".equals(key)
1828	interval <= 0
1829	valuesSource == null
1830	minDocCount == 0
1831	minDocCount == 0
1913	collectsFromSingleBucket == false
2276	values.size() == 0
2277	counter == 1
2278	obj == null
2279	getClass() != obj.getClass()
2287	text == null
2288	policy.parseField.match(text)
2289	result == null
2290	id == seasonalityType.id
2291	values.size() < period * 2
2292	Double.compare(s, 0.0) == 0
2292	Double.compare(s, -0.0) == 0
2293	seasonalityType.equals(SeasonalityType.MULTIPLICATIVE)
2294	seasonalityType.equals(SeasonalityType.MULTIPLICATIVE)
2295	seasonalityType.equals(SeasonalityType.MULTIPLICATIVE)
2296	obj == null
2297	getClass() != obj.getClass()
12799	"block".equals(type)
12799	"wait".equals(type)
12799	"cpu".equals(type)
12800	threadName.equals("Finalizer")
12800	threadName.equals("Reference Handler")
12800	threadName.equals("Signal Dispatcher")
12801	className.equals("java.util.concurrent.ThreadPoolExecutor")
12801	methodName.equals("getTask")
12802	methodName.equals("select")
12802	className.equals("sun.nio.ch.SelectorImpl")
12803	methodName.equals("run")
12803	className.equals("org.elasticsearch.threadpool.ThreadPool$EstimatedTimeThread")
12804	methodName.equals("await")
12804	className.equals("org.elasticsearch.indices.ttl.IndicesTTLService$Notifier")
12805	methodName.equals("poll")
12805	className.equals("java.util.concurrent.LinkedTransferQueue")
12806	threadBean.isThreadCpuTimeSupported() == false
12807	Thread.currentThread().getId() == threadId
12808	cpu == -1
12809	info == null
12810	Thread.currentThread().getId() == threadId
12811	cpu == -1
12812	info == null
12813	data != null
12814	"cpu".equals(type)
12815	"wait".equals(type)
12816	"block".equals(type)
12817	info != null
12817	info[t] != null
12818	ignoreIdleThreads
12818	isIdleThread(info[t])
12819	threadName == null
12820	done[i]
12821	done[j]
12822	similarity > maxSim
12823	similarity == maxSim
12824	similars[j]
12825	allInfos[i][t] != null
12826	count == 1
6242	escapedTags.length > 0
6917	HUNSPELL_LAZY_LOAD.get(settings)
6918	dictionary == null
6919	Files.isDirectory(hunspellDir)
6920	Files.isDirectory(file)
6921	inner.iterator().hasNext()
6922	logger.isDebugEnabled()
6923	FileSystemUtils.isAccessibleDirectory(dicDir, logger) == false
6924	affixFiles.length == 0
6925	affixFiles.length != 1
6926	Files.exists(file)
6927	Files.exists(file)
6058	locale == null
6059	dictionary == null
2576	precision < 4
2577	precision > 18
2578	p != other.p
2579	other.algorithm.get(otherBucket) == LINEAR_COUNTING
2580	algorithm.get(thisBucket) == LINEAR_COUNTING
2581	algorithm.get(thisBucket) != HYPERLOGLOG
2582	algorithm.get(bucket) == LINEAR_COUNTING
2583	newSize > hashSet.threshold
2584	algorithm.get(bucket) == LINEAR_COUNTING
2585	runLen == 0
2586	zeros != 0
2587	h <= threshold()
2588	(e & mask(P2 - p)) == 0
2589	(encoded & 1) == 1
2590	(encoded & 1) == 1
2591	Double.isInfinite(w)
2592	weights[j] >= w
2593	algorithm.get(bucket) == LINEAR_COUNTING
2594	algorithm.get(bucket) == LINEAR_COUNTING
2595	algorithm == LINEAR_COUNTING
6234	hyphenationPatternsPath == null
5721	distribution == null
5722	lambda == null
4747	types == null
4748	ids == null
4749	this.ids.isEmpty()
4750	types.length == 0
4751	MetaData.ALL.equals(types[0])
4751	types.length == 1
7909	logger.isDebugEnabled()
7910	nic.getName().equals(nic.getDisplayName())
7911	address.getAddress() instanceof Inet6Address == false
7912	address.getAddress() instanceof Inet6Address
7913	hardware != null
7914	i > 0
7915	address instanceof Inet6Address
7916	broadcast != null
7917	address.isLoopbackAddress()
7918	address.isLinkLocalAddress()
7919	address.isSiteLocalAddress()
7920	nic.isUp()
7921	nic.supportsMulticast()
7922	nic.isLoopback()
7923	nic.isPointToPoint()
7924	nic.isVirtual()
8421	this == o
8422	o == null
8422	getClass() != o.getClass()
8423	map.equals(that.map)
8418	this == o
8419	o == null
8419	getClass() != o.getClass()
8420	map.equals(that.map)
2036	include == null
2037	exclude == null
2038	include.isPartitionBased()
2039	includeMethod.equals(excludeMethod) == false
2040	include.isRegexBased()
2041	token == XContentParser.Token.VALUE_STRING
2042	token == XContentParser.Token.START_ARRAY
2043	token == XContentParser.Token.START_OBJECT
2044	token == XContentParser.Token.FIELD_NAME
2045	NUM_PARTITIONS_FIELD.match(currentFieldName)
2046	PARTITION_FIELD.match(currentFieldName)
2047	partition == null
2048	numPartitions == null
2049	token == XContentParser.Token.VALUE_STRING
2050	token == XContentParser.Token.START_ARRAY
2051	include == null
2051	exclude == null
2052	excludeValues == null
2052	includeValues == null
2053	partition < 0
2053	partition >= numPartitions
2054	in.readBoolean()
2055	in.readBoolean()
2056	in.readBoolean()
2057	in.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)
2058	regexBased
2059	hasIncludes
2060	hasExcludes
2061	out.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)
2062	values != null
2063	values != null
2064	values != null
2065	parser.currentToken() != XContentParser.Token.START_ARRAY
2066	parser.currentToken().isValue()
2067	include != null
2068	includeValues != null
2069	exclude != null
2070	excludeValues != null
2071	isRegexBased()
2072	isPartitionBased()
2073	endUserFormattedValues != null
2074	format != DocValueFormat.RAW
2075	isRegexBased()
2076	isPartitionBased()
2077	isPartitionBased()
2078	includeValues != null
2079	excludeValues != null
2080	isPartitionBased()
2081	includeValues != null
2082	excludeValues != null
2083	include != null
2084	includeValues != null
2085	isPartitionBased()
2086	exclude != null
2087	excludeValues != null
2088	obj == null
2089	getClass() != obj.getClass()
5474	ClusterState.UNKNOWN_UUID.equals(uuid)
5475	this == o
5476	o == null
1442	indexFieldTerm == null
5634	cache != null
5635	cache == null
5636	FIELDDATA_CACHE_VALUE_NODE.equals(cacheType)
5637	"none".equals(cacheType)
5638	listener == null
5639	this.listener != DEFAULT_NOOP_LISTENER
1424	postings == null
1425	fields != null
1426	terms != null
1427	termsEnum.seekExact(identifier.bytes())
1428	liveDocs != null
1429	currentDocPos < docId
1430	currentDocPos == docId
1431	doRecord
1432	(this.flags & flags2) < flags2
1433	(flags2 & IndexLookup.FLAG_FREQUENCIES) != 0
1434	(flags2 & IndexLookup.FLAG_POSITIONS) != 0
1435	(flags2 & IndexLookup.FLAG_OFFSETS) != 0
1436	(flags2 & IndexLookup.FLAG_PAYLOADS) != 0
1437	(flags2 & IndexLookup.FLAG_CACHE) != 0
1438	flagsString != null
7003	success
7004	indexMetaData != null
7005	needsUpgrade(index, indexFolderName)
7006	indexSettings.hasCustomDataPath()
7007	Files.exists(customLocationTarget) == false
7007	Files.exists(customLocationSource)
12354	tombstone.getIndex().equals(index)
9747	this == o
9748	o == null
9748	getClass() != o.getClass()
12355	proto == null
12356	id == 0
12357	id == 1
12358	"open".equals(state)
12359	"close".equals(state)
12360	maxNumShards < 1
12361	mapping != null
12362	this == o
12363	getClass() != o.getClass()
12363	o == null
12364	version != that.version
12365	aliases.equals(that.aliases)
12366	index.equals(that.index)
12367	mappings.equals(that.mappings)
12368	settings.equals(that.settings)
12369	state != that.state
12370	customs.equals(that.customs)
12371	routingNumShards != that.routingNumShards
12372	routingFactor != that.routingFactor
12373	Arrays.equals(primaryTerms, that.primaryTerms) == false
12374	inSyncAllocationIds.equals(that.inSyncAllocationIds)
12375	version != null
12376	versionUpgraded != null
12377	creationDate != null
12378	shardId >= numTargetShards
12379	sourceNumberOfShards < targetNumberOfShards
12380	factor <= 1
12380	factor * targetNumberOfShards != sourceNumberOfShards
11871	initializedShard.primary()
11872	unassignedInfo.getReason() != UnassignedInfo.Reason.NODE_LEFT
11872	failedShard.active()
11873	failedShard.primary()
11874	updates.firstFailedPrimary == null
11875	failedShard.active()
11875	failedShard.primary()
11876	indexMetaDataBuilder != null
11877	metaDataBuilder == null
11878	metaDataBuilder != null
11879	indexMetaDataBuilder == null
11880	emptyPrimary
11881	indexMetaDataBuilder != null
11882	metaDataBuilder == null
11883	metaDataBuilder != null
11884	updates.increaseTerm
11885	indexMetaDataBuilder == null
5695	setting == null
5696	setting == null
5697	listener == null
5698	indexEventListeners.contains(listener)
5699	listener == null
5700	searchOperationListeners.contains(listener)
5701	listener == null
5702	indexOperationListeners.contains(listener)
5703	storeTypes.containsKey(type)
5704	similarities.containsKey(name)
5704	SimilarityService.BUILT_IN.containsKey(name)
5705	this.frozen.compareAndSet(false, true)
5706	type.match(storeType)
12269	indexExpressions == null
12269	indexExpressions.length == 0
12270	indexExpressions.length == 1
12271	expressions.isEmpty()
12272	options.allowNoIndices()
12273	aliasOrIndex == null
12274	failNoIndices
12275	resolvedIndices.size() > 1
12275	options.allowAliasesToMultipleIndices()
12276	index.getState() == IndexMetaData.State.CLOSE
12277	failClosed
12278	options.forbidClosedIndices() == false
12279	index.getState() == IndexMetaData.State.OPEN
12280	options.allowNoIndices() == false
12280	concreteIndices.isEmpty()
12281	indices.length != 1
12282	isAllIndices(resolvedExpressions)
12283	resolvedExpressions.size() == 1
12284	indexMetaData == null
12285	filteringRequired
12286	alias.equals(index)
12287	indexMetaData == null
12288	aliasMetaData != null
12289	filteringRequired
12290	filteringAliases == null
12291	filteringAliases == null
12292	isAllIndices(resolvedExpressions)
12293	routing != null
12294	aliasOrIndex.isAlias()
12294	aliasOrIndex != null
12295	norouting.contains(concreteIndex)
12296	aliasMetaData.searchRoutingValues().isEmpty()
12297	routings == null
12298	r == null
12299	paramRouting != null
12300	r.isEmpty()
12301	norouting.contains(concreteIndex)
12302	paramRouting != null
12303	routings == null
12304	routings != null
12305	norouting.contains(expression)
12306	paramRouting != null
12307	routings == null
12308	routings != null
12309	routings.isEmpty()
12309	routings == null
12310	routing != null
12311	indicesOrAliases.length > 0
12311	concreteIndices.length == metaData.getConcreteAllIndices().length
12312	indicesOrAliases[0].charAt(0) == '-'
12313	Regex.isSimpleMatchPattern(indexOrAlias)
12314	Regex.simpleMatch(index, indexName)
10224	type == null
10225	source == null
10226	contentType == null
10227	opType() == OpType.CREATE
10228	versionType != VersionType.INTERNAL
10229	resolvedVersion != Versions.MATCH_DELETED
10230	id == null
10230	opType() != OpType.INDEX
10231	versionType.validateVersionForWrites(resolvedVersion)
10232	versionType == VersionType.FORCE
10233	id != null
10233	id.getBytes(StandardCharsets.UTF_8).length > 512
10234	resolvedVersion == Versions.MATCH_ANY
10234	id == null
10234	versionType == VersionType.INTERNAL
10235	routing != null
10235	routing.length() == 0
10236	source.length % 2 != 0
10237	source[0] instanceof BytesReference
10237	source[1] instanceof Boolean
10237	source.length == 2
10238	opType != OpType.INDEX
10238	opType != OpType.CREATE
10239	op.equals("create")
10240	op.equals("index")
10241	create
10242	opType == OpType.CREATE
10242	version == Versions.MATCH_ANY
10243	mappingMd != null
10244	routing == null
10244	mappingMd.routing().required()
10245	mappingMd.hasParentField()
10245	parent != null
10246	parent != null
10247	id == null
10248	in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
10249	in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
10250	out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
10251	out.getVersion().before(Version.V_5_1_2_UNRELEASED)
10252	out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
10253	source.length() > MAX_SOURCE_LENGTH_IN_TOSTRING
10222	CREATED.equals(currentFieldName)
10223	token.isValue()
11718	shardRouting.active()
11719	metaData.hasIndex(index.getName())
11720	indexMetaData.getIndexUUID().equals(index.getUUID()) == false
11721	indexMetaData.getNumberOfShards() != shards().size()
11722	routingNumberOfReplicas != indexMetaData.getNumberOfReplicas()
11723	shardRouting.index().equals(index)
11724	shardRouting.active()
11724	inSyncAllocationIds.contains(shardRouting.allocationId().getId()) == false
11725	inSyncAllocationIds.contains(shardRouting.allocationId().getId()) == false
11725	RecoverySource.isInitialRecovery(shardRouting.recoverySource().getType()) == false
11725	shardRouting.relocating() == false
11725	shardRouting.primary()
11725	shardRouting.initializing()
11726	shardRouting.assignedToNode()
11727	excludedNodes != null
11728	currentNodeId.equals(excludedNode)
11729	excluded
11730	shardRoutingTable.primaryShard().active()
11731	shardRoutingTable.primaryShard().unassigned()
11732	this == o
11733	o == null
11733	getClass() != o.getClass()
11734	index.equals(that.index)
11735	shards.equals(that.shards)
8766	setting.getKey().startsWith("index.") == false
5960	elasticsearchDirectoryReader == null
5961	reader != nonClosingReaderWrapper
5962	reader.getCoreCacheKey() != elasticsearchDirectoryReader.getCoreCacheKey()
5963	ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(reader) != elasticsearchDirectoryReader
5964	indexSearcher == innerIndexSearcher
5964	reader == nonClosingReaderWrapper
10727	lst == null
5723	indexShard == null
5724	closed.compareAndSet(false, true)
5725	count == 0
5726	closed.get()
5727	path == null
5728	curCount == null
5729	shards.containsKey(shardId.id())
5730	success == false
5731	lock != null
5732	shards.containsKey(shardId) == false
5733	indexShard != null
5734	store != null
5735	deleted.get()
5736	indexSettings.updateIndexMetaData(metadata)
5737	refreshTask.getInterval().equals(indexSettings.getRefreshInterval()) == false
5738	durability != oldTranslogDurability
5739	fsyncTask != null
5740	indexSettings.getTranslogDurability() == Translog.Durability.ASYNC
5741	translog.syncNeeded()
5742	indexSettings.getRefreshInterval().millis() > 0
5743	shard.isRefreshNeeded()
5744	shard.routingEntry().primary()
5273	version.equals(Version.indexCreated(newSettings)) == false
5274	newUUID.equals(getUUID()) == false
5275	existingSettings.filter(IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE).getAsMap().equals(newSettings.filter(IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE).getAsMap())
5864	IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.get(settings)
5865	IndexModule.INDEX_QUERY_CACHE_TERM_QUERIES_SETTING.get(settings) == false
5866	newTerm != primaryTerm
5867	newRouting.shardId().equals(shardId())
5868	newRouting.isSameAllocation(currentRouting)
5868	currentRouting == null
5869	newRouting.primary() == false
5869	currentRouting != null
5869	currentRouting.primary()
5870	state == IndexShardState.POST_RECOVERY
5870	newRouting.active()
5871	state == IndexShardState.RELOCATED
5871	newRouting.relocating() == false
5871	newRouting.equalsIgnoringMetaData(currentRouting) == false
5872	currentRouting.active() == false
5872	currentRouting != null
5872	newRouting.active()
5873	newRouting.equals(currentRouting) == false
5874	state == IndexShardState.CLOSED
5875	state == IndexShardState.STARTED
5876	state == IndexShardState.RELOCATED
5877	state == IndexShardState.RECOVERING
5878	state == IndexShardState.POST_RECOVERY
5879	docMapper.getMapping() != null
5880	logger.isTraceEnabled()
5881	logger.isTraceEnabled()
5882	canIndex()
5883	logger.isTraceEnabled()
5884	logger.isTraceEnabled()
5885	logger.isTraceEnabled()
5886	engine == null
5887	engine == null
5888	engine.isRecovering()
5889	engine.isRecovering()
5890	logger.isTraceEnabled()
5891	logger.isTraceEnabled()
5892	logger.isTraceEnabled()
5893	luceneVersion.onOrAfter(segment.getVersion())
5893	luceneVersion == null
5894	state == IndexShardState.RELOCATED
5894	state == IndexShardState.CLOSED
5894	state == IndexShardState.STARTED
5895	engine == null
5896	indexCommit != null
5897	success == false
5898	flushEngine
5898	engine != null
5899	state == IndexShardState.CLOSED
5900	state == IndexShardState.STARTED
5901	state == IndexShardState.RELOCATED
5902	state != IndexShardState.RECOVERING
5903	state != IndexShardState.RECOVERING
5904	indexExists == false
5905	state != IndexShardState.RECOVERING
5906	Booleans.isTrue(checkIndexOnStartup)
5907	indexExists == false
5908	skipTranslogRecovery
5909	openMode == EngineConfig.OpenMode.OPEN_INDEX_AND_TRANSLOG
5910	state != IndexShardState.RECOVERING
5911	readAllowedStates.contains(state) == false
5912	origin == Engine.Operation.Origin.PRIMARY
5913	writeAllowedStatesForPrimary.contains(state) == false
5914	origin.isRecovery()
5915	state != IndexShardState.RECOVERING
5916	writeAllowedStatesForReplica.contains(state) == false
5917	shardRouting.primary() == false
5918	shardRouting.primary()
5918	shardRouting.active()
5918	state != IndexShardState.RELOCATED
5919	state == IndexShardState.CLOSED
5920	suppressed != null
5921	state != IndexShardState.RELOCATED
5921	state != IndexShardState.STARTED
5922	engine == null
5923	engineOrNull != null
5923	System.nanoTime() - engineOrNull.getLastWriteNanos() >= inactiveTimeNS
5924	wasActive
5925	engine != null
5926	engine != null
5927	engineOrNull != null
5928	e instanceof AlreadyClosedException
5929	e instanceof RefreshFailedEngineException
5930	rfee.getCause() instanceof InterruptedException
5931	rfee.getCause() instanceof ClosedByInterruptException
5932	rfee.getCause() instanceof ThreadInterruptedException
5933	state != IndexShardState.CLOSED
5934	state != IndexShardState.CLOSED
5935	canIndex() == false
5936	getEngine().seqNoService().updateGlobalCheckpointOnPrimary()
5937	engine != null
5938	store.tryIncRef()
5939	Lucene.indexExists(store.directory())
5940	"checksum".equals(checkIndexOnStartup)
5941	corrupt != null
5942	status.clean
5943	state == IndexShardState.CLOSED
5944	"fix".equals(checkIndexOnStartup)
5945	logger.isDebugEnabled()
5946	logger.isDebugEnabled()
5947	logger.isDebugEnabled()
5948	engine == null
5949	sourceIndexService != null
5950	shard.state() == IndexShardState.STARTED
5951	numShards == startedShards.size()
5952	numShards == -1
5953	state == IndexShardState.CLOSED
5954	engine != null
5955	primaryTerm > opPrimaryTerm
5956	shouldFlush()
5956	shouldRollTranslogGeneration()
5957	flushOrRollRunning.compareAndSet(false, true)
5958	shouldFlush()
5959	shouldRollTranslogGeneration()
5813	closed
5814	semaphore.tryAcquire(TOTAL_PERMITS, timeout, timeUnit)
5815	queuedActions != null
5816	closed
5817	releasable == null
5818	delayedOperations == null
5819	executorOnDelay != null
5820	semaphore.tryAcquire(1, 0, TimeUnit.SECONDS)
5821	availablePermits == 0
12170	shard.primary()
12171	shard.active()
12172	shard.initializing()
12173	shard.relocating()
12174	shard.assignedToNode()
12175	shard.state() != ShardRoutingState.STARTED
12176	primary != null
12177	allInitializingShards.isEmpty()
12178	primaryAsList.get(0).active()
12178	primaryAsList.get(0).initializing()
12178	primaryAsList.isEmpty()
12179	noPrimariesActive()
12180	shardRouting.primary()
12181	allInitializingShards.isEmpty()
12182	noPrimariesActive()
12183	replica.active()
12184	replica.initializing()
12185	noPrimariesActive()
12186	replica.active()
12187	allInitializingShards.isEmpty()
12188	nodeId.equals(shardRouting.currentNodeId())
12189	nodeId.equals(shardRouting.currentNodeId())
12190	selectedNodes.contains(shardRouting.currentNodeId())
12191	selectedNodes.contains(shardRouting.currentNodeId())
12192	ordered.isEmpty()
12193	nodeIds.contains(shardRouting.currentNodeId())
12194	allInitializingShards.isEmpty()
12195	this == o
12196	getClass() != o.getClass()
12196	o == null
12197	shardId.equals(that.shardId)
12198	shards.equals(that.shards)
12199	shardRoutings == null
12200	shardRoutings == null
12201	localAttributeValue != null
12202	discoveryNode == null
12203	localAttributeValue.equals(discoveryNode.getAttributes().get(attribute))
12204	shardEntry.state() == state
12205	state == ShardRoutingState.INITIALIZING
12206	shardEntry.state() == state
10801	total != null
10802	primary != null
10803	shard.getShardRouting().primary()
10839	indexShards != null
10840	lst == null
10841	total != null
10842	primary != null
10843	shard.getShardRouting().primary()
12343	this == o
12344	o == null
12344	getClass() != o.getClass()
12345	order != that.order
12346	mappings.equals(that.mappings)
12347	name.equals(that.name)
12348	settings.equals(that.settings)
12349	patterns.equals(that.patterns)
12350	in.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
12351	in.getVersion().onOrAfter(Version.V_5_0_0_beta1)
12352	out.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
12353	out.getVersion().onOrAfter(Version.V_5_0_0_beta1)
10708	lst == null
6319	shard.state() == IndexShardState.CLOSED
6320	settings.isWarmerEnabled() == false
6321	logger.isTraceEnabled()
6322	shard.warmerService().logger().isTraceEnabled()
6796	indexingBufferSetting.endsWith("%")
6796	indexingBufferSetting == null
6797	indexingBuffer.getBytes() < minIndexingBuffer.getBytes()
6798	maxIndexingBuffer.getBytes() != -1
6798	indexingBuffer.getBytes() > maxIndexingBuffer.getBytes()
6799	shard.canIndex()
6799	CAN_WRITE_INDEX_BUFFER_STATES.contains(shard.state())
6800	result.hasFailure() == false
6314	result.hasFailure() == false
6315	tookInNanos > indexWarnThreshold
6315	indexWarnThreshold >= 0
6316	tookInNanos > indexInfoThreshold
6316	indexInfoThreshold >= 0
6317	indexDebugThreshold >= 0
6317	tookInNanos > indexDebugThreshold
6318	tookInNanos > indexTraceThreshold
6318	indexTraceThreshold >= 0
6000	indexingStats == null
6001	indexingStats.typeStats.isEmpty()
6001	includeTypes
6001	indexingStats.typeStats != null
6002	typeStats == null
6003	stats == null
6004	indexingStats == null
6005	typeStats.isEmpty()
6005	typeStats != null
6006	in.readBoolean()
6007	typeStats.isEmpty()
6007	typeStats == null
10541	indices == null
10542	aliases == null
10542	aliases.length == 0
10542	type != AliasActions.Type.REMOVE_INDEX
10543	indices.length == 0
10543	indices == null
10544	false == Strings.hasLength(index)
10545	false == Strings.hasLength(index)
10546	type == AliasActions.Type.REMOVE_INDEX
10547	aliases == null
10547	aliases.length == 0
10548	false == Strings.hasLength(alias)
10549	type == AliasActions.Type.REMOVE_INDEX
10550	false == Strings.hasLength(alias)
10551	type != AliasActions.Type.ADD
10552	type != AliasActions.Type.ADD
10553	type != AliasActions.Type.ADD
10554	type != AliasActions.Type.ADD
10555	filter == null
10555	filter.isEmpty()
10556	filter == null
10557	expandAliasesWildcards()
10558	obj == null
10558	obj.getClass() != getClass()
10559	allAliasActions.isEmpty()
6876	DiscoveryNode.isMasterNode(settings)
6876	DiscoveryNode.isDataNode(settings)
6877	DiscoveryNode.isMasterNode(settings)
6877	DiscoveryNode.isDataNode(settings)
6878	lifecycle.started()
6879	state.blocks().disableStatePersistence()
6880	localRoutingNode == null
6881	matchedRouting.isSameAllocation(failedShardRouting) == false
6881	matchedRouting == null
6882	masterNode != null
6883	localRoutingNode != null
6884	indicesWithShards.contains(index) == false
6885	localRoutingNode == null
6886	shardRouting.initializing() == false
6886	failedShardsCache.containsKey(shardId) == false
6886	indicesService.getShardOrNull(shardId) == null
6887	newShardRouting == null
6888	newShardRouting.isSameAllocation(currentRoutingEntry) == false
6889	currentRoutingEntry.active()
6889	newShardRouting.initializing()
6890	localRoutingNode == null
6891	failedShardsCache.containsKey(shardRouting.shardId()) == false
6892	indicesService.indexService(index) == null
6893	indexService.updateMapping(indexMetaData)
6893	sendRefreshMapping
6894	indexService == null
6895	event.metaDataChanged()
6896	ClusterChangedEvent.indexMetaDataChanged(currentIndexMetaData, newIndexMetaData)
6897	sendRefreshMapping
6897	indexService.updateMapping(newIndexMetaData)
6898	localRoutingNode != null
6899	failedShardsCache.containsKey(shardRouting.shardId()) == false
6899	shardRouting.index().equals(index)
6900	localRoutingNode == null
6901	failedShardsCache.containsKey(shardId) == false
6902	shard == null
6903	shardRouting.recoverySource().getType() == Type.PEER
6904	sourceNode == null
6905	shardRouting.primary()
6906	shardRouting.initializing()
6906	state == IndexShardState.STARTED
6906	state == IndexShardState.POST_RECOVERY
6907	logger.isTraceEnabled()
6908	nodes.getMasterNode() != null
6909	shardRouting.primary()
6910	primary.active()
6911	sourceNode == null
6912	shardRouting.relocatingNodeId() != null
6913	sourceNode == null
6914	indexService != null
6915	sendShardFailure
6916	failure != null
10674	indices == null
10674	indices.length == 0
6856	sizeInBytes > 0
6872	ShapesAvailability.JTS_AVAILABLE
6872	ShapesAvailability.SPATIAL4J_AVAILABLE
6873	mappers.put(entry.getKey(), entry.getValue()) != null
6874	entry.getKey().equals(FieldNamesFieldMapper.NAME)
6875	metadataMappers.put(entry.getKey(), entry.getValue()) != null
11550	id >= VALUES.length
11551	wildcardsString == null
11551	allowNoIndicesString == null
11551	ignoreUnavailableString == null
11552	wildcardsString == null
11553	"open".equals(wildcard)
11554	"closed".equals(wildcard)
11555	"none".equals(wildcard)
11556	"all".equals(wildcard)
11557	ignoreUnavailable
11558	allowNoIndices
11559	wildcardExpandToOpen
11560	wildcardExpandToClosed
11561	allowAliasesToMultipleIndices
11562	forbidClosedIndices
6801	INDICES_QUERIES_CACHE_ALL_SEGMENTS_SETTING.get(settings)
6802	info == null
6803	cache.getCacheSize() == 0
6804	stats == null
6713	expire != null
6714	cacheLoader.isLoaded()
6715	registeredClosedListeners.containsKey(cleanupKey)
6716	previous == null
6717	cleanupKey.readerVersion == -1
6717	cleanupKey.entity.isOpen() == false
6718	currentKeysToClean.isEmpty()
6718	currentFullClean.isEmpty()
6719	currentFullClean.contains(key.entity.getCacheIdentity())
6720	currentKeysToClean.contains(new CleanupKey(key.entity, key.readerVersion))
10728	indicesSegments != null
10729	shard.getShardRouting().getIndexName().equals(indexName)
10730	shardSegments.getShardRouting().relocatingNodeId() != null
10731	segment.getVersion() != null
10732	segment.isCompound() != null
10733	segment.getMergeId() != null
10734	segment.ramTree != null
10735	children.isEmpty() == false
6811	latch.await(shardsClosedTimeout.seconds(), TimeUnit.SECONDS) == false
6812	includePrevious
6813	indexShard.routingEntry() == null
6814	statsByShard.containsKey(indexService.index())
6815	lifecycle.started() == false
6816	indexService == null
6817	indexMetaData.getIndexUUID().equals(IndexMetaData.INDEX_UUID_NA_VALUE)
6818	hasIndex(index)
6819	success == false
6820	metaData.equals(metaDataUpdate) == false
6821	hasIndex(index) == false
6822	reason == IndexRemovalReason.DELETED
6823	nodeEnv.hasNodeFile()
6824	clusterState.metaData().hasIndex(indexName)
6825	nodeEnv.hasNodeFile()
6826	hasIndex(index)
6827	clusterState.nodes().getLocalNode().isMasterNode() == true
6827	clusterState.metaData().hasIndex(index.getName())
6828	predicate.apply(index, indexSettings)
6829	success == false
6830	shardDeletionCheckResult != ShardDeletionCheckResult.FOLDER_FOUND_CAN_DELETE
6831	clusterState.nodes().getLocalNode().isMasterNode() == false
6831	canDeleteIndexContents(shardId.getIndex(), indexSettings)
6832	nodeEnv.findAllShardIds(shardId.getIndex()).isEmpty()
6833	nodeEnv.hasNodeFile()
6833	indexService == null
6834	clusterState.metaData().index(index) != null
6835	nodeEnv.hasNodeFile()
6835	FileSystemUtils.exists(nodeEnv.indexPaths(index))
6836	nodeEnv.hasNodeFile()
6837	isAllocated
6838	indexSettings.hasCustomDataPath()
6839	shardId == null
6840	settings == null
6841	list == null
6842	remove.isEmpty() == false
6842	remove != null
6843	remove.isEmpty()
6844	delete.deleteIndex
6845	deleteList == null
6846	SearchType.QUERY_THEN_FETCH != context.searchType()
6847	request.requestCache() == null
6848	settings.getValue(IndicesRequestCache.INDEX_CACHE_REQUEST_ENABLED_SETTING) == false
6849	context.size() != 0
6850	request.requestCache() == false
6851	(context.searcher().getIndexReader() instanceof DirectoryReader) == false
6852	context.getQueryShardContext().isCachable() == false
6853	shard == null
6854	fieldType == null
6855	useCache == false
10749	"all".equalsIgnoreCase(statusString)
10736	in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
10737	in.readBoolean()
10738	out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
10739	storeException != null
10740	allocationId != null
10741	storeException != null
10742	storeException != null
10742	other.storeException == null
10743	other.storeException != null
10743	storeException == null
10744	allocationId != null
10744	other.allocationId == null
10745	allocationId == null
10745	other.allocationId != null
10746	other.allocationId == null
10746	allocationId == null
10747	compare == 0
10748	failures.size() > 0
10847	this.shardStatsMap == null
10848	indicesStats != null
10849	shard.getShardRouting().getIndexName().equals(indexName)
10850	total != null
10851	primary != null
10852	shard.getShardRouting().primary()
10853	isLevelValid
10854	"indices".equalsIgnoreCase(level)
10854	"shards".equalsIgnoreCase(level)
10855	"shards".equalsIgnoreCase(level)
6934	DiscoveryNode.isDataNode(settings)
6935	DiscoveryNode.isDataNode(settings)
6936	event.routingTableChanged()
6937	event.state().blocks().disableStatePersistence()
6938	routingTable.hasIndex(shardId.getIndex()) == false
6939	localRoutingNode != null
6940	shardCanBeDeleted(localNodeId, indexShardRoutingTable)
6940	folderNotFoundCache.contains(shardId) == false
6941	indexService == null
6942	indexShardRoutingTable.size() == 0
6943	shardRouting.started() == false
6944	localNodeId.equals(shardRouting.currentNodeId())
7877	c == '.'
7878	c == ':'
7879	hasDot
7880	Character.digit(c, 16) == -1
7881	hasColon
7882	hasDot
7883	ipString == null
7884	hasDot
7885	quad == null
7886	address.length != IPV4_PART_COUNT
7887	ipPart.startsWith("0")
7887	ipPart.length() > 1
7887	octet > 255
7888	parts.length < 3
7888	parts.length > IPV6_PART_COUNT + 1
7889	parts[i].length() == 0
7890	skipIndex >= 0
7891	skipIndex >= 0
7892	parts[0].length() == 0
7892	--partsHi != 0
7893	parts[parts.length - 1].length() == 0
7893	--partsLo != 0
7894	skipIndex >= 0 ? partsSkipped >= 1 : partsSkipped == 0
7895	hextet > 0xffff
7896	ip instanceof Inet6Address
7897	ip == null
7898	ip instanceof Inet4Address
7899	ip instanceof Inet6Address
7900	hextets[i] == 0
7900	i < hextets.length
7901	runStart < 0
7902	runStart >= 0
7903	runLength > bestRunLength
7904	bestRunLength >= 2
7905	thisIsNumber
7906	lastWasNumber
7907	lastWasNumber
7907	i == 0
7908	addr == null
11464	nodes.length == 0
9539	routing != null
9540	parent != null
9541	ignoreMissing
9541	hasField(path) != true
9542	object == null
9543	object instanceof byte[]
9544	object instanceof String
9545	context == null
9546	context instanceof Map
9547	context instanceof List
9548	index < 0
9548	index >= list.size()
9549	failOutOfRange
9550	context instanceof Map
9551	context instanceof List
9552	index >= 0
9552	index < list.size()
9553	failOutOfRange
9554	context instanceof Map
9555	map.containsKey(leafKey)
9556	context instanceof List
9557	index >= list.size()
9557	index < 0
9558	context == null
9559	context == null
9560	context instanceof Map
9561	map.containsKey(pathElement)
9562	context instanceof List
9563	index >= list.size()
9563	index < 0
9564	context == null
9565	context instanceof Map
9566	map.containsKey(pathElement)
9567	context instanceof List
9568	index >= list.size()
9568	index < 0
9569	context == null
9570	context instanceof Map
9571	append
9572	map.containsKey(leafKey)
9573	list != object
9574	context instanceof List
9575	index < 0
9575	index >= list.size()
9576	append
9577	newList != object
9578	maybeList instanceof List
9579	value instanceof List
9580	object == null
9581	clazz.isInstance(object)
9582	value instanceof Map
9583	value instanceof List
9584	value instanceof byte[]
9585	value instanceof String
9585	value instanceof Double
9585	value instanceof Float
9585	value instanceof Integer
9585	value == null
9585	value instanceof Boolean
9585	value instanceof Long
9586	value instanceof Date
9587	obj == this
9588	getClass() != obj.getClass()
9588	obj == null
9589	Strings.isEmpty(path)
9590	path.startsWith(INGEST_KEY_PREFIX)
9591	path.startsWith(SOURCE_PREFIX)
9592	pathElements[0].isEmpty()
9592	pathElements.length == 1
9535	this == o
9536	getClass() != o.getClass()
9536	o == null
9537	this == o
9538	getClass() != o.getClass()
9538	o == null
9515	processorFactories.put(entry.getKey(), entry.getValue()) != null
7624	converter.getTypeMatcher().matches(type)
7625	matchingConverter != null
10064	totalOps.incrementAndGet() == expectedTotalOps
10065	logger.isDebugEnabled()
10066	TransportActions.isShardNotAvailableException(e)
10066	e != null
10067	logger.isTraceEnabled()
10068	lastShard
10069	logger.isTraceEnabled()
10069	logger.isDebugEnabled()
10070	TransportActions.isShardNotAvailableException(e)
10070	e != null
10071	shard != null
10072	shard == null
10073	xTotalOps == expectedTotalOps
10074	xTotalOps > expectedTotalOps
7698	injector.membersInjectorStore.hasTypeListeners()
7698	instance == null
7698	injectionPoints.isEmpty()
7699	pendingInjection.isEmpty()
7631	inject != null
7632	inject.optional()
7633	injectableConstructor != null
7634	injectableConstructor != null
7635	Modifier.isPrivate(noArgConstructor.getModifiers())
7635	Modifier.isPrivate(rawType.getModifiers())
7636	errors.hasErrors()
7637	errors.hasErrors()
7638	misplacedBindingAnnotation == null
7639	member instanceof Method
7640	member.getDeclaringClass().getField(member.getName()) != null
7641	type.getType() == Object.class
7642	isStatic(member) != statics
7643	inject == null
7644	inject.optional()
7491	shellBuilder == null
7492	shell.getElements().isEmpty()
7493	binding.getScoping().isEagerSingleton(stage)
7719	binding != null
7720	binding != null
7721	membersInjectorType instanceof ParameterizedType
7722	providerType instanceof ParameterizedType
7723	stringBinding == null
7723	stringBinding.isConstant()
7724	matchingConverter == null
7725	converted == null
7726	type.getRawType().isInstance(converted)
7727	binding instanceof ConstructorBindingImpl<?>
7728	successful
7729	rawType.isArray()
7729	rawType.isEnum()
7730	rawType == TypeLiteral.class
7731	implementedBy != null
7732	providedBy != null
7733	Modifier.isAbstract(rawType.getModifiers())
7734	Classes.isInnerClass(rawType)
7735	scoping.isExplicitlyScoped()
7736	scopeAnnotation != null
7737	typeLiteralType instanceof ParameterizedType
7738	innerType instanceof ParameterizedType
7738	innerType instanceof GenericArrayType
7738	innerType instanceof Class
7739	providerType == rawType
7740	implementationType == rawType
7741	rawType.isAssignableFrom(implementationType)
7742	state.isBlacklisted(key)
7743	state.isBlacklisted(key)
7744	isProvider(key)
7745	isMembersInjector(key)
7746	convertedBinding != null
7747	key.hasAnnotationType()
7748	key.hasAttributes()
7749	parameters.isEmpty()
7750	reference == null
7751	reference[0] == null
4092	other.storedFieldsContext != null
4093	other.docValueFields != null
4094	other.scriptFields != null
4095	other.fetchSourceContext != null
4096	other.sorts != null
4097	other.childInnerHits != null
4098	name == null
4099	name == null
4100	in.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)
4101	in.readBoolean()
4102	in.readBoolean()
4103	in.readBoolean()
4104	out.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)
4105	hasScriptFields
4106	hasSorts
4107	hasChildInnerHits
4108	from < 0
4109	size < 0
4110	storedFieldsContext == null
4111	docValueFields == null
4112	docValueFields == null
4113	scriptFields == null
4114	sorts == null
4115	childInnerHits == null
4116	nestedPath != null
4117	nestedObjectMapper == null
4118	ignoreUnmapped == false
4119	childInnerHits != null
4120	parentChildType != null
4121	documentMapper == null
4122	ignoreUnmapped == false
4123	childInnerHits != null
4124	childInnerHit != null
4125	storedFieldsContext != null
4126	docValueFields != null
4127	scriptFields != null
4128	fetchSourceContext != null
4129	sorts != null
4130	optionalSort.isPresent()
4131	highlightBuilder != null
4132	childInnerHits.size() > 0
4133	name != null
4134	fetchSourceContext != null
4135	storedFieldsContext != null
4136	docValueFields != null
4137	scriptFields != null
4138	sorts != null
4139	highlightBuilder != null
4140	childInnerHits != null
4141	this == o
4142	o == null
4142	getClass() != o.getClass()
4143	query instanceof AbstractQueryBuilder
4144	original == null
1360	innerHits.containsKey(innerHit.getName())
1370	context.innerHits() != null
1370	context.innerHits().getInnerHits().size() > 0
1371	scoreDoc instanceof FieldDoc
7452	(indexInput.length() - indexInput.getFilePointer()) > limit
7453	b == null
7454	len > b.length - off
7454	len < 0
7454	off < 0
7455	indexInput.getFilePointer() >= indexInput.length()
7456	indexInput.getFilePointer() + len > indexInput.length()
7457	counter + len > limit
7458	len <= 0
7459	counter++ >= limit
8577	ch < 0
8578	len < 0
8579	read != len
6521	pluginId == null
6522	Files.exists(env.pluginsFile()) == false
6523	OFFICIAL_PLUGINS.contains(pluginId)
6524	stagingHash != null
6525	pluginId.contains("/") == false
6525	coordinates.length == 3
6526	pluginId.contains(":/") == false
6527	plugins.isEmpty() == false
6528	distance > 0.7f
6529	checksumReader.readLine() != null
6530	expectedChecksum.equals(gotChecksum) == false
6531	entry.getName().startsWith("elasticsearch/") == false
6532	targetFile.normalize().startsWith(target) == false
6533	Files.isSymbolicLink(targetFile.getParent())
6534	entry.isDirectory() == false
6535	hasEsDir == false
6536	elements.length >= 1
6536	elements[0].getMethodName().equals("setAttributeInternal")
6536	elements[0].getClassName().equals("com.google.common.jimfs.AttributeService")
6537	Files.exists(destination)
6538	MODULES.contains(info.getName())
6539	Files.exists(policy)
6540	jars.add(jar.toUri().toURL()) == false
6541	Files.exists(tmpBinDir)
6542	Files.exists(tmpConfigDir)
6543	Files.isDirectory(tmpBinDir) == false
6544	Files.isDirectory(srcFile)
6545	Files.isDirectory(tmpConfigDir) == false
6546	destConfigDirAttributes != null
6547	Files.isDirectory(srcFile)
6548	Files.exists(destFile) == false
6549	destConfigDirAttributes != null
6550	fileAttributeView != null
11635	index == null
11636	in.readBoolean()
1805	bucketMap == null
1806	sameRangeList == null
1807	reducedBucket.docCount >= 1
2265	reduceContext.isFinalReduce()
2266	size == Integer.MAX_VALUE
2267	params.paramAsBoolean(RestSearchAction.TYPED_KEYS_PARAM, false)
2268	this.metaData != null
2269	obj == null
2270	obj.getClass() != getClass()
3053	element instanceof MultiBucketAggregatorWrapper
2535	aggregationsAsMap == null
2536	aggregationsList.isEmpty()
2537	aggs == null
2538	aggregations.isEmpty()
2539	aggregations.isEmpty()
2540	obj == null
2540	getClass() != obj.getClass()
2571	count != 0
2571	format != DocValueFormat.RAW
2231	range.buckets.size() != buckets.size()
2232	keyed
2233	keyed
2385	path.isEmpty()
2386	path.size() == 1
2386	"value".equals(path.get(0))
2387	path.size() == 1
2387	"keys".equals(path.get(0))
2388	format != DocValueFormat.RAW
2388	hasValue
2600	in.readBoolean()
2601	counts != null
2602	cardinality.counts != null
2603	reduced == null
2604	reduced == null
12525	logger.isTraceEnabled()
12526	clusterService.state().getNodes().getDataNodes().size() > 1
12527	logger.isDebugEnabled()
12528	this.enabled
12529	addedNode.isDataNode()
12530	event.state().getNodes().getDataNodes().size() > 1
12530	this.isMaster
12530	dataNodeAdded
12531	logger.isDebugEnabled()
12532	this.isMaster
12532	event.nodesRemoved()
12533	removedNode.isDataNode()
12534	logger.isTraceEnabled()
12535	leastAvailableSpaceUsages.containsKey(removedNode.getId())
12536	mostAvailableSpaceUsages.containsKey(removedNode.getId())
12537	enabled
12538	logger.isTraceEnabled()
12539	logger.isTraceEnabled()
12540	logger.isTraceEnabled()
12541	nodeStats.getFs() == null
12542	leastAvailablePath == null
12543	leastAvailablePath.getAvailable().getBytes() > info.getAvailable().getBytes()
12544	mostAvailablePath.getAvailable().getBytes() < info.getAvailable().getBytes()
12545	logger.isTraceEnabled()
12546	leastAvailablePath.getTotal().getBytes() < 0
12547	logger.isTraceEnabled()
12548	mostAvailablePath.getTotal().getBytes() < 0
12549	logger.isTraceEnabled()
7504	constructionContext == null
1832	minDocCount == 0
1833	minDocCount == 0
1834	histogram.buckets.isEmpty() == false
1835	pq.size() > 0
1836	top.current.key != key
1837	reduceContext.isFinalReduce() == false
1837	reduced.getDocCount() >= minDocCount
1838	top.iterator.hasNext()
1839	currentBuckets.isEmpty() == false
1840	reduceContext.isFinalReduce() == false
1840	reduced.getDocCount() >= minDocCount
1841	bounds != null
1842	firstBucket == null
1843	bounds.getMin() != null
1843	bounds.getMax() != null
1844	bounds.getMin() != null
1845	key < firstBucket.key
1846	lastBucket != null
1847	lastBucket != null
1847	bounds.getMax() > lastBucket.key
1847	bounds != null
1847	bounds.getMax() != null
1848	minDocCount == 0
1849	reduceContext.isFinalReduce() == false
1849	order == InternalOrder.KEY_ASC
1850	order == InternalOrder.KEY_DESC
1851	keyed
1852	keyed
2528	path.isEmpty()
2529	"value".equals(path.get(0))
2529	path.size() == 1
2530	"normalized_value".equals(path.get(0))
2530	path.size() == 1
2531	normalizationFactor > 0
2532	format != DocValueFormat.RAW
2532	hasValue
5496	engineConfig.getIndexSettings().getIndexVersionCreated().before(Version.V_5_0_0_beta1)
5497	ExceptionsHelper.stackTrace(e).contains("org.apache.lucene.index.IndexWriter.filesExist")
5498	engineConfig.getRefreshListeners() != null
5499	success == false
5500	isClosed.get() == false
5501	openMode != EngineConfig.OpenMode.OPEN_INDEX_AND_TRANSLOG
5502	pendingTranslogRecovery.get() == false
5503	opsRecovered > 0
5504	translog.isCurrent(translogGeneration) == false
5505	openMode == EngineConfig.OpenMode.OPEN_INDEX_AND_TRANSLOG
5506	generation == null
5507	generation.translogUUID == null
5508	generation.translogUUID == null
5508	generation == null
5509	generation == null
5510	generation.translogUUID == null
5511	success == false
5512	commitUserData.containsKey("translog_id")
5513	commitUserData.containsKey(Translog.TRANSLOG_GENERATION_KEY)
5514	commitUserData.containsKey(Translog.TRANSLOG_UUID_KEY) == false
5515	success == false
5516	get.realtime()
5517	versionValue != null
5518	versionValue.isDelete()
5519	get.versionType().isVersionConflictForReads(versionValue.getVersion(), get.version())
5520	versionValue == null
5521	index.getAutoGeneratedIdTimestamp() != IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP
5522	operation.origin() == Operation.Origin.REPLICA
5522	operation.origin() == Operation.Origin.LOCAL_TRANSLOG_RECOVERY
5522	operation.origin() == Operation.Origin.PEER_RECOVERY
5523	origin == Operation.Origin.LOCAL_TRANSLOG_RECOVERY
5523	engineConfig.getIndexSettings().getIndexVersionCreated().before(Version.V_6_0_0_alpha1_UNRELEASED)
5524	origin == Operation.Origin.PRIMARY
5525	engineConfig.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
5526	origin == Operation.Origin.PRIMARY
5526	engineConfig.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
5527	canOptimizeAddDocument(index)
5527	mayHaveBeenIndexedBefore(index) == false
5528	opVsLucene == OpVsLuceneDocStatus.OP_STALE_OR_EQUAL
5529	canOptimizeAddDocument(index)
5530	mayHaveBeenIndexedBefore(index)
5531	versionValue == null
5532	index.versionType().isVersionConflictForWrites( currentVersion, index.version(), currentNotFoundOrDeleted)
5533	docs.size() > 1
5534	versionValue != null
5535	allowDeleted == false
5535	versionValue.isDelete() == false
5536	docsWithId > 0
5537	docs.size() > 1
5538	opVsLucene == OpVsLuceneDocStatus.OP_STALE_OR_EQUAL
5539	plan.currentlyDeleted == false
5540	indexWriter.getTragicException() == null
5541	engineConfig.isEnableGcDeletes()
5541	engineConfig.getThreadPool().relativeTimeInMillis() - lastDeleteVersionPruneTimeMSec > getGcDeletesInMillis() * 0.25
5542	seqNo != SequenceNumbersService.UNASSIGNED_SEQ_NO
5543	useRefresh
5544	indexWriter.hasUncommittedChanges()
5545	expectedCommitId.idsEqual(lastCommittedSegmentInfos.getId()) == false
5546	indexWriter.hasUncommittedChanges()
5547	expectedCommitId.idsEqual(lastCommittedSegmentInfos.getId()) == false
5548	indexWriter.hasUncommittedChanges()
5548	translog.totalOperations() == 0
5548	syncId != null
5549	renewed
5550	flushLock.tryLock() == false
5551	waitIfOngoing
5552	force
5552	indexWriter.hasUncommittedChanges()
5553	isClosed.get() == false
5554	Lucene.isCorruptionException(e)
5555	engineConfig.isEnableGcDeletes()
5556	versionValue != null
5557	timeMSec - versionValue.getTime() > getGcDeletesInMillis()
5558	upgrade
5559	onlyExpungeDeletes
5560	maxNumSegments <= 0
5561	flush
5562	tryRenewSyncCommit() == false
5563	upgrade
5564	flushFirst
5565	indexWriter.getTragicException() != null
5565	indexWriter.isOpen() == false
5566	indexWriter.getTragicException() instanceof Error
5567	translog.getTragicException() != null
5567	translog.isOpen() == false
5568	isClosed.get() == false
5568	failedEngine.get() == null
5569	shouldFail
5570	e instanceof AlreadyClosedException
5571	translog.isOpen() == false
5571	indexWriter.isOpen() == false
5571	indexWriter.getTragicException() == e
5571	translog.getTragicException() == e
5571	e != null
5572	segment.getName().equals(segmentInfoPerCommit.info.name)
5573	isClosed.compareAndSet(false, true)
5574	count == 1
5575	count == 0
5576	ExceptionsHelper.stackTrace(e).contains("org.apache.lucene.index.IndexWriter.filesExist")
5577	pendingTranslogRecovery.get()
5578	engineConfig.getMaxUnsafeAutoIdTimestamp() == Long.MAX_VALUE
2814	"sum_of_squares".equals(name)
2815	"variance".equals(name)
2816	"std_deviation".equals(name)
2817	"std_upper".equals(name)
2818	"std_lower".equals(name)
2819	bound.equals(Bounds.UPPER)
2820	stats.sigma != sigma
2821	count != 0
2821	format != DocValueFormat.RAW
1932	bucketMap == null
1933	bucketsList == null
1934	keyed
1935	keyed
2551	bounds.top > top
2552	bounds.bottom < bottom
2553	bounds.posLeft < posLeft
2554	bounds.posRight > posRight
2555	bounds.negLeft < negLeft
2556	bounds.negRight > negRight
2557	path.isEmpty()
2558	path.size() == 1
2559	path.size() == 2
2560	topLeft != null
2561	Double.isInfinite(top)
2562	Double.isInfinite(posLeft)
2563	Double.isInfinite(negLeft)
2564	wrapLongitude
2565	unwrappedWidth <= wrappedWidth
2566	boundingBox == null
2567	boundingBox == null
2803	in.readBoolean()
2804	centroid != null
2805	centroidAgg.count > 0
2806	Double.isNaN(lonSum)
2807	path.isEmpty()
2808	path.size() == 1
2809	centroid != null
1791	buckets == null
1792	existingBuckets == null
2761	state.getTotalCount() == 0
2762	percentileRank < 0
2763	percentileRank > 100
2758	state.getTotalCount() == 0
1894	minDocCount == 0
1895	minDocCount == 0
1896	histogram.buckets.isEmpty() == false
1897	pq.size() > 0
1898	top.current.key != key
1899	reduceContext.isFinalReduce() == false
1899	reduced.getDocCount() >= minDocCount
1900	top.iterator.hasNext()
1901	currentBuckets.isEmpty() == false
1902	reduced.getDocCount() >= minDocCount
1902	reduceContext.isFinalReduce() == false
1903	iter.hasNext() == false
1904	Double.isFinite(emptyBucketInfo.minBound)
1905	lastBucket != null
1906	minDocCount == 0
1907	order == InternalOrder.KEY_ASC
1907	reduceContext.isFinalReduce() == false
1908	order == InternalOrder.KEY_DESC
1909	keyed
1910	keyed
5978	types != null
5978	types.length > 0
5979	types.length == 1
5979	types[0].equals("_all")
5980	Regex.simpleMatch(types, entry.getKey())
5981	operation.origin().isRecovery()
5982	result.hasFailure() == false
5983	index.origin().isRecovery()
5984	index.origin().isRecovery()
5985	delete.origin().isRecovery()
5986	result.hasFailure() == false
5987	delete.origin().isRecovery()
5988	delete.origin().isRecovery()
5989	stats == null
5990	stats == null
2107	bucketMap == null
1944	bucketMap == null
2550	hasValue
2550	format != DocValueFormat.RAW
2541	format != DocValueFormat.RAW
2541	hasValue
2274	path.isEmpty()
2275	path.get(0).equals("_bucket_count")
2714	obj == null
2715	obj.getClass() != getClass()
1892	obj == null
1893	getClass() != obj.getClass()
2004	order == COUNT_DESC
2005	order instanceof CompoundOrder
2006	compoundOrder.orderElements.size() == 2
2006	compoundOrder.orderElements.get(1) == TERM_ASC
2006	compoundOrder.orderElements.get(0) == COUNT_DESC
2007	order == TERM_ASC
2008	order == TERM_DESC
2009	order instanceof CompoundOrder
2010	compoundOrder.orderElements.get(0) == TERM_DESC
2010	compoundOrder.orderElements.size() == 1
2010	compoundOrder.orderElements.get(0) == TERM_ASC
2011	order instanceof CompoundOrder
2012	order instanceof Aggregation
2013	obj == null
2014	getClass() != obj.getClass()
2394	index < 0
2395	format != DocValueFormat.RAW
2395	hasValue
3032	s.equals("")
3033	reason.equals(CollectorResult.REASON_AGGREGATION)
3033	reason.equals(CollectorResult.REASON_AGGREGATION_GLOBAL)
2259	keyed
2260	keyed
2716	aggregation.size() != 1
2717	reduceContext.isFinalReduce()
2717	firstAggregation.reduceScript != null
2718	firstAggregation.reduceScript.getParams() != null
2719	reduceContext.isFinalReduce()
2720	path.isEmpty()
2721	"value".equals(path.get(0))
2721	path.size() == 1
1611	profileResults == null
1612	aggregations != null
1613	suggest != null
1614	profileResults != null
1615	in.readBoolean()
1616	in.readBoolean()
1617	aggregations == null
1618	suggest == null
9779	Files.exists(path)
9780	settingsFileFound
9781	foundSuffixes.size() > 1
9782	setting.startsWith("force.")
9783	output.get(ClusterName.CLUSTER_NAME_SETTING.getKey()) == null
9784	Strings.hasLength(secretValue)
9785	Strings.hasLength(textValue)
9786	terminal == null
9787	secret
2108	existingBuckets == null
2109	b.score > 0
2109	reduceContext.isFinalReduce() == false
2109	b.subsetDf >= minDocCount
2468	format != DocValueFormat.RAW
2468	hasValue
1939	path.isEmpty()
1940	aggName.equals("_count")
1941	path.size() > 1
1942	aggregation == null
2823	count != 0
2823	format != DocValueFormat.RAW
2612	format != DocValueFormat.RAW
2786	percentileRank < 0
2787	percentileRank > 1
9504	mustacheStart != -1
9504	mustacheEnd != -1
9504	mustacheStart < mustacheEnd
1982	referenceTerms == null
1982	aggregation.getClass().equals(UnmappedTerms.class)
1983	referenceTerms != null
1983	terms.getClass().equals(UnmappedTerms.class)
1983	referenceTerms.getClass().equals(terms.getClass())
1984	InternalOrder.isTermOrder(order)
1984	terms.getBucketsInternal().size() < getShardSize()
1985	InternalOrder.isCountDesc(this.order)
1986	terms.getDocCountError() > 0
1987	sumDocCountError != -1
1988	thisAggDocCountError == -1
1989	bucketList == null
1990	sumDocCountError == -1
1991	reduceContext.isFinalReduce() == false
1991	b.docCount >= minDocCount
1992	removed != null
1993	sumDocCountError == -1
2694	reduceContext.isFinalReduce()
2695	topDocs instanceof TopFieldDocs
2696	path.isEmpty()
2697	from != other.from
2698	size != other.size
2699	topDocs.totalHits != other.topDocs.totalHits
2700	topDocs.scoreDocs.length != other.topDocs.scoreDocs.length
2701	thisDoc.doc != otherDoc.doc
2702	Double.compare(thisDoc.score, otherDoc.score) != 0
2703	thisDoc.shardIndex != otherDoc.shardIndex
2704	thisDoc instanceof FieldDoc
2705	false == (otherDoc instanceof FieldDoc)
2706	thisFieldDoc.fields.length != otherFieldDoc.fields.length
2707	false == thisFieldDoc.fields[f].equals(otherFieldDoc.fields[f])
2708	doc instanceof FieldDoc
3526	context.externalValueSet()
3527	addressAsObject == null
3528	addressAsObject == null
3529	addressAsObject instanceof InetAddress
3530	ignoreMalformed.value()
3531	context.includeInAll(includeInAll, this)
3532	fieldType().indexOptions() != IndexOptions.NONE
3533	fieldType().hasDocValues()
3534	fieldType().stored()
3535	other.ignoreMalformed.explicit()
3536	fieldType().nullValue() != null
3536	includeDefaults
3537	nullValue != null
3538	ignoreMalformed.explicit()
3538	includeDefaults
3539	includeInAll != null
3540	includeDefaults
2222	parser.currentToken() != Token.START_OBJECT
2223	parser.currentToken() == Token.FIELD_NAME
2224	RangeAggregator.Range.KEY_FIELD.match(parser.currentName())
2225	RangeAggregator.Range.FROM_FIELD.match(parser.currentName())
2226	RangeAggregator.Range.TO_FIELD.match(parser.currentName())
2227	MASK_FIELD.match(parser.currentName())
2228	mask != null
2229	key == null
2230	ip == null
7188	right instanceof Collection
7188	left instanceof Collection
7189	collection1.size() != collection2.size()
7190	leftIt.hasNext()
7191	rightIt.hasNext()
7192	Objects.equals(o1, o2)
7193	position < 0
7194	iterable instanceof List
7195	position >= list.size()
7196	it.hasNext()
7197	it.hasNext()
8401	iterators == null
2136	supersetSize == 0
2136	subsetSize == 0
2137	supersetFreq == 0
2138	absoluteProbabilityChange <= 0
2139	parser.nextToken().equals(XContentParser.Token.END_OBJECT)
2140	obj.getClass() != getClass()
2140	obj == null
3178	Constants.WINDOWS
3179	handler != null
3180	result
3221	result == 0
3222	Constants.LINUX
3222	Constants.MAC_OS_X
3223	JNACLibrary.getrlimit(JNACLibrary.RLIMIT_MEMLOCK, rlimit) == 0
3224	errno == JNACLibrary.ENOMEM
3225	rlimitSuccess
3226	Constants.LINUX
3227	Constants.LINUX
3228	JNACLibrary.getrlimit(rlimit_nproc, rlimit) == 0
3229	Constants.MAC_OS_X
3229	Constants.LINUX
3230	JNACLibrary.getrlimit(JNACLibrary.RLIMIT_AS, rlimit) == 0
3231	value == JNACLibrary.RLIM_INFINITY
3232	Constants.WINDOWS
3233	kernel.SetProcessWorkingSetSize(process, size, size)
3234	lockable
3235	process != null
3236	Constants.WINDOWS
3237	result
3238	ret == 1
3239	logger.isDebugEnabled()
3141	logger.isDebugEnabled()
3142	loader instanceof URLClassLoader
3143	element.isEmpty()
3144	"\\".equals(fileSeparator)
3144	element.startsWith("/")
3145	element.length() >= 3
3145	element.charAt(2) == ':'
3146	urlElements.add(url) == false
3147	path.startsWith(javaHome)
3148	path.toString().endsWith(".jar")
3149	seenJars.add(path)
3150	manifest != null
3151	entry.endsWith(".class")
3152	targetVersion != null
3153	targetESVersion.equals(systemESVersion) == false
3153	targetESVersion != null
3154	JavaVersion.isValid(targetVersion)
3155	JavaVersion.current().compareTo(version) < 0
3156	previous != null
3157	previous.equals(jarpath)
3158	clazz.startsWith("org.apache.xmlbeans")
3112	version.size() >= 2
3112	version.get(1) == 8
3112	version.get(0) == 1
3113	isValid(value)
3114	s < d
3115	s > d
3116	o == null
3116	o.getClass() != getClass()
8844	Strings.hasLength(input)
8845	input == null
8845	input.length() == 0
8846	"basicDate".equals(input)
8846	"basic_date".equals(input)
8847	"basicDateTime".equals(input)
8847	"basic_date_time".equals(input)
8848	"basic_date_time_no_millis".equals(input)
8848	"basicDateTimeNoMillis".equals(input)
8849	"basic_ordinal_date".equals(input)
8849	"basicOrdinalDate".equals(input)
8850	"basic_ordinal_date_time".equals(input)
8850	"basicOrdinalDateTime".equals(input)
8851	"basicOrdinalDateTimeNoMillis".equals(input)
8851	"basic_ordinal_date_time_no_millis".equals(input)
8852	"basicTime".equals(input)
8852	"basic_time".equals(input)
8853	"basic_time_no_millis".equals(input)
8853	"basicTimeNoMillis".equals(input)
8854	"basicTTime".equals(input)
8854	"basic_t_Time".equals(input)
8855	"basicTTimeNoMillis".equals(input)
8855	"basic_t_time_no_millis".equals(input)
8856	"basic_week_date".equals(input)
8856	"basicWeekDate".equals(input)
8857	"basicWeekDateTime".equals(input)
8857	"basic_week_date_time".equals(input)
8858	"basicWeekDateTimeNoMillis".equals(input)
8858	"basic_week_date_time_no_millis".equals(input)
8859	"date".equals(input)
8860	"date_hour".equals(input)
8860	"dateHour".equals(input)
8861	"dateHourMinute".equals(input)
8861	"date_hour_minute".equals(input)
8862	"date_hour_minute_second".equals(input)
8862	"dateHourMinuteSecond".equals(input)
8863	"dateHourMinuteSecondFraction".equals(input)
8863	"date_hour_minute_second_fraction".equals(input)
8864	"date_hour_minute_second_millis".equals(input)
8864	"dateHourMinuteSecondMillis".equals(input)
8865	"dateOptionalTime".equals(input)
8865	"date_optional_time".equals(input)
8866	"dateTime".equals(input)
8866	"date_time".equals(input)
8867	"date_time_no_millis".equals(input)
8867	"dateTimeNoMillis".equals(input)
8868	"hour".equals(input)
8869	"hourMinute".equals(input)
8869	"hour_minute".equals(input)
8870	"hourMinuteSecond".equals(input)
8870	"hour_minute_second".equals(input)
8871	"hourMinuteSecondFraction".equals(input)
8871	"hour_minute_second_fraction".equals(input)
8872	"hourMinuteSecondMillis".equals(input)
8872	"hour_minute_second_millis".equals(input)
8873	"ordinalDate".equals(input)
8873	"ordinal_date".equals(input)
8874	"ordinalDateTime".equals(input)
8874	"ordinal_date_time".equals(input)
8875	"ordinalDateTimeNoMillis".equals(input)
8875	"ordinal_date_time_no_millis".equals(input)
8876	"time".equals(input)
8877	"timeNoMillis".equals(input)
8877	"time_no_millis".equals(input)
8878	"tTime".equals(input)
8878	"t_time".equals(input)
8879	"tTimeNoMillis".equals(input)
8879	"t_time_no_millis".equals(input)
8880	"week_date".equals(input)
8880	"weekDate".equals(input)
8881	"weekDateTime".equals(input)
8881	"week_date_time".equals(input)
8882	"weekDateTimeNoMillis".equals(input)
8882	"week_date_time_no_millis".equals(input)
8883	"week_year".equals(input)
8883	"weekyear".equals(input)
8884	"weekyear_week".equals(input)
8884	"weekyearWeek".equals(input)
8885	"weekyearWeekDay".equals(input)
8885	"weekyear_week_day".equals(input)
8886	"year".equals(input)
8887	"yearMonth".equals(input)
8887	"year_month".equals(input)
8888	"yearMonthDay".equals(input)
8888	"year_month_day".equals(input)
8889	"epoch_second".equals(input)
8890	"epoch_millis".equals(input)
8891	"strict_basic_week_date".equals(input)
8891	"strictBasicWeekDate".equals(input)
8892	"strict_basic_week_date_time".equals(input)
8892	"strictBasicWeekDateTime".equals(input)
8893	"strict_basic_week_date_time_no_millis".equals(input)
8893	"strictBasicWeekDateTimeNoMillis".equals(input)
8894	"strict_date".equals(input)
8894	"strictDate".equals(input)
8895	"strictDateHour".equals(input)
8895	"strict_date_hour".equals(input)
8896	"strictDateHourMinute".equals(input)
8896	"strict_date_hour_minute".equals(input)
8897	"strictDateHourMinuteSecond".equals(input)
8897	"strict_date_hour_minute_second".equals(input)
8898	"strictDateHourMinuteSecondFraction".equals(input)
8898	"strict_date_hour_minute_second_fraction".equals(input)
8899	"strictDateHourMinuteSecondMillis".equals(input)
8899	"strict_date_hour_minute_second_millis".equals(input)
8900	"strict_date_optional_time".equals(input)
8900	"strictDateOptionalTime".equals(input)
8901	"strictDateTime".equals(input)
8901	"strict_date_time".equals(input)
8902	"strict_date_time_no_millis".equals(input)
8902	"strictDateTimeNoMillis".equals(input)
8903	"strict_hour".equals(input)
8903	"strictHour".equals(input)
8904	"strictHourMinute".equals(input)
8904	"strict_hour_minute".equals(input)
8905	"strict_hour_minute_second".equals(input)
8905	"strictHourMinuteSecond".equals(input)
8906	"strictHourMinuteSecondFraction".equals(input)
8906	"strict_hour_minute_second_fraction".equals(input)
8907	"strict_hour_minute_second_millis".equals(input)
8907	"strictHourMinuteSecondMillis".equals(input)
8908	"strictOrdinalDate".equals(input)
8908	"strict_ordinal_date".equals(input)
8909	"strict_ordinal_date_time".equals(input)
8909	"strictOrdinalDateTime".equals(input)
8910	"strictOrdinalDateTimeNoMillis".equals(input)
8910	"strict_ordinal_date_time_no_millis".equals(input)
8911	"strict_time".equals(input)
8911	"strictTime".equals(input)
8912	"strictTimeNoMillis".equals(input)
8912	"strict_time_no_millis".equals(input)
8913	"strict_t_time".equals(input)
8913	"strictTTime".equals(input)
8914	"strict_t_time_no_millis".equals(input)
8914	"strictTTimeNoMillis".equals(input)
8915	"strict_week_date".equals(input)
8915	"strictWeekDate".equals(input)
8916	"strict_week_date_time".equals(input)
8916	"strictWeekDateTime".equals(input)
8917	"strictWeekDateTimeNoMillis".equals(input)
8917	"strict_week_date_time_no_millis".equals(input)
8918	"strictWeekyear".equals(input)
8918	"strict_weekyear".equals(input)
8919	"strictWeekyearWeek".equals(input)
8919	"strict_weekyear_week".equals(input)
8920	"strictWeekyearWeekDay".equals(input)
8920	"strict_weekyear_week_day".equals(input)
8921	"strict_year".equals(input)
8921	"strictYear".equals(input)
8922	"strict_year_month".equals(input)
8922	"strictYearMonth".equals(input)
8923	"strictYearMonthDay".equals(input)
8923	"strict_year_month_day".equals(input)
8924	input.contains("||")
8924	Strings.hasLength(input)
8925	formats.length == 1
8926	dateTimeFormatter == null
7502	tokens.hasNext()
7503	entries.hasNext()
8149	jsonGenerator instanceof GeneratorBase
8150	hasExcludes
8151	hasIncludes
8152	hasIncludes
8152	hasExcludes
8153	isFiltered()
8154	delegate instanceof JsonGeneratorDelegate
8155	inRoot()
8156	inRoot()
8157	base != null
8158	content.markSupported() == false
8159	contentType == null
8160	mayWriteRawData(contentType) == false
8161	contentType == null
8162	mayWriteRawData(contentType) == false
8163	contentType == null
8164	mayWriteRawData(contentType) == false
8165	generator.getOutputContext().getCurrentName() != null
8166	parser.currentToken() == null
8167	parser instanceof JsonXContentParser
8168	generator.isClosed()
8169	context.inRoot() == false
8169	context != null
8170	writeLineFeedAtEnd
8136	currentToken().isValue()
8137	currentToken == JsonToken.VALUE_STRING
8138	currentToken == JsonToken.VALUE_NUMBER_FLOAT
8138	currentToken == JsonToken.VALUE_NUMBER_INT
8139	currentToken == JsonToken.VALUE_TRUE
8140	currentToken == JsonToken.VALUE_FALSE
8141	currentToken == JsonToken.VALUE_NULL
8142	currentToken == JsonToken.VALUE_STRING
8143	currentToken == JsonToken.VALUE_NUMBER_FLOAT
8143	currentToken == JsonToken.VALUE_NUMBER_INT
8144	currentToken == JsonToken.VALUE_TRUE
8145	currentToken == JsonToken.VALUE_FALSE
8146	currentToken == JsonToken.VALUE_NULL
8147	loc == null
8148	token == null
5460	UidFieldMapper.NAME.equals(fieldInfo.name)
12832	GC_OVERHEAD_WARN_SETTING.get(settings) <= GC_OVERHEAD_INFO_SETTING.get(settings)
12833	GC_OVERHEAD_INFO_SETTING.get(settings) <= GC_OVERHEAD_DEBUG_SETTING.get(settings)
12834	threshold == null
12835	threshold.nanos() <= 0
12836	enabled
12837	logger.isWarnEnabled()
12838	logger.isInfoEnabled()
12839	logger.isDebugEnabled()
12840	pool.getName().equals(currentPool.getName())
12841	logger.isWarnEnabled()
12842	logger.isInfoEnabled()
12843	logger.isDebugEnabled()
12844	enabled
12785	sm != null
12786	version.charAt(i) != '.'
12786	Character.isDigit(version.charAt(i))
12787	version.charAt(i) != '.'
12788	i == 0
12789	version.charAt(i) != '.'
12789	Character.isDigit(version.charAt(i))
12790	version.charAt(i) != '.'
12791	i == 0
12792	version.charAt(i) == '_'
12793	version.charAt(i + 1) == 'u'
12793	version.charAt(i) == '-'
12794	version.charAt(i) != '.'
12794	Character.isDigit(version.charAt(i))
12795	from == i
12849	(System.currentTimeMillis() - jvmStats.getTimestamp()) > refreshInterval.millis()
12796	name == null
12797	mem.getHeapUsedPercent() >= 0
12798	bufferPools != null
6266	arrayKeepTypes == null
6217	keepWordsPath == null
6217	arrayKeepWords != null
6217	arrayKeepWords == null
6217	keepWordsPath != null
6218	settings.get(ENABLE_POS_INC_KEY) != null
7649	annotation != null
7650	o == this
7651	o instanceof Key<?>
7652	annotationType.getMethods().length == 0
7653	Annotations.isRetainedAtRuntime(annotationType)
7654	isBindingAnnotation(annotationType)
7655	o instanceof AnnotationInstanceStrategy
7656	o instanceof AnnotationTypeStrategy
8655	Files.exists(keystoreFile) == false
8656	hasPasswordByte != 0
8656	hasPassword == false
8657	formatVersion >= 2
8658	formatVersion >= 2
8659	keystore.get() != null
8660	formatVersion == 1
8661	expectedSettings.remove(settingName) == false
8662	expectedSettings.isEmpty() == false
8663	attrs != null
8664	settingTypes.get(setting) != KeyType.STRING
8664	entry instanceof KeyStore.SecretKeyEntry == false
8665	settingTypes.get(setting) != KeyType.FILE
8665	entry instanceof KeyStore.SecretKeyEntry == false
8666	ASCII_ENCODER.canEncode(CharBuffer.wrap(value)) == false
8667	keystorePassword.get() != null
7158	perNodeLock == null
7159	perNodeLock == null
7160	i > 0
7160	perNodeLock.count.compareAndSet(i, i + 1)
7161	lock == null
7162	decrementAndGet == 0
3855	context.externalValueSet()
3856	parser.currentToken() == XContentParser.Token.VALUE_NULL
3857	value.length() > ignoreAbove
3857	value == null
3858	normalizer != null
3859	ts.incrementToken() == false
3860	ts.incrementToken()
3861	context.includeInAll(includeInAll, this)
3862	fieldType().indexOptions() != IndexOptions.NONE
3862	fieldType().stored()
3863	fieldType().hasDocValues()
3864	fieldType().nullValue() != null
3864	includeDefaults
3865	includeInAll != null
3866	includeDefaults
3867	ignoreAbove != Defaults.IGNORE_ABOVE
3867	includeDefaults
3868	fieldType().normalizer() != null
3869	includeDefaults
6244	patternString != null
6245	settings.get("keywords_path") != null
6245	settings.get("keywords") != null
6246	rules == null
6247	keywordPattern != null
767	token == XContentParser.Token.FIELD_NAME
768	ALPHA_FIELD.match(fieldName)
768	token.isValue()
2271	values instanceof ScorerAware
2272	values != null
1420	scriptValues == null
1421	fieldType == null
1422	scriptValues == null
1423	fieldType == null
1443	this.docId == docId
1444	data == null
1445	fieldType == null
1446	data.fields() == null
1413	numDocs == -1
1414	maxDoc == -1
1415	numDeletedDocs == -1
1416	this.docId == docId
1417	this.docId > docId
1418	indexField == null
1419	parentReader == null
6117	settings.get(ENABLE_POS_INC_KEY) != null
7752	localState == State.INITIALIZED
7752	localState == State.STOPPED
7753	localState == State.STARTED
7754	localState == State.CLOSED
7755	localState == State.STOPPED
7755	localState == State.INITIALIZED
7756	localState == State.STARTED
7757	localState == State.CLOSED
7758	localState == State.STARTED
7759	localState == State.INITIALIZED
7759	localState == State.STOPPED
7760	localState == State.CLOSED
7761	localState == State.STARTED
7762	localState == State.STOPPED
7762	localState == State.INITIALIZED
7763	localState == State.CLOSED
7764	localState == State.CLOSED
7765	localState == State.STARTED
7766	localState == State.CLOSED
7767	localState == State.STARTED
9038	coordinates.size() < 2
9039	start.x != end.x
9039	start.y != end.y
9040	wrapdateline
9041	strings.size() == 1
9042	Double.isNaN(t)
9043	t<1
9044	offset == 0
9045	offset < coordinates.length-1
9046	shift != 0
9047	this == obj
9048	obj == null
9048	getClass() != obj.getClass()
857	count < 1
858	count < 1
881	Math.abs(sum - 1.0) > 0.001
882	token == XContentParser.Token.FIELD_NAME
883	token.isValue()
884	TRIGRAM_FIELD.match(fieldName)
885	trigramLambda < 0
886	BIGRAM_FIELD.match(fieldName)
887	bigramLambda < 0
888	UNIGRAM_FIELD.match(fieldName)
889	unigramLambda < 0
2280	obj == null
2281	getClass() != obj.getClass()
8668	keystore == null
6572	Files.exists(env.pluginsFile()) == false
6573	e.getMessage().contains("incompatible with version")
10974	perNodeTasks == null
10975	groups == null
10976	parentTaskId.isSet()
10977	parentTask != null
10978	node != null
10979	node.getAttributes().isEmpty()
10980	getTaskFailures().size() > 0
10980	getTaskFailures() != null
10981	getNodeFailures().size() > 0
10981	getNodeFailures() != null
5579	mgr != null
5580	value != null
5581	value != null
5582	prev != null
5583	prev.isDelete() == false
5584	version.isDelete() == false
5585	version.isDelete()
5586	prev != null
5586	prev.isDelete()
5586	prevTombstone == null
5587	prevTombstone != null
5588	prev != null
5589	curVersion != null
5589	curVersion.isDelete()
5590	mgr != null
6469	masterNode == null
5801	localCheckpoint < 0
5801	localCheckpoint != SequenceNumbersService.NO_OPS_PERFORMED
5802	maxSeqNo != SequenceNumbersService.NO_OPS_PERFORMED
5802	maxSeqNo < 0
5803	seqNo >= nextSeqNo
5804	seqNo <= checkpoint
5805	seqNo == checkpoint + 1
5806	checkpoint == firstProcessedSeqNo + bitArraysSize - 1
5807	bitSetOffset > Integer.MAX_VALUE
5967	success == false
5968	closed.compareAndSet(false, true)
7055	"ROOT".equalsIgnoreCase(parts[0])
7988	configurations.isEmpty()
7989	ESLoggerFactory.LOG_DEFAULT_LEVEL_SETTING.exists(settings)
7990	key.equals(ESLoggerFactory.LOG_DEFAULT_LEVEL_SETTING.getKey())
7991	Node.NODE_NAME_SETTING.exists(settings)
8004	messagePattern == null
8005	argArray == null
8006	prefix == null
8007	prefix != null
8008	j == -1
8009	i == 0
8010	isEscapedDelimiter(messagePattern, j)
8011	isDoubleEscaped(messagePattern, j)
8012	delimiterStartIndex == 0
8013	potentialEscape == ESCAPE_CHAR
8014	delimiterStartIndex >= 2
8014	messagePattern.charAt(delimiterStartIndex - 2) == ESCAPE_CHAR
8015	o == null
8016	o.getClass().isArray()
8017	o instanceof boolean[]
8018	o instanceof byte[]
8019	o instanceof char[]
8020	o instanceof short[]
8021	o instanceof int[]
8022	o instanceof long[]
8023	o instanceof float[]
8024	o instanceof double[]
8025	seen.contains(a)
8026	i != len - 1
8027	i != len - 1
8028	i != len - 1
8029	i != len - 1
8030	i != len - 1
8031	i != len - 1
8032	i != len - 1
8033	i != len - 1
8034	i != len - 1
7992	Node.NODE_NAME_SETTING.exists(settings)
7993	prefixes != null
7993	prefixes.length > 0
7994	prefixes.length > 0
7994	prefixes != null
7995	prefixX != null
7996	prefixX.equals(SPACE)
7997	sb.length() > 0
7998	level == null
7999	LogManager.ROOT_LOGGER_NAME.equals(logger.getName())
8000	loggerConfig.getName().startsWith(logger.getName() + ".")
8000	LogManager.ROOT_LOGGER_NAME.equals(logger.getName())
8001	logger.getName().equals(loggerConfig.getName())
8002	logger.getName().equals(loggerConfig.getName())
8003	entry.getValue().getClass().equals(clazz)
7014	keys.get(id) == key
7014	id == -1
7015	curId == -1
7016	keys.get(curId) == key
7017	curId == -1
7018	size >= maxSize
7061	value == null
7062	keys.get(i) == key
7063	size >= maxSize
7064	previous == null
7065	keys.get(i) == key
7066	value == null
7067	previous == null
7068	key == keys.get(i)
2035	agg instanceof DoubleTerms
1994	bucketOrds.size() < bucketCountThresholds.getRequiredSize()
1994	bucketCountThresholds.getMinDocCount() == 0
1994	order != InternalOrder.COUNT_DESC
1995	longFilter == null
1995	longFilter.accept(value)
1996	spare == null
1997	bucketCountThresholds.getShardMinDocCount() <= spare.docCount
6054	lang == null
6055	lang.equalsIgnoreCase("greek")
6056	lang.equalsIgnoreCase("irish")
6057	lang.equalsIgnoreCase("turkish")
7388	version == null
7389	file.equals(IndexFileNames.OLD_SEGMENTS_GEN)
7389	file.startsWith(IndexFileNames.SEGMENTS)
7390	file.equals(si.getSegmentsFileName()) == false
7391	foundSegmentFiles == 0
7392	file.equals(IndexFileNames.OLD_SEGMENTS_GEN)
7392	file.startsWith(IndexFileNames.SEGMENTS)
7393	scorer == null
7394	liveDocs == null
7394	liveDocs.get(doc)
7395	type == 0
7396	type == 1
7397	type == 2
7398	type == 0
7399	type == 1
7400	type == 2
7401	type == 3
7402	type == 4
7403	type == 5
7404	type == 6
7405	type == 7
7406	type == 8
7407	type == 9
7408	type == 0
7409	type == 1
7410	type == 2
7411	type == 3
7412	type == 4
7413	type == 5
7414	type == 6
7415	type == 7
7416	type == 8
7417	type == 9
7418	topDocs instanceof CollapseTopFieldDocs
7419	topDocs instanceof TopFieldDocs
7420	missingValue == SortField.STRING_FIRST
7421	missingValue == SortField.STRING_LAST
7422	field == null
7423	type == String.class
7424	type == Integer.class
7425	type == Long.class
7426	type == Float.class
7427	type == Double.class
7428	type == Byte.class
7429	type == Short.class
7430	type == Boolean.class
7431	type == BytesRef.class
7432	scoreDoc.getClass().equals(ScoreDoc.class)
7433	in.readBoolean()
7434	missingValue != null
7435	sortField.getClass() == GEO_DISTANCE_SORT_TYPE_CLASS
7436	sortField.getClass() == SortedSetSortField.class
7437	sortField.getClass() == SortedNumericSortField.class
7438	sortField.getClass() != SortField.class
7439	sortField.getField() == null
7440	sortField.getComparatorSource() != null
7441	match
7442	explanation.isMatch()
7443	waited >= timeLimitMillis
7444	indexExists(directory)
7445	scorer == null
7446	twoPhase == null
6980	en != null
6981	nint.isLoopback()
6982	isValidAddress(address)
6983	address.length != 6
6983	address == null
6984	b != 0x00
6985	isValidAddress(address)
11140	this == o
11141	getClass() != o.getClass()
11141	o == null
3310	super.equals(o)
3311	fieldType.similarity == null
3311	similarity == null
3312	similarity != fieldType.similarity
3313	Objects.equals(similarity.name(), fieldType.similarity.name()) == false
3314	typeName().equals(other.typeName()) == false
3315	getClass() != other.getClass()
3316	tokenized() != other.tokenized()
3316	indexed != mergeWithIndexed
3317	stored() != other.stored()
3318	hasDocValues() != other.hasDocValues()
3319	omitNorms()
3319	other.omitNorms()
3320	storeTermVectors() != other.storeTermVectors()
3321	storeTermVectorOffsets() != other.storeTermVectorOffsets()
3322	storeTermVectorPositions() != other.storeTermVectorPositions()
3323	storeTermVectorPayloads() != other.storeTermVectorPayloads()
3324	indexAnalyzer() == null
3324	"default".equals(indexAnalyzer().name())
3325	"default".equals(other.indexAnalyzer().name()) == false
3325	other.indexAnalyzer() != null
3326	other.indexAnalyzer() == null
3326	"default".equals(other.indexAnalyzer().name())
3327	indexAnalyzer().name().equals(other.indexAnalyzer().name()) == false
3328	Objects.equals(similarity(), other.similarity()) == false
3329	strict
3330	omitNorms() != other.omitNorms()
3331	boost() != other.boost()
3332	Objects.equals(searchAnalyzer(), other.searchAnalyzer()) == false
3333	Objects.equals(searchQuoteAnalyzer(), other.searchQuoteAnalyzer()) == false
3334	Objects.equals(nullValue(), other.nullValue()) == false
3335	eagerGlobalOrdinals() != other.eagerGlobalOrdinals()
3336	nullValue == null
3337	fi == null
3338	terms == null
3339	hasDocValues() == false
3340	indexOptions() == IndexOptions.NONE
3340	pointDimensionCount() == 0
3341	format != null
3342	timeZone != null
3343	termQuery instanceof AllTermQuery
3344	termQuery instanceof TypeFieldMapper.TypesQuery
3345	termQuery instanceof TermQuery == false
145	settings.fieldsAndWeights().isEmpty()
146	settings.fieldsAndWeights().size() == 1
147	fuzzySlop.image.length() == 1
148	currentFieldType != null
149	termQuery != null
150	fieldQueryExtension != null
151	fields != null
152	fields.size() == 1
153	settings.useDisMax()
154	q != null
155	added
156	q != null
157	clauses.isEmpty()
158	quoted
158	queryText.length() > 1
159	queryText.charAt(0) == '>'
160	queryText.length() > 2
161	queryText.charAt(1) == '='
162	queryText.charAt(0) == '<'
163	queryText.length() > 2
164	queryText.charAt(1) == '='
165	quoted
166	settings.quoteFieldSuffix() != null
167	currentFieldType == null
168	currentFieldType != null
169	quoted
170	settings.forceQuoteAnalyzer()
171	settings.forceAnalyzer()
172	currentFieldType != null
173	currentFieldType.tokenized() == false
174	settings.lenient()
175	query == null
176	fields != null
177	settings.useDisMax()
178	q != null
179	added
180	q != null
181	clauses.isEmpty()
182	"*".equals(part1)
183	"*".equals(part2)
184	fields == null
185	fields.size() == 1
186	settings.useDisMax()
187	q != null
188	added
189	q != null
190	clauses.isEmpty()
191	currentFieldType != null
192	currentFieldType instanceof DateFieldMapper.DateFieldType
192	settings.timeZone() != null
193	settings.lenient()
194	fields != null
195	fields.size() == 1
196	settings.useDisMax()
197	q != null
198	added
199	q != null
200	currentFieldType != null
201	settings.lenient()
202	fields != null
203	fields.size() == 1
204	settings.useDisMax()
205	q != null
206	added
207	q != null
208	clauses.isEmpty()
209	currentFieldType != null
210	settings.forceAnalyzer()
211	currentFieldType instanceof StringFieldType == false
212	query == null
213	settings.lenient()
214	settings.analyzeWildcard()
215	source.incrementToken()
216	posAtt.getPositionIncrement() > 0
216	currentPos.isEmpty() == false
217	currentPos.isEmpty() == false
218	source != null
219	tlist.size() == 0
220	tlist.size() == 1
220	tlist.get(0).size() == 1
221	plist.size() == 1
222	isLastPos
223	isLastPos == false
224	termStr.equals("*")
224	field != null
225	"*".equals(field)
225	AllFieldMapper.NAME.equals(field)
226	actualField == null
227	fields != null
228	fields.size() == 1
229	settings.useDisMax()
230	q != null
231	added
232	q != null
233	clauses.isEmpty()
234	"*".equals(termStr)
235	currentFieldType != null
236	settings.forceAnalyzer()
237	settings.lenient()
238	fields != null
239	fields.size() == 1
240	settings.useDisMax()
241	q != null
242	added
243	q != null
244	clauses.isEmpty()
245	currentFieldType != null
246	settings.forceAnalyzer()
247	currentFieldType.tokenized() == false
248	query == null
249	settings.lenient()
250	q == null
251	fieldBoost != null
251	fieldBoost != 1f
252	q instanceof PhraseQuery
253	q instanceof MultiPhraseQuery
254	q instanceof SpanQuery
255	query instanceof SpanNearQuery
256	query instanceof SpanOrQuery
257	field != null
258	query.trim().isEmpty()
259	source.hasAttribute(DisableGraphAttribute.class)
3963	logger.isTraceEnabled()
3964	logger.isDebugEnabled()
3965	onlyUpdateIfNeeded
3966	existingMapper == null
3966	mappingMetaData.source().equals(existingMapper.mappingSource()) == false
3967	mappings.containsKey(DEFAULT_MAPPING)
3968	defaultMappingSource != null
3969	type.equals(DEFAULT_MAPPING)
3970	newMapper.mappingSource().equals(mappingSource) == false
3971	objectFullNames.add(fullPath) == false
3972	objectFullNames.contains(name)
3973	fieldNames.add(name) == false
3974	fullPathObjectMappers.containsKey(fieldName)
3975	fieldTypes.get(objectPath) != null
3976	existingObjectMapper != null
3977	objectMapper.nested().isNested()
3978	actualNestedFields > allowedNestedFields
3979	allowedTotalFields < totalMappers
3980	objectPath.charAt(i) == '.'
3981	depth > maxDepth
3982	indexSettings.getIndexMetaData().isRoutingPartitionedIndex()
3983	newMapper.parentFieldMapper().active()
3984	newMapper.routingFieldMapper().required()
3985	mapper != null
3986	dynamic
3987	Regex.isSimpleMatchPattern(pattern) == false
3988	type.equals("string")
3989	fieldType == null
3990	typeParser == null
3457	mergeInto == null
3458	updatedFieldMapper != currentFieldMapper
3459	updatedMeta == null
3460	updatedRoot == root
3460	updatedMeta == null
6258	rules == null
6259	m.find()
6260	lhs == null
6260	rhs == null
6261	c == '\\'
6262	readPos >= len
6263	readPos + 3 >= len
12483	mappingMap.size() != 1
12484	mapping.size() == 1
12484	mapping.containsKey(type)
12485	withoutType.containsKey("_routing")
12486	fieldName.equals("required")
12487	withoutType.containsKey("_parent")
12488	routing == Routing.EMPTY
12489	mapping.containsKey(type())
12489	mapping.size() == 1
12490	out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
12491	this == o
12492	o == null
12492	getClass() != o.getClass()
12493	routing.equals(that.routing)
12494	source.equals(that.source)
12495	type.equals(that.type)
12496	in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
12497	enabled
12736	type.equals(MapperService.DEFAULT_MAPPING)
12737	updateMappingRequest(index, type, mappingUpdate, timeout).get().isAcknowledged() == false
6594	logger.isDebugEnabled()
6595	masterPinger != null
6596	masterNode != null
6597	logger.isDebugEnabled()
6598	masterPinger != null
6599	node.equals(this.masterNode)
6600	connectOnNetworkDisconnect
6601	masterPinger != null
6602	notifiedMasterFailure.compareAndSet(false, true)
4529	token == XContentParser.Token.FIELD_NAME
4530	token.isValue()
4531	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4532	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
5046	fieldName == null
5047	value == null
5048	slop < 0
5049	maxExpansions < 0
5050	analyzer != null
5051	analyzer != null
5051	context.getIndexAnalyzers().get(analyzer) == null
5052	token == XContentParser.Token.FIELD_NAME
5053	parseContext.isDeprecatedSetting(currentFieldName)
5054	token == XContentParser.Token.START_OBJECT
5055	token == XContentParser.Token.FIELD_NAME
5056	token.isValue()
5057	MatchQueryBuilder.QUERY_FIELD.match(currentFieldName)
5058	MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName)
5059	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
5060	MatchPhraseQueryBuilder.SLOP_FIELD.match(currentFieldName)
5061	MAX_EXPANSIONS_FIELD.match(currentFieldName)
5062	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4880	Strings.isEmpty(fieldName)
4881	value == null
4882	slop < 0
4883	analyzer != null
4884	context.getIndexAnalyzers().get(analyzer) == null
4884	analyzer != null
4885	token == XContentParser.Token.FIELD_NAME
4886	parseContext.isDeprecatedSetting(currentFieldName)
4887	token == XContentParser.Token.START_OBJECT
4888	token == XContentParser.Token.FIELD_NAME
4889	token.isValue()
4890	MatchQueryBuilder.QUERY_FIELD.match(currentFieldName)
4891	MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName)
4892	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4893	SLOP_FIELD.match(currentFieldName)
4894	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4016	type.ordinal == ord
4017	zeroTermsQuery.ordinal == ord
4018	this.analyzer == null
4019	fieldType != null
4020	analyzer == null
4021	fieldType != null
4022	fieldType != null
4022	noForcedAnalyzer
4022	fieldType.tokenized() == false
4023	commonTermsCutoff == null
4024	query == null
4025	lenient
4026	zeroTermsQuery == DEFAULT_ZERO_TERMS_QUERY
4027	fuzziness != null
4028	fieldType != null
4029	query instanceof FuzzyQuery
4030	lenient
4031	fieldType != null
4032	query != null
4904	fieldName == null
4905	value == null
4906	type == null
4907	operator == null
4908	slop < 0
4909	prefixLength < 0
4910	maxExpansions <= 0
4911	zeroTermsQuery == null
4912	type != MatchQuery.Type.BOOLEAN
4913	analyzer != null
4914	slop != MatchQuery.DEFAULT_PHRASE_SLOP
4915	fuzziness != null
4916	minimumShouldMatch != null
4917	fuzzyRewrite != null
4918	cutoffFrequency != null
4919	analyzer != null
4919	context.getIndexAnalyzers().get(analyzer) == null
4920	token == XContentParser.Token.FIELD_NAME
4921	parseContext.isDeprecatedSetting(currentFieldName)
4922	token == XContentParser.Token.START_OBJECT
4923	token == XContentParser.Token.FIELD_NAME
4924	token.isValue()
4925	QUERY_FIELD.match(currentFieldName)
4926	TYPE_FIELD.match(currentFieldName)
4927	"boolean".equals(tStr)
4928	"phrase".equals(tStr)
4929	"phrasePrefix".equals(tStr)
4929	"phrase_prefix".equals(tStr)
4930	ANALYZER_FIELD.match(currentFieldName)
4931	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4932	SLOP_FIELD.match(currentFieldName)
4933	Fuzziness.FIELD.match(currentFieldName)
4934	PREFIX_LENGTH_FIELD.match(currentFieldName)
4935	MAX_EXPANSIONS_FIELD.match(currentFieldName)
4936	OPERATOR_FIELD.match(currentFieldName)
4937	MINIMUM_SHOULD_MATCH_FIELD.match(currentFieldName)
4938	FUZZY_REWRITE_FIELD.match(currentFieldName)
4939	FUZZY_TRANSPOSITIONS_FIELD.match(currentFieldName)
4940	LENIENT_FIELD.match(currentFieldName)
4941	CUTOFF_FREQUENCY_FIELD.match(currentFieldName)
4942	ZERO_TERMS_QUERY_FIELD.match(currentFieldName)
4943	"none".equalsIgnoreCase(zeroTermsDocs)
4944	"all".equalsIgnoreCase(zeroTermsDocs)
4945	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4946	value == null
4947	fuzziness != null
4948	cutOffFrequency != null
1366	hits.length == 0
1366	context.parsedQuery() == null
1367	context.parsedPostFilter() != null
1368	readerIndex != hitReaderIndex
1369	matchingDocs.get(hit.docId() - docBase)
7486	retention == null
7486	retention.value() != RetentionPolicy.RUNTIME
2546	valuesSource != null
2547	valuesSource == null
2548	valuesSource == null
2548	owningBucketOrd >= maxes.size()
2549	valuesSource == null
2549	bucket >= maxes.size()
2363	bucketsPaths.length != 1
2364	bucketValue > maxValue
2365	bucketValue.equals(maxValue)
11941	unassignedInfo != null
11941	unassignedInfo.getNumFailedAllocations() > 0
11942	allocation.isRetryFailed()
11943	unassignedInfo.getNumFailedAllocations() >= maxRetry
9125	count > 0
7626	instance == null
7628	this.delegate != null
7483	typeListener.getTypeMatcher().matches(type)
6678	idxMetaData.getCreationVersion().after(nodeVersion)
6679	idxMetaData.getCreationVersion().before(supportedIndexVersion)
7471	oldBreaker == null
7472	logger.isTraceEnabled()
7473	memoryBytesLimit == 0
7474	this.memoryBytesLimit == -1
7475	logger.isTraceEnabled()
7476	logger.isTraceEnabled()
7477	newUsedWithOverhead > memoryBytesLimit
7477	memoryBytesLimit > 0
7478	logger.isTraceEnabled()
5489	mergesEnabled == false
5490	logger.isTraceEnabled()
5491	segmentsPerTier >= maxMergeAtOnce
5492	newMaxMergeAtOnce <= 1
5493	noCFSRatio.equalsIgnoreCase("true")
5494	noCFSRatio.equalsIgnoreCase("false")
5495	value < 0.0
5495	value > 1.0
5364	maxThreadCount < 1
5365	maxMergeCount < 1
5366	maxThreadCount > maxMergeCount
5808	this.totalBytesPerSecAutoThrottle == Long.MAX_VALUE
5808	bytesPerSecAutoThrottle == Long.MAX_VALUE
5809	mergeStats == null
5810	mergeStats == null
5811	mergeStats.totalBytesPerSecAutoThrottle == Long.MAX_VALUE
5811	this.totalBytesPerSecAutoThrottle == Long.MAX_VALUE
7629	o instanceof Message
12381	aliasOrIndex != null
12382	thisIndex == null
12383	otherIndex.getAliases().equals(thisIndex.getAliases()) == false
12384	concreteIndices.length == 0
12385	Regex.simpleMatch(aliases, value.alias())
12385	matchAllAliases
12386	filteredValues.isEmpty()
12387	alias.equals(ALL)
12388	isAllTypes(types)
12389	Regex.simpleMatch(types, cursor.key)
12390	filteredMappings.isEmpty()
12391	aliasOrIndex == null
12392	result == null
12392	result.isAlias() == false
12393	result.getIndices().size() > 1
12394	aliasMd.indexRouting() != null
12395	aliasMd.indexRouting().indexOf(',') != -1
12396	routing != null
12397	routing.equals(aliasMd.indexRouting())
12398	routing == null
12399	metaData != null
12399	metaData.getIndexUUID().equals(index.getUUID())
12400	metaData != null
12401	metaData.getIndexUUID().equals(index.getUUID())
12402	indexMetaData != null
12403	mappingMetaData != null
12404	metaData1.persistentSettings.equals(metaData2.persistentSettings)
12405	metaData1.templates.equals(metaData2.templates())
12406	cursor.value.context().contains(XContentContext.GATEWAY)
12407	cursor.value.equals(metaData2.custom(cursor.key))
12408	cursor.value.context().contains(XContentContext.GATEWAY)
12409	customCount1 != customCount2
12410	out.getVersion().onOrAfter(cursor.value.getMinimalSupportedVersion())
12411	out.getVersion().onOrAfter(cursor.value.getMinimalSupportedVersion())
12427	index.toLowerCase(Locale.ROOT).equals(index)
12428	state.routingTable().hasIndex(index)
12429	state.metaData().hasIndex(index)
12430	state.metaData().hasAlias(index)
12431	Strings.validFileName(index)
12432	index.contains("#")
12433	index.charAt(0) == '-'
12433	index.charAt(0) == '_'
12433	index.charAt(0) == '+'
12434	byteCount > MAX_INDEX_NAME_BYTES
12435	index.equals(".")
12435	index.equals("..")
12436	Regex.simpleMatch(template, request.index())
12437	validationErrors.isEmpty() == false
12438	Strings.isEmpty(customPath) == false
12438	env.sharedDataFile() == null
12439	Strings.isEmpty(customPath) == false
12440	resolvedPath == null
12441	state.metaData().hasIndex(targetIndexName)
12442	sourceMetaData == null
12443	state.blocks().indexBlocked(ClusterBlockLevel.WRITE, sourceIndex) == false
12444	sourceMetaData.getNumberOfShards() == 1
12445	targetIndexMappingsTypes.contains(MapperService.DEFAULT_MAPPING)
12445	targetIndexMappingsTypes.isEmpty()
12445	targetIndexMappingsTypes.size() > 1
12446	IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.exists(targetIndexSettings)
12447	numAllocations == numShards
12448	nodesToAllocateOn.isEmpty()
12340	request.indices() == null
12340	request.indices().length == 0
12341	restoreInProgress != null
12342	updatedRestoreInProgress != restoreInProgress
12333	action.removeIndex()
12334	index == null
12335	changed
12336	action.removeIndex()
12337	index == null
12338	changed
12339	updatedState.metaData().equalsAliases(currentState.metaData())
12315	request.indices().length == 0
12315	request.indices() == null
12316	request.indices() == null
12316	request.indices().length == 0
12412	request.name == null
12413	request.indexPatterns == null
12414	createdIndex != null
12415	request.name.contains(" ")
12416	request.name.contains(",")
12417	request.name.contains("#")
12418	request.name.startsWith("_")
12419	request.name.toLowerCase(Locale.ROOT).equals(request.name)
12420	indexPattern.contains(" ")
12421	indexPattern.contains(",")
12422	indexPattern.contains("#")
12423	indexPattern.startsWith("_")
12424	Strings.validFileNameExcludingAstrix(indexPattern)
12425	validationErrors.isEmpty()
12426	request.indexPatterns.contains(alias.name())
12462	isUpgraded(indexMetaData)
12463	isSupportedVersion(indexMetaData, minimumIndexCompatibilityVersion) == false
12463	indexMetaData.getState() == IndexMetaData.State.OPEN
12464	upgrade != settings
12322	task.index == null
12323	indexMetaData == null
12324	indexMetaData.isSameUUID(task.indexUUID)
12325	hasTaskWithRightUUID == false
12326	indexService == null
12327	indexDirty
12328	removeIndex
12329	dirty
12330	mapper.mappingSource().equals(builder.mapping(type).source())
12331	updatedTypes.isEmpty() == false
6323	locations == null
6324	locations.length <= 0
6325	fileVersion == STATE_FILE_VERSION_ES_2X_AND_BELOW
6326	Files.exists(resolve)
6327	matcher.matches()
6328	dataLocations != null
6329	matcher.matches()
6330	pathAndStateId.legacy
6331	data.length == 0
6332	state == null
6333	files.size() > 0
12498	event.state().nodes().isLocalNodeElectedMaster()
12499	autoExpandReplicas.isEnabled()
12500	numberOfReplicas < min
12501	numberOfReplicas > max
12502	numberOfReplicas == indexMetaData.getNumberOfReplicas()
12503	numberOfReplicas >= min
12503	numberOfReplicas <= max
12504	nrReplicasChanged.containsKey(numberOfReplicas)
12505	nrReplicasChanged.size() > 0
12506	setting.isDynamic()
12507	setting.exists(openSettings)
12508	updateReadBlock
6356	globalMetaData != null
6357	indexMetaData != null
6358	excludeIndexPathIdsPredicate.test(indexFolderName)
6359	indexMetaData != null
6360	indexFolderName.equals(indexPathId)
9126	count == 0
2542	valuesSource != null
2543	valuesSource == null
2544	valuesSource == null
2544	owningBucketOrd >= mins.size()
2545	valuesSource == null
2545	bucket >= mins.size()
2360	bucketsPaths.length != 1
2361	bucketValue < minValue
2362	bucketValue.equals(minValue)
123	sameClassAs(obj) == false
7226	scorer instanceof ScoreCachingWrappingScorer == false
7345	scorer instanceof ScoreCachingWrappingScorer
7346	scorer.score() >= minimumScore
2221	valuesSource != null
7252	sameClassAs(obj) == false
7253	analyzer.equals(other.analyzer)
7254	boostTerms != other.boostTerms
7255	boostTermsFactor != other.boostTermsFactor
7256	Arrays.equals(likeText, other.likeText)
7257	maxDocFreq != other.maxDocFreq
7258	maxQueryTerms != other.maxQueryTerms
7259	maxWordLen != other.maxWordLen
7260	minDocFreq != other.minDocFreq
7261	minTermFrequency != other.minTermFrequency
7262	minWordLen != other.minWordLen
7263	Arrays.equals(moreLikeFields, other.moreLikeFields)
7264	minimumShouldMatch.equals(other.minimumShouldMatch)
7265	similarity == null
7266	other.similarity != null
7267	similarity.equals(other.similarity)
7268	stopWords == null
7269	other.stopWords != null
7270	stopWords.equals(other.stopWords)
7271	rewritten != this
7272	this.unlikeText != null
7272	this.unlikeFields != null
7273	this.likeFields != null
7274	this.likeText != null
7275	unlikeText != null
7276	unlikeFields != null
7277	skipTerms.isEmpty()
7278	similarity instanceof TFIDFSimilarity
7278	similarity == null
4949	fields != null
4949	fields.length == 0
4950	likeTexts == null
4950	likeItems.length == 0
4950	likeTexts.length == 0
4950	likeItems == null
4951	stopWords == null
4952	minimumShouldMatch == null
4953	fields != null
4954	stopWords != null
4955	analyzer != null
4956	token == XContentParser.Token.FIELD_NAME
4957	token.isValue()
4958	Field.LIKE.match(currentFieldName)
4959	Field.UNLIKE.match(currentFieldName)
4960	Field.LIKE_TEXT.match(currentFieldName)
4961	Field.MAX_QUERY_TERMS.match(currentFieldName)
4962	Field.MIN_TERM_FREQ.match(currentFieldName)
4963	Field.MIN_DOC_FREQ.match(currentFieldName)
4964	Field.MAX_DOC_FREQ.match(currentFieldName)
4965	Field.MIN_WORD_LENGTH.match(currentFieldName)
4966	Field.MAX_WORD_LENGTH.match(currentFieldName)
4967	Field.ANALYZER.match(currentFieldName)
4968	Field.MINIMUM_SHOULD_MATCH.match(currentFieldName)
4969	Field.BOOST_TERMS.match(currentFieldName)
4970	Field.INCLUDE.match(currentFieldName)
4971	Field.FAIL_ON_UNSUPPORTED_FIELD.match(currentFieldName)
4972	"boost".equals(currentFieldName)
4973	"_name".equals(currentFieldName)
4974	token == XContentParser.Token.START_ARRAY
4975	Field.FIELDS.match(currentFieldName)
4976	Field.LIKE.match(currentFieldName)
4977	Field.UNLIKE.match(currentFieldName)
4978	Field.IDS.match(currentFieldName)
4979	token.isValue()
4980	Field.DOCS.match(currentFieldName)
4981	token != XContentParser.Token.START_OBJECT
4982	Field.STOP_WORDS.match(currentFieldName)
4983	token == XContentParser.Token.START_OBJECT
4984	Field.LIKE.match(currentFieldName)
4985	Field.UNLIKE.match(currentFieldName)
4986	likeTexts.isEmpty()
4986	likeItems.isEmpty()
4987	fields != null
4987	fields.isEmpty()
4988	stopWords != null
4989	parser.currentToken().isValue()
4990	parser.currentToken() == XContentParser.Token.START_OBJECT
4991	texts.length > 0
4991	items.length > 0
4992	stopWords != null
4993	boostTerms != 0
4994	analyzerObj == null
4995	useDefaultField
4996	fieldType != null
4996	SUPPORTED_FIELD_TYPES.contains(fieldType.getClass()) == false
4997	failOnUnsupportedField
4998	moreLikeFields.isEmpty()
4999	likeTexts.length > 0
5000	unlikeTexts.length > 0
5001	likeItems.length > 0
5002	unlikeItems.length > 0
5003	unlikeFields.length > 0
5004	include
5005	item.index() == null
5006	item.type() == null
5007	context.queryTypes().size() > 1
5008	item.fields() == null
5008	item.doc() == null
5008	item.fields().length == 0
5009	useDefaultField
5010	response.isFailed()
5011	getResponse.isExists()
5012	item.doc() != null
5013	uids.isEmpty()
7505	isFullySpecified(type.getType())
7506	type instanceof Class
7507	type instanceof CompositeType
7508	type instanceof TypeVariable
7509	type instanceof GenericArrayTypeImpl
7509	type instanceof ParameterizedTypeImpl
7509	type instanceof WildcardTypeImpl
7510	type instanceof ParameterizedType
7511	type instanceof GenericArrayType
7512	((Class<?>) type).isArray()
7512	type instanceof Class
7513	type instanceof WildcardType
7514	type instanceof Class<?>
7515	type instanceof ParameterizedType
7516	rawType instanceof Class
7517	type instanceof GenericArrayType
7518	type instanceof TypeVariable
7519	a == b
7520	a instanceof Class
7521	a instanceof ParameterizedType
7522	b instanceof ParameterizedType
7523	a instanceof GenericArrayType
7524	b instanceof GenericArrayType
7525	a instanceof WildcardType
7526	b instanceof WildcardType
7527	a instanceof TypeVariable
7528	b instanceof TypeVariable
7529	type instanceof Class
7530	type instanceof ParameterizedType
7531	type instanceof GenericArrayType
7532	type instanceof WildcardType
7533	type instanceof Class<?>
7534	type instanceof ParameterizedType
7535	ownerType != null
7536	arguments.length > 0
7537	type instanceof GenericArrayType
7538	type instanceof WildcardType
7539	lowerBounds.length > 1
7539	upperBounds.length != 1
7540	lowerBounds.length == 1
7541	upperBounds[0] != Object.class
7542	upperBounds[0] == Object.class
7543	member instanceof MemberImpl
7544	member instanceof Field
7545	member instanceof Method
7546	member instanceof Constructor
7547	memberType == Method.class
7548	memberType == Field.class
7549	memberType == Constructor.class
7550	toResolve == rawType
7551	toResolve.isInterface()
7552	interfaces[i] == toResolve
7553	toResolve.isAssignableFrom(interfaces[i])
7554	rawType.isInterface()
7555	rawSupertype == toResolve
7556	toResolve.isAssignableFrom(rawSupertype)
7557	declaredByRaw == null
7558	declaredBy instanceof ParameterizedType
7559	toFind.equals(array[i])
7560	type instanceof Class<?>
7560	((Class) type).isPrimitive()
2298	values.isEmpty()
2299	format == null
2300	gapPolicy == null
2301	format != null
2302	window <= 0
2303	model == null
2304	model == null
2305	predict <= 0
2306	minimize != null
2306	model.canBeMinimized()
2306	minimize
2307	bucketsPaths.length != 1
2308	parent instanceof HistogramAggregatorFactory
2309	histoParent.minDocCount() != 0
2310	parent instanceof DateHistogramAggregatorFactory
2311	histoParent.minDocCount() != 0
2312	format != null
2313	predict > 0
2314	minimize != null
2315	token == XContentParser.Token.FIELD_NAME
2316	token == XContentParser.Token.VALUE_NUMBER
2317	WINDOW.match(currentFieldName)
2318	window <= 0
2319	PREDICT.match(currentFieldName)
2320	predict <= 0
2321	token == XContentParser.Token.VALUE_STRING
2322	FORMAT.match(currentFieldName)
2323	BUCKETS_PATH.match(currentFieldName)
2324	GAP_POLICY.match(currentFieldName)
2325	MODEL.match(currentFieldName)
2326	token == XContentParser.Token.START_ARRAY
2327	BUCKETS_PATH.match(currentFieldName)
2328	token == XContentParser.Token.START_OBJECT
2329	SETTINGS.match(currentFieldName)
2330	token == XContentParser.Token.VALUE_BOOLEAN
2331	MINIMIZE.match(currentFieldName)
2332	bucketsPaths == null
2333	format != null
2334	gapPolicy != null
2335	window != null
2336	predict != null
2337	model != null
2338	minimize != null
2339	minimize
2340	thisBucketValue.equals(Double.NaN)
2340	thisBucketValue == null
2341	model.hasValue(values.size())
2342	predict > 0
2343	predict > 0
2343	buckets.size() > 0
2344	lastValidPosition + i + 1 < newBuckets.size()
2345	thisBucketValue.equals(Double.NaN)
2345	thisBucketValue == null
2346	counter < window
2347	thisBucketValue.equals(Double.NaN)
2347	thisBucketValue == null
2348	counter < window
12102	shardRouting.shardId().getIndexName().equals(index)
12103	shardRouting.shardId().id() != shardId
12104	shardRouting.started()
12105	explain
12106	decision.type() == Decision.Type.NO
12107	explain
12108	decision.type() == Decision.Type.THROTTLE
12109	found
12110	explain
12111	token == XContentParser.Token.FIELD_NAME
12112	token.isValue()
12113	"index".equals(currentFieldName)
12114	"shard".equals(currentFieldName)
12115	"fromNode".equals(currentFieldName)
12115	"from_node".equals(currentFieldName)
12116	"toNode".equals(currentFieldName)
12116	"to_node".equals(currentFieldName)
12117	index == null
12118	shardId == -1
12119	fromNode == null
12120	toNode == null
12121	obj == null
12121	getClass() != obj.getClass()
11854	canRemainDecision != null
11855	nodeDecisions == null
11855	allocationDecision == AllocationDecision.NO
11856	clusterRebalanceDecision != null
11857	allocationDecision == AllocationDecision.AWAITING_INFO
11858	clusterRebalanceDecision.type() == Type.NO
11859	clusterRebalanceDecision.type() == Type.THROTTLE
11860	getTargetNode() != null
11861	allocationDecision == AllocationDecision.THROTTLED
11862	allocationDecision == AllocationDecision.YES
11863	allocationDecision == AllocationDecision.THROTTLED
11864	targetNode != null
11865	canRemain() == false
11865	canRemainDecision.getDecisions().isEmpty() == false
11866	clusterRebalanceDecision != null
11867	rebalanceDecision != AllocationDecision.YES
11867	clusterRebalanceDecision.getDecisions().isEmpty() == false
11868	clusterRebalanceDecision != null
11869	super.equals(other) == false
11870	other instanceof MoveDecision == false
766	set.candidates.length > numCandidates
652	subcommands.isEmpty()
653	subcommands.isEmpty()
654	args.length == 0
655	subcommand == null
10289	failure != null
10290	failure != null
10291	failure != null
10292	in.readBoolean()
10293	failure != null
10298	items.isEmpty()
10299	item.index() == null
10300	item.id() == null
10301	(token = parser.nextToken()) != XContentParser.Token.START_OBJECT
10302	token == XContentParser.Token.FIELD_NAME
10303	token == XContentParser.Token.START_ARRAY
10304	"docs".equals(currentFieldName)
10305	"ids".equals(currentFieldName)
10306	token != XContentParser.Token.START_OBJECT
10307	token == XContentParser.Token.FIELD_NAME
10308	token.isValue()
10309	"_index".equals(currentFieldName)
10310	allowExplicitIndex
10311	"_type".equals(currentFieldName)
10312	"_id".equals(currentFieldName)
10313	"routing".equals(currentFieldName)
10313	"_routing".equals(currentFieldName)
10314	"parent".equals(currentFieldName)
10314	"_parent".equals(currentFieldName)
10315	"fields".equals(currentFieldName)
10316	"stored_fields".equals(currentFieldName)
10317	"_version".equals(currentFieldName)
10317	"version".equals(currentFieldName)
10318	"version_type".equals(currentFieldName)
10318	"versionType".equals(currentFieldName)
10318	"_versionType".equals(currentFieldName)
10318	"_version_type".equals(currentFieldName)
10319	"_source".equals(currentFieldName)
10320	parser.isBooleanValueLenient()
10321	token == XContentParser.Token.VALUE_STRING
10322	token == XContentParser.Token.START_ARRAY
10323	"fields".equals(currentFieldName)
10324	"stored_fields".equals(currentFieldName)
10325	"_source".equals(currentFieldName)
10326	token == XContentParser.Token.START_OBJECT
10327	"_source".equals(currentFieldName)
10328	token == XContentParser.Token.FIELD_NAME
10329	"includes".equals(currentFieldName)
10329	"include".equals(currentFieldName)
10330	"excludes".equals(currentFieldName)
10330	"exclude".equals(currentFieldName)
10331	token == XContentParser.Token.START_ARRAY
10332	token.isValue()
10333	storedFields != null
10334	token.isValue()
10344	response.isFailed()
10294	in.readBoolean()
10295	in.readBoolean()
10296	responses.get(i) == null
10297	failures.get(i) == null
8994	wrapdateline
8995	parts.size() == 1
8996	this == obj
8997	getClass() != obj.getClass()
8997	obj == null
4005	boostValue != null
4005	query != null
4005	boostValue != AbstractQueryBuilder.DEFAULT_BOOST
4006	fieldNames.size() == 1
4007	parseException.getCause() instanceof IllegalArgumentException
4008	query.getClass() == TermQuery.class
4009	boost != 1f
4010	i > 0
4011	commonTermsCutoff != null
4012	tieBreaker == 1.0f
4013	queries.size() == 1
4014	queryBuilder == null
4015	queryBuilder == null
5072	t.parseField().match(value)
5073	type == null
5074	value == null
5075	fields == null
5076	Strings.isEmpty(field)
5077	Strings.isEmpty(field)
5078	type == null
5079	type == null
5080	operator == null
5081	slop < 0
5082	fuzziness != null
5083	prefixLength < 0
5084	maxExpansions <= 0
5085	zeroTermsQuery == null
5086	analyzer != null
5087	fuzziness != null
5088	minimumShouldMatch != null
5089	fuzzyRewrite != null
5090	useDisMax != null
5091	tieBreaker != null
5092	cutoffFrequency != null
5093	token == XContentParser.Token.FIELD_NAME
5094	FIELDS_FIELD.match(currentFieldName)
5095	token == XContentParser.Token.START_ARRAY
5096	token.isValue()
5097	token.isValue()
5098	QUERY_FIELD.match(currentFieldName)
5099	TYPE_FIELD.match(currentFieldName)
5100	ANALYZER_FIELD.match(currentFieldName)
5101	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
5102	SLOP_FIELD.match(currentFieldName)
5103	Fuzziness.FIELD.match(currentFieldName)
5104	PREFIX_LENGTH_FIELD.match(currentFieldName)
5105	MAX_EXPANSIONS_FIELD.match(currentFieldName)
5106	OPERATOR_FIELD.match(currentFieldName)
5107	MINIMUM_SHOULD_MATCH_FIELD.match(currentFieldName)
5108	FUZZY_REWRITE_FIELD.match(currentFieldName)
5109	USE_DIS_MAX_FIELD.match(currentFieldName)
5110	TIE_BREAKER_FIELD.match(currentFieldName)
5111	CUTOFF_FREQUENCY_FIELD.match(currentFieldName)
5112	LENIENT_FIELD.match(currentFieldName)
5113	ZERO_TERMS_QUERY_FIELD.match(currentFieldName)
5114	"none".equalsIgnoreCase(zeroTermsDocs)
5115	"all".equalsIgnoreCase(zeroTermsDocs)
5116	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
5117	value == null
5118	fieldsBoosts.isEmpty()
5119	type == Type.PHRASE_PREFIX
5119	fuzziness != null
5119	type == Type.CROSS_FIELDS
5119	type == Type.PHRASE
5120	fieldText[i] == '^'
5121	fField == null
5122	analyzer != null
5123	context.getIndexAnalyzers().get(analyzer) == null
5124	fuzziness != null
5125	fuzzyRewrite != null
5126	tieBreaker != null
5127	cutoffFrequency != null
5128	useDisMax != null
5129	typeUsesDismax != useDisMax
5130	tieBreaker == null
5130	useDisMax
5131	Regex.isSimpleMatchPattern(fField)
5645	multiValued
7231	positions.size() > 0
7232	termArrays.size() == 0
7233	terms[i].field() != field
7234	rewritten != this
7235	termArrays.isEmpty()
7236	terms.size() > maxExpansions
7237	terms.isEmpty()
7238	_terms == null
7239	TermsEnum.SeekStatus.END == seekStatus
7240	StringHelper.startsWith(term, prefix.bytes())
7241	terms.size() >= maxExpansions
7242	field.equals(f)
7242	field == null
7243	terms.length > 1
7244	j < terms.length - 1
7245	i.hasNext()
7246	i.hasNext()
7247	i.hasNext()
7248	slop != 0
7249	sameClassAs(o) == false
7250	termArrays1.size() != termArrays2.size()
7251	termArray1 == null ? termArray2 == null : Arrays.equals(termArray1, termArray2)
8986	this == obj
8987	getClass() != obj.getClass()
8987	obj == null
8990	wrapdateline
8991	shapes.size() == 1
8992	this == obj
8993	obj == null
8993	getClass() != obj.getClass()
10110	maxConcurrentSearchRequests < 1
10111	requests.isEmpty()
10112	ex != null
10113	validationException == null
10080	request.indicesOptions() == IndicesOptions.strictExpandOpenAndForbidClosed()
10080	request().indicesOptions() != IndicesOptions.strictExpandOpenAndForbidClosed()
10081	request().indicesOptions() != IndicesOptions.strictExpandOpenAndForbidClosed()
10081	request.request().indicesOptions() == IndicesOptions.strictExpandOpenAndForbidClosed()
10075	item.isFailure()
5340	op != null
10429	failure != null
10430	failure != null
10431	failure != null
10432	in.readBoolean()
10433	failure != null
10461	requests.isEmpty()
10462	validationExceptionForDoc != null
10463	parser != null
10464	token == XContentParser.Token.FIELD_NAME
10465	token == XContentParser.Token.START_ARRAY
10466	"docs".equals(currentFieldName)
10467	token != XContentParser.Token.START_OBJECT
10468	"ids".equals(currentFieldName)
10469	token.isValue()
10470	currentFieldName != null
10470	token == XContentParser.Token.START_OBJECT
10471	"parameters".equals(currentFieldName)
10472	currentFieldName != null
10434	response.isFailed()
10435	in.readBoolean()
10436	in.readBoolean()
10437	responses.get(i) == null
10438	failures.get(i) == null
7484	condition
7485	reference != null
7774	length >= 16
2144	other instanceof MutualInformation
2145	Double.isNaN(score)
2146	frequencies.N11 / frequencies.N_1 < frequencies.N10 / frequencies.N_0
2146	includeNegatives
2147	numerator < 1.e-7
2147	factor < 1.e-7
6046	characterClasses == null
6046	characterClasses.length == 0
6047	matcher == null
6048	matcher == null
2126	backgroundIsSuperset
2127	backgroundIsSuperset
2128	subsetFreq > supersetFreq
2129	subsetSize > supersetSize
2130	supersetFreq - subsetFreq > supersetSize - subsetSize
6198	positionIncrementGap != Integer.MIN_VALUE
6199	this == o
6200	o instanceof NamedAnalyzer
6201	scope == AnalyzerScope.INDEX
7664	o instanceof Named
7211	registry.putIfAbsent(name, t) != null
8576	c == null
8620	entries.isEmpty()
8621	currentCategory != entry.categoryClass
8622	currentCategory != null
8623	oldReader != null
8624	readers == null
8625	reader == null
8281	entries.isEmpty()
8282	currentCategory != entry.categoryClass
8283	currentCategory != null
8284	old != null
8285	parsers == null
8286	registry.isEmpty()
8287	entry == null
8288	false == entry.name.match(name)
9194	scriptFactory != null
3103	JNA_AVAILABLE
3104	JNA_AVAILABLE
3105	JNA_AVAILABLE
3106	JNA_AVAILABLE
3107	JNA_AVAILABLE
3108	JNA_AVAILABLE
3109	JNA_AVAILABLE
3110	JNA_AVAILABLE
3111	JNA_AVAILABLE
2199	path == null
2200	childObjectMapper == null
2201	childObjectMapper.nested().isNested() == false
2202	token == XContentParser.Token.FIELD_NAME
2203	token == XContentParser.Token.VALUE_STRING
2204	NestedAggregator.PATH_FIELD.match(currentFieldName)
2205	path == null
2183	collectsFromSingleBucket == false
2184	childObjectMapper == null
4033	query instanceof ConstantScoreQuery
4034	query instanceof BoostQuery
4035	query instanceof MatchAllDocsQuery
4036	query instanceof MatchNoDocsQuery
4037	query instanceof TermQuery
4038	query instanceof PointRangeQuery
4039	query instanceof IndexOrDocValuesQuery
4040	query instanceof BooleanQuery
4041	hasRequiredClauses
4042	query instanceof ESToParentBlockJoinQuery
4043	field.startsWith("_")
4044	mapperService.fullName(field) == null
4045	mapper.nested().isNested()
4045	mapper != null
4046	query instanceof ConstantScoreQuery
4047	query instanceof BoostQuery
4048	query instanceof MatchAllDocsQuery
4049	query instanceof MatchNoDocsQuery
4050	query instanceof TermQuery
4051	query instanceof PointRangeQuery
4052	query instanceof IndexOrDocValuesQuery
4053	query instanceof BooleanQuery
4054	hasRequiredClauses
4055	field.startsWith("_")
4056	mapperService.fullName(field) == null
4057	mapper!= null
4057	mapper.nested().isNested()
4058	mapper.fullPath().equals(nestedPath)
4059	lastDot == -1
4306	scoreMode != null
4307	innerHitBuilder != null
4308	token == XContentParser.Token.FIELD_NAME
4309	token == XContentParser.Token.START_OBJECT
4310	QUERY_FIELD.match(currentFieldName)
4311	INNER_HITS_FIELD.match(currentFieldName)
4312	token.isValue()
4313	PATH_FIELD.match(currentFieldName)
4314	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4315	IGNORE_UNMAPPED_FIELD.match(currentFieldName)
4316	SCORE_MODE_FIELD.match(currentFieldName)
4317	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4318	innerHitBuilder != null
4319	nestedObjectMapper == null
4320	ignoreUnmapped
4321	nestedObjectMapper.nested().isNested()
4322	objectMapper == null
4323	new NestedHelper(context.getMapperService()).mightMatchNonNestedDocs(innerQuery, path)
4324	rewrittenQuery != query
4325	innerHitBuilder != null
7957	address instanceof Inet6Address
7957	port != -1
7958	port != -1
8051	e instanceof ConnectException
8052	e instanceof ClosedChannelException
8053	e.getMessage() != null
8054	e.getMessage().contains("Connection reset")
8055	e.getMessage().contains("connection was aborted")
8056	e.getMessage().contains("forcibly closed")
8057	e.getMessage().contains("Broken pipe")
8058	e.getMessage().contains("Connection timed out")
8059	e.getMessage().equals("Socket is closed")
8060	e.getMessage().equals("Socket closed")
7945	transportClient == false
7945	HTTP_ENABLED.get(settings)
7946	transportFactories.putIfAbsent(key, factory) != null
7947	transportClient
7948	transportHttpFactories.putIfAbsent(key, factory) != null
7949	HTTP_TYPE_SETTING.exists(settings)
7950	factory == null
7951	TRANSPORT_TYPE_SETTING.exists(settings)
7952	factory == null
7925	bindHosts.length == 0
7925	bindHosts == null
7926	GLOBAL_NETWORK_HOST_SETTING.exists(settings)
7926	GLOBAL_NETWORK_BINDHOST_SETTING.exists(settings)
7927	customNameResolvers != null
7928	addresses != null
7929	address.isMulticastAddress()
7930	address.isAnyLocalAddress()
7930	addresses.length > 1
7931	publishHosts.length == 0
7931	publishHosts == null
7932	GLOBAL_NETWORK_PUBLISHHOST_SETTING.exists(settings)
7932	GLOBAL_NETWORK_HOST_SETTING.exists(settings)
7933	customNameResolvers != null
7934	addresses != null
7935	addresses.length == 1
7935	addresses[0].isAnyLocalAddress()
7936	address.isMulticastAddress()
7937	address.isAnyLocalAddress()
7938	addresses.length > 1
7939	hosts.length == 0
7940	host.startsWith("#")
7940	host.endsWith("_")
7940	host.startsWith("_")
7940	host.endsWith("#")
7941	customNameResolvers != null
7942	addresses != null
7943	host.endsWith(":ipv4")
7944	host.endsWith(":ipv6")
7959	prefer_v6
7960	address.isAnyLocalAddress()
7961	address.isMulticastAddress()
7962	address.isLoopbackAddress()
7963	address.isLinkLocalAddress()
7964	address.isSiteLocalAddress()
7965	level.isEmpty()
7966	intf.isUp()
7967	address.isLoopbackAddress()
7967	intf.isLoopback()
7968	list.isEmpty()
7969	intf.isUp()
7970	address.isSiteLocalAddress()
7971	list.isEmpty()
7972	intf.isUp()
7973	address.isLoopbackAddress() == false
7973	address.isLinkLocalAddress() == false
7973	address.isSiteLocalAddress() == false
7974	list.isEmpty()
7975	intf.isUp()
7976	list.isEmpty()
7977	networkInterface.isPresent() == false
7978	networkInterface.get().isUp()
7979	list.isEmpty()
7980	address instanceof Inet4Address
7981	list.isEmpty()
7982	address instanceof Inet6Address
7983	list.isEmpty()
9788	NODE_NAME_SETTING.exists(settings)
9789	hadPredefinedNodeName == false
9790	logger.isDebugEnabled()
9791	networkModule.isHttpEnabled()
9792	NetworkModule.HTTP_ENABLED.get(settings)
9793	success
9794	isSnapshot
9794	version.isRelease()
9795	lifecycle.moveToStarted()
9796	initialStateTimeout.millis() > 0
9797	clusterState.nodes().getMasterNodeId() == null
9798	NetworkModule.HTTP_ENABLED.get(settings)
9799	WRITE_PORTS_FIELD_SETTING.get(settings)
9800	NetworkModule.HTTP_ENABLED.get(settings)
9801	lifecycle.moveToStopped()
9802	NetworkModule.HTTP_ENABLED.get(settings)
9803	lifecycle.started()
9804	lifecycle.moveToClosed()
9805	NetworkModule.HTTP_ENABLED.get(settings)
9806	logger.isTraceEnabled()
9807	inetAddress instanceof Inet6Address
9807	inetAddress.isLinkLocalAddress()
9808	type.equals("hierarchy")
9809	type.equals("none")
9810	customNameResolver != null
11886	in.getVersion().before(Version.V_5_2_1_UNRELEASED)
11887	out.getVersion().before(Version.V_5_2_1_UNRELEASED)
11888	canAllocateDecision == null
11889	shardStoreInfo != null
11890	isWeightRanked()
11891	canAllocateDecision.getDecisions().isEmpty() == false
11891	canAllocateDecision != null
11682	actions == null
11683	transportAction == null
12572	connected
12573	lifecycle.stoppedOrClosed()
12573	nodes.containsKey(node) == false
12574	(nodeFailureCount % 6) == 1
9635	DiscoveryNode.nodeRequiresLocalStorage(settings)
9636	locks[0] != null
9637	locks[0] == null
9638	logger.isDebugEnabled()
9639	success == false
9640	locks[i] != null
9641	logger.isDebugEnabled()
9642	nodePath.spins == null
9643	nodePath.spins
9644	logger.isInfoEnabled()
9645	allMounts.contains(mount) == false
9646	type != null
9647	spins == null
9648	spins.booleanValue()
9649	metaData == null
9650	ENABLE_LUCENE_SEGMENT_INFOS_TRACE_SETTING.get(settings)
9651	b.length() > 0
9652	indexSettings.hasCustomDataPath()
9653	indexSettings.hasCustomDataPath()
9654	numShards <= 0
9655	success == false
9656	shardLocks.containsKey(shardId)
9657	acquired == false
9658	success == false
9659	locks == null
9659	nodePaths == null
9660	locks == null
9660	nodePaths == null
9661	Files.isDirectory(indicesLocation)
9662	Files.isDirectory(index)
9663	nodePaths == null
9663	locks == null
9664	Files.exists(indexFolder)
9665	nodePaths == null
9665	locks == null
9666	Files.isDirectory(location)
9667	indexUniquePathId.equals(indexPath.getFileName().toString())
9668	locks != null
9668	closed.compareAndSet(false, true)
9669	locks != null
9669	closed.get()
9670	customDataDir != null
9671	Files.isDirectory(shardPath)
9671	fileName.chars().allMatch(Character::isDigit)
9672	Files.exists(path)
9673	tempFileCreated
6805	in.readBoolean()
6806	statsByShard != null
6807	isLevelValid
6808	"indices".equals(level)
6809	"shards".equals(level)
6810	statsMap.containsKey(entry.getKey())
10984	in.readBoolean()
10985	in.readBoolean()
10986	totalIndexingBuffer == null
10987	settings == null
6592	electionContext == context
6593	electionContext != null
12735	masterNode == null
9674	this == o
9675	o == null
9675	getClass() != o.getClass()
10999	in.readBoolean()
11000	indices == null
11001	getNode().getAttributes().isEmpty()
11002	getIndices() != null
11003	getOs() != null
11004	getProcess() != null
11005	getJvm() != null
11006	getThreadPool() != null
11007	getFs() != null
11008	getTransport() != null
11009	getHttp() != null
11010	getBreaker() != null
11011	getScriptStats() != null
11012	getDiscoveryStats() != null
11013	getIngestStats() != null
11960	shardRouting.primary()
11961	shardRouting.currentNodeId() == null
11962	shardRouting.recoverySource().getType() == RecoverySource.Type.SNAPSHOT
11962	shardRouting.recoverySource() != null
11963	primary != null
11964	target.node().getVersion().onOrAfter(source.node().getVersion())
11965	target.node().getVersion().onOrAfter(recoverySource.version())
6640	clusterState.nodes().nodeExists(monitoredNode)
6641	node.equals(localNode)
6642	nodesFD.containsKey(node)
6643	nodeFD == null
6644	connectOnNetworkDisconnect
10988	nodeInfo.getTotalIndexingBuffer() != null
10989	nodeInfo.getNode().getAttributes().isEmpty()
10990	nodeInfo.getSettings() != null
10991	nodeInfo.getOs() != null
10992	nodeInfo.getProcess() != null
10993	nodeInfo.getJvm() != null
10994	nodeInfo.getThreadPool() != null
10995	nodeInfo.getTransport() != null
10996	nodeInfo.getHttp() != null
10997	nodeInfo.getPlugins() != null
10998	nodeInfo.getIngest() != null
11014	indices
769	candidateSetsList.isEmpty()
769	candidateSetsList.size() >= tokenLimit
770	confidence > 0.0
8575	other instanceof ElasticsearchException
10255	hasBeenCalled.compareAndSet(false, true)
10256	hasBeenCalled.compareAndSet(false, true)
7561	"Nullable".equals(a.annotationType().getSimpleName())
3346	lowerTerm != null
3347	includeLower
3348	upperTerm != null
3349	includeUpper
3350	hasDocValues
3351	indexed
3352	docValued
3353	stored
3354	fi == null
3355	size == 0
3356	value instanceof Number
3357	value instanceof BytesRef
3358	lowerTerm != null
3359	includeLower == false
3360	upperTerm != null
3361	includeUpper == false
3362	hasDocValues
3363	indexed
3364	docValued
3365	stored
3366	fi == null
3367	size == 0
3368	value instanceof Number
3369	value instanceof BytesRef
3370	lowerTerm != null
3371	includeLower == false
3372	upperTerm != null
3373	includeUpper == false
3374	hasDocValues
3375	indexed
3376	docValued
3377	stored
3378	fi == null
3379	size == 0
3380	value instanceof Number
3381	doubleValue < Byte.MIN_VALUE
3381	doubleValue > Byte.MAX_VALUE
3382	coerce
3382	doubleValue % 1 != 0
3383	value instanceof BytesRef
3384	value > Byte.MAX_VALUE
3384	value < Byte.MIN_VALUE
3385	value instanceof Number
3386	doubleValue < Short.MIN_VALUE
3386	doubleValue > Short.MAX_VALUE
3387	doubleValue % 1 != 0
3387	coerce
3388	value instanceof BytesRef
3389	value < Short.MIN_VALUE
3389	value > Short.MAX_VALUE
3390	value instanceof Number
3391	doubleValue > Integer.MAX_VALUE
3391	doubleValue < Integer.MIN_VALUE
3392	doubleValue % 1 != 0
3392	coerce
3393	value instanceof BytesRef
3394	hasDecimalPart(value)
3395	hasDecimalPart(value)
3396	upTo == 0
3397	upTo != v.length
3398	lowerTerm != null
3399	lowerTermHasDecimalPart == false
3399	includeLower == false
3399	signum(lowerTerm) > 0
3399	lowerTermHasDecimalPart
3400	l == Integer.MAX_VALUE
3401	upperTerm != null
3402	upperTermHasDecimalPart
3402	includeUpper == false
3402	upperTermHasDecimalPart == false
3402	signum(upperTerm) < 0
3403	u == Integer.MIN_VALUE
3404	hasDocValues
3405	indexed
3406	docValued
3407	stored
3408	fi == null
3409	size == 0
3410	value instanceof Number
3411	doubleValue < Long.MIN_VALUE
3411	doubleValue > Long.MAX_VALUE
3412	coerce
3412	doubleValue % 1 != 0
3413	value instanceof BytesRef
3414	hasDecimalPart(value)
3415	hasDecimalPart(value)
3416	upTo == 0
3417	upTo != v.length
3418	lowerTerm != null
3419	lowerTermHasDecimalPart == false
3419	includeLower == false
3419	lowerTermHasDecimalPart
3419	signum(lowerTerm) > 0
3420	l == Long.MAX_VALUE
3421	upperTerm != null
3422	upperTermHasDecimalPart == false
3422	signum(upperTerm) < 0
3422	includeUpper == false
3422	upperTermHasDecimalPart
3423	u == Long.MIN_VALUE
3424	hasDocValues
3425	indexed
3426	docValued
3427	stored
3428	fi == null
3429	size == 0
3430	number instanceof Number
3431	number instanceof BytesRef
3432	number instanceof String
3433	value instanceof Number
3434	value instanceof BytesRef
3435	boost() != 1f
3436	boost() != 1f
3437	boost() != 1f
3438	value == null
3439	timeZone != null
3440	format == null
3441	context.externalValueSet()
3442	parser.currentToken() == Token.VALUE_NULL
3443	coerce.value()
3443	parser.currentToken() == Token.VALUE_STRING
3443	parser.textLength() == 0
3444	ignoreMalformed.value()
3445	includeInAll
3446	value == null
3447	value == null
3448	numericValue == null
3449	includeInAll
3450	other.ignoreMalformed.explicit()
3451	other.coerce.explicit()
3452	includeDefaults
3452	ignoreMalformed.explicit()
3453	coerce.explicit()
3453	includeDefaults
3454	fieldType().nullValue() != null
3454	includeDefaults
3455	includeInAll != null
3456	includeDefaults
7775	Double.isInfinite(value)
7775	Double.isNaN(value)
7776	n instanceof Byte
7776	n instanceof Short
7776	n instanceof Long
7776	n instanceof Integer
7777	n instanceof Double
7777	n instanceof Float
7778	d != Math.round(d)
7779	n instanceof BigDecimal
7780	n instanceof BigInteger
7781	l != (short) l
7782	l != (byte) l
3913	indexCreatedVersion.onOrAfter(Version.V_5_0_0_beta1)
3914	name.isEmpty()
3915	mappers == null
3916	mergeWith instanceof ObjectMapper
3917	nested().isNested()
3918	mergeWith.nested().isNested()
3919	mergeWith.nested().isNested()
3920	mergeWith.dynamic != null
3921	mergeIntoMapper == null
3922	mapper != updated
3923	updatedMappers == null
3924	updatedMappers == null
3925	nested.isNested()
3926	nested.isIncludeInParent()
3927	nested.isIncludeInRoot()
3928	mappers.isEmpty()
3928	custom == null
3929	dynamic != null
3930	enabled != Defaults.ENABLED
3931	includeInAll != null
3932	custom != null
3933	mapper instanceof MetadataFieldMapper
3934	count++ == 0
3935	count > 0
8289	valueSupplier == null
8290	parser.currentToken() == XContentParser.Token.START_OBJECT
8291	token != XContentParser.Token.START_OBJECT
8292	token == XContentParser.Token.FIELD_NAME
8293	currentFieldName == null
8294	fieldParser == null
8295	valueSupplier == null
8296	parseField == null
8297	type == null
8298	consumer == null
8299	parser == null
8300	parser == null
8300	false == ignoreUnknownFields
118	thread instanceof ConcurrentMergeScheduler.MergeThread
119	thread instanceof ConcurrentMergeScheduler.MergeThread
10860	CollectionUtils.isEmpty(indices)
11780	iterator != null
11781	effectiveRouting != null
11782	preference == null
11782	preference.isEmpty()
11783	awarenessAttributes.length == 0
11784	preference.charAt(0) == '_'
11785	preferenceType == Preference.SHARDS
11786	index == -1
11787	Integer.parseInt(id) == indexShard.shardId().id()
11788	found
11789	index == preference.length() - 1
11789	index == -1
11790	awarenessAttributes.length == 0
11791	awarenessAttributes.length == 0
11792	indexShard == null
11793	indexRouting == null
11794	indexMetaData == null
11795	routing == null
11796	indexMetaData.isRoutingPartitionedIndex()
5646	numValues == 1
5647	numValues == 2
5648	numDocsWithValue == maxDoc
5649	ordinals.firstOrdinals.get(docID) != 0
5650	numMultiValuedDocs > 0
5650	MultiOrdinals.significantlySmallerThanSinglePackedOrdinals(maxDoc, numDocsWithValue, getValueCount(), acceptableOverheadRatio)
12776	name != null
12777	arch != null
12778	version != null
12762	getFreePhysicalMemorySize == null
12763	getTotalPhysicalMemorySize == null
12764	getFreeSwapSpaceSize == null
12765	getTotalSwapSpaceSize == null
12766	Constants.WINDOWS
12767	Constants.LINUX
12768	logger.isDebugEnabled()
12769	getSystemLoadAverage == null
12770	logger.isDebugEnabled()
12771	CONTROL_GROUPS_HIERARCHY_OVERRIDE != null
12772	Files.exists(PathUtils.get("/proc/self/cgroup"))
12773	Files.exists(PathUtils.get("/sys/fs/cgroup/cpu"))
12774	Files.exists(PathUtils.get("/sys/fs/cgroup/cpuacct"))
12775	areCgroupStatsAvailable()
12759	in.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
12760	out.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
12761	cgroup != null
7205	clear
7205	v.isRecycled()
7206	clear
7206	v.isRecycled()
7207	clear
7207	v.isRecycled()
7208	limit == 0
5663	terms == null
5664	success
8119	(from + length) > length()
8119	from < 0
7708	isAssisted
7709	bindingAnnotation != null
7710	annotation.annotationType().equals(Assisted.class)
7711	a.annotationType().getAnnotation(BindingAnnotation.class) != null
7712	bindingAnnotation != null
7713	o == this
7714	o instanceof ParameterListKey
11293	t.response != null
11294	counter.decrementAndGet() != 0
11295	t.response == null
11296	exception == null
11297	exception == null
5665	parentFieldMapper.active()
5666	indexReader.leaves().size() <= 1
5667	e instanceof ElasticsearchException
5668	logger.isDebugEnabled()
5669	indexParentChildFieldData instanceof ParentChildIndexFieldData.GlobalFieldData
3574	parent
3575	active()
3576	context.parser().currentName().equals(Defaults.NAME)
3576	context.parser().currentName() != null
3577	context.sourceToParse().parent() != null
3578	parsedParentId == null
3579	parentId == null
3580	parentId != null
3580	parsedParentId.equals(Uid.createUid(parentType, parentId))
3581	active()
3582	includeDefaults
3582	fieldType().eagerGlobalOrdinals() != defaultFieldType.eagerGlobalOrdinals()
3583	Objects.equals(parentType, fieldMergeWith.parentType) == false
3584	conflicts.isEmpty() == false
3585	active()
1206	context.storedFieldsContext().fetchFields() == false
1206	context.storedFieldsContext() != null
1207	parentFieldMapper.active() == false
1208	parentId == null
1209	fields == null
1210	docValues == null
4239	token == XContentParser.Token.FIELD_NAME
4240	token.isValue()
4241	TYPE_FIELD.match(currentFieldName)
4242	ID_FIELD.match(currentFieldName)
4243	IGNORE_UNMAPPED_FIELD.match(currentFieldName)
4244	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4245	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4246	childDocMapper == null
4247	ignoreUnmapped
4248	parentFieldMapper.active() == false
2206	valuesSource == null
2207	childDocsScorer == null
2208	liveDocs.get(docId) == false
2208	liveDocs != null
2209	globalOrdinal != -1
2210	bucketOrd != -1
2211	multipleBucketsPerParentOrd
2212	otherBucketOrds != null
3936	isWithinCopyTo()
3937	isWithinMultiFields()
3938	docMapper().allFieldMapper().enabled()
3939	includeInAll == null
3940	includeInAll == null
3941	externalValue() == null
3941	externalValueSet()
3942	clazz.isInstance(externalValue())
7479	deprecatedNames == null
7479	deprecatedNames.length == 0
7480	allReplacedWith == null
7480	fieldName.equals(name)
7481	fieldName.equals(depName)
7482	allReplacedWith != null
8171	previousValue != null
8172	value == null
8173	parseFieldAndValue == null
3513	dynamicMappingsUpdate == null
7798	contentLocation != null
7799	lineNumber != UNKNOWN_POSITION
6224	delimiter == null
6225	delimiter.length() > 1
6226	replacement == null
6227	replacement.length() > 1
6228	reverse
9127	strings.length == 0
9128	rootValue != null
9129	strings.length > 0
9129	strings[0].isEmpty()
9130	path.length() == 0
9131	strings.length == 0
9132	strings[0].isEmpty()
9132	strings.length > 0
8626	uri.getScheme().equalsIgnoreCase("file")
8627	normalizedPath.startsWith(normalizedRoot)
6229	lowercase
6230	stopWords != null
6202	sPattern == null
6050	regexes == null
6267	Strings.hasLength(sPattern)
6062	sPattern == null
6275	sPattern == null
6756	indexShard != null
6757	node == null
6758	routingEntry.relocating() == false
6758	routingEntry.relocatingNodeId().equals(request.targetNode().getId()) == false
6758	request.isPrimaryRelocation()
6759	targetShardRouting == null
6760	targetShardRouting.initializing()
6780	indexShard != null
6781	newTarget != null
6782	recoveryRef == null
6783	metadataSnapshot.size() > 0
6784	startingSeqNo == SequenceNumbersService.UNASSIGNED_SEQ_NO
6785	seqNoStats.getMaxSeqNo() <= seqNoStats.getGlobalCheckpoint()
6786	clusterState.getVersion() >= clusterStateVersion
6656	pendingStates.size() > maxQueueSize
6657	context.committed()
6658	context == null
6659	context.committed()
6660	failedContext == null
6661	failedContext.committed() == false
6662	pendingContext.committed() == false
6663	pendingContext.equals(failedContext)
6664	state.supersedes(pendingState)
6665	findState(state.stateUUID()) == null
6666	Objects.equals(currentMaster, pendingMasterNode) == false
6667	pendingContext.committed()
6668	pendingState.stateUUID().equals(state.stateUUID())
6669	state.version() >= pendingState.version()
6670	pendingContext.committed()
6671	context.stateUUID().equals(stateUUID)
6672	pendingState.committed()
6673	pendingStates.isEmpty()
6674	potentialState.committed()
6675	stateToProcess == null
6676	potentialState.state.supersedes(stateToProcess.state)
6676	potentialState.committed()
6677	clusterStatsContext.committed()
5485	fieldType == null
5486	fieldType instanceof CompletionFieldMapper.CompletionFieldType
7368	termsEnum == null
7369	versions == null
7370	docID != DocIdSetIterator.NO_MORE_DOCS
7371	termsEnum.seekExact(id)
7372	liveDocs.get(d) == false
7372	liveDocs != null
2141	parser.nextToken().equals(XContentParser.Token.END_OBJECT)
2142	supersetFreq == 0
2143	obj.getClass() != getClass()
2143	obj == null
2794	values == null
2795	numberOfSignificantValueDigits < 0
2795	numberOfSignificantValueDigits > 5
2796	compression < 0.0
2797	method == null
2798	method == PercentilesMethod.TDIGEST
2799	Objects.equals(method, other.method)
2772	percents == null
2773	numberOfSignificantValueDigits < 0
2773	numberOfSignificantValueDigits > 5
2774	compression < 0.0
2775	method == null
2776	method == PercentilesMethod.TDIGEST
2777	Objects.equals(method, other.method)
2389	percents == null
2390	p < 0.0
2390	p > 100.0
2390	p == null
2391	bucketsPaths.length != 1
2392	p > 100.0
2392	p < 0.0
2392	p == null
2393	percents != null
2396	data.size() == 0
843	terms != null
844	gens.size() > 0
844	suggestTerms != null
845	collateScript != null
846	collatePrune
846	collateMatch
847	suggestion.getPreTag() != null
848	collatePrune
776	in.readBoolean()
777	collateQuery != null
778	gramSize < 1
779	maxErrors <= 0.0
780	realWordErrorLikelihood <= 0.0
781	confidence < 0.0
782	list == null
783	tokenLimit <= 0
784	(preTag == null) != (postTag == null)
785	gramSize != null
786	generators.isEmpty()
787	model != null
788	preTag != null
789	collateQuery != null
790	collateParams != null
791	token == XContentParser.Token.FIELD_NAME
792	token.isValue()
793	SuggestionBuilder.ANALYZER_FIELD.match(currentFieldName)
794	SuggestionBuilder.FIELDNAME_FIELD.match(currentFieldName)
795	SuggestionBuilder.SIZE_FIELD.match(currentFieldName)
796	SuggestionBuilder.SHARDSIZE_FIELD.match(currentFieldName)
797	PhraseSuggestionBuilder.RWE_LIKELIHOOD_FIELD.match(currentFieldName)
798	PhraseSuggestionBuilder.CONFIDENCE_FIELD.match(currentFieldName)
799	PhraseSuggestionBuilder.SEPARATOR_FIELD.match(currentFieldName)
800	PhraseSuggestionBuilder.MAXERRORS_FIELD.match(currentFieldName)
801	PhraseSuggestionBuilder.GRAMSIZE_FIELD.match(currentFieldName)
802	PhraseSuggestionBuilder.FORCE_UNIGRAM_FIELD.match(currentFieldName)
803	PhraseSuggestionBuilder.TOKEN_LIMIT_FIELD.match(currentFieldName)
804	token == Token.START_ARRAY
805	DirectCandidateGeneratorBuilder.DIRECT_GENERATOR_FIELD.match(currentFieldName)
806	token == Token.START_OBJECT
807	PhraseSuggestionBuilder.SMOOTHING_MODEL_FIELD.match(currentFieldName)
808	PhraseSuggestionBuilder.HIGHLIGHT_FIELD.match(currentFieldName)
809	token == XContentParser.Token.FIELD_NAME
810	token.isValue()
811	PhraseSuggestionBuilder.PRE_TAG_FIELD.match(currentFieldName)
812	PhraseSuggestionBuilder.POST_TAG_FIELD.match(currentFieldName)
813	PhraseSuggestionBuilder.COLLATE_FIELD.match(currentFieldName)
814	token == XContentParser.Token.FIELD_NAME
815	PhraseSuggestionBuilder.COLLATE_QUERY_FIELD.match(currentFieldName)
816	tmpSuggestion.collateQuery() != null
817	PhraseSuggestionBuilder.COLLATE_QUERY_PARAMS.match(currentFieldName)
818	PhraseSuggestionBuilder.COLLATE_QUERY_PRUNE.match(currentFieldName)
819	parser.isBooleanValue()
820	fieldname == null
821	this.gramSize != null
822	this.model != null
823	this.collateQuery != null
824	this.collateParams != null
825	this.gramSize == null
825	suggestionContext.generators().isEmpty()
826	this.gramSize == null
827	shingleFilterFactory != null
828	shingleFilterFactory.getMinShingleSize() > 1
828	suggestionContext.getAnalyzer() == null
828	shingleFilterFactory.getOutputUnigrams()
829	suggestionContext.generators().isEmpty()
830	suggestionContext.getRequireUnigram()
830	shingleFilterFactory.getOutputUnigrams()
830	shingleFilterFactory != null
830	shingleFilterFactory.getMinShingleSize() > 1
831	analyzer instanceof NamedAnalyzer
832	analyzer instanceof CustomAnalyzer
833	tokenFilterFactory instanceof ShingleTokenFilterFactory
834	tokenFilterFactory instanceof ShingleTokenFilterFactory.Factory
835	suggestion.smoothingModel() != null
8424	parent != null
8425	Files.isDirectory(parent) == false
8425	Files.exists(parent)
8426	Files.exists(parent) == false
8427	Files.exists(path)
8427	Files.isRegularFile(path) == false
8428	deleteOnExit
2533	name == null
2534	bucketsPaths == null
9505	in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
9506	out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
9507	this == o
9508	getClass() != o.getClass()
9508	o == null
9509	id.equals(that.id)
9529	ingestMetadata != null
9530	ingestMetadata.getPipelines().containsKey(pipeline) == false
9531	newStatsPerPipeline.containsKey(pipeline) == false
9532	changed
9533	pipeline.getProcessors().isEmpty()
9534	pipeline == null
9516	Objects.equals(ingestMetadata, previousIngestMetadata)
9517	currentIngestMetadata == null
9518	Regex.simpleMatch(request.getId(), pipelineKey)
9519	toRemove.isEmpty()
9519	Regex.isMatchAllPattern(request.getId()) == false
9520	toRemove.isEmpty()
9521	ingestInfos.isEmpty()
9522	entry.getValue().containsProcessor(processor.getType()) == false
9523	currentIngestMetadata != null
9524	ingestMetadata == null
9525	ids.length == 0
9526	Regex.isSimpleMatchPattern(id)
9527	Regex.simpleMatch(id, entry.getKey())
9528	pipeline != null
1248	hitContext.cache().containsKey(CACHE_KEY)
1249	entry == null
1250	field.fieldOptions().numberOfFragments() == 0
1251	field.fieldOptions().fragmenter() == null
1252	"simple".equals(field.fieldOptions().fragmenter())
1253	"span".equals(field.fieldOptions().fragmenter())
1254	textToHighlight instanceof BytesRef
1255	tokenStream.hasAttribute(CharTermAttribute.class)
1255	tokenStream.hasAttribute(OffsetAttribute.class)
1256	bestTextFragment != null
1256	bestTextFragment.getScore() > 0
1257	ExceptionsHelper.unwrap(e, BytesRefHash.MaxBytesLengthExceededException.class) != null
1258	field.fieldOptions().scoreOrdered()
1259	textsToHighlight.size() > 1
1259	field.fieldOptions().numberOfFragments() == 0
1259	fragsList.size() > 0
1260	fragments.length > 0
1261	noMatchSize > 0
1261	textsToHighlight.size() > 0
1262	end > 0
1263	tokenStream.hasAttribute(OffsetAttribute.class)
1264	attr.endOffset() >= noMatchSize
1265	attr.endOffset() == noMatchSize
11828	this == o
11760	index == shards.size()
11761	shard.active()
9303	e.getCause() instanceof ElasticsearchException
9304	e.getCause() instanceof ElasticsearchException
6517	lowerCaseOs.startsWith("windows")
6518	lowerCaseOs.equals("mac os x")
6519	lowerCaseArch.equals("amd64")
6520	lowerCaseArch.equals("i386")
6558	in.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)
6559	out.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)
6560	name == null
6560	name.isEmpty()
6561	description == null
6562	version == null
6563	esVersionString == null
6564	esVersion.equals(Version.CURRENT) == false
6565	javaVersionString == null
6566	classname == null
6567	hasNativeControllerValue == null
6568	this == o
6569	o == null
6569	getClass() != o.getClass()
6570	name.equals(that.name)
6571	version != null ? !version.equals(that.version) : that.version != null
6571	version.equals(that.version)
6506	requested.isEmpty()
6507	info.hasNativeController()
6508	batch
6509	text.equalsIgnoreCase("y")
6510	permission instanceof UnresolvedPermission
6511	permission instanceof UnresolvedPermission
6512	name.length() > 0
6512	name != null
6513	permission instanceof UnresolvedPermission
6514	actions != null
6514	actions.length() > 0
6515	permissions == Policy.UNSUPPORTED_EMPTY_COLLECTION
6516	emptyPolicy.implies(PluginSecurity.class.getProtectionDomain(), permission)
6490	logger.isTraceEnabled()
6491	modulesDirectory != null
6492	pluginsDirectory != null
6493	mandatoryPlugins.isEmpty() == false
6494	pluginsNames.contains(mandatoryPlugin)
6494	missingPlugins.contains(mandatoryPlugin)
6495	missingPlugins.isEmpty()
6496	pluginInfos.isEmpty()
6497	oldPlugin != null
6498	Files.notExists(modulesDirectory)
6499	FileSystemUtils.isHidden(module)
6500	urls.add(url) == false
6501	bundles.add(new Bundle(info, urls)) == false
6502	isAccessibleDirectory(pluginsDirectory, logger)
6503	urls.add(url) == false
6504	bundles.add(new Bundle(info, urls)) == false
6505	intersection.isEmpty() == false
8977	this == obj
8978	getClass() != obj.getClass()
8978	obj == null
9049	coerce
9050	coerce
9051	points.size() < 4
9052	points.get(0).equals(points.get(points.size() - 1))
9053	exterior.size() >= 2
9054	fixDateline
9055	polygon.length > 1
9056	(any = any.next) == edge
9057	debugEnabled()
9058	edges != null
9059	visitedEdge.containsKey(current.coordinate)
9060	connectedComponents > 0
9060	current.next != edge
9061	debugEnabled()
9062	numHoles == 0
9063	edges[i].component >= 0
9064	debugEnabled()
9065	sharedVertex = (edges[pos].intersect.compareTo(current.coordinate) == 0)
9065	intersections == 0
9065	(pos = Arrays.binarySearch(edges, 0, intersections, current, INTERSECTION_ORDER)) >= 0
9066	debugEnabled()
9067	e2.component > 0
9068	e2.intersect != Edge.MAX_COORDINATE
9068	Math.abs(e2.coordinate.x) == DATELINE
9068	e1.next.next.coordinate.equals3D(e2.coordinate)
9068	e1.intersect != Edge.MAX_COORDINATE
9068	Math.abs(e1.next.coordinate.x) == DATELINE
9069	in.intersect != in.next.coordinate
9070	out.intersect != out.next.coordinate
9071	in.next != out
9071	in.coordinate != out.intersect
9072	out.intersect != out.next.coordinate
9073	incorrectOrientation
9073	rng > DATELINE
9073	rng != 2*DATELINE
9073	component != 0
9073	translated.get()
9074	component == 0
9075	component == 0
9075	component != 0
9075	handedness == orientation
9076	points[offset + i].y < points[offset + top].y
9077	points[offset + i].y == points[offset + top].y
9078	points[offset + i].x < points[offset + top].x
9079	points[offset + i].x < minX
9080	points[offset + i].x > maxX
9081	points[offset + i].y < minY
9082	points[offset + i].y > maxY
9083	direction
9084	edges[edgeOffset + i - 1].coordinate.equals(points[pointOffset + i])
9085	direction
9086	c.x < 0
9087	this == obj
9088	getClass() != obj.getClass()
9088	obj == null
8036	index == -1
8037	success
8038	endPort < startPort
8039	success
1441	resetted
1236	canHighlight(fieldMapper) == false
1237	hitContext.cache().containsKey(CACHE_KEY)
1238	mapperHighlighterEntry == null
1239	field.fieldOptions().numberOfFragments() == 0
1240	Strings.hasText(fieldSnippet.getText())
1241	field.fieldOptions().scoreOrdered()
1242	fragments.length > 0
1243	snippet.isHighlighted()
1244	filteredSnippets.size() == 0
1245	snippets.size() > 0
1246	numberOfFragments == 0
1247	next != BreakIterator.DONE
6060	Version.CURRENT.equals(indexVersion)
6061	preBuiltAnalyzers != null
6063	Version.CURRENT.equals(indexVersion)
6064	preBuiltCharFilters != null
6052	Version.CURRENT.equals(indexVersion)
6053	preBuiltTokenFilters != null
6268	Version.CURRENT.equals(indexVersion)
6269	preBuiltTokenizers != null
8035	maybeMarker == null
4823	Strings.isEmpty(fieldName)
4824	value == null
4825	rewrite != null
4826	token == XContentParser.Token.FIELD_NAME
4827	parseContext.isDeprecatedSetting(currentFieldName)
4828	token == XContentParser.Token.START_OBJECT
4829	token == XContentParser.Token.FIELD_NAME
4830	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4831	PREFIX_FIELD.match(currentFieldName)
4832	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4833	REWRITE_FIELD.match(currentFieldName)
4834	fieldType != null
4835	query == null
4836	method != null
6334	isResponsibleFor(unassignedShard) == false
6335	shardState.hasData() == false
6336	explain
6337	enoughAllocationsFound == false
6338	snapshotRestore
6339	nodesToAllocate.yesNodeShards.isEmpty() == false
6340	nodesToAllocate.throttleNodeShards.isEmpty()
6340	nodesToAllocate.noNodeShards.isEmpty()
6341	nodesToAllocate.yesNodeShards.isEmpty() == false
6342	nodesToAllocate.throttleNodeShards.isEmpty() == false
6343	explain
6344	allocation.hasPendingAsyncFetch()
6345	node != null
6346	throttled
6347	nodesToAllocate != null
6348	ignoreNodes.contains(node.getId())
6349	nodeShardState.storeException() == null
6350	allocationId == null
6351	nodeShardState.storeException() instanceof ShardLockObtainFailedException
6352	logger.isTraceEnabled()
6353	node == null
6354	decision.type() == Type.THROTTLE
6355	decision.type() == Type.NO
7124	getQueue().size() == 0
7125	queuedRunnable instanceof PrioritizedRunnable
7126	runnable instanceof TieBreakingPrioritizedRunnable
7127	runnable instanceof PrioritizedFutureTask
7128	t.task instanceof Runnable
7129	timeout.nanos() >= 0
7130	command instanceof TieBreakingPrioritizedRunnable
7131	command instanceof PrioritizedRunnable
7132	command instanceof TieBreakingPrioritizedRunnable
7133	command instanceof PrioritizedFutureTask
7134	command instanceof TieBreakingPrioritizedRunnable
7135	runnable instanceof PrioritizedRunnable
7136	callable instanceof PrioritizedCallable
6487	o1Index.equals(o2Index) == false
6488	cmp == 0
6489	cmp == 0
7590	elements == null
7591	this.injector != null
7592	exposedKeysToSources == null
7593	source == null
7627	this.binder != null
12850	method != null
12851	load >= 0
12779	getMaxFileDescriptorCountField == null
12780	getOpenFileDescriptorCountField == null
12781	getCommittedVirtualMemorySize != null
12782	virtual >= 0
12783	cpu != null
12784	mem != null
9496	this == o
9497	o == null
9497	getClass() != o.getClass()
3056	children.isEmpty()
3057	token == XContentParser.Token.FIELD_NAME
3058	token.isValue()
3059	TYPE.match(currentFieldName)
3060	DESCRIPTION.match(currentFieldName)
3061	NODE_TIME.match(currentFieldName)
3062	NODE_TIME_RAW.match(currentFieldName)
3063	token == XContentParser.Token.START_OBJECT
3064	BREAKDOWN.match(currentFieldName)
3065	token == XContentParser.Token.START_ARRAY
3066	CHILDREN.match(currentFieldName)
3051	in == null
3044	subQueryScorer == null
6551	byteCount == -1
6552	percent > currentPercent
8680	endIndex != -1
8681	visitedPlaceholders.add(placeholder)
8682	defaultValueIdx != -1
8683	propVal == null
8684	propVal == null
8684	placeholderResolver.shouldIgnoreMissing(placeholder)
8685	placeholderResolver.shouldRemoveMissingPlaceholder(placeholder)
8686	propVal != null
8687	this.ignoreUnresolvablePlaceholders
8688	Strings.substringMatch(buf, index, this.placeholderSuffix)
8689	withinNestedPlaceholder > 0
8690	Strings.substringMatch(buf, index, this.placeholderPrefix)
7630	this.delegate != null
7594	scopeAnnotation != null
7595	exposed
7608	object instanceof ProviderMethodsModule
7609	method.getAnnotation(Provides.class) != null
7704	this.messages.isEmpty()
6575	node.equals(localNode) == false
6576	sendingController.markAsFailed("unexpected error", e)
6577	previousState.nodes().nodeExists(node)
6577	sendFullVersion
6578	sendingController.getPublishingTimedOut()
6579	pendingNodes.length > 0
6580	sendFullVersion
6580	previousState.nodes().nodeExists(node)
6581	serializedStates.containsKey(node.getVersion()) == false
6582	diff == null
6583	serializedDiffs.containsKey(node.getVersion()) == false
6584	bytes == null
6585	compressor != null
6586	in.readBoolean()
6587	lastSeenClusterState != null
6588	incomingClusterName.equals(this.clusterName)
6589	clusterState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false
6590	ZenDiscovery.shouldIgnoreOrRejectNewClusterState(logger, clusterState, incomingState)
6591	state != null
10500	name == null
10501	indexPatterns == null
10501	indexPatterns.size() == 0
10502	source.size() != 1
10502	source.containsKey(type)
10503	name.equals("template")
10504	entry.getValue() instanceof String
10505	name.equals("index_patterns")
10506	entry.getValue() instanceof String
10507	entry.getValue() instanceof List
10508	name.equals("order")
10509	"version".equals(name)
10510	(entry.getValue() instanceof Integer) == false
10511	name.equals("settings")
10512	(entry.getValue() instanceof Map) == false
10513	name.equals("mappings")
10514	entry1.getValue() instanceof Map
10515	name.equals("aliases")
10516	proto != null
10517	in.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
10518	in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
10519	out.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
10682	type == null
10683	type.isEmpty()
10684	source == null
10685	source.isEmpty()
10686	indices.length > 0
10686	concreteIndex != null
10686	indices != null
10687	source.length % 2 != 0
10688	type != null
10689	RESERVED_FIELDS.contains(fieldName)
10690	s2.length != 2
10691	RESERVED_FIELDS.contains(fieldName)
10692	s2.length != 2
10693	type != null
10694	in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
11461	in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
11462	out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
10942	name == null
10943	type == null
10944	name.equals("type")
10945	name.equals("settings")
10946	entry.getValue() instanceof Map
11023	id == null
11023	id.isEmpty()
11024	id.contains("#")
11025	lang.contains("#")
11025	lang != null
11026	content == null
11027	lang.isEmpty()
11028	in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
11029	out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
7302	query != null
7303	filter != null
7304	q instanceof BooleanQuery
7305	clauses.isEmpty()
7306	clause.isProhibited()
7307	isNegativeQuery(q)
7308	query instanceof ConstantScoreQuery
7309	query instanceof MatchAllDocsQuery
7310	minimumShouldMatch == null
7311	c.getOccur() == BooleanClause.Occur.SHOULD
7312	0 < msm
7313	((BooleanQuery) query).isCoordDisabled()
7313	query instanceof BooleanQuery
7314	query instanceof ExtendedCommonTermsQuery
7315	-1 < spec.indexOf("<")
7316	optionalClauseCount <= upperBound
7317	-1 < spec.indexOf('%')
10639	in.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)
10640	out.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)
4548	token == XContentParser.Token.FIELD_NAME
4549	"query".equals(fieldName)
4550	parser.currentToken() != XContentParser.Token.START_OBJECT
4551	parser.nextToken() != XContentParser.Token.START_OBJECT
4552	parser.nextToken() == XContentParser.Token.END_OBJECT
4553	parser.currentToken() != XContentParser.Token.FIELD_NAME
4554	parser.nextToken() != XContentParser.Token.START_OBJECT
4555	parser.currentToken() != XContentParser.Token.END_OBJECT
4556	parser.nextToken() != XContentParser.Token.END_OBJECT
5246	rewriteMethod == null
5247	rewriteMethod == null
5248	CONSTANT_SCORE.match(rewriteMethod)
5249	SCORING_BOOLEAN.match(rewriteMethod)
5250	CONSTANT_SCORE_BOOLEAN.match(rewriteMethod)
5251	Character.isDigit(rewriteMethod.charAt(i))
5252	firstDigit >= 0
5253	TOP_TERMS.match(rewriteMethodName)
5254	TOP_TERMS_BOOST.match(rewriteMethodName)
5255	TOP_TERMS_BLENDED_FREQS.match(rewriteMethodName)
675	searchContext.hasOnlySuggest()
676	rescore
677	searchContext.getProfilers() != null
678	sf == null
678	Sort.RELEVANCE.equals(sf.sort)
679	searchContext.size() == 0
680	searchContext.getProfilers() != null
681	searchContext.request().scroll() != null
682	returnsDocsInOrder(query, searchContext.sort())
683	scrollContext.totalHits == -1
684	scrollContext.lastEmittedDoc != null
685	totalNumDocs == 0
686	searchContext.collapse() == null
687	searchContext.sort() != null
688	searchContext.sort() != null
689	searchContext.sort() == null
690	doProfile
691	terminateAfterSet
692	doProfile
693	searchContext.parsedPostFilter() != null
694	doProfile
695	collector instanceof InternalProfileCollector == false
695	doProfile
696	searchContext.minimumScore() != null
697	doProfile
698	collector.getClass() == TotalHitCountCollector.class
699	query instanceof ConstantScoreQuery
700	query.getClass() == MatchAllDocsQuery.class
701	query.getClass() == TermQuery.class
701	searcher.getIndexReader().hasDeletions() == false
702	collector != null
702	timeoutSet
703	doProfile
704	collector != null
705	doProfile
706	collector != null
707	doProfile
708	terminateAfterSet
708	queryResult.terminatedEarly() == null
709	searchContext.getProfilers() != null
3045	token == XContentParser.Token.FIELD_NAME
3046	token.isValue()
3047	REWRITE_TIME.equals(currentFieldName)
3048	token == XContentParser.Token.START_ARRAY
3049	QUERY_ARRAY.equals(currentFieldName)
3050	COLLECTOR.equals(currentFieldName)
3034	this.collector != null
1127	topDocs == null
1127	topDocs.totalHits == 0
1127	topDocs.scoreDocs.length == 0
1128	sourceExplanation == null
1129	sourceExplanation.isMatch()
1130	rescoreExplain != null
1130	rescoreExplain.isMatch()
1131	in.totalHits < topN
1132	in.scoreDocs.length > resorted.scoreDocs.length
1133	builder == null
1134	this.windowSize != null
1135	this == obj
1136	obj == null
1136	getClass() != obj.getClass()
661	topDocs == null
662	topDocs == null
663	topDocs.scoreDocs[0] instanceof FieldDoc
663	topDocs.scoreDocs.length > 0
664	numFields != sortValueFormats.length
665	aggregations == null
666	profileShardResults == null
667	numSortFieldsPlus1 == 0
668	hasAggs = in.readBoolean()
669	in.readBoolean()
670	sortValueFormats == null
671	aggregations == null
672	suggest == null
5063	query != null
5064	fieldType.searchAnalyzer() != null
5065	fieldType.searchQuoteAnalyzer() != null
5066	fieldMapping != null
5066	allowUnmappedFields
5067	mapUnmappedFieldAsString
5068	types == null
5068	types.length == 0
5069	types.length == 1
5069	types[0].equals("_all")
5070	lookup == null
5071	frozen.get() == Boolean.TRUE
4158	queryString == null
4159	in.getVersion().before(Version.V_5_1_1_UNRELEASED)
4160	in.getVersion().before(Version.V_5_1_1_UNRELEASED)
4161	in.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
4162	out.getVersion().before(Version.V_5_1_1_UNRELEASED)
4163	out.getVersion().before(Version.V_5_1_1_UNRELEASED)
4164	out.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
4165	timeZone != null
4166	this.defaultField != null
4167	this.analyzer != null
4168	this.quoteAnalyzer != null
4169	this.allowLeadingWildcard != null
4170	this.fuzzyRewrite != null
4171	this.analyzeWildcard != null
4172	this.rewrite != null
4173	this.minimumShouldMatch != null
4174	this.quoteFieldSuffix != null
4175	this.lenient != null
4176	this.timeZone != null
4177	this.useAllFields != null
4178	token == XContentParser.Token.FIELD_NAME
4179	token == XContentParser.Token.START_ARRAY
4180	FIELDS_FIELD.match(currentFieldName)
4181	text[i] == '^'
4182	fField == null
4183	token.isValue()
4184	QUERY_FIELD.match(currentFieldName)
4185	DEFAULT_FIELD_FIELD.match(currentFieldName)
4186	DEFAULT_OPERATOR_FIELD.match(currentFieldName)
4187	ANALYZER_FIELD.match(currentFieldName)
4188	QUOTE_ANALYZER_FIELD.match(currentFieldName)
4189	ALLOW_LEADING_WILDCARD_FIELD.match(currentFieldName)
4190	AUTO_GENERATE_PHRASE_QUERIES_FIELD.match(currentFieldName)
4191	MAX_DETERMINIZED_STATES_FIELD.match(currentFieldName)
4192	LOWERCASE_EXPANDED_TERMS_FIELD.match(currentFieldName)
4193	ENABLE_POSITION_INCREMENTS_FIELD.match(currentFieldName)
4194	ESCAPE_FIELD.match(currentFieldName)
4195	USE_DIS_MAX_FIELD.match(currentFieldName)
4196	FUZZY_PREFIX_LENGTH_FIELD.match(currentFieldName)
4197	FUZZY_MAX_EXPANSIONS_FIELD.match(currentFieldName)
4198	FUZZY_REWRITE_FIELD.match(currentFieldName)
4199	PHRASE_SLOP_FIELD.match(currentFieldName)
4200	Fuzziness.FIELD.match(currentFieldName)
4201	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4202	TIE_BREAKER_FIELD.match(currentFieldName)
4203	ANALYZE_WILDCARD_FIELD.match(currentFieldName)
4204	REWRITE_FIELD.match(currentFieldName)
4205	MINIMUM_SHOULD_MATCH_FIELD.match(currentFieldName)
4206	QUOTE_FIELD_SUFFIX_FIELD.match(currentFieldName)
4207	LENIENT_FIELD.match(currentFieldName)
4208	LOCALE_FIELD.match(currentFieldName)
4209	ALL_FIELDS_FIELD.match(currentFieldName)
4210	MAX_DETERMINIZED_STATES_FIELD.match(currentFieldName)
4211	TIME_ZONE_FIELD.match(currentFieldName)
4212	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4213	SPLIT_ON_WHITESPACE.match(currentFieldName)
4214	queryString == null
4215	useAllFields != null
4215	defaultField != null
4215	useAllFields
4215	fieldsAndWeights.size() != 0
4216	MapperService.isMetadataField(fieldName)
4217	autoGeneratePhraseQueries
4217	splitOnWhitespace == false
4218	this.escape
4219	useAllFields != null
4219	useAllFields
4219	fieldsAndWeights.size() != 0
4219	this.defaultField != null
4220	this.defaultField == null
4220	context.getMapperService().allEnabled() == false
4220	this.fieldsAndWeights.size() == 0
4220	this.useAllFields != null
4220	this.useAllFields
4220	"_all".equals(context.defaultField())
4221	Regex.isSimpleMatchPattern(fieldName)
4222	analyzer == null
4223	namedAnalyzer == null
4224	quoteAnalyzer != null
4225	namedAnalyzer == null
4226	analyzer != null
4227	query == null
5044	validationException == null
5045	validationException == null
5629	this.flushBuffer != 0
5629	term == null
5630	this.flushBuffer >= FLUSH_BUFFER_SIZE
7229	uidFieldData == null
7230	uidByteData == null
5234	in.readBoolean()
5235	seed != null
5236	seed == null
5237	seed != null
5238	fieldType == null
5239	token == XContentParser.Token.FIELD_NAME
5240	token.isValue()
5241	"seed".equals(currentFieldName)
5242	token == XContentParser.Token.VALUE_NUMBER
5243	parser.numberType() == XContentParser.NumberType.INT
5244	parser.numberType() == XContentParser.NumberType.LONG
5245	token == XContentParser.Token.VALUE_STRING
7209	setting.exists(settings)
7210	currentMethod != null
7210	getRandomMethod != null
3870	context.externalValueSet()
3871	parser.currentToken() == XContentParser.Token.START_OBJECT
3872	token == XContentParser.Token.FIELD_NAME
3873	fieldName.equals(GT_FIELD.getPreferredName())
3874	parser.currentToken() != XContentParser.Token.VALUE_NULL
3875	fieldName.equals(GTE_FIELD.getPreferredName())
3876	parser.currentToken() != XContentParser.Token.VALUE_NULL
3877	fieldName.equals(LT_FIELD.getPreferredName())
3878	parser.currentToken() != XContentParser.Token.VALUE_NULL
3879	fieldName.equals(LTE_FIELD.getPreferredName())
3880	parser.currentToken() != XContentParser.Token.VALUE_NULL
3881	includeInAll
3882	other.coerce.explicit()
3883	fieldType().dateTimeFormatter() != null
3883	fieldType().dateTimeFormatter().format().equals(DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.format()) == false
3883	fieldType().rangeType == RangeType.DATE
3883	includeDefaults
3884	includeDefaults
3884	fieldType().dateTimeFormatter() != null
3884	fieldType().rangeType == RangeType.DATE
3884	fieldType().dateTimeFormatter().locale() != Locale.ROOT
3885	coerce.explicit()
3885	includeDefaults
3886	includeInAll != null
3887	includeDefaults
3888	indexed
3889	stored
3890	relation == ShapeRelation.WITHIN
3891	relation == ShapeRelation.CONTAINS
4350	Strings.isEmpty(fieldName)
4351	formatString != null
4352	in.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)
4353	relationString != null
4354	this.format != null
4355	out.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)
4356	this.relation != null
4357	timeZone == null
4358	format == null
4359	this.format != null
4360	relation == null
4361	this.relation == null
4362	timeZone != null
4363	format != null
4364	relation != null
4365	token == XContentParser.Token.FIELD_NAME
4366	parseContext.isDeprecatedSetting(currentFieldName)
4367	token == XContentParser.Token.START_OBJECT
4368	token == XContentParser.Token.FIELD_NAME
4369	FROM_FIELD.match(currentFieldName)
4370	TO_FIELD.match(currentFieldName)
4371	INCLUDE_LOWER_FIELD.match(currentFieldName)
4372	INCLUDE_UPPER_FIELD.match(currentFieldName)
4373	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4374	GT_FIELD.match(currentFieldName)
4375	GTE_FIELD.match(currentFieldName)
4376	LT_FIELD.match(currentFieldName)
4377	LTE_FIELD.match(currentFieldName)
4378	TIME_ZONE_FIELD.match(currentFieldName)
4379	FORMAT_FIELD.match(currentFieldName)
4380	RELATION_FIELD.match(currentFieldName)
4381	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4382	token.isValue()
4383	NAME_FIELD.match(currentFieldName)
4384	FIELDDATA_FIELD.match(currentFieldName)
4385	timeZone != null
4386	format != null
4387	relation != null
4388	reader == null
4389	fieldType == null
4390	to != null
4390	timeZone != null
4390	from != null
4390	format != null
4391	mapper != null
4392	mapper instanceof DateFieldMapper.DateFieldType
4393	mapper.typeName() == RangeFieldMapper.RangeType.DATE.name
4393	mapper instanceof RangeFieldMapper.RangeFieldType
4394	this.format != null
4395	timeZone != null
4396	timeZone != null
4397	query == null
5763	bytesSinceLastRateLimit >= rateLimiter.getMinPauseCheckBytes()
5764	pause > 0
5765	n > 0
7833	sValue.endsWith("%")
7834	percent < 0
7834	percent > 100
7835	ratio > 1.0
7835	ratio < 0
9619	obj.getClass() != RawTaskStatus.class
9619	obj == null
11945	allocation.routingNodes().allReplicasActive(shardRouting.shardId(), allocation.metaData())
6772	oldRecoveryTarget == null
6773	successfulReset
6774	status.tryIncRef()
6774	status != null
6775	recoveryRef == null
6776	removed != null
6777	removed != null
6778	removed != null
6779	status.shardId().equals(shardId)
6770	in.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
6771	out.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
10653	hasRecoveries()
10654	recoveryStates == null
10654	recoveryStates.size() == 0
6748	maxBytesPerSec.getBytes() <= 0
6749	chunkSize.bytesAsInt() <= 0
6750	maxBytesPerSec.getBytes() <= 0
6751	rateLimiter != null
11716	this == o
11717	getClass() != o.getClass()
11717	o == null
6723	isSequenceNumberBasedRecoveryPossible
6724	shard.state() == IndexShardState.RELOCATED
6725	startingSeqNo - 1 <= endingSeqNo
6726	operation.seqNo() != SequenceNumbersService.UNASSIGNED_SEQ_NO
6727	md == null
6728	recoverWithSyncId
6729	numDocsTarget != numDocsSource
6730	logger.isTraceEnabled()
6731	request.metadataSnapshot().asMap().containsKey(md.name())
6732	(corruptIndexException = ExceptionsHelper.unwrapCorruption(targetException)) != null
6733	store.checkIntegrityNoException(md) == false
6734	shard.state() == IndexShardState.CLOSED
6735	shard.state() == IndexShardState.CLOSED
6736	request.isPrimaryRelocation()
6737	snapshot.totalOperations() == 0
6738	shard.state() == IndexShardState.CLOSED
6739	startingSeqNo >= 0
6739	seqNo == SequenceNumbersService.UNASSIGNED_SEQ_NO
6739	seqNo < startingSeqNo
6740	size >= chunkSizeInBytes
6741	logger.isTraceEnabled()
6742	operations.isEmpty()
6743	logger.isTraceEnabled()
6744	(corruptIndexException = ExceptionsHelper.unwrapCorruption(e)) != null
6745	store.checkIntegrityNoException(md) == false
6752	id < 0
6752	id >= STAGES.length
6753	stage != expected
6754	timer.stopTime > 0
6755	recoverySource.getType() == RecoverySource.Type.PEER
5358	recoveryStats != null
5359	recoveryStats != null
6761	finished.compareAndSet(false, true)
6762	indexShard.recoveryState().getPrimary()
6762	stage == RecoveryState.Stage.FINALIZE
6762	stage == RecoveryState.Stage.DONE
6763	finished.compareAndSet(false, true)
6764	finished.compareAndSet(false, true)
6765	finished.compareAndSet(false, true)
6766	tempFileNames.containsKey(tempFileName)
6767	refCount() <= 0
6768	position == 0
6769	indexOutput.getFilePointer() >= fileMetaData.length()
6769	lastChunk
6034	lastRefreshedLocation != null
6034	lastRefreshedLocation.compareTo(location) >= 0
6035	listeners == null
6036	closed
6037	listeners.size() < getMaxRefreshListeners.getAsInt()
6038	null == currentRefreshLocation
6039	candidates == null
6040	location.compareTo(currentRefreshLocation) <= 0
6041	listenersToFire == null
6042	preservedListeners == null
6043	closed
6044	listenersToFire != null
5360	refreshStats == null
5361	in.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)
5362	out.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)
5363	obj == null
5363	obj.getClass() != RefreshStats.class
8077	patterns.length < 1
8078	str == null
8078	pattern == null
8079	firstIndex == -1
8080	firstIndex == 0
8081	pattern.length() == 1
8082	nextIndex == -1
8083	nextIndex == 1
8084	simpleMatch(pattern.substring(nextIndex), str.substring(partIndex + part.length()))
8085	patterns != null
8086	simpleMatch(pattern, str)
8087	types != null
8087	patterns != null
8088	simpleMatch(pattern, type)
8089	s.isEmpty()
8090	"CASE_INSENSITIVE".equals(s)
8091	"MULTILINE".equals(s)
8092	"DOTALL".equals(s)
8093	"UNICODE_CASE".equals(s)
8094	"CANON_EQ".equals(s)
8095	"UNIX_LINES".equals(s)
8096	"LITERAL".equals(s)
8097	"COMMENTS".equals(s)
8098	"UNICODE_CHAR_CLASS".equals(s)
8098	"UNICODE_CHARACTER_CLASS".equals(s)
8099	(flags & Pattern.CASE_INSENSITIVE) != 0
8100	(flags & Pattern.MULTILINE) != 0
8101	(flags & Pattern.DOTALL) != 0
8102	(flags & Pattern.UNICODE_CASE) != 0
8103	(flags & Pattern.CANON_EQ) != 0
8104	(flags & Pattern.UNIX_LINES) != 0
8105	(flags & Pattern.LITERAL) != 0
8106	(flags & Pattern.COMMENTS) != 0
8107	(flags & UNICODE_CHARACTER_CLASS) != 0
987	this == o
988	getClass() != o.getClass()
988	o == null
989	flagsValue != that.flagsValue
4286	Strings.isEmpty(fieldName)
4287	value == null
4288	flags == null
4289	flags.length == 0
4290	rewrite != null
4291	token == XContentParser.Token.FIELD_NAME
4292	parseContext.isDeprecatedSetting(currentFieldName)
4293	token == XContentParser.Token.START_OBJECT
4294	token == XContentParser.Token.FIELD_NAME
4295	VALUE_FIELD.match(currentFieldName)
4296	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4297	REWRITE_FIELD.match(currentFieldName)
4298	FLAGS_FIELD.match(currentFieldName)
4299	MAX_DETERMINIZED_STATES_FIELD.match(currentFieldName)
4300	FLAGS_VALUE_FIELD.match(currentFieldName)
4301	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4302	NAME_FIELD.match(currentFieldName)
4303	fieldType != null
4304	query == null
4305	method != null
7173	useHoldingThreads
7174	holdingThreads == null
10191	connectedNodes.size() < maxNumRemoteConnections
10191	remove
10192	connectedNodes.isEmpty()
10193	anyNode.isPresent() == false
10082	seeds.containsKey(LOCAL_CLUSTER_GROUP_KEY)
10083	seeds.isEmpty()
10084	REMOTE_NODE_ATTRIBUTE.exists(settings)
10085	entry.getValue().isEmpty()
10086	remote == null
10087	i >= 0
10088	clusters.isEmpty() == false
10089	indexExists.test(index)
10090	remoteClusterConnection == null
10091	connection == null
10092	portSeparator == -1
10092	portSeparator == remoteHost.length()
10093	port <= 0
10094	remoteClusters.isEmpty()
10116	this == o
10117	o == null
10117	getClass() != o.getClass()
6746	rl != null
6747	bytes > rl.getMinPauseCheckBytes()
6553	pluginName == null
6554	Files.exists(pluginDir) == false
6555	Files.exists(pluginBinDir)
6556	Files.isDirectory(pluginBinDir) == false
6557	Files.exists(pluginConfigDir)
8652	settings.isEmpty()
8653	keystore == null
8654	keystore.getSettingNames().contains(setting) == false
11958	shardRouting.primary()
11959	primary == null
6399	shard.primary()
6400	shard.initializing() == false
6401	shard.relocatingNodeId() != null
6402	shard.unassignedInfo().getReason() == UnassignedInfo.Reason.INDEX_CREATED
6402	shard.unassignedInfo() != null
6403	shardStores.hasData() == false
6404	isResponsibleFor(unassignedShard) == false
6405	explain == false
6405	hasInitiatedFetching(unassignedShard) == false
6405	allocateDecision.type() != Decision.Type.YES
6406	shardStores.hasData() == false
6407	explain
6408	primaryShard == null
6409	primaryStore == null
6410	allocateDecision.type() != Decision.Type.YES
6411	matchingNodes.getNodeWithHighestMatch() != null
6412	decision.type() == Decision.Type.THROTTLE
6413	unassignedShard.unassignedInfo().isDelayed()
6413	matchingNodes.hasAnyData() == false
6414	explain
6415	node == null
6416	madeDecision.type() != Decision.Type.YES
6416	decision.type() == Decision.Type.YES
6417	explain
6418	decision.type() == Decision.Type.THROTTLE
6418	madeDecision.type() == Decision.Type.NO
6419	explain
6420	withShardStores == null
6420	nodeDecisions == null
6421	withShardStores.containsKey(entry.getKey())
6422	primaryNode == null
6423	primaryNodeFilesStore == null
6424	storeFilesMetaData.isEmpty()
6425	node == null
6426	explain
6427	decision.type() == Decision.Type.NO
6428	matchingBytes < 0
6429	logger.isTraceEnabled()
6430	matchingBytes == Long.MAX_VALUE
6431	replicaSyncId.equals(primarySyncId)
6431	replicaSyncId != null
6432	primaryStore.file(metaDataFileName).isSame(storeFileMetaData)
6432	primaryStore.fileExists(metaDataFileName)
11610	activeShardCountFailure != null
11611	replicaRequest != null
11612	logger.isTraceEnabled()
11613	shards.isEmpty() == false
11613	inSyncAllocationIds.isEmpty() == false
11614	shard.unassigned()
11615	shard.primary() == false
11616	shard.currentNodeId().equals(localNodeId) == false
11617	shard.relocatingNodeId().equals(localNodeId) == false
11617	shard.relocating()
11618	logger.isTraceEnabled()
11619	indexMetaData != null
11620	pendingActions.decrementAndGet() == 0
11621	finished.compareAndSet(false, true)
11622	shardReplicaFailures.isEmpty()
11623	finished.compareAndSet(false, true)
11624	index == null
11625	in.readBoolean()
11626	shardId != null
12451	name.equals(repository.name())
12452	this == o
12453	getClass() != o.getClass()
12453	o == null
12454	token == XContentParser.Token.FIELD_NAME
12455	parser.nextToken() != XContentParser.Token.START_OBJECT
12456	token == XContentParser.Token.FIELD_NAME
12457	"type".equals(currentFieldName)
12458	parser.nextToken() != XContentParser.Token.VALUE_STRING
12459	"settings".equals(currentFieldName)
12460	parser.nextToken() != XContentParser.Token.START_OBJECT
12461	type == null
9778	factories.put(entry.getKey(), entry.getValue()) != null
9712	DiscoveryNode.isDataNode(settings)
9712	DiscoveryNode.isMasterNode(settings)
9713	request.verify
9714	verificationToken != null
9715	oldMetaData == null
9715	newMetaData == null
9715	oldMetaData != null
9715	oldMetaData.equals(newMetaData)
9716	newMetaData.repository(entry.getKey()) == null
9716	newMetaData == null
9717	newMetaData != null
9718	repository != null
9719	previousMetadata.settings().equals(repositoryMetaData.settings()) == false
9719	previousMetadata.type().equals(repositoryMetaData.type()) == false
9720	repository != null
9721	repository != null
9722	previous != null
9723	previousMetadata.type().equals(repositoryMetaData.type())
9723	previousMetadata.settings().equals(repositoryMetaData.settings())
9724	previous != null
9725	factory == null
9726	SnapshotsService.isRepositoryInUse(clusterState, repository)
9726	RestoreService.isRepositoryInUse(clusterState, repository)
9727	snapshotIds.contains(snapshotId)
9728	allIndexSnapshots.containsKey(indexId)
9729	ids == null
9730	snapshotIds == null
9731	this == obj
9732	getClass() != obj.getClass()
9732	obj == null
9733	indices.containsKey(indexName)
9734	indices.containsKey(index)
9735	parser.nextToken() == XContentParser.Token.START_OBJECT
9736	SNAPSHOTS.equals(currentFieldName)
9737	parser.nextToken() == XContentParser.Token.START_ARRAY
9738	INDICES.equals(currentFieldName)
9739	parser.nextToken() != XContentParser.Token.START_OBJECT
9740	parser.nextToken() != XContentParser.Token.START_OBJECT
9741	INDEX_ID.equals(indexMetaFieldName)
9742	SNAPSHOTS.equals(indexMetaFieldName)
9743	parser.currentToken() != XContentParser.Token.START_ARRAY
9744	parser.nextToken() == XContentParser.Token.START_OBJECT
9745	INCOMPATIBLE_SNAPSHOTS.equals(currentFieldName)
9746	parser.nextToken() == XContentParser.Token.START_ARRAY
12318	this == o
12319	o == null
12319	getClass() != o.getClass()
12320	name.equals(that.name)
12321	type.equals(that.type)
9411	task == null
9412	success == false
1117	token == XContentParser.Token.FIELD_NAME
1118	token.isValue()
1119	WINDOW_SIZE_FIELD.match(fieldName)
1120	token == XContentParser.Token.START_OBJECT
1121	QueryRescorerBuilder.NAME.equals(fieldName)
1122	rescorer == null
1123	windowSize != null
1124	windowSize != null
1125	this == obj
1126	obj == null
1126	getClass() != obj.getClass()
643	enabled
644	enabled
411	request.hasParam("version")
412	ifMatch != null
413	shardFailures.length > 0
413	shardFailures != null
414	failures.isEmpty() == false
415	queryString == null
416	defaultOperator != null
613	shard.assignedToNode()
614	total.getBytes() > 0
615	used >= 0
615	avail.getBytes() >= 0
616	allocs.containsKey(UNASSIGNED)
424	parser.nextToken() != XContentParser.Token.START_OBJECT
425	token == XContentParser.Token.FIELD_NAME
426	Fields.TEXT.match(currentFieldName)
426	token == XContentParser.Token.VALUE_STRING
427	Fields.TEXT.match(currentFieldName)
427	token == XContentParser.Token.START_ARRAY
428	token.isValue() == false
429	token == XContentParser.Token.VALUE_STRING
429	Fields.ANALYZER.match(currentFieldName)
430	Fields.FIELD.match(currentFieldName)
430	token == XContentParser.Token.VALUE_STRING
431	Fields.TOKENIZER.match(currentFieldName)
432	token == XContentParser.Token.VALUE_STRING
433	token == XContentParser.Token.START_OBJECT
434	Fields.TOKEN_FILTERS.match(currentFieldName)
434	token == XContentParser.Token.START_ARRAY
435	token == XContentParser.Token.VALUE_STRING
436	token == XContentParser.Token.START_OBJECT
437	Fields.CHAR_FILTERS.match(currentFieldName)
437	token == XContentParser.Token.START_ARRAY
438	token == XContentParser.Token.VALUE_STRING
439	token == XContentParser.Token.START_OBJECT
440	Fields.EXPLAIN.match(currentFieldName)
441	parser.isBooleanValue()
442	Fields.ATTRIBUTES.match(currentFieldName)
442	token == XContentParser.Token.START_ARRAY
443	token.isValue() == false
532	fieldsParam != null
533	waitForActiveShards != null
419	Fields.QUERY.match(entry.getKey())
420	Fields.REQUEST.match(entry.getKey())
421	Fields.FIELD_DATA.match(entry.getKey())
422	Fields.RECYCLER.match(entry.getKey())
423	Fields.FIELDS.match(entry.getKey())
388	scrollIds == null
389	parser.nextToken() != XContentParser.Token.START_OBJECT
390	token == XContentParser.Token.FIELD_NAME
391	token == XContentParser.Token.START_ARRAY
391	"scroll_id".equals(currentFieldName)
392	token.isValue() == false
488	request.hasContentOrSourceParam() == false
496	renderDefaults
497	waitForStatus != null
498	request.hasParam("wait_for_relocating_shards")
499	waitForActiveShards != null
500	request.param("wait_for_events") != null
518	metric == null
491	isAllIndicesOnly
492	request.hasParam("metric")
483	source.containsKey("transient")
484	source.containsKey("persistent")
284	handlerWrapper == null
285	handlers != null
286	request.rawPath().equals("/favicon.ico")
287	cause == null
288	cause instanceof Exception
289	cause != null
290	checkRequestParameters(request, channel) == false
291	httpHeader != null
292	handler == null
293	request.method() == RestRequest.Method.OPTIONS
294	restRequest.getXContentType() == null
295	restHandler != null
295	restRequest.header("Content-Type") != null
295	restHandler.supportsContentStream()
296	lowercaseMediaType.equals("application/x-ndjson")
297	contentTypeHeader == null
298	channel.detailedErrorsEnabled() == false
298	request.paramAsBoolean("error_trace", false)
299	handlers != null
300	method == RestRequest.Method.GET
301	method == RestRequest.Method.POST
302	method == RestRequest.Method.PUT
303	method == RestRequest.Method.DELETE
304	method == RestRequest.Method.HEAD
305	method == RestRequest.Method.OPTIONS
306	request.method() == RestRequest.Method.GET
529	minScore != -1f
530	terminateAfter < 0
531	terminateAfter > 0
468	request.hasContent()
545	waitForActiveShards != null
486	id == null
487	lang != null
380	request.param("fields") != null
381	sField != null
382	sFields != null
634	request.hasParam("fields")
634	request.hasContentOrSourceParam()
635	request.hasContentOrSourceParam()
521	request.hasParam("fields")
521	request.hasContentOrSourceParam()
522	request.hasContentOrSourceParam()
546	nodeStats.getIndices().getFieldData().getFields() != null
526	request.param("fields") != null
527	fieldsParam != null
528	fields != null
417	names.length == 0
417	names == null
418	names.length == 1
481	mappingsByIndex.size() != 1
482	fieldMappingMetaDataEntry.getValue().isNull()
470	"_all".equals(indices[0])
470	indices[0].startsWith("_")
470	featureParams == null
470	indices.length > 0
470	indices[0] != null
471	featureParams != null
519	request.param("id") == null
520	lang != null
524	waitForActiveShards != null
525	sOpType != null
444	request.hasContent()
445	token == null
446	token == XContentParser.Token.FIELD_NAME
447	token.isValue()
448	"index".equals(currentFieldName)
449	"alias".equals(currentFieldName)
450	"routing".equals(currentFieldName)
451	"indexRouting".equals(currentFieldName)
451	"index_routing".equals(currentFieldName)
451	"index-routing".equals(currentFieldName)
452	"searchRouting".equals(currentFieldName)
452	"search-routing".equals(currentFieldName)
452	"search_routing".equals(currentFieldName)
453	token == XContentParser.Token.START_OBJECT
454	"filter".equals(currentFieldName)
455	routing != null
456	searchRouting != null
457	indexRouting != null
458	filter != null
547	healthParam != null
548	status != null
549	indexHealth.getStatus().equals(status)
549	indexHealth == null
549	ClusterHealthStatus.RED.equals(status)
549	state == IndexMetaData.State.CLOSE
467	indicesAliasesRequest.getAliasActions().isEmpty()
463	request.hasParam("status")
472	metrics.contains("_all")
472	metrics.size() == 1
473	metrics.contains("_all")
474	consumer != null
475	invalidMetrics.isEmpty()
476	request.hasParam("groups")
477	request.hasParam("types")
478	request.hasParam("completion_fields")
478	request.hasParam("fields")
478	indicesStatsRequest.completion()
479	request.hasParam("fields")
479	request.hasParam("fielddata_fields")
479	indicesStatsRequest.fieldData()
480	indicesStatsRequest.segments()
516	"nodes".equals(groupBy)
517	"parents".equals(groupBy)
523	request.hasParam("pretty") == false
550	master == null
534	request.param("fields") != null
535	sField != null
393	restRequest.hasParam("max_concurrent_searches")
394	nextMarker == -1
395	nextMarker == 0
396	indices != null
397	indicesOptions != null
398	types.length > 0
398	types != null
399	routing != null
400	searchType != null
401	nextMarker - from > 0
402	"index".equals(entry.getKey())
402	"indices".equals(entry.getKey())
403	allowExplicitIndex
404	"type".equals(entry.getKey())
404	"types".equals(entry.getKey())
405	"search_type".equals(entry.getKey())
405	"searchType".equals(entry.getKey())
406	"requestCache".equals(entry.getKey())
406	"request_cache".equals(entry.getKey())
407	"preference".equals(entry.getKey())
408	"routing".equals(entry.getKey())
409	nextMarker == -1
410	data.get(i) == marker
617	httpInfo != null
618	node.getRoles().isEmpty()
493	request.hasParam("metrics")
493	request.hasParam("nodeId")
494	isMetricsOnly
495	metrics.size() == 1
495	metrics.contains("_all")
501	metrics.size() == 1
501	metrics.contains("_all")
502	request.hasParam("index_metric")
503	metrics.contains("_all")
504	handler != null
505	invalidMetrics.isEmpty()
506	metrics.contains("indices")
507	indexMetrics.contains("_all")
507	indexMetrics.size() == 1
508	handler != null
509	invalidIndexMetrics.isEmpty()
510	request.hasParam("index_metric")
511	nodesStatsRequest.indices().isSet(Flag.FieldData)
511	request.hasParam("fields")
511	request.hasParam("fielddata_fields")
512	request.hasParam("completion_fields")
512	request.hasParam("fields")
512	nodesStatsRequest.indices().isSet(Flag.Completion)
513	nodesStatsRequest.indices().isSet(Flag.Search)
513	request.hasParam("groups")
514	nodesStatsRequest.indices().isSet(Flag.Indexing)
514	request.hasParam("types")
515	nodesStatsRequest.indices().isSet(Flag.Segments)
466	request.hasParam("template")
489	id == null
490	lang != null
553	shardRecoveryStates.size() == 0
307	pathEndPos < 0
308	xContentType != null
309	xContentType != null
310	values.isEmpty() == false
310	values != null
311	values != null
312	value == null
313	sValue == null
314	sValue == null
315	sValue == null
316	rawParam != null
316	rawParam.length() == 0
317	value == null
318	Strings.isAllOrWildcard(params)
319	content.length() == 0
320	xContentType.get() == null
321	hasContent()
322	content.length() == 0
323	content.length() > 0
324	hasContent()
325	xContentType.get() == null
326	source != null
326	typeParam != null
327	xContentType == null
328	header.isEmpty()
328	header == null
329	header.size() > 1
330	elements.length > 0
331	TCHAR_PATTERN.matcher(splitMediaType[1].trim()).matches()
331	TCHAR_PATTERN.matcher(splitMediaType[0]).matches()
331	splitMediaType.length == 2
272	customHeaders == null
273	values == null
274	customHeaders == null
275	header == null
354	searchRequest.source() == null
355	requestContentParser != null
356	"dfs_query_and_fetch".equals(searchType)
356	"query_and_fetch".equals(searchType)
357	scroll != null
358	queryBuilder != null
359	from != -1
360	size != -1
361	request.hasParam("explain")
362	request.hasParam("version")
363	request.hasParam("timeout")
364	request.hasParam("terminate_after")
365	terminateAfter < 0
366	terminateAfter > 0
367	request.param("fields") != null
368	storedFieldsContext != null
369	sDocValueFields == null
370	sDocValueFields != null
371	Strings.hasText(sDocValueFields)
372	fetchSourceContext != null
373	request.hasParam("track_scores")
374	sSorts != null
375	delimiter != -1
376	"asc".equals(reverse)
377	"desc".equals(reverse)
378	sStats != null
379	suggestField != null
383	scroll != null
384	parser.nextToken() != XContentParser.Token.START_OBJECT
385	token == XContentParser.Token.FIELD_NAME
386	"scroll_id".equals(currentFieldName)
386	token == XContentParser.Token.VALUE_STRING
387	token == XContentParser.Token.VALUE_STRING
387	"scroll".equals(currentFieldName)
628	shardStats != null
629	shard.primary()
630	shard.assignedToNode()
631	shard.relocating()
632	shard.unassignedInfo() != null
633	shard.recoverySource() != null
464	request.param("target") == null
465	request.param("index") == null
551	snapshotStatus.state() == SnapshotState.IN_PROGRESS
485	"_all".equalsIgnoreCase(snapshots[0])
485	snapshots.length == 1
636	RestStatus.CREATED == restResponse.status()
637	location != null
558	xContentType != null
559	verbose
560	isLastColumn
561	isLastColumn
562	columnOrdering != null
563	columnHeader.endsWith(":desc")
564	columnHeader.endsWith(":asc")
565	headerAliasMap.containsKey(columnHeader)
566	request.hasParam("h")
567	table.getAsMap().containsKey(possibility)
568	aliases != null
569	possibility.equals(alias)
570	dispHeader != null
570	checkOutputTimestamp(dispHeader, request)
571	siblingFlag != null
572	c != null
572	request.paramAsBoolean(siblingFlag, false)
573	checkOutputTimestamp(cell.value.toString(), request)
573	Booleans.parseBoolean(d, true)
574	Table.TIMESTAMP.equals(disp)
574	Table.EPOCH.equals(disp)
575	Regex.isSimpleMatchPattern(header)
576	Regex.simpleMatch(header, configuredHeader)
577	tableHeaderCell.attr.containsKey("alias")
578	Regex.simpleMatch(header, alias)
579	width[0] < vWidth
580	width[1] < vWidth
581	width[2] < vWidth
582	verbose
583	width[i] < vWidth
584	width[i] < vWidth
585	textAlign == null
586	textAlign.equals("right")
586	leftOver > 0
587	sValue != null
588	sValue != null
589	isLast
590	value == null
591	value instanceof ByteSizeValue
592	"b".equals(resolution)
593	"kb".equals(resolution)
593	"k".equals(resolution)
594	"mb".equals(resolution)
594	"m".equals(resolution)
595	"g".equals(resolution)
595	"gb".equals(resolution)
596	"tb".equals(resolution)
596	"t".equals(resolution)
597	"pb".equals(resolution)
597	"p".equals(resolution)
598	value instanceof SizeValue
599	"".equals(resolution)
600	"k".equals(resolution)
601	"m".equals(resolution)
602	"g".equals(resolution)
603	"t".equals(resolution)
604	"p".equals(resolution)
605	value instanceof TimeValue
606	"nanos".equals(resolution)
607	"micros".equals(resolution)
608	"ms".equals(resolution)
609	"s".equals(resolution)
610	"m".equals(resolution)
611	"h".equals(resolution)
612	"d".equals(resolution)
554	detailed
555	taskInfo.getParentTaskId().isSet()
556	detailed
552	patternString == null
552	Regex.simpleMatch(patternString, indexData.name())
540	request.hasContentOrSourceParam()
541	fields != null
542	selectedFields == null
543	selectedFields.contains(field)
544	selectedFields != null
619	Regex.simpleMatch(threadPools, candidate)
620	stats == null
621	info != null
622	included.contains(entry.getKey())
623	poolInfo != null
624	poolInfo.getQueueSize() != null
625	poolInfo.getKeepAlive() != null
626	poolInfo.getMin() >= 0
627	poolInfo.getMax() >= 0
536	waitForActiveShards != null
537	sField != null
537	fetchSourceContext != null
538	sField != null
539	fetchSourceContext != null
459	request.hasContent()
460	innerBodySettings instanceof Map
461	request.method().equals(RestRequest.Method.GET)
462	request.method().equals(RestRequest.Method.POST)
332	fromIndex < 0
333	fromIndex >= s.length()
334	name == null
334	c == '='
335	pos != i
336	c == ';'
336	c == '&'
337	name == null
337	pos != i
338	name != null
339	pos != i
340	name == null
341	name != null
342	s == null
343	decodingNeeded(s, size)
344	i == size - 1
345	c == '%'
346	i == size - 1
347	c == Character.MAX_VALUE
347	c2 == Character.MAX_VALUE
348	'0' <= c
348	c <= '9'
349	c <= 'f'
349	'a' <= c
350	'A' <= c
350	c <= 'F'
351	corsSetting == null
352	isRegex
353	Strings.isNullOrEmpty(corsSetting)
469	explain
12521	this == o
12522	getClass() != o.getClass()
12522	o == null
12523	entries.equals(that.entries)
12524	i + 1 < entries.size()
9917	incompatibleSnapshotId.isPresent()
9918	matchingSnapshotId.isPresent() == false
9919	deletedIndices.contains(shardId.getIndex())
9920	shardsBuilder == null
9921	shardsBuilder != null
9922	changesMade
9923	restoreInProgress != null
9924	e.snapshot().equals(snapshot)
9925	restoreInProgress != null
9926	entry.state().completed()
9927	status.value.state().completed()
9928	status.value.state() == RestoreInProgress.State.FAILURE
9929	hasFailed
9930	status.value.state().completed()
9931	status.value.state() == RestoreInProgress.State.FAILURE
9932	request.renameReplacement() != null
9932	request.renamePattern() != null
9933	previousIndex != null
9934	snapshotInfo.state().restorable()
9935	Version.CURRENT.before(snapshotInfo.version())
9936	index.equals(failure.index())
9937	restore != null
9938	shard.value.state().completed()
9939	indices.contains(indexMetaData)
9939	indexMetaData != null
9940	indicesToFail == null
9941	indicesToFail != null
9942	event.localNodeMaster()
9943	snapshots != null
9944	repository.equals(snapshot.snapshot().getRepository())
11054	snapshot == null
11055	repository == null
11056	indices == null
11057	indicesOptions == null
11058	settings == null
11059	indexSettings == null
11060	ignoreIndexSettings == null
11061	name.equals("indices")
11062	entry.getValue() instanceof String
11063	entry.getValue() instanceof ArrayList
11064	name.equals("partial")
11065	name.equals("settings")
11066	entry.getValue() instanceof Map
11067	name.equals("include_global_state")
11068	name.equals("include_aliases")
11069	name.equals("rename_pattern")
11070	entry.getValue() instanceof String
11071	name.equals("rename_replacement")
11072	entry.getValue() instanceof String
11073	name.equals("index_settings")
11074	entry.getValue() instanceof Map
11075	name.equals("ignore_index_settings")
11076	entry.getValue() instanceof String
11077	entry.getValue() instanceof List
11078	IndicesOptions.isIndicesOptions(name) == false
11051	restoreInfo == null
11052	restoreInfo != null
2187	path == null
2188	findNestedAggregatorFactory(parent) == null
2189	path != null
2190	parentObjectMapper == null
2191	parentObjectMapper.nested().isNested() == false
2192	parent == null
2193	parent instanceof NestedAggregatorFactory
2194	path != null
2195	token == XContentParser.Token.FIELD_NAME
2196	token == XContentParser.Token.VALUE_STRING
2197	"path".equals(currentFieldName)
2198	path != null
2185	objectMapper == null
2186	parentDocs == null
2182	unmapped
10679	alias == null
10680	createIndexRequest == null
3902	dynamicTemplate == null
3903	typeParser == null
3904	dynamicTemplate.match(pathAsString, name, matchType)
3905	mergeWithObject.numericDetection.explicit()
3906	mergeWithObject.dateDetection.explicit()
3907	mergeWithObject.dynamicDateTimeFormatters.explicit()
3908	mergeWithObject.dynamicTemplates.explicit()
3909	includeDefaults
3909	dynamicDateTimeFormatters.explicit()
3910	dynamicTemplates.explicit()
3910	includeDefaults
3911	includeDefaults
3911	dateDetection.explicit()
3912	includeDefaults
3912	numericDetection.explicit()
11904	ignoredShardToNodes == null
11905	nodes == null
11906	ignoredShardToNodes == null
11907	ignoredShardToNodes == null
11908	ignore == null
11909	debugDecision()
3943	routing != null
3944	fieldType().stored()
3944	fieldType().indexOptions() != IndexOptions.NONE
3945	includeDefaults
3945	required == Defaults.REQUIRED
3946	includeDefaults
3946	required != Defaults.REQUIRED
12261	previousValue != null
12262	shards.containsKey(shard.shardId())
12263	shards.containsKey(oldShard.shardId()) == false
12264	shardEntry.state() == state
12265	shardEntry.state() == state
12266	shardEntry.getIndexName().equals(index)
12267	shardEntry.state() == state
12268	shardEntry.state() != ShardRoutingState.RELOCATING
12207	routing.recoverySource().getType() == RecoverySource.Type.PEER
12208	primary == null
12209	routing.relocatingNodeId() != null
12209	increment == false
12209	routing.primary()
12210	assigned.primary() == false
12210	assigned.recoverySource().getType() == RecoverySource.Type.PEER
12210	assigned.initializing()
12211	routing.recoverySource().getType() == RecoverySource.Type.PEER
12211	routing.recoverySource() != null
12212	shardRoutings != null
12213	shardRouting.primary()
12214	shardRouting.active()
12215	primary == null
12216	primary.relocatingNodeId() != null
12217	nodesPerAttributesCounts != null
12218	replicaSet == null
12219	shardRouting.allocationId().getId().equals(allocationId)
12220	shardRouting.primary()
12220	shardRouting.active()
12221	shardRouting.active()
12221	shardRouting.primary()
12222	shards.isEmpty()
12222	shards.size() < metaData.getIndexSafe(shardId.getIndex()).getNumberOfReplicas() + 1
12223	shard.active()
12224	predicate.test(shardRouting)
12225	s == ShardRoutingState.UNASSIGNED
12226	s == ShardRoutingState.UNASSIGNED
12227	unassignedShard.index().getName().equals(index)
12228	initializedShard.primary()
12229	initializingShard.relocatingNodeId() != null
12230	startedShard.primary()
12231	routing.initializing()
12231	routing.primary() == false
12232	routing.isRelocationTarget()
12233	failedShard.primary()
12234	assignedShards.isEmpty() == false
12235	routing.initializing()
12235	routing.primary()
12236	failedShard.relocating()
12237	failedShard.primary()
12238	failedShard.initializing()
12239	failedShard.relocatingNodeId() == null
12240	failedShard.primary()
12241	activeReplica == null
12242	failedShard.primary()
12243	activeReplica == null
12244	failedShard.relocating()
12245	shard.relocatingNodeId() == null
12246	shard.primary()
12247	shard.initializing()
12247	shard.relocatingNodeId() == null
12248	shard.primary()
12249	shard.relocating()
12250	shard.initializing()
12251	replicaSet != null
12252	shard == iterator.next()
12253	candidate.relocating()
12254	run
12255	shard.initializing()
12255	shard.relocatingNodeId() == null
12256	shard.primary()
12257	shard.relocating()
12258	i == null
12259	shardRouting.index().equals(index)
12259	shardRouting.id() == i
12260	readOnly
11778	lifecycle.stopped()
11779	rerouting.compareAndSet(false, true) == false
11736	indexRouting == null
11737	shard == null
11738	indexRouting.getIndex().equals(shardId.getIndex()) == false
11738	indexRouting == null
11739	shard == null
11740	shardRoutingTable == null
11741	shardRouting.allocationId().getId().equals(allocationId)
11742	shardRouting.relocating()
11743	shardRouting.getTargetRelocatingShard().allocationId().getId().equals(allocationId)
11744	indexRoutingTable.validate(metaData) == false
11745	indexRoutingTable == null
11746	indexRoutingTable == null
11747	predicate.test(shardRouting)
11748	shardRouting.relocating()
11748	includeRelocationTargets
11749	includeEmpty
11750	indexRoutingTable == null
11751	predicate.test(shardRouting)
11752	includeRelocationTargets
11752	shardRouting.relocating()
11753	indexRoutingTable == null
11754	primary.active()
11755	includeEmpty
12091	sameHost == false
12091	decision.type() == Decision.Type.NO
12092	node.node() != null
12093	checkNode.node() == null
12094	Strings.hasLength(checkNode.node().getHostAddress())
12094	Strings.hasLength(node.node().getHostAddress())
12095	checkNode.node().getHostAddress().equals(node.node().getHostAddress())
12096	Strings.hasLength(node.node().getHostName())
12096	Strings.hasLength(checkNode.node().getHostName())
12097	checkNode.node().getHostName().equals(node.node().getHostName())
12098	checkNodeOnSameHostAddress
12098	checkNodeOnSameHostName
12099	checkNode.nodeId().equals(assignedShard.currentNodeId())
12100	node.nodeId().equals(assignedShard.currentNodeId())
12101	assignedShard.isSameAllocation(shardRouting)
2091	token == XContentParser.Token.FIELD_NAME
2092	token == XContentParser.Token.VALUE_NUMBER
2093	SamplerAggregator.SHARD_SIZE_FIELD.match(currentFieldName)
2094	shardSize != null
2105	mode.parseField.match(value)
2106	bdd == null
3633	scalingFactor <= 0
3633	Double.isFinite(scalingFactor) == false
3634	context.externalValueSet()
3635	parser.currentToken() == Token.VALUE_NULL
3636	parser.currentToken() == Token.VALUE_STRING
3636	coerce.value()
3636	parser.textLength() == 0
3637	ignoreMalformed.value()
3638	includeInAll
3639	value == null
3640	value == null
3641	numericValue == null
3642	includeInAll
3643	Double.isFinite(doubleValue) == false
3644	other.ignoreMalformed.explicit()
3645	other.coerce.explicit()
3646	includeDefaults
3646	ignoreMalformed.explicit()
3647	includeDefaults
3647	coerce.explicit()
3648	includeDefaults
3648	fieldType().nullValue() != null
3649	includeInAll != null
3650	includeDefaults
7487	Annotations.isScopeAnnotation(annotationType)
7488	Annotations.isRetainedAtRuntime(annotationType)
7489	existing != null
7494	scoping.isNoScope()
7495	scopeAnnotation == null
7496	scope != null
7597	scopingAnnotation == Singleton.class
7598	scope == Scopes.SINGLETON
7599	this == EAGER_SINGLETON
7600	stage == Stage.PRODUCTION
7227	this == obj
7228	getClass() != obj.getClass()
7228	obj == null
5216	weight != null
5217	this == obj
5218	getClass() != obj.getClass()
5218	obj == null
5219	weight == null
1675	order == SortOrder.DESC
1676	this == object
1677	object == null
1677	getClass() != object.getClass()
9197	token == null
9198	token == Token.VALUE_STRING
9199	type == ScriptType.INLINE
9200	type == ScriptType.STORED
9201	options != null
9202	type == ScriptType.FILE
9203	options != null
9204	in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
9205	in.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
9206	this.type != ScriptType.INLINE
9206	options.isEmpty()
9207	in.readBoolean()
9208	lang == null
9209	params == null
9210	in.readBoolean()
9211	type == ScriptType.INLINE
9212	out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
9213	out.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
9214	lang == null
9215	options == null
9216	params.isEmpty()
9217	options != null
9217	options.containsKey(CONTENT_TYPE_OPTION)
9218	contentType != null
9218	builder.contentType().mediaType().equals(contentType)
9218	type == ScriptType.INLINE
9219	lang != null
9220	options != null
9220	options.isEmpty()
9221	params.isEmpty()
9222	this == o
9223	getClass() != o.getClass()
9223	o == null
9224	type != script.type
9225	lang != null ? !lang.equals(script.lang) : script.lang != null
9225	lang.equals(script.lang)
9226	idOrCode.equals(script.idOrCode)
9227	options.equals(script.options)
9227	options != null ? !options.equals(script.options) : script.options != null
2836	o == null
2837	value == null
2838	value.getClass().isArray()
2839	value instanceof Collection
9195	Strings.hasLength(pluginName) == false
9196	Strings.hasLength(operation) == false
9191	previousContext != null
9192	RESERVED_SCRIPT_CONTEXTS.contains(scriptContext.getPluginName())
9193	RESERVED_SCRIPT_CONTEXTS.contains(scriptContext.getOperation())
2828	value == null
2829	value instanceof Number
2830	value instanceof ReadableInstant
2831	value.getClass().isArray()
2832	value instanceof Collection
2833	o instanceof Number
2834	o instanceof ReadableInstant
2835	o instanceof Boolean
9278	oldLanguage != null
9279	scriptEngineService != null
1361	context.hasScriptFields() == false
1362	scriptField.ignoreException()
1363	hitContext.hit().fieldsOrNull() == null
1364	hitField == null
1365	value instanceof Collection
2131	obj == null
2132	getClass() != obj.getClass()
2133	token.equals(XContentParser.Token.FIELD_NAME)
2134	Script.SCRIPT_PARSE_FIELD.match(currentFieldName)
2135	script == null
2840	value == null
2841	value.getClass().isArray()
2842	value instanceof Collection
2843	o instanceof Number
2844	o instanceof ReadableInstant
2845	o instanceof Boolean
9266	token == null
9267	token != Token.START_OBJECT
9268	id == null
9269	split == -1
9270	id == null
9271	in.getVersion().before(Version.V_5_3_0_UNRELEASED)
9272	split == -1
9273	out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
9274	entry.getKey().contains("#")
9275	lang == null
9276	this == o
9277	o == null
9277	getClass() != o.getClass()
9232	NativeScriptEngineService.NAME.equals(lang)
9233	scriptMode == null
4764	script == null
4765	token == XContentParser.Token.FIELD_NAME
4766	parseContext.isDeprecatedSetting(currentFieldName)
4767	token == XContentParser.Token.START_OBJECT
4768	Script.SCRIPT_PARSE_FIELD.match(currentFieldName)
4769	token.isValue()
4770	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4771	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4772	Script.SCRIPT_PARSE_FIELD.match(currentFieldName)
4773	script == null
5212	script == null
5213	token == XContentParser.Token.FIELD_NAME
5214	Script.SCRIPT_PARSE_FIELD.match(currentFieldName)
5215	script == null
9234	Strings.hasLength(settings.get(DISABLE_DYNAMIC_SCRIPTING_SETTING))
9235	cacheMaxSize >= 0
9236	cacheExpire.getNanos() != 0
9237	logger.isTraceEnabled()
9238	SCRIPT_AUTO_RELOAD_ENABLED_SETTING.get(settings)
9239	scriptEngineService == null
9240	scriptEngineService == null
9241	type == ScriptType.STORED
9242	path.length == 3
9243	lang != null
9243	lang.equals(path[1]) == false
9244	path.length != 1
9245	expression
9245	notSupported
9246	canExecuteScript(lang, type, scriptContext) == false
9247	logger.isTraceEnabled()
9248	type == ScriptType.FILE
9249	compiledScript == null
9250	compiledScript != null
9251	compiledScript == null
9252	logger.isTraceEnabled()
9253	scriptsPerMinCounter > totalCompilesPerMinute
9254	scriptsPerMinCounter >= 1
9255	isLangSupported(lang) == false
9255	lang != null
9256	scriptMetadata == null
9257	source == null
9258	request.content().length() > max
9259	isLangSupported(source.getLang()) == false
9260	isAnyScriptContextEnabled(source.getLang(), ScriptType.STORED)
9261	compiled == null
9262	isLangSupported(request.lang()) == false
9262	request.lang() != null
9263	scriptMetadata != null
9264	canExecuteScript(lang, scriptType, scriptContext)
9265	scriptContextRegistry.isSupportedContext(scriptContext) == false
9228	scriptEngineService == NativeScriptEngineService.class
9229	ScriptType.FILE == scriptType
1694	ScriptSortType.STRING.equals(type)
1694	sortMode == SortMode.SUM
1694	sortMode == SortMode.AVG
1694	sortMode == SortMode.MEDIAN
1695	sortMode != null
1696	nestedPath != null
1697	nestedFilter != null
1698	sortMode != null
1699	valueMode == null
1700	this == object
1701	object == null
1701	getClass() != object.getClass()
1702	ordinal >= values().length
1702	ordinal < 0
2722	in.readBoolean()
2723	hasParams
2724	initScript == null
2725	mapScript == null
2726	combineScript == null
2727	reduceScript == null
2728	params == null
2729	initScript != null
2730	combineScript != null
2731	initScript != null
2732	mapScript != null
2733	combineScript != null
2734	reduceScript != null
2735	params != null
2736	token == XContentParser.Token.FIELD_NAME
2737	token == XContentParser.Token.VALUE_STRING
2737	token == XContentParser.Token.START_OBJECT
2738	INIT_SCRIPT_FIELD.match(currentFieldName)
2739	MAP_SCRIPT_FIELD.match(currentFieldName)
2740	COMBINE_SCRIPT_FIELD.match(currentFieldName)
2741	REDUCE_SCRIPT_FIELD.match(currentFieldName)
2742	token == XContentParser.Token.START_OBJECT
2742	PARAMS_FIELD.match(currentFieldName)
2743	mapScript == null
2744	initScript != null
2745	mapScript != null
2746	combineScript != null
2747	reduceScript != null
2748	params != null
2757	combineScript != null
2749	collectsFromSingleBucket == false
2750	params != null
2751	initScript != null
2752	script != null
2753	params != null
2754	original instanceof Map
2755	original instanceof List
2756	original instanceof String
2756	original instanceof Long
2756	original instanceof Byte
2756	original instanceof Character
2756	original instanceof Float
2756	original instanceof Double
2756	original instanceof Boolean
2756	original instanceof Integer
2756	original instanceof Short
1721	this == o
1722	o == null
1722	getClass() != o.getClass()
11328	Strings.hasLength(scrollId)
1458	values == null
1459	values.length == 0
1460	values[i] == null
1461	values[i] instanceof String
1462	values[i] instanceof Text
1463	values[i] instanceof Long
1464	values[i] instanceof Integer
1465	values[i] instanceof Short
1466	values[i] instanceof Byte
1467	values[i] instanceof Double
1468	values[i] instanceof Float
1469	values[i] instanceof Boolean
1470	values[i] instanceof Boolean
1471	sort == null
1471	sort.sort.getSort() == null
1471	sort.sort.getSort().length == 0
1472	sortFields.length != values.length
1473	values[i] != null
1474	sortField instanceof SortedSetSortField
1475	sortField instanceof SortedNumericSortField
1476	sortField.getComparatorSource() instanceof IndexFieldData.XFieldComparatorSource
1477	value instanceof Number
1478	value instanceof Number
1479	value instanceof Number
1480	value instanceof Number
1481	value instanceof Number
1482	value instanceof Number
1483	token == XContentParser.Token.START_ARRAY
1484	token == XContentParser.Token.VALUE_NUMBER
1485	token == XContentParser.Token.VALUE_STRING
1486	token == XContentParser.Token.VALUE_BOOLEAN
1487	token == XContentParser.Token.VALUE_NULL
1488	other instanceof SearchAfterBuilder
1619	closed.compareAndSet(false, true)
1620	innerHitsContext == null
1621	clearables == null
1622	releasables == null
1623	clearables != null
1624	lc.compareTo(lifetime) > 0
1625	remove != null
1626	searchType() != SearchType.DEFAULT
1627	scrollContext() != null
1628	scrollContext().scroll != null
1358	globalForceSource
2961	in.readBoolean()
2962	shardTarget == null
2980	id != null
2981	this.source == null
2982	source == null
2983	source == null
2984	sourceAsMap != null
2985	target != null
2986	fields != null
2986	fields.isEmpty()
2987	field.getValues().isEmpty()
2988	field.isMetadataField()
2989	getExplanation() != null
2989	shard != null
2990	nestedIdentity != null
2991	index != null
2992	type != null
2993	id != null
2994	version != -1
2995	Float.isNaN(score)
2996	source != null
2997	otherFields.isEmpty()
2998	highlightFields.isEmpty()
2998	highlightFields != null
2999	matchedQueries.length > 0
3000	getExplanation() != null
3001	innerHits != null
3002	matchedQueries != null
3003	shardId != null
3003	nodeId != null
3004	parser.currentToken() == XContentParser.Token.VALUE_NUMBER
3004	parser.currentToken() == XContentParser.Token.VALUE_STRING
3005	metadatafield.equals(Fields._INDEX) == false
3005	metadatafield.equals(Fields._TYPE) == false
3005	metadatafield.equals(Fields._ID) == false
3006	Fields.VALUE.equals(currentFieldName)
3007	Fields.DESCRIPTION.equals(currentFieldName)
3008	Fields.DETAILS.equals(currentFieldName)
3009	value == null
3010	description == null
3011	innerExps != null
3012	source.length() == 0
3013	in.readBoolean()
3014	size == 0
3015	size == 1
3016	size == 0
3017	size == 1
3018	size > 0
3019	size > 0
3020	explanation == null
3021	fields == null
3022	highlightFields == null
3023	matchedQueries.length == 0
3024	innerHits == null
3025	obj == null
3025	getClass() != obj.getClass()
1638	values.isEmpty()
1638	values == null
1639	getClass() != obj.getClass()
1639	obj == null
3067	Float.isNaN(maxScore)
3068	parser.currentToken() != XContentParser.Token.START_OBJECT
3069	token == XContentParser.Token.FIELD_NAME
3070	token.isValue()
3071	Fields.TOTAL.equals(currentFieldName)
3072	Fields.MAX_SCORE.equals(currentFieldName)
3073	token == XContentParser.Token.VALUE_NULL
3074	Fields.MAX_SCORE.equals(currentFieldName)
3075	token == XContentParser.Token.START_ARRAY
3076	size == 0
3077	hits.length > 0
3078	obj == null
3078	getClass() != obj.getClass()
3082	false == transportClient
3083	false == transportClient
3084	ShapesAvailability.JTS_AVAILABLE
3084	ShapesAvailability.SPATIAL4J_AVAILABLE
3085	fetchSubPhases.stream().anyMatch(p -> p.getClass().equals(subPhaseClass))
3086	ShapesAvailability.JTS_AVAILABLE
3086	ShapesAvailability.SPATIAL4J_AVAILABLE
3079	location != null
3080	location != null
3081	lineNumber != UNKNOWN_POSITION
10190	connection != null
10139	existing != null
10140	keys[i] != null
10141	existing != null
10142	results.isEmpty()
10143	queryResult.hasConsumedTopDocs() == false
10144	td.scoreDocs.length > 0
10145	queryResult.hasSuggestHits()
10146	hasHits
10147	groupedCompletionSuggestions.isEmpty() == false
10148	mergedTopDocs != null
10148	mergedTopDocs instanceof TopFieldDocs
10149	results.isEmpty()
10150	numShards == 1
10150	from == 0
10151	topDocs instanceof CollapseTopFieldDocs
10152	topDocs instanceof TopFieldDocs
10153	doc.shardIndex != -1
10154	reducedQueryPhase.isEmptyResult == false
10155	shardDocIdsToLoad == null
10156	reducedQueryPhase.isEmptyResult
10157	reducedQueryPhase.suggest != null
10158	fetchResults.isEmpty()
10159	searchResultProvider == null
10160	fetchResultIndex < fetchResult.hits().internalHits().length
10161	sorted
10162	reducedQueryPhase.sortField[i].getType() == SortField.Type.SCORE
10163	fetchResults.isEmpty()
10164	fetchResultProvider == null
10165	index < fetchResult.hits().internalHits().length
10166	sorted
10167	sortScoreIndex != -1
10168	queryResults.isEmpty()
10169	bufferedAggs != null
10170	pipelineAggregators != null
10171	isScrollRequest == false
10171	hasTopDocs
10171	hasAggs
10172	request.getBatchedReduceSize() < numShards
10044	shardFailures == null
10045	cause != null
10046	failure.getCause() == cause
10047	shardFailures.length == 0
10048	shardFailures.length > 1
10049	shardFailures[i].status().getStatus() >= 500
10050	cause == null
10051	shardFailures.length > 0
10051	shardFailures != null
10052	shardFailure.shard() != null
10053	ex != this
3026	token == XContentParser.Token.FIELD_NAME
3027	token.isValue()
3028	ID_FIELD.equals(currentFieldName)
3029	token == XContentParser.Token.START_ARRAY
3030	SEARCHES_FIELD.equals(currentFieldName)
3031	AggregationProfileShardResult.AGGREGATIONS.equals(currentFieldName)
10173	source == null
10174	batchedReduceSize <= 1
10175	this == o
10176	getClass() != o.getClass()
10176	o == null
10216	request.source() != null
10217	request.source() == null
10076	scrollId != null
10077	isTerminatedEarly() != null
10078	getNumReducePhases() != 1
10079	size == 0
10177	shardFailures == null
10178	shardFailures == null
10179	scrollId.getContext().length == 0
10180	node != null
10181	logger.isDebugEnabled()
10182	counter.decrementAndGet() == 0
10183	node == null
10184	logger.isDebugEnabled()
10185	counter.decrementAndGet() == 0
10186	logger.isDebugEnabled()
10187	counter.decrementAndGet() == 0
10188	successfulOps.get() == 0
10189	request.scroll() != null
10203	shardFailures == null
10204	shardFailures == null
10205	scrollId.getContext().length == 0
10206	node != null
10207	logger.isDebugEnabled()
10208	counter.countDown()
10209	logger.isDebugEnabled()
10210	counter.countDown()
10211	successfulOps.get() == 0
10212	reducedQueryPhase.scoreDocs.length == 0
10213	docIds != null
10214	counter.countDown()
10215	request.scroll() != null
10194	scrollId == null
10195	this == o
10196	o == null
10196	getClass() != o.getClass()
710	reason == IndexRemovalReason.CLOSED
710	reason == IndexRemovalReason.DELETED
711	canCache
712	context.queryResult().hasSearchContext() == false
712	context.scrollContext() == null
713	request.numberOfShards() == 1
714	e instanceof ExecutionException
715	fetchPhaseShouldFreeContext(context)
716	context.scrollContext() == null
716	context.queryResult().hasSearchContext() == false
717	context.scrollContext() == null
718	request.lastEmittedDoc() != null
719	fetchPhaseShouldFreeContext(context)
720	context == null
721	request.scroll() != null
722	success
723	request.scroll() != null
724	context.from() == -1
725	context.size() == -1
726	request.scroll().keepAlive() != null
726	request.scroll() != null
727	success == false
728	context != null
729	context.scrollContext() != null
730	searchContext.scrollContext() != null
731	Lucene.isCorruptionException(e)
732	source == null
733	source.query() != null
734	source.postFilter() != null
735	innerHitBuilders.size() > 0
736	source.sorts() != null
737	optionalSort.isPresent()
738	source.minScore() != null
739	source.profile()
740	source.timeout() != null
741	source.aggregations() != null
742	source.suggest() != null
743	source.rescores() != null
744	source.explain() != null
745	source.fetchSource() != null
746	source.docValueFields() != null
747	source.highlighter() != null
748	source.scriptFields() != null
749	source.ext() != null
750	source.version() != null
751	source.stats() != null
752	source.searchAfter().length > 0
752	source.searchAfter() != null
753	context.scrollContext() != null
754	context.from() > 0
755	source.slice() != null
756	context.scrollContext() == null
757	source.storedFields() != null
758	source.storedFields().fetchFields() == false
759	context.version()
760	context.sourceRequested()
761	source.collapse() != null
762	suggest != null
762	suggest.hasScoreDocs()
763	context.request().scroll() != null
764	topDocs.scoreDocs.length < context.from()
765	request.scroll().keepAlive() != null
765	request.scroll() != null
1746	in.readBoolean()
1747	i == 0
1748	nodeId == null
1749	this == o
1750	o == null
1750	getClass() != o.getClass()
1751	shardId.equals(that.shardId) == false
1752	nodeId.equals(that.nodeId)
1752	nodeId != null ? !nodeId.equals(that.nodeId) : that.nodeId != null
1753	nodeId == null
5477	tookInNanos > queryWarnThreshold
5477	queryWarnThreshold >= 0
5478	queryInfoThreshold >= 0
5478	tookInNanos > queryInfoThreshold
5479	queryDebugThreshold >= 0
5479	tookInNanos > queryDebugThreshold
5480	tookInNanos > queryTraceThreshold
5480	queryTraceThreshold >= 0
5481	tookInNanos > fetchWarnThreshold
5481	fetchWarnThreshold >= 0
5482	fetchInfoThreshold >= 0
5482	tookInNanos > fetchInfoThreshold
5483	fetchDebugThreshold >= 0
5483	tookInNanos > fetchDebugThreshold
5484	fetchTraceThreshold >= 0
5484	tookInNanos > fetchTraceThreshold
1723	this.sortValues[i] instanceof BytesRef
1724	size > 0
1725	type == 0
1726	type == 1
1727	type == 2
1728	type == 3
1729	type == 4
1730	type == 5
1731	type == 6
1732	type == 7
1733	type == 8
1734	sortValue == null
1735	type == String.class
1736	type == Integer.class
1737	type == Long.class
1738	type == Float.class
1739	type == Double.class
1740	type == Byte.class
1741	type == Short.class
1742	type == Boolean.class
1743	sortValues.length > 0
1744	this == obj
1745	obj == null
1745	getClass() != obj.getClass()
1489	in.readBoolean()
1490	in.readBoolean()
1491	in.readBoolean()
1492	in.readBoolean()
1493	in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
1494	hasRescoreBuilders
1495	hasScriptFields
1496	hasSorts
1497	hasStats
1498	out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
1499	from < 0
1500	terminateAfter < 0
1501	name.equals(ScoreSortBuilder.NAME)
1502	name.equals(ScoreSortBuilder.NAME)
1503	sorts == null
1504	searchAfterBuilder == null
1505	aggregations == null
1506	aggregations == null
1507	rescoreBuilders == null
1508	storedFieldsContext == null
1509	docValueFields == null
1510	docValueFields == null
1511	scriptFields == null
1512	this.queryBuilder != null
1513	this.postQueryBuilder != null
1514	rewritten
1515	token != XContentParser.Token.START_OBJECT
1515	(token = parser.nextToken()) != XContentParser.Token.START_OBJECT
1516	token == XContentParser.Token.FIELD_NAME
1517	token.isValue()
1518	FROM_FIELD.match(currentFieldName)
1519	SIZE_FIELD.match(currentFieldName)
1520	TIMEOUT_FIELD.match(currentFieldName)
1521	TERMINATE_AFTER_FIELD.match(currentFieldName)
1522	MIN_SCORE_FIELD.match(currentFieldName)
1523	VERSION_FIELD.match(currentFieldName)
1524	EXPLAIN_FIELD.match(currentFieldName)
1525	TRACK_SCORES_FIELD.match(currentFieldName)
1526	_SOURCE_FIELD.match(currentFieldName)
1527	STORED_FIELDS_FIELD.match(currentFieldName)
1528	SORT_FIELD.match(currentFieldName)
1529	PROFILE_FIELD.match(currentFieldName)
1530	FIELDS_FIELD.match(currentFieldName)
1531	token == XContentParser.Token.START_OBJECT
1532	QUERY_FIELD.match(currentFieldName)
1533	POST_FILTER_FIELD.match(currentFieldName)
1534	_SOURCE_FIELD.match(currentFieldName)
1535	SCRIPT_FIELDS_FIELD.match(currentFieldName)
1536	INDICES_BOOST_FIELD.match(currentFieldName)
1537	token == XContentParser.Token.FIELD_NAME
1538	token.isValue()
1539	AGGS_FIELD.match(currentFieldName)
1539	AGGREGATIONS_FIELD.match(currentFieldName)
1540	HIGHLIGHT_FIELD.match(currentFieldName)
1541	SUGGEST_FIELD.match(currentFieldName)
1542	SORT_FIELD.match(currentFieldName)
1543	RESCORE_FIELD.match(currentFieldName)
1544	EXT_FIELD.match(currentFieldName)
1545	token == XContentParser.Token.FIELD_NAME
1546	searchExtBuilder.getWriteableName().equals(extSectionName) == false
1547	SLICE.match(currentFieldName)
1548	COLLAPSE.match(currentFieldName)
1549	token == XContentParser.Token.START_ARRAY
1550	STORED_FIELDS_FIELD.match(currentFieldName)
1551	DOCVALUE_FIELDS_FIELD.match(currentFieldName)
1552	token == XContentParser.Token.VALUE_STRING
1553	INDICES_BOOST_FIELD.match(currentFieldName)
1554	SORT_FIELD.match(currentFieldName)
1555	RESCORE_FIELD.match(currentFieldName)
1556	STATS_FIELD.match(currentFieldName)
1557	token == XContentParser.Token.VALUE_STRING
1558	_SOURCE_FIELD.match(currentFieldName)
1559	SEARCH_AFTER.match(currentFieldName)
1560	FIELDS_FIELD.match(currentFieldName)
1561	from != -1
1562	size != -1
1563	timeout != null
1563	timeout.equals(TimeValue.MINUS_ONE)
1564	terminateAfter != SearchContext.DEFAULT_TERMINATE_AFTER
1565	queryBuilder != null
1566	postQueryBuilder != null
1567	minScore != null
1568	version != null
1569	explain != null
1570	profile
1571	fetchSourceContext != null
1572	storedFieldsContext != null
1573	docValueFields != null
1574	scriptFields != null
1575	sorts != null
1576	trackScores
1577	searchAfterBuilder != null
1578	sliceBuilder != null
1579	indexBoosts.isEmpty()
1580	aggregations != null
1581	highlightBuilder != null
1582	suggestBuilder != null
1583	rescoreBuilders != null
1584	stats != null
1585	extBuilders != null
1585	extBuilders.isEmpty() == false
1586	collapse != null
1587	obj == null
1588	obj.getClass() != getClass()
4071	searchStats == null
4072	includeTypes
4072	searchStats.groupStats.isEmpty()
4072	searchStats.groupStats != null
4073	groupStats == null
4074	stats == null
4075	searchStats == null
4076	groupStats.isEmpty()
4076	groupStats != null
4077	in.readBoolean()
4078	groupStats == null
4078	groupStats.isEmpty()
10200	connectToRemote
10201	connection.getVersion().onOrBefore(Version.V_5_3_0_UNRELEASED)
10201	fetchDocuments
10202	connectToRemote
8704	ALLOWED_PROPERTIES.contains(property) == false
8705	secureSettings.getSettingNames().contains(getKey()) == false
8705	secureSettings == null
8706	super.exists(settings)
8788	this == o
8789	o instanceof CharSequence == false
8789	o == null
8790	chars.length != that.length()
8791	chars != null
8792	chars == null
3123	Files.exists(environment.pluginsFile())
3124	pluginsAndModules.add(plugin) == false
3125	Files.exists(environment.modulesFile())
3126	pluginsAndModules.add(module) == false
3127	Files.exists(policyFile)
3128	codebases.add(url) == false
3129	map.put(url.getFile(), policy) != null
3130	shortName.endsWith(".jar") == false
3131	previous != null
3132	shortName.endsWith(".jar") == false
3133	Files.isDirectory(path)
3134	environment.sharedDataFile() != null
3135	environment.pidFile() != null
3136	valid
3137	transportRange != null
3138	NetworkModule.HTTP_ENABLED.exists(tribeNodeSettings)
3138	NetworkModule.HTTP_ENABLED.get(tribeNodeSettings)
3139	Files.isDirectory(path)
3140	Files.isDirectory(path)
5591	this == o
5592	o == null
5592	getClass() != o.getClass()
5593	name != null ? !name.equals(segment.name) : segment.name != null
5593	name.equals(segment.name)
5594	in.readBoolean()
5595	verbose
5596	numChildren == 0
5621	map.containsKey(entry.key)
5622	mergeStats == null
5781	key.equals(SequenceNumbers.LOCAL_CHECKPOINT_KEY)
5782	key.equals(SequenceNumbers.MAX_SEQ_NO)
5783	minSeqNo == SequenceNumbersService.NO_OPS_PERFORMED
5784	minSeqNo == SequenceNumbersService.UNASSIGNED_SEQ_NO
5785	seqNo == SequenceNumbersService.UNASSIGNED_SEQ_NO
5786	maxSeqNo == SequenceNumbersService.NO_OPS_PERFORMED
5787	maxSeqNo == SequenceNumbersService.UNASSIGNED_SEQ_NO
5788	seqNo == SequenceNumbersService.UNASSIGNED_SEQ_NO
2449	lag <= 0
2450	format == null
2451	gapPolicy == null
2452	format != null
2453	format != null
2454	token == XContentParser.Token.FIELD_NAME
2455	token == XContentParser.Token.VALUE_STRING
2456	FORMAT.match(currentFieldName)
2457	BUCKETS_PATH.match(currentFieldName)
2458	GAP_POLICY.match(currentFieldName)
2459	token == XContentParser.Token.VALUE_NUMBER
2460	LAG.match(currentFieldName)
2461	lag <= 0
2462	token == XContentParser.Token.START_ARRAY
2463	BUCKETS_PATH.match(currentFieldName)
2464	bucketsPaths == null
2465	lag != null
2466	format != null
2467	gapPolicy != null
2446	counter <= lag
2447	thisBucketValue == null
2448	Double.isNaN(lagValue)
2448	Double.isNaN(thisBucketValue)
8767	properties == null
8768	properties.length == 0
8769	isDynamic()
8769	isFinal()
8770	exists(source) == false
8771	this.exists(settings)
8771	this.isDeprecated()
8772	exists(primary)
8773	exists(secondary)
8774	fallbackSetting == null
8775	fallbackSetting.exists(primary)
8776	isDynamic()
8777	value < minValue
8778	value > maxValue
8779	value < minValue
8780	timeValue.millis() < minValue.millis()
8781	value.getBytes() < minValue.getBytes()
8782	value.getBytes() > maxValue.getBytes()
8783	defaultStringValue.apply(Settings.EMPTY) == null
8784	token != XContentParser.Token.START_ARRAY
8785	token != XContentParser.Token.VALUE_STRING
8786	this == o
8787	o == null
8787	getClass() != o.getClass()
8729	entry.getValue() instanceof Map
8730	prefixLength == -1
8731	innerMap != null
8732	existingValue == null
8733	existingValue instanceof Map
8734	map.isEmpty()
8735	isArray
8736	index >= 0
8737	entry.getValue() instanceof Map
8738	(maxIndex + 1) == map.size()
8738	isArray
8739	obj == null
8740	sValue == null
8741	sValue == null
8742	sValue == null
8743	sValue == null
8744	indexVersion.before(Version.V_6_0_0_alpha1_UNRELEASED)
8745	Booleans.isBoolean(value) == false
8746	get(settingPrefix) != null
8747	commaDelimited
8748	strings.length > 0
8749	value == null
8750	result.isEmpty()
8751	Strings.hasLength(settingPrefix)
8752	settingPrefix.charAt(settingPrefix.length() - 1) != '.'
8753	setting.startsWith(settingPrefix)
8754	dotIndex == -1
8755	ignoreNonGrouped
8756	groupSettings == null
8757	sValue == null
8758	firstLevelNames.get() == null
8759	secureSettings != null
8760	this == o
8761	o == null
8761	getClass() != o.getClass()
8762	settings.equals(that.settings)
8762	settings != null ? !settings.equals(that.settings) : that.settings != null
8763	params.paramAsBoolean("flat_settings", false)
8764	keys.get() == null
8765	secureSettings == null
8693	isValidPattern(pattern) == false
8694	patterns.isEmpty() == false
8695	patterns != null
8695	patterns.isEmpty() == false
8696	Regex.isSimpleMatchPattern(pattern)
8697	simpleMatchPatternList.isEmpty()
8698	Regex.simpleMatch(simpleMatchPatterns, current.getKey())
8708	resourceName.endsWith(".json")
8709	resourceName.endsWith(".yaml")
8709	resourceName.endsWith(".yml")
8710	source.indexOf('{') != -1
8710	source.indexOf('}') != -1
8711	source.indexOf(':') != -1
8712	xContentType == XContentType.JSON
8713	xContentType == XContentType.YAML
8669	indexSettings.isEmpty() == false
8670	count + word.length() > 85
8671	setting.isFiltered()
8672	settingsFilterPattern.contains(setting.getKey()) == false
8673	setting.hasNodeScope()
8673	setting.hasIndexScope()
8674	setting.hasNodeScope()
8675	setting.isShared() == false
8675	existingSetting.isShared() == false
8675	existingSetting != null
8676	setting.hasIndexScope()
8677	existingSetting != null
8677	existingSetting.isShared() == false
8677	setting.isShared() == false
8678	SettingsFilter.isValidPattern(filter) == false
8679	settingsFilterPattern.contains(filter)
11017	changed
11018	updatedReadOnly
9002	autoValidateJtsGeometry
9003	autoIndexJtsGeometry
9004	token != XContentParser.Token.START_ARRAY
9004	token != XContentParser.Token.VALUE_NULL
9004	token != XContentParser.Token.END_ARRAY
9005	token == XContentParser.Token.VALUE_NULL
9006	dateline == 0
9007	p1.x == p2.x
9007	p1.x != dateline
9008	p1.x == p2.x
9008	p1.x == dateline
9009	t > 1
9009	t <= 0
9010	Double.isNaN(position)
9011	type.shapename.equals(typename)
9012	parser.currentToken() == XContentParser.Token.VALUE_NULL
9013	parser.currentToken() != XContentParser.Token.START_OBJECT
9014	token == XContentParser.Token.FIELD_NAME
9015	FIELD_TYPE.equals(fieldName)
9016	FIELD_COORDINATES.equals(fieldName)
9017	FIELD_GEOMETRIES.equals(fieldName)
9018	CircleBuilder.FIELD_RADIUS.equals(fieldName)
9019	FIELD_ORIENTATION.equals(fieldName)
9020	shapeType == null
9021	node == null
9021	GeoShapeType.GEOMETRYCOLLECTION != shapeType
9022	geometryCollections == null
9022	GeoShapeType.GEOMETRYCOLLECTION == shapeType
9023	GeoShapeType.CIRCLE != shapeType
9023	radius != null
9024	node.isEmpty()
9025	node.coordinate == null
9026	node.children.isEmpty() == false
9027	coordinates.children.size() != 2
9028	lR.x < uL.x
9028	uL.y < lR.y
9029	coordinates.children == null
9029	coordinates.children.isEmpty()
9030	coordinates.coordinate != null
9031	coordinates.children.size() < 2
9032	coordinates.children == null
9033	coordinates.children.size() < numValidPts
9034	coordinates.children.get(0).coordinate.equals( coordinates.children.get(coordinates.children.size() - 1).coordinate)
9035	coerce
9036	coordinates.children == null
9036	coordinates.children.isEmpty()
9037	parser.currentToken() != XContentParser.Token.START_ARRAY
11837	allocateDecision.isDecisionTaken()
11838	moveDecision.isDecisionTaken()
7361	shardId == null
7362	coreKeyToShard.containsKey(coreKey)
7363	coreKeyToShard.containsKey(coreKey) == false
7364	objects == null
7365	false == addedListener
7366	objects == null
7367	assertionsEnabled == false
1408	flag == 1
1409	flag == 2
1410	flag != 0
1411	lastEmittedDoc == null
1412	lastEmittedDoc instanceof FieldDoc
1186	originalIndices == null
1187	originalIndices == null
5654	fields.length > 0
5654	fields != null
5655	Regex.simpleMatch(fields, entry.getKey())
5656	total != null
5657	prev != null
5658	wasEvicted
5659	sizeInBytes != -1
5660	total != null
5367	getResult.isExists()
5368	engineGetResult.exists()
5369	getResult.isExists()
5370	context != null
5371	gFields == null
5372	SourceFieldMapper.NAME.equals(field)
5373	type == null
5373	type.equals("_all")
5374	get.exists()
5375	get == null
5376	get.exists()
5377	get.exists()
5378	fieldVisitor != null
5379	fieldVisitor.fields().isEmpty()
5380	docMapper.parentFieldMapper().active()
5381	fields == null
5382	gFields != null
5382	gFields.length > 0
5383	fieldMapper == null
5384	docMapper.objectMappers().get(field) != null
5385	fetchSourceContext.fetchSource()
5386	fetchSourceContext.includes().length > 0
5386	fetchSourceContext.excludes().length > 0
5387	fields.length == 0
5387	fields == null
5973	splitPosition <= 0
5973	shardIdString.charAt(0) != '['
5973	shardIdString.charAt(shardIdString.length() - 1) != ']'
5974	this == o
5975	o == null
5976	o.getId() == shardId
5977	compare != 0
9690	this.closed.compareAndSet(false, true)
6019	isCustomDataPath
6019	dataPath.equals(shardStatePath)
6020	load != null
6021	IndexMetaData.INDEX_UUID_NA_VALUE.equals(load.indexUUID) == false
6021	load.indexUUID.equals(indexUUID) == false
6022	loadedPath == null
6023	loadedPath == null
6024	indexSettings.hasCustomDataPath()
6025	load != null
6026	IndexMetaData.INDEX_UUID_NA_VALUE.equals(load.indexUUID) == false
6026	load.indexUUID.equals(indexUUID) == false
6027	indexSettings.hasCustomDataPath()
6028	count != null
6029	usableBytes.compareTo(maxUsableBytes) > 0
6029	bestPath == null
6030	this == o
6031	o == null
6031	getClass() != o.getClass()
6032	shardId != null ? !shardId.equals(shardPath.shardId) : shardPath.shardId != null
6032	shardId.equals(shardPath.shardId)
6033	path.equals(shardPath.path)
6033	path != null ? !path.equals(shardPath.path) : shardPath.path != null
5688	evicted
5689	key != null
5690	value != null
11797	state == ShardRoutingState.RELOCATING
11798	state == ShardRoutingState.UNASSIGNED
11798	state == ShardRoutingState.INITIALIZING
11799	state == ShardRoutingState.INITIALIZING
11799	state == ShardRoutingState.RELOCATING
11800	state == ShardRoutingState.INITIALIZING
11800	state == ShardRoutingState.UNASSIGNED
11801	state == ShardRoutingState.INITIALIZING
11801	state == ShardRoutingState.RELOCATING
11802	active()
11803	primary()
11804	allocationId.getRelocationId() != null
11805	primary
11806	primary
11807	primary != other.primary
11808	shardId != null ? !shardId.equals(other.shardId) : other.shardId != null
11808	shardId.equals(other.shardId)
11809	currentNodeId != null ? !currentNodeId.equals(other.currentNodeId) : other.currentNodeId != null
11809	currentNodeId.equals(other.currentNodeId)
11810	relocatingNodeId.equals(other.relocatingNodeId)
11810	relocatingNodeId != null ? !relocatingNodeId.equals(other.relocatingNodeId) : other.relocatingNodeId != null
11811	allocationId.equals(other.allocationId)
11811	allocationId != null ? !allocationId.equals(other.allocationId) : other.allocationId != null
11812	state != other.state
11813	recoverySource.equals(other.recoverySource)
11813	recoverySource != null ? !recoverySource.equals(other.recoverySource) : other.recoverySource != null
11814	this == o
11815	o instanceof ShardRouting
11815	o == null
11816	unassignedInfo.equals(that.unassignedInfo)
11816	unassignedInfo != null ? !unassignedInfo.equals(that.unassignedInfo) : that.unassignedInfo != null
11817	h == 0
11818	relocatingNodeId != null
11819	primary
11820	recoverySource != null
11821	allocationId != null
11822	this.unassignedInfo != null
11823	expectedShardSize != UNAVAILABLE_EXPECTED_SHARD_SIZE
11824	expectedShardSize != UNAVAILABLE_EXPECTED_SHARD_SIZE
11825	recoverySource != null
11826	allocationId != null
11827	unassignedInfo != null
10095	actual != null
10095	actual instanceof SearchException
10096	shardTarget != null
10097	shardTarget != null
10098	shardTarget != null
10099	in.readBoolean()
10100	shardTarget == null
10101	shardTarget != null
10102	cause != null
10103	token == XContentParser.Token.FIELD_NAME
10104	token.isValue()
10105	SHARD_FIELD.equals(currentFieldName)
10106	INDEX_FIELD.equals(currentFieldName)
10107	NODE_FIELD.equals(currentFieldName)
10108	token == XContentParser.Token.START_OBJECT
10109	REASON_FIELD.equals(currentFieldName)
1633	in.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)
1634	source != null
1635	asKey
1636	out.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)
1637	asKey
1589	aliasNames == null
1589	aliasNames.length == 0
1590	aliasNames.length == 1
1591	alias == null
1592	alias == null
1593	parsedFilter != null
4063	groups != null
4063	groups.length > 0
4064	groups[0].equals("_all")
4064	groups.length == 1
4065	Regex.simpleMatch(groups, entry.getKey())
4066	groupsStats.isEmpty()
4067	typeStats.getValue().totalCurrent() > 0
4068	searchContext.groupStats() != null
4069	stats == null
4070	stats == null
1629	originalIndices == null
1630	originalIndices == null
10724	segment.isCommitted()
10725	segment.isSearch()
10726	size == 0
12738	masterNode == null
6014	this == o
6015	getClass() != o.getClass()
6015	o == null
6016	primary != that.primary
6017	indexUUID != null ? !indexUUID.equals(that.indexUUID) : that.indexUUID != null
6017	indexUUID.equals(that.indexUUID)
6018	allocationId != null ? !allocationId.equals(that.allocationId) : that.allocationId != null
6018	allocationId.equals(that.allocationId)
10856	in.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
10857	out.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
10858	commitStats != null
10859	seqNoStats != null
5965	esReader != null
5966	esReader != null
10644	typesSize > 0
12052	clusterShardLimit <= 0
12052	indexShardLimit <= 0
12053	nodeShard.relocating()
12054	nodeShard.index().equals(shardRouting.index())
12055	decider.test(nodeShardCount, clusterShardLimit)
12055	clusterShardLimit > 0
12056	decider.test(indexShardCount, indexShardLimit)
12056	indexShardLimit > 0
12057	clusterShardLimit <= 0
12058	nodeShard.relocating()
12059	clusterShardLimit >= 0
12059	nodeShardCount >= clusterShardLimit
6857	result.success()
6858	result.getValue().success() == false
10497	sourceIndex == null
10498	shrinkIndexRequest == null
2411	aggregation instanceof InternalMultiBucketAggregation
2412	aggregation instanceof InternalSingleBucketAggregation
2118	supersetFreq < 0
2118	subsetSize < 0
2118	subsetFreq < 0
2118	supersetSize < 0
2119	subsetFreq > subsetSize
2120	supersetFreq > supersetSize
2110	docCount < bucketCountThresholds.getShardMinDocCount()
2111	spare == null
2168	bucket.subsetDf >= minDocCount
2169	docCount < bucketCountThresholds.getShardMinDocCount()
2170	spare == null
2172	bucketCountThresholds == null
2173	size <= 0
2174	shardSize <= 0
2175	minDocCount < 0
2176	shardMinDocCount < 0
2177	backgroundFilter == null
2178	significanceHeuristic == null
2179	executionHint != null
2180	filterBuilder != null
2181	includeExclude != null
2148	config.unmapped()
2149	termsEnum != null
2150	numberOfAggregatorsCreated > 1
2151	query instanceof TermQuery
2152	termsEnum.seekExact(term.bytes())
2153	filter != null
2154	collectsFromSingleBucket == false
2155	bucketCountThresholds.getShardSize() == SignificantTermsAggregationBuilder.DEFAULT_BUCKET_COUNT_THRESHOLDS.getShardSize()
2156	valuesSource instanceof ValuesSource.Bytes
2157	executionHint != null
2158	valuesSource instanceof ValuesSource.Bytes.WithOrdinals
2159	execution == null
2160	Aggregator.descendsFromBucketAggregator(parent)
2161	includeExclude.isRegexBased()
2161	format != DocValueFormat.RAW
2161	includeExclude != null
2162	includeExclude != null
2162	includeExclude.isRegexBased()
2163	valuesSource instanceof ValuesSource.Numeric
2164	((ValuesSource.Numeric) valuesSource).isFloatingPoint()
2165	includeExclude != null
2166	mode.parseField.match(value)
2167	termsEnum instanceof Releasable
5707	BUILT_IN.containsKey(name)
5707	indexSettings.getIndexVersionCreated().onOrAfter(Version.V_5_0_0_alpha1)
5708	typeName == null
5709	BUILT_IN.containsKey(typeName)
5709	similarities.containsKey(typeName)
5710	providerSettings == null
5711	providers.containsKey(entry.getKey())
5711	indexSettings.getIndexVersionCreated().before(Version.V_5_0_0_alpha1)
5712	providerSettings == null
2285	obj == null
2286	getClass() != obj.getClass()
5256	settings.lenient()
5257	currentFieldType == null
5257	currentFieldType.tokenized()
5258	q != null
5259	settings.quoteFieldSuffix() != null
5260	quotedFieldType != null
5261	q != null
5262	settings.analyzeWildcard()
5263	analyzedQuery != null
5264	source.hasAttribute(DisableGraphAttribute.class)
5265	boost != AbstractQueryBuilder.DEFAULT_BOOST
5266	posAtt.getPositionIncrement() > 0
5266	currentPos.isEmpty() == false
5267	currentPos.isEmpty() == false
5268	tlist.size() == 0
5269	tlist.size() == 1
5269	tlist.get(0).size() == 1
5270	plist.size() == 1
5271	isLastPos
5272	isLastPos == false
4580	queryText == null
4581	in.getVersion().before(Version.V_5_1_1_UNRELEASED)
4582	in.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
4583	in.getVersion().before(Version.V_5_1_1_UNRELEASED)
4584	in.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
4585	out.getVersion().before(Version.V_5_1_1_UNRELEASED)
4586	out.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
4587	out.getVersion().before(Version.V_5_1_1_UNRELEASED)
4588	out.getVersion().onOrAfter(Version.V_5_1_1_UNRELEASED)
4589	Strings.isEmpty(field)
4590	Strings.isEmpty(field)
4591	flags.length > 0
4591	flags != null
4592	useAllFields
4592	useAllFields != null
4592	fieldsAndWeights.size() != 0
4593	this.fieldsAndWeights.isEmpty()
4593	this.useAllFields
4593	context.getMapperService().allEnabled() == false
4593	"_all".equals(context.defaultField())
4593	this.useAllFields != null
4594	fieldsAndWeights.isEmpty()
4595	Regex.isSimpleMatchPattern(fieldEntry.getKey())
4596	analyzer == null
4597	luceneAnalyzer == null
4598	fieldType != null
4599	fieldsAndWeights.size() > 0
4600	analyzer != null
4601	lenientSet
4602	settings.quoteFieldSuffix() != null
4603	minimumShouldMatch != null
4604	useAllFields != null
4605	token == XContentParser.Token.FIELD_NAME
4606	token == XContentParser.Token.START_ARRAY
4607	FIELDS_FIELD.match(currentFieldName)
4608	text[i] == '^'
4609	fField == null
4610	token.isValue()
4611	QUERY_FIELD.match(currentFieldName)
4612	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4613	ANALYZER_FIELD.match(currentFieldName)
4614	DEFAULT_OPERATOR_FIELD.match(currentFieldName)
4615	FLAGS_FIELD.match(currentFieldName)
4616	parser.currentToken() != XContentParser.Token.VALUE_NUMBER
4617	flags < 0
4618	LOCALE_FIELD.match(currentFieldName)
4619	LOWERCASE_EXPANDED_TERMS_FIELD.match(currentFieldName)
4620	LENIENT_FIELD.match(currentFieldName)
4621	ANALYZE_WILDCARD_FIELD.match(currentFieldName)
4622	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4623	MINIMUM_SHOULD_MATCH_FIELD.match(currentFieldName)
4624	QUOTE_FIELD_SUFFIX_FIELD.match(currentFieldName)
4625	ALL_FIELDS_FIELD.match(currentFieldName)
4626	queryBody == null
4627	useAllFields != null
4627	useAllFields
4627	fieldsAndWeights.size() != 0
4628	lenient != null
11437	in.readBoolean()
11438	failure == null
11439	ingestDocument == null
11440	failure == null
11453	verbose
11454	in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
11455	out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
11456	pipelineId == null
11457	pipeline == null
11465	verbose
11463	request.getId() != null
11441	in.readBoolean()
11442	ingestDocument == null
11443	ingestDocument == null
11444	processorTag != null
11445	ingestDocument != null
11445	failure != null
11446	failure != null
11447	ingestDocument != null
2349	ap > Math.random()
2350	newCost < bestCost
5454	fieldInfo.name.equals(field)
5455	fieldInfo.name.equals(UidFieldMapper.NAME)
5456	TypeFieldMapper.NAME.equals(field)
5456	IdFieldMapper.NAME.equals(field)
5457	uid != null
5458	fieldsValues == null
5459	fieldValues == null
7657	Modifier.isProtected(modifiers)
7657	Modifier.isPrivate(modifiers)
7069	initialValue == null
7070	needsRefresh()
7071	refreshLock.tryLock()
7072	needsRefresh()
7073	refreshInterval.millis() == 0
7703	parameterInjectors == null
11638	index == null
11639	in.readBoolean()
5633	docsWithField != null
5633	value.lat() == Double.NaN
5633	value.lon() == Double.NaN
5633	docsWithField.get(docID)
5631	value.length == 0
5631	docsWithField.get(docID)
5631	docsWithField != null
5686	value == 0
5686	docsWithField.get(doc) == false
5686	docsWithField != null
7153	e != null
7154	e != null
7155	v
7156	count > capacity
7157	offered
7836	size < 0
7837	singles >= SizeUnit.C5
7838	singles >= SizeUnit.C4
7839	singles >= SizeUnit.C3
7840	singles >= SizeUnit.C2
7841	singles >= SizeUnit.C1
7842	sValue == null
7843	sValue.endsWith("K")
7843	sValue.endsWith("k")
7844	sValue.endsWith("m")
7844	sValue.endsWith("M")
7845	sValue.endsWith("g")
7845	sValue.endsWith("G")
7846	sValue.endsWith("t")
7846	sValue.endsWith("T")
7847	sValue.endsWith("p")
7847	sValue.endsWith("P")
7848	this == o
7849	getClass() != o.getClass()
7849	o == null
1100	Strings.isEmpty(field)
1101	id < 0
1102	id >= max
1102	max != -1
1103	max <= 1
1104	id >= max
1104	id != -1
1105	other instanceof SliceBuilder
1106	type == null
1107	UidFieldMapper.NAME.equals(field)
1108	type.hasDocValues() == false
1109	ifm instanceof IndexNumericFieldData == false
1110	numShards == 1
1111	max >= numShards
1112	targetShard != shardId
1113	rest > targetShard
1114	numSlicesInShard == 1
1115	id != targetSlice
1099	sameClassAs(o) == false
5757	slice < numSlices
5758	currentStream == null
5759	stream == null
5760	read == -1
5761	stream == null
5762	read <= 0
896	this == obj
897	getClass() != obj.getClass()
897	obj == null
898	token == XContentParser.Token.FIELD_NAME
899	token == XContentParser.Token.START_OBJECT
900	LinearInterpolation.PARSE_FIELD.match(fieldName)
901	Laplace.PARSE_FIELD.match(fieldName)
902	StupidBackoff.PARSE_FIELD.match(fieldName)
9983	this == o
9984	getClass() != o.getClass()
9984	o == null
12739	this == o
12740	getClass() != o.getClass()
12740	o == null
12741	i + 1 < entries.size()
9985	snapshot != null
5766	physicalFiles == null
9900	this == o
9901	getClass() != o.getClass()
9901	o == null
9902	parser.currentToken() == XContentParser.Token.START_OBJECT
9903	NAME.equals(currentFieldName)
9904	UUID.equals(currentFieldName)
11937	shardRouting.primary()
11938	snapshotsInProgress == null
11939	shardSnapshotStatus != null
11939	shardSnapshotStatus.state().completed()
11939	shardSnapshotStatus.nodeId() != null
11939	shardSnapshotStatus.nodeId().equals(shardRouting.currentNodeId())
11940	logger.isTraceEnabled()
11106	getNodeId() != null
11107	getFailure() != null
9945	size > 0
9946	in.getVersion().before(VERSION_INCOMPATIBLE_INTRODUCED)
9947	this == o
9948	getClass() != o.getClass()
9948	o == null
9949	state == SnapshotState.FAILED
9950	shardFailures.size() == 0
9951	CONTEXT_MODE_SNAPSHOT.equals(params.param(CONTEXT_MODE_PARAM))
9952	version != null
9953	reason != null
9954	startTime != 0
9955	endTime != 0
9956	reason != null
9957	parser.currentToken() == null
9958	parser.currentToken() == XContentParser.Token.START_OBJECT
9959	(token = parser.nextToken()) == XContentParser.Token.START_OBJECT
9960	SNAPSHOT.equals(currentFieldName)
9961	token == XContentParser.Token.FIELD_NAME
9962	token.isValue()
9963	NAME.equals(currentFieldName)
9964	UUID.equals(currentFieldName)
9965	STATE.equals(currentFieldName)
9966	REASON.equals(currentFieldName)
9967	START_TIME.equals(currentFieldName)
9968	END_TIME.equals(currentFieldName)
9969	TOTAL_SHARDS.equals(currentFieldName)
9970	SUCCESSFUL_SHARDS.equals(currentFieldName)
9971	VERSION_ID.equals(currentFieldName)
9972	token == XContentParser.Token.START_ARRAY
9973	INDICES.equals(currentFieldName)
9974	FAILURES.equals(currentFieldName)
9975	token == XContentParser.Token.START_OBJECT
9976	uuid == null
9977	state == SnapshotState.INCOMPATIBLE
9977	out.getVersion().before(VERSION_INCOMPATIBLE_INTRODUCED)
9978	out.getVersion().before(VERSION_INCOMPATIBLE_INTRODUCED)
9979	versionToWrite == null
9980	version != null
9981	reason == null
9982	shardFailures.isEmpty()
9905	token == XContentParser.Token.START_OBJECT
9906	token == XContentParser.Token.FIELD_NAME
9907	token.isValue()
9908	"index".equals(currentFieldName)
9909	"index_uuid".equals(currentFieldName)
9910	"node_id".equals(currentFieldName)
9911	"reason".equals(currentFieldName)
9912	"shard_id".equals(currentFieldName)
9913	"status".equals(currentFieldName)
9914	index == null
9915	shardId == -1
9916	nodeId != null
9986	DiscoveryNode.isDataNode(settings)
9987	DiscoveryNode.isMasterNode(settings)
9988	prev == null
9988	prev != null
9988	prev.equals(curr) == false
9988	curr != null
9989	masterNodeId != null
9989	masterNodeId.equals(event.previousState().nodes().getMasterNodeId()) == false
9990	shards.containsKey(shardId)
9991	snapshotShards == null
9992	snapshotsInProgress.snapshot(snapshot) != null
9992	snapshotsInProgress != null
9993	snapshotStatus.stage() == Stage.INIT
9993	snapshotStatus.stage() == Stage.STARTED
9994	snapshotsInProgress != null
9995	entry.state() == State.STARTED
9996	localNodeId.equals(shard.value.nodeId())
9997	snapshotShards == null
9997	shard.value.state() == State.INIT
9997	snapshotShards.shards.containsKey(shard.key)
9998	startedShards.isEmpty()
9999	snapshotShards != null
10000	entry.state() == State.ABORTED
10001	snapshotShards != null
10002	snapshotStatus != null
10003	shardSnapshots.isEmpty()
10004	indexShard.routingEntry().primary()
10005	indexShard.routingEntry().relocating()
10006	indexShard.state() == IndexShardState.RECOVERING
10006	indexShard.state() == IndexShardState.CREATED
10007	logger.isDebugEnabled()
10008	snapshotsInProgress == null
10009	snapshot.state() == State.STARTED
10009	snapshot.state() == State.ABORTED
10010	localShards != null
10011	masterShard != null
10011	masterShard.state().completed() == false
10012	localShardStatus.stage() == Stage.DONE
10013	localShard.getValue().stage() == Stage.FAILURE
11108	startTime == 0
11126	this.indicesStatus != null
11127	shard.getIndex().equals(index)
10014	IndexNameExpressionResolver.isAllIndices(Arrays.asList(selectedIndices))
10015	indexOrPattern.isEmpty()
10016	availableIndices.contains(indexOrPattern)
10017	result == null
10018	indexOrPattern.charAt(0) == '+'
10019	i == 0
10020	indexOrPattern.charAt(0) == '-'
10021	i == 0
10022	Regex.isSimpleMatchPattern(indexOrPattern)
10022	indexOrPattern.isEmpty()
10023	availableIndices.contains(indexOrPattern)
10024	indicesOptions.ignoreUnavailable()
10025	result == null
10026	result != null
10027	add
10028	result == null
10029	Regex.simpleMatch(indexOrPattern, index)
10030	add
10031	found
10031	indicesOptions.allowNoIndices()
10032	result == null
12624	this == o
12625	o == null
12625	getClass() != o.getClass()
12626	entries.equals(that.entries)
12627	i + 1 < entries.size()
12628	status.value.state().completed() == false
12629	curr.equals(snapshot)
12630	in.getVersion().onOrAfter(REPOSITORY_ID_INTRODUCED_VERSION)
12631	out.getVersion().onOrAfter(REPOSITORY_ID_INTRODUCED_VERSION)
9829	DiscoveryNode.isMasterNode(settings)
9830	entries.isEmpty()
9831	ignoreUnavailable
9832	repositoriesMetaData == null
9832	repositoriesMetaData.repository(repository) == null
9833	Strings.hasLength(snapshotName) == false
9834	snapshotName.contains(" ")
9835	snapshotName.contains(",")
9836	snapshotName.contains("#")
9837	snapshotName.charAt(0) == '_'
9838	snapshotName.toLowerCase(Locale.ROOT).equals(snapshotName) == false
9839	Strings.validFileName(snapshotName) == false
9840	snapshot.includeGlobalState()
9841	snapshot.indices().isEmpty()
9842	snapshotsInProgress.entries().isEmpty()
9842	snapshotsInProgress == null
9843	"_all".equals(repository)
9844	snapshotsInProgress.entries().size() == 1
9845	entry.snapshot().getRepository().equals(repository) == false
9846	snapshots.isEmpty() == false
9847	entry.snapshot().getSnapshotId().getName().equals(snapshot)
9848	entry.snapshot().getRepository().equals(repository) == false
9849	snapshots.isEmpty() == false
9850	entry.snapshot().getSnapshotId().getName().equals(snapshot)
9851	indexMetaData != null
9852	shardFailure != null
9853	snapshotInfo.state() == SnapshotState.FAILED
9854	shardId.getId() == shardFailure.shardId()
9854	shardId.getIndexName().equals(shardFailure.index())
9855	event.localNodeMaster()
9856	event.nodesRemoved()
9857	event.routingTableChanged()
9858	event.localNodeMaster()
9858	event.previousState().nodes().isLocalNodeElectedMaster() == false
9859	deletionsInProgress.hasDeletionsInProgress()
9859	deletionsInProgress != null
9860	removedNodesCleanupNeeded(event)
9861	waitingShardsStartedOrUnassigned(event)
9862	shardStatus.state() == State.WAITING
9863	indexShardRoutingTable != null
9864	shardRouting.primaryShard() != null
9864	shardRouting != null
9865	shardRouting.primaryShard().started()
9866	shardRouting.primaryShard().relocating()
9866	shardRouting.primaryShard().initializing()
9867	snapshotChanged
9868	curr != null
9869	entry.waitingIndices().isEmpty()
9869	entry.state() == State.STARTED
9870	event.indexRoutingTableChanged(index.value)
9871	shardRouting != null
9871	shardRouting.started()
9871	shardRouting.unassigned()
9872	snapshotsInProgress == null
9873	newMaster
9873	snapshot.state() == State.INIT
9873	snapshot.state() == State.SUCCESS
9874	shardStatus.value.state().completed()
9874	node.getId().equals(shardStatus.value.nodeId())
9875	entry.value.state() == State.MISSING
9876	metaData.hasIndex(entry.key.getIndex().getName())
9876	metaData.getIndexSafe(entry.key.getIndex()).getState() == IndexMetaData.State.CLOSE
9877	incompatibleSnapshotId.isPresent()
9878	matchedEntry.isPresent() == false
9879	matchedEntry.isPresent() == false
9880	snapshots != null
9881	repository.equals(snapshot.snapshot().getRepository())
9882	deletionsInProgress != null
9883	entry.getSnapshot().getRepository().equals(repository)
9884	indexMetaData == null
9885	indexMetaData.getState() == IndexMetaData.State.CLOSE
9886	indexRoutingTable != null
9887	primary.assignedToNode()
9887	primary == null
9888	primary.initializing()
9888	primary.relocating()
9889	primary.started()
9890	indicesToFail != null
9891	indicesToFail != null
9892	snapshots != null
9893	entry.partial() == false
9894	entry.state() == State.INIT
9895	indices.contains(indexMetaData)
9895	indexMetaData != null
9896	indicesToFail == null
9897	shard.value.state().completed()
9898	indexMetaData != null
9898	indices.contains(indexMetaData)
9899	indicesToFail == null
11124	repository == null
11125	snapshots == null
6065	name.equals("English")
6065	name.equals("Porter")
6065	name.equals("Lovins")
6066	name.equals("Turkish")
6067	stopSet != null
1720	sort.getSort().length != formats.length
1703	token == XContentParser.Token.START_ARRAY
1704	token == XContentParser.Token.START_OBJECT
1705	token == XContentParser.Token.VALUE_STRING
1706	token == XContentParser.Token.VALUE_STRING
1707	token == XContentParser.Token.START_OBJECT
1708	fieldName.equals(ScoreSortBuilder.NAME)
1709	token == XContentParser.Token.FIELD_NAME
1710	token == XContentParser.Token.VALUE_STRING
1711	PARSERS.containsKey(fieldName)
1712	sortFields.isEmpty()
1713	sortFields.size() > 1
1714	sortField.getType() == SortField.Type.SCORE
1714	sortField.getReverse()
1715	sort
1716	nestedPath != null
1717	nestedObjectMapper == null
1718	nestedObjectMapper.nested().isNested()
1719	nestedFilter != null
5679	numericType == null
5680	sortMode != MultiValueMode.MAX
5680	sortMode != MultiValueMode.MIN
5680	numericType == NumericType.HALF_FLOAT
5680	nested != null
5681	source.sortMissingFirst(missingValue) == false
5681	sortMode != MultiValueMode.MAX
5681	nested != null
5681	sortMode != MultiValueMode.MIN
5681	source.sortMissingLast(missingValue) == false
5682	indexReader.leaves().size() <= 1
5683	context.reader().getFieldInfos().fieldInfo(getFieldName()) != null
5684	fieldFound == false
5685	e instanceof ElasticsearchException
5632	values.length < count
3949	enabled
3950	fieldType().stored()
3951	source == null
3952	filter != null
3953	excludes == null
3953	includeDefaults
3953	enabled == Defaults.ENABLED
3953	includes == null
3954	enabled != Defaults.ENABLED
3954	includeDefaults
3955	includes != null
3956	includeDefaults
3957	excludes != null
3958	includeDefaults
3959	this.enabled != sourceMergeWith.enabled
3960	Arrays.equals(includes(), sourceMergeWith.includes()) == false
3961	Arrays.equals(excludes(), sourceMergeWith.excludes()) == false
3962	conflicts.isEmpty() == false
1454	source != null
1455	sourceAsBytes != null
1456	source == null
1457	this.reader == context.reader()
1457	this.docId == docId
7501	classNamesToSkip.contains(className)
1293	values.isEmpty()
4629	big == null
4630	little == null
4631	token == XContentParser.Token.FIELD_NAME
4632	token == XContentParser.Token.START_OBJECT
4633	BIG_FIELD.match(currentFieldName)
4634	query instanceof SpanQueryBuilder == false
4635	LITTLE_FIELD.match(currentFieldName)
4636	query instanceof SpanQueryBuilder == false
4637	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4638	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4228	matchBuilder == null
4229	end < 0
4230	token == XContentParser.Token.FIELD_NAME
4231	token == XContentParser.Token.START_OBJECT
4232	MATCH_FIELD.match(currentFieldName)
4233	query instanceof SpanQueryBuilder == false
4234	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4235	END_FIELD.match(currentFieldName)
4236	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4237	match == null
4238	end == null
4080	multiTermQueryBuilder == null
4081	token == XContentParser.Token.FIELD_NAME
4082	token == XContentParser.Token.START_OBJECT
4083	MATCH_FIELD.match(currentFieldName)
4084	query instanceof MultiTermQueryBuilder == false
4085	token.isValue()
4086	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4087	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4088	subQuery == null
4089	subQuery instanceof BoostQuery
4090	subQuery instanceof MultiTermQuery == false
4091	boost != AbstractQueryBuilder.DEFAULT_BOOST
4867	initialClause == null
4868	clause == null
4869	token == XContentParser.Token.FIELD_NAME
4870	token == XContentParser.Token.START_ARRAY
4871	CLAUSES_FIELD.match(currentFieldName)
4872	query instanceof SpanQueryBuilder == false
4873	token.isValue()
4874	IN_ORDER_FIELD.match(currentFieldName)
4875	SLOP_FIELD.match(currentFieldName)
4876	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4877	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4878	clauses.isEmpty()
4879	slop == null
4848	include == null
4849	exclude == null
4850	token == XContentParser.Token.FIELD_NAME
4851	token == XContentParser.Token.START_OBJECT
4852	INCLUDE_FIELD.match(currentFieldName)
4853	query instanceof SpanQueryBuilder == false
4854	EXCLUDE_FIELD.match(currentFieldName)
4855	query instanceof SpanQueryBuilder == false
4856	DIST_FIELD.match(currentFieldName)
4857	PRE_FIELD.match(currentFieldName)
4858	POST_FIELD.match(currentFieldName)
4859	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4860	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4861	include == null
4862	exclude == null
4863	post != null
4863	dist != null
4863	pre != null
4864	dist != null
4865	pre != null
4866	post != null
4895	initialClause == null
4896	clause == null
4897	token == XContentParser.Token.FIELD_NAME
4898	token == XContentParser.Token.START_ARRAY
4899	CLAUSES_FIELD.match(currentFieldName)
4900	query instanceof SpanQueryBuilder == false
4901	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4902	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4903	clauses.isEmpty()
4572	mapper == null
4573	token == XContentParser.Token.FIELD_NAME
4574	token == XContentParser.Token.START_OBJECT
4575	token == XContentParser.Token.FIELD_NAME
4576	TERM_FIELD.match(currentFieldName)
4577	BaseTermQueryBuilder.VALUE_FIELD.match(currentFieldName)
4578	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4579	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4326	big == null
4327	little == null
4328	token == XContentParser.Token.FIELD_NAME
4329	token == XContentParser.Token.START_OBJECT
4330	BIG_FIELD.match(currentFieldName)
4331	query instanceof SpanQueryBuilder == false
4332	LITTLE_FIELD.match(currentFieldName)
4333	query instanceof SpanQueryBuilder == false
4334	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4335	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4336	big == null
4337	little == null
3159	spawned.compareAndSet(false, true)
3160	Files.exists(pluginsFile)
3161	Files.isRegularFile(spawnPath)
3162	info.hasNativeController()
3102	sm != null
7610	member == null
6223	stopwords.isEmpty()
6721	in.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
6722	out.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
3171	cause instanceof CreationException
3172	cause != null
3173	message.equals(cause.toString()) == false
3173	cause != originalCause
3174	linesWritten == STACKTRACE_LIMIT
3175	line.startsWith(GUICE_PACKAGE)
3176	originalCause instanceof CreationException == false
3177	cause != null
2824	valuesSource != null
2825	valuesSource == null
2826	valuesSource == null
2826	owningBucketOrd >= counts.size()
2827	bucket >= sums.size()
2827	valuesSource == null
2402	bucketsPaths.length != 1
6073	rules == null
6074	mapping.size() == 2
6075	override.isEmpty()
6075	key.isEmpty()
6120	"arabic".equalsIgnoreCase(language)
6121	"armenian".equalsIgnoreCase(language)
6122	"basque".equalsIgnoreCase(language)
6123	"brazilian".equalsIgnoreCase(language)
6124	"bulgarian".equalsIgnoreCase(language)
6125	"catalan".equalsIgnoreCase(language)
6126	"czech".equalsIgnoreCase(language)
6127	"danish".equalsIgnoreCase(language)
6128	"dutch".equalsIgnoreCase(language)
6129	"dutch_kp".equalsIgnoreCase(language)
6129	"kp".equalsIgnoreCase(language)
6129	"dutchKp".equalsIgnoreCase(language)
6130	"english".equalsIgnoreCase(language)
6131	"kstem".equalsIgnoreCase(language)
6131	"light_english".equalsIgnoreCase(language)
6131	"lightEnglish".equalsIgnoreCase(language)
6132	"lovins".equalsIgnoreCase(language)
6133	"porter".equalsIgnoreCase(language)
6134	"porter2".equalsIgnoreCase(language)
6135	"minimalEnglish".equalsIgnoreCase(language)
6135	"minimal_english".equalsIgnoreCase(language)
6136	"possessive_english".equalsIgnoreCase(language)
6136	"possessiveEnglish".equalsIgnoreCase(language)
6137	"finnish".equalsIgnoreCase(language)
6138	"light_finish".equalsIgnoreCase(language)
6138	"lightFinish".equalsIgnoreCase(language)
6139	"lightFinnish".equalsIgnoreCase(language)
6139	"light_finnish".equalsIgnoreCase(language)
6140	"french".equalsIgnoreCase(language)
6141	"light_french".equalsIgnoreCase(language)
6141	"lightFrench".equalsIgnoreCase(language)
6142	"minimalFrench".equalsIgnoreCase(language)
6142	"minimal_french".equalsIgnoreCase(language)
6143	"galician".equalsIgnoreCase(language)
6144	"minimal_galician".equalsIgnoreCase(language)
6145	"german".equalsIgnoreCase(language)
6146	"german2".equalsIgnoreCase(language)
6147	"light_german".equalsIgnoreCase(language)
6147	"lightGerman".equalsIgnoreCase(language)
6148	"minimal_german".equalsIgnoreCase(language)
6148	"minimalGerman".equalsIgnoreCase(language)
6149	"greek".equalsIgnoreCase(language)
6150	"hindi".equalsIgnoreCase(language)
6151	"hungarian".equalsIgnoreCase(language)
6152	"light_hungarian".equalsIgnoreCase(language)
6152	"lightHungarian".equalsIgnoreCase(language)
6153	"indonesian".equalsIgnoreCase(language)
6154	"irish".equalsIgnoreCase(language)
6155	"italian".equalsIgnoreCase(language)
6156	"lightItalian".equalsIgnoreCase(language)
6156	"light_italian".equalsIgnoreCase(language)
6157	"latvian".equalsIgnoreCase(language)
6158	"lithuanian".equalsIgnoreCase(language)
6159	"norwegian".equalsIgnoreCase(language)
6160	"light_norwegian".equalsIgnoreCase(language)
6160	"lightNorwegian".equalsIgnoreCase(language)
6161	"minimalNorwegian".equals(language)
6161	"minimal_norwegian".equalsIgnoreCase(language)
6162	"light_nynorsk".equalsIgnoreCase(language)
6162	"lightNynorsk".equalsIgnoreCase(language)
6163	"minimal_nynorsk".equalsIgnoreCase(language)
6163	"minimalNynorsk".equalsIgnoreCase(language)
6164	"portuguese".equalsIgnoreCase(language)
6165	"lightPortuguese".equalsIgnoreCase(language)
6165	"light_portuguese".equalsIgnoreCase(language)
6166	"minimal_portuguese".equalsIgnoreCase(language)
6166	"minimalPortuguese".equalsIgnoreCase(language)
6167	"portuguese_rslp".equalsIgnoreCase(language)
6168	"romanian".equalsIgnoreCase(language)
6169	"russian".equalsIgnoreCase(language)
6170	"light_russian".equalsIgnoreCase(language)
6170	"lightRussian".equalsIgnoreCase(language)
6171	"spanish".equalsIgnoreCase(language)
6172	"light_spanish".equalsIgnoreCase(language)
6172	"lightSpanish".equalsIgnoreCase(language)
6173	"sorani".equalsIgnoreCase(language)
6174	"swedish".equalsIgnoreCase(language)
6175	"lightSwedish".equalsIgnoreCase(language)
6175	"light_swedish".equalsIgnoreCase(language)
6176	"turkish".equalsIgnoreCase(language)
6231	settings.get("enable_position_increments") != null
6232	removeTrailing
8927	this.running
8928	this.running
8929	this.keepTaskList
8930	this.lastTaskInfo == null
8931	this.lastTaskInfo == null
8932	this.keepTaskList
8933	this.keepTaskList
8934	this.keepTaskList
6289	this.refCounter.refCount() <= 0
6290	isClosed.compareAndSet(false, true)
6291	success == false
6292	output instanceof VerifyingIndexOutput
6293	input instanceof VerifyingIndexInput
6294	input.length() != md.length()
6295	checksum.equals(md.checksum())
6296	file.startsWith(CORRUPTED)
6297	file.startsWith(CORRUPTED)
6298	firstException == null
6299	firstException != null
6300	file.startsWith(CORRUPTED)
6301	version == VERSION_WRITE_THROWABLE
6302	t instanceof CorruptIndexException
6303	version == VERSION_STACK_TRACE
6304	ex.isEmpty() == false
6305	sourceMetaData.contains(existingFile)
6305	Store.isAutogenerated(existingFile)
6306	existingFile.equals(IndexFileNames.OLD_SEGMENTS_GEN)
6306	existingFile.startsWith(IndexFileNames.SEGMENTS)
6307	recoveryDiff.identical.size() != recoveryDiff.size()
6308	recoveryDiff.missing.isEmpty()
6309	local.isSame(remote) == false
6310	isMarkedCorrupted()
6276	other.checksum == null
6276	checksum == null
5822	canRecover(indexShard)
5823	canRecover(indexShard)
5824	indexShard.state() == IndexShardState.CLOSED
5825	indexShard.routingEntry().primary()
5826	logger.isTraceEnabled()
5827	logger.isDebugEnabled()
5828	indexShard.state() == IndexShardState.CLOSED
5829	e.getCause() instanceof IndexShardClosedException
5829	e.getCause() instanceof IndexShardNotStartedException
5830	indexShard.state() == IndexShardState.CLOSED
5831	indexShouldExists
5832	si != null
5833	indexShouldExists
5834	recoveryState.getRecoverySource().getType() == RecoverySource.Type.LOCAL_SHARDS
5835	si != null
5836	restoreSource == null
5837	logger.isTraceEnabled()
5838	shardId.getIndexName().equals(indexName)
6311	stats == null
6312	in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
6313	out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
1188	other.fieldNames() != null
1189	fetchFields
1190	fetchFields
1191	fieldNames.contains(_NONE_)
1191	fetchFields == false
1192	fetchFields == false
1192	_NONE_.equals(field)
1193	this == o
1194	getClass() != o.getClass()
1194	o == null
1195	fetchFields != that.fetchFields
1196	fetchFields == false
1197	fieldNames != null
1198	fieldNames.size() == 1
1199	_NONE_.equals(fieldNames.get(0))
1199	fieldNames.size() == 1
1200	fieldNames.contains(_NONE_)
1201	token == XContentParser.Token.VALUE_STRING
1202	token == XContentParser.Token.START_ARRAY
1203	sField != null
9280	token != Token.START_OBJECT
9281	token != Token.FIELD_NAME
9282	SCRIPT_PARSE_FIELD.getPreferredName().equals(name)
9283	token == Token.VALUE_STRING
9284	lang == null
9285	token == Token.START_OBJECT
9286	lang == null
9287	lang == null
9288	TEMPLATE_PARSE_FIELD.getPreferredName().equals(name)
9289	token == Token.VALUE_STRING
9290	token != Token.START_OBJECT
9291	in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
9292	out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
9293	this == o
9294	o == null
9294	getClass() != o.getClass()
9295	lang != null ? !lang.equals(that.lang) : that.lang != null
9295	lang.equals(that.lang)
9296	code != null ? !code.equals(that.code) : that.code != null
9296	code.equals(that.code)
8580	length < 0
8581	length == 0
8582	length == 0
8583	(b & 0x80) == 0
8584	(b & 0x80) == 0
8585	(b & 0x80) == 0
8586	(b & 0x80) == 0
8587	(b & 0x80) == 0
8588	(b & 0x80) == 0
8589	(b & 0x80) == 0
8590	(b & 0x80) == 0
8591	(b & 0x80) == 0
8592	(b & 0x80) == 0
8593	(b & 0x80) == 0
8594	(b & 0x80) == 0
8595	(b & 0x80) == 0
8596	b != 1
8596	b != 0
8597	i > 63
8598	readBoolean()
8599	length == -1
8600	readBoolean()
8601	readBoolean()
8602	readBoolean()
8603	spare.chars.length < charCount
8604	readBoolean()
8605	value == 0
8606	value == 1
8607	value == 2
8608	size == 0
8609	readBoolean()
8610	size == 0
8611	readBoolean()
8612	readBoolean()
8613	readBoolean()
8614	t == null
8615	readBoolean()
8616	readBoolean()
8617	readBoolean()
8618	arraySize > ArrayUtil.MAX_ARRAY_LENGTH
8619	arraySize < 0
8504	bytes == null
8505	bytes == null
8506	bytes == null
8507	i < 0
8508	l == null
8509	str == null
8510	integer == null
8511	floatValue == null
8512	text == null
8513	text.hasBytes()
8514	convertStringBuffer.length < bufferSize
8515	c <= 0x007F
8516	c > 0x07FF
8517	offset > buffer.length - 3
8518	v == null
8519	b == null
8520	array == null
8521	array == null
8522	map == null
8523	value == null
8524	value instanceof List
8525	value instanceof Object[]
8526	value instanceof Map
8527	value instanceof ReadableInstant
8528	value instanceof BytesReference
8529	writer != null
8530	array == null
8531	streamable != null
8532	writeable != null
8533	throwable == null
8534	throwable instanceof CorruptIndexException
8535	throwable instanceof IndexFormatTooNewException
8536	throwable instanceof IndexFormatTooOldException
8537	t.getVersion() == null
8538	throwable instanceof NullPointerException
8539	throwable instanceof NumberFormatException
8540	throwable instanceof IllegalArgumentException
8541	throwable instanceof AlreadyClosedException
8542	throwable instanceof EOFException
8543	throwable instanceof SecurityException
8544	throwable instanceof StringIndexOutOfBoundsException
8545	throwable instanceof ArrayIndexOutOfBoundsException
8546	throwable instanceof FileNotFoundException
8547	throwable instanceof FileSystemException
8548	throwable instanceof NoSuchFileException
8549	throwable instanceof NotDirectoryException
8550	throwable instanceof DirectoryNotEmptyException
8551	throwable instanceof AtomicMoveNotSupportedException
8552	throwable instanceof FileAlreadyExistsException
8553	throwable instanceof AccessDeniedException
8554	throwable instanceof FileSystemLoopException
8555	throwable instanceof IllegalStateException
8556	throwable instanceof LockObtainFailedException
8557	throwable instanceof InterruptedException
8558	throwable instanceof IOException
8559	ElasticsearchException.isRegistered(throwable.getClass(), version)
8559	throwable instanceof ElasticsearchException
8560	writeMessage
8561	writeCause
8562	namedWriteable == null
8563	timeZone == null
8442	success
8443	success
8444	r == -1
8445	r == -1
12852	fields == null
12852	fields.size() == 0
12853	workingFields.contains(DateTimeFieldType.monthOfYear())
12854	workingFields.contains(DateTimeFieldType.dayOfYear())
12855	workingFields.contains(DateTimeFieldType.weekOfWeekyear())
12856	workingFields.contains(DateTimeFieldType.dayOfMonth())
12857	workingFields.contains(DateTimeFieldType.dayOfWeek())
12858	workingFields.remove(DateTimeFieldType.year())
12859	workingFields.remove(DateTimeFieldType.weekyear())
12860	bld.canBuildFormatter() == false
12861	fields.remove(DateTimeFieldType.year())
12862	fields.remove(DateTimeFieldType.monthOfYear())
12863	fields.remove(DateTimeFieldType.dayOfMonth())
12864	fields.remove(DateTimeFieldType.dayOfMonth())
12865	fields.remove(DateTimeFieldType.monthOfYear())
12866	fields.remove(DateTimeFieldType.dayOfMonth())
12867	fields.remove(DateTimeFieldType.dayOfMonth())
12868	fields.remove(DateTimeFieldType.year())
12869	fields.remove(DateTimeFieldType.dayOfYear())
12870	fields.remove(DateTimeFieldType.dayOfYear())
12871	fields.remove(DateTimeFieldType.weekyear())
12872	fields.remove(DateTimeFieldType.weekOfWeekyear())
12873	fields.remove(DateTimeFieldType.dayOfWeek())
12874	fields.remove(DateTimeFieldType.dayOfWeek())
12875	fields.remove(DateTimeFieldType.weekOfWeekyear())
12876	fields.remove(DateTimeFieldType.dayOfWeek())
12877	fields.remove(DateTimeFieldType.dayOfWeek())
12878	milli
12878	hour
12878	minute
12878	second
12879	milli
12879	hour
12879	second
12879	minute
12880	reducedPrec
12880	strictISO
12881	datePresent
12882	second
12882	hour
12882	milli
12882	hour
12882	minute
12882	second
12883	strictISO
12883	datePresent
12884	minute
12884	second
12884	second
12884	minute
12884	milli
12884	hour
12885	strictISO
12886	hour
12887	minute
12887	milli
12887	second
12888	hour
12888	extended
12888	minute
12889	minute
12890	second
12890	milli
12891	extended
12891	second
12891	minute
12892	second
12893	milli
12894	milli
12895	strictISO
12896	extended
3524	method != null
3525	method != null
1945	order != InternalOrder.COUNT_DESC
1945	bucketCountThresholds.getMinDocCount() == 0
1945	bucketOrds.size() < bucketCountThresholds.getRequiredSize()
1946	includeExclude == null
1946	includeExclude.accept(term)
1947	spare == null
1948	bucketCountThresholds.getShardMinDocCount() <= spare.docCount
9133	s.startsWith(separator, pos)
9134	sb.length() > 0
9135	ch == '\\'
9136	decode
9137	pos >= end
9138	decode
9139	sb.length() > 0
9140	hasLength(str)
9141	Character.isWhitespace(str.charAt(i))
9142	hasLength(str)
9143	i >= str.length()
9143	str.charAt(i) != substring.charAt(j)
9144	hasLength(oldPattern)
9144	hasLength(inString)
9144	newPattern == null
9145	hasLength(charsToDelete)
9145	hasLength(inString)
9146	charsToDelete.indexOf(c) == -1
9147	str.length() == 0
9147	str == null
9148	capitalize
9149	INVALID_FILENAME_CHARS.contains(c)
9150	INVALID_FILENAME_CHARS.contains(c)
9150	c != '*'
9151	path == null
9152	prefixIndex != -1
9153	pathToUse.startsWith(FOLDER_SEPARATOR)
9154	CURRENT_PATH.equals(element)
9155	TOP_PATH.equals(element)
9156	tops > 0
9157	collection == null
9158	s == null
9158	s.isEmpty()
9159	s == null
9159	s.isEmpty()
9160	x == c
9161	chars[pos] == c
9162	size > 0
9163	Character.isWhitespace(chars[pos])
9164	start == pos
9165	size > 0
9166	hasLength(delimiter)
9166	hasLength(toSplit)
9167	offset < 0
9168	str == null
9169	trimTokens
9170	ignoreEmptyTokens
9170	token.length() > 0
9171	str == null
9172	delimiter == null
9173	"".equals(delimiter)
9174	str.length() > 0
9174	pos <= str.length()
9175	it.hasNext()
9176	isEmpty(arr)
9177	i > 0
9178	fraction == '0'
9179	ex != -1
9180	ex != -1
9181	s == null
9182	endIndex > realEndIndex
9183	toXContent.isFragment()
9184	toXContent.isFragment()
9185	s == null
9186	length == 0
9187	length >= s.length()
9188	Character.isHighSurrogate(s.charAt(length - 1))
9189	s == null
9190	s.length() >= minimumLength
7622	s.length() == 0
836	token == XContentParser.Token.FIELD_NAME
837	token.isValue()
837	DISCOUNT_FIELD.match(fieldName)
903	count < 1
904	bigramCount < 1
905	trigramCount < 1
1631	scriptFields == null
1632	parsedQuery != null
1087	suggestions.isEmpty()
1087	name == null
1088	suggestions.size() == 1
1089	this.suggestMap == null
1090	suggestionClass == null
1091	suggestionClass != suggestion.getClass()
906	suggestions.get(name) == null
907	globalText != null
908	parser.currentToken() == null
909	token == XContentParser.Token.FIELD_NAME
910	token.isValue()
911	GLOBAL_TEXT_FIELD.match(fieldName)
912	token == XContentParser.Token.START_OBJECT
913	suggestionName == null
914	suggestionContext.getText() == null
915	globalText == null
916	this == other
917	other == null
917	getClass() != other.getClass()
978	suggest == null
979	result != null
1092	searcher.getIndexReader().numDocs() == 0
918	field.isEmpty()
919	size <= 0
920	text != null
921	prefix != null
922	regex != null
923	analyzer != null
924	size != null
925	shardSize != null
926	token == XContentParser.Token.FIELD_NAME
927	token.isValue()
928	TEXT_FIELD.match(currentFieldName)
929	PREFIX_FIELD.match(currentFieldName)
930	REGEX_FIELD.match(currentFieldName)
931	token == XContentParser.Token.START_OBJECT
932	suggestionBuilder == null
933	suggestText != null
934	prefix != null
935	regex != null
936	fieldType == null
937	analyzer == null
938	fieldType.searchAnalyzer() == null
939	luceneAnalyzer == null
940	size != null
941	shardSize != null
942	text != null
943	prefix != null
944	regex != null
945	text != null
945	prefix == null
946	prefix != null
946	text == null
947	text == null
947	regex != null
948	this == obj
949	getClass() != obj.getClass()
949	obj == null
2613	valuesSource != null
2614	valuesSource == null
2615	owningBucketOrd >= sums.size()
2615	valuesSource == null
2616	valuesSource == null
2616	bucket >= sums.size()
2384	bucketsPaths.length != 1
10780	indexShardCounts.failed > 0
10781	shardResults.failed()
10782	result.failed()
6859	indexShard.routingEntry().primary()
6860	numberOfShards == 0
6861	activeShards.size() == 0
6862	indexRoutingTable == null
6863	index != null
6863	index.getState() == IndexMetaData.State.CLOSE
6864	shardRoutingTable == null
6865	primaryNode == null
6866	node == null
6867	expectedCommitId == null
6868	countDown.countDown()
6869	node == null
6870	countDown.countDown()
6871	indexShard.routingEntry().primary() == false
6248	settings.getAsArray("synonyms", null) != null
6249	settings.get("synonyms_path") != null
6250	tokenizerFactoryFactory == null
6251	"wordnet".equalsIgnoreCase(settings.get("format"))
3182	supported == false
3183	linux_libc == null
3184	linux_syscall(999) >= 0
3185	logger.isDebugEnabled()
3186	ret != -1
3187	ret != -1
3188	ret != -1
3189	errno == EINVAL
3190	errno == EINVAL
3191	linux_prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, 0, 0, 0) != 0
3192	linux_prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) != 0
3193	linux_prctl(PR_GET_NO_NEW_PRIVS, 0, 0, 0, 0) != 1
3194	linux_syscall(arch.seccomp, SECCOMP_SET_MODE_FILTER, SECCOMP_FILTER_FLAG_TSYNC, new NativeLong(pointer)) != 0
3195	logger.isDebugEnabled()
3196	linux_prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, pointer, 0, 0) != 0
3197	linux_prctl(PR_GET_SECCOMP, 0, 0, 0, 0) != 2
3198	supported == false
3199	libc_mac == null
3200	ret != 0
3201	success
3202	supported == false
3203	libc_solaris == null
3204	libc_solaris.priv_set(PRIV_OFF, PRIV_ALLSETS, PRIV_PROC_FORK, PRIV_PROC_EXEC, null) != 0
3205	supported == false
3206	JNACLibrary.setrlimit(RLIMIT_NPROC, limit) != 0
3207	Constants.WINDOWS
3208	job == null
3209	lib.QueryInformationJobObject(job, clazz, limits.getPointer(), limits.size(), null)
3210	lib.SetInformationJobObject(job, clazz, limits.getPointer(), limits.size())
3211	lib.AssignProcessToJobObject(job, lib.GetCurrentProcess())
3212	Constants.LINUX
3213	Constants.MAC_OS_X
3214	Constants.SUN_OS
3215	Constants.FREE_BSD
3215	OPENBSD
3216	Constants.WINDOWS
2778	state == null
2779	state == null
2784	state == null
2785	state == null
2790	obj instanceof TDigestState == false
2790	obj == null
2791	compression != that.compression
2792	thatCentroids.hasNext() == false
2793	thisNext.count() != thatNext.count()
2793	thisNext.mean() != thatNext.mean()
7783	currentCells == null
7783	currentCells.isEmpty()
7784	headers.isEmpty()
7785	withTime
7786	currentCells == null
7787	currentCells.size() != headers.size()
7787	check
7788	currentCells == null
7789	inHeaders
7790	currentCells.size() == headers.size()
7791	attributes.length() == 0
7792	inHeaders
7793	inHeaders
7794	sAttr.length() == 0
7795	inHeaders
7796	cell.value.toString().equals(header)
7797	headerCell.attr.containsKey("alias")
9598	detailed
9599	response instanceof ToXContent
10973	childTasks.isEmpty() == false
9626	nodeId.isEmpty()
9627	Strings.hasLength(taskId)
9627	"unset".equals(taskId) == false
9628	s.length != 2
9628	s == null
9629	nodeId.isEmpty()
9630	nodeId.isEmpty()
9631	isSet()
9632	this == o
9633	o == null
9633	getClass() != o.getClass()
9634	id != taskId.id
9622	status != null
9623	description != null
9624	parentTaskId.isSet()
9625	obj == null
9625	obj.getClass() != TaskInfo.class
9600	task == null
9601	logger.isTraceEnabled()
9602	task instanceof CancellableTask
9603	task.getParentTaskId().isSet()
9603	banedParents.isEmpty() == false
9604	reason != null
9605	holder != null
9606	task instanceof CancellableTask
9607	holder != null
9608	localNode == null
9609	localNode == null
9610	task != null
9611	holder != null
9612	lastDiscoveryNodes.nodeExists(parentTaskId.getNodeId())
9613	holder.hasParent(parentTaskId)
9614	event.nodesRemoved()
9615	lastDiscoveryNodes.nodeExists(taskId.getNodeId()) == false
9616	lastDiscoveryNodes.nodeExists(parentTaskId.getNodeId()) == false
9616	parentTaskId.isSet()
9617	task.cancelOnParentLeaving()
9618	getTask(task.getId()) == null
11435	reason != null
9593	error == null
9594	response == null
9595	error != null
9596	response != null
9597	obj == null
9597	obj.getClass() != TaskResult.class
9620	state.routingTable().hasIndex(TASK_INDEX) == false
9621	metaData.getMappings().containsKey(TASK_TYPE) == false
9329	pingSchedule.millis() > 0
9330	service.getRequestHandler(HANDSHAKE_ACTION_NAME) != null
9331	node == null
9332	nodeChannels != null
9333	logger.isDebugEnabled()
9334	connectionProfile == null
9335	connectionProfile.getHandshakeTimeout() != null
9335	connectionProfile.getConnectTimeout() != null
9336	connectionProfile.getConnectTimeout() == null
9337	connectionProfile.getHandshakeTimeout() == null
9338	node == null
9339	success == false
9340	nodeChannels.hasChannel(channel)
9340	nodeChannels != null
9341	nodeChannels.hasChannel(channel)
9341	nodeChannels != null
9342	nodeChannels == null
9343	nodeChannels != null
9344	profiles.containsKey(TransportSettings.DEFAULT_PROFILE)
9345	Strings.hasLength(name)
9346	TransportSettings.DEFAULT_PROFILE.equals(name)
9347	profileSettings.get("port") == null
9348	NetworkUtils.SUPPORTS_V6
9349	logger.isDebugEnabled()
9350	success
9351	logger.isDebugEnabled()
9352	TransportSettings.DEFAULT_PROFILE.equals(name)
9353	TransportSettings.DEFAULT_PROFILE.equals(profileName)
9354	publishPort < 0
9355	boundInetAddress.isAnyLocalAddress()
9355	boundInetAddress.equals(publishInetAddress)
9356	publishPort < 0
9357	ports.size() == 1
9358	publishPort < 0
9359	hostPortString.startsWith("[")
9360	matcher.matches()
9361	colonPos >= 0
9361	hostPortString.indexOf(':', colonPos + 1) == -1
9362	colonPos >= 0
9363	portString == null
9363	portString.isEmpty()
9364	lifecycle.started()
9365	isCloseConnectionException(e)
9366	isConnectException(e)
9367	e instanceof BindException
9368	e instanceof CancelledKeyException
9369	e instanceof TcpTransport.HttpOnTransportException
9370	isOpen(channel)
9371	compress
9372	canCompress(request)
9372	options.compress()
9373	compress
9374	options.compress()
9375	message instanceof BytesTransportRequest
9376	buffer.length() < sizeHeaderLength
9377	buffer.get(offset + 1) != 'S'
9377	buffer.get(offset) != 'E'
9378	bufferStartsWith(buffer, offset, "TRACE ")
9378	bufferStartsWith(buffer, offset, "PATCH ")
9378	bufferStartsWith(buffer, offset, "GET ")
9378	bufferStartsWith(buffer, offset, "HEAD ")
9378	bufferStartsWith(buffer, offset, "POST ")
9378	bufferStartsWith(buffer, offset, "OPTIONS ")
9378	bufferStartsWith(buffer, offset, "DELETE ")
9378	bufferStartsWith(buffer, offset, "PUT ")
9379	dataLen == PING_DATA_SIZE
9380	dataLen <= 0
9381	dataLen > NINETY_PER_HEAP_SIZE
9382	buffer.length() < dataLen + sizeHeaderLength
9383	buffer.get(offset + i) != chars[i]
9384	hasMessageBytesToRead
9384	TransportStatus.isCompress(status)
9384	streamIn.available() > 0
9385	version.isCompatible(getCurrentVersion()) == false
9386	TransportStatus.isRequest(status)
9387	TransportStatus.isHandshake(status)
9388	TransportStatus.isError(status)
9388	theHandler == null
9389	handler != null
9390	TransportStatus.isError(status)
9391	nextByte != -1
9392	success
9393	error instanceof RemoteTransportException
9394	TransportStatus.isHandshake(status)
9395	reg == null
9396	reg.canTripCircuitBreaker()
9397	transportChannel == null
9398	nextByte != -1
9399	isOpen(channel) == false
9400	handler.latch.await(timeout.millis(), TimeUnit.MILLISECONDS) == false
9401	exceptionRef.get() != null
9402	getCurrentVersion().isCompatible(version) == false
9403	first.isPresent()
9404	handler != null
9405	lifecycle.started() == false
9301	released.compareAndSet(false, true)
9302	isExceptionResponse == false
3991	context != null
3991	context.indexVersionCreated().before(Version.V_5_0_0_alpha1)
3991	boost() == 1f
1447	payload.length != 0
1447	payload != null
1448	payload.length != 0
1448	payload != null
1449	payload != null
1449	payload.length != 0
4145	token == XContentParser.Token.FIELD_NAME
4146	parseContext.isDeprecatedSetting(currentFieldName)
4147	token == XContentParser.Token.START_OBJECT
4148	token == XContentParser.Token.FIELD_NAME
4149	TERM_FIELD.match(currentFieldName)
4150	VALUE_FIELD.match(currentFieldName)
4151	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4152	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4153	token.isValue()
4154	token == XContentParser.Token.START_ARRAY
4155	queryName != null
4156	mapper != null
4157	query == null
950	accuracy > 1.0f
950	accuracy < 0.0f
951	maxEdits < 1
951	maxEdits > 2
952	maxInspections < 0
953	maxTermFreq < 0.0f
954	maxTermFreq != Math.floor(maxTermFreq)
954	maxTermFreq > 1.0f
955	prefixLength < 0
956	minWordLength < 1
957	minDocFreq < 0.0f
958	minDocFreq != Math.floor(minDocFreq)
958	minDocFreq > 1.0f
959	token == XContentParser.Token.FIELD_NAME
960	token.isValue()
961	SuggestionBuilder.ANALYZER_FIELD.match(currentFieldName)
962	SuggestionBuilder.FIELDNAME_FIELD.match(currentFieldName)
963	SuggestionBuilder.SIZE_FIELD.match(currentFieldName)
964	SuggestionBuilder.SHARDSIZE_FIELD.match(currentFieldName)
965	SUGGESTMODE_FIELD.match(currentFieldName)
966	ACCURACY_FIELD.match(currentFieldName)
967	SORT_FIELD.match(currentFieldName)
968	STRING_DISTANCE_FIELD.match(currentFieldName)
969	MAX_EDITS_FIELD.match(currentFieldName)
970	MAX_INSPECTIONS_FIELD.match(currentFieldName)
971	MAX_TERM_FREQ_FIELD.match(currentFieldName)
972	PREFIX_LENGTH_FIELD.match(currentFieldName)
973	MIN_WORD_LENGTH_FIELD.match(currentFieldName)
974	MIN_DOC_FREQ_FIELD.match(currentFieldName)
975	fieldname == null
976	ordinal >= values().length
976	ordinal < 0
977	ordinal >= values().length
977	ordinal < 0
10375	keySlot < 0
10473	settings.maxNumTerms != null
10474	settings.minTermFreq != null
10475	settings.maxTermFreq != null
10476	settings.minDocFreq != null
10477	settings.maxDocFreq != null
10478	settings.minWordLength != null
10479	settings.maxWordLength != null
10480	selectedFields.contains(fieldName)
10480	selectedFields != null
10481	topLevelTerms == null
10482	isNoise(term.bytes().utf8ToString(), freq)
10483	isAccepted(docFreq)
10484	len < minWordLength
10484	minWordLength > 0
10485	len > maxWordLength
10485	maxWordLength > 0
10486	freq < minTermFreq
10486	minTermFreq > 0
10487	freq > maxTermFreq
10488	docFreq < minDocFreq
10488	minDocFreq > 0
10489	docFreq > maxDocFreq
10490	docFreq == 0
10491	dfs != null
10492	dfs != null
10377	other.doc != null
10378	other.selectedFields != null
10379	other.perFieldAnalyzer != null
10380	generateRandomId
10381	set
10381	flagsEnum.contains(flag)
10382	set
10383	type == null
10384	doc == null
10384	id == null
10385	in.readBoolean()
10386	in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
10387	(flags & (1 << flag.ordinal())) != 0
10388	numSelectedFields > 0
10389	in.readBoolean()
10390	in.readBoolean()
10391	doc != null
10392	out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
10393	selectedFields != null
10394	perFieldAnalyzer != null
10395	filterSettings != null
10396	token == XContentParser.Token.FIELD_NAME
10397	currentFieldName != null
10398	currentFieldName.equals("fields")
10399	token == XContentParser.Token.START_ARRAY
10400	currentFieldName.equals("offsets")
10401	currentFieldName.equals("positions")
10402	currentFieldName.equals("payloads")
10403	currentFieldName.equals("term_statistics")
10403	currentFieldName.equals("termStatistics")
10404	currentFieldName.equals("fieldStatistics")
10404	currentFieldName.equals("field_statistics")
10405	currentFieldName.equals("dfs")
10406	currentFieldName.equals("per_field_analyzer")
10406	currentFieldName.equals("perFieldAnalyzer")
10407	currentFieldName.equals("filter")
10408	"_index".equals(currentFieldName)
10409	"_type".equals(currentFieldName)
10410	"_id".equals(currentFieldName)
10411	termVectorsRequest.doc != null
10412	"doc".equals(currentFieldName)
10413	termVectorsRequest.id != null
10414	"routing".equals(currentFieldName)
10414	"_routing".equals(currentFieldName)
10415	"_parent".equals(currentFieldName)
10415	"parent".equals(currentFieldName)
10416	"version".equals(currentFieldName)
10416	"_version".equals(currentFieldName)
10417	"_version_type".equals(currentFieldName)
10417	"versionType".equals(currentFieldName)
10417	"_versionType".equals(currentFieldName)
10417	"version_type".equals(currentFieldName)
10418	fields.size() > 0
10419	e.getValue() instanceof String
10420	token == XContentParser.Token.FIELD_NAME
10421	currentFieldName != null
10422	currentFieldName.equals("max_num_terms")
10423	currentFieldName.equals("min_term_freq")
10424	currentFieldName.equals("max_term_freq")
10425	currentFieldName.equals("min_doc_freq")
10426	currentFieldName.equals("max_doc_freq")
10427	currentFieldName.equals("min_word_length")
10428	currentFieldName.equals("max_word_length")
10439	hasTermVectors()
10440	in.readBoolean()
10441	isExists()
10441	hasTermVectors()
10442	sourceCopied
10443	isArtificial()
10444	isExists()
10445	docFreq > 0
10446	curTerms.hasOffsets()
10446	curTerms.hasPayloads()
10446	curTerms.hasPositions()
10447	curTerms.hasPositions()
10448	curTerms.hasOffsets()
10449	currentPayloads[i].length() > 0
10449	curTerms.hasPayloads()
10450	curTerms.hasPositions()
10451	curTerms.hasOffsets()
10452	curTerms.hasPayloads()
10453	curPayload != null
10454	curTerms.hasPositions()
10455	curTerms.hasOffsets()
10456	curTerms.hasPayloads()
10457	docCount > 0
10458	docCount == -1
10459	hasScores
10460	termVectorsByField != null
5425	request.selectedFields() != null
5426	request.doc() != null
5427	topLevelFields == null
5428	docIdAndVersion != null
5429	selectedFields == null
5429	request.perFieldAnalyzer() != null
5430	selectedFields != null
5431	termVectorsByField != null
5432	request.filterSettings() != null
5433	fieldType instanceof KeywordFieldMapper.KeywordFieldType == false
5433	fieldType instanceof TextFieldMapper.TextFieldType == false
5434	fieldType.indexOptions() == IndexOptions.NONE
5435	isValidField(fieldType)
5436	request.perFieldAnalyzer().containsKey(field)
5436	fieldType.storeTermVectors()
5436	request.perFieldAnalyzer() == null
5437	validFields.isEmpty()
5438	termVectorsByField == null
5439	perFieldAnalyzer != null
5439	perFieldAnalyzer.containsKey(field)
5440	analyzer == null
5441	perAnalyzerField.containsKey(fieldName)
5442	fields.contains(field)
5443	source != null
5444	values.containsKey(field) == false
5445	v.isEmpty() == false
5446	entry.getValue() instanceof List
5447	isValidField(fieldType)
5448	request.selectedFields().contains(field.name())
5448	request.selectedFields() != null
5449	seenFields.contains(field.name())
5450	docMapper.getMapping() != null
5451	terms != null
5452	parallelFields.fields.containsKey(fieldName)
5453	terms != null
10352	selectedFields != null
10352	selectedFields.contains(field)
10353	topLevelTerms == null
10354	hasScores
10355	flags.contains(Flag.FieldStatistics)
10356	dfs != null
10357	termVectorsFilter.hasScoreTerm(term)
10357	hasScores
10358	flags.contains(Flag.TermStatistics)
10359	dfs != null
10360	foundTerm
10361	useDocsAndPos
10362	hasScores
10363	positions
10364	offsets
10365	payloads
10366	payload != null
10367	startOffset >= 0
10367	endOffset >= 0
10368	pos >= 0
649	this.verbosity.ordinal() >= verbosity.ordinal()
650	answer.isEmpty()
650	answer == null
651	answerYes == false
651	answer.equals("n") == false
2015	"string".equals(type)
2016	"float".equals(type)
2016	"double".equals(type)
2017	"byte".equals(type)
2017	"integer".equals(type)
2017	"long".equals(type)
2017	"short".equals(type)
2018	size <= 0
2019	shardSize <= 0
2020	minDocCount < 0
2021	shardMinDocCount < 0
2022	order == null
2023	orders == null
2024	collectMode == null
2025	executionHint != null
2026	collectMode != null
2027	includeExclude != null
2028	token == XContentParser.Token.FIELD_NAME
2029	token == XContentParser.Token.VALUE_STRING
2030	"asc".equalsIgnoreCase(dir)
2031	"desc".equalsIgnoreCase(dir)
2032	orderKey == null
2033	"_term".equals(key)
2034	"_count".equals(key)
2001	order instanceof Aggregation
2002	order instanceof CompoundOrder
2003	orderElement instanceof Aggregation
1958	collectsFromSingleBucket == false
1959	bucketCountThresholds.getShardSize() == TermsAggregationBuilder.DEFAULT_BUCKET_COUNT_THRESHOLDS.getShardSize()
1959	order == InternalOrder.TERM_ASC
1959	order == InternalOrder.TERM_DESC
1960	valuesSource instanceof ValuesSource.Bytes
1961	executionHint != null
1962	valuesSource instanceof ValuesSource.Bytes.WithOrdinals
1963	execution == null
1963	execution.needsGlobalOrdinals()
1964	execution == null
1965	includeExclude.isPartitionBased()
1965	Aggregator.descendsFromBucketAggregator(parent)
1965	includeExclude != null
1966	factories == AggregatorFactories.EMPTY
1967	maxOrd <= 2048
1967	ratio <= 0.5
1968	cm == null
1969	factories != AggregatorFactories.EMPTY
1970	format != DocValueFormat.RAW
1970	includeExclude.isRegexBased()
1970	includeExclude != null
1971	includeExclude != null
1971	includeExclude.isRegexBased()
1972	valuesSource instanceof ValuesSource.Numeric
1973	cm == null
1974	factories != AggregatorFactories.EMPTY
1975	((ValuesSource.Numeric) valuesSource).isFloatingPoint()
1976	includeExclude != null
1977	includeExclude != null
1978	expectedSize == Integer.MAX_VALUE
1979	maxOrd > expectedSize
1979	maxOrd == -1
1980	factories.countAggregators() > 0
1980	valuesSource.getClass() != ValuesSource.Bytes.FieldData.class
1980	includeExclude != null
1981	mode.parseField.match(value)
6704	id == null
6705	type == null
6706	path == null
6707	token == XContentParser.Token.FIELD_NAME
6708	token.isValue()
6709	index != null
6710	routing != null
6711	this == obj
6712	obj == null
6712	getClass() != obj.getClass()
4249	Strings.isEmpty(fieldName)
4250	termsLookup == null
4250	values == null
4251	termsLookup != null
4251	values != null
4252	Strings.isEmpty(fieldName)
4253	values == null
4254	values instanceof List<?>
4255	list.isEmpty()
4256	allNumbers
4257	allStrings
4258	o instanceof BytesRef
4259	i == 0
4260	this.termsLookup != null
4261	token == XContentParser.Token.FIELD_NAME
4262	parseContext.isDeprecatedSetting(currentFieldName)
4263	token == XContentParser.Token.START_ARRAY
4264	fieldName != null
4265	token == XContentParser.Token.START_OBJECT
4266	fieldName != null
4267	token.isValue()
4268	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4269	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4270	fieldName == null
4271	value == null
4272	termsLookup != null
4273	values == null
4273	values.isEmpty()
4274	fieldType != null
4275	getResponse.isSourceEmpty() == false
4276	this.termsLookup != null
4277	termsLookup.index() == null
4278	queryRewriteContext.getIndexSettings() != null
1116	contains(hashCode)
8640	strings.length == 0
8641	bytes == null
8642	hash == 0
8643	this == obj
8644	obj == null
8644	getClass() != obj.getClass()
3488	fieldType().indexOptions() == IndexOptions.NONE
3488	fieldType().fielddata()
3489	context.externalValueSet()
3490	value == null
3491	context.includeInAll(includeInAll, this)
3492	fieldType().indexOptions() != IndexOptions.NONE
3492	fieldType().stored()
3493	includeInAll != null
3494	includeDefaults
3495	positionIncrementGap != POSITION_INCREMENT_GAP_USE_ANALYZER
3495	includeDefaults
3496	fieldType().fielddata() != ((TextFieldType) defaultFieldType).fielddata()
3496	includeDefaults
3497	fieldType().fielddata()
3498	fieldType().fielddataMinFrequency() != Defaults.FIELDDATA_MIN_FREQUENCY
3498	fieldType().fielddataMaxFrequency() != Defaults.FIELDDATA_MAX_FREQUENCY
3498	fieldType().fielddataMinSegmentSize() != Defaults.FIELDDATA_MIN_SEGMENT_SIZE
3498	includeDefaults
3499	includeDefaults
3499	fieldType().fielddataMinFrequency() != Defaults.FIELDDATA_MIN_FREQUENCY
3500	fieldType().fielddataMaxFrequency() != Defaults.FIELDDATA_MAX_FREQUENCY
3500	includeDefaults
3501	includeDefaults
3501	fieldType().fielddataMinSegmentSize() != Defaults.FIELDDATA_MIN_SEGMENT_SIZE
7137	isBroken()
7138	this.cause == null
7139	isBroken()
7143	headers == null
7144	value == null
7145	command instanceof ContextPreservingAbstractRunnable
7146	command instanceof ContextPreservingRunnable
7147	command instanceof AbstractRunnable
7148	command instanceof ContextPreservingAbstractRunnable
7149	command instanceof ContextPreservingRunnable
9811	threadPoolType == null
9812	"same".equals(name)
9813	holder == null
9814	"same".equals(name)
9815	holder.executor() instanceof ThreadPoolExecutor
9816	rejectedExecutionHandler instanceof XRejectedExecutionHandler
9817	holder == null
9818	Names.SAME.equals(executor)
9819	executor.executor() instanceof ThreadPoolExecutor
9820	executor.executor() instanceof ThreadPoolExecutor
9821	executor.executor() instanceof ThreadPoolExecutor
9822	service != null
9823	awaitTermination(service, timeout, timeUnit)
9824	service.awaitTermination(timeout, timeUnit)
9825	pool != null
9826	awaitTermination(pool, timeout, timeUnit)
9827	pool.awaitTermination(timeout, timeUnit)
11927	shardRouting.unassigned()
11927	shardRouting.primary()
11928	shard.relocatingNodeId() == null
11928	shard.initializing()
11928	shard.primary()
11929	primariesInRecovery >= primariesInitialRecoveries
11930	currentInRecoveries >= concurrentIncomingRecoveries
11931	primaryShard == null
11932	primaryNodeOutRecoveries >= concurrentOutgoingRecoveries
11933	shardRouting.unassigned()
11934	shardRouting.initializing()
11935	unassignedInfo == null
11936	shardRouting.relocating()
8429	sequenceId == 0
7800	duration < 0
7801	nanos == 0
7802	nanos >= C6
7803	nanos >= C5
7804	nanos >= C4
7805	nanos >= C3
7806	nanos >= C2
7807	nanos >= C1
7808	duration < 0
7809	sValue == null
7810	normalized.endsWith("nanos")
7811	normalized.endsWith("micros")
7812	normalized.endsWith("ms")
7813	normalized.endsWith("s")
7814	sValue.endsWith("m")
7815	normalized.endsWith("h")
7816	normalized.endsWith("d")
7817	normalized.matches("-0*1")
7818	normalized.matches("0+")
7819	this == o
7820	getClass() != o.getClass()
7820	o == null
7596	map.put(name, value) != null
11572	params.paramAsBoolean("pretty", true)
3667	context.externalValueSet()
3668	value == null
2620	in.readBoolean()
2621	in.readBoolean()
2622	in.readBoolean()
2623	hasFieldDataFields
2624	hasScriptFields
2625	hasSorts
2626	from < 0
2627	size < 0
2628	name == null
2629	order == null
2630	name.equals(ScoreSortBuilder.NAME)
2631	name == null
2632	name.equals(ScoreSortBuilder.NAME)
2633	sort == null
2634	sorts == null
2635	sorts == null
2636	this.sorts == null
2637	highlightBuilder == null
2638	fetchSourceContext == null
2639	fields == null
2640	storedFieldsContext == null
2641	fieldDataField == null
2642	fieldDataFields == null
2643	fieldDataFields == null
2644	this.fieldDataFields == null
2645	name == null
2646	script == null
2647	name == null
2648	script == null
2649	scriptFields == null
2650	scriptFields == null
2651	this.scriptFields == null
2652	scriptFields != null
2653	sorts == null
2654	fetchSourceContext != null
2655	storedFieldsContext != null
2656	fieldDataFields != null
2657	scriptFields != null
2658	sorts != null
2659	trackScores
2660	highlightBuilder != null
2661	token == XContentParser.Token.FIELD_NAME
2662	token.isValue()
2663	SearchSourceBuilder.FROM_FIELD.match(currentFieldName)
2664	SearchSourceBuilder.SIZE_FIELD.match(currentFieldName)
2665	SearchSourceBuilder.VERSION_FIELD.match(currentFieldName)
2666	SearchSourceBuilder.EXPLAIN_FIELD.match(currentFieldName)
2667	SearchSourceBuilder.TRACK_SCORES_FIELD.match(currentFieldName)
2668	SearchSourceBuilder._SOURCE_FIELD.match(currentFieldName)
2669	SearchSourceBuilder.STORED_FIELDS_FIELD.match(currentFieldName)
2670	SearchSourceBuilder.SORT_FIELD.match(currentFieldName)
2671	token == XContentParser.Token.START_OBJECT
2672	SearchSourceBuilder._SOURCE_FIELD.match(currentFieldName)
2673	SearchSourceBuilder.SCRIPT_FIELDS_FIELD.match(currentFieldName)
2674	token == XContentParser.Token.START_OBJECT
2675	token == XContentParser.Token.FIELD_NAME
2676	token.isValue()
2677	SearchSourceBuilder.SCRIPT_FIELD.match(currentFieldName)
2678	SearchSourceBuilder.IGNORE_FAILURE_FIELD.match(currentFieldName)
2679	token == XContentParser.Token.START_OBJECT
2680	SearchSourceBuilder.SCRIPT_FIELD.match(currentFieldName)
2681	SearchSourceBuilder.HIGHLIGHT_FIELD.match(currentFieldName)
2682	SearchSourceBuilder.SORT_FIELD.match(currentFieldName)
2683	token == XContentParser.Token.START_ARRAY
2684	SearchSourceBuilder.STORED_FIELDS_FIELD.match(currentFieldName)
2685	SearchSourceBuilder.DOCVALUE_FIELDS_FIELD.match(currentFieldName)
2686	token == XContentParser.Token.VALUE_STRING
2687	SearchSourceBuilder.SORT_FIELD.match(currentFieldName)
2688	SearchSourceBuilder._SOURCE_FIELD.match(currentFieldName)
2709	sort != null
2710	topDocsCollector == null
2711	subSearchContext.sort() == null
2712	scoreDoc instanceof FieldDoc
2713	subSearchContext.sort() != null
2689	sort.isPresent()
2690	storedFieldsContext != null
2691	docValueFields != null
2692	fetchSourceContext != null
2693	highlightBuilder != null
11458	ignoreFailure
11459	processor instanceof CompoundProcessor
11460	processor instanceof CompoundProcessor
5281	translogGeneration == null
5281	translogGeneration.translogUUID == null
5282	translogGeneration != null
5283	Files.deleteIfExists(nextTranslogFile)
5283	Files.exists(currentCheckpointFile)
5284	readers.isEmpty()
5285	success == false
5286	Files.exists(committedTranslogFile) == false
5287	Files.exists(commitCheckpoint)
5288	checkpoint.equals(checkpointFromDisk) == false
5289	success == false
5290	tempFileRenamed == false
5291	matcher.matches()
5292	closed.compareAndSet(false, true)
5293	closed.get() == false
5294	location.generation == current.getGeneration()
5295	max.isPresent()
5296	current.getTragicException() != null
5297	format < FORMAT_SEQ_NO
5298	format >= FORMAT_AUTO_GENERATED_IDS
5299	format >= FORMAT_SEQ_NO
5300	this == o
5301	o == null
5301	getClass() != o.getClass()
5302	versionType != index.versionType
5302	source.equals(index.source) == false
5302	seqNo != index.seqNo
5302	type.equals(index.type) == false
5302	autoGeneratedIdTimestamp != index.autoGeneratedIdTimestamp
5302	id.equals(index.id) == false
5302	primaryTerm != index.primaryTerm
5302	version != index.version
5303	routing != null ? !routing.equals(index.routing) : index.routing != null
5303	routing.equals(index.routing)
5304	format >= FORMAT_SEQ_NO
5305	this == o
5306	o == null
5306	getClass() != o.getClass()
5307	this == obj
5308	getClass() != obj.getClass()
5308	obj == null
5309	opSize < 4
5310	in.markSupported()
5311	currentCommittingGeneration != NOT_SET_GENERATION
5312	currentCommittingGeneration == NOT_SET_GENERATION
5313	closed.get()
5314	outstandingViews.isEmpty()
5314	closed.get()
5315	generation != null
5316	generation.translogUUID.equals(translogUUID) == false
5317	closed.get()
5341	b1 == LUCENE_CODEC_HEADER_BYTE
5342	header != CodecUtil.CODEC_MAGIC
5343	len > channel.size()
5344	uuidBytes.bytesEquals(ref) == false
5345	b1 == UNVERSIONED_TRANSLOG_HEADER_BYTE
5346	position >= length
5347	position < firstOperationOffset
5348	closed.compareAndSet(false, true)
5349	isClosed()
5993	e.status() == RestStatus.BAD_REQUEST
5994	update == null
5995	allowMappingUpdates == false
5996	currentUpdate == null
5997	current instanceof IgnoreOnRecoveryEngineException
5998	current.getCause() instanceof ElasticsearchException
5999	hasIgnoreOnRecoveryException
5353	readOperations < totalOperations
5354	position >= length
5355	position < getFirstOperationOffset()
5350	numberOfOperations < 0
5351	translogSizeInBytes < 0
5352	translogStats == null
5326	tragedy == null
5327	tragedy != exception
5328	minSeqNo == SequenceNumbersService.NO_OPS_PERFORMED
5329	maxSeqNo == SequenceNumbersService.NO_OPS_PERFORMED
5330	closed.compareAndSet(false, true)
5331	lastSyncedCheckpoint.offset < offset
5331	syncNeeded()
5332	lastSyncedCheckpoint.offset < offset
5332	syncNeeded()
5333	position + targetBuffer.remaining() > getWrittenOffset()
5334	position + targetBuffer.remaining() > getWrittenOffset()
5335	isClosed()
5336	closed.compareAndSet(false, true)
11563	task == null
11564	validationException != null
11565	task != null
11565	request.getShouldStoreResult()
10254	validationException != null
9406	request instanceof ProxyRequest
8040	address == null
8041	address.getAddress() == null
8042	in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
8043	i != 1
8044	in.getVersion().onOrAfter(Version.V_5_0_3_UNRELEASED)
8045	out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)
8046	out.getVersion().onOrAfter(Version.V_5_0_3_UNRELEASED)
8047	this == o
8048	o == null
8048	getClass() != o.getClass()
10575	request.concreteIndex() != null
10576	request.concreteIndex() == null
10577	shardId != null
10578	request.field() != null
10579	indexService == null
10580	fieldType != null
10581	fieldType.tokenized()
10582	fieldType instanceof KeywordFieldMapper.KeywordFieldType
10583	analyzer == null
10584	field == null
10585	indexService != null
10586	request.analyzer() != null
10586	analyzer == null
10587	indexAnalyzers == null
10588	analyzer == null
10589	analyzer == null
10590	request.tokenizer() != null
10591	analyzer == null
10592	indexAnalyzers == null
10593	analyzer == null
10594	request.explain()
10595	closeAnalyzer
10596	increment > 0
10597	request.attributes() != null
10598	analyzer instanceof CustomAnalyzer
10599	analyzer instanceof NamedAnalyzer
10599	((NamedAnalyzer) analyzer).analyzer() instanceof CustomAnalyzer
10600	customAnalyzer != null
10601	charFilterFactories != null
10602	tokenFilterFactories != null
10603	tokenFiltersTokenListCreator[tokenFilterIndex] == null
10604	charFilterFactories != null
10605	tokenFilterFactories != null
10606	analyzer instanceof NamedAnalyzer
10607	len > 0
10608	request.charFilters().size() > 0
10608	request.charFilters() != null
10609	charFilter.definition != null
10610	charFilterTypeName == null
10611	charFilterFactoryFactory == null
10612	indexSettings == null
10613	charFilterFactoryFactory == null
10614	charFilterFactoryFactory == null
10615	charFilterFactories[i] == null
10616	request.tokenFilters() != null
10616	request.tokenFilters().size() > 0
10617	tokenFilter.definition != null
10618	filterTypeName == null
10619	tokenFilterFactoryFactory == null
10620	indexSettings == null
10621	tokenFilterFactoryFactory == null
10622	tokenFilterFactoryFactory == null
10623	tokenFilterFactories[i] == null
10624	tokenizer.definition != null
10625	tokenizerTypeName == null
10626	tokenizerFactoryFactory == null
10627	indexAnalzyers == null
10628	tokenizerFactoryFactory == null
10629	tokenizerFactoryFactory == null
11584	responses.get(i) instanceof FailedNodeException
11585	TransportActions.isShardNotAvailableException(throwable)
11631	shards.size() == 0
11632	indexMetaData != null
11633	shardResponse == null
11634	shardFailures == null
11144	bulkRequest.hasIndexRequestsWithPipelines()
11145	clusterService.localNode().isIngestNode()
11146	needToCheck()
11147	shouldAutoCreate(index, state)
11148	counter.decrementAndGet() == 0
11149	index.equals(request.index())
11150	concreteIndex == null
11151	unavailableException == null
11152	indexMetaData.getState() == IndexMetaData.State.CLOSE
11153	unavailableException != null
10964	request.getTaskId().isSet()
10965	task != null
10966	request.match(task)
10967	taskManager.getTask(request.getTaskId().getId()) != null
10968	request.match(task)
10969	cancellableTask.shouldCancelChildrenOnCancellation()
10970	canceled
10971	canceled
10972	canceled == false
10772	service != null
10773	request.queryCache()
10774	request.fieldDataCache()
10775	request.fields() == null
10775	request.fields().length == 0
10776	request.requestCache()
10777	request.recycler()
10778	clearedAtLeastOne
10779	request.fields() != null
10779	request.fields().length > 0
11666	list.contains(p)
11667	Node.NODE_NAME_SETTING.exists(providedSettings) == false
11669	logger.isDebugEnabled()
11670	TransportClient.CLIENT_TRANSPORT_SNIFF.get(this.settings)
11671	closed
11672	otherNode.getAddress().equals(transportAddress)
11673	found
11674	filtered.isEmpty()
11675	closed
11676	otherNode.getAddress().equals(transportAddress)
11677	otherNode.getAddress().equals(transportAddress)
11678	closed
11679	closed
11680	index < 0
11681	nodes.isEmpty()
10631	closeIndexEnabled == false
10912	shardRouting.initializing()
10912	shardRouting.relocating()
10913	allocateDecision.isDecisionTaken() == false
10914	request.useAnyUnassignedShard()
10915	ui.hasNext()
10916	foundShard == null
10917	request.isPrimary()
10918	request.getCurrentNode() != null
10919	primaryNode.getId().equals(foundShard.currentNodeId()) == false
10920	request.getCurrentNode() != null
10921	replicaNode.getId().equals(replica.currentNodeId())
10922	foundShard == null
10923	replicaShardRoutings.size() > 0
10924	replica.unassigned()
10925	foundShard.relocating()
10925	replica.started()
10925	foundShard.initializing()
10926	foundShard == null
10862	request.waitForEvents() != null
10863	request.local()
10864	request.waitForStatus() == null
10865	request.waitForNoRelocatingShards() == false
10866	request.waitForActiveShards().equals(ActiveShardCount.NONE)
10867	request.waitForNodes().isEmpty()
10868	request.indices().length == 0
10868	request.indices() == null
10869	request.timeout().millis() == 0
10870	response.getStatus().value() <= request.waitForStatus().value()
10870	request.waitForStatus() != null
10871	request.waitForNoRelocatingShards()
10871	response.getRelocatingShards() == 0
10872	request.waitForActiveShards().equals(ActiveShardCount.NONE) == false
10873	waitForActiveShards.equals(ActiveShardCount.ALL)
10873	response.getUnassignedShards() == 0
10873	response.getInitializingShards() == 0
10874	waitForActiveShards.enoughShardsActive(response.getActiveShards())
10875	request.indices() != null
10875	request.indices().length > 0
10876	request.waitForNodes().isEmpty()
10877	request.waitForNodes().startsWith(">=")
10878	response.getNumberOfNodes() >= expected
10879	request.waitForNodes().startsWith("ge(")
10880	response.getNumberOfNodes() >= expected
10881	request.waitForNodes().startsWith("<=")
10882	response.getNumberOfNodes() <= expected
10883	request.waitForNodes().startsWith("le(")
10884	response.getNumberOfNodes() <= expected
10885	request.waitForNodes().startsWith(">")
10886	response.getNumberOfNodes() > expected
10887	request.waitForNodes().startsWith("gt(")
10888	response.getNumberOfNodes() > expected
10889	request.waitForNodes().startsWith("<")
10890	response.getNumberOfNodes() < expected
10891	request.waitForNodes().startsWith("lt(")
10892	response.getNumberOfNodes() < expected
10893	response.getNumberOfNodes() == expected
10894	logger.isTraceEnabled()
11038	request.nodes()
11039	request.routingTable()
11040	request.indices().length > 0
11041	currentState.routingTable().getIndicesRouting().containsKey(filteredIndex)
11042	request.blocks()
11043	request.metaData()
11044	request.indices().length == 0
11045	request.indices().length > 0
11046	indexMetaData != null
11047	custom.value.context().contains(MetaData.XContentContext.API)
11048	request.customs()
11130	indexShard.routingEntry() != null
11130	indexShard.routingEntry().active()
11131	clusterService.state().nodes().isLocalNodeElectedMaster()
11016	request.persistentSettings().size() == 1
11016	MetaData.SETTING_READ_ONLY_SETTING.exists(request.persistentSettings())
11016	MetaData.SETTING_READ_ONLY_SETTING.exists(request.transientSettings())
11016	request.transientSettings().size() == 1
11016	request.persistentSettings().isEmpty()
11016	request.transientSettings().isEmpty()
10752	cause.length() == 0
11105	clusterBlockException != null
10667	concreteIndices.isEmpty()
11547	request.request().routing() == null
11547	state.getMetaData().routingRequired(request.concreteIndex(), request.request().type())
11548	result.exists()
11549	request.fetchSourceContext() != null
11549	request.storedFields() != null
11549	request.fetchSourceContext().fetchSource()
10260	concreteIndices.length == 0
10261	element instanceof FieldCapabilitiesIndexResponse == false
10262	typeMap == null
10263	builder == null
11487	shardValue == null
11488	shardValue instanceof BroadcastShardOperationFailedException
11489	"cluster".equals(request.level())
11490	"indices".equals(request.level())
11491	indexMergedFieldStats == null
11492	existing != null
11493	existing.getType() != entry.getValue().getType()
11494	conflicts.containsKey(entry.getKey()) == false
11495	entry.getValue().containsKey(conflictKey)
11496	request.getIndexConstraints().length != 0
11497	indexConstraintFieldStats.match(indexConstraint)
11497	indexConstraintFieldStats != null
11498	fieldStatFields.contains(indexConstraint.getField()) == false
11499	stats != null
10335	request.request().routing() == null
10335	state.getMetaData().routingRequired(request.concreteIndex(), request.request().type())
10336	request.refresh()
10336	request.realtime()
10695	concreteIndices.length == 0
10696	element instanceof GetFieldMappingsResponse
10697	request.types().length == 0
10698	typeIntersection.isEmpty()
10699	fieldMapping.isEmpty()
10700	Regex.isMatchAllPattern(field)
10701	Regex.isSimpleMatchPattern(field)
10702	Regex.simpleMatch(field, fieldMapper.fieldType().name())
10703	fieldMapper != null
10704	request.probablySingleFieldRequest()
10705	fieldMappings.containsKey(field)
10658	doneMappings
10659	doneAliases
10660	doneSettings
10661	request.humanReadable()
10520	request.names().length == 0
10521	Regex.isSimpleMatchPattern(name)
10522	Regex.simpleMatch(name, entry.key)
10523	state.metaData().templates().containsKey(name)
10948	request.repositories().length == 1
10948	"_all".equals(request.repositories()[0])
10948	request.repositories().length == 0
10949	repositories != null
10950	repositories != null
10951	Regex.isSimpleMatchPattern(repositoryOrPattern) == false
10952	Regex.simpleMatch(repositoryOrPattern, repository.name())
10953	repositoryMetaData == null
10767	indexMetaData == null
10768	request.humanReadable()
10769	CollectionUtils.isEmpty(request.names())
10770	Regex.simpleMatch(request.names(), entry.getKey())
11079	isCurrentSnapshotsOnly(request.snapshots()) == false
11080	isAllSnapshots(request.snapshots())
11081	GetSnapshotsRequest.CURRENT_SNAPSHOT.equalsIgnoreCase(snapshotOrPattern)
11082	Regex.isSimpleMatchPattern(snapshotOrPattern) == false
11083	allSnapshotIds.containsKey(snapshotOrPattern)
11084	request.ignoreUnavailable() == false
11085	Regex.simpleMatch(snapshotOrPattern, entry.getKey())
11086	toResolve.isEmpty()
11086	isCurrentSnapshotsOnly(request.snapshots()) == false
11086	request.ignoreUnavailable() == false
10956	clusterService.localNode().getId().equals(request.getTaskId().getNodeId())
10957	request.getTimeout() != null
10958	node == null
10959	runningTask == null
10960	request.getWaitForCompletion()
10961	false == response.isExists()
10962	response.isSourceEmpty()
10540	false == actions.isEmpty()
10540	finalActions.isEmpty()
10750	indexShardRoutingTables == null
10751	request.shardStatuses().contains(shardHealth.getStatus())
10783	indexShard.routingEntry() == null
10784	request.docs()
10785	request.store()
10786	request.indexing()
10787	request.get()
10788	request.search()
10789	request.merge()
10790	request.refresh()
10791	request.flush()
10792	request.warmer()
10793	request.queryCache()
10794	request.fieldData()
10795	request.segments()
10796	request.completion()
10797	request.translog()
10798	request.suggest()
10799	request.requestCache()
10800	request.recovery()
9407	size > 0
9408	profileAddresses != null
9409	profileAddresses.size() > 0
9409	profileAddresses != null
9410	profileAddresses != null
9410	profileAddresses.size() > 0
10982	timeout == null
10983	request.getWaitForCompletion()
10284	item.routing() == null
10284	clusterState.getMetaData().routingRequired(concreteSingleIndex, item.type())
10285	shardRequest == null
10286	shardRequests.isEmpty()
10114	maxConcurrentSearches == 0
10115	request == null
10369	clusterState.metaData().hasConcreteIndex(termVectorsRequest.index())
10370	clusterState.getMetaData().routingRequired(concreteSingleIndex, termVectorsRequest.type())
10370	termVectorsRequest.routing() == null
10371	shardRequest == null
10372	shardRequests.size() == 0
11645	response instanceof FailedNodeException
11646	accumulateExceptions
6380	shardStateMetaData != null
6381	metaData == null
6382	metaData == null
6383	indicesService.getShardOrNull(shardId) == null
6384	shardPath == null
6928	indexService != null
6929	indexShard != null
6930	metaData == null
6931	metaData == null
6932	shardPath == null
6933	exists
11128	shardsStatus == null
11129	stage != IndexShardSnapshotStatus.Stage.DONE
11129	stage != IndexShardSnapshotStatus.Stage.FAILURE
11668	action instanceof Action
10499	cause.length() == 0
10681	request.getConcreteIndex() == null
10649	recoveryState == null
10650	shardResponses.containsKey(indexName)
10651	request.activeOnly()
10652	recoveryState.getStage() != RecoveryState.Stage.DONE
11627	request.waitForActiveShards() == ActiveShardCount.DEFAULT
11628	indexShard.routingEntry().primary() == false
11629	actualAllocationId.equals(allocationId) == false
11630	task != null
11053	blockException != null
10675	INDEX_NAME_PATTERN.matcher(resolvedName).matches()
10676	aliasOrIndex == null
10677	aliasOrIndex.isAlias() == false
10678	aliasOrIndex.getIndices().size() != 1
10054	searchRequest.source() == null
10055	source.indexBoosts() == null
10056	remoteClusterService.isCrossClusterSearchEnabled()
10057	remoteClusterIndices.isEmpty()
10058	localIndices.length == 0
10058	remoteShardIterators.size() > 0
10059	shardIterators.size() == 1
10060	searchRequest.isSuggestOnly()
10061	remoteShardIterators.isEmpty()
10062	shardCount > shardCountLimit
10138	in.getPosition() != bytes.length
9305	clusterSettings != null
9306	transport.boundAddress() != null
9306	logger.isInfoEnabled()
9307	holderToNotify != null
9308	boundTransportAddress == null
9309	isLocalNode(node)
9310	isLocalNode(node)
9311	clusterNamePredicate.test(response.clusterName)
9312	response.version.isCompatible(localNode.getVersion()) == false
9313	isLocalNode(node)
9314	isLocalNode(node)
9315	connection == null
9316	options.timeout() == null
9317	lifecycle.stoppedOrClosed()
9318	timeoutHandler != null
9319	holderToNotify != null
9320	reg == null
9321	ThreadPool.Names.SAME.equals(executor)
9322	tracerLogInclude.length > 0
9323	Regex.simpleMatch(tracerLogInclude, action) == false
9324	tracerLogExclude.length > 0
9325	requestHandlers.containsKey(reg.getAction())
11205	indexResult.hasFailure()
11206	deleteResult.hasFailure()
11207	operationResult != null
11207	operationResult.hasFailure() == false
11208	operationResult == null
11209	operationResult.hasFailure() == false
11210	isConflictException(failure)
11211	replicaRequest.getPrimaryResponse() == null
11211	isConflictException(failure) == false
11212	primaryResponse != null
11213	updateOperationResult == null
11214	updateOperationResult.hasFailure() == false
11215	updateRequest.fields() != null
11215	updateRequest.fields().length > 0
11215	updateRequest.fetchSource() != null
11215	updateRequest.fetchSource().fetchSource()
11216	updateOperationResult.getFailure() instanceof VersionConflictEngineException == false
11217	shouldExecuteReplicaItem(item, i)
11218	operationResult.hasFailure()
11219	TransportActions.isShardNotAvailableException(failure)
11220	TransportActions.isShardNotAvailableException(e)
11221	update != null
11222	mappingUpdateNeeded
11223	mappingUpdateNeeded
10337	request.refresh()
10337	request.realtime()
10338	TransportActions.isShardNotAvailableException(e)
10376	TransportActions.isShardNotAvailableException(t)
10493	IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.exists(targetIndexSettings)
10494	docsStats != null
10495	count > IndexWriter.MAX_DOCS
10496	IndexMetaData.INDEX_ROUTING_PARTITION_SIZE_SETTING.exists(targetIndexSettings)
11194	itemResponse.isFailed()
11637	isSubAction()
11109	currentSnapshots.isEmpty()
11110	status.value.nodeId() != null
11111	nodesIds.isEmpty()
11112	currentSnapshotEntries.isEmpty()
11113	nodeSnapshotStatuses != null
11114	status.nodeId() != null
11115	nodeStatus != null
11116	shardStatues != null
11117	shardStatus != null
11118	Strings.hasText(repositoryName)
11118	request.snapshots().length > 0
11118	request.snapshots() != null
11119	currentSnapshotNames.contains(snapshotName)
11120	snapshotId == null
11121	request.ignoreUnavailable()
11122	repositoryData.getIncompatibleSnapshotIds().contains(snapshotId)
11123	snapshotInfo.state().completed()
11601	tasks.isEmpty()
11602	request.getTaskId().isSet()
11603	request.getTaskId().isSet()
11604	task != null
11605	request.match(task)
11606	request.match(task)
11607	response instanceof FailedNodeException
11608	tasksResponse.results != null
11609	tasksResponse.exceptions != null
10373	request.request().doc() != null
10373	request.request().routing() == null
10374	request.request().routing() == null
10374	state.getMetaData().routingRequired(request.concreteIndex(), request.request().type())
10670	concreteIndices.length == 0
10671	state.metaData().hasConcreteIndex(concreteIndex)
10672	mappings.isEmpty()
10673	mappings.containsKey(type)
11344	request.routing() == null
11344	metaData.routingRequired(concreteIndex, request.type())
11345	autoCreateIndex.shouldAutoCreate(request.index(), clusterService.state())
11346	request.getShardId() != null
11347	shard.primary()
11348	indexServiceOrNull != null
11349	shard != null
11350	cause instanceof VersionConflictEngineException
11351	retryCount < request.retryOnConflict()
10764	globalBlock != null
10765	IndexMetaData.INDEX_BLOCKS_METADATA_SETTING.exists(request.settings())
10765	IndexMetaData.INDEX_READ_ONLY_SETTING.exists(request.settings())
10765	request.settings().size() == 1
10717	result.primary()
10718	versionTuple == null
10719	result.upgradeVersion().after(versionTuple.v1())
10720	result.oldestLuceneSegment().onOrAfter(versionTuple.v2()) == false
10721	primaryCount == metaData.index(index).getNumberOfShards()
10722	indicesWithMissingPrimaries.isEmpty()
10723	indexRoutingTable.allPrimaryShardsActive() == false
10714	seg.version.major != Version.CURRENT.luceneVersion.major
10715	seg.version.minor != Version.CURRENT.luceneVersion.minor
10632	request.allShards()
10633	shardResponse == null
10634	shardResponse instanceof BroadcastShardOperationFailedException
10635	shardFailures == null
10636	request.allShards()
10636	request.explain()
10636	request.rewrite()
10637	queryExplanations == null
10638	rewritten
10638	query instanceof MatchNoDocsQuery
6945	TRIBE_NAME_SETTING.exists(settings)
6946	s.equals(TRIBE_NAME_SETTING.getKey())
6946	s.startsWith("tribe.")
6947	nodesSettings.isEmpty()
6948	NodeEnvironment.MAX_LOCAL_STORAGE_NODES_SETTING.exists(settings)
6949	sb.get("cluster.name") == null
6950	nodes.isEmpty()
6951	BLOCKS_WRITE_SETTING.get(settings)
6952	BLOCKS_METADATA_SETTING.get(settings)
6953	tribeKey.startsWith("path.")
6954	Environment.PATH_CONF_SETTING.exists(globalSettings)
6955	Environment.PATH_LOGS_SETTING.exists(globalSettings)
6956	Environment.PATH_SCRIPTS_SETTING.exists(globalSettings)
6957	passthrough.exists(globalSettings)
6957	passthrough.exists(tribeSettings) == false
6958	sb.get(NetworkModule.HTTP_ENABLED.getKey()) == null
6959	nodes.isEmpty() == false
6960	e instanceof RuntimeException
6270	settings.get(UPDATE_OFFSETS_KEY) != null
6051	length <= 0
5276	Files.isDirectory(translogPath) == false
5276	Files.exists(translogPath) == false
5277	Files.exists(idxLocation) == false
5277	Files.isDirectory(idxLocation) == false
5278	translogGeneration == null
5278	translogUUID == null
5279	batchMode == false
5280	text.equalsIgnoreCase("y")
8414	this == o
8415	o == null
8415	getClass() != o.getClass()
8416	v1.equals(tuple.v1)
8416	v1 != null ? !v1.equals(tuple.v1) : tuple.v1 != null
8417	v2.equals(tuple.v2)
8417	v2 != null ? !v2.equals(tuple.v2) : tuple.v2 != null
3541	fieldType().indexOptions() == IndexOptions.NONE
3541	fieldType().stored()
3542	fieldType().hasDocValues()
7665	superclass instanceof Class
7666	toResolve instanceof TypeVariable
7667	toResolve == original
7668	toResolve instanceof GenericArrayType
7669	toResolve instanceof ParameterizedType
7670	resolvedTypeArgument != args[t]
7671	changed
7672	toResolve instanceof WildcardType
7673	originalLowerBound.length == 1
7674	lowerBound != originalLowerBound[0]
7675	originalUpperBound.length == 1
7676	upperBound != originalUpperBound[0]
7677	supertype.isAssignableFrom(rawType)
7678	field.getDeclaringClass().isAssignableFrom(rawType)
7679	methodOrConstructor instanceof Method
7680	method.getDeclaringClass().isAssignableFrom(rawType)
7681	methodOrConstructor instanceof Constructor
7682	constructor.getDeclaringClass().isAssignableFrom(rawType)
7683	methodOrConstructor instanceof Method
7684	method.getDeclaringClass().isAssignableFrom(rawType)
7685	methodOrConstructor instanceof Constructor
7686	constructor.getDeclaringClass().isAssignableFrom(rawType)
7687	method.getDeclaringClass().isAssignableFrom(rawType)
3683	parserContext.indexVersionCreated().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
3684	Booleans.isBoolean(node.toString()) == false
3685	node instanceof Boolean
3686	node instanceof Number
3687	propName.equals("term_vector")
3688	propName.equals("store_term_vectors")
3689	propName.equals("store_term_vector_offsets")
3690	propName.equals("store_term_vector_positions")
3691	propName.equals("store_term_vector_payloads")
3692	propName.equals("analyzer")
3693	analyzer == null
3694	propName.equals("search_analyzer")
3695	analyzer == null
3696	propName.equals("search_quote_analyzer")
3697	analyzer == null
3698	searchAnalyzer != null
3698	indexAnalyzer == null
3699	searchAnalyzer == null
3699	searchQuoteAnalyzer != null
3700	searchAnalyzer == null
3701	searchQuoteAnalyzer == null
3702	indexAnalyzer != null
3703	searchAnalyzer != null
3704	searchQuoteAnalyzer != null
3705	propName.equals("norms")
3706	propNode instanceof Map
3707	propName2.equals("enabled")
3708	propName2.equals("loading")
3709	propName.equals("omit_norms")
3710	parseNorms(builder, name, propName, propNode, parserContext)
3711	propNode == null
3711	false == propName.equals("null_value")
3712	propName.equals("store")
3713	propName.equals("index")
3714	propName.equals(DOC_VALUES)
3715	propName.equals("boost")
3716	parserContext.indexVersionCreated().before(Version.V_5_0_0_alpha1)
3716	parseNorms(builder, name, propName, propNode, parserContext)
3717	propName.equals("index_options")
3718	propName.equals("include_in_all")
3719	parserContext.isWithinMultiField()
3720	parserContext.indexVersionCreated().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
3721	propName.equals("similarity")
3722	propNode instanceof Map
3722	propName.equals("fielddata")
3722	parserContext.indexVersionCreated().before(Version.V_5_0_0_alpha1)
3723	parseMultiField(builder, name, parserContext, propName, propNode)
3724	propName.equals("copy_to")
3725	parserContext.isWithinMultiField()
3726	propName.equals("fields")
3727	((List<?>) propNode).isEmpty()
3727	propNode instanceof List
3728	propNode instanceof Map
3729	multiFieldName.contains(".")
3730	multiFieldEntry.getValue() instanceof Map
3731	typeNode != null
3732	type.equals(ObjectMapper.CONTENT_TYPE)
3732	type.equals(ObjectMapper.NESTED_CONTENT_TYPE)
3733	typeParser == null
3734	INDEX_OPTIONS_OFFSETS.equalsIgnoreCase(value)
3735	INDEX_OPTIONS_POSITIONS.equalsIgnoreCase(value)
3736	INDEX_OPTIONS_FREQS.equalsIgnoreCase(value)
3737	INDEX_OPTIONS_DOCS.equalsIgnoreCase(value)
3738	"no".equals(termVector)
3739	"yes".equals(termVector)
3740	"with_offsets".equals(termVector)
3741	"with_positions".equals(termVector)
3742	"with_positions_offsets".equals(termVector)
3743	"with_positions_payloads".equals(termVector)
3744	"with_positions_offsets_payloads".equals(termVector)
3745	isArray(propNode)
3746	"default".equals(value)
3746	parserContext.indexVersionCreated().before(Version.V_5_0_0_alpha1)
3747	similarityProvider == null
4814	type == null
4815	type == null
4816	token == XContentParser.Token.FIELD_NAME
4817	token.isValue()
4818	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4819	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4820	VALUE_FIELD.match(currentFieldName)
4821	type == null
4822	documentMapper == null
10668	indices == null
10669	types == null
10669	types.length == 0
7039	pattern.matchNormalized(normalized)
7040	uriPattern.isOpaque()
7041	value == null
7042	Regex.isMatchAllPattern(pattern)
7042	pattern == null
8456	_outputStream != null
8457	c > 0xdfff
8457	c < 0xd800
8458	c < 0xdc00
8459	(code & 0xffffff80) == 0
8460	++_index >= _bytes.length
8461	(c & 0xfffff800) == 0
8462	++_index >= _bytes.length
8463	++_index >= _bytes.length
8464	(c & 0xffff0000) == 0
8465	++_index >= _bytes.length
8466	++_index >= _bytes.length
8467	++_index >= _bytes.length
8468	(c & 0xff200000) == 0
8469	++_index >= _bytes.length
8470	++_index >= _bytes.length
8471	++_index >= _bytes.length
8472	++_index >= _bytes.length
8473	(c & 0xf4000000) == 0
8474	++_index >= _bytes.length
8475	++_index >= _bytes.length
8476	++_index >= _bytes.length
8477	++_index >= _bytes.length
8478	++_index >= _bytes.length
8479	(c & 0x80000000) == 0
8480	++_index >= _bytes.length
8481	++_index >= _bytes.length
8482	++_index >= _bytes.length
8483	++_index >= _bytes.length
8484	++_index >= _bytes.length
8485	++_index >= _bytes.length
8486	c < 0x80
8487	++_index >= _bytes.length
8488	c < 0x80
8489	++_index >= _bytes.length
8490	c < 0x80
8491	++_index >= _bytes.length
8492	_outputStream != null
8493	_outputStream == null
3586	this == o
3587	o == null
3587	getClass() != o.getClass()
3588	id != null ? !id.equals(uid.id) : uid.id != null
3588	id.equals(uid.id)
3589	type != null ? !type.equals(uid.type) : uid.type != null
3589	type.equals(uid.type)
3947	fieldType().hasDocValues()
11762	message == null
11763	shard.unassignedInfo().isDelayed()
11764	unassignedInfo.isDelayed()
11765	newComputedLeftDelayNanos < nextDelayNanos
11766	failedAllocations > 0
11767	details != null
11768	failedAllocations > 0
11769	details != null
11770	this == o
11771	o == null
11771	getClass() != o.getClass()
11772	unassignedTimeMillis != that.unassignedTimeMillis
11773	delayed != that.delayed
11774	failedAllocations != that.failedAllocations
11775	reason != that.reason
11776	message != null ? !message.equals(that.message) : that.message != null
11776	message.equals(that.message)
11777	lastAllocationStatus != that.lastAllocationStatus
10283	shardId == null
6603	DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING.exists(settings)
6604	resolveTimeout.nanos() < 0
1266	hitContext.cache().containsKey(CACHE_KEY)
1267	mapperHighlighterEntry == null
1268	field.fieldOptions().numberOfFragments() == 0
1269	field.fieldOptions().requireFieldMatch()
1270	Strings.hasText(fieldSnippet.getText())
1271	field.fieldOptions().scoreOrdered()
1272	fragments.length > 0
1273	maxLen > 0
260	onlyOnSamePosition
261	posIncrement > 0
262	duplicate
2090	agg instanceof UnmappedSampler
2171	aggregation instanceof UnmappedSignificantTerms
1943	agg instanceof UnmappedTerms
11352	getResult.isExists()
11353	request.docAsUpsert()
11353	request.upsertRequest() == null
11354	request.script() != null
11354	request.scriptedUpsert()
11355	"create".equals(scriptOpChoice)
11356	"none".equals(scriptOpChoice)
11357	request.versionType() != VersionType.INTERNAL
11358	request.versionType() != VersionType.INTERNAL
11359	getResult.internalSourceRef() == null
11360	request.script() == null
11360	request.doc() != null
11361	indexRequest.routing() != null
11362	indexRequest.parent() != null
11363	request.detectNoop()
11363	noop
11364	"index".equals(operation)
11364	operation == null
11365	"delete".equals(operation)
11366	"none".equals(operation)
11367	scriptService != null
11368	request.fields().length == 0
11368	request.fields() == null
11368	request.fetchSource().fetchSource() == false
11368	request.fetchSource() == null
11369	request.fields().length > 0
11369	request.fields() != null
11370	field.equals("_source")
11371	value != null
11372	fields == null
11373	getField == null
11374	request.fetchSource() != null
11374	request.fetchSource().fetchSource()
11375	request.fetchSource().includes().length > 0
11375	request.fetchSource().excludes().length > 0
11376	type == null
11377	id == null
11378	versionType != VersionType.INTERNAL
11379	retryOnConflict > 0
11379	version != Versions.MATCH_ANY
11380	versionType.validateVersionForWrites(version)
11381	script == null
11381	doc == null
11382	script != null
11382	doc != null
11383	doc == null
11383	docAsUpsert
11384	routing.length() == 0
11384	routing != null
11385	script == null
11386	scriptParams == null
11387	script == null
11388	doc == null
11389	upsertRequest == null
11390	token == null
11391	token == XContentParser.Token.FIELD_NAME
11392	"script".equals(currentFieldName)
11393	"scripted_upsert".equals(currentFieldName)
11394	"upsert".equals(currentFieldName)
11395	"doc".equals(currentFieldName)
11396	"doc_as_upsert".equals(currentFieldName)
11397	"detect_noop".equals(currentFieldName)
11398	"fields".equals(currentFieldName)
11399	token == XContentParser.Token.START_ARRAY
11400	token.isValue()
11401	fields != null
11402	"_source".equals(currentFieldName)
11403	script != null
11404	in.readBoolean()
11405	in.readBoolean()
11406	in.readBoolean()
11407	hasScript
11408	doc == null
11409	upsertRequest == null
11410	docAsUpsert
11411	doc != null
11412	script != null
11413	upsertRequest != null
11414	scriptedUpsert
11415	detectNoop == false
11416	fields != null
11417	fetchSourceContext != null
11339	in.readBoolean()
11340	getResult == null
11341	getGetResult() != null
11342	GET.equals(currentFieldName)
11343	token == XContentParser.Token.START_OBJECT
10763	settings.isEmpty()
10716	versions.isEmpty()
10709	indicesUpgradeStatus != null
10710	shard.getShardRouting().getIndexName().equals(indexName)
10711	outputIndices
10712	outputShards
10713	shardUpgradeStatus.getShardRouting().relocatingNodeId() != null
11436	validationException == null
10645	query == null
10646	typesSize > 0
10647	in.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)
10648	out.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)
10641	queryExplanations == null
10642	queryExplanations == null
10643	size > 0
2617	valuesSource != null
2618	valuesSource == null
2619	bucket >= counts.size()
2619	valuesSource == null
9510	value instanceof Map
9511	value instanceof List
9512	value instanceof Boolean
9512	value == null
9512	value instanceof Number
9513	value instanceof byte[]
9514	value instanceof String
2846	valuesSourceType == null
2847	in.readBoolean()
2848	in.readBoolean()
2849	in.readBoolean()
2850	serializeTargetValueType()
2851	hasScript
2852	hasValueType
2853	hasTimeZone
2854	field == null
2855	script == null
2856	valueType == null
2857	format == null
2858	missing == null
2859	timeZone == null
2860	field != null
2861	script != null
2862	missing != null
2863	format != null
2864	timeZone != null
2865	valueType != null
2866	Objects.equals(field, other.field)
2867	Objects.equals(format, other.format)
2868	Objects.equals(missing, other.missing)
2869	Objects.equals(script, other.script)
2870	Objects.equals(targetValueType, other.targetValueType)
2871	Objects.equals(timeZone, other.timeZone)
2872	Objects.equals(valueType, other.valueType)
2873	Objects.equals(valuesSourceType, other.valuesSourceType)
2939	vs == null
2903	field == null
2904	script == null
2905	valuesSourceType == ValuesSourceType.ANY
2906	fieldType == null
2907	valueType != null
2908	valueType == null
2909	indexFieldData instanceof IndexNumericFieldData
2910	indexFieldData instanceof IndexGeoPointFieldData
2911	script == null
2912	valueType == null
2913	format != null
2913	valueFormat instanceof DocValueFormat.Decimal
2914	valid()
2915	unmapped()
2916	missing() == null
2917	valueSourceType() == ValuesSourceType.NUMERIC
2918	valueSourceType() == ValuesSourceType.GEOPOINT
2919	valueSourceType() == ValuesSourceType.ANY
2919	valueSourceType() == ValuesSourceType.BYTES
2920	missing() == null
2921	vs instanceof ValuesSource.Bytes
2922	vs instanceof ValuesSource.Bytes.WithOrdinals
2923	vs instanceof ValuesSource.Numeric
2924	vs instanceof ValuesSource.GeoPoint
2925	fieldContext() == null
2926	valueSourceType() == ValuesSourceType.NUMERIC
2927	valueSourceType() == ValuesSourceType.BYTES
2928	valueSourceType() == ValuesSourceType.NUMERIC
2929	valueSourceType() == ValuesSourceType.GEOPOINT
2930	fieldContext().indexFieldData() instanceof IndexNumericFieldData
2931	script() != null
2932	indexFieldData instanceof ParentChildIndexFieldData
2933	indexFieldData instanceof IndexOrdinalsFieldData
2934	script() != null
2935	fieldContext().indexFieldData() instanceof IndexGeoPointFieldData
2936	formattable
2937	scriptable
2938	timezoneAware
9749	node.equals(localNode)
9750	counter.decrementAndGet() == 0
10955	name == null
3087	indexVersion == null
3088	Strings.hasLength(version)
3089	snapshot = version.endsWith("-SNAPSHOT")
3090	parts.length > 4
3090	parts.length < 3
3091	snapshot
3091	rawMajor >= 5
3092	this.onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)
3093	major == 5
3094	isAlpha()
3095	isBeta()
3096	major >= 2
3097	build < 99
3098	major >= 2
3099	this == o
3100	o == null
3100	getClass() != o.getClass()
3101	id != version.id
1204	context.version() == false
1204	context.storedFieldsContext() != null
1204	context.storedFieldsContext().fetchFields() == false
1205	versions != null
7373	ctl == null
7374	other == null
7375	lookupState == null
7376	leaves.isEmpty()
7377	fields != null
7378	terms != null
7379	termsEnum.seekExact(id)
7380	liveDocs.get(d) == false
7380	liveDocs != null
7381	docID != DocIdSetIterator.NO_MORE_DOCS
7382	leaves.isEmpty()
7383	fields != null
7384	terms != null
7385	termsEnum.seekExact(id)
7386	liveDocs != null
7386	liveDocs.get(d) == false
7387	docID != DocIdSetIterator.NO_MORE_DOCS
4079	warmerStats == null
7212	scoreFunction == null
4682	Strings.isEmpty(fieldName)
4683	value == null
4684	rewrite != null
4685	token == XContentParser.Token.FIELD_NAME
4686	parseContext.isDeprecatedSetting(currentFieldName)
4687	token == XContentParser.Token.START_OBJECT
4688	token == XContentParser.Token.FIELD_NAME
4689	WILDCARD_FIELD.match(currentFieldName)
4690	VALUE_FIELD.match(currentFieldName)
4691	AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName)
4692	REWRITE_FIELD.match(currentFieldName)
4693	AbstractQueryBuilder.NAME_FIELD.match(currentFieldName)
4694	fieldType == null
6264	charTypeTableValues == null
6265	settings.getAsBoolean(key, defaultValue)
6203	charTypeTableValues == null
6204	settings.getAsBooleanLenientForPreEs6Indices(indexSettings.getIndexVersionCreated(), key, defaultValue, deprecationLogger)
6205	m.find()
6206	lhs.length() != 1
6207	rhs == null
6208	s.equals("LOWER")
6209	s.equals("UPPER")
6210	s.equals("ALPHA")
6211	s.equals("DIGIT")
6212	s.equals("ALPHANUM")
6213	s.equals("SUBWORD_DELIM")
6214	c == '\\'
6215	readPos >= len
6216	readPos + 3 >= len
771	terms == null
772	termsEnum.seekExact(term)
773	candidate.stringDistance == 1.0d
774	at == 0
774	gramSize == 1
775	gramSize == 2
775	at == 1
11273	delayed == null
11274	delayed.future == null
11275	requestsPerSecond == Float.POSITIVE_INFINITY
11276	logger.isDebugEnabled()
11277	delayedPrepareBulkRequest == null
11278	logger.isDebugEnabled()
4279	source == null
4279	source.length == 0
4280	Strings.isEmpty(source)
4281	source.length() == 0
4281	source == null
4282	token != XContentParser.Token.FIELD_NAME
4283	QUERY_FIELD.match(fieldName)
4284	source == null
4285	queryName() != null
4285	boost() != DEFAULT_BOOST
11573	refreshPolicy != null
11574	policy.getValue().equals(value)
11575	"".equals(value)
11450	metadata.getValue() != null
11451	this == o
11452	getClass() != o.getClass()
11452	o == null
0	(options & ~(EXACT_FIRST | PRESERVE_SEP)) != 0
1	maxSurfaceFormsPerAnalyzedForm > 256
1	maxSurfaceFormsPerAnalyzedForm <= 0
2	maxGraphExpansions < 1
2	maxGraphExpansions != -1
3	t.min == TokenStreamToAutomaton.POS_SEP
4	preserveSep
5	t.min == TokenStreamToAutomaton.HOLE
6	queryPrefix != null
7	visited.contains(t.dest)
8	preserveSep
9	tmpBuildDir == null
10	tempDirPath == null
11	scratch.length() > Short.MAX_VALUE-2
12	hasPayloads
13	surfaceForm.length > (Short.MAX_VALUE-2)
14	hasPayloads
15	surfaceForm.bytes[i] == payloadSep
16	bytes == null
17	hasPayloads
18	previousAnalyzed == null
19	analyzed.get().equals(previousAnalyzed.get())
20	dedup >= maxSurfaceFormsPerAnalyzedForm
21	seenSurfaceForms.contains(surface)
22	hasPayloads
23	fst == null
24	hasPayloads
25	output2.bytes[output2.offset+i] == payloadSep
26	hasPayloads
27	key.length >= output2.length
28	key.bytes[key.offset+i] != output2.bytes[output2.offset+i]
29	onlyMorePopular
30	fst == null
31	key.charAt(i) == holeCharacter
32	key.charAt(i) == sepLabel
33	exactFirst
34	fst.findTargetArc(endByte, path.fstNode, scratchArc, bytesReader) != null
35	fst.findTargetArc(endByte, path.fstNode, scratchArc, bytesReader) != null
36	sameSurfaceForm(utf8Key, output2)
37	results.size() == num
38	results.size() == num
39	fst == null
40	value > Integer.MAX_VALUE
40	value < 0
8174	values == null
8175	values == null
8176	values == null
8177	values == null
8178	values == null
8179	values == null
8180	value == null
8181	values == null
8182	value == null
8183	value == null
8184	value == null
8185	value == null
8186	value == null
8187	value == null
8188	value == null
8189	value.hasString()
8190	value == null
8191	value == null
8192	humanReadable
8193	value == null
8194	value == null
8195	value == null
8196	values == null
8197	value == null
8198	writer != null
8199	value instanceof Path
8200	value instanceof Map
8201	value instanceof Iterable
8202	value instanceof Object[]
8203	value instanceof Calendar
8204	value instanceof ReadableInstant
8205	value instanceof BytesReference
8206	value instanceof ToXContent
8207	value == null
8208	values == null
8209	values == null
8210	values instanceof Path
8211	humanReadable
8212	humanReadable
8213	humanReadable
8214	humanReadable
8215	humanReadable
8216	humanReadable
8217	value == null
8218	value != null
8219	value instanceof Map
8220	value instanceof Iterable
8220	value instanceof Path == false
8221	value instanceof Object[]
8222	ancestors.add(value) == false
8223	type == XContentType.JSON
8224	type == XContentType.SMILE
8225	type == XContentType.YAML
8226	type == XContentType.CBOR
8227	type == XContentType.JSON
8228	type == XContentType.SMILE
8229	type == XContentType.YAML
8230	type == XContentType.CBOR
8231	type == null
8232	length == 0
8233	first == '{'
8234	content.charAt(2) == SmileConstants.HEADER_BYTE_3
8234	length > 2
8234	first == SmileConstants.HEADER_BYTE_1
8234	content.charAt(1) == SmileConstants.HEADER_BYTE_2
8235	length > 2
8235	content.charAt(2) == '-'
8235	content.charAt(1) == '-'
8235	first == '-'
8236	c == '{'
8237	Character.isWhitespace(c) == false
8238	type == null
8239	type == null
8240	si.markSupported() == false
8241	type == null
8242	length == 0
8243	first == '{'
8244	bytes.get(2) == SmileConstants.HEADER_BYTE_3
8244	bytes.get(1) == SmileConstants.HEADER_BYTE_2
8244	length > 2
8244	first == SmileConstants.HEADER_BYTE_1
8245	bytes.get(2) == '-'
8245	first == '-'
8245	bytes.get(1) == '-'
8245	length > 2
8246	first == CBORConstants.BYTE_OBJECT_INDEFINITE
8246	length > 1
8247	CBORConstants.hasMajorType(CBORConstants.MAJOR_TYPE_TAG, first)
8247	length > 2
8248	first == (byte) 0xD9
8248	bytes.get(1) == (byte) 0xD9
8248	bytes.get(2) == (byte) 0xF7
8249	CBORConstants.hasMajorType(CBORConstants.MAJOR_TYPE_OBJECT, first)
8250	first == (byte) 0xEF
8250	bytes.get(2) == (byte) 0xBF
8250	length > 3
8250	bytes.get(1) == (byte) 0xBB
8251	b == '{'
8252	Character.isWhitespace(b) == false
8253	compressor != null
8254	compressedInput.markSupported() == false
8255	compressor != null
8256	compressedInput.markSupported() == false
8257	compressor != null
8258	compressedStreamInput.markSupported() == false
8259	xContentType == XContentType.JSON
8259	reformatJson
8260	prettyPrint
8261	params.paramAsBoolean("pretty", true)
8262	params.paramAsBoolean("human", true)
8263	source.containsKey(changesEntry.getKey())
8264	old instanceof Map
8264	changesEntry.getValue() instanceof Map
8265	modified
8266	checkUpdatesAreUnequal
8267	content.containsKey(defaultEntry.getKey())
8268	content.get(defaultEntry.getKey()) instanceof Map
8268	defaultEntry.getValue() instanceof Map
8269	defaultEntry.getValue() instanceof List
8269	content.get(defaultEntry.getKey()) instanceof List
8270	allListValuesAreMapsOfOne(contentList)
8270	allListValuesAreMapsOfOne(defaultList)
8271	processed.containsKey(entry.getKey())
8272	mergedList.contains(o)
8273	o instanceof Map
8274	((Map) o).size() != 1
8275	token == XContentParser.Token.FIELD_NAME
8276	parser.hasTextCharacters()
8277	compressor != null
8278	compressor != null
8279	toXContent.isFragment()
8280	toXContent.isFragment()
8321	pathElements.length == 0
8322	index == pathElements.length
8323	currentValue == null
8324	currentValue instanceof Map
8325	currentValue instanceof List
8326	value == null
8327	value instanceof Map
8328	value instanceof List
8329	pathElements.length == 0
8330	index == pathElements.length
8331	currentValue == null
8332	currentValue instanceof Map
8333	currentValue instanceof List
8334	listValue != null
8335	includes == null
8335	includes.length == 0
8336	excludes.length == 0
8336	excludes == null
8337	includeState == -1
8338	excludeAutomaton.isAccept(excludeState)
8338	excludeState != -1
8339	includeAutomaton.isAccept(includeState)
8340	excludeAutomaton.step(excludeState, '.') == -1
8340	excludeState == -1
8341	value instanceof Map
8342	subIncludeState == -1
8343	excludeState != -1
8344	filteredValue.isEmpty() == false
8344	includeAutomaton.isAccept(includeState)
8345	value instanceof Iterable
8346	filteredValue.isEmpty() == false
8347	excludeAutomaton.isAccept(excludeState) == false
8347	excludeState == -1
8347	includeAutomaton.isAccept(includeState)
8348	value instanceof Map
8349	excludeState != -1
8350	filteredValue.isEmpty() == false
8351	value instanceof Iterable
8352	filteredValue.isEmpty() == false
8353	isInclude
8354	node == null
8355	node == null
8356	node instanceof Number
8357	node == null
8358	node instanceof Number
8359	node instanceof Number
8360	node == null
8361	node == null
8362	node instanceof Number
8363	node == null
8364	node instanceof Number
8365	node == null
8366	node instanceof Number
8367	node == null
8368	node instanceof Number
8369	node instanceof Map
8370	isArray(node)
8130	currentName.equals(fieldName) == false
8131	actual != expected
8132	token == XContentParser.Token.VALUE_STRING
8133	token == XContentParser.Token.VALUE_NUMBER
8134	token == XContentParser.Token.VALUE_BOOLEAN
8135	token == XContentParser.Token.VALUE_EMBEDDED_OBJECT
8714	token == null
8715	token != XContentParser.Token.START_OBJECT
8716	lastToken != null
8717	objFieldName != null
8718	token == XContentParser.Token.START_OBJECT
8719	token == XContentParser.Token.START_ARRAY
8720	token == XContentParser.Token.FIELD_NAME
8721	token == XContentParser.Token.VALUE_NULL
8722	objFieldName != null
8723	token == XContentParser.Token.START_OBJECT
8724	token == XContentParser.Token.START_ARRAY
8725	token == XContentParser.Token.FIELD_NAME
8726	token == XContentParser.Token.VALUE_NULL
8727	settings.containsKey(key)
8728	currentValue == null
8728	allowNullValues
87	innerIter == null
88	match(doc)
89	doc != NO_MORE_DOCS
90	match(doc)
91	match(doc)
41	maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE
41	maxEdits < 0
42	nonFuzzyPrefix < 0
43	minFuzzyLength < 0
44	unicodeAware
45	string.length < minFuzzyLength
45	string.length <= nonFuzzyPrefix
46	subs.isEmpty()
47	subs.size() == 1
7279	fieldNames == null
7280	vector != null
7281	boost
7282	bestScore == -1
7283	tf < minTermFreq
7283	minTermFreq > 0
7284	minDocFreq > 0
7284	docFreq < minDocFreq
7285	docFreq > maxDocFreq
7286	docFreq == 0
7287	queue.size() < limit
7288	term.score < score
7289	vectors != null
7290	vector == null
7291	stringValue != null
7292	isNoiseWord(term)
7293	isSkipTerm(fieldName, term)
7294	cnt == null
7295	analyzer == null
7296	tokenCount > maxNumTokensParsed
7297	isNoiseWord(word)
7298	isSkipTerm(fieldName, word)
7299	cnt == null
7300	minWordLen > 0
7300	len < minWordLen
7301	maxWordLen > 0
7301	len > maxWordLen
8707	source.indexOf('\t') > -1
6605	sendLeaveRequest
6606	nodes.getMasterNode() == null
6607	nodes.isLocalNodeElectedMaster()
6608	nodes.getLocalNode().equals(possibleMaster)
6609	clusterChangedEvent.state().getNodes().isLocalNodeElectedMaster()
6610	joinThreadControl.joinThreadActive(currentThread)
6611	clusterService.localNode().equals(masterNode)
6612	unwrap instanceof NotMasterException
6613	++joinAttempt == this.joinRetryAttempts
6614	logger.isTraceEnabled()
6615	lifecycleState() != Lifecycle.State.STARTED
6616	localNodeMaster()
6617	node.equals(nodes().getMasterNode())
6618	lifecycleState() != Lifecycle.State.STARTED
6619	localNodeMaster()
6620	lifecycleState() != Lifecycle.State.STARTED
6621	localNodeMaster()
6622	lifecycleState() != Lifecycle.State.STARTED
6623	localNodeMaster()
6624	currentState.version() == newClusterState.version()
6624	newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId())
6624	currentState.supersedes(newClusterState)
6625	newClusterState.version() < currentState.version()
6625	currentState.nodes().getMasterNodeId() != null
6626	currentNodes.getMasterNodeId() == null
6627	currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())
6628	nodeJoinController == null
6629	fullPingResponses == null
6630	logger.isTraceEnabled()
6631	fullPingResponses.size() == 0
6632	pingResponse.master() != null
6632	localNode.equals(pingResponse.master())
6633	pingResponse.node().isMasterNode()
6634	activeMasters.isEmpty()
6635	electMaster.hasEnoughCandidates(masterCandidates)
6636	masterElectionIgnoreNonMasters
6637	logger.isDebugEnabled()
6638	pingResponses.isEmpty()
6639	otherClusterStateVersion > localClusterState.version()
