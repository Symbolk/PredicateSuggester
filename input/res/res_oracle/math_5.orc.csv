id	oracle
556	element != null
557	top == null
558	element != null
559	node.element == element
560	node.element.compareTo(element) > 0
561	node.element.compareTo(reference) < 0
562	node.right == null
563	node.left == null
564	node.element.compareTo(reference) > 0
565	node.left == null
566	node.right == null
1518	rowDimension <= 0
1519	columnDimension <= 0
1520	d == null
1521	d.length == 0
1522	d[0].length == 0
1523	d.length == 0
1524	p < 0
1525	isSquare()
1526	p == 0
1527	p == 1
1528	binaryRepresentation[i] == '1'
1529	destination[0].length < columnsCount
1529	destination.length < rowsCount
1530	destination.length < selectedRows.length
1530	destination[0].length < selectedColumns.length
1531	subMatrix == null
1532	nRows == 0
1533	nCols == 0
1534	subMatrix[r].length != nCols
1535	matrix.getRowDimension() != 1
1535	matrix.getColumnDimension() != nCols
1536	matrix.getRowDimension() != nRows
1536	matrix.getColumnDimension() != 1
1537	vector.getDimension() != nCols
1538	vector.getDimension() != nRows
1539	array.length != nCols
1540	array.length != nRows
1541	nRows != nCols
1542	v.length != nCols
1543	v.getDimension() != nCols
1544	v.length != nRows
1545	v.getDimension() != nRows
1546	i > 0
1547	j > 0
1548	object == this
1549	object instanceof FieldMatrix<?> == false
1550	m.getColumnDimension() != nCols
1550	m.getRowDimension() != nRows
1551	getEntry(row, col).equals(m.getEntry(row, col))
1552	row >= getRowDimension()
1552	row < 0
1553	column >= getColumnDimension()
1553	column < 0
1554	endRow < startRow
1555	endColumn < startColumn
1556	selectedColumns == null
1556	selectedRows == null
1557	selectedRows.length == 0
1557	selectedColumns.length == 0
1558	getRowDimension() != m.getRowDimension()
1558	getColumnDimension() != m.getColumnDimension()
1559	getRowDimension() != m.getRowDimension()
1559	getColumnDimension() != m.getColumnDimension()
1560	getColumnDimension() != m.getRowDimension()
1008	format == null
1009	format == null
1010	index < n
1011	index < n
1087	x1 < x0
1088	p > 1.0
1088	p < 0.0
1089	p == 0.0
1090	lower == Integer.MIN_VALUE
1091	checkedCumulativeProbability(lower) >= p
1092	p == 1.0
1093	chebyshevApplies
1094	tmp > lower
1095	tmp < upper
1096	xm < lower
1096	xm > upper
1097	pm >= p
1098	sampleSize <= 0
1099	Double.isNaN(result)
3481	y0.length != equations.getDimension()
3482	y.length != equations.getDimension()
3483	statesInitialized
3484	state.evaluateStep(interpolator)
3485	isLastStep
3486	needReset
3487	currentEvent.evaluateStep(interpolator)
3488	dt <= threshold
3106	objectiveValue.length != target.length
3107	data instanceof Weight
3108	m instanceof DiagonalMatrix
1947	dsValue.length != nR
1948	rows <= cols
1949	objectiveValue.length != target.length
1950	m instanceof DiagonalMatrix
1874	++iterations > maxIterations
2594	data == null
2595	data.length != nobs * (nvars + 1)
2596	nobs <= nvars
2597	noIntercept
2598	y == null
2599	y.length == 0
2600	x == null
2601	x.length == 0
2602	noIntercept
2603	x[i].length != nVars
2604	y == null
2604	x == null
2605	x.length != y.length
2606	x.length == 0
2607	x[0].length + 1 > x.length
2608	x.length != covariance.length
2609	covariance.length > 0
2609	covariance.length != covariance[0].length
1240	sampleSize <= 0
3535	supportedName.equals(name)
3536	isSupported(name)
3134	i > 0
3135	bytesOut == bytes.length
3136	n <= 0
3137	Double.isNaN(cachedNormalDeviate)
3138	s != 0
1269	x0 > x1
1270	p > 1.0
1270	p < 0.0
1271	p == 0.0
1272	p == 1.0
1273	lowerBound == Double.NEGATIVE_INFINITY
1274	chebyshevApplies
1275	upperBound == Double.POSITIVE_INFINITY
1276	chebyshevApplies
1277	isSupportConnected()
1278	x - dx >= getSupportLowerBound()
1279	cumulativeProbability(x - dx) == px
1280	cumulativeProbability(midPoint) < px
1281	sampleSize <= 0
1400	rowDimension < 1
1401	columnDimension < 1
1402	p < 0
1403	isSquare()
1404	p == 0
1405	p == 1
1406	binaryRepresentation[i] == '1'
1407	maxI == -1
1408	destination.length < rowsCount
1408	destination[0].length < columnsCount
1409	destination[i].length < columnsCount
1410	destination[0].length < nCols
1410	destination.length < selectedRows.length
1411	destinationI.length < nCols
1412	nRows == 0
1413	nCols == 0
1414	subMatrix[r].length != nCols
1415	matrix.getColumnDimension() != nCols
1415	matrix.getRowDimension() != 1
1416	matrix.getRowDimension() != nRows
1416	matrix.getColumnDimension() != 1
1417	vector.getDimension() != nCols
1418	vector.getDimension() != nRows
1419	array.length != nCols
1420	array.length != nRows
1421	nRows != nCols
1422	v.length != nCols
1423	v.getDimension() != nCols
1424	v.length != nRows
1425	v.getDimension() != nRows
1426	object == this
1427	object instanceof RealMatrix == false
1428	m.getRowDimension() != nRows
1428	m.getColumnDimension() != nCols
1429	getEntry(row, col) != m.getEntry(row, col)
594	boundary.size() == 0
595	hyperplanes == null
595	hyperplanes.length == 0
596	node.insertCut(hyperplane)
597	node.insertCut(inserted.copySelf())
598	iterator.hasNext()
599	node.getCut() == null
600	cell.getCut() == null
601	tree.getCut() != null
601	tree.getAttribute() == null
601	includeBoundaryAttributes
602	barycenter == null
603	barycenter == null
604	node.getCut() == null
605	(Boolean) node.getAttribute()
606	node.getCut().side(sub.getHyperplane()) == Side.PLUS
607	isEmpty(node.getMinus())
608	isEmpty(node.getMinus())
609	sides.minusFound()
609	sides.plusFound()
610	node.getCut().side(sub.getHyperplane()) == Side.PLUS
611	isEmpty(node.getPlus())
612	isEmpty(node.getPlus())
613	sides.minusFound()
613	sides.plusFound()
614	sides.minusFound()
614	sides.plusFound()
615	node.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())
616	(Boolean) node.getPlus().getAttribute()
616	node.getPlus().getCut() != null
617	node.getMinus().getCut() != null
617	(Boolean) node.getMinus().getAttribute()
618	node.getPlus().getCut() != null
618	(Boolean) node.getPlus().getAttribute()
619	(Boolean) node.getMinus().getAttribute()
619	node.getMinus().getCut() != null
620	node.getCut() == null
621	plus == null
622	minus == null
623	node.getCut() == null
624	attribute != null
2802	steps == null
2803	steps.length == 0
2804	steps[j] == 0
2805	referenceSimplex.length <= 0
2806	refI.length != dimension
2807	refI[k] != refJ[k]
2808	allEquals
2809	i > 0
2810	dimension != startPoint.length
2811	Double.isNaN(vertex.getValue())
2812	comparator.compare(simplex[i], pointValuePair) > 0
2813	index < 0
2813	index >= simplex.length
2814	index >= simplex.length
2814	index < 0
2815	points.length != simplex.length
1962	steps == null
1963	steps.length == 0
1964	steps[j] == 0
1965	referenceSimplex.length <= 0
1966	refI.length != dimension
1967	refI[k] != refJ[k]
1968	allEquals
1969	i > 0
1970	dimension != startPoint.length
1971	Double.isNaN(vertex.getValue())
1972	comparator.compare(simplex[i], pointValuePair) > 0
1973	index < 0
1973	index >= simplex.length
1974	index < 0
1974	index >= simplex.length
1975	points.length != simplex.length
3345	interpolator.currentState == null
3346	dimension < 0
3347	secondaryMappers == null
3348	dirtyState
3349	finalized
3350	currentState == null
3351	currentState != null
3352	dimension < 0
2243	values == null
2244	test(values, begin, length)
2245	values == null
2246	test(values, begin, length)
2247	object == this
2248	object instanceof AbstractStorelessUnivariateStatistic == false
650	node.getCut() == null
651	attribute != null
2366	values == null
2367	begin < 0
2368	length < 0
2369	begin + length > values.length
2370	values == null
2371	begin < 0
2372	length < 0
2373	begin + length > values.length
2374	length == 0
2374	allowEmpty
2375	values == null
2375	weights == null
2376	weights.length != values.length
2377	Double.isNaN(weights[i])
2378	Double.isInfinite(weights[i])
2379	weights[i] < 0
2380	containsPositiveWeight
2380	weights[i] > 0.0
2381	containsPositiveWeight
3119	seed == null
3120	seed.length < v.length
3429	error >= 1.0
3430	isLastStep
3431	resetOccurred
3432	filteredNextIsLast
3425	error >= 1.0
3426	isLastStep
3427	resetOccurred
3428	filteredNextIsLast
3479	t == null
3464	initialStepSize < minStep
3464	initialStepSize > maxStep
3465	vecAbsoluteTolerance.length != mainSetDimension
3465	vecAbsoluteTolerance != null
3466	vecRelativeTolerance != null
3466	vecRelativeTolerance.length != mainSetDimension
3467	initialStep > 0
3468	forward
3469	h < getMinStep()
3470	h > getMaxStep()
3471	forward
3472	FastMath.abs(h) < minStep
3473	acceptSmall
3474	filteredH > maxStep
3475	filteredH < -maxStep
2384	statistics == null
2385	iterator.hasNext()
2386	Double.isNaN(min)
2386	current.getMin() < min
2387	Double.isNaN(max)
2387	current.getMax() > max
2388	n == 0
2389	n == 1
3311	array != null
3312	o instanceof Object[]
11	s > Integer.MAX_VALUE
11	s < Integer.MIN_VALUE
12	k == 0
12	n == k
13	k == n - 1
13	k == 1
14	k > n / 2
15	n <= 61
16	n <= 66
17	k == 0
17	n == k
18	k == n - 1
18	k == 1
19	k > n/2
20	n < 67
21	k == 0
21	n == k
22	k == n - 1
22	k == 1
23	n < 67
24	n < 1030
25	k > n / 2
26	n < 0
27	n > 20
28	n < 0
29	n < 21
30	n < 0
31	n < 21
32	b == 0
32	a == 0
33	a == Integer.MIN_VALUE
33	b == Integer.MIN_VALUE
34	a < 0
35	Integer.MIN_VALUE == a
36	b < 0
37	Integer.MIN_VALUE == b
38	useLong
39	al == bl
40	al == 0
41	bl > Integer.MAX_VALUE
42	a == 0
43	b == 0
44	v == 0
44	u == 0
45	v == Long.MIN_VALUE
45	u == Long.MIN_VALUE
46	u > 0
47	v > 0
48	k == 63
49	t > 0
50	a == 0
50	b == 0
51	lcm == Integer.MIN_VALUE
52	b == 0
52	a == 0
53	lcm == Long.MIN_VALUE
54	m < Integer.MIN_VALUE
54	m > Integer.MAX_VALUE
55	a > b
56	a < 0
57	b < 0
58	a >= Long.MAX_VALUE / b
59	b > 0
60	Long.MIN_VALUE / b <= a
61	a > 0
62	a <= Long.MAX_VALUE / b
63	s > Integer.MAX_VALUE
63	s < Integer.MIN_VALUE
64	b == Long.MIN_VALUE
65	a < 0
66	e < 0
67	(e & 0x1) != 0
68	e < 0
69	(e & 0x1) != 0
70	e < 0
71	(e & 0x1) != 0
72	e < 0
73	(e & 0x1) != 0
74	e < 0
75	e < 0
76	(e & 0x1) != 0
77	e.compareTo(BigInteger.ZERO) < 0
78	e.testBit(0)
79	k < 0
80	k > n
81	stirlingS2 == null
82	n < stirlingS2.length
83	k == 0
84	k == n
84	k == 1
85	k == 2
86	k == n - 1
87	sum < 0
88	a > b
89	a < 0
90	b < 0
91	Long.MIN_VALUE - b <= a
92	a <= Long.MAX_VALUE - b
93	n < k
94	n < 0
1501	copyArray
1502	nRows == 0
1503	nCols == 0
1504	d[r].length != nCols
1505	data == null
1506	row > 0
1507	column > 0
1508	nRows == 0
1509	nCols == 0
1510	subMatrix[i].length != nCols
1511	v.length != nCols
1512	v.length != nRows
1680	copyArray
1681	d == null
1682	nRows == 0
1683	nCols == 0
1684	d[r].length != nCols
1685	data == null
1686	row > 0
1687	column > 0
1688	nRows == 0
1689	nCols == 0
1690	subMatrix[i].length != nCols
1691	v.length != nCols
1692	v.length != nRows
1783	d.length == 0
1784	d.length < pos + size
1785	d.length < pos + size
1786	v1.length + v2.length == 0
1787	v1.length + v2.length == 0
1788	n < 0
1789	data.length != n
1790	this == other
1791	other == null
1792	data.length != rhs.getDimension()
1793	data[i].equals(rhs.getEntry(i))
1794	index >= getDimension()
1794	index < 0
1356	d == null
1357	d == null
1358	d.length < pos + size
1359	d == null
1360	d.length < pos + size
1361	v == null
1362	v instanceof ArrayRealVector
1363	v instanceof ArrayRealVector
1364	v instanceof ArrayRealVector
1365	v instanceof ArrayRealVector
1366	v instanceof ArrayRealVector
1367	v instanceof ArrayRealVector
1368	v instanceof ArrayRealVector
1369	v instanceof ArrayRealVector
1370	v instanceof ArrayRealVector
1371	n < 0
1372	v instanceof ArrayRealVector
1373	data.length != n
1374	Double.isNaN(v)
1375	isNaN()
1376	Double.isInfinite(v)
1377	this == other
1378	other instanceof RealVector
1379	data.length != rhs.getDimension()
1380	rhs.isNaN()
1381	data[i] != rhs.getEntry(i)
1382	isNaN()
1383	y instanceof ArrayRealVector
2858	lowerDifference.getEntry(j) >= -initialTrustRegionRadius
2859	lowerDifference.getEntry(j) >= ZERO
2860	upperDifference.getEntry(j) <= initialTrustRegionRadius
2861	upperDifference.getEntry(j) <= ZERO
2862	trustRegionCenterInterpolationPointIndex != kbase
2863	i < j
2864	getEvaluations() > npt
2865	dnorm < HALF * rho
2866	getEvaluations() <= nfsav + 2
2867	crvmin > ZERO
2867	errbig > frhosq * crvmin
2868	newPoint.getEntry(j) == lowerDifference.getEntry(j)
2869	newPoint.getEntry(j) == upperDifference.getEntry(j)
2870	bdtest < bdtol
2871	bdtest < bdtol
2872	dsq <= xoptsq * ONE_OVER_A_THOUSAND
2873	ntrits == 0
2874	ntrits == 0
2875	cauchy > ZERO
2875	denom < cauchy
2876	k == trustRegionCenterInterpolationPointIndex
2877	temp * den > scaden
2878	newPoint.getEntry(i) == lowerDifference.getEntry(i)
2879	newPoint.getEntry(i) == upperDifference.getEntry(i)
2880	isMinimize
2881	ntrits == -1
2882	i == j
2883	dnorm > rho
2884	ntrits > 0
2885	vquad >= ZERO
2886	ratio <= ONE_OVER_TEN
2887	ratio <= .7
2888	delta <= rho * 1.5
2889	f < fopt
2890	temp * den > scaden
2891	scaden <= HALF * biglsq
2892	f < fopt
2893	i < j
2894	ntrits > 0
2895	trustRegionCenterOffset.getEntry(i) == lowerDifference.getEntry(i)
2896	trustRegionCenterOffset.getEntry(i) == upperDifference.getEntry(i)
2897	gqsq < TEN * gisq
2898	itest >= 3
2899	i < n
2900	i < npt
2901	i < nh
2902	ntrits == 0
2903	f <= fopt + ONE_OVER_TEN * vquad
2904	sum > distsq
2905	knew >= 0
2906	ntrits == -1
2907	delta <= rho * 1.5
2908	ntrits == -1
2909	ratio > ZERO
2910	Math.max(delta, dnorm) > rho
2911	rho > stoppingTrustRegionRadius
2912	ratio <= SIXTEEN
2913	ratio <= TWO_HUNDRED_FIFTY
2914	ntrits == -1
2915	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= fsave
2916	trustRegionCenterOffset.getEntry(i) == lowerDifference.getEntry(i)
2917	trustRegionCenterOffset.getEntry(i) == upperDifference.getEntry(i)
2918	k == trustRegionCenterInterpolationPointIndex
2919	tmp > ZERO
2920	slbd * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2921	subd * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2922	tmp < ZERO
2923	slbd * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2924	subd * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2925	k == knew
2926	Math.abs(d1) > Math.abs(vlag)
2927	d3 * d4 < ZERO
2928	Math.abs(d5) > Math.abs(vlag)
2929	Math.abs(tmp) > Math.abs(vlag)
2930	subd > HALF
2931	Math.abs(vlag) < ONE_OVER_FOUR
2932	predsq > presav
2933	ibdsav < 0
2934	ibdsav > 0
2935	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), glagValue) < ZERO
2935	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), glagValue) > ZERO
2936	ggfree == ZERO
2937	tmp1 > ZERO
2938	work1.getEntry(i) == bigstp
2939	tmp2 <= lowerDifference.getEntry(i)
2940	tmp2 >= upperDifference.getEntry(i)
2941	work1.getEntry(i) == bigstp
2942	work1.getEntry(i) == ZERO
2943	glagValue > ZERO
2944	iflag == 1
2945	curv < -gw * (ONE + Math.sqrt(TWO))
2945	curv > -gw
2946	iflag == 0
2947	csave > cauchy
2948	nfm <= 2 * n
2949	nfm >= 1
2949	nfm <= n
2950	upperDifference.getEntry(nfmm) == ZERO
2951	nfm > n
2952	lowerDifference.getEntry(nfxm) == ZERO
2953	upperDifference.getEntry(nfxm) == ZERO
2954	ipt > n
2955	interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)
2956	interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)
2957	numEval == 1
2958	f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
2959	numEval <= 2 * n + 1
2960	numEval >= 2
2960	numEval <= n + 1
2961	npt < numEval + n
2962	numEval >= n + 2
2963	stepa * stepb < ZERO
2964	f < fAtInterpolationPoints.getEntry(nfm - n)
2965	trustRegionCenterInterpolationPointIndex == nfm
2966	trustRegionCenterOffset.getEntry(i) <= lowerDifference.getEntry(i)
2967	gradientAtTrustRegionCenter.getEntry(i) >= ZERO
2968	trustRegionCenterOffset.getEntry(i) >= upperDifference.getEntry(i)
2969	gradientAtTrustRegionCenter.getEntry(i) <= ZERO
2970	xbdi.getEntry(i) != ZERO
2971	xbdi.getEntry(i) != ZERO
2972	beta == ZERO
2973	stepsq == ZERO
2974	beta == ZERO
2975	gredsq * delsq <= qred * 1e-4 * qred
2976	xbdi.getEntry(i) == ZERO
2977	resid <= ZERO
2978	ds < ZERO
2979	shs > ZERO
2980	s.getEntry(i) != ZERO
2981	s.getEntry(i) > ZERO
2982	temp < stplen
2983	stplen > ZERO
2984	iact == -1
2984	temp > ZERO
2985	crvmin == MINUS_ONE
2986	xbdi.getEntry(i) == ZERO
2987	iact >= 0
2988	s.getEntry(iact) < ZERO
2989	delsq <= ZERO
2990	stplen < blen
2991	iterc == itermax
2992	sdec <= qred * .01
2993	nact >= n - 1
2994	xbdi.getEntry(i) == ZERO
2995	temp <= qred * 1e-4 * qred
2996	xbdi.getEntry(i) == ZERO
2997	xbdi.getEntry(i) == ZERO
2998	tempa <= ZERO
2999	tempb <= ZERO
3000	temp > ZERO
3001	angbd * temp > tempa
3002	temp > ZERO
3003	angbd * temp > tempb
3004	xbdi.getEntry(i) == ZERO
3005	rednew > redmax
3006	i == isav + 1
3007	isav < 0
3008	isav < iu
3009	sdec <= ZERO
3010	xbdi.getEntry(i) == ZERO
3011	iact >= 0
3011	isav == iu
3012	sdec > qred * .01
3013	xbdi.getEntry(i) == MINUS_ONE
3014	xbdi.getEntry(i) == ONE
3015	i < j
3016	modelSecondDerivativesParameters.getEntry(k) != ZERO
3017	crvmin != ZERO
3018	iterc > itcsav
3019	Math.abs(d1) > ztest
3020	i >= npt
3021	dimension < MINIMUM_PROBLEM_DIMENSION
3022	numberOfInterpolationPoints < nPointsInterval[0]
3022	numberOfInterpolationPoints > nPointsInterval[1]
3023	minDiff < requiredMinDiff
2028	lowerDifference.getEntry(j) >= -initialTrustRegionRadius
2029	lowerDifference.getEntry(j) >= ZERO
2030	upperDifference.getEntry(j) <= initialTrustRegionRadius
2031	upperDifference.getEntry(j) <= ZERO
2032	trustRegionCenterInterpolationPointIndex != kbase
2033	i < j
2034	getEvaluations() > npt
2035	dnorm < HALF * rho
2036	getEvaluations() <= nfsav + 2
2037	errbig > frhosq * crvmin
2037	crvmin > ZERO
2038	newPoint.getEntry(j) == lowerDifference.getEntry(j)
2039	newPoint.getEntry(j) == upperDifference.getEntry(j)
2040	bdtest < bdtol
2041	bdtest < bdtol
2042	dsq <= xoptsq * ONE_OVER_A_THOUSAND
2043	ntrits == 0
2044	ntrits == 0
2045	denom < cauchy
2045	cauchy > ZERO
2046	k == trustRegionCenterInterpolationPointIndex
2047	temp * den > scaden
2048	newPoint.getEntry(i) == lowerDifference.getEntry(i)
2049	newPoint.getEntry(i) == upperDifference.getEntry(i)
2050	isMinimize
2051	ntrits == -1
2052	i == j
2053	dnorm > rho
2054	ntrits > 0
2055	vquad >= ZERO
2056	ratio <= ONE_OVER_TEN
2057	ratio <= .7
2058	delta <= rho * 1.5
2059	f < fopt
2060	temp * den > scaden
2061	scaden <= HALF * biglsq
2062	f < fopt
2063	i < j
2064	ntrits > 0
2065	trustRegionCenterOffset.getEntry(i) == lowerDifference.getEntry(i)
2066	trustRegionCenterOffset.getEntry(i) == upperDifference.getEntry(i)
2067	gqsq < TEN * gisq
2068	itest >= 3
2069	i < n
2070	i < npt
2071	i < nh
2072	ntrits == 0
2073	f <= fopt + ONE_OVER_TEN * vquad
2074	sum > distsq
2075	knew >= 0
2076	ntrits == -1
2077	delta <= rho * 1.5
2078	ntrits == -1
2079	ratio > ZERO
2080	Math.max(delta, dnorm) > rho
2081	rho > stoppingTrustRegionRadius
2082	ratio <= SIXTEEN
2083	ratio <= TWO_HUNDRED_FIFTY
2084	ntrits == -1
2085	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= fsave
2086	trustRegionCenterOffset.getEntry(i) == lowerDifference.getEntry(i)
2087	trustRegionCenterOffset.getEntry(i) == upperDifference.getEntry(i)
2088	k == trustRegionCenterInterpolationPointIndex
2089	tmp > ZERO
2090	slbd * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2091	subd * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2092	tmp < ZERO
2093	slbd * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2094	subd * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2095	k == knew
2096	Math.abs(d1) > Math.abs(vlag)
2097	d3 * d4 < ZERO
2098	Math.abs(d5) > Math.abs(vlag)
2099	Math.abs(tmp) > Math.abs(vlag)
2100	subd > HALF
2101	Math.abs(vlag) < ONE_OVER_FOUR
2102	predsq > presav
2103	ibdsav < 0
2104	ibdsav > 0
2105	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), glagValue) < ZERO
2105	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), glagValue) > ZERO
2106	ggfree == ZERO
2107	tmp1 > ZERO
2108	work1.getEntry(i) == bigstp
2109	tmp2 <= lowerDifference.getEntry(i)
2110	tmp2 >= upperDifference.getEntry(i)
2111	work1.getEntry(i) == bigstp
2112	work1.getEntry(i) == ZERO
2113	glagValue > ZERO
2114	iflag == 1
2115	curv > -gw
2115	curv < -gw * (ONE + Math.sqrt(TWO))
2116	iflag == 0
2117	csave > cauchy
2118	nfm <= 2 * n
2119	nfm <= n
2119	nfm >= 1
2120	upperDifference.getEntry(nfmm) == ZERO
2121	nfm > n
2122	lowerDifference.getEntry(nfxm) == ZERO
2123	upperDifference.getEntry(nfxm) == ZERO
2124	ipt > n
2125	interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)
2126	interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)
2127	numEval == 1
2128	f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
2129	numEval <= 2 * n + 1
2130	numEval <= n + 1
2130	numEval >= 2
2131	npt < numEval + n
2132	numEval >= n + 2
2133	stepa * stepb < ZERO
2134	f < fAtInterpolationPoints.getEntry(nfm - n)
2135	trustRegionCenterInterpolationPointIndex == nfm
2136	trustRegionCenterOffset.getEntry(i) <= lowerDifference.getEntry(i)
2137	gradientAtTrustRegionCenter.getEntry(i) >= ZERO
2138	trustRegionCenterOffset.getEntry(i) >= upperDifference.getEntry(i)
2139	gradientAtTrustRegionCenter.getEntry(i) <= ZERO
2140	xbdi.getEntry(i) != ZERO
2141	xbdi.getEntry(i) != ZERO
2142	beta == ZERO
2143	stepsq == ZERO
2144	beta == ZERO
2145	gredsq * delsq <= qred * 1e-4 * qred
2146	xbdi.getEntry(i) == ZERO
2147	resid <= ZERO
2148	ds < ZERO
2149	shs > ZERO
2150	s.getEntry(i) != ZERO
2151	s.getEntry(i) > ZERO
2152	temp < stplen
2153	stplen > ZERO
2154	temp > ZERO
2154	iact == -1
2155	crvmin == MINUS_ONE
2156	xbdi.getEntry(i) == ZERO
2157	iact >= 0
2158	s.getEntry(iact) < ZERO
2159	delsq <= ZERO
2160	stplen < blen
2161	iterc == itermax
2162	sdec <= qred * .01
2163	nact >= n - 1
2164	xbdi.getEntry(i) == ZERO
2165	temp <= qred * 1e-4 * qred
2166	xbdi.getEntry(i) == ZERO
2167	xbdi.getEntry(i) == ZERO
2168	tempa <= ZERO
2169	tempb <= ZERO
2170	temp > ZERO
2171	angbd * temp > tempa
2172	temp > ZERO
2173	angbd * temp > tempb
2174	xbdi.getEntry(i) == ZERO
2175	rednew > redmax
2176	i == isav + 1
2177	isav < 0
2178	isav < iu
2179	sdec <= ZERO
2180	xbdi.getEntry(i) == ZERO
2181	isav == iu
2181	iact >= 0
2182	sdec > qred * .01
2183	xbdi.getEntry(i) == MINUS_ONE
2184	xbdi.getEntry(i) == ONE
2185	i < j
2186	modelSecondDerivativesParameters.getEntry(k) != ZERO
2187	crvmin != ZERO
2188	iterc > itcsav
2189	Math.abs(d1) > ztest
2190	i >= npt
2191	dimension < MINIMUM_PROBLEM_DIMENSION
2192	numberOfInterpolationPoints < nPointsInterval[0]
2192	numberOfInterpolationPoints > nPointsInterval[1]
2193	minDiff < requiredMinDiff
627	cut != null
628	chopped.isEmpty()
628	chopped == null
629	cut == null
630	cut == null
631	tree == tree.parent.plus
632	cut == null
633	FastMath.abs(offset) < 1.0e-10
634	offset <= 0
635	minus.attribute == null
635	plus.attribute == null
635	plus.attribute != null
635	plus.attribute.equals(minus.attribute)
635	cut != null
635	minus.cut == null
635	plus.cut == null
636	cut == null
637	tree.cut == null
638	parentTree != null
639	isPlusChild
640	merged.cut != null
641	cut == null
642	cut.side(sHyperplane) == Side.PLUS
643	cut.side(sHyperplane) == Side.PLUS
644	parentTree != null
645	isPlusChild
646	cut != null
647	tree == tree.parent.plus
648	cut != null
649	cut != null
2209	data instanceof InitialGuess
2210	data instanceof SimpleBounds
2211	start != null
2212	lowerBound != null
2213	lowerBound.length != dim
2214	v < lo
2215	upperBound != null
2216	upperBound.length != dim
2217	v > hi
2218	lowerBound == null
2219	upperBound == null
1976	f == null
1977	t == null
1978	w == null
1979	startPoint == null
1980	t.length != w.length
1981	data instanceof Target
1982	data instanceof Weight
1983	data instanceof InitialGuess
1984	target.length != weightMatrix.getColumnDimension()
4245	minimalIterationCount <= 0
4246	maximalIterationCount <= minimalIterationCount
1812	f == null
1813	goalType == null
2779	starts < 1
2780	optimData[i] instanceof MaxEval
2781	optimData[i] instanceof InitialGuess
2782	maxEvalIndex == -1
2783	initialGuessIndex == -1
2784	i == 0
2785	attempts++ >= getMaxEvaluations()
2786	s[k] > max[k]
2786	max != null
2786	s[k] < min[k]
2786	min != null
2787	optima.length == 0
1801	optimizer == null
1801	generator == null
1802	starts < 1
1803	optima == null
1804	optima[0] == null
2788	data instanceof InitialGuess
2789	data instanceof SimpleBounds
2790	start != null
2791	lowerBound != null
2792	lowerBound.length != dim
2793	v < lo
2794	upperBound != null
2795	upperBound.length != dim
2796	v > hi
1808	optimizer == null
1808	generator == null
1809	starts < 1
1810	optima == null
1811	optima[0] == null
2669	data instanceof MaxEval
2670	data instanceof MaxIter
4234	numberOfPoints <= 0
4235	cached == null
4236	rule == null
4237	rule.getFirst().length != rule.getSecond().length
4000	f0 == 0.0
4001	f1 == 0.0
4002	fx == 0.0
4003	f1 * fx < 0
4004	x == x1
4005	FastMath.abs(f1) <= ftol
4006	inverted
4007	inverted
4008	f1 <= 0
4009	f1 >= 0
4010	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)
3261	Double.isNaN(a)
3261	a <= 0.0
3261	Double.isNaN(x)
3261	x > 1
3261	Double.isNaN(b)
3261	b <= 0.0
3261	x < 0
3262	x > (a + 1.0) / (a + b + 2.0)
3263	a < 1.0
3263	a > 2.0
3264	b > 2.0
3264	b < 1.0
3265	x <= 0.5
3266	x <= 1.5
3267	a < 0.0
3268	b < 10.0
3269	a <= b
3270	a > b
3270	a < 0
3271	b < 10
3272	p < 10.0
3273	q < 10.0
3274	q <= 0.0
3274	Double.isNaN(p)
3274	p <= 0.0
3274	Double.isNaN(q)
3275	a >= 10.0
3276	u <= v
3277	a > 2.0
3278	b > 1000.0
3279	b < 10.0
3280	a >= 1.0
3281	b > 2.0
3282	b < 10.0
3283	b >= 10.0
1141	Double.isNaN(z)
1142	x < 0
1142	x > 1
1143	x == 0
1144	alpha < 1
1145	x == 1
1146	beta < 1
1147	x <= 0
1148	x >= 1
1561	m >= n
1562	cachedU == null
1563	hK[k - diagOffset] != 0.0
1564	diagOffset > 0
1565	cachedB == null
1566	m < n
1567	i > 0
1568	i < main.length - 1
1569	cachedV == null
1570	hK[k] != 0.0
1571	diagOffset > 0
1572	a != 0.0
1573	k < n - 1
1574	b != 0.0
1575	a != 0.0
1576	k < m - 1
1577	b != 0.0
3921	f.length == 0
3921	xLen == 0
3921	yLen == 0
3921	f[0].length == 0
3922	xLen != f.length
3923	xLen != dFdX.length
3924	xLen != dFdY.length
3925	xLen != d2FdXdY.length
3926	f[i].length != yLen
3927	dFdX[i].length != yLen
3928	dFdY[i].length != yLen
3929	d2FdXdY[i].length != yLen
3930	i == -1
3931	j == -1
3932	partialDerivatives == null
3933	i == -1
3934	j == -1
3935	c < val[0]
3936	c <= val[i]
3937	x < 0
3937	x > 1
3938	y > 1
3938	y < 0
3939	partialDerivativeX == null
3940	partialDerivativeY == null
3941	partialDerivativeXX == null
3942	partialDerivativeYY == null
3943	partialDerivativeXY == null
3918	xval.length == 0
3918	fval.length == 0
3918	yval.length == 0
3919	xval.length != fval.length
3920	fval[i].length != yLen
955	BigInteger.ZERO.equals(den)
956	BigInteger.ZERO.equals(num)
957	BigInteger.ONE.compareTo(gcd) < 0
958	BigInteger.ZERO.compareTo(den) > 0
959	Double.isNaN(value)
960	Double.isInfinite(value)
961	exponent != 0
962	sign != 0
963	k < 0
964	a0 > overflow
965	FastMath.abs(a0 - value) < epsilon
966	p2 > overflow
966	q2 > overflow
967	FastMath.abs(convergent - value) > epsilon
967	n < maxIterations
967	q2 < maxDenominator
968	n >= maxIterations
969	q2 < maxDenominator
970	numerator == 0
971	fraction == null
972	ZERO.equals(fraction)
973	denominator.equals(fraction.denominator)
974	bg == null
975	BigInteger.ZERO.equals(bg)
976	fraction == null
977	BigInteger.ZERO.equals(fraction.numerator)
978	Double.isNaN(result)
979	this == other
980	other instanceof BigFraction
981	Double.isNaN(result)
982	bg == null
983	fraction == null
984	fraction.numerator.equals(BigInteger.ZERO)
984	numerator.equals(BigInteger.ZERO)
985	exponent < 0
986	exponent < 0
987	exponent.compareTo(BigInteger.ZERO) < 0
988	bg == null
989	fraction == null
990	ZERO.equals(fraction)
991	denominator.equals(fraction.denominator)
992	BigInteger.ONE.equals(denominator)
993	BigInteger.ZERO.equals(numerator)
994	obj instanceof BigFraction
995	obj instanceof BigInteger
996	obj instanceof Number
997	parsePosition.getIndex() == 0
998	num == null
999	den == null
218	this == other
219	other instanceof BigReal
3234	i >1
3234	i < 0
3235	another instanceof BinaryChromosome
3236	getLength() != anotherBc.getLength()
3237	getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
3248	original instanceof BinaryChromosome
1212	trials < 0
1213	p < 0
1213	p > 1
1214	x > numberOfTrials
1214	x < 0
1215	x < 0
1216	x >= numberOfTrials
4075	fm * fmin > 0
4076	FastMath.abs(max - min) <= absoluteAccuracy
3156	Double.isNaN(nextGaussian)
3157	n > 0
3158	(n & -n) == n
3159	n > 0
1303	copyArray
1304	blockData[index].length != iHeight * blockWidth(jBlock)
1305	copyArray
1306	length != columns
1307	heightExcess > 0
1308	widthExcess > 0
1309	widthExcess > 0
1310	refLength == 0
1311	subRow.length != refLength
1312	jWidth > available
1313	matrix.getColumnDimension() != nCols
1313	matrix.getRowDimension() != 1
1314	jWidth > available
1315	outIndex >= outBlock.length
1316	matrix.getColumnDimension() != 1
1316	matrix.getRowDimension() != nRows
1317	mIndex >= mBlock.length
1318	array.length != nCols
1319	array.length != nRows
1320	v.length != columns
1321	v.length != rows
1656	copyArray
1657	blockData[index].length != iHeight * blockWidth(jBlock)
1658	copyArray
1659	length != columns
1660	heightExcess > 0
1661	widthExcess > 0
1662	widthExcess > 0
1663	refLength == 0
1664	subRow.length != refLength
1665	jWidth > available
1666	matrix.getColumnDimension() != nCols
1666	matrix.getRowDimension() != 1
1667	jWidth > available
1668	outIndex >= outBlock.length
1669	matrix.getColumnDimension() != 1
1669	matrix.getRowDimension() != nRows
1670	mIndex >= mBlock.length
1671	array.length != nCols
1672	array.length != nRows
1673	v.length != columns
1674	v.length != rows
625	attribute.getPlusOutside() != null
626	attribute.getPlusInside() != null
2677	growLimit <= 0
2678	maxEvaluations <= 0
2679	isMinim ? fA < fB : fA > fB
2680	(w - xC) * (xB - w) > 0
2681	isMinim ? fW < fC : fW > fC
2682	isMinim ? fW > fB : fW < fB
2683	(w - wLim) * (wLim - xC) >= 0
2684	(w - wLim) * (xC - w) > 0
2685	isMinim ? fW < fC : fW > fC
2686	lo > hi
1814	growLimit <= 0
1815	maxEvaluations <= 0
1816	isMinim ? fA < fB : fA > fB
1817	(w - xC) * (xB - w) > 0
1818	isMinim ? fW < fC : fW > fC
1819	isMinim ? fW > fB : fW < fB
1820	(w - wLim) * (wLim - xC) >= 0
1821	(w - wLim) * (xC - w) > 0
1822	isMinim ? fW < fC : fW > fC
1823	lo > hi
4030	maximalOrder < 2
4031	maximalOrder < 2
4032	maximalOrder < 2
4033	Precision.equals(y[1], 0.0, 1)
4034	Precision.equals(y[0], 0.0, 1)
4035	y[0] * y[1] < 0
4036	Precision.equals(y[2], 0.0, 1)
4037	y[1] * y[2] < 0
4038	(xB - xA) <= xTol
4038	FastMath.max(absYA, absYB) < getFunctionValueAccuracy()
4039	agingA >= MAXIMAL_AGING
4040	agingB >= MAXIMAL_AGING
4041	nextX < xB
4041	nextX > xA
4042	signChangeIndex - start >= end - signChangeIndex
4043	Double.isNaN(nextX)
4044	Precision.equals(nextY, 0.0, 1)
4045	nbPoints > 2
4045	end - start != nbPoints
4046	nbPoints == x.length
4047	signChangeIndex >= (x.length + 1) / 2
4048	nextY * yA <= 0
3787	maximalOrder < 2
3788	y[1].isZero()
3789	y[0].isZero()
3790	y[0].multiply(y[1]).negativeOrNull()
3791	y[2].isZero()
3792	y[1].multiply(y[2]).negativeOrNull()
3793	maxY.lessThan(functionValueAccuracy)
3793	xB.subtract(xA).subtract(xTol).negativeOrNull()
3794	agingA >= MAXIMAL_AGING
3795	agingB >= MAXIMAL_AGING
3796	nextX.greaterThan(xA)
3796	nextX.lessThan(xB)
3797	signChangeIndex - start >= end - signChangeIndex
3798	nextX.isNaN()
3799	nextY.isZero()
3800	nbPoints > 2
3800	end - start != nbPoints
3801	nbPoints == x.length
3802	signChangeIndex >= (x.length + 1) / 2
3803	nextY.multiply(yA).negativeOrNull()
2692	rel < MIN_RELATIVE_TOLERANCE
2693	abs <= 0
2694	lo < hi
2695	isMinim
2696	stop
2697	FastMath.abs(e) > tol1
2698	q > 0
2699	FastMath.abs(p) < FastMath.abs(0.5 * q * r)
2699	p > q * (a - x)
2699	p < q * (b - x)
2700	u - a < tol2
2700	b - u < tol2
2701	x <= m
2702	x < m
2703	x < m
2704	FastMath.abs(d) < tol1
2705	d >= 0
2706	isMinim
2707	checker != null
2708	checker.converged(iter, previous, current)
2709	fu <= fx
2710	u < x
2711	u < x
2712	Precision.equals(w, x)
2712	fu <= fw
2713	Precision.equals(v, w)
2713	fu <= fv
2713	Precision.equals(v, x)
2714	a == null
2715	b == null
2716	isMinim
1827	rel < MIN_RELATIVE_TOLERANCE
1828	abs <= 0
1829	lo < hi
1830	isMinim
1831	stop
1832	FastMath.abs(e) > tol1
1833	q > 0
1834	p < q * (b - x)
1834	p > q * (a - x)
1834	FastMath.abs(p) < FastMath.abs(0.5 * q * r)
1835	u - a < tol2
1835	b - u < tol2
1836	x <= m
1837	x < m
1838	x < m
1839	FastMath.abs(d) < tol1
1840	d >= 0
1841	isMinim
1842	checker != null
1843	checker.converged(iter, previous, current)
1844	fu <= fx
1845	u < x
1846	u < x
1847	fu <= fw
1847	Precision.equals(w, x)
1848	Precision.equals(v, x)
1848	Precision.equals(v, w)
1848	fu <= fv
1849	a == null
1850	b == null
1851	isMinim
4084	FastMath.abs(yInitial) <= functionValueAccuracy
4085	FastMath.abs(yMin) <= functionValueAccuracy
4086	yInitial * yMin < 0
4087	FastMath.abs(yMax) <= functionValueAccuracy
4088	yInitial * yMax < 0
4089	FastMath.abs(fc) < FastMath.abs(fb)
4090	FastMath.abs(m) <= tol
4090	Precision.equals(fb, 0)
4091	FastMath.abs(fa) <= FastMath.abs(fb)
4091	FastMath.abs(e) < tol
4092	a == c
4093	p > 0
4094	p >= 1.5 * m * q - FastMath.abs(tol * q)
4094	p >= FastMath.abs(0.5 * s * q)
4095	FastMath.abs(d) > tol
4096	m > 0
4097	fb <= 0
4097	fb > 0
4097	fc <= 0
4097	fc > 0
2818	diagonalOnly <= 0
2819	i >= checkFeasableCount
2819	fitfun.isFeasible(arxk.getColumn(0))
2820	diagonalOnly <= 0
2821	bestValue > bestFitness
2822	getConvergenceChecker() != null
2822	lastResult != null
2823	getConvergenceChecker().converged(iterations, optimum, lastResult)
2824	stopFitness != 0
2825	bestFitness < (isMinimize ? stopFitness : -stopFitness)
2826	sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX
2827	i >= dimension - 1
2828	sigma * sqrtDiagC[i] > stopTolUpX
2829	iterations > 2
2829	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
2830	iterations > fitnessHistory.length
2830	historyWorst - historyBest < stopTolHistFun
2831	max(diagD) / min(diagD) > 1e7
2832	getConvergenceChecker() != null
2833	getConvergenceChecker().converged(iterations, current, lastResult)
2833	lastResult != null
2834	bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]
2835	iterations > 2
2835	Math.max(historyWorst, bestFitness) - Math.min(historyBest, bestFitness) == 0
2836	generateStatistics
2837	data instanceof Sigma
2838	data instanceof PopulationSize
2839	inputSigma != null
2840	inputSigma.length != init.length
2841	inputSigma[i] > uB[i] - lB[i]
2842	lambda <= 0
2843	hsig
2844	iterations > diagonalOnly
2844	diagonalOnly > 1
2845	ccov1 + ccovmu > 0
2846	isActiveCMA
2847	negccov > negcovMax
2848	(iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1
2848	ccov1 + ccovmu + negccov > 0
2849	min(diagD) <= 0
2850	diagD.getEntry(i, 0) < 0
2851	max(diagD) > 1e14 * min(diagD)
2852	m.getColumnDimension() == 1
2853	r < m
2854	max < e
2855	min > e
2856	max < m[r]
2857	min > m[r]
1987	diagonalOnly <= 0
1988	i >= checkFeasableCount
1988	fitfun.isFeasible(arxk.getColumn(0))
1989	diagonalOnly <= 0
1990	bestValue > bestFitness
1991	lastResult != null
1991	getConvergenceChecker() != null
1992	getConvergenceChecker().converged(iterations, optimum, lastResult)
1993	stopFitness != 0
1994	bestFitness < (isMinimize ? stopFitness : -stopFitness)
1995	sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX
1996	i >= dimension - 1
1997	sigma * sqrtDiagC[i] > stopTolUpX
1998	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
1998	iterations > 2
1999	historyWorst-historyBest < stopTolHistFun
1999	iterations > fitnessHistory.length
2000	max(diagD)/min(diagD) > 1e7
2001	getConvergenceChecker() != null
2002	lastResult != null
2002	getConvergenceChecker().converged(iterations, current, lastResult)
2003	bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]
2004	Math.max(historyWorst, bestFitness) - Math.min(historyBest, bestFitness) == 0
2004	iterations > 2
2005	generateStatistics
2006	data instanceof Sigma
2007	data instanceof PopulationSize
2008	inputSigma != null
2009	inputSigma.length != init.length
2010	inputSigma[i] < 0
2011	inputSigma[i] > uB[i] - lB[i]
2012	lambda <= 0
2013	hsig
2014	iterations > diagonalOnly
2014	diagonalOnly > 1
2015	ccov1 + ccovmu > 0
2016	isActiveCMA
2017	negccov > negcovMax
2018	(iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1
2018	ccov1 + ccovmu + negccov > 0
2019	min(diagD) <= 0
2020	diagD.getEntry(i, 0) < 0
2021	max(diagD) > 1e14 * min(diagD)
2022	m.getColumnDimension() == 1
2023	r < m
2024	max < e
2025	min > e
2026	max < m[r]
2027	min > m[r]
1199	scale <= 0
1200	p < 0
1200	p > 1
1201	p == 0
1202	p == 1
2411	expected.length < 2
2412	expected.length != observed.length
2413	FastMath.abs(sumExpected - sumObserved) > 10E-6
2414	rescale
2415	alpha <= 0
2415	alpha > 0.5
2416	alpha <= 0
2416	alpha > 0.5
2417	observed1.length < 2
2418	observed1.length != observed2.length
2419	countSum1 == 0
2419	countSum2 == 0
2420	unequalCounts
2421	observed2[i] == 0
2421	observed1[i] == 0
2422	unequalCounts
2423	alpha > 0.5
2423	alpha <= 0
2424	in.length < 2
2425	in[0].length < 2
1513	matrix.isSquare()
1514	FastMath.abs(lIJ - lJI) > maxDelta
1515	ltI[i] <= absolutePositivityThreshold
1516	cachedL == null
1517	cachedLT == null
3214	this.fitness == NO_FITNESS
3215	this.isSame(anotherChr)
3216	sameChromosome != null
3463	theta <= 0.5
3463	previousState != null
894	isNaN
895	isInfinite()
896	FastMath.abs(real) < FastMath.abs(imaginary)
897	imaginary == 0.0
898	real == 0.0
899	isNaN
899	addend.isNaN
900	Double.isNaN(addend)
900	isNaN
901	isNaN
902	divisor.isNaN
902	isNaN
903	c == 0.0
903	d == 0.0
904	divisor.isInfinite()
904	isInfinite()
905	FastMath.abs(c) < FastMath.abs(d)
906	Double.isNaN(divisor)
906	isNaN
907	divisor == 0d
908	Double.isInfinite(divisor)
909	isNaN
910	real == 0.0
910	imaginary == 0.0
911	isInfinite
912	FastMath.abs(real) < FastMath.abs(imaginary)
913	this == other
914	other instanceof Complex
915	c.isNaN
916	isNaN
917	factor.isNaN
917	isNaN
918	Double.isInfinite(real)
918	Double.isInfinite(imaginary)
918	Double.isInfinite(factor.imaginary)
918	Double.isInfinite(factor.real)
919	isNaN
920	Double.isInfinite(imaginary)
920	Double.isInfinite(real)
921	isNaN
921	Double.isNaN(factor)
922	Double.isInfinite(factor)
922	Double.isInfinite(real)
922	Double.isInfinite(imaginary)
923	isNaN
924	isNaN
924	subtrahend.isNaN
925	Double.isNaN(subtrahend)
925	isNaN
926	isNaN
927	isNaN
928	isNaN
929	isNaN
930	isNaN
931	isNaN
932	isNaN
933	isNaN
934	isNaN
935	isNaN
936	imaginary == 0.0
936	real == 0.0
937	real >= 0.0
938	Double.isInfinite(real)
938	isNaN
939	imaginary > 20.0
940	imaginary < -20.0
941	isNaN
941	Double.isInfinite(imaginary)
942	real > 20.0
943	real < -20.0
944	n <= 0
945	isNaN
946	isInfinite()
947	Double.isNaN(imaginaryPart)
947	Double.isNaN(realPart)
948	Double.isNaN(realPart)
878	format == null
879	imaginaryFormat == null
880	realFormat == null
881	imaginaryCharacter == null
882	imaginaryCharacter.length() == 0
883	imaginaryFormat == null
884	realFormat == null
885	im < 0.0
886	Double.isNaN(im)
886	im > 0.0
887	toAppendTo.toString().equals("1")
888	obj instanceof Complex
889	obj instanceof Number
890	parsePosition.getIndex() == 0
891	re == null
892	im == null
893	CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), pos)
870	r < 0
506	index < n
507	index < n
508	endIndex < source.length()
509	source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
510	startIndex == endIndex
511	number != null
512	source.substring(startIndex, endIndex).compareTo(expected) != 0
512	endIndex > source.length()
512	startIndex >= source.length()
513	Double.isNaN(value)
513	Double.isInfinite(value)
1762	m == null
1763	rnorm <= rmax
1764	m != null
1765	check
1765	rhoNext <= 0.
1766	manager.getIterations() == 2
1767	check
1767	pq <= 0.
1768	rnorm <= rmax
95	Precision.equals(hPrev, 0.0, small)
96	Precision.equals(dN, 0.0, small)
97	Precision.equals(cN, 0.0, small)
98	Double.isInfinite(hN)
99	Double.isNaN(hN)
100	FastMath.abs(deltaN - 1.0) < epsilon
101	n >= maxIterations
3516	model.steps.size() == 0
3517	steps.size() == 0
3518	getInterpolatedState().length != model.getInterpolatedState().length
3519	forward ^ model.forward
3520	FastMath.abs(gap) > 1.0e-3 * FastMath.abs(step)
3521	steps.size() == 0
3522	isLast
3523	locatePoint(time, sMin) <= 0
3524	locatePoint(time, sMax) >= 0
3525	location < 0
3526	location > 0
3527	FastMath.abs(tMax - tMed) < 1e-6
3527	FastMath.abs(tMed - tMin) < 1e-6
3528	index < low
3529	index > high
3530	forward
3531	time < interval.getPreviousTime()
3532	time > interval.getCurrentTime()
3533	time > interval.getPreviousTime()
3534	time < interval.getCurrentTime()
3115	mean.length != order
2481	length != yArray.length
2482	length < 2
2483	nRows < 2
2483	nCols < 1
1856	optimizer == null
3204	first instanceof AbstractListChromosome<?>
3204	second instanceof AbstractListChromosome<?>
3205	length != second.getLength()
3206	cycle++ % 2 != 0
3207	idx >= length
2439	eps < 0.0d
2440	minPts < 0
2441	visited.get(point) != null
2442	neighbors.size() >= minPts
2443	pStatus == null
2444	currentNeighbors.size() >= minPts
2445	pStatus != PointStatus.PART_OF_CLUSTER
2446	neighbor.distanceFrom(point) <= eps
2446	point != neighbor
2447	oneSet.contains(item)
4100	cache.length > parameters
4100	cache[parameters].length > order
4100	cache != null
4101	cache[parameters][order] != null
4102	cache != null
4103	newCache[p][o] == null
4104	parameters == 0
4105	parameters == 0
4105	order == 0
4106	parameters == 0
4106	order <= 1
4107	parameters == 0
4107	order == 0
4108	termJ[0] > 0
4109	termJ[2] == termK[2]
4109	termJ[1] == termK[1]
4110	parameters == 0
4110	order == 0
4111	j == l
4112	termJ[0] > 0
4113	equals
4114	orders.length != getFreeParameters()
4115	ordersSum > order
4116	n == 0
4117	n > 0
4118	n == 2
4119	n == 3
4120	order > 0
4121	order > 0
4122	order > 0
4123	order > 0
4124	order > 0
4125	order > 0
4126	k > 2
4127	k == 2
4128	(n & 0x1) == 0
4129	order > 0
4130	k > 2
4131	k == 2
4132	(n & 0x1) == 0
4133	order > 0
4134	k > 2
4135	k == 2
4136	(n & 0x1) == 0
4137	order > 0
4138	k > 2
4139	k == 2
4140	(n & 0x1) == 0
4141	x[xOffset] >= 0
4142	order > 0
4143	order > 0
4144	order > 0
4145	k > 2
4146	k == 2
4147	(n & 0x1) == 0
4148	order > 0
4149	k > 2
4150	k == 2
4151	(n & 0x1) == 0
4152	order > 0
4153	k > 2
4154	k == 2
4155	(n & 0x1) == 0
4156	order > 0
4157	k > 2
4158	k == 2
4159	(n & 0x1) == 0
4160	orders[k] > 0
4161	parameters != compiler.parameters
4162	order != compiler.order
552	obj instanceof Decimal64
553	value < 0
554	a.length != b.length
555	a.length != b.length
1782	r != null
526	o == null
527	o instanceof Number
528	this == other
4167	index >= parameters
4168	order > 0
4169	derivatives.length != data.length
4170	Double.doubleToLongBits(data[0]) < 0
4171	m >= 0
4171	m < 0
4171	s < 0
4171	s >= 0
4172	m >= 0
4172	s < 0
4172	m < 0
4172	s >= 0
4173	Double.isInfinite(data[0])
4173	Double.isInfinite(y.data[0])
4174	Double.isNaN(data[0])
4174	Double.isNaN(y.data[0])
4175	expX > expY + 27
4176	expY > expX + 27
4177	f.length != getOrder() + 1
4178	this == other
4179	other instanceof DerivativeStructure
2311	initialDoubleArray != null
2312	windowSize != INFINITE_WINDOW
2313	getN() == windowSize
2314	getN() < windowSize
2315	getN() > 0
2316	getN() > 1
2317	windowSize < 1
2317	windowSize != INFINITE_WINDOW
2318	windowSize < eDA.getNumElements()
2318	windowSize != INFINITE_WINDOW
2319	percentileImpl instanceof Percentile
3564	x == Long.MIN_VALUE
3565	x < 0
3566	isLongMin
3567	mant[i] != 0
3568	exponent == -1023
3569	x == 0
3570	(bits & 0x8000000000000000L) != 0
3571	exponent == 1024
3572	x != x
3573	x < 0
3574	(bits & 0x8000000000000000L) != 0
3575	s.equals(POS_INFINITY_STRING)
3576	s.equals(NEG_INFINITY_STRING)
3577	s.equals(NAN_STRING)
3578	p == -1
3579	p != -1
3580	fpexp.charAt(i) == '-'
3581	fpexp.charAt(i) <= '9'
3581	fpexp.charAt(i) >= '0'
3582	negative
3583	fpdecimal.indexOf("-") != -1
3584	fpdecimal.charAt(p) <= '9'
3584	fpdecimal.charAt(p) >= '1'
3585	fpdecimal.charAt(p) == '0'
3585	decimalFound
3586	fpdecimal.charAt(p) == '.'
3587	p == fpdecimal.length()
3588	p == (fpdecimal.length())
3589	q == mant.length*rsize+offset+1
3590	fpdecimal.charAt(p) == '.'
3591	fpdecimal.charAt(p) > '9'
3591	fpdecimal.charAt(p) < '0'
3592	decimalFound
3592	q != offset
3593	q == offset
3594	striped[q] == '0'
3595	decimalFound
3595	significantDigits == 0
3596	decimalFound
3597	striped[p] != '0'
3598	q < striped.length
3599	field.getRadixDigits() != d.field.getRadixDigits()
3600	adiff < 0
3601	diff == 0
3602	adiff > (mant.length + 1)
3603	diff < 0
3604	lostdigit != 0
3605	inexact
3606	field.getRadixDigits() != x.field.getRadixDigits()
3607	isNaN()
3607	x.isNaN()
3608	field.getRadixDigits() != x.field.getRadixDigits()
3609	x.isNaN()
3609	isNaN()
3610	isNaN()
3611	isNaN()
3612	isNaN()
3613	isNaN()
3614	isNaN()
3615	other instanceof Dfp
3616	field.getRadixDigits() != x.field.getRadixDigits()
3616	x.isNaN()
3616	isNaN()
3617	x.isNaN()
3617	isNaN()
3617	field.getRadixDigits() != x.field.getRadixDigits()
3618	b.mant[b.mant.length - 1] == 0
3618	a.nans == FINITE
3618	a.mant[a.mant.length - 1] == 0
3618	b.nans == FINITE
3619	a.sign != b.sign
3620	a.sign == -1
3621	a.nans == INFINITE
3621	b.nans == FINITE
3622	a.nans == FINITE
3622	b.nans == INFINITE
3623	a.nans == INFINITE
3623	b.nans == INFINITE
3624	a.mant[b.mant.length-1] != 0
3624	b.mant[b.mant.length-1] != 0
3625	a.exp < b.exp
3626	a.exp > b.exp
3627	a.mant[i] > b.mant[i]
3628	a.mant[i] < b.mant[i]
3629	result.mant[mant.length-1] == 0
3630	isNaN()
3631	nans == INFINITE
3632	mant[mant.length-1] == 0
3633	exp < 0
3634	exp >= mant.length
3635	changed
3636	result.sign == -1
3637	result.sign == 1
3638	a.greaterThan(half)
3639	(result.mant[mant.length-result.exp]&1) != 0
3639	result.exp > 0
3639	a.equals(half)
3640	rounded.greaterThan(newInstance(2147483647))
3641	rounded.lessThan(newInstance(-2147483648))
3642	rounded.sign == -1
3643	mant[mant.length-1] > 1000
3644	mant[mant.length-1] > 100
3645	mant[mant.length-1] > 10
3646	e >= 0
3647	field.getRadixDigits() != x.field.getRadixDigits()
3648	nans != FINITE
3648	x.nans != FINITE
3649	isNaN()
3650	x.isNaN()
3651	x.nans == FINITE
3651	nans == INFINITE
3652	x.nans == INFINITE
3652	nans == FINITE
3653	nans == INFINITE
3653	sign == x.sign
3653	x.nans == INFINITE
3654	x.nans == INFINITE
3654	nans == INFINITE
3654	sign != x.sign
3655	compare(a, b) > 0
3656	b.mant[mant.length-1] == 0
3657	a.mant[mant.length-1] == 0
3658	a.exp < b.exp
3659	asign != bsign
3660	asign == rsign
3661	asign == bsign
3661	rh != 0
3662	excp != 0
3663	result.mant[mant.length-1] != 0
3664	i == 0
3665	result.mant[mant.length-1] == 0
3666	asign != bsign
3667	excp != 0
3668	inc
3669	rh != 0
3670	exp < MIN_EXP
3671	exp > MAX_EXP
3672	n != 0
3673	field.getRadixDigits() != x.field.getRadixDigits()
3674	x.nans != FINITE
3674	nans != FINITE
3675	isNaN()
3676	x.isNaN()
3677	x.mant[mant.length-1] != 0
3677	x.nans == FINITE
3677	nans == INFINITE
3678	mant[mant.length-1] != 0
3678	nans == FINITE
3678	x.nans == INFINITE
3679	x.nans == INFINITE
3679	nans == INFINITE
3680	nans == FINITE
3680	nans == INFINITE
3680	x.nans == INFINITE
3680	mant[mant.length-1] == 0
3680	x.nans == FINITE
3680	x.mant[mant.length-1] == 0
3681	product[i] != 0
3682	result.mant[mant.length-1] == 0
3683	md > (mant.length-1)
3684	excp != 0
3685	x >= 0
3685	x < RADIX
3686	nans != FINITE
3687	isNaN()
3688	x != 0
3688	nans == INFINITE
3689	x == 0
3689	nans == INFINITE
3690	x < 0
3690	x >= RADIX
3691	rh != 0
3692	result.mant[mant.length-1] == 0
3693	excp != 0
3694	field.getRadixDigits() != divisor.field.getRadixDigits()
3695	nans != FINITE
3695	divisor.nans != FINITE
3696	isNaN()
3697	divisor.isNaN()
3698	nans == INFINITE
3698	divisor.nans == FINITE
3699	divisor.nans == INFINITE
3699	nans == FINITE
3700	nans == INFINITE
3700	divisor.nans == INFINITE
3701	divisor.mant[mant.length-1] == 0
3702	rh == 0
3703	minadj >= 2
3704	divisor.mant[i] > remainder[i]
3705	divisor.mant[i] < remainder[i]
3706	remainder[mant.length] != 0
3707	trialgood == false
3708	trial != 0
3708	nsqd != 0
3709	nsqd == mant.length
3709	field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN
3710	nsqd > mant.length
3711	quotient[i] != 0
3712	result.mant[mant.length-1] == 0
3713	md > (mant.length-1)
3714	excp != 0
3715	nans != FINITE
3716	isNaN()
3717	nans == INFINITE
3718	divisor == 0
3719	divisor < 0
3719	divisor >= RADIX
3720	result.mant[mant.length-1] == 0
3721	excp != 0
3722	nans == FINITE
3722	mant[mant.length-1] == 0
3723	nans != FINITE
3724	sign == 1
3724	nans == INFINITE
3725	nans == QNAN
3726	nans == SNAN
3727	sign == -1
3728	x.exp < -1
3728	x.exp > 1
3729	x.equals(ppx)
3730	dx.mant[mant.length-1] == 0
3731	nans != FINITE
3732	nans == INFINITE
3733	exp < -1
3733	exp > mant.length
3734	rawdigits[p] != '0'
3735	sign == -1
3736	p != rawdigits.length
3737	e < 0
3738	e < 0
3739	e <= 0
3740	--e == 0
3741	pointInserted
3742	buffer[q] == '.'
3743	sign < 0
3744	mant[mant.length-1] != 0
3744	nans == FINITE
3745	mant[mant.length-1] == 0
3745	nans == FINITE
3746	nans == INFINITE
3746	nans == QNAN
3747	nans == INFINITE
3747	nans == SNAN
3748	(result.exp+mant.length) < MIN_EXP
3749	field.getRadixDigits() != x.field.getRadixDigits()
3750	this.lessThan(x)
3751	compare(this, x) == 0
3752	lessThan(getZero())
3753	up
3754	this.equals(getZero())
3755	this.equals(inc)
3756	this.equals(getZero())
3757	result.classify() == INFINITE
3757	this.classify() != INFINITE
3758	result.equals(getZero())
3758	this.equals(getZero()) == false
3759	isInfinite()
3760	lessThan(getZero())
3761	isNaN()
3762	cmp0 == 0
3763	cmp0 < 0
3764	exponent < 0
3765	exponent > -1023
3766	exponent < -1074
3767	exponent > 1023
3768	mantissa == 4503599627370496L
3769	exponent <= -1023
3770	negate
3771	isNaN()
3771	isZero()
3772	sign < 0
3772	sign >= 0
3772	s.sign >= 0
3772	s.sign < 0
3773	sign >= 0
3773	sign < 0
3773	sb >= 0
3773	sb < 0
3774	x.sign >= 0
3775	a.length != b.length
3776	a.length != b.length
3543	getField().getRadixDigits() != d.getField().getRadixDigits()
3544	msb == 0
3545	lsbthreshold <= 1
3545	digits == 4 * mant.length - 3
3546	lsbthreshold == 1
3547	inc
3548	rh != 0
3549	exp < MIN_EXP
3550	exp > MAX_EXP
3551	n != 0
3551	discarded != 0
3552	getField().getRadixDigits() != x.getField().getRadixDigits()
3553	this.lessThan(x)
3554	equals(x)
3555	lessThan(getZero())
3556	up
3557	this.equals(getZero())
3558	inc.equals(getZero())
3559	this.equals(inc)
3560	this.equals(getZero())
3561	inc.equals(getZero())
3562	this.classify() != INFINITE
3562	result.classify() == INFINITE
3563	result.equals(getZero())
3563	this.equals(getZero()) == false
3777	computeConstants
3778	buf[i] >= '1'
3778	buf[i] <= '9'
3779	buf[i] == '.'
3780	sig == (radixDigits / 2) * 4
3781	buf[i] <= '9'
3781	buf[i] >= '0'
3781	leading
3782	i < sp
3782	buf[i] <= '9'
3782	buf[i] >= '0'
3783	sqr2String.length() < highPrecisionDecimalDigits - 3
3783	sqr2String == null
3784	yk.equals(ykM1)
3785	y.equals(py)
3786	y.equals(py)
3804	buf[i] <= '9'
3804	buf[i] >= '1'
3805	buf[i] == '.'
3806	sig == (field.getRadixDigits() / 2) * 4
3807	leading
3807	buf[i] <= '9'
3807	buf[i] >= '0'
3808	buf[i] >= '0'
3808	i < sp
3808	buf[i] <= '9'
3809	result[0].classify() == Dfp.INFINITE
3809	result[0].equals(result[1])
3810	a == 0
3811	a < 0
3812	trial > a
3813	invert
3814	a == 0
3815	a < 0
3816	invert
3817	ia > 2147483646
3818	ia < -2147483646
3819	y.equals(py)
3820	a.lessThan(a.getZero())
3820	a.equals(a.getZero())
3820	a.isNaN()
3821	a.classify() == Dfp.INFINITE
3822	y.equals(py)
3823	x.getField().getRadixDigits() != y.getField().getRadixDigits()
3824	y.equals(zero)
3825	y.equals(one)
3826	x.isNaN()
3827	x.isNaN()
3827	y.isNaN()
3828	x.equals(zero)
3829	Dfp.copysign(one, x).greaterThan(zero)
3830	y.greaterThan(zero)
3831	y.remainder(two).equals(zero)
3831	y.classify() == Dfp.FINITE
3831	y.rint().equals(y)
3832	y.greaterThan(zero)
3833	y.greaterThan(zero)
3834	x.lessThan(zero)
3835	y.classify() == Dfp.INFINITE
3835	x.greaterThan(one)
3836	y.greaterThan(zero)
3837	x.lessThan(one)
3837	y.classify() == Dfp.INFINITE
3838	y.greaterThan(zero)
3839	y.classify() == Dfp.INFINITE
3839	x.equals(one)
3840	x.classify() == Dfp.INFINITE
3841	invert
3842	y.remainder(two).equals(zero)
3842	y.rint().equals(y)
3842	y.classify() == Dfp.FINITE
3843	y.greaterThan(zero)
3844	y.greaterThan(zero)
3845	y.greaterThan(zero)
3846	invert
3846	y.rint().equals(y)
3847	y.greaterThan(x.newInstance(-100000000))
3847	y.lessThan(x.newInstance(100000000))
3848	v.unequal(zero)
3849	invert
3850	y.remainder(two).equals(zero)
3850	y.rint().equals(y)
3851	y.equals(py)
3852	y.equals(py)
3853	x.lessThan(zero)
3854	x.greaterThan(pi.divide(2))
3855	x.lessThan(pi.divide(4))
3856	neg
3857	x.lessThan(zero)
3858	x.greaterThan(pi.divide(2))
3859	x.lessThan(pi.divide(4))
3860	neg
3861	y.equals(py)
3862	x.lessThan(zero)
3863	x.greaterThan(one)
3864	x.greaterThan(ty)
3865	sub
3866	recp
3867	neg
3868	a.lessThan(a.getZero())
3869	negative
1384	rowDimension != columnDimension
1385	m instanceof DiagonalMatrix
1386	row == column
1387	row == column
1388	row == column
1389	Precision.equals(0.0, value, 1)
3370	interpolator.v1 == null
3371	vectorsInitialized
3372	v1 == null
3373	theta <= 0.5
3373	previousState != null
3424	den <= 0.0
3444	interpolator.currentState == null
3445	vectorsInitialized
3446	v == null
3447	theta <= 0.5
3447	previousState != null
3448	currentState == null
1430	isSymmetric
1431	cachedV == null
1432	cachedD == null
1433	Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0
1434	Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0
1435	cachedVt == null
1436	Precision.equals(imagEigenvalues[i], 0.0, EPSILON)
1437	isSymmetric
1438	eigen <= 0
1439	hasComplexEigenvalues()
1440	FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue
1441	FastMath.abs(e[i]) > maxAbsoluteValue
1442	maxAbsoluteValue != 0
1443	FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue
1444	FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue
1445	FastMath.abs(e[m]) + delta == delta
1446	m != j
1447	its == maxIter
1448	q < 0.0
1449	FastMath.abs(p) >= FastMath.abs(q)
1450	e[i + 1] == 0.0
1451	t == 0.0
1451	i >= j
1452	realEigenvalues[j] > p
1453	k != i
1454	FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue
1455	maxAbsoluteValue != 0.0
1456	FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue
1457	i == (realEigenvalues.length - 1)
1457	Precision.equals(matT[i + 1][i], 0.0, EPSILON)
1458	Precision.equals(norm, 0.0, EPSILON)
1459	Precision.equals(q, 0.0)
1460	Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0.0
1461	Precision.equals(imagEigenvalues[i], 0.0)
1462	w != 0.0
1463	FastMath.abs(x) > FastMath.abs(z)
1464	(Precision.EPSILON * t) * t > 1
1465	q < 0.0
1466	FastMath.abs(matrixT[idx][idx - 1]) > FastMath.abs(matrixT[idx - 1][idx])
1467	Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0.0
1468	Precision.equals(imagEigenvalues[i], 0.0)
1469	Precision.equals(vi, 0.0)
1469	Precision.equals(vr, 0.0)
1470	FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs(q))
1471	(Precision.EPSILON * t) * t > 1
1472	i < 0 | i > n - 1
3199	elitismRate < 0
3199	elitismRate > 1
3434	fsal
3434	firstTime
3435	firstTime
3436	vecAbsoluteTolerance == null
3437	forward
3438	stepStart + stepSize >= t
3439	stepStart + stepSize <= t
3440	error >= 1.0
3441	isLastStep
3442	fsal
3443	filteredNextIsLast
3121	sampleStats.getN() == 0
3122	binStats.isEmpty()
3123	loaded
3124	x <= upperBounds[i]
3125	stats.getN() > 0
3126	stats.getStandardDeviation() > 0
3127	x < min
3127	x > max
3128	x < min
3129	x >= max
3130	p < 0.0
3130	p > 1.0
3131	p == 0.0
3132	p == 1.0
3133	pCrit <= 0
1104	p < 0
1105	Double.isInfinite(p)
1106	Double.isNaN(p)
1107	x != null
1107	x.equals(singletons.get(i))
1107	singletons.get(i) == null
1107	x == null
1108	randomValue < sum
1109	sampleSize <= 0
1110	sampleSize <= 0
1111	array == null
1112	array.length < sampleSize
1117	singletons.length != probabilities.length
1118	sample.getKey() <= x
1119	sample.getKey() < min
1119	sample.getValue() > 0
1120	sample.getValue() > 0
1120	sample.getKey() > max
1231	singletons.length != probabilities.length
1232	sample.getKey() <= x
1233	sample.getKey() < min
1233	sample.getValue() > 0
1234	sample.getKey() > max
1234	sample.getValue() > 0
3490	equationData.length != dimension
3491	equationData.length != dimension
3255	FastMath.abs(x) > 40
3256	FastMath.abs(x) > 40
3257	x1 > x2
3258	w < 6.25
3259	w < 16.0
3260	Double.isInfinite(w)
2438	other instanceof EuclideanDoublePoint
2472	other instanceof EuclideanIntegerPoint
3476	previousState != null
3476	theta <= 0.5
3492	forward
3493	extremeT < t
3494	next != previous
3495	updates[i] <= t
3496	t < extremeT
3497	next != previous
3498	t <= updates[i]
3499	g0 == 0
3500	FastMath.abs(dt) < convergence
3501	g0Positive ^ (gb >= 0)
3502	solver instanceof BracketedUnivariateSolver<?>
3503	FastMath.abs(root - previousEventTime) <= convergence
3503	Double.isNaN(previousEventTime)
3503	FastMath.abs(root - ta) <= convergence
3504	FastMath.abs(previousEventTime - root) > convergence
3504	Double.isNaN(previousEventTime)
3505	FastMath.abs(pendingEventTime - t) <= convergence
3505	pendingEvent
3506	pendingEvent
3506	FastMath.abs(pendingEventTime - t) <= convergence
3507	nextAction == EventHandler.Action.RESET_STATE
3313	++count < len
3314	args[j] instanceof Serializable
3315	value instanceof Serializable
3538	components.isEmpty()
3539	components.isEmpty()
3540	primaryState.length != this.primaryState.length
3541	secondaryState.length != localArray.length
3542	completeState.length != getTotalDimension()
1149	mean <= 0
1150	x < 0
1151	x <= 0.0
1152	p < 0.0
1152	p > 1.0
1153	p == 1.0
1154	u <= EXPONENTIAL_SA_QI[0]
1155	u2 < umin
1206	numeratorDegreesOfFreedom <= 0
1207	denominatorDegreesOfFreedom <= 0
1208	x <= 0
1209	denominatorDF > 2
1210	numericalVarianceIsCalculated
1211	denominatorDF > 4
3316	type == TransformType.FORWARD
3317	normalization == DctNormalization.ORTHOGONAL_DCT_I
3318	normalization == DctNormalization.ORTHOGONAL_DCT_I
3319	ArithmeticUtils.isPowerOfTwo(n)
3320	n == 1
3332	i < j
3333	type == TransformType.INVERSE
3334	dataRI.length != 2
3335	dataR.length != dataI.length
3336	ArithmeticUtils.isPowerOfTwo(n)
3337	n == 1
3338	n == 2
3339	type == TransformType.INVERSE
3340	type == TransformType.INVERSE
3341	subVector.length == dimensionSize.length
3342	subVector.length == d
3324	type == TransformType.FORWARD
3325	ArithmeticUtils.isPowerOfTwo(n)
3326	ArithmeticUtils.isPowerOfTwo(n)
261	d < Precision.SAFE_MIN
261	d > -Precision.SAFE_MIN
262	x != x
263	x > 20
264	x >= LOG_MAX_VALUE
265	x < -20
266	x <= -LOG_MAX_VALUE
267	x < 0.0
268	x != x
269	x > 20
270	x >= LOG_MAX_VALUE
271	x < -20
272	x <= -LOG_MAX_VALUE
273	x == 0
274	x < 0.0
275	x > 0.25
276	negate
277	x != x
278	x > 20.0
279	x < -20
280	x == 0
281	x < 0.0
282	x >= 0.5
283	negate
284	a < 0
285	a > 0.167
286	a > 0.097
287	a > 0.036
288	a > 0.0036
289	a < 0
290	a > 0.15
291	a > 0.087
292	a > 0.031
293	a > 0.003
294	x < 0.0
295	intVal > 746
296	hiPrec != null
297	intVal > 709
298	hiPrec != null
299	intVal == 709
300	hiPrec != null
301	intVal > 709
302	hiPrec != null
303	extra != 0.0
304	hiPrec != null
305	x != x
305	x == 0.0
306	x <= -1.0
306	x >= 1.0
307	x > 0.0
308	x < 0.0
309	negative
310	hiPrecOut != null
311	x==0
312	(bits & 0x8000000000000000L) != 0
312	x != x
313	x != 0.0
314	hiPrec != null
315	x == Double.POSITIVE_INFINITY
316	hiPrec != null
317	(bits & 0x7ff0000000000000L) == 0
318	x == 0
319	hiPrec != null
320	exp == 0
320	exp == -1
321	x > 0.99
321	hiPrec == null
321	x < 1.01
322	hiPrec != null
323	hiPrec != null
324	x == -1
325	x == Double.POSITIVE_INFINITY
326	x > 1e-6
326	x < -1e-6
327	Double.isInfinite(lores)
328	Double.isInfinite(lores)
329	y == 0.0
330	x != x
331	x == 0
332	(bits & 0x8000000000000000L) != 0
333	y == yi
333	y < 0
333	(yi & 1) == 1
334	y > 0
334	y == yi
334	(yi & 1) == 1
335	y < 0
336	y > 0
337	x == Double.POSITIVE_INFINITY
338	y != y
339	y < 0.0
340	y == Double.POSITIVE_INFINITY
341	x * x == 1.0
342	x * x > 1.0
343	x == Double.NEGATIVE_INFINITY
344	y != y
345	y < 0
346	y == yi
346	(yi & 1) == 1
347	y > 0
348	(yi & 1) == 1
348	y == yi
349	y == Double.NEGATIVE_INFINITY
350	x * x == 1.0
351	x * x < 1.0
352	x < 0
353	y <= -TWO_POWER_53
353	y >= TWO_POWER_53
354	y == (long) y
355	y < 8e298
355	y > -8e298
356	Double.isInfinite(lores)
357	e == 0
358	e < 0
359	(e & 0x1) != 0
360	xb != 0.0
361	cotanFlag
362	xb != 0.0
363	cotanFlag
364	shift != 0
365	bitsum
365	bitb
365	bita
365	bitb
365	bita
366	bitb
366	bita
366	bita
366	bitsum
366	bitb
367	bita
367	bitb
367	bitsum
367	bitb
367	bita
368	bitb
368	bitb
368	bita
368	bita
368	bitsum
369	bita
369	bitb
369	bitb
369	bita
369	bitsum
370	bita
370	bita
370	bitsum
370	bitb
370	bitb
371	bitb
371	bitb
371	bita
371	bitsum
371	bita
372	x < 0
373	xa == 0.0
374	bits < 0
375	xa == Double.POSITIVE_INFINITY
375	xa != xa
376	xa > 3294198.0
377	xa > 1.5707963267948966
378	negative
379	x < 0
380	xa != xa
380	xa == Double.POSITIVE_INFINITY
381	xa > 3294198.0
382	xa > 1.5707963267948966
383	x < 0
384	xa == 0.0
385	bits < 0
386	xa != xa
386	xa == Double.POSITIVE_INFINITY
387	xa > 3294198.0
388	xa > 1.5707963267948966
389	xa > 1.5
390	(quadrant & 1) == 0
391	negative
392	xa == 0.0
393	xa < 0
394	xa > 1.633123935319537E16
395	xa < 1
396	idx == 0
397	leftPlane
398	negate ^ leftPlane
399	x != x
399	y != y
400	y == 0
401	invx == 0
402	x > 0
403	invx < 0
403	x < 0
404	invy < 0
404	y < 0
405	y == Double.POSITIVE_INFINITY
406	x == Double.POSITIVE_INFINITY
407	x == Double.NEGATIVE_INFINITY
408	y == Double.NEGATIVE_INFINITY
409	x == Double.POSITIVE_INFINITY
410	x == Double.NEGATIVE_INFINITY
411	x == Double.POSITIVE_INFINITY
412	y > 0
412	1 / y > 0
413	1 / y < 0
413	y < 0
414	x == Double.NEGATIVE_INFINITY
415	1 / y > 0.0
415	y > 0.0
416	1 / y < 0
416	y < 0
417	x == 0
418	1 / y > 0
418	y > 0
419	1 / y < 0
419	y < 0
420	Double.isInfinite(r)
421	ra == 0
422	x != x
423	x < -1.0
423	x > 1.0
424	x == 1.0
425	x == -1.0
426	x == 0.0
427	x != x
428	x < -1.0
428	x > 1.0
429	x == -1.0
430	x == 1.0
431	x == 0
432	Double.isInfinite(r)
433	exponent == -1023
434	x == 0
435	exponent == 1024
436	subnormal
437	x == 0.0
437	Double.isInfinite(x)
438	result == 0
439	Double.isInfinite(x)
439	x == 0.0
440	Double.isInfinite(x)
441	Float.isInfinite(x)
442	n > -1023
442	n < 1024
443	Double.isNaN(d)
443	Double.isInfinite(d)
443	d == 0
444	n < -2098
445	n > 2097
446	n < 0
447	scaledExponent > 0
448	scaledExponent > -53
449	mostSignificantLostBit != 0
450	exponent == 0
451	scaledExponent < 2047
452	scaledExponent < 2047
453	n > -127
453	n < 128
454	Float.isNaN(f)
454	Float.isInfinite(f)
454	f == 0f
455	n < -277
456	n > 276
457	n < 0
458	scaledExponent > 0
459	scaledExponent > -24
460	mostSignificantLostBit != 0
461	exponent == 0
462	scaledExponent < 255
463	scaledExponent < 255
464	Double.isNaN(direction)
464	Double.isNaN(d)
465	d == direction
466	Double.isInfinite(d)
467	d == 0
468	(direction < d) ^ (sign == 0L)
469	Double.isNaN(direction)
469	Double.isNaN(f)
470	f == direction
471	Float.isInfinite(f)
472	f == 0f
473	(direction < f) ^ (sign == 0)
474	x != x
475	x >= TWO_POWER_52
475	x <= -TWO_POWER_52
476	x < 0
476	y != x
477	y == 0
478	x != x
479	y == x
480	y == 0
481	d > 0.5
482	y == -1.0
483	d < 0.5
484	a > b
485	a < b
486	a != b
487	bits == 0x80000000
488	a > b
489	a < b
490	a != b
491	bits == 0x8000000000000000L
492	a > b
493	a < b
494	a != b
495	bits == 0x80000000
496	a > b
497	a < b
498	a != b
499	bits == 0x8000000000000000L
500	Double.isInfinite(x)
500	Double.isInfinite(y)
501	Double.isNaN(x)
501	Double.isNaN(y)
502	expX > expY + 27
503	expY > expX + 27
504	(m^s) >= 0
505	(m^s) >= 0
172	(i & 1) == 0
173	(i & 1) != 0
174	(i & 2) != 0
175	result != null
176	(i & 1) == 0
177	(i & 2) != 0
178	result != null
179	result != null
180	d < 8e298
180	d > -8e298
181	c < 8e298
181	c > -8e298
182	in[0] == 0.0
183	result[1] != result[1]
184	(p & 1) != 0
185	result != null
186	d != d
187	expectedLen != actual
3327	normalization == DstNormalization.ORTHOGONAL_DST_I
3328	type == TransformType.FORWARD
3329	ArithmeticUtils.isPowerOfTwo(f.length)
3330	f[0] != 0.0
3331	n == 1
3947	i > 1
3948	x.equals(abscissae.get(n - (j + 1)))
3949	abscissae.isEmpty()
3950	abscissae.isEmpty()
3951	j > 0
1619	matrix.isSquare()
1620	lu[nonZero][col].equals(field.getZero())
1621	nonZero >= m
1622	nonZero != col
1623	cachedL == null
1623	singular
1624	singular
1624	cachedU == null
1625	singular
1625	cachedP == null
1626	singular
668	needsNormalization
669	norm.getReal() == 0
670	m.length != 3
670	m[1].length != 3
670	m[0].length != 3
670	m[2].length != 3
671	det.getReal() < 0.0
672	normProduct.getReal() == 0
673	dot.getReal() < ((2.0e-15 - 1.0) * normProduct.getReal())
674	s.getReal() > -0.19
675	s.getReal() > -0.19
676	s.getReal() > -0.19
677	squaredSine.getReal() == 0
678	q0.getReal() < 0
679	q0.getReal() < -0.1
679	q0.getReal() > 0.1
680	q0.getReal() < 0
681	order == RotationOrder.XYZ
682	v2.getZ().getReal() > 0.9999999999
682	v2.getZ().getReal() < -0.9999999999
683	order == RotationOrder.XZY
684	v2.getY().getReal() > 0.9999999999
684	v2.getY().getReal() < -0.9999999999
685	order == RotationOrder.YXZ
686	v2.getZ().getReal() < -0.9999999999
686	v2.getZ().getReal() > 0.9999999999
687	order == RotationOrder.YZX
688	v2.getX().getReal() > 0.9999999999
688	v2.getX().getReal() < -0.9999999999
689	order == RotationOrder.ZXY
690	v2.getY().getReal() > 0.9999999999
690	v2.getY().getReal() < -0.9999999999
691	order == RotationOrder.ZYX
692	v2.getX().getReal() > 0.9999999999
692	v2.getX().getReal() < -0.9999999999
693	order == RotationOrder.XYX
694	v2.getX().getReal() < -0.9999999999
694	v2.getX().getReal() > 0.9999999999
695	order == RotationOrder.XZX
696	v2.getX().getReal() < -0.9999999999
696	v2.getX().getReal() > 0.9999999999
697	order == RotationOrder.YXY
698	v2.getY().getReal() > 0.9999999999
698	v2.getY().getReal() < -0.9999999999
699	order == RotationOrder.YZY
700	v2.getY().getReal() < -0.9999999999
700	v2.getY().getReal() > 0.9999999999
701	order == RotationOrder.ZXZ
702	v2.getZ().getReal() < -0.9999999999
702	v2.getZ().getReal() > 0.9999999999
703	v2.getZ().getReal() < -0.9999999999
703	v2.getZ().getReal() > 0.9999999999
704	FastMath.abs(fn1 - fn) <= threshold
777	v.length != 3
778	xAbs.getReal() <= yAbs.getReal()
779	yAbs.getReal() <= zAbs.getReal()
780	xAbs.getReal() <= zAbs.getReal()
781	s.getReal() == 0
782	threshold == 0
783	FastMath.abs(x.getReal()) <= threshold
784	FastMath.abs(y.getReal()) <= threshold
785	normProduct.getReal() == 0
786	dot.getReal() < -threshold
786	dot.getReal() > threshold
787	dot.getReal() >= 0
788	normProduct.getReal() == 0
789	dot.getReal() > threshold
789	dot.getReal() < -threshold
790	dot.getReal() >= 0
791	this == other
792	other instanceof FieldVector3D
793	rhs.isNaN()
794	isNaN()
795	dx.getReal() <= dy.getReal()
796	dy.getReal() <= dz.getReal()
797	dx.getReal() <= dz.getReal()
798	dx.getReal() <= dy.getReal()
799	dy.getReal() <= dz.getReal()
800	dx.getReal() <= dz.getReal()
4163	nbPoints <= 1
4164	stepSize <= 0
4165	2 * halfSampleSpan >= tUpper - tLower
4166	i == 0
2301	n == 0
3246	maxTime < 0
3247	endTime < 0
3232	maxGenerations <= 0
3233	this.numGenerations < this.maxGenerations
2279	n < 1
1028	FastMath.abs(a0) > overflow
1029	FastMath.abs(a0 - value) < epsilon
1030	FastMath.abs(q2) > overflow
1030	FastMath.abs(p2) > overflow
1031	q2 < maxDenominator
1031	FastMath.abs(convergent - value) > epsilon
1031	n < maxIterations
1032	n >= maxIterations
1033	q2 < maxDenominator
1034	den == 0
1035	den < 0
1036	num == Integer.MIN_VALUE
1036	den == Integer.MIN_VALUE
1037	d > 1
1038	den < 0
1039	numerator >= 0
1040	this == other
1041	other instanceof Fraction
1042	numerator==Integer.MIN_VALUE
1043	fraction == null
1044	numerator == 0
1045	fraction.numerator == 0
1046	d1==1
1047	w.bitLength() > 31
1048	fraction == null
1049	numerator == 0
1049	fraction.numerator == 0
1050	fraction == null
1051	fraction.numerator == 0
1052	denominator == 0
1053	numerator==0
1054	denominator==Integer.MIN_VALUE
1054	(numerator&1)==0
1055	denominator < 0
1056	numerator==Integer.MIN_VALUE
1056	denominator==Integer.MIN_VALUE
1057	denominator == 1
1058	numerator == 0
1012	obj instanceof Fraction
1013	obj instanceof Number
1014	parsePosition.getIndex() == 0
1015	num == null
1016	den == null
2497	v instanceof Integer
2498	count == null
2499	v instanceof Integer
2500	count != null
2501	sumFreq == 0
2502	getSumFreq() == 0
2503	v instanceof Integer
2504	c == null
2505	value != null
2506	c.compare(v, freqTable.firstKey()) < 0
2507	c.compare(v, freqTable.lastKey()) >= 0
2508	c.compare(v, nextValue) > 0
2509	sumFreq == 0
2510	this == obj
2511	obj instanceof Frequency
2512	freqTable == null
2513	other.freqTable != null
2514	freqTable.equals(other.freqTable)
4098	n <= 0
4099	min >= max
2519	OmegaInverse == null
2426	expected.length < 2
2427	expected.length != observed.length
2428	Math.abs(sumExpected - sumObserved) > 10E-6
2429	alpha <= 0
2429	alpha > 0.5
2430	k[i][j] != 0
2431	k[i] != 0
2432	observed1.length < 2
2433	observed1.length != observed2.length
2434	observed2[i] == 0
2434	observed1[i] == 0
2435	countSum1 == 0
2435	countSum2 == 0
2436	(double) k11 / (k11 + k12) < (double) k21 / (k21 + k22)
2437	alpha > 0.5
2437	alpha <= 0
3284	Double.isNaN(x)
3284	x <= 0.0
3285	x < 0.5
3286	x <= 2.5
3287	x <= 8.0
3288	a <= 0.0
3288	x < 0.0
3288	Double.isNaN(a)
3288	Double.isNaN(x)
3289	x == 0.0
3290	x >= a + 1
3291	n >= maxIterations
3292	Double.isInfinite(sum)
3293	Double.isNaN(x)
3293	x < 0.0
3293	Double.isNaN(a)
3293	a <= 0.0
3294	x == 0.0
3295	x < a + 1.0
3296	x > 0
3296	x <= S_LIMIT
3297	x >= C_LIMIT
3298	x > 0
3298	x <= S_LIMIT
3299	x >= C_LIMIT
3300	x < -0.5
3301	x > 1.5
3302	t < 0.0
3303	x > 0.5
3304	x > 0.5
3305	x < -0.5
3306	x > 1.5
3307	x <= 0.0
3307	x == FastMath.rint(x)
3308	absX <= 20.0
3309	x >= 1.0
3310	x > 0.0
1248	shape <= 0
1249	scale <= 0
1250	x < 0
1251	y <= minY
1251	FastMath.log(y) >= maxLogY
1252	x <= 0
1253	shape < 1
1254	p <= 1
1255	u2 > FastMath.exp(-x)
1256	u2 > FastMath.pow(x, shape - 1)
1257	v <= 0
1258	u < 1 - 0.0331 * x2 * x2
1259	FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))
4229	points.length != weights.length
3109	checker == null
3110	previous != null
3111	converged
3112	getLowerBound() != null
3112	getUpperBound() != null
1959	checker == null
1960	previous != null
1961	converged
3981	sigma <= 0
3982	coeff <= Precision.SAFE_MIN
3983	k > 2
3984	k == 2
3985	(n & 0x1) == 1
3227	crossoverRate < 0
3227	crossoverRate > 1
3228	mutationRate < 0
3228	mutationRate > 1
3229	randGen.nextDouble() < getCrossoverRate()
3230	randGen.nextDouble() < getMutationRate()
3231	nextGeneration.getPopulationSize() < nextGeneration.getPopulationLimit()
2299	sumOfLogs.getN() > 0
2300	getN() > 0
3433	theta <= 0.5
3433	previousState != null
3047	data instanceof ObjectiveFunctionGradient
3374	stepsizeReductionFactor > 0.9999
3374	stepsizeReductionFactor < 0.0001
3375	control1 < 0.0001
3375	control1 > 0.9999
3376	control2 > 0.9999
3376	control2 < 0.0001
3377	control3 < 0.0001
3377	control3 > 0.9999
3378	control4 < 1.0001
3378	control4 > 999.9
3379	maximalOrder % 2 != 0
3379	maximalOrder <= 6
3380	control1 > 0.9999
3380	control1 < 0.0001
3381	control2 < 0.0001
3381	control2 > 0.9999
3382	sequence == null
3382	sequence.length != size
3383	mudifControlParameter >= 7
3383	mudifControlParameter <= 0
3384	vecAbsoluteTolerance == null
3385	2 * j == n
3386	k < maxIter
3386	j <= maxChecks
3386	performTest
3387	deltaNorm > 4 * FastMath.max(1.0e-15, initialNorm)
3388	y != y0
3389	newStep
3390	firstStepAlreadyComputed
3391	firstTime
3392	stepStart + stepSize > t
3392	stepStart + stepSize < t
3392	forward
3392	forward
3393	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3394	k > 0
3395	k > 1
3395	error > maxError
3395	error > 1.0e15
3396	previousRejected
3396	targetIter > 1
3397	error <= 1.0
3398	error > ratio * ratio
3399	targetIter > 1
3399	costPerTimeUnit[targetIter-1] < orderControl1 * costPerTimeUnit[targetIter]
3400	error <= 1.0
3401	error > ratio * ratio
3402	costPerTimeUnit[targetIter-1] < orderControl1 * costPerTimeUnit[targetIter]
3402	targetIter > 1
3403	error > 1.0
3404	costPerTimeUnit[targetIter-1] < orderControl1 * costPerTimeUnit[targetIter]
3404	targetIter > 1
3405	firstTime
3405	error <= 1.0
3405	isLastStep
3406	reject
3407	reject
3408	mu >= 0
3409	useInterpolationError
3410	interpError > 10.0
3411	reject
3412	k == 1
3413	previousRejected
3414	k <= targetIter
3415	costPerTimeUnit[k-1] < orderControl1 * costPerTimeUnit[k]
3416	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[k-1]
3417	k > 2
3417	costPerTimeUnit[k-2] < orderControl1 * costPerTimeUnit[k-1]
3418	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[optimalIter]
3419	previousRejected
3420	optimalIter <= k
3421	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[k-1]
3421	k < targetIter
3422	forward
3423	reject
3449	interpolator.polynomials == null
3450	maxDegree < 0
3451	polynomials != null
3452	maxDegree <= 4
3453	polynomials == null
3453	polynomials.length <= (mu + 4)
3454	mu < 0
3455	mu > 0
3456	mu > 1
3457	mu > 2
3458	currentDegree >= 5
3459	currentDegree > 3
3460	h == 0
3986	f.length > 1
3907	i > 1
3908	Double.isInfinite(inv)
3909	abscissae.isEmpty()
1390	matrix.isSquare()
1391	cachedP == null
1392	householderVectors[m][m - 1] != 0.0
1393	cachedPt == null
1394	cachedH == null
1395	i > 0
1396	Precision.equals(scale, 0)
3480	theta <= 0.5
3480	previousState != null
1130	populationSize <= 0
1131	numberOfSuccesses < 0
1132	sampleSize < 0
1133	numberOfSuccesses > populationSize
1134	sampleSize > populationSize
1135	x < domain[0]
1136	x >= domain[1]
1137	x < domain[0]
1137	x > domain[1]
1138	x <= domain[0]
1139	x > domain[1]
1140	numericalVarianceIsCalculated
3116	seed == null
3117	seedLen < rslLen
3118	count < 0
188	cb == null
189	++count > maximalCount
803	point > upper + tolerance
803	point < lower - tolerance
804	point > lower + tolerance
804	point < upper - tolerance
810	lower < 0
810	Double.isInfinite(lower)
811	Double.isInfinite(upper)
811	upper > 0
812	Double.isInfinite(upper)
812	upper > 0
813	getTree(false).getCut() == null
814	Double.isInfinite(size)
815	size >= Precision.SAFE_MIN
816	node.getCut() == null
817	(Boolean) node.getAttribute()
818	checkPoint(low, loc) == Location.INSIDE
818	checkPoint(high, loc) == Location.INSIDE
4238	n <= 0
4239	iterations.getCount() + 1 >= getMinimalIterationCount()
4239	delta <= limit
1353	a.getRowDimension() != a.getColumnDimension()
1354	b.getDimension() != a.getRowDimension()
1355	x0.getDimension() != a.getColumnDimension()
1322	a.getRowDimension() != n
1323	a instanceof AbstractRealMatrix
3508	parameters == null
3509	expandable.getPrimary() != ode
3510	parameter.equals(param.getParameterName())
3511	efode != null
3512	pName.equals(param.getParameterName())
3513	efode != null
3514	param.getParameterName().equals(pName)
3515	arrayDimension != expected
3113	data instanceof ModelFunctionJacobian
2448	cluster.getPoints().isEmpty()
2449	varianceSum <= bestVarianceSum
2450	points.size() < k
2451	cluster.getPoints().isEmpty()
2452	emptyCluster
2452	changes == 0
2453	clusterIndex != assignments[pointIndex]
2454	i != firstPointIndex
2455	taken[i]
2456	taken[i]
2457	sum >= r
2458	nextPointIndex == -1
2459	taken[i]
2460	nextPointIndex >= 0
2461	resultSet.size() < k
2462	taken[j]
2463	d2 < minDistSquared[j]
2464	cluster.getPoints().isEmpty()
2465	variance > maxVariance
2466	selected == null
2467	number > maxNumber
2468	selected == null
2469	distance > maxDistance
2470	selectedCluster == null
2471	distance < minDistance
0	processModel.getControlMatrix() == null
1	processModel.getInitialStateEstimate() == null
2	transitionMatrix.getColumnDimension() != stateEstimation.getDimension()
3	processModel.getInitialErrorCovariance() == null
4	transitionMatrix.isSquare()
5	controlMatrix.getRowDimension() > 0
5	controlMatrix.getColumnDimension() != 1
5	controlMatrix != null
5	controlMatrix.getColumnDimension() > 0
5	controlMatrix.getRowDimension() != transitionMatrix.getRowDimension()
6	measurementMatrix.getColumnDimension() != transitionMatrix.getRowDimension()
7	measNoise.getRowDimension() != measurementMatrix.getRowDimension()
7	measNoise.getColumnDimension() != 1
8	u != null
8	u.getDimension() != controlMatrix.getColumnDimension()
9	u != null
10	z.getDimension() != measurementMatrix.getRowDimension()
1260	n <= 0
1261	d <= ninvhalf
1262	d <= ninv
1262	ninvhalf < d
1263	1 - ninv <= d
1263	d < 1
1264	1 <= d
1265	hDouble >= 1
1266	i - j + 1 < 0
1267	h.compareTo(BigFraction.ONE_HALF) == 1
1268	i - j + 1 > 0
2294	incMoment
2295	moment.getN() > 3
2296	variance < 10E-20
2296	moment.n <= 3
2297	incMoment
2298	test(values, begin, length)
2298	length > 3
1295	matrix.isSquare()
1296	FastMath.abs(sum) > largest
1297	FastMath.abs(lu[max][col]) < singularityThreshold
1298	max != col
1299	singular
1299	cachedL == null
1300	singular
1300	cachedU == null
1301	singular
1301	cachedP == null
1302	singular
4077	FastMath.abs(yInitial) <= functionValueAccuracy
4078	FastMath.abs(yMin) <= functionValueAccuracy
4079	yInitial * yMin < 0
4080	FastMath.abs(yMax) <= functionValueAccuracy
4081	yInitial * yMax < 0
4082	complexSolver.isRoot(lo, hi, z)
4083	complexSolver.isRoot(lo, hi, root[i])
2797	observations.length != weights.length
2798	observations.length != scale.getColumnDimension()
2799	residuals.length != observations.length
2800	weights != null
2801	scale != null
1908	observations.length != weights.length
1909	observations.length != scale.getColumnDimension()
1910	residuals.length != observations.length
1911	weights != null
1912	scale != null
4247	iterations.getCount() + 1 >= getMinimalIterationCount()
4247	delta <= limit
4225	numberOfPoints == 1
4226	done
4227	pa.signum() * pc.signum() <= 0
4228	numberOfPoints % 2 != 0
4230	numberOfPoints == 1
4231	done
4232	pa * pc <= 0
4233	numberOfPoints % 2 != 0
3071	firstIteration
3072	dk == 0
3073	currentCost != 0
3074	s != 0
3075	maxCosine <= orthoTolerance
3076	firstIteration
3077	0.1 * currentCost < previousCost
3078	ratio <= 0.25
3079	0.1 * currentCost >= previousCost
3079	tmp < 0.1
3080	ratio >= 0.75
3080	lmPar == 0
3081	ratio >= 1.0e-4
3082	checker != null
3083	checker.converged(getIterations(), previous, current)
3084	preRed <= costRelativeTolerance
3084	ratio <= 2.0
3084	FastMath.abs(actRed) <= costRelativeTolerance
3084	delta <= parRelativeTolerance * xNorm
3085	FastMath.abs(actRed) <= 2.2204e-16
3085	preRed <= 2.2204e-16
3085	ratio <= 2.0
3086	delta <= 2.2204e-16 * xNorm
3087	maxCosine <= 2.2204e-16
3088	fp <= 0.1 * delta
3089	rank == solvedCols
3090	paru == 0
3091	lmPar == 0
3092	lmPar == 0
3093	fp <= previousFP
3093	parl == 0
3093	previousFP < 0
3093	FastMath.abs(fp) <= 0.1 * delta
3094	fp > 0
3095	fp < 0
3096	dpj != 0
3097	lmDiag[k] != 0
3098	FastMath.abs(rkk) < FastMath.abs(lmDiag[k])
3099	lmDiag[j] == 0
3099	nSing == solvedCols
3100	nSing < solvedCols
3101	nSing > 0
3102	Double.isInfinite(norm2)
3102	Double.isNaN(norm2)
3103	norm2 > ak2
3104	ak2 <= qrRankingThreshold
3105	getUpperBound() != null
3105	getLowerBound() != null
1913	firstIteration
1914	dk == 0
1915	currentCost != 0
1916	s != 0
1917	maxCosine <= orthoTolerance
1918	firstIteration
1919	0.1 * currentCost < previousCost
1920	ratio <= 0.25
1921	0.1 * currentCost >= previousCost
1921	tmp < 0.1
1922	ratio >= 0.75
1922	lmPar == 0
1923	ratio >= 1.0e-4
1924	checker != null
1925	checker.converged(iter, previous, current)
1926	preRed <= costRelativeTolerance
1926	delta <= parRelativeTolerance * xNorm
1926	FastMath.abs(actRed) <= costRelativeTolerance
1926	ratio <= 2.0
1927	ratio <= 2.0
1927	preRed <= 2.2204e-16
1927	FastMath.abs(actRed) <= 2.2204e-16
1928	delta <= 2.2204e-16 * xNorm
1929	maxCosine <= 2.2204e-16
1930	fp <= 0.1 * delta
1931	rank == solvedCols
1932	paru == 0
1933	lmPar == 0
1934	lmPar == 0
1935	FastMath.abs(fp) <= 0.1 * delta
1935	parl == 0
1935	fp <= previousFP
1935	previousFP < 0
1936	fp > 0
1937	fp < 0
1938	dpj != 0
1939	lmDiag[k] != 0
1940	FastMath.abs(rkk) < FastMath.abs(lmDiag[k])
1941	nSing == solvedCols
1941	lmDiag[j] == 0
1942	nSing < solvedCols
1943	nSing > 0
1944	Double.isNaN(norm2)
1944	Double.isInfinite(norm2)
1945	norm2 > ak2
1946	ak2 <= qrRankingThreshold
1203	x < mu
1204	x < mu
1205	p < 0.0
1205	p > 1.0
709	norm2 == 0.0
710	n < Precision.SAFE_MIN
711	n < Precision.EPSILON
821	d == 0.0
822	angle < FastMath.PI
823	FastMath.abs(d) < 1.0e-10
2724	this == other
2725	other instanceof LinearConstraint
1857	this == other
1858	other instanceof LinearConstraint
3872	x.length != y.length
3873	x.length < 2
2741	this == other
2742	other instanceof LinearObjectiveFunction
1875	this == other
1876	other instanceof LinearObjectiveFunction
2743	data instanceof LinearObjectiveFunction
2744	data instanceof LinearConstraintSet
2745	data instanceof NonNegativeConstraint
3217	chromosomes == null
3218	populationLimit <= 0
3219	chromosomes.size() > populationLimit
3220	chromosomes == null
3221	chromosomes.size() > populationLimit
3222	chromosomes.size() + chromosomeColl.size() > populationLimit
3223	chromosomes.size() >= populationLimit
3224	chromosome.compareTo(bestChromosome) > 0
3225	populationLimit <= 0
3226	populationLimit < chromosomes.size()
3956	bandwidth < 0
3956	bandwidth > 1
3957	robustnessIters < 0
3958	xval.length != yval.length
3959	n == 0
3960	n == 1
3961	n == 2
3962	bandwidthInPoints < 2
3963	i > 0
3964	xval[i] - xval[ileft] > xval[iright] - xval[i]
3965	FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < accuracy
3966	iter == robustnessIters
3967	FastMath.abs(medianResidual) < accuracy
3968	arg >= 1
3969	xval.length != yval.length
3970	xval[nextRight] - xval[i] < xval[i] - xval[left]
3970	nextRight < xval.length
3971	absX >= 1.0
1282	shape <= 0
1283	x <= 0
1284	x <= 0
1285	FastMath.abs(dev) > 40 * shape
1286	x0 > x1
1287	x1 <= 0
1287	x0 <= 0
3992	n <= 0
3977	x > hi
3977	x < lo
3978	x < lo
3978	x > hi
3979	Double.isInfinite(f[0])
3980	f.length > 1
2400	x == null
2400	y == null
2401	x.length == 0
2401	y.length == 0
113	a.length != b.length
114	a.length != b.length
115	a.length != b.length
116	a.length != b.length
117	strict
118	comp >= 0
119	comp > 0
120	strict
121	comp >= 0
122	comp > 0
123	strict
124	val[index] <= previous
125	val[index] < previous
126	strict
127	val[index] >= previous
128	val[index] > previous
129	index == max
130	abort
131	in[i].length != in[0].length
132	in[i] <= 0
133	in[i] < 0
134	in[i][j] < 0
135	xabs < rdwarf
135	xabs > agiant
136	xabs > rdwarf
137	xabs > x1max
138	xabs > x3max
139	xabs != 0
140	s1 != 0
141	s2 == 0
142	s2 >= x3max
143	x == null
144	y == null
145	y.length != len
146	len != b.length
147	Double.isNaN(result)
148	Double.isNaN(result)
149	Double.isNaN(result)
150	Double.isNaN(result)
151	x == null
151	y == null
152	x.length != y.length
153	Precision.equals(x[i], y[i])
154	y == null
154	x == null
155	x.length != y.length
156	Precision.equalsIncludingNaN(x[i], y[i])
157	x == null
157	y == null
158	x.length != y.length
159	Precision.equals(x[i], y[i])
160	y == null
160	x == null
161	x.length != y.length
162	Precision.equalsIncludingNaN(x[i], y[i])
163	Double.isInfinite(normalizedSum)
164	Double.isNaN(normalizedSum)
165	Double.isInfinite(values[i])
166	Double.isNaN(values[i])
167	sum == 0
168	Double.isNaN(values[i])
169	columns < 0
514	sign < 0
514	magnitude >= 0
514	sign >= 0
514	magnitude < 0
515	sign >= 0
515	magnitude == Byte.MIN_VALUE
516	sign < 0
516	sign >= 0
516	magnitude >= 0
516	magnitude < 0
517	magnitude == Short.MIN_VALUE
517	sign >= 0
518	sign >= 0
518	magnitude >= 0
518	sign < 0
518	magnitude < 0
519	sign >= 0
519	magnitude == Integer.MIN_VALUE
520	magnitude >= 0
520	sign >= 0
520	sign < 0
520	magnitude < 0
521	magnitude == Long.MIN_VALUE
521	sign >= 0
522	Double.isInfinite(x)
522	Double.isNaN(x)
523	Double.isInfinite(x)
523	Double.isNaN(x)
524	o == null
525	o == null
1578	data[0] == null
1578	data == null
1579	data == null
1579	data[0] == null
1580	data == null
1581	data == null
1582	data.length == 0
1583	rowData == null
1584	rowData == null
1585	nCols == 0
1586	columnData == null
1587	columnData == null
1588	nRows == 0
1589	rows != matrix.getColumnDimension()
1590	raiseException
1591	FastMath.abs(mij - mji) > FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * relativeTolerance
1592	raiseException
1593	row < 0
1593	row >= m.getRowDimension()
1594	column < 0
1594	column >= m.getColumnDimension()
1595	endRow < startRow
1596	endColumn < startColumn
1597	selectedRows == null
1598	selectedColumns == null
1599	selectedRows.length == 0
1600	selectedColumns.length == 0
1601	left.getColumnDimension() != right.getColumnDimension()
1601	left.getRowDimension() != right.getRowDimension()
1602	left.getRowDimension() != right.getRowDimension()
1602	left.getColumnDimension() != right.getColumnDimension()
1603	left.getColumnDimension() != right.getRowDimension()
1604	rm == null
1604	rm.getRowDimension() != b.getDimension()
1604	b == null
1605	rm.getColumnDimension() != rm.getRowDimension()
1606	FastMath.abs(diag) < Precision.SAFE_MIN
1607	rm == null
1607	b == null
1607	rm.getRowDimension() != b.getDimension()
1608	rm.getColumnDimension() != rm.getRowDimension()
1609	FastMath.abs(diag) < Precision.SAFE_MIN
1610	m.getColumnDimension() != n
2344	d > value
2344	Double.isNaN(value)
2345	test(values, begin, length)
2346	Double.isNaN(values[i])
2777	max <= 0
2778	max <= 0
2275	incMoment
2276	incMoment
2277	test(values, begin, length)
2278	test(values, weights, begin, length)
3151	seed == null
3152	i >= N
3153	j >= seed.length
3154	i >= N
3155	mti >= N
3910	yval == null
3910	xval == null
3911	xval.length == 0
3912	xval.length != yval.length
3913	xval[0] == null
3914	xvalI == null
3915	xvalI.length != dimension
3916	FastMath.abs(diffNorm) < FastMath.ulp(1d)
3917	sd != null
3944	exponent < 0
3945	elements <= 0
3461	theta <= 0.5
3461	previousState != null
2520	numberOfVariables < 1
2521	includeConstant
2522	errorTolerance > 0
2523	this.hasIntercept
2523	x.length != nvars
2523	this.hasIntercept
2523	x.length + 1 != nvars
2524	this.hasIntercept
2525	x == null
2525	x.length != y.length
2525	y == null
2526	x.length == 0
2527	x[0].length + 1 > x.length
2528	w == 0.0
2529	xi == 0.0
2530	di != 0.0
2531	FastMath.abs(tmp) > Precision.EPSILON
2532	di != 0.0
2533	di != 0.0
2534	_a > _b
2535	_b > eps
2536	_a > eps
2537	nreq < 1
2538	nreq > this.nvars
2539	this.tol_set
2540	Math.sqrt(d[i]) < tol[i]
2541	rankProblem
2542	this.lindep[i]
2543	Math.abs(r[pos]) * work_sing[row] < temp
2544	work_sing[col] < temp
2545	col < nvars - 1
2546	this.nobs <= nreq
2547	this.lindep[i]
2548	this.lindep[row]
2549	this.lindep[col]
2550	row == col
2551	this.lindep[k]
2552	this.lindep[row]
2553	this.lindep[k]
2554	in >= nvars
2554	in < -1
2555	d[in] > 0.0
2556	sumxx > 0.0
2557	sumyy > 0.0
2558	from == to
2559	this.rss_set
2560	from < to
2561	d2 > this.epsilon
2561	d1 > this.epsilon
2562	Math.abs(X) * Math.sqrt(d1) < tol[mp1]
2563	d1 < this.epsilon
2563	Math.abs(X) < this.epsilon
2564	d2 < this.epsilon
2565	bSkipTo40
2566	m > 0
2567	list.length < 1
2567	list.length > nvars + 1 - pos1
2568	i > next
2568	l == list[j]
2569	next >= list.length + pos1
2570	row_data.length > nvars
2571	this.hasIntercept
2572	Math.sqrt(d[col]) < tol[col]
2573	this.nobs <= numberOfRegressors
2574	numberOfRegressors > this.nvars
2575	this.lindep[i]
2576	this.vorder[i] != i
2577	needsReorder
2578	this.vorder[j] == i
2579	_i > _j
2580	variablesToInclude.length > this.nvars
2581	this.nobs <= this.nvars
2582	i >= this.nvars
2583	i > 0
2583	variablesToInclude[i] == variablesToInclude[i - 1]
2584	iExclude > 0
2585	variablesToInclude[i] > -1
2586	this.lindep[i]
2587	this.vorder[i] != series[i]
2588	needsReorder
2589	this.vorder[j] == series[i]
2590	_i > _j
2341	d < value
2341	Double.isNaN(value)
2342	test(values, begin, length)
2343	Double.isNaN(values[i])
1235	comp.getSecond().getDimension() != dim
1236	comp.getFirst() < 0
1237	Double.isInfinite(weightSum)
1238	randomValue <= sum
1239	vals == null
4063	FastMath.abs(fMin) < functionValueAccuracy
4064	FastMath.abs(fMax) < functionValueAccuracy
4065	FastMath.abs(fInitial) < functionValueAccuracy
4066	isBracketing(min, initial)
4067	FastMath.abs(x - oldx) <= tolerance
4067	FastMath.abs(y) <= functionValueAccuracy
4068	bisect
4069	FastMath.signum(y0) + FastMath.signum(ym) == 0.0
4057	FastMath.abs(y0) < functionValueAccuracy
4058	FastMath.abs(y1) < functionValueAccuracy
4059	y0 * y1 > 0
4060	delta >= 0.0
4061	denominator != 0
4062	FastMath.abs(y) <= functionValueAccuracy
4062	FastMath.abs(x - oldx) <= tolerance
2816	comparator.compare(reflected, best) < 0
2817	comparator.compare(reflected, expanded) <= 0
1985	comparator.compare(reflected, best) < 0
1986	comparator.compare(reflected, expanded) <= 0
2717	starts < 1
2718	optima == null
2719	optimData[i] instanceof MaxEval
2720	optimData[i] instanceof SearchInterval
2721	maxEvalIndex == -1
2722	searchIntervalIndex == -1
2723	optima[0] == null
109	tS <= 0
110	index < 0
110	index >= totalSize
111	c.length != dimension
112	index >= size[i]
112	index < 0
3537	nSteps < 2
3054	lower.length != upper.length
3055	upper[i] >= lower[i]
3056	Double.isInfinite(lower[i])
3057	Double.isInfinite(upper[i])
3058	Double.isInfinite(upper[i])
2230	lower.length != upper.length
2231	upper[i] >= lower[i]
2232	Double.isInfinite(lower[i])
2233	Double.isInfinite(upper[i])
2234	Double.isInfinite(upper[i])
3048	lower.length != upper.length
3049	lower.length != scale.length
3050	upper[i] >= lower[i]
3051	point[i] < lower[i]
3051	point[i] > upper[i]
3052	point[j] < lower[j]
3053	point[j] > upper[j]
2224	lower.length != upper.length
2225	lower.length != scale.length
2226	upper[i] >= lower[i]
2227	point[i] < lower[i]
2227	point[i] > upper[i]
2228	point[j] < lower[j]
2229	point[j] > upper[j]
1100	covariances.length != dim
1101	dim != covariances[i].length
1102	covMatEigenvalues[i] < 0
1103	vals.length != dim
1181	data.length < 1
1182	data[i].length != data[0].length
1183	data[i].length < 2
1184	maxIterations < 1
1185	threshold < Double.MIN_VALUE
1186	numMeanColumns != numCols
1187	Math.abs(previousLogLikelihood - logLikelihood) > threshold
1188	data.length < 2
1189	numComponents < 2
1190	numComponents > data.length
3045	data instanceof GoalType
3046	data instanceof ObjectiveFunction
2236	getN() < 1
2237	getN() < 2
2238	i > 0
2239	object == this
2240	object instanceof MultivariateSummaryStatistics == false
2241	n > 0
2242	dimension != k
3067	data instanceof ModelFunction
3068	data instanceof Target
3069	data instanceof Weight
3070	target.length != weightMatrix.getColumnDimension()
3200	crossoverPoints <= 0
3201	first instanceof AbstractListChromosome<?>
3201	second instanceof AbstractListChromosome<?>
3202	length != second.getLength()
3203	crossoverPoints >= length
2486	nanPositions.size() > 0
2487	Double.compare(ranks[i].getValue(), ranks[i - 1].getValue()) > 0
2488	tiesTrace.size() > 1
2489	tiesTrace.size() > 1
2490	nanStrategy == NaNStrategy.FIXED
2491	containsNaNs(ranks)
2492	Double.isNaN(ranks[i].getValue())
2493	Double.isNaN(ranks[i].getValue())
2494	Double.isNaN(ranks[i].getValue())
2495	nanPositions.size() == 0
2496	Double.isNaN(ranks[i].getValue())
3034	comparator.compare(best, reflected) <= 0
3034	comparator.compare(reflected, secondBest) < 0
3035	comparator.compare(reflected, best) < 0
3036	comparator.compare(expanded, reflected) < 0
3037	comparator.compare(reflected, worst) < 0
3038	comparator.compare(outContracted, reflected) <= 0
3039	comparator.compare(inContracted, worst) < 0
2203	comparator.compare(reflected, secondBest) < 0
2203	comparator.compare(best, reflected) <= 0
2204	comparator.compare(reflected, best) < 0
2205	comparator.compare(expanded, reflected) < 0
2206	comparator.compare(reflected, worst) < 0
2207	comparator.compare(outContracted, reflected) <= 0
2208	comparator.compare(inContracted, worst) < 0
858	loop[0] == null
859	Double.isInfinite(polygon.getSize())
860	child.polygon.contains(node.polygon)
861	node.polygon.contains(child.polygon)
862	factory.intersection(node.polygon, child.polygon).isEmpty()
863	originalIsClockwise ^ clockwise
4028	FastMath.abs(x1 - x0) <= absoluteAccuracy
4029	FastMath.abs(x1 - x0) <= absoluteAccuracy
3059	goal == GoalType.MINIMIZE
3060	previous != null
3061	checker.converged(getIterations(), previous, current)
3062	goal == GoalType.MINIMIZE
3063	getIterations() % n == 0
3063	beta < 0
3064	data instanceof BracketingStep
3065	yA * yB <= 0
3066	getLowerBound() != null
3066	getUpperBound() != null
1951	initialStep <= 0
1952	goal == GoalType.MINIMIZE
1953	previous != null
1954	checker.converged(iter, previous, current)
1955	goal == GoalType.MINIMIZE
1956	updateFormula == ConjugateGradientFormula.FLETCHER_REEVES
1957	iter % n == 0
1957	beta < 0
1958	yA * yB <= 0
3359	interpolator.scaled != null
3360	interpolator.nordsieck != null
3361	interpolator.stateVariation != null
3362	scaled == null
3363	nordsieck == null
3364	hasScaled
3365	hasNordsieck
3366	hasScaled
3366	hasNordsieck
1113	sd <= 0
1114	FastMath.abs(dev) > 40 * standardDeviation
1115	p < 0.0
1115	p > 1.0
1116	x0 > x1
2591	i < p
2591	i == j
2592	isNoIntercept()
2593	isNoIntercept()
3249	first instanceof AbstractListChromosome<?>
3249	second instanceof AbstractListChromosome<?>
3250	length != second.getLength()
2402	alpha <= 0
2402	alpha > 0.5
2403	allowOneElementData
2404	categoryData.size() < 2
2405	array.getN() <= 1
238	expectedSize == 0
239	powerOfTwo == capacity
240	containsKey(key, index)
241	states[index] == FREE
242	containsKey(key, index)
243	containsKey(key, index)
244	states[index] == FREE
245	containsKey(key, index)
246	states[index] == FREE
247	keys[index] == key
247	states[index] == FULL
248	states[index] == FULL
249	keys[index] == key
249	states[index] != FULL
250	states[index] == FREE
251	states[index] == FULL
252	states[index] == FREE
253	keys[index] == key
253	states[index] == FULL
254	containsKey(key, index)
255	states[index] == FREE
256	containsKey(key, index)
257	index < 0
258	newMapping
259	shouldGrowTable()
260	oldStates[i] == FULL
529	expectedSize == 0
530	powerOfTwo == capacity
531	containsKey(key, index)
532	states[index] == FREE
533	containsKey(key, index)
534	containsKey(key, index)
535	states[index] == FREE
536	containsKey(key, index)
537	states[index] == FREE
538	states[index] == FULL
538	keys[index] == key
539	states[index] == FULL
540	states[index] != FULL
540	keys[index] == key
541	states[index] == FREE
542	states[index] == FULL
543	states[index] == FREE
544	states[index] == FULL
544	keys[index] == key
545	containsKey(key, index)
546	states[index] == FREE
547	containsKey(key, index)
548	index < 0
549	newMapping
550	shouldGrowTable()
551	oldStates[i] == FULL
1795	lRow * lCol >= Integer.MAX_VALUE
1796	m.entries.containsKey(rightKey)
1797	outValue == 0.0
1798	value == 0.0
1799	value == 0.0
1800	value == 0.0
1729	isDefaultValue(value)
1730	isDefaultValue(value)
1731	isDefaultValue(value)
1732	v instanceof OpenMapRealVector
1733	randomAccess.containsKey(key)
1734	v instanceof OpenMapRealVector
1735	v.isNaN()
1735	v.isInfinite()
1736	Double.isNaN(y)
1737	Double.isInfinite(y)
1738	n < 0
1739	key >= index
1739	key < end
1740	entries.containsKey(key)
1741	v instanceof OpenMapRealVector
1742	entries.containsKey(key)
1743	v instanceof OpenMapRealVector
1744	delta > max
1745	entries.containsKey(key)
1746	iter.value() > max
1747	v instanceof OpenMapRealVector
1748	Double.isNaN(value)
1749	Double.isInfinite(value)
1750	Double.isNaN(iter.value())
1751	isDefaultValue(value)
1752	entries.containsKey(index)
1753	entries.containsKey(key)
1754	v instanceof OpenMapRealVector
1755	isDefaultValue(norm)
1756	this == obj
1757	obj instanceof OpenMapRealVector
1758	virtualSize != other.virtualSize
1759	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits(other.epsilon)
1760	Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value())
1761	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key()))
3251	second instanceof AbstractListChromosome<?>
3251	first instanceof AbstractListChromosome<?>
3252	length != second.getLength()
3253	child1Set.contains(item2)
3254	child2Set.contains(item1)
567	Double.isInfinite(components[i])
568	components[i] < 0
569	Double.isNaN(components[i])
570	m != 0
571	negInf
571	posInf
572	lsb <= msb
573	encoding.length == 1
573	encoding != null
573	encoding[0] == 0x0L
574	getBit(vIndex, k) != 0
575	shift-- == 0
576	components.length == ot.components.length
577	nan
578	ot.nan
579	ot.posInf
579	negInf
580	posInf
580	ot.negInf
581	offset < ot.offset
582	offset > ot.offset
583	encoding[i] < ot.encoding[i]
584	encoding[i] > ot.encoding[i]
585	encoding.length < ot.encoding.length
586	encoding.length > ot.encoding.length
587	this == other
588	other instanceof OrderedTuple
589	(ll & mask) != ll
590	(ll & mask) == ll
591	k > offset
591	k < e
592	k == offset
593	k > (e + 52)
764	pointIsBetween(rawLoop, end, j)
765	end != rawLoop.length
170	this == o
171	o instanceof Pair
3343	pode.isSupported(name)
3344	pode.isSupported(paramName)
3489	isSupported(name)
1162	r <= 0
1163	p < 0
1163	p > 1
1164	x < 0
1165	x < 0
2476	covarianceMatrix == null
2477	i == j
2478	xArray.length != yArray.length
2479	xArray.length < 2
2480	nRows < 2
2480	nCols < 2
2347	values == null
2348	values == null
2349	p <= 0
2349	p > 100
2350	length == 0
2351	length == 1
2352	values == getDataRef()
2353	pos < 1
2354	pos >= n
2355	pivotsHeap[node] >= 0
2355	node < pivotsHeap.length
2356	node < pivotsHeap.length
2357	k == pivot
2358	k < pivot
2359	wBegin < wMiddle
2360	wMiddle < wEnd
2361	wBegin < wEnd
2362	i < j
2363	i >= end
2363	work[i] > value
2364	p > 100
2364	p <= 0
2365	source.cachedPivots != null
705	norm < 1.0e-10
706	FastMath.abs(dot) < 1.0e-10
707	direction.getNorm() < 1.0e-10
708	FastMath.abs(determinant) < 1.0e-10
1217	p <= 0
1218	x < 0
1218	x == Integer.MAX_VALUE
1219	x == 0
1220	x < 0
1221	x == Integer.MAX_VALUE
1222	meanPoisson < pivot
1223	r >= p
1224	u <= p1
1225	x < -lambda
1225	x > delta
1226	u > p1 + p2
1227	v < -t
1227	a == 0
1228	v < qa
1229	v > qr
1230	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1080	1 == n
1081	SmallPrimes.millerRabinPrimeTest(n)
1082	0 == divisor
1083	0 == q
1084	1 != out
1085	a == 0
1086	b == 0
828	n == 0
829	line == null
830	vertex != end
830	FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness
830	vertex != start
831	inserted.getNode() == null
832	node.insertCut(inserted.getLine())
833	inserted == null
834	node == parent.getMinus()
834	parent == null
835	edge != inserted
836	endSide == Side.MINUS
837	endSide == Side.PLUS
838	endSide == Side.PLUS
839	endSide == Side.MINUS
840	plusList.isEmpty()
841	minusList.isEmpty()
842	v.length == 0
843	(Boolean) tree.getAttribute()
843	tree.getCut() == null
844	v[0][0] == null
845	sum < 0
846	vertices == null
847	getTree(false).getCut() == null
848	loop != null
849	loop.size() < 2
850	loop.get(0).getStart() == null
851	j == 0
852	j < (array.length - 1)
853	j == (array.length - 1)
854	distance < selectedDistance
855	selectedDistance > 1.0e-10
856	open
856	loop.size() == 2
857	open
857	end == null
766	getSize() < 0
767	cut == null
768	offset < 0
769	in
770	facet != null
771	crossed != null
772	in
773	hit3D != null
774	facet != null
775	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
775	attribute.getPlusOutside() != null
776	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
776	attribute.getPlusInside() != null
4197	n == 0
4198	n == 0
4199	n == 0
4200	coefficients.length < p.coefficients.length
4201	n == 0
4202	n == 1
4203	coefficients[0] == 0.0
4204	coefficients.length == 1
4205	coefficients[i] != 0
4206	s.length() > 0
4207	coefficients[i] < 0
4208	coefficients[i] < 0
4209	(absAi - 1) != 0
4210	i > 1
4211	c.endsWith(".0")
4212	this == obj
4213	obj instanceof PolynomialFunction
4214	Arrays.equals(coefficients, other.coefficients)
4189	verifyInterpolationArray(x, y, false)
4190	coefficientsComputed
4191	verifyInterpolationArray(x, y, false)
4192	dist < min_dist
4193	nearest < 0.5*(n-i+1)
4194	i != j
4195	x.length != y.length
4196	x.length < 2
4217	coefficientsComputed
4218	c.length == 0
4218	a.length == 0
4219	a.length != c.length + 1
4180	knots == null
4180	polynomials == null
4181	knots.length < 2
4182	knots.length - 1 != polynomials.length
4183	v > knots[n]
4183	v < knots[0]
4184	i < 0
4185	i >= polynomials.length
4186	t0 < knots[0]
4186	t0 > knots[n]
4187	i < 0
4188	i >= polynomials.length
4215	JACOBI_COEFFICIENTS.containsKey(key)
4216	degree > maxDegree
3024	rel < MIN_RELATIVE_TOLERANCE
3025	abs <= 0
3026	(fX2 - fVal) > delta
3027	stop
3028	checker != null
3029	stop
3030	goal == GoalType.MINIMIZE
3031	fX > fX2
3032	t < 0.0
3033	getUpperBound() != null
3033	getLowerBound() != null
2194	rel < MIN_RELATIVE_TOLERANCE
2195	abs <= 0
2196	(fX2 - fVal) > delta
2197	stop
2198	checker != null
2199	stop
2200	goal == GoalType.MINIMIZE
2201	fX > fX2
2202	t < 0.0
220	equals(x, y, eps)
221	x < y
222	equals(x, y, maxUlps)
223	x < y
224	xInt < 0
225	yInt < 0
226	equals(x, y, 1)
227	xInt < 0
228	yInt < 0
229	Double.isInfinite(x)
230	sign == -1
231	sign == -1
232	fraction > 0.5
233	fraction > 0.5
234	fraction < 0.5
235	FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math .floor(unscaled) / 2.0)
236	fraction >= 0.5
237	unscaled != FastMath.floor(unscaled)
1473	m != null
1474	m.getColumnDimension() != m.getRowDimension()
1475	m.getRowDimension() != a.getRowDimension()
1059	n < 2
1060	0 == (n % p)
1061	n < 0
1062	n == 2
1063	n == 1
1064	isPrime(n)
1065	0 == rem
1066	1 == rem
1067	isPrime(n)
1068	isPrime(n)
1069	n < 2
2253	test(values, begin, length, true)
2254	test(values, weights, begin, length, true)
1017	BigInteger.ZERO.equals(whole)
1018	num.compareTo(BigInteger.ZERO) < 0
1019	ret != null
1020	whole == null
1021	num == null
1022	num.compareTo(BigInteger.ZERO) < 0
1023	den == null
1024	den.compareTo(BigInteger.ZERO) < 0
1025	wholeIsNeg
1026	wholeIsNeg
1027	format == null
1000	whole != 0
1001	ret != null
1002	whole == null
1003	num == null
1004	num.intValue() < 0
1005	den == null
1006	den.intValue() < 0
1007	format == null
1495	a != 0.0
1496	cachedR == null
1497	cachedQ == null
1498	cachedQT == null
1499	qrtMinor[minor] != 0.0
1500	cachedH == null
949	v.length != 3
950	norm < Precision.SAFE_MIN
951	this == other
952	other instanceof Quaternion
953	getQ0() < 0
954	squareNorm < Precision.SAFE_MIN
1324	l2NormSquared > l2NormSquaredMax
1325	l2NormSquaredMaxIndex != minor
1326	cachedP == null
1327	thisNorm == 0
1327	(thisNorm / lastNorm) * rNorm < dropThreshold
3148	randomGenerator != null
3149	randomGenerator != null
3150	randomGenerator != null
3160	len <= 0
3161	hex.length() == 1
3162	lower >= upper
3163	max <= 0
3164	r >= lower
3164	r <= upper
3165	lower >= upper
3166	max <= 0
3167	r <= upper
3167	r >= lower
3168	max < Integer.MAX_VALUE
3169	n > 0
3170	len <= 0
3171	hex.length() == 1
3172	lower >= upper
3173	max <= 0
3174	r >= lower
3174	r <= upper
3175	lower >= upper
3176	max <= 0
3177	r <= upper
3177	r >= lower
3178	max < Integer.MAX_VALUE
3179	n > 0
3180	sigma <= 0
3181	lower >= upper
3182	Double.isInfinite(lower)
3183	Double.isInfinite(upper)
3184	Double.isNaN(lower)
3184	Double.isNaN(upper)
3185	k > n
3186	k <= 0
3187	k > len
3188	k <= 0
3189	rand == null
3190	secRand == null
3191	i == 0
3238	representation.size() != l
3239	sortedRepr.size() != l
3240	another instanceof RandomKey<?>
3241	getLength() != anotherRk.getLength()
3242	thisPerm.get(i) != anotherPerm.get(i)
3243	val < 0
3243	val > 1
3244	originalData.size() != permutedData.size()
3245	index == -1
3213	original instanceof RandomKey<?>
1328	j > 0
1329	i < rows - 1
1330	parsePosition.getIndex() == 0
1331	CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)
1332	rowComponents.isEmpty()
1333	CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, pos)
1334	trimmedRowSuffix.length() != 0
1334	CompositeFormat.parseFixedstring(source, trimmedRowSuffix, pos)
1335	CompositeFormat.parseFixedstring(source, trimmedRowSeparator, pos)
1336	trimmedRowPrefix.length() != 0
1336	CompositeFormat.parseFixedstring(source, trimmedRowPrefix, pos)
1337	loop
1338	component != null
1339	rowComponents.isEmpty()
1340	rowComponents.isEmpty()
1341	CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)
1342	matrix.isEmpty()
1769	d != n
1770	index >= getDimension()
1770	index < 0
1771	start >= dim
1771	start < 0
1772	end < 0
1772	end >= dim
1773	end < start
1774	d != 0
1775	vNorm == 0
1775	norm == 0
1776	entry.getValue() <= minValue
1777	entry.getValue() >= maxValue
1778	this instanceof SparseRealVector
1778	v instanceof SparseRealVector
1779	norm2 == 0.0
1780	norm == 0
1781	norm == 0
1611	i > 0
1612	parsePosition.getIndex() == 0
1613	CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)
1614	components.isEmpty()
1615	CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)
1616	loop
1617	component != null
1618	CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)
1675	c[ii][ii] > c[isr][isr]
1676	swapR != r
1677	c[ir][ir] <= small
1678	r == 0
1679	c[index[i]][index[i]] < -small
652	hyperplanes.length == 0
652	hyperplanes == null
653	node.insertCut(hyperplane)
654	node.getCut() == null
655	attribute != null
2610	copyData
2611	rank > 0
2612	containsConstant
2613	parameters == null
2614	index < 0
2614	index >= this.parameters.length
2615	this.parameters == null
2616	parameters == null
2617	index < 0
2617	index >= this.parameters.length
2618	Double.isNaN(var)
2618	var > Double.MIN_VALUE
2619	parameters == null
2620	Double.isNaN(var)
2620	var > Double.MIN_VALUE
2621	parameters == null
2622	i < 0
2622	i >= this.parameters.length
2623	j >= this.parameters.length
2623	j < 0
2624	this.parameters == null
2625	this.isSymmetricVCD
2626	this.varCovData.length > 1
2627	i == j
2628	i >= varCovData[j].length
2629	i > j
190	initialCapacity <= 0
191	data != null
192	internalArray.length <= startIndex + numElements
193	(startIndex + (numElements + 1)) > internalArray.length
194	shouldContract()
195	numElements < 1
196	contraction < expansion
197	contraction <= 1
198	expansion <= 1
199	i > numElements
200	i < 0
201	front
202	shouldContract()
203	expansionMode == ExpansionMode.MULTIPLICATIVE
204	index >= numElements
205	index >= 0
206	index < 0
207	index + 1 > numElements
208	(startIndex + index) >= internalArray.length
209	expansionMode != ADDITIVE_MODE
209	expansionMode != MULTIPLICATIVE_MODE
210	expansionMode == MULTIPLICATIVE_MODE
211	expansionMode == ADDITIVE_MODE
212	i < 0
213	newSize > internalArray.length
214	expansionMode == ExpansionMode.MULTIPLICATIVE
215	object == this
216	object instanceof ResizableDoubleArray == false
217	result
4049	y1 == 0
4050	y2 == 0
4051	FastMath.abs(y3) <= functionValueAccuracy
4052	FastMath.abs(x - oldx) <= tolerance
4053	FastMath.abs(y) <= functionValueAccuracy
4054	correction > 0.0
4055	FastMath.signum(y1) + FastMath.signum(y) == 0.0
4056	FastMath.signum(y2) + FastMath.signum(y) == 0.0
4248	maximalIterationCount > ROMBERG_MAX_ITERATIONS_COUNT
4249	maximalIterationCount > ROMBERG_MAX_ITERATIONS_COUNT
4250	i >= getMinimalIterationCount()
4251	delta <= rLimit
4251	delta <= getAbsoluteAccuracy()
871	omegaCount == 0
872	n == 0
873	absN == omegaCount
874	omegaCount == 0
875	k >= omegaCount
875	k < 0
876	omegaCount == 0
877	k >= omegaCount
877	k < 0
712	needsNormalization
713	norm == 0
714	m.length != 3
714	m[1].length != 3
714	m[2].length != 3
714	m[0].length != 3
715	det < 0.0
716	normProduct == 0
717	dot < ((2.0e-15 - 1.0) * normProduct)
718	s > -0.19
719	s > -0.19
720	s > -0.19
721	squaredSine == 0
722	q0 < 0
723	q0 > 0.1
723	q0 < -0.1
724	q0 < 0
725	order == RotationOrder.XYZ
726	v2.getZ() < -0.9999999999
726	v2.getZ() > 0.9999999999
727	order == RotationOrder.XZY
728	v2.getY() < -0.9999999999
728	v2.getY() > 0.9999999999
729	order == RotationOrder.YXZ
730	v2.getZ() > 0.9999999999
730	v2.getZ() < -0.9999999999
731	order == RotationOrder.YZX
732	v2.getX() > 0.9999999999
732	v2.getX() < -0.9999999999
733	order == RotationOrder.ZXY
734	v2.getY() > 0.9999999999
734	v2.getY() < -0.9999999999
735	order == RotationOrder.ZYX
736	v2.getX() > 0.9999999999
736	v2.getX() < -0.9999999999
737	order == RotationOrder.XYX
738	v2.getX() > 0.9999999999
738	v2.getX() < -0.9999999999
739	order == RotationOrder.XZX
740	v2.getX() < -0.9999999999
740	v2.getX() > 0.9999999999
741	order == RotationOrder.YXY
742	v2.getY() > 0.9999999999
742	v2.getY() < -0.9999999999
743	order == RotationOrder.YZY
744	v2.getY() > 0.9999999999
744	v2.getY() < -0.9999999999
745	order == RotationOrder.ZXZ
746	v2.getZ() > 0.9999999999
746	v2.getZ() < -0.9999999999
747	v2.getZ() < -0.9999999999
747	v2.getZ() > 0.9999999999
748	FastMath.abs(fn1 - fn) <= threshold
3477	isLastStep
3478	nextIsLast
3367	interpolator.currentState != null
3368	n < 0
3369	currentState != null
1241	z < 15.0
1242	FastMath.floor(z2) == z2
1243	FastMath.abs(x - mu) < 0.1 * (x + mu)
1244	x == 0
1245	p < 0.1
1246	x == n
1247	q < 0.1
1627	matrix.isSquare()
1628	cachedP == null
1629	cachedPt == null
1630	cachedT == null
1631	il == iu
1632	il == iu - 1
1633	q >= 0
1634	p >= 0
1635	++iteration > MAX_ITERATIONS
1636	s == 0.0
1637	FastMath.abs(matrixT[l][l - 1]) < epsilon * s
1638	l < idx
1639	iteration == 10
1640	iteration == 30
1641	s > 0.0
1642	shift.y < shift.x
1643	im == il
1644	lhs < epsilon * rhs
1645	k != im
1646	Precision.equals(shift.x, 0.0, epsilon)
1647	shift.x == 0.0
1648	p < 0.0
1649	s != 0.0
1650	k != im
1651	il != im
1652	notlast
1653	notlast
1654	notlast
1655	i > im + 2
2690	lo >= hi
2691	init < lo
2691	init > hi
4070	f0 == 0.0
4071	f1 == 0.0
4072	fx == 0.0
4073	FastMath.abs(f1) <= ftol
4074	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)
2293	n < 1
827	r < 0
827	r > 1
2303	values.length == 0
2304	values.length == 1
2305	(values[i] > cutoff) == booleanDirection
2306	corrected
3993	Double.isInfinite(exp)
3994	k > 1
2769	maxIter <= 0
2770	maxIterationCount != ITERATION_CHECK_DISABLED
2771	iteration >= maxIterationCount
2772	difference > getAbsoluteThreshold()
2772	difference > size * getRelativeThreshold()
1900	maxIter <= 0
1901	maxIterationCount != ITERATION_CHECK_DISABLED
1902	iteration >= maxIterationCount
1903	difference > getAbsoluteThreshold()
1903	difference > size * getRelativeThreshold()
2630	n == 0
2631	hasIntercept
2632	hasIntercept
2633	n > 0
2634	hasIntercept
2635	data[i].length < 2
2636	x.length == 0
2636	x == null
2637	x.length != y.length
2637	x == null
2637	y == null
2638	x[i].length == 0
2638	x[i] == null
2639	obsOk
2640	hasIntercept
2641	n < 2
2642	FastMath.abs(sumXX) < 10 * Double.MIN_VALUE
2643	n < 2
2644	n < 2
2645	n < 3
2646	b1 < 0
2647	hasIntercept
2648	n < 3
2649	alpha <= 0
2649	alpha >= 1
2650	n < 3
2651	hasIntercept
2652	hasIntercept
2653	n < 3
2654	FastMath.abs( sumXX ) > Precision.SAFE_MIN
2655	n < 2
2656	Double.isNaN(sumXX)
2657	variablesToInclude.length == 0
2657	variablesToInclude == null
2658	variablesToInclude.length > 2
2658	hasIntercept
2658	variablesToInclude.length > 1
2659	hasIntercept
2660	variablesToInclude.length == 2
2661	variablesToInclude[0] == 1
2662	variablesToInclude[0] != 0
2663	variablesToInclude[1] != 1
2664	variablesToInclude[0] != 0
2664	variablesToInclude[0] != 1
2665	variablesToInclude[0] == 0
2666	variablesToInclude[0] == 1
2667	Double.isNaN(_sxx)
2668	variablesToInclude[0] != 0
2687	maxIter <= 0
2688	maxIterationCount != ITERATION_CHECK_DISABLED
2689	iteration >= maxIterationCount
1824	maxIter <= 0
1825	maxIterationCount != ITERATION_CHECK_DISABLED
1826	iteration >= maxIterationCount
2671	maxIter <= 0
2672	maxIterationCount != ITERATION_CHECK_DISABLED
2673	iteration >= maxIterationCount
1805	maxIter <= 0
1806	maxIterationCount != ITERATION_CHECK_DISABLED
1807	iteration >= maxIterationCount
2773	maxIter <= 0
2774	maxIterationCount != ITERATION_CHECK_DISABLED
2775	iteration >= maxIterationCount
2776	difference > getAbsoluteThreshold()
2776	difference > size * getRelativeThreshold()
1904	maxIter <= 0
1905	maxIterationCount != ITERATION_CHECK_DISABLED
1906	iteration >= maxIterationCount
1907	difference > getAbsoluteThreshold()
1907	difference > size * getRelativeThreshold()
3040	getIterations() > 0
3041	converged
3042	data instanceof AbstractSimplex
3043	simplex == null
3044	getLowerBound() != null
3044	getUpperBound() != null
2220	data instanceof AbstractSimplex
2221	simplex == null
2222	iteration > 0
2223	converged
2726	entry < minValue
2727	Precision.compareTo(entry, 0d, maxUlps) > 0
2728	cmp == 0
2729	cmp < 0
2730	minRatioPositions.size() == 0
2731	minRatioPositions.size() > 1
2732	tableau.getNumArtificialVariables() > 0
2733	row.equals(tableau.getBasicRow(column))
2733	Precision.equals(entry, 1d, maxUlps)
2734	getEvaluations() < getMaxEvaluations() / 2
2735	basicRow.equals(row)
2735	basicRow != null
2736	i < minIndex
2737	pivotRow == null
2738	i != pivotRow
2739	tableau.getNumArtificialVariables() == 0
2740	Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)
1859	entry < minValue
1860	Precision.compareTo(entry, 0d, maxUlps) > 0
1861	cmp == 0
1862	cmp < 0
1863	minRatioPositions.size() == 0
1864	minRatioPositions.size() > 1
1865	tableau.getNumArtificialVariables() > 0
1866	row.equals(tableau.getBasicRow(column))
1866	Precision.equals(entry, 1d, maxUlps)
1867	getIterations() < getMaxIterations() / 2
1868	basicRow.equals(row)
1868	basicRow != null
1869	i < minIndex
1870	pivotRow == null
1871	i != pivotRow
1872	tableau.getNumArtificialVariables() == 0
1873	Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)
2746	getNumObjectiveFunctions() == 2
2747	restrictToNonNegative
2748	getNumObjectiveFunctions() == 2
2749	restrictToNonNegative
2750	restrictToNonNegative
2751	constraint.getRelationship() == Relationship.LEQ
2752	constraint.getRelationship() == Relationship.GEQ
2753	constraint.getRelationship() == Relationship.EQ
2753	constraint.getRelationship() == Relationship.GEQ
2754	constraint.getValue() < 0
2755	constraint.getRelationship() == relationship
2756	Precision.equals(entry, 1d, maxUlps)
2756	row == null
2757	Precision.equals(entry, 0d, maxUlps)
2758	getNumObjectiveFunctions() == 1
2759	Precision.compareTo(entry, 0d, epsilon) > 0
2760	getBasicRow(col) == null
2761	columnsToDrop.contains(j)
2762	Precision.compareTo(entry, 0d, epsilon) < 0
2763	colIndex < 0
2764	basicRow == 0
2764	basicRow != null
2765	basicRows.contains(basicRow)
2766	FastMath.abs(result) < cutOff
2767	this == other
2768	other instanceof SimplexTableau
1877	getNumObjectiveFunctions() == 2
1878	restrictToNonNegative
1879	getNumObjectiveFunctions() == 2
1880	restrictToNonNegative
1881	restrictToNonNegative
1882	constraint.getRelationship() == Relationship.LEQ
1883	constraint.getRelationship() == Relationship.GEQ
1884	constraint.getRelationship() == Relationship.EQ
1884	constraint.getRelationship() == Relationship.GEQ
1885	constraint.getValue() < 0
1886	constraint.getRelationship() == relationship
1887	row == null
1887	Precision.equals(entry, 1d, maxUlps)
1888	Precision.equals(entry, 0d, maxUlps)
1889	getNumObjectiveFunctions() == 1
1890	Precision.compareTo(entry, 0d, epsilon) > 0
1891	getBasicRow(col) == null
1892	columnsToDrop.contains(j)
1893	Precision.compareTo(entry, 0d, epsilon) < 0
1894	colIndex < 0
1895	basicRow == 0
1895	basicRow != null
1896	basicRows.contains(basicRow)
1897	FastMath.abs(result) < CUTOFF_THRESHOLD
1898	this == other
1899	other instanceof SimplexTableau
4220	maximalIterationCount > SIMPSON_MAX_ITERATIONS_COUNT
4221	maximalIterationCount > SIMPSON_MAX_ITERATIONS_COUNT
4222	getMinimalIterationCount() == 1
4223	iterations.getCount() >= getMinimalIterationCount()
4224	delta <= rLimit
4224	delta <= getAbsoluteAccuracy()
3987	FastMath.abs(scaledX) <= SHORTCUT
3988	FastMath.abs(scaledX) <= SHORTCUT
3989	(i & 0x1) == 0
3990	(n & 0x1) == 0
3991	normalized
1693	matrix.getRowDimension() < matrix.getColumnDimension()
1694	k < nct
1695	singularValues[k] != 0
1696	A[k][k] < 0
1697	k < nct
1697	singularValues[k] != 0
1698	k < nct
1699	k < nrt
1700	e[k] != 0
1701	e[k + 1] < 0
1702	e[k] != 0
1702	k + 1 < m
1703	nct < n
1704	m < p
1705	nrt + 1 < p
1706	singularValues[k] != 0
1707	e[k] != 0
1707	k < nrt
1708	FastMath.abs(e[k]) > threshold
1709	k == p - 2
1710	ks == k
1711	FastMath.abs(singularValues[ks]) <= TINY + EPS * t
1712	ks == k
1713	ks == p - 1
1714	j != k
1715	c != 0
1715	b != 0
1716	b < 0
1717	j != k
1718	j < m - 1
1719	singularValues[k] <= 0
1720	singularValues[k] >= singularValues[k + 1]
1721	k < n - 1
1722	k < m - 1
1723	transposed
1724	cachedUt == null
1725	cachedS == null
1726	cachedVt == null
1727	dimension == 0
1728	singularValues[i] > tol
2280	incMoment
2281	moment.n < 3
2282	variance < 10E-20
2283	incMoment
2284	test(values, begin, length)
2284	length > 2
1070	0 == n % f
1071	0 == n % f
1072	n != 1
1073	1 == n
1074	n >= 2047
1075	n >= 1373653
1076	n >= 25326001
1077	1 != y
1077	y != nMinus1
1078	1 == y
1079	nMinus1 != y
3972	xDegree < 0
3973	yDegree < 0
3974	fval.length == 0
3974	xval.length == 0
3974	yval.length == 0
3975	xval.length != fval.length
3976	fval[i].length != yLen
1397	getField().getZero().equals(value)
1398	getField().getZero().equals(value)
1399	getField().getZero().equals(value)
1476	entries.containsKey(key)
1477	v instanceof SparseFieldVector<?>
1478	n < 0
1479	key < end
1479	key >= index
1480	v instanceof SparseFieldVector<?>
1481	entries.containsKey(key)
1482	v instanceof SparseFieldVector<?>
1483	entries.containsKey(i)
1484	index < 0
1484	index >= getDimension()
1485	getDimension() != n
1486	v instanceof SparseFieldVector<?>
1487	this == obj
1488	obj instanceof SparseFieldVector<?>
1489	field == null
1490	other.field != null
1491	field.equals(other.field)
1492	virtualSize != other.virtualSize
1493	test.equals(iter.value())
1494	test.equals(getEntry(iter.key()))
2484	xArray.length != yArray.length
2485	xArray.length < 2
749	jacobian == null
750	rHessian == null
3870	x.length != y.length
3871	x.length < 3
3139	generator == null
3140	alpha > 0d
3140	alpha <= 2d
3141	beta >= -1d
3141	beta <= 1d
3142	alpha < 2d
3142	beta != 0d
3143	alpha == 2d
3144	beta == 0d
3145	alpha == 1d
3146	FastMath.abs(alpha - 1d) > 1e-8
3147	alpha != 1d
2515	n != sample2.length
2516	n <= 0
2517	n != sample2.length
2518	n < 2
2382	object == this
2383	object instanceof StatisticalSummaryValues == false
3995	x == null
3995	y == null
3996	y.length == 0
3996	x.length == 0
3997	y.length != x.length
3998	index < -1
3999	index >= 0
3353	lastState == null
3354	forward
3355	Precision.equals(nextTime, lastTime, 1)
3355	mode == StepNormalizerMode.MULTIPLES
3356	isLast
3357	addLast
3358	bounds.firstIncluded()
3358	firstTime == lastTime
2474	n < 2
2475	biasCorrected
2473	length != dimension
751	includeEndPoints
824	includeEndPoints
825	crossing == null
826	crossing == null
662	inter == null
663	crossP.dotProduct(otherPlane.getNormal()) < 0
664	inter == null
665	crossP.dotProduct(otherPlane.getNormal()) < 0
2250	test(values, begin, length, true)
2251	test(values, weights, begin, length, true)
2252	test(values, begin, length, true)
2249	test(values, begin, length, true)
2320	meanImpl != mean
2321	varianceImpl != variance
2322	geoMeanImpl != geoMean
2323	getN() > 0
2324	getN() > 1
2325	meanImpl != mean
2326	varianceImpl != variance
2327	object == this
2328	object instanceof SummaryStatistics == false
2329	n > 0
2330	source.getVarianceImpl() instanceof Variance
2331	source.meanImpl instanceof Mean
2332	source.getGeoMeanImpl() instanceof GeometricMean
2333	source.geoMean == source.geoMeanImpl
2334	source.max == source.maxImpl
2335	source.mean == source.meanImpl
2336	source.min == source.minImpl
2337	source.sum == source.sumImpl
2338	source.variance == source.varianceImpl
2339	source.sumLog == source.sumLogImpl
2340	source.sumsq == source.sumsqImpl
1351	state.bEqualsNullVector()
1352	earlyStop
1156	degreesOfFreedom <= 0
1157	x == 0
1158	x < 0.0
1159	df > 1
1160	df > 2
1161	df <= 2
1161	df > 1
2406	alpha <= 0
2406	alpha > 0.5
2407	data == null
2408	data.length < 2
2409	stat == null
2410	stat.getN() < 2
2302	n < 1
3462	previousState != null
3462	theta <= 0.5
3208	population.getPopulationSize() < this.arity
3321	dataRI.length != 2
3322	dataR.length != dataI.length
3323	index < 0
102	o instanceof String
102	o instanceof Number
103	trans != null
104	this == other
105	other instanceof TransformerMap
106	defaultTransformer.equals(rhs.defaultTransformer)
107	map.size() != rhs.map.size()
108	entry.getValue().equals(rhs.map.get(entry.getKey()))
4240	maximalIterationCount > TRAPEZOID_MAX_ITERATIONS_COUNT
4241	maximalIterationCount > TRAPEZOID_MAX_ITERATIONS_COUNT
4242	n == 0
4243	i >= getMinimalIterationCount()
4244	delta <= rLimit
4244	delta <= getAbsoluteAccuracy()
1343	matrix.isSquare()
1344	cachedQ == null
1345	cachedQt == null
1346	hK[k] != 0.0
1347	cachedT == null
1348	i > 0
1349	i < main.length - 1
1350	a != 0.0
1166	a >= b
1167	c < a
1168	c > b
1169	x < a
1170	a <= x
1170	x < c
1171	x == c
1172	x <= b
1172	c < x
1173	x < a
1174	a <= x
1174	x < c
1175	x == c
1176	c < x
1176	x <= b
1177	p < 0
1177	p > 1
1178	p == 0
1179	p == 1
1180	p < (c - a) / (b - a)
3874	z.length == 0
3874	yLen == 0
3874	f[0].length == 0
3874	f.length == 0
3874	xLen == 0
3875	xLen != f.length
3876	xLen != dFdX.length
3877	xLen != dFdY.length
3878	xLen != dFdZ.length
3879	xLen != d2FdXdY.length
3880	xLen != d2FdXdZ.length
3881	xLen != d2FdYdZ.length
3882	xLen != d3FdXdYdZ.length
3883	f[i].length != yLen
3884	dFdX[i].length != yLen
3885	dFdY[i].length != yLen
3886	dFdZ[i].length != yLen
3887	d2FdXdY[i].length != yLen
3888	d2FdXdZ[i].length != yLen
3889	d2FdYdZ[i].length != yLen
3890	d3FdXdYdZ[i].length != yLen
3891	f[i][j].length != zLen
3892	dFdX[i][j].length != zLen
3893	dFdY[i][j].length != zLen
3894	dFdZ[i][j].length != zLen
3895	d2FdXdY[i][j].length != zLen
3896	d2FdXdZ[i][j].length != zLen
3897	d2FdYdZ[i][j].length != zLen
3898	d3FdXdYdZ[i][j].length != zLen
3899	i == -1
3900	j == -1
3901	k == -1
3902	c < val[0]
3903	c <= val[i]
3904	x < 0
3904	x > 1
3905	y > 1
3905	y < 0
3906	z < 0
3906	z > 1
3952	yval.length == 0
3952	zval.length == 0
3952	xval.length == 0
3952	fval.length == 0
3953	xval.length != fval.length
3954	fval[i].length != yLen
3955	fval[i][j].length != zLen
3192	mean.length != standardDeviation.length
3209	ratio > 1.0d
3209	ratio < 0.0d
3210	first instanceof AbstractListChromosome<?>
3210	second instanceof AbstractListChromosome<?>
3211	length != second.getLength()
3212	random.nextDouble() < ratio
1191	lower >= upper
1192	x < lower
1192	x > upper
1193	x < lower
1194	x > upper
1195	lower >= upper
1196	x < lower
1196	x > upper
1197	x <= lower
1198	x >= upper
1852	optimizer == null
1852	generator == null
1853	starts < 1
1854	optima == null
1855	optima[0] == null
2674	data instanceof SearchInterval
2675	data instanceof UnivariateObjectiveFunction
2676	data instanceof GoalType
3946	xval.length < extend
4011	function == null
4012	function == null
4013	allowedSolution == AllowedSolution.ANY_SIDE
4014	fLo <= 0
4014	fHi <= 0
4014	fHi >= 0
4014	fLo >= 0
4015	fLo < fHi
4016	fLo >= 0
4017	fLo > fHi
4018	fLo <= 0
4019	changeLo
4020	changeHi
4021	function == null
4022	maximumIterations <= 0
4023	fa * fb > 0.0
4024	function == null
4025	lower >= upper
4026	function == null
4027	isBracketing(function, lower, upper)
3193	filePointer != null
3194	filePointer != null
3195	empiricalDistribution == null
3195	empiricalDistribution.getBinStats().size() == 0
3196	filePointer == null
3197	(str = filePointer.readLine()) == null
3198	(str = filePointer.readLine()) == null
2255	incMoment
2256	moment.n == 0
2257	moment.n == 1
2258	isBiasCorrected
2259	incMoment
2260	values == null
2261	test(values, begin, length)
2262	length == 1
2263	length > 1
2264	test(values, weights,begin, length)
2265	length == 1
2266	length > 1
2267	test(values, begin, length)
2268	length == 1
2269	length > 1
2270	isBiasCorrected
2271	test(values, weights, begin, length)
2272	length == 1
2273	length > 1
2274	isBiasCorrected
805	s == 0
806	this == other
807	other instanceof Vector1D
808	rhs.isNaN()
809	isNaN()
801	parsePosition.getIndex() == 0
802	coordinates == null
864	v.length != 2
865	s == 0
866	this == other
867	other instanceof Vector2D
868	rhs.isNaN()
869	isNaN()
819	parsePosition.getIndex() == 0
820	coordinates == null
752	v.length != 3
753	s == 0
754	threshold == 0
755	FastMath.abs(x) <= threshold
756	FastMath.abs(y) <= threshold
757	normProduct == 0
758	dot > threshold
758	dot < -threshold
759	dot >= 0
760	this == other
761	other instanceof Vector3D
762	rhs.isNaN()
763	isNaN()
666	parsePosition.getIndex() == 0
667	coordinates == null
656	i > 0
657	CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)
658	i > 0
659	CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)
660	c == null
661	CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)
2285	v.length != sums.length
2286	n > 1
2287	this == obj
2288	obj instanceof VectorialCovariance
2289	isBiasCorrected != other.isBiasCorrected
2290	n != other.n
2291	Arrays.equals(productsSums, other.productsSums)
2292	Arrays.equals(sums, other.sums)
2307	v.length != means.length
2308	this == obj
2309	obj instanceof VectorialMean
2310	Arrays.equals(means, other.means)
1121	alpha <= 0
1122	beta <= 0
1123	x < 0
1124	x <= 0.0
1125	p > 1.0
1125	p < 0.0
1126	p == 0
1127	p == 1
1128	numericalMeanIsCalculated
1129	numericalVarianceIsCalculated
3114	weight.getColumnDimension() != weight.getRowDimension()
2235	weight.getColumnDimension() != weight.getRowDimension()
2390	x == null
2390	y == null
2391	y.length == 0
2391	x.length == 0
2392	y.length != x.length
2393	z == null
2394	z.length == 0
2395	z[i] > 0
2396	((i >> j) & 1) == 1
2397	rankSum >= Wmax
2398	N > 30
2398	exactPValue
2399	exactPValue
1288	numberOfElements <= 0
1289	exponent <= 0
1290	x > numberOfElements
1290	x <= 0
1291	x <= 0
1292	x >= numberOfElements
1293	numericalMeanIsCalculated
1294	numericalVarianceIsCalculated
