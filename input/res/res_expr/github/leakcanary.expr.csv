id	line	column	filename	methodname	varname	vartype	else	return	right
41	57	4	HahaHelper.java	threadName	nameField	Object	0	RET	$ == null
56559	68	4	HahaHelper.java	extendsThread	parentClass	ClassObj	0	NIL-WHILE	$.getSuperClassObj() != null
42	69	6	HahaHelper.java	extendsThread	clazz	ClassObj	0	DEF	$.getClassName().equals(Thread.class.getName())
43	84	4	HahaHelper.java	asString	count	Integer	0	RET	$ == 0
44	93	4	HahaHelper.java	asString	THIS	HahaHelper	1	RET	$.isCharArray(value)
44	93	4	HahaHelper.java	asString	value	Object	1	RET	isCharArray($)
45	101	6	HahaHelper.java	asString	THIS	HahaHelper	0	DEF	$.hasField(values, "offset")
45	101	6	HahaHelper.java	asString	values	List<FieldValue>	0	DEF	hasField($, "offset")
46	108	11	HahaHelper.java	asString	THIS	HahaHelper	1	RuntimeException:RET	$.isByteArray(value)
46	108	11	HahaHelper.java	asString	value	Object	1	RuntimeException:RET	isByteArray($)
47	132	4	HahaHelper.java	isPrimitiveWrapper	value	Object	0	RET	$ instanceof ClassInstance
48	139	4	HahaHelper.java	isPrimitiveOrWrapperArray	value	Object	0	RET	$ instanceof ArrayInstance
49	143	4	HahaHelper.java	isPrimitiveOrWrapperArray	THIS	HahaHelper	0	RET	arrayInstance.getArrayType() != $.Type.OBJECT
49	143	4	HahaHelper.java	isPrimitiveOrWrapperArray	arrayInstance	ArrayInstance	0	RET	$.getArrayType() != Type.OBJECT
50	164	6	HahaHelper.java	fieldValue	THIS	HahaHelper	0	RET	$.fieldValue.getField().getName().equals(fieldName)
50	164	6	HahaHelper.java	fieldValue	fieldName	String	0	RET	fieldValue.getField().getName().equals($)
51	174	6	HahaHelper.java	hasField	THIS	HahaHelper	0	RET	$.fieldValue.getField().getName().equals(fieldName)
51	174	6	HahaHelper.java	hasField	fieldName	String	0	RET	fieldValue.getField().getName().equals($)
0	23	4	HahaSpy.java	allocatingThread	instance	Instance	1	DEF	$ instanceof RootObj
52	69	4	HeapAnalyzer.java	findTrackedReferences	heapDumpFile	File	0	IllegalArgumentException	$.exists()
53	86	8	HeapAnalyzer.java	findTrackedReferences	instance	Instance	0	DEF	$ != null
54	105	4	HeapAnalyzer.java	checkForLeak	heapDumpFile	File	0	RET	$.exists()
55	119	6	HeapAnalyzer.java	checkForLeak	leakingRef	Instance	0	RET	$ == null
56	139	6	HeapAnalyzer.java	deduplicateGcRoots	key	String	0	DEF	uniqueRootMap.containsKey($)
56	139	6	HeapAnalyzer.java	deduplicateGcRoots	uniqueRootMap	THashMap	0	DEF	$.containsKey(key)
57	163	6	HeapAnalyzer.java	findLeakingReference	keyCandidate	String	0	RET	$.equals(key)
57	163	6	HeapAnalyzer.java	findLeakingReference	key	String	0	RET	keyCandidate.equals($)
58	179	4	HeapAnalyzer.java	findLeakTrace	THIS	HeapAnalyzer	0	RET	result.$.leakingNode == null
58	179	4	HeapAnalyzer.java	findLeakTrace	result	Result	0	RET	$.leakingNode == null
59	214	6	HeapAnalyzer.java	computeIgnoredBitmapRetainedSize	THIS	HeapAnalyzer	0	DEF	$.isIgnoredDominator(leakingInstance, $.bitmapInstance)
59	214	6	HeapAnalyzer.java	computeIgnoredBitmapRetainedSize	leakingInstance	Instance	0	DEF	isIgnoredDominator($, bitmapInstance)
60	217	8	HeapAnalyzer.java	computeIgnoredBitmapRetainedSize	mBufferInstance	ArrayInstance	0	DEF	$ == null
61	224	8	HeapAnalyzer.java	computeIgnoredBitmapRetainedSize	bufferSize	long	0	DEF	bitmapSize < $
61	224	8	HeapAnalyzer.java	computeIgnoredBitmapRetainedSize	bitmapSize	long	0	DEF	$ < bufferSize
62	237	6	HeapAnalyzer.java	isIgnoredDominator	THIS	HeapAnalyzer	1	DEF	((RootObj) immediateDominator).getRootType() == $.RootType.UNKNOWN
62	237	6	HeapAnalyzer.java	isIgnoredDominator	immediateDominator	Instance	1	DEF	((RootObj) $).getRootType() == RootType.UNKNOWN
62	237	6	HeapAnalyzer.java	isIgnoredDominator	immediateDominator	Instance	1	DEF	$ instanceof RootObj
63	245	6	HeapAnalyzer.java	isIgnoredDominator	instance	Instance	0	RET	$ == null
64	248	6	HeapAnalyzer.java	isIgnoredDominator	dominator	Instance	0	RET	instance == $
64	248	6	HeapAnalyzer.java	isIgnoredDominator	instance	Instance	0	RET	$ == dominator
56560	258	4	HeapAnalyzer.java	buildLeakTrace	node	LeakNode	0	NIL-WHILE	$ != null
65	260	6	HeapAnalyzer.java	buildLeakTrace	element	LeakTraceElement	0	DEF	$ != null
66	269	4	HeapAnalyzer.java	buildLeakElement	THIS	HeapAnalyzer	0	RET	node.$.parent == null
66	269	4	HeapAnalyzer.java	buildLeakElement	node	LeakNode	0	RET	$.parent == null
67	275	4	HeapAnalyzer.java	buildLeakElement	holder	Instance	0	RET	$ instanceof RootObj
68	288	4	HeapAnalyzer.java	buildLeakElement	holder	Instance	1	DEF	$ instanceof ClassObj
69	290	11	HeapAnalyzer.java	buildLeakElement	holder	Instance	1	DEF	$ instanceof ArrayInstance
70	294	6	HeapAnalyzer.java	buildLeakElement	THIS	HeapAnalyzer	1	DEF	$.extendsThread(classObj)
70	294	6	HeapAnalyzer.java	buildLeakElement	classObj	ClassObj	1	DEF	extendsThread($)
71	298	13	HeapAnalyzer.java	buildLeakElement	className	String	1	DEF	$.matches(ANONYMOUS_CLASS_NAME_PATTERN)
72	300	8	HeapAnalyzer.java	buildLeakElement	parentClassName	String	1	DEF	Object.class.getName().equals($)
73	308	12	HeapAnalyzer.java	buildLeakElement	THIS	HeapAnalyzer	1	DEF	interfaces.$.length > 0
73	308	12	HeapAnalyzer.java	buildLeakElement	interfaces	Class<?>[]	1	DEF	$.length > 0
74	332	4	HeapAnalyzer.java	describeFields	instance	Instance	1	DEF	$ instanceof ClassObj
75	339	11	HeapAnalyzer.java	describeFields	instance	Instance	1	DEF	$ instanceof ArrayInstance
76	341	6	HeapAnalyzer.java	describeFields	THIS	HeapAnalyzer	0	DEF	arrayInstance.getArrayType() == $.Type.OBJECT
76	341	6	HeapAnalyzer.java	describeFields	arrayInstance	ArrayInstance	0	DEF	$.getArrayType() == Type.OBJECT
56561	343	8	HeapAnalyzer.java	describeFields	THIS	HeapAnalyzer	0	NIL-FOR	i < values.$.length
56561	343	8	HeapAnalyzer.java	describeFields	i	int	0	NIL-FOR	$ < values.length
56561	343	8	HeapAnalyzer.java	describeFields	values	Object[]	0	NIL-FOR	i < $.length
77	362	4	HeapAnalyzer.java	getClassName	instance	Instance	1	DEF	$ instanceof ClassObj
78	365	11	HeapAnalyzer.java	getClassName	instance	Instance	1	DEF	$ instanceof ArrayInstance
56555	38	4	LeakTrace.java	toString	THIS	LeakTrace	0	NIL-FOR	i < $.elements.size()
56555	38	4	LeakTrace.java	toString	i	int	0	NIL-FOR	$ < elements.size()
1	41	6	LeakTrace.java	toString	i	int	1	DEF	$ == 0
2	43	13	LeakTrace.java	toString	THIS	LeakTrace	1	DEF	i == $.elements.size() - 1
2	43	13	LeakTrace.java	toString	i	int	1	DEF	$ == elements.size() - 1
3	71	4	LeakTraceElement.java	toString	THIS	LeakTraceElement	0	DEF	$.type == STATIC_FIELD
4	75	4	LeakTraceElement.java	toString	THIS	LeakTraceElement	0	DEF	$.holder == THREAD
4	75	4	LeakTraceElement.java	toString	THIS	LeakTraceElement	0	DEF	$.holder == ARRAY
5	81	4	LeakTraceElement.java	toString	THIS	LeakTraceElement	1	DEF	$.referenceName != null
6	87	4	LeakTraceElement.java	toString	THIS	LeakTraceElement	0	DEF	$.extra != null
7	91	4	LeakTraceElement.java	toString	THIS	LeakTraceElement	0	DEF	$.exclusion != null
8	100	4	LeakTraceElement.java	toDetailedString	THIS	LeakTraceElement	1	DEF	$.holder == ARRAY
9	102	11	LeakTraceElement.java	toDetailedString	THIS	LeakTraceElement	1	DEF	$.holder == CLASS
56556	86	4	ShortestPathFinder.java	findPath	THIS	ShortestPathFinder	0	NIL-WHILE	$.toVisitQueue.isEmpty()
56556	86	4	ShortestPathFinder.java	findPath	THIS	ShortestPathFinder	0	NIL-WHILE	$.toVisitIfNoPathQueue.isEmpty()
10	88	6	ShortestPathFinder.java	findPath	THIS	ShortestPathFinder	1	DEF	$.toVisitQueue.isEmpty()
11	92	8	ShortestPathFinder.java	findPath	THIS	ShortestPathFinder	0	IllegalStateException	node.$.exclusion == null
11	92	8	ShortestPathFinder.java	findPath	node	LeakNode	0	IllegalStateException	$.exclusion == null
12	99	6	ShortestPathFinder.java	findPath	THIS	ShortestPathFinder	0	DEF	node.$.instance == leakingRef
12	99	6	ShortestPathFinder.java	findPath	node	LeakNode	0	DEF	$.instance == leakingRef
12	99	6	ShortestPathFinder.java	findPath	leakingRef	Instance	0	DEF	node.instance == $
13	104	6	ShortestPathFinder.java	findPath	THIS	ShortestPathFinder	0	DEF	$.checkSeen(node)
13	104	6	ShortestPathFinder.java	findPath	node	LeakNode	0	DEF	checkSeen($)
14	108	6	ShortestPathFinder.java	findPath	THIS	ShortestPathFinder	1	DEF	node.$.instance instanceof RootObj
14	108	6	ShortestPathFinder.java	findPath	node	LeakNode	1	DEF	$.instance instanceof RootObj
15	110	13	ShortestPathFinder.java	findPath	THIS	ShortestPathFinder	1	DEF	node.$.instance instanceof ClassObj
15	110	13	ShortestPathFinder.java	findPath	node	LeakNode	1	DEF	$.instance instanceof ClassObj
16	112	13	ShortestPathFinder.java	findPath	THIS	ShortestPathFinder	1	DEF	node.$.instance instanceof ClassInstance
16	112	13	ShortestPathFinder.java	findPath	node	LeakNode	1	DEF	$.instance instanceof ClassInstance
17	114	13	ShortestPathFinder.java	findPath	THIS	ShortestPathFinder	1	DEF	node.$.instance instanceof ArrayInstance
17	114	13	ShortestPathFinder.java	findPath	node	LeakNode	1	DEF	$.instance instanceof ArrayInstance
18	138	10	ShortestPathFinder.java	enqueueGcRoots	THIS	ShortestPathFinder	0	DEF	params.$.alwaysExclude
18	138	10	ShortestPathFinder.java	enqueueGcRoots	params	Exclusion	0	DEF	$ == null
18	138	10	ShortestPathFinder.java	enqueueGcRoots	params	Exclusion	0	DEF	$.alwaysExclude
19	182	4	ShortestPathFinder.java	visitRootObj	THIS	ShortestPathFinder	1	DEF	rootObj.getRootType() == $.RootType.JAVA_LOCAL
19	182	4	ShortestPathFinder.java	visitRootObj	rootObj	RootObj	1	DEF	$.getRootType() == RootType.JAVA_LOCAL
20	187	6	ShortestPathFinder.java	visitRootObj	THIS	ShortestPathFinder	0	DEF	node.$.exclusion != null
20	187	6	ShortestPathFinder.java	visitRootObj	node	LeakNode	0	DEF	$.exclusion != null
21	203	6	ShortestPathFinder.java	visitClassObj	THIS	ShortestPathFinder	0	DEF	field.getType() != $.Type.OBJECT
21	203	6	ShortestPathFinder.java	visitClassObj	field	Field	0	DEF	$.getType() != Type.OBJECT
22	207	6	ShortestPathFinder.java	visitClassObj	fieldName	String	0	DEF	$.equals("$staticOverhead")
23	212	6	ShortestPathFinder.java	visitClassObj	ignoredStaticFields	Map<String,Exclusion>	0	DEF	$ != null
24	214	8	ShortestPathFinder.java	visitClassObj	params	Exclusion	0	DEF	$ != null
25	216	10	ShortestPathFinder.java	visitClassObj	THIS	ShortestPathFinder	0	DEF	params.$.alwaysExclude
25	216	10	ShortestPathFinder.java	visitClassObj	params	Exclusion	0	DEF	$.alwaysExclude
26	221	6	ShortestPathFinder.java	visitClassObj	visit	boolean	0	DEF	$
56557	232	4	ShortestPathFinder.java	visitClassInstance	superClassObj	ClassObj	0	NIL-WHILE	$ != null
27	234	6	ShortestPathFinder.java	visitClassInstance	params	Exclusion	0	DEF	$ != null
28	236	8	ShortestPathFinder.java	visitClassInstance	THIS	ShortestPathFinder	0	DEF	classExclusion.$.alwaysExclude
28	236	8	ShortestPathFinder.java	visitClassInstance	classExclusion	Exclusion	0	DEF	$ == null
28	236	8	ShortestPathFinder.java	visitClassInstance	classExclusion	Exclusion	0	DEF	$.alwaysExclude
29	242	6	ShortestPathFinder.java	visitClassInstance	classIgnoredFields	Map<String,Exclusion>	0	DEF	$ != null
30	248	4	ShortestPathFinder.java	visitClassInstance	THIS	ShortestPathFinder	0	RET	classExclusion.$.alwaysExclude
30	248	4	ShortestPathFinder.java	visitClassInstance	classExclusion	Exclusion	0	RET	$ != null
30	248	4	ShortestPathFinder.java	visitClassInstance	classExclusion	Exclusion	0	RET	$.alwaysExclude
31	255	6	ShortestPathFinder.java	visitClassInstance	THIS	ShortestPathFinder	0	DEF	field.getType() != $.Type.OBJECT
31	255	6	ShortestPathFinder.java	visitClassInstance	field	Field	0	DEF	$.getType() != Type.OBJECT
32	262	6	ShortestPathFinder.java	visitClassInstance	THIS	ShortestPathFinder	0	DEF	params.$.alwaysExclude
32	262	6	ShortestPathFinder.java	visitClassInstance	THIS	ShortestPathFinder	0	DEF	fieldExclusion.$.alwaysExclude
32	262	6	ShortestPathFinder.java	visitClassInstance	fieldExclusion	Exclusion	0	DEF	$ == null
32	262	6	ShortestPathFinder.java	visitClassInstance	fieldExclusion	Exclusion	0	DEF	$.alwaysExclude
32	262	6	ShortestPathFinder.java	visitClassInstance	params	Exclusion	0	DEF	$ != null
32	262	6	ShortestPathFinder.java	visitClassInstance	params	Exclusion	0	DEF	$.alwaysExclude
33	273	4	ShortestPathFinder.java	visitArrayInstance	THIS	ShortestPathFinder	0	DEF	arrayType == $.Type.OBJECT
33	273	4	ShortestPathFinder.java	visitArrayInstance	arrayType	Type	0	DEF	$ == Type.OBJECT
56558	275	6	ShortestPathFinder.java	visitArrayInstance	THIS	ShortestPathFinder	0	NIL-FOR	i < values.$.length
56558	275	6	ShortestPathFinder.java	visitArrayInstance	i	int	0	NIL-FOR	$ < values.length
56558	275	6	ShortestPathFinder.java	visitArrayInstance	values	Object[]	0	NIL-FOR	i < $.length
34	284	4	ShortestPathFinder.java	enqueue	child	Instance	0	RET	$ == null
35	287	4	ShortestPathFinder.java	enqueue	THIS	ShortestPathFinder	0	RET	$.isPrimitiveOrWrapperArray(child)
35	287	4	ShortestPathFinder.java	enqueue	THIS	ShortestPathFinder	0	RET	$.isPrimitiveWrapper(child)
35	287	4	ShortestPathFinder.java	enqueue	child	Instance	0	RET	isPrimitiveOrWrapperArray($)
35	287	4	ShortestPathFinder.java	enqueue	child	Instance	0	RET	isPrimitiveWrapper($)
36	291	4	ShortestPathFinder.java	enqueue	THIS	ShortestPathFinder	0	RET	$.toVisitSet.contains(child)
36	291	4	ShortestPathFinder.java	enqueue	child	Instance	0	RET	toVisitSet.contains($)
37	295	4	ShortestPathFinder.java	enqueue	THIS	ShortestPathFinder	0	RET	$.toVisitIfNoPathSet.contains(child)
37	295	4	ShortestPathFinder.java	enqueue	visitNow	boolean	0	RET	$
37	295	4	ShortestPathFinder.java	enqueue	child	Instance	0	RET	toVisitIfNoPathSet.contains($)
38	298	4	ShortestPathFinder.java	enqueue	THIS	ShortestPathFinder	0	RET	$.isString(child)
38	298	4	ShortestPathFinder.java	enqueue	THIS	ShortestPathFinder	0	RET	$.canIgnoreStrings
38	298	4	ShortestPathFinder.java	enqueue	child	Instance	0	RET	isString($)
39	301	4	ShortestPathFinder.java	enqueue	THIS	ShortestPathFinder	0	RET	$.visitedSet.contains(child)
39	301	4	ShortestPathFinder.java	enqueue	child	Instance	0	RET	visitedSet.contains($)
40	305	4	ShortestPathFinder.java	enqueue	visitNow	boolean	1	DEF	$
